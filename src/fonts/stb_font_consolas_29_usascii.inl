// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_29_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_29_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_29_usascii_BITMAP_WIDTH         256
#define STB_FONT_consolas_29_usascii_BITMAP_HEIGHT        114
#define STB_FONT_consolas_29_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_29_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_29_usascii_NUM_CHARS             95

#define STB_FONT_consolas_29_usascii_LINE_SPACING          19

static unsigned int stb__consolas_29_usascii_pixels[]={
    0x00000066,0xbb95d4c0,0x8100000a,0x04cccccc,0x66640040,0x98803ccc,
    0x372e6000,0x0000001b,0x00006000,0x00000000,0x565cc000,0x2a000000,
    0xb003fe22,0x88005a85,0xffb5fffd,0x220001bf,0x3fffe5fe,0xfeb807ff,
    0xff880cef,0xd806ffff,0xfff9002f,0x0001dfff,0x06fb9ff4,0x07fff900,
    0xd000bfe2,0x0017f69f,0x3bf65ff7,0xffb1002c,0x7c409fff,0x204fffff,
    0x1ff15ffd,0xf887fe40,0x7ff4004f,0xfff931ce,0x3fee000b,0xf955551f,
    0x6fff440f,0x7c41fffd,0x802aaabf,0xffe801fe,0x1effecce,0x10ff9800,
    0xfd8003ff,0xfc83ffde,0xb4fe8005,0xffb800bf,0x3dffffb2,0xfccffd80,
    0xfff102ff,0x3e209fff,0x0ff88fff,0xfa83ff70,0x5ff5003f,0x002ffb80,
    0x500fffa8,0x13fa20ff,0xff883fee,0x3fea6001,0x0ffee01b,0x20017fee,
    0x027ec4fd,0x37d4ff10,0x20003fea,0x00bfb4fe,0x5512ffb8,0x2605fffb,
    0x02ffc2ff,0x7fc09fd0,0x501ff17f,0x3fee05ff,0x807fc802,0x70003ff8,
    0x83fd4059,0x8ff204fd,0xfb801ff8,0x87ffffff,0x3f204ff8,0x3fe2001f,
    0x8007fcc1,0x89fe24fa,0xfd0002fe,0x70017f69,0x3fe605ff,0xc87fb80f,
    0x13fa007f,0xff11dd98,0xd809fd01,0x04fd806f,0x00009fb0,0x7dc3fd40,
    0xf137c406,0x7ff4403f,0x87feefef,0x3e200ffb,0x1bee004f,0xfa801ff4,
    0x0bf93fc5,0xfda7f400,0x17fdc005,0xf709ff30,0x005fc81f,0xf10013fa,
    0x00ffb81f,0x36027fc4,0x09f9004f,0x4cccccc4,0x1fea0099,0x3fa007fa,
    0x6c03ff11,0x25fa8aff,0xe806fd80,0x0bfe006f,0xf98037d4,0x7fcdbea7,
    0x22aa6000,0x98bfb4fe,0x03ff501a,0xffa87fe8,0x800ffe62,0x7c4004fe,
    0x00ffe20f,0xfb007fe4,0x813f2009,0xfffffffc,0x51fea06f,0x4bee00bf,
    0xff101ff8,0x3a027dc9,0x07fc804f,0xff80ff50,0xf9dfd002,0x200bfa5f,
    0xffffffd8,0x3eebfb4f,0x7d41ffff,0x83fe401f,0x6ffa8efe,0x0027f400,
    0x7fb83fe2,0x80ffe200,0x9f9004fd,0x777775c0,0x3ea06ffe,0xfd317ec7,
    0x27f71fdf,0xff301ff8,0x3e017e47,0x07fc803f,0xfc807fd0,0xfffd1005,
    0x2a017f27,0xffecefff,0xff99fb4f,0x541fffdb,0x37ec01ff,0x5fffffa8,
    0x004fe800,0x9fd07fc4,0x206fd800,0xbf7002fd,0x81bf2000,0xf33fc7fa,
    0x3eafffdf,0x7c03ff14,0x8807f66f,0xffb803ff,0x007fcc00,0x88003fe2,
    0x1003fe61,0x9fd01bff,0xa837fff6,0x07fea4ff,0x3a04ffb8,0xd0002fff,
    0xff88009f,0x8005ff10,0xff880ffb,0x01ff3000,0x540df900,0xfe9be67f,
    0x57e6bf73,0x3f201ff8,0x200feaef,0xfb803ff8,0x005fc807,0x740009fb,
    0x06fc803f,0x2ffed3fa,0x3fea7fc8,0x3fffba61,0xffffd106,0x7401cc85,
    0x7fc4004f,0x8001ff70,0xb3312ff8,0xefe800df,0xdf90009a,0x9f73fd40,
    0x34fc9be6,0x007fe2bf,0x01fffffb,0xfc804ff8,0x00ffc407,0x8000ffa8,
    0x7ff006fb,0x6fda7f40,0x7cc3fea0,0x3bffe60f,0xf5dfd103,0x0bfe21ff,
    0x7d409fd0,0x2e1ff12f,0x7ff0007f,0x000bbff6,0x8027ffd4,0x9fea06fc,
    0x6c9f92fc,0x3e29f53f,0xffea801f,0xbff00cff,0xb80dfb00,0x1ff4006f,
    0x987fe200,0x201ff880,0x40bfb4fe,0x1ff31ff9,0x32007fcc,0x1dff50ff,
    0xfe803ff3,0x2ffff104,0x0df90ff8,0x7653fe00,0x44001dff,0x9003effd,
    0x93fd40df,0xfe8bf65f,0x3fe27f52,0x3ffee001,0x07fe82ff,0x7f404ff8,
    0x037dc003,0x7fdcffa0,0x03fea0ef,0x0bfb4fe8,0xff997fc4,0x3e01fe60,
    0x5effdc4f,0x27f400ff,0x88ffff88,0x00bfb0ff,0xf9113fa0,0x03ff800f,
    0x2a06fc80,0x7fc7f67f,0x9fdc3fe1,0x2e001ff8,0x42fffcdf,0x3ea01ffb,
    0x01fea01f,0x4007fe20,0xf9ff56fb,0x007fd4df,0x817f69fd,0x1ff31ff9,
    0x3e203fcc,0xffffd82f,0x204fe806,0x1ff13ffc,0x7c001bf2,0x003ff04f,
    0x64001be6,0xe9fea06f,0x3e23ff1f,0x7fc47f27,0x44ff2001,0x77fc46ff,
    0x405ff880,0xf90004fd,0x23ff100b,0x547fe1fe,0x53fa00ff,0x3fea05fd,
    0x4c889910,0x441ffc40,0xe803fffe,0xf104404f,0x001fee1f,0x7ec0ffe6,
    0x00bf7003,0xfa81bf20,0x8ff43fa7,0xf89fa7fa,0x8bf6001f,0x7fe40ffb,
    0xffea88ae,0x003fe201,0x2007fcc0,0xd8ff14fd,0x205ff32f,0x0bfb4ffb,
    0x00003fe4,0x7fcc1bfe,0x04fe801f,0xfa87fc40,0x7fdc000f,0x2009fb02,
    0xf90004fc,0xfb3fd40d,0xbff4bf63,0x07fe25fa,0x3f21fe80,0xffffc80f,
    0x6401ffff,0x7f40005f,0xf89bea03,0xbff17ec7,0x369fff50,0x87ff105f,
    0xc802a82a,0x3fa60dff,0x7f400eff,0x87fc4004,0x6c002ff9,0x09fb00ff,
    0x40013f20,0x9fea06fc,0xddff72fc,0x441ffdf9,0x3fe001ff,0x540dff10,
    0x01cffffd,0x40002ff8,0x3ff107fa,0x1ff12ff8,0xfb89ffe4,0x3dfb4fef,
    0x7e46fe98,0x00fff23f,0x3ffffffa,0x405ffdff,0x7c4004fe,0x0017fa0f,
    0x27ec0bfd,0x0004fc80,0x3fd40df9,0x3bee27f7,0x441efd89,0x57b501ff,
    0xfffb5ff3,0x01ff5003,0x0001bea0,0x27ec17fc,0x27f6ffdc,0x3fffffa2,
    0xffb4fc9f,0x3dfffdff,0x3fa5ffe8,0xffd7005f,0x3ff619df,0xffffff93,
    0x880dffff,0x03fee0ff,0xb01ffc40,0x13f2009f,0x5037e400,0x0027dcff,
    0x2a03ff10,0xffffffff,0xff1002ff,0x00ffa009,0x2a37dc00,0xfff900ef,
    0x3fff6209,0x2e69f90d,0x03effffe,0x7fdc5ff7,0x20018002,0xfffffffc,
    0x7c406fff,0x017fe20f,0x3f603fe4,0x009f9004,0xfa817f60,0x8001fe27,
    0xb9101ff8,0x079dfffd,0x139ffb00,0x07fcc3d5,0x1ff88000,0x0c003000,
    0x11000800,0x00000110,0xf8800000,0x01ffdc0f,0xf900bfe6,0x013fe00d,
    0xa813fe20,0x0017ec7f,0x7001ff88,0xe880009f,0x25ffffff,0x400004fd,
    0x000004fd,0x00000000,0x00000000,0x07fc4000,0xfb007ff4,0x03ff700d,
    0x8003ff98,0x3ea02ffb,0x0007fd47,0xc800ffc4,0xc880002f,0x3e23effe,
    0x4c00001f,0x000000ff,0x00000000,0x00000000,0x03fe2000,0x7e41bfe6,
    0xfff8801f,0xff93109c,0x26fa201f,0x4c5ffda9,0xd87fb999,0x1aa20aff,
    0x4ccd7fc4,0x0003fb00,0x00000000,0x00000000,0x00000000,0x00000000,
    0x807fc400,0x7fdc4ffb,0x3ffea002,0x5ffffb5f,0x7ffffc40,0x7ffc0dff,
    0xff907fff,0x20ffffdf,0x6ffffff8,0x00001550,0x00000000,0x00000000,
    0x00000000,0x00000000,0x9007fc40,0x0bfe21ff,0x53b2e200,0xa800bcec,
    0xb02cefed,0x40dddddd,0x02ceedb9,0x3bbbbba2,0x00000005,0x00000000,
    0x00000000,0x00000000,0x00000000,0x39003fe2,0x000003a8,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xf8800000,
    0x0000000f,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00003ba2,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x26000000,0x00988009,0x00000022,0x33335531,0x01300013,0x8c42aa60,
    0x00d4c098,0x30003730,0x44037b97,0xcccccccc,0x372a203c,0xa998001b,
    0x6edd404c,0x0055002c,0x0599b751,0xbcddcb98,0xf50ae201,0x1ff6000f,
    0x2a09ff10,0x0bfb02ff,0x3fffee00,0x005fffff,0x0bffffd7,0xffffffb1,
    0x7dcff69f,0x4401ffff,0x7e4002ff,0x80efffff,0xfffffff8,0xfff706ff,
    0x71009fff,0x20fffffd,0xffffffe9,0x17ff602f,0xffffffc8,0x7fecc0ff,
    0x207fffff,0x1fea3fff,0x017fd400,0x3fa03ff5,0x00bfb06f,0xd77bffb0,
    0x8809ddff,0x6ffffffe,0x766fffd4,0x99fb4fff,0x1fffdbff,0x0017fc40,
    0xfd99dffd,0xcff883df,0x83cccccc,0xfdbbdffc,0x3ffe605f,0xf884cdef,
    0xffdbacef,0xffff881f,0x6ffff440,0x220ffdcc,0xcbbdefff,0xffff106d,
    0xf0003fd4,0x037ec0bf,0x3f60bffb,0x17fd4005,0xfc8037f4,0xf88221cf,
    0xb4fe80df,0x7d41bfff,0x0bfe204f,0x5c1ffdc0,0x07fc45ff,0x709ff300,
    0xfff305ff,0x07ff2005,0x7fc13fe6,0x04ffd87f,0x003ffb0a,0x543fffa0,
    0x3f20007f,0x03ff880f,0x7ec03322,0x837e4005,0xff801ffa,0x206fc806,
    0x0bffb4fe,0x33331ff2,0x333337ff,0x9027fc41,0x07fc41ff,0x740bfb00,
    0x006fd85f,0xbfd02ff4,0xf5077660,0x5ff8007f,0x3ffe2000,0x4000ff50,
    0xffb83ff9,0x2fec0000,0x4c17f600,0x7fc401ff,0x01ffc403,0x81bf69fd,
    0xfff10ffa,0xffffffff,0x00ffdcbf,0x7fc49ff1,0x05ff1000,0xff307fdc,
    0x05fd8003,0x3a0013fe,0x7fc4007f,0x37fc0004,0x4cc40ff5,0xfd0dfd00,
    0x3333330b,0xa897f601,0x20dfb01a,0x7cc00ffa,0x0ffcc01f,0x17f69fd0,
    0xdd11ff98,0xddddffdd,0x037ec9dd,0x1ff137f4,0x403fea00,0x3f22fffc,
    0x2ffa8005,0x4001ffa8,0xf8003ff9,0xf30000ef,0x983fd47f,0xff500eff,
    0x2217fc43,0x04ffffff,0x3fff2bfb,0x1ffd41ef,0x2601bfa2,0x7fd401ff,
    0x7ed3fa00,0x40bfe205,0xfe802ff8,0x226fc804,0x5c009aff,0xfffd887f,
    0x4c4ffa3f,0x3fa2009a,0x0bff90cf,0x003ff500,0x005fff70,0x51bfee62,
    0x1dff30ff,0x3ee4ff80,0xfeeee887,0xfbbfb04f,0xd0dfffbf,0xfff99dff,
    0xf5333101,0x1333335f,0xfe803fea,0x7cc0bfb4,0x05ff101f,0xf9007ff0,
    0x7ffffc4f,0x37e40bef,0x3fabffea,0xffb9ff14,0x6c03dfff,0x03ffffff,
    0x001ff700,0x2fbfff60,0x33fff200,0x3e63fd40,0xffc800ef,0x3a009fd0,
    0xbfffb04f,0xf517fe41,0x1bffffdf,0x3fffffa0,0x3fffffff,0x7f401ff5,
    0x7cc0bfb4,0x05ff100f,0xb803ff88,0xffff10ff,0x6c3fffff,0x43bff25f,
    0xffff14fe,0x3fffd99d,0x6ffffec0,0x0ff90000,0xfffea800,0x1bcb80cf,
    0x7fccff50,0x5ff3000e,0x3a003ff3,0x0bffb04f,0x97f47ff1,0xffe80199,
    0xffffffff,0x05ff33ff,0x2fed3fee,0x7c40ff90,0x1ffc402f,0x2603fdc0,
    0xf90fffcb,0xe89ffd1b,0x03bff34f,0x3f60dff3,0x01ffffdf,0x0ff90ae2,
    0x3ff6a000,0xfa8002ff,0x001dff37,0x06fcdfe8,0x7ec13fa0,0xff93fa06,
    0xff980002,0xa85ff801,0x0bfb4fff,0xf880ffe2,0x04ff802f,0x2a006fc8,
    0xffff92ff,0x267ff05f,0x3fee02ff,0xb8bffa21,0xffd01fff,0x0007fdcb,
    0x3fff9300,0xf9ffa800,0xfa8000ef,0x3a003fff,0x40bfb04f,0x37ffe5fd,
    0x0009aaab,0xf9003ff3,0x3bfee27f,0x983dfb4f,0x7fc406fe,0x804fe802,
    0x7fc005fd,0x01dfff74,0x17fc4bfe,0x7e45ff10,0x06ff980f,0x3ea1ffff,
    0xa800001f,0x13ff25ff,0x0ffeffd4,0x1ffff000,0xd827f400,0xa97f605f,
    0xffffffff,0x7fcc01ef,0xfffe8801,0xb4fd9fff,0xfffdffff,0x2ff8803d,
    0xf807fd80,0xaff4004f,0x3e604ffa,0x880ffe1f,0x80ffa2ff,0xffc80ffc,
    0x009ff32f,0xb9ff6000,0x1ff503ff,0x20001ffd,0x74004ffc,0x40bfb04f,
    0x37fe65fd,0xffffeecc,0x007fe600,0x86fffec4,0xffffb4fe,0x22007dff,
    0xffb803ff,0x007fea01,0xff13ff88,0x3a37e407,0x47fe605f,0x3ee02ff9,
    0x1fff881f,0x00003ffa,0xffb9ff20,0x3e2ff503,0xfc8000ef,0x27f4000f,
    0x3f605fd8,0x5c07ff15,0x3fe603ff,0xfe818001,0x0022bfb4,0x44037fc0,
    0xff880eff,0x0ffec005,0xff301ff9,0xb00ffb87,0x027fc4ff,0x7fec0ff9,
    0x0037fea0,0x5cbfd000,0x4ff502ff,0x2000eff9,0xe8004ff9,0x40bfb04f,
    0x00ff75fd,0x7fcc09ff,0x9fd00001,0x200017f6,0x0221bffd,0x5115dff9,
    0x80883ffd,0x7c43ffd9,0x3ffe61ef,0x640eff80,0x5fff42ff,0x417fee20,
    0xffe84ff8,0x1d7311bf,0xd5106b2a,0x17fd45ff,0x7fd47fa8,0x1ffd1005,
    0x209fd000,0x57f605fd,0x3e601ffc,0x07fe603f,0xda7f4000,0xf880005f,
    0x85ffffff,0xfffffffc,0xffffb81f,0xf503ffff,0x1dffffff,0x3bbffea0,
    0xff884fff,0x6fffffff,0x07ff5cc4,0xffffffc8,0xfff50fff,0x7fffffff,
    0xf501ffa8,0x10bff70f,0x03fff755,0x6c13fa00,0x557f605f,0x9889aeff,
    0x2600effb,0xd00001ff,0x0017f69f,0x7fffec40,0xfffb504f,0x3fee01bf,
    0x400cefff,0x0cefffd9,0x7fffec40,0x3ff2201d,0xfb82efff,0x6d400dff,
    0x22cefffe,0xffffffe9,0x0cc881cf,0x3f20ff50,0x7fffc44f,0xfff9001e,
    0xdfffffff,0x5fd817f6,0x3ffffff2,0x4c00efff,0xd00001ff,0x0017f69f,
    0x80066200,0x33310009,0x0004c000,0x98800088,0x00ded401,0x98800c40,
    0xf5000019,0x127fec0f,0xc80079dd,0xffffffff,0x40bfb6ff,0x775c45fd,
    0x3001cdef,0x200003ff,0x009d93ed,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xcccc8800,0x931ccccc,0x80399009,
    0x0acddba8,0x566f65cc,0xccccc880,0x0ccccccc,0x97007991,0x800665c9,
    0x6dcc43cc,0x099700bc,0x4c99e5c0,0x50033200,0x2664c099,0xcc983320,
    0x98732e02,0xcccccccc,0x7970cccc,0xcb8e6540,0xcccccccc,0x44003ccc,
    0xffffffff,0x880ff72f,0xff9102ff,0x23ffffff,0xfffffff8,0x7fffc43f,
    0xffffffff,0xa80bff20,0x13fea3ff,0xfa8bfee0,0x83ffffff,0xf8801ffc,
    0x400ff33f,0xffd501ff,0x17ffd40f,0x7fdc3ff0,0x45fff107,0xfffffffa,
    0xfb0fffff,0xd93fe60b,0xffffffff,0xff55ffff,0x644fff4b,0xffcccccc,
    0xf880ff72,0xfffe982f,0x11ffdccd,0xffb757bf,0x7777445f,0xfffeeeee,
    0x441bfe20,0x0ffe86ff,0xff737fc0,0x3fff979d,0xb803ff98,0x01ff31ff,
    0xfd503fe0,0x7d40ffff,0x87fe06ff,0xfb81fffb,0x3bba63ff,0xfeeeeeee,
    0xf10bfb0f,0xccccb8df,0xccccdffd,0x7ecbff33,0x97fc401f,0x7fc407fb,
    0x01fffc42,0xbff30015,0x83ffa800,0xffc84ffa,0x204ff981,0x0fe61ffb,
    0x3fe1bfe6,0x226fd806,0xff8800ff,0x3b3fff60,0x3ffea07f,0x5c3ff02f,
    0xefe84fef,0x6fd8003f,0x3bfa17f6,0x01ff9800,0xffd93fe6,0xb97fc400,
    0x17fc407f,0x00007ff2,0x22007fe8,0x3ff606ff,0xd813fe60,0x5ff881ff,
    0x03ff2008,0x7c401ff9,0x007fe23f,0x1bf91fe2,0xffa81ff6,0x43ff06fc,
    0x7cc7fbfc,0x44003fdd,0x917f62ff,0x3e6003ff,0x93fe201f,0x7c400ffc,
    0x880ff72f,0x13fe62ff,0x0df90000,0x1007fec0,0x037f4bff,0x3f217fe6,
    0x7fd4000f,0x501ffcc1,0x01ff83ff,0x20cc7f98,0x3fea07fd,0x1ff81ff9,
    0xc8bfabf2,0x4004fcaf,0x52fec6fd,0x7cc005ff,0x8ffe201f,0xff8807fc,
    0xf880ff72,0x003fee2f,0x007fd000,0x2e00ffea,0x02ffaaff,0x3e21ffc8,
    0xffb8004f,0x3606ff80,0x4c2ff86f,0x6c03fcc0,0x75fea07f,0x361ff85f,
    0x3fe5fbaf,0x22004fc8,0x9afec2ff,0x7cc003ff,0x71ffc01f,0x5ff100ff,
    0xff101fee,0x00037ec5,0x2003ff20,0x3a006ff8,0x1005ffff,0x07fe4dff,
    0xc83fe400,0x07ff00ff,0x07fc45fd,0xffb00df5,0xffabfd40,0x5fb0ffc1,
    0x2bf51ff1,0x3f2004fc,0xfe8dfd86,0x1ff98005,0x7930e640,0x2e5ff100,
    0x17fc407f,0x55550bfd,0xccc98155,0xfb000dfe,0x7fcc003f,0x3ee000ff,
    0x003ff8af,0xf304ff88,0x01ff507f,0x17fdc7fd,0xffb00bf5,0xbfd3fd40,
    0x4bf61ff8,0xf72fcbfd,0x0ffe200b,0x01bf77f6,0x000ffcc0,0x4bfe2000,
    0x7fc407fb,0x3fe13fe2,0x7d42ffff,0x801cffff,0xd8003ffa,0xfe8004ff,
    0xd0006fce,0x2ffc01ff,0x3fd837e4,0x5fa97ffa,0x2a07fd80,0xf83fee7f,
    0x7d4bfa1f,0x017ee7fe,0xffd83fe4,0xf30002ff,0x8000003f,0x0ff72ff8,
    0x3fe2ff88,0xffeeed84,0x7ee55442,0x3fe203ff,0xfff98006,0x7fd4000f,
    0xfc8002ff,0x07fe401f,0x9fec0ffe,0xf70ffef8,0x40ffb009,0xf27fc7fa,
    0xff17f43f,0x402fdc9f,0xbfb03ff8,0x30001ffd,0xfb1003ff,0x7fc4007f,
    0xf880ff72,0x1017fa2f,0xf91005ff,0x07ff205f,0x3ffbfa00,0x5ffe8005,
    0x03ffc800,0x3e62ff98,0x2e9f900f,0x9f73fdbf,0x540ffb00,0xf87fdc7f,
    0xfc87fe1f,0x201bee1f,0x37f607fc,0x4000eff8,0x2e001ff9,0xff1003ff,
    0x8803fee5,0x01bf62ff,0x74005ff1,0x03ffa85f,0xfbaffb80,0x7fd4002f,
    0x1ffe4001,0x7e4bff00,0x7ed3ee06,0x07f96fb9,0x7d40ffb0,0xff9ffc47,
    0x6f987fe1,0x3e2037d4,0x4d7f603f,0x7cc005ff,0x7fcc001f,0x52ff9803,
    0x7fd401ff,0x8807ff21,0x3f6002ff,0x0037f446,0xffd2ffc4,0x0ffcc001,
    0x007ff900,0x7ff0ffc8,0xb7c6fdc0,0x03fc8ff8,0x3ea07fd8,0xff8ffc87,
    0x2a007fe1,0x07fe407f,0x7fdcbfb0,0x07fe6003,0x002aa200,0x3fe63ff7,
    0x983ff201,0x3fe205ff,0x913fa002,0xfb0003ff,0x02ffcc1f,0x2003ff30,
    0x98003ffc,0x00ff9aff,0xd93ebbea,0xd802fdbf,0x21fea07f,0x11ffbff8,
    0xff5003ff,0x2027fc40,0x0ffec5fd,0x001ff980,0x3ff60080,0x7c09ff10,
    0x03ffc86f,0x2a005ff1,0x0ffe62ff,0x20ffee00,0xf3002ffd,0x7ff9003f,
    0x667fc000,0x6f7d406f,0x3f7bee1f,0x207fd802,0xfdfb07fa,0x007fe23f,
    0xffc81fea,0x222fec00,0xf9800fff,0xea80001f,0x87ffb51a,0x3620cffc,
    0xfff881ff,0x4bfea0ad,0x4bff9100,0xaaaaffe8,0x220aaaaa,0xdff106ff,
    0x03ff3001,0xaaadffc8,0x200aaaaa,0x403ffffc,0x7c46fff9,0x4cc41fff,
    0x999ffe99,0x7cc1fea1,0x1ff11fff,0x220ff500,0x5fd804ff,0x9806ff98,
    0xa80001ff,0x5fffffff,0xfffffe88,0x3a203fff,0xffffffff,0xfffff92f,
    0x7d41bfff,0xffffffff,0x3ff62fff,0x013fee02,0xfd007fe6,0xffffffff,
    0x7fcc03ff,0x7fcc00ff,0x1fffd84f,0x7fffffdc,0xf50fffff,0x8fffec0f,
    0xf9800ff9,0x00ffc80f,0xff705fd8,0x01ff9809,0xfffc8800,0x7f5c03ef,
    0x7001dfff,0x7bfffffd,0x3fffff21,0xfffa81df,0xffffffff,0x00bff52f,
    0xf9803ffd,0x7fff401f,0xffffffff,0x037ffc01,0x540fffc4,0x7fdc0fff,
    0xffffffff,0x4c0ff50f,0x1ff31fff,0x881ff300,0xbfb004ff,0x3017fec0,
    0x800003ff,0x01300018,0x20198800,0x00001998,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xa8000000,
    0xcccccccc,0x809931cc,0x99951cc8,0xcc803579,0xcccccccc,0x99999911,
    0x32639999,0x001abccc,0x41e4c4c8,0x9abccccb,0x1e65c000,0x1332a000,
    0x55e6665c,0x000f2a01,0x00de6dd4,0x1400000a,0x8006aa20,0x1009aaa9,
    0x3fff2055,0x3fffffff,0x7c401ff5,0xfffff92f,0xff107fff,0xffffffff,
    0x3ffffe25,0xf72fffff,0xbfffffff,0xa8ff1001,0xffffd84f,0x800cffff,
    0x000ffff8,0x20ffff10,0xfffffffd,0x037ec0cf,0x3ffffa20,0x1bf903ff,
    0x3fa20000,0xffffe984,0x3fff203f,0x740cffff,0xccca84ff,0x1cccdffd,
    0x7c401ff5,0xb99ff92f,0xf887ffff,0xccccccdf,0x99bff11c,0x2e399999,
    0xffecccff,0x37cc02ff,0x3bf613ee,0x6fffdccc,0x2ffffa80,0xffffb000,
    0x3333bf60,0x360effff,0x3fe2006f,0x3ffdaabf,0x000effa8,0x217ff4c0,
    0xfecceffa,0x9ddff05f,0x7d4bfffd,0x7cc00fff,0x01ff501f,0x7fc97fc4,
    0x220fff98,0xff1003ff,0x41fee005,0x2a01fffa,0x6c1fe45f,0x05ff905f,
    0x05fedfd8,0x7fcffa80,0xf930bfb0,0x0037ecbf,0xff901dfb,0x03ffd301,
    0x03bfea00,0xff709ff1,0xfb103705,0x3fffea3f,0x80ffcc00,0x3e200ffa,
    0x320ff92f,0x0ffe22ff,0x8017fc40,0x3fe207fb,0xfb13ea05,0x7c0bfb05,
    0x2bfe204f,0x22000ffc,0xb07fbbff,0xb3fec0bf,0x3fe600df,0x207ff102,
    0x4003ffe8,0xfc80dffb,0x001bf606,0x7fec7ff3,0x01ff9803,0x7c401ff5,
    0x260ff92f,0x0ffe22ff,0x8017fc40,0x7fe407fb,0x3ffbbae1,0xeeeffeee,
    0x7fc0bfb1,0x263fea04,0x3f6002ff,0x3f60ff75,0x6c7fea05,0x1ff5006f,
    0x3602fec0,0xffb004ff,0x501ffc09,0x9fd000ff,0xff300088,0x803fea03,
    0x0ff92ff8,0xff887fea,0x05ff1003,0xf101fee0,0x7fffe47f,0xffffffff,
    0x220bfb2f,0x97f601ff,0xff5005ff,0x7ec1fee1,0x6cbfe605,0x0ff7006f,
    0xfb806fc8,0xffd100df,0x4dffc405,0xffb99999,0x2aaa6600,0x260004ff,
    0x1ff501ff,0xfc97fc40,0xf88dfd07,0x5ff1003f,0x201fee00,0x85fb04ff,
    0x10bfb07f,0x3ff80dfd,0x3a201ff2,0x6c1fee3f,0x43fee05f,0xff5006fd,
    0x803fdc01,0x74c0effa,0x7fcc01ff,0xffffffff,0x7fe441ff,0x04ffffff,
    0x407fe600,0xcccccffa,0xf92ffccc,0xffd7533f,0xaadff885,0x3e22aaaa,
    0xccccccdf,0x3a01fee4,0x443fd05f,0x99dfb07f,0xa809ffb9,0x0bfe60ff,
    0x7fb8df90,0x7f40bfb0,0x4c01bf66,0x3fee04ff,0x89ff9000,0xf9804ffd,
    0xccccccdf,0x3fe20ccc,0xffccccdf,0x3fe60004,0xfffff501,0x5fffffff,
    0x3ffffff2,0xfff881df,0x27ffffff,0xfffffff8,0x01fee7ff,0x07fc1bf6,
    0x3ff60df3,0x0bffffff,0x3fe1bf60,0x707fe605,0x217f60ff,0x3f61ffd9,
    0x33ff6006,0x7ffda999,0x207ffb00,0x7c405ffc,0xffd8002f,0x0009fd01,
    0xfa80ffcc,0xcccccccf,0xdff92ffc,0x2201dffd,0xeeeeeeff,0x2b3fe25e,
    0x2e2aaaaa,0x06fe807f,0xb05fa8ff,0xfd9999df,0x0ffe03ff,0x4fe81ff6,
    0xffb07fb8,0x5ffffddd,0x22006fd8,0xfffffffd,0x7f4407ff,0x77fd402f,
    0x000ffe00,0x4fe813fe,0x07fe6000,0xf1007fd4,0xd89ff25f,0x3ff880ff,
    0x005ff100,0x3fe01fee,0x7d47f885,0x2a0bfb04,0x1ffa86ff,0xfb82ffa8,
    0x360ff706,0xdfffffff,0x8006fd80,0xb9cdeeca,0x3ffe605f,0x3fff3001,
    0x0003ff60,0x3fee07ff,0x3fe60004,0x401ff501,0x8ff92ff8,0xff885ff8,
    0x05ff1003,0xf101fee0,0x3fffea9f,0xffffffff,0xc817f64f,0x4ffec1ff,
    0x4ff99999,0x4ccdffc4,0x199ffc99,0x026abbf6,0x0000dfb0,0xff504fd8,
    0xfe88001d,0x2eff882f,0x0efe8310,0x013fff66,0x501ff980,0x7fc401ff,
    0xff70ff92,0x003ff883,0x2e005ff1,0x8ffdc07f,0xeeffeee9,0x23eeeffe,
    0x3fea05fd,0x7fffffc2,0x547fffff,0xffffffff,0xb0ffffff,0x6fd800bf,
    0x17fc0000,0x0002ffe4,0xf509ffb1,0xffdddfff,0xfefffa87,0x004fddff,
    0x5407fe60,0x3fe200ff,0xff10ff92,0x003ff88b,0x2e005ff1,0x1bfe207f,
    0x0bf627dc,0xffb02fec,0x7ffffd41,0x2fffffff,0x3fffffea,0xffffffff,
    0xd800bfb0,0x3200006f,0x04ffd86f,0x09ff9000,0xffffffb1,0xffff505d,
    0x0013f25d,0xf501ff98,0x97fc401f,0x1ff907fc,0x8801ffc4,0xff7002ff,
    0x40bffa20,0x80ff44fb,0xfff105fd,0x7c406fd8,0x3fdc004f,0x6c005fd8,
    0xc880006f,0x02f981ff,0x00fdc000,0x44006662,0x33100001,0x3335ff73,
    0x8803fea1,0x20ff92ff,0x3fe24ff8,0x37ff1003,0x21333333,0xca999ffb,
    0x3f204fff,0xfd807fc3,0xfeca999e,0x4027fc1f,0x7dc007fd,0x800bfb07,
    0x99999efd,0x26662199,0x003fffca,0x00000000,0x90000000,0xffffffff,
    0x03fea7ff,0xff92ff88,0xf887fe40,0xfff1003f,0x5fffffff,0x3fffffee,
    0x7ec02fff,0xffb03fc2,0x5fffffff,0xa801ffa8,0x3ee001ff,0x800bfb07,
    0xfffffffd,0x3ffee7ff,0x0001dfff,0x00000000,0x32000000,0xffffffff,
    0x01ff53ff,0x7fc97fc4,0x7c53fe60,0xfff1003f,0x5fffffff,0x3bbfffee,
    0x43fd002d,0x3ff607f8,0xb03defff,0x3fe200df,0x41fee004,0x7ec005fd,
    0xffffffff,0x333bfee7,0x00000002,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x1aa98000,0x001aa880,0x826aaaa6,0x82620098,0x881a9819,0x206aa209,
    0x06a0a618,0x30033220,0x21310013,0x26600198,0x33333310,0x99883333,
    0x0004cc00,0x40264400,0x99999999,0x99501999,0x4cccc003,0x99999999,
    0x74c01999,0x81ffffff,0x3ffffffa,0x3ffffaa0,0x817f64ff,0x21ff15fd,
    0x20dffffc,0xffff93fd,0x7dc7ec3d,0x5ffe88ff,0x2007fcc0,0x7fc407fd,
    0x2200ff54,0xffff72ff,0x43ffffff,0x3f206ff9,0x003fc02f,0xf880fff6,
    0xffffffff,0xfffd87ff,0x3e6e985f,0xffffffff,0x07ffffff,0x3b7bffee,
    0x7ffe41ff,0xa86fffdd,0xfdccceff,0xfd817f64,0xffb3ff15,0x7ecbfffb,
    0xfffdffec,0x3b7ebf66,0x1ffcfdbf,0x5003fe60,0x7fd405ff,0x3001ff31,
    0x3bbaa1ff,0x1fffeeee,0x7d427fdc,0x006f804f,0x403ffbe6,0xeeeeeee8,
    0x7d46eeee,0x5c5ffddf,0x3bbbba6f,0xeeeeeeee,0xdff505ee,0x7fd41301,
    0x7c3ffc84,0x0bfb004f,0xeff8afec,0x43ff224f,0x7dc4fffd,0x26bffb2f,
    0x05fb2fef,0x7c007fcc,0x89bf605f,0x7f9801ff,0x20bff100,0x3fe21ffd,
    0x13741906,0x7e4ff409,0xfd000005,0x54f7fd49,0x000004fe,0xfd0037f4,
    0x887fec09,0xbfb002ff,0xff8afec0,0xb2ffa83f,0x7ff109ff,0x7fc47ff6,
    0xf9813f25,0x0ffc800f,0x7fc3ff88,0x1bea2642,0x88077f40,0x03ff26ff,
    0xaaecbfee,0x15fa82ff,0x000003ff,0xfffa85ff,0x3ba60fff,0x00eeeeee,
    0x400bfea0,0x3e601ff9,0x0037fe1f,0x5fd817f6,0x3e209ff1,0x740dfb3f,
    0x7c4bfb4f,0x9813f21f,0xff9800ff,0x740ffb83,0xb87fea3f,0x0ffd805f,
    0x7d67fcc0,0x37faa02f,0xd02efdde,0xa837dc1f,0xaaaaaaaa,0x405542aa,
    0x4c1effd9,0xffffffff,0x01fee000,0xff807fb8,0x073fff23,0x3f605fd8,
    0x4c05ff15,0x6c0bfb09,0x7c47fb5f,0x7653f20f,0xeeffeeee,0x6fe84eee,
    0x4fc84fe8,0x4fc93ff2,0x8017fdc0,0x004ffffb,0x405dffd5,0x43fe84fb,
    0xfffffff8,0x0007ffff,0x5ddddc40,0x32000bbb,0x1bf2006f,0xff913fe0,
    0xfd817dff,0x7c57f605,0x17f6002f,0x47fb5fd8,0x53f20ff8,0xfffffffe,
    0xb85fffff,0x07fe61ff,0x7fff97ee,0xff980ff6,0x37fec004,0x5dffd500,
    0x2603fe20,0x3bba20ff,0xeeeeeeee,0x00000006,0x0037ec00,0x7ff00df9,
    0xffffd710,0xfb02fec5,0x800bfe2b,0x57f605fd,0x83fe23fd,0x555554fc,
    0x55557ff7,0x649ff103,0x26df506f,0x5fd1fecf,0x001bfa20,0x801dffd1,
    0xfddecfeb,0xb01fe42e,0x000000bf,0x40000000,0x3ee007fb,0x402ff807,
    0xfb0fffc9,0xf8afec0b,0x17f6002f,0x47fb5fd8,0x13f20ff8,0x2000ff98,
    0x40ffe6fc,0xf75f97f9,0x7ec07fe9,0x7fec000f,0x3bee05ff,0x4bfeabd1,
    0x664404c8,0x00000000,0xf5000000,0x3fea003f,0x007fea01,0x6fd97fd4,
    0x3e2bff10,0x17f6002f,0x47fb5fd8,0x13f20ff8,0x2000ff98,0x0ffaaff9,
    0x2ff1ff10,0x707f8ff8,0xfb8003ff,0x203ffaaf,0x00713743,0x00000000,
    0x20000000,0xf1006ff8,0x02ff40bf,0x3f27ff10,0xafff440f,0x36002ff8,
    0x6d7f605f,0xc83fe23f,0x03fe604f,0xbfb9fd00,0x24fbff80,0xfa86fbfe,
    0x7fcc003f,0x4007ff24,0x0000006f,0x00000000,0x3fee0000,0xb86e60ae,
    0x3f620dff,0x2602a61f,0x9ff51ffd,0x57fffa61,0x36002ff8,0x6d7f605f,
    0xc83fe23f,0x03fe604f,0x5ffff700,0x22fefe80,0x7c45fffb,0x7fc4005f,
    0x007ff446,0x000003fc,0x00000000,0x3f200000,0x1fffffff,0x7fffffec,
    0x7ffd42ff,0x43ffffee,0xcffffffe,0x05ff15fc,0xfb02fec0,0xff88ff6b,
    0xf9813f20,0x7fc4000f,0x7ffc807f,0x3227ffc4,0xffffffff,0x0fff45ff,
    0x00037fcc,0x00000000,0x00000000,0xffffb300,0xffd501bf,0xfd501bff,
    0x03bfffff,0x25dfffb1,0x05ff15fb,0xfb02fec0,0xff88ff6b,0x33013f20,
    0x13ff6000,0x3a13fee0,0x7ffe43ff,0x5fffffff,0xfc80fff2,0x0000004f,
    0x00000000,0x80000000,0x02600098,0x00199980,0x00000066,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_29_usascii_x[95]={ 0,6,3,0,1,0,0,6,4,3,2,1,3,3,
5,1,1,1,2,2,0,2,1,1,1,1,5,3,1,1,2,4,0,0,2,1,1,2,2,0,1,2,2,2,
3,0,1,0,2,0,2,1,1,1,0,0,0,0,1,4,2,4,1,0,0,1,2,2,1,1,0,1,2,2,
1,2,2,1,2,1,2,1,2,2,0,2,0,0,0,0,2,2,6,3,0, };
static signed short stb__consolas_29_usascii_y[95]={ 21,0,0,2,-1,0,1,0,-1,-1,0,6,16,12,
16,0,2,2,2,2,2,2,2,2,2,2,6,6,5,9,5,0,0,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,2,24,0,6,0,6,0,6,0,6,0,0,
0,0,0,6,6,6,6,6,6,6,2,6,6,6,6,6,6,0,-3,0,10, };
static unsigned short stb__consolas_29_usascii_w[95]={ 0,4,10,16,14,16,16,4,9,9,12,14,8,10,
6,13,14,14,13,12,16,12,14,14,14,14,6,8,12,14,13,10,16,16,13,14,14,12,12,15,14,12,11,13,
11,16,14,16,13,16,13,14,14,14,16,16,16,16,14,8,13,8,14,16,10,13,13,12,13,14,15,14,12,12,
12,14,12,14,12,14,13,13,13,12,14,12,15,16,16,15,12,11,4,11,16, };
static unsigned short stb__consolas_29_usascii_h[95]={ 0,22,8,19,26,22,21,8,28,28,13,15,10,3,
6,25,20,19,19,20,19,20,20,19,20,19,16,20,17,8,17,22,27,19,19,20,19,19,19,20,19,19,20,19,
19,19,19,20,19,25,19,20,19,20,19,19,19,19,19,27,25,27,10,3,7,16,22,16,22,16,21,21,21,21,
27,21,21,15,15,16,21,21,15,16,20,16,15,15,15,21,15,27,30,27,7, };
static unsigned short stb__consolas_29_usascii_s[95]={ 249,203,245,84,98,158,219,246,6,16,175,
97,246,235,246,130,162,154,106,44,132,149,177,201,192,175,249,207,204,203,190,
208,72,115,101,216,69,56,43,28,14,1,1,216,163,184,169,132,149,113,29,
231,230,13,120,137,72,89,57,89,144,63,188,235,245,232,189,1,175,217,73,
58,45,32,50,1,236,82,69,14,103,89,55,29,117,42,112,128,158,16,145,
26,1,38,218, };
static unsigned short stb__consolas_29_usascii_t[95]={ 18,1,54,75,1,1,1,43,1,1,95,
95,32,99,75,1,32,54,54,54,75,32,32,54,32,75,1,32,75,95,75,
1,1,75,75,32,75,75,75,54,75,75,54,54,75,54,54,32,75,1,75,
32,54,54,54,54,54,54,54,1,1,1,95,95,63,75,1,95,1,75,32,
32,32,32,1,32,1,95,95,95,32,32,95,95,32,95,95,95,95,32,95,
1,1,1,95, };
static unsigned short stb__consolas_29_usascii_a[95]={ 255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_29_usascii_BITMAP_HEIGHT or STB_FONT_consolas_29_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_29_usascii(stb_fontchar font[STB_FONT_consolas_29_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_29_usascii_BITMAP_HEIGHT][STB_FONT_consolas_29_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_29_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_29_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_29_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_29_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_29_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_29_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_29_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_29_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_29_usascii_s[i] + stb__consolas_29_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_29_usascii_t[i] + stb__consolas_29_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_29_usascii_x[i];
            font[i].y0 = stb__consolas_29_usascii_y[i];
            font[i].x1 = stb__consolas_29_usascii_x[i] + stb__consolas_29_usascii_w[i];
            font[i].y1 = stb__consolas_29_usascii_y[i] + stb__consolas_29_usascii_h[i];
            font[i].advance_int = (stb__consolas_29_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_29_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_29_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_29_usascii_s[i] + stb__consolas_29_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_29_usascii_t[i] + stb__consolas_29_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_29_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_29_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_29_usascii_x[i] + stb__consolas_29_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_29_usascii_y[i] + stb__consolas_29_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_29_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_29_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_29_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_29_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_29_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_29_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_29_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_29_usascii_LINE_SPACING
#endif

