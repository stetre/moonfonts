// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_30_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_30_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_30_usascii_BITMAP_WIDTH         256
#define STB_FONT_times_30_usascii_BITMAP_HEIGHT        110
#define STB_FONT_times_30_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_30_usascii_FIRST_CHAR            32
#define STB_FONT_times_30_usascii_NUM_CHARS             95

#define STB_FONT_times_30_usascii_LINE_SPACING          19

static unsigned int stb__times_30_usascii_pixels[]={
    0x00ba8033,0x00950036,0x544c8033,0x2002aaaa,0x00bcdcba,0x00331000,
    0x00aaaaaa,0x19880005,0x99880600,0x80013000,0x04c02809,0x40002a00,
    0x11000008,0x0770f200,0x03d02d98,0x12e00f62,0x6641ff50,0x5c406fcc,
    0x665cc1be,0x77644000,0x3602efed,0x2204ccdf,0x7e44000e,0x202efdce,
    0x5eec44fc,0xfd880efe,0x3d001efd,0xd9f30698,0x00d5001d,0x05dddd70,
    0x3bb7aa00,0x703fea00,0xe81f880b,0x7b009d01,0x4409b100,0x00baa06f,
    0xfa801744,0x06fe440e,0x3aa00fec,0x402dfeff,0xdfb80efa,0x0f47ff80,
    0x4e983fee,0x3e00bf62,0x1fc42d40,0x00e8809f,0x0f717ec0,0x7e43f500,
    0x26c13601,0x207a1b60,0x026401fa,0x20df1000,0x744000eb,0x202fdc01,
    0x0fec0efc,0x6d5a5f50,0x80bf702f,0x3ff40ffa,0x47ff01f5,0x07fcc0fe,
    0x90790d30,0x3603ec3f,0x237cc003,0x3e2002f8,0x80037c45,0x03f601f8,
    0x403fb03d,0x200001fa,0x00eb86f8,0x7cc0b100,0x45fe801f,0x697a01fd,
    0x3fe60be2,0x6c5fe801,0x360bf66f,0x320bf56f,0x3a12a04f,0x3f20fe81,
    0x7000b501,0x002f98bf,0x0bf20bf6,0xff036c00,0x2fe81e83,0x0000df10,
    0x07cc6f88,0x7406e000,0x5ff5005f,0x4f980fec,0xbfd05b1a,0xd8bfea00,
    0x3213ee5f,0x2a07fb5f,0x3e0f207f,0x3ee0ff80,0x8000e883,0x003646fb,
    0xdf701ff3,0x20fee000,0x40f40ff8,0x07f703fd,0x3e202880,0x32601f46,
    0x0e62b98b,0xf800bfea,0x5c07f66f,0xa8331a6f,0x3fe002ff,0x01513f26,
    0x40ffa9fb,0x55530ff9,0x5f75559d,0x3f20fe85,0x50002d83,0x00bee3ff,
    0xff506fa8,0x7c405101,0x1e87f987,0x1fd04fb8,0x81ff2600,0x881aa6f8,
    0x1fdc88ce,0x00ffe42c,0x3f61ffb0,0x1a9ff101,0x8007ff20,0x07f70ffe,
    0x3fa1ff10,0x2a3ff104,0xeeeefeee,0x0fe46efe,0x005b83fb,0x3b77fe20,
    0x39999911,0xff305fb8,0x203fecc3,0x437c40ff,0xa83fa81e,0x3f2a007f,
    0x3e9be207,0x0ff713a0,0x001ffb0b,0x1fd8ffe4,0x01b7ff60,0xd8003ff6,
    0x005f51ff,0x837ec5f9,0x86982ff9,0x7c7f303c,0x00007445,0x3ea13ff6,
    0x05fd81df,0x7ed45ff1,0x6c17fc07,0x0fa81e85,0x4c007fb8,0x4dbe207f,
    0xb81fb00f,0x7fc0c85f,0x97fe4007,0x3fa201fd,0x3ffc01ff,0x4cfff200,
    0x5c4f801f,0x1ff981ff,0x201e84b8,0x6c0cdbea,0x7fd40002,0x740df05f,
    0x30ffe04f,0x83fe80ff,0x6c0f40f9,0x800df904,0x5be207f8,0xb05f906a,
    0xfff0d05f,0xb3ffb800,0xfff9003f,0x003ffc07,0x0fc4bfee,0x77f416e0,
    0x203ffa62,0x1300783c,0x5bb70970,0x7ecfec40,0xf00fcc2f,0x21ffc09f,
    0x2fec07f9,0x887a2c88,0x017f602b,0x7c40ff10,0x0bf30b76,0xb0b103fe,
    0x7e4001ff,0x2003fb2f,0xfd05fffa,0x7fe4001f,0x01d003e1,0x2f7bff62,
    0x983d06fe,0x03a60006,0x105f31db,0x3ffe61dd,0x9fd012e0,0xf107fe20,
    0x406fd80f,0x07e23d4d,0x8800bfd0,0x65be207f,0xf981fc84,0xffc83986,
    0x43ff6001,0x37a001fd,0x7fe40dff,0x83ff6001,0x4c01cc07,0x545ff30a,
    0xeeeeefee,0x74006eef,0x1fb17d41,0x7fe42fe8,0xbfb00d15,0xf103fe20,
    0x105fd80f,0x5710f457,0x2002fec0,0x5be207f8,0xfd07e83c,0xff503907,
    0xb37f4005,0xfbb4003f,0x017fdc3f,0x4058dfd0,0x7fc8001a,0x5557654c,
    0x002aacea,0xc87f612e,0x221fe62f,0x801eaffe,0x0ff305fc,0x4fe80ff1,
    0x40f40f98,0x00df704d,0x3e207f88,0x85f88976,0x834c1ffa,0xf1005ff8,
    0x000fec5f,0x7f437e4d,0x85ff1005,0x20005400,0x09701ff8,0x0d30003d,
    0x23fb83fa,0xfff306fc,0x41fe6009,0x07f886fa,0x42e41ff4,0xa80fa81e,
    0x3fc4007f,0x516edf10,0x47fba8bf,0x3fe601e8,0x6c6fc801,0x44d0301f,
    0x0ffd40ff,0x0002fe40,0x204fc800,0x8003c43c,0x5c1fd01e,0x403ffa3f,
    0x0980effc,0x17e40ff4,0x3fe03fc4,0x0f437c42,0x3fc41fd4,0x881fe200,
    0xff88d36f,0x44df4b8a,0x2fdc023d,0xfb03be60,0xf8d0b203,0x980bfb07,
    0x005c40ff,0x27e40037,0x00d307a0,0x0fe40990,0x27fdc5f9,0x0f7ffec4,
    0xf10fea16,0x881fe60b,0xe87f986f,0xff04fb81,0x03fc4001,0x360f4df1,
    0x2ffa3fff,0xf902c2dc,0x01df501b,0xd17203fb,0xbf7027cc,0xd01bf701,
    0x03fee0bf,0xf100bf60,0x69800970,0x1fd1fd40,0x4df7ffc4,0xdfff93fb,
    0x83f203fb,0x1ff500ec,0x3e20fea0,0x7e40f40f,0x4007f703,0x9be207f8,
    0x440aa84b,0x402b80ab,0xeeccdfd9,0x6407f603,0x3ba2d0bf,0x66fecc00,
    0x3f603efd,0x101ff505,0x30019d95,0x4400590d,0xb9ec801e,0xfffea82f,
    0x7ffdc1ef,0x7676403f,0xdffd901c,0x3e01fb07,0x7f40f41f,0x88017a02,
    0x89be207f,0x6880001e,0x3fffea00,0x980fec01,0x4fdfdffd,0x001a8800,
    0x26013006,0x40c4001a,0x00ee000a,0xa9803ca8,0x40019801,0x7f100001,
    0x07a07ec0,0x0f9807f6,0x440df100,0x00074c6f,0x88001b10,0x3600effe,
    0x1e99801f,0x00000000,0x00000000,0x00000000,0x00000000,0x36026400,
    0x1fb81e86,0xf9802dc0,0x2a1be204,0x0e88000d,0x1bff2000,0x1a001fd8,
    0x26666660,0x19999999,0x00000000,0x00000000,0x00000000,0x0d700000,
    0x01e81f88,0x505b009d,0xf1007cc7,0x400ba60d,0x80000db8,0xfd80dfc8,
    0x3a200001,0xeeeeeeee,0x0004eeee,0x00000000,0x00000000,0x00000000,
    0x6cc03b80,0x36203d02,0x7fc3b803,0xccc83dae,0x3f2206fc,0x372a61bd,
    0xb8800002,0x9bfb0bdd,0x00000099,0x00000000,0x00000000,0x00000000,
    0x26000000,0xb005d401,0x8804a801,0x4073b261,0x002aaaaa,0x379bdb95,
    0x44000000,0x05555550,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00ae0000,0x50088188,0x4400001b,0x04d44002,
    0x10003206,0x4c401033,0x0f260001,0x4c001310,0x2d980adb,0x06a62000,
    0x81333310,0x10009998,0x00b66015,0xfffffe80,0x054c1504,0x51007400,
    0x37bfbdd9,0x0fffb859,0x676cc000,0x77654402,0x85abdedc,0xdfb1003b,
    0x30597bfd,0x009fb9dd,0xa827fecc,0xd805fffd,0xd51ffc9b,0x2a0005ff,
    0xccdfd9ce,0x0bbffee4,0x2001bfb3,0x7ff541fd,0xfff50002,0x7dc41fff,
    0x3ffff99f,0xf881a600,0x7fe540af,0x000ff982,0x4c00fee0,0xfe980bfe,
    0xf8806885,0x0bfee21e,0x04f887f3,0x7cc27f40,0x205fffcd,0x3e27ec6c,
    0x4fa8002f,0x262677ec,0x00d502ff,0xff80ffdc,0x557d0002,0xffca8555,
    0x2fffdcea,0x3a207900,0x81fdc02f,0xe88000ff,0x5ff3001f,0x07a0dd00,
    0x3ee03fd0,0x7e407f42,0x213f2000,0x407fe40d,0x740b84f8,0x2fe8002f,
    0xbf9037dc,0x74c00f60,0x05fd01ff,0xf800b500,0x1ffa60df,0x7f440740,
    0x3e07b003,0x2fd8000f,0x005ff100,0x101dc1ea,0x222d80df,0x007f506f,
    0x202627e4,0x4f982ff8,0x8005fd00,0x7fcc0ff8,0x881ff100,0xff3d000f,
    0x000bf603,0x3ff000ba,0x9805ff70,0x400dfb06,0x001ff049,0x36004fb8,
    0x8834007f,0x803fe606,0x5c0ffc2b,0x13f2001f,0x9f707e80,0x000bf600,
    0x03fe0bfe,0x025c4fd8,0x203ff4c8,0x7d4002fd,0xff801cef,0xc807ff01,
    0x004ff883,0x2a0ff814,0x01ff300a,0x000ffe20,0xff00f401,0xfb0a201d,
    0x4c06e81d,0x4009f91a,0x67eccc4f,0x8bf60099,0x2fec00a9,0xff3017e6,
    0x34c00f41,0x0bf603ff,0xfe833333,0x7c03ffff,0x809fd01f,0x03ffa80e,
    0xf51ff000,0xbfd07fff,0x3ff500c4,0x025c0000,0x2007fffb,0x1db0eff9,
    0x3b2fba60,0x0b5004fe,0x9ddfffdb,0x7ec57ec0,0x3fe603ff,0x36007f20,
    0xd100d54f,0xfd80ffc3,0x0b3ff222,0xbfff9751,0xfd80ffc0,0x7e416603,
    0xff00001f,0x5fffb7d7,0x7eddffc4,0x0ffc82ff,0x01a20000,0x003dfffd,
    0x409bfff5,0x27fd43f9,0xf900fd40,0x36ff6009,0x200ffc9a,0x01dedff9,
    0x07b1ff30,0x01ff87b0,0x00ec85fb,0x207ffd30,0x03fd01ff,0x0ffe81e4,
    0x89ff0000,0x3fea7fe9,0x85ff910c,0xedb807fe,0x1e80deee,0x3ffff620,
    0x7ffd400d,0x7f41ba02,0x3fffaa04,0x2009f903,0x17f40dfd,0xd80003b0,
    0x2d400fcf,0x2fd80ffc,0xb1000372,0x03ff01ff,0x00f803fe,0x40000fff,
    0x2ff980ff,0x1bfa0df7,0x36001fff,0x012e04ff,0x0bffffaa,0x84fffea8,
    0x09f904fb,0x1fffe4c4,0xfd8027e4,0xd903fd82,0x9ff50000,0xff80e880,
    0x1725fb01,0x81ff8800,0x03f982ff,0x1ffe8166,0x01ff0000,0x82fecffa,
    0x3ffa1ffb,0x03ff7002,0xff700344,0x11d705ff,0x3fd89ffd,0x22009f90,
    0x04fc86fe,0x7f905fb0,0x3bbbffe0,0xfd000bce,0xff02d803,0x1b6ff603,
    0x20bf6000,0x037446ff,0x2ffd80f2,0x01ff0000,0x82fed3f6,0x3ff62ff9,
    0x01ff5004,0x362001e8,0x87ea0fff,0x3fe0ffd8,0x4009f902,0x27e40ff9,
    0xfc82fd80,0xfffff504,0x7003ffff,0xcccfb80d,0x2cdffccc,0x00ffefec,
    0x3e07ea00,0x05fccecf,0x3fee00f8,0x1ff00004,0x2fe4bf60,0x7fdc5ff0,
    0x01ff5005,0x201444b8,0x21fa2ffc,0x0ffe3fe8,0x3e0027e4,0x8027e41f,
    0x04fc82fd,0x2aa66295,0x02d804ec,0x7fffffe4,0x6c4fffff,0x000ffcaf,
    0x4ffc1ee0,0x59800998,0x0037fc40,0xe807fc06,0x7c0ff51f,0x007ff41f,
    0x22007fd4,0x7fc02c46,0x3e60bf33,0x7e413fe6,0x643ec004,0x05fb004f,
    0x00d309f9,0x807880d3,0x99999998,0x7ec09aff,0x4000dfb2,0x003ff04e,
    0xff700590,0x7c0a2009,0x7c4df00f,0xa86f880f,0xffa806ff,0x3e21e800,
    0xf897f400,0x7fd9be06,0xf8009f90,0xb004fc85,0xd09f905f,0xd807900d,
    0x1ff80003,0x3fe25fb0,0x3aa05105,0x0003ff00,0x3ff6001f,0xff01c402,
    0xfb83f701,0xf702fb84,0x0ffa80bf,0x13e24b80,0x3f60ff98,0x3ea3f881,
    0x004fc84f,0x17f203ea,0x7e417f40,0x8067fc44,0x5cbdc85b,0x03ff0000,
    0x3ff98ff6,0xda8befc8,0x007fe00e,0xfb800b30,0x12e20acf,0x7dc1bff0,
    0x7443fb03,0x0e7f4c04,0x4007fe44,0x037fe268,0xcf985fb3,0x7fec3640,
    0xaffee99c,0x2e219f91,0x00dfd02e,0x17f60ffe,0x3bbfffaa,0xfff883fe,
    0xff00000f,0xf913fa03,0xfffe885f,0x17fcc03e,0x2000b200,0xdeefffda,
    0xdffc8803,0x3aa201ee,0x91003ecd,0xdfb99dfd,0x88ec0017,0xfedefdbe,
    0x99fd301e,0x3ff2019f,0x22dfcaff,0x0deefffb,0xbefffda8,0xcfffda80,
    0x1cfffc98,0x0bceda88,0x0002f6a0,0x6dc1ff80,0xfd89cfff,0x00c42dff,
    0x0cdeedb8,0x80001500,0x260001a8,0x0044000a,0x026aa200,0x9810cc00,
    0x331000aa,0x09866200,0x00002660,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x000c0000,0x53ffffaa,0x3effffc8,0x71dffec8,
    0x05dffffd,0x43bfffa2,0x3effffdb,0x19fffd90,0x00b70060,0xa8800133,
    0x3220311a,0x31dffffe,0x900dfff9,0x5c19fffd,0xffffffff,0xffffb51f,
    0x2a079bdf,0x8005fffd,0xb32dfffd,0x05bdffff,0x000d4000,0xffb0003d,
    0x01fff305,0xffd827c4,0x209f9005,0xfd004ffc,0x641faa01,0x3fee07ff,
    0x6c400dff,0x04fdfccf,0x3600fff8,0x0dd004ff,0x3ffffffa,0xdff987ff,
    0x01efeb99,0x4001fff5,0xf301fff9,0x2a0001df,0x800ffb82,0xf98005fa,
    0x01ff903f,0xff8807cc,0x540d9005,0x0d9002ff,0x540fffb3,0xfdff907f,
    0x3e601fff,0x013fe60c,0x3fa01ff6,0x985c803f,0x99999abf,0x44ff885e,
    0xf881ffe8,0x3f2004ff,0x17fe00ff,0xfb82d800,0x0ffd800f,0x305ff800,
    0x02dc05ff,0x3a003ff6,0x007fe602,0x7fb842dc,0x3e61fe60,0x0dff910a,
    0x027ec17a,0x7f4037ec,0x425c01ff,0x40be202c,0x4ff984ff,0x001ffbf0,
    0xe80ffbf1,0x5f70005f,0x3e2002a0,0xfc8003ff,0x40bff00f,0x1ffcc02d,
    0xff301e60,0x9816e003,0x21fe607f,0x81ffb03b,0x09f902fb,0x7d00dfb0,
    0x25c01fff,0xf81ee00c,0x06ff884f,0x9009ff3f,0xfe80ff9b,0xbffb8004,
    0xb9900019,0xff3000df,0x203ff605,0x0dfd0078,0x7fcc04c8,0x4c0b7001,
    0x21fe207f,0xb07fea03,0x013f203f,0x2ba01bf6,0x9700effa,0x7c0bd000,
    0x20fff04f,0x200ffc8f,0x407fc9f8,0x75c004fe,0x000eeeff,0x02ff99f8,
    0xf885fe80,0x005b82ff,0x3e205ff5,0x00ffcc00,0x1fe605b8,0xf8007f88,
    0xc807fc0f,0x06fd804f,0x0bff72e8,0x5f10012e,0x7d427fc0,0xff31f06f,
    0x7fcb5c07,0x80027f40,0x2e0002fe,0x20017fa6,0x76dc0ffb,0x2002e85f,
    0x00b705ff,0x2e003ff3,0x881fe605,0x37c4007f,0x4fc80ffc,0xe806fd80,
    0x2e0fff62,0x203dc004,0x2ffd84ff,0x81bf61f0,0xe80ff92e,0x5fd0004f,
    0xf7174000,0xff88001f,0x07fdd6c3,0xffb800f1,0xf9802e81,0x40b7001f,
    0x1fe207f9,0xff05f500,0x2013f205,0x42e806fd,0x025c2ffe,0x9ff017a0,
    0xf027fecc,0x2a0bfe61,0xfd01ff26,0x0bfa0009,0x3e234c00,0x6fe8004f,
    0x71ffc5e2,0x4ff88009,0xff9803cc,0x4c0b7001,0x01fe207f,0x1bfa0bb0,
    0x7ec027e4,0x7c42e806,0x8012e1ff,0x77fc02f8,0x401defed,0x3a1bfa0f,
    0xfd01ff23,0x0bfa0009,0x7e41ec00,0x0ffb8007,0x3d37f4b7,0x41ff9000,
    0x3ff3004c,0xf9816e00,0x801fe207,0x9ff500f9,0x4027f441,0x82e806fd,
    0x0970eff9,0x7fc03dc0,0x541f0004,0xf91e62ff,0x004fe80f,0x06e05fd0,
    0x7fcc07c4,0x9ffc4002,0x223fee2e,0x7ff30007,0x7cc003e2,0x4097002f,
    0x1fe207f9,0x7f402e80,0x4fccccff,0xe806fd80,0x2ebff502,0x2017a004,
    0x1f0004ff,0x90f65fe8,0x04fe80ff,0xf705fd00,0xffff901f,0x00dfffff,
    0x88f1dfb0,0x0004bbff,0x002ddbfa,0x32005ff1,0x881fe603,0x0099007f,
    0x329fffb1,0x05fd804f,0x3ff202e8,0x5f1004bc,0x0009ff00,0x33ff703e,
    0x407fc81f,0xfd0004fe,0x3e0ff505,0x007fea01,0xb09bff50,0x40003ddf,
    0x002eaffa,0x2d801ffc,0xf881fe60,0x4005b807,0x013f20a8,0x0ba013f6,
    0x009dffb0,0x3fe003ee,0xf01f0004,0xff9099bf,0x7004fe80,0x01302fe8,
    0x0bff00d5,0x503fff00,0xf0000fff,0xfd000fff,0x401f100d,0x1fe207f9,
    0x20000b50,0x3fd804fc,0x74402e80,0x0bb004ff,0x40013fe0,0x0fffb80f,
    0x7f407fc8,0x7ec39804,0x00ba0023,0x90003ff2,0x13fe20df,0x0ffee000,
    0x807fe600,0x3fcc04e8,0x2d40ff10,0x7e400110,0x3fb2f444,0xf3007d00,
    0x05f1009f,0x0009ff10,0xbff103f1,0xf803ff20,0x20f4405f,0xb804befc,
    0x0bff3007,0x3604f980,0xf880001f,0xff50000f,0x805ea885,0x1fe607f9,
    0x0e980754,0xf513f200,0x2200fe5f,0x09f5004f,0xf3001f50,0x5f3000df,
    0x7f407f20,0x3fff101f,0xdf753333,0x803dfd10,0xff1006f8,0x01f8003f,
    0xc80001aa,0x7f540005,0x00cffeef,0xf500ffa8,0xffffa81f,0x005fffff,
    0x7ff42ff4,0x7fe4404c,0x04b802df,0x7e4c05d8,0x9803efff,0x441dfffc,
    0xffffeb86,0xffff911c,0xffffffff,0x7dc00409,0x3ae03eff,0x000dffff,
    0x00003003,0x98000044,0x98009aa9,0x20ceffec,0xf33effeb,0xffffffff,
    0x3b26005f,0x01442cee,0x80080000,0x0000001a,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xfca80000,0x3224efff,0x541dffff,0xeffffffd,0xfca802ce,
    0x2a0cefff,0x84dffffd,0xfffffffd,0xb51fffff,0xffffffff,0x3f66bfff,
    0xffffffff,0x3f6a2fff,0xeeefffff,0x3f6a00ac,0xdeffffff,0x3fffe00c,
    0xffffffff,0xfffd35ff,0xfca89dff,0x3fee3eff,0xf904efff,0x32619fff,
    0x41cffffe,0x0003000a,0x3e6006a6,0x03bf205f,0x513bff30,0x30019ffb,
    0xffa80dff,0x266bb605,0x4ffc9999,0xa983ff98,0x827fc46f,0xff983fa8,
    0xfeb989ad,0x67fcc04f,0x033faa20,0x3e666bbe,0x5fb999cf,0x007ffec4,
    0x7fec07fb,0x077d400f,0xf701fff0,0x8003e00f,0x03eebdfa,0x4f8827fc,
    0x709ff100,0x3fe009ff,0x01ffc404,0x37fc401d,0x34407ff0,0x0ea027fc,
    0xfb813fe2,0x9ff100ef,0xd11bfe20,0x16613fe0,0xf8817ff4,0x0fff4403,
    0xfd003f20,0x401fee0d,0x43f7000f,0x3fe01ff8,0x4004e884,0x7ff884ff,
    0x8809ff00,0xb01603ff,0x1ffc03ff,0x013fa120,0x013fe071,0x7fc0bff5,
    0x887ff204,0x1209ff04,0x6c077fc4,0x0bff3004,0x5fd802f8,0x07c002a0,
    0x7ec2fc40,0xd113fe04,0x09ff0009,0x3e00bff2,0x1ffc404f,0x1ffdc050,
    0x2000ffe0,0x3e0004fe,0x3ffd804f,0x7c409ff0,0x4ff8044f,0x27fd4010,
    0xff9001ae,0x6c017205,0x1f00005f,0x7107f900,0xd127fc01,0x13fe0009,
    0x7c007fe4,0x1ffc404f,0x02ffcc00,0x20181ffc,0xf00604fe,0xdff1009f,
    0xf9813fe0,0x09ff003f,0x547ff200,0xffe8000f,0xd8007cc0,0x1f00005f,
    0x0001fd00,0x027453fe,0x3a09ff00,0x09ff005f,0x8003ff88,0xff800ffe,
    0x3fa04883,0x9ff01a04,0x207ffa00,0x3ff204ff,0x009ff001,0x3e7bfa20,
    0x9ff30001,0x3f6002e8,0x01f00005,0x20003ff0,0x004f9cff,0x7ec27fc0,
    0x09ff001f,0x4003ff88,0xff002ffc,0x3a04c887,0x406a884f,0xffb004ff,
    0x2e09ff05,0x3fe003ff,0x3fe60004,0x7e40003f,0xd800b71f,0x332a005f,
    0xcccfcccc,0x0ffe3ccc,0x7feffc00,0x67fc0003,0x003ffba9,0x666677fc,
    0x03ffcccc,0x8017fe60,0xffffffff,0x3bbffa04,0x7c06ffee,0x7ff9004f,
    0xdbbdfff0,0xf8003dff,0x7e40004f,0x7c40002f,0x4000f9ef,0x32a005fd,
    0xccfccccc,0x3fa3cccc,0xcff80a06,0x20003ffe,0x1ffdceff,0xaadff800,
    0xffbaaaaa,0x1dfd1003,0x4ce7fc00,0x3fa04da9,0x20364c44,0xff7004ff,
    0x533bff07,0x003bffb7,0x200027fc,0x0000fffa,0x001fffd4,0x80002fec,
    0x0ffc800f,0x33fe0588,0x0003ffe8,0x037f49ff,0x22027fc0,0xffb003ff,
    0x83ff8003,0x813fa048,0x8027fc05,0x4ff81ffd,0x007ffd10,0x980013fe,
    0x0005ffbf,0xb0007fd8,0x006e60bf,0x7fcc007c,0xf80b660e,0x09ffd14f,
    0x7cc9ff00,0x27fc004f,0x200ffe20,0xf8004ffa,0x7f40703f,0x9ff00e04,
    0x203ffa00,0x3fe204ff,0x009ff006,0x7fe4ba20,0x3fe40002,0xd05fd800,
    0x01f003ff,0x3bbfff20,0x127fc04f,0xf8009ffd,0x017fdc4f,0xf8809ff0,
    0x37fc403f,0x003ff800,0x20004fe8,0xff8804ff,0xd809ff06,0x4ff802ff,
    0x7c49b000,0x320000ff,0xbfb0007f,0x2013ffa0,0x3fee000f,0x4ff802df,
    0x0027ff44,0x1ffb09ff,0x1013fe00,0xffd807ff,0x3ff83801,0x004fe800,
    0x9009ff03,0x13fe03ff,0xf007ff90,0x0b90009f,0x4000bff5,0xfb0007fc,
    0x016a620b,0x0660003e,0xe884ff80,0x9ff004ff,0x200bff10,0x7fc404ff,
    0x00ffee03,0x00ffe122,0x26013fa0,0x4c04ff84,0x13fe05ff,0x800fff88,
    0x7d4004ff,0x005ffb00,0x4001ff20,0x00e405fd,0x0000007c,0x74413fe2,
    0x7fc00dff,0x80bff305,0x7cc04ff8,0x0bff303f,0x9ff10b60,0x00bff000,
    0x409ff03d,0x3e00dffa,0x17fee04f,0x50027fc0,0x7ffc403f,0x07fd8000,
    0x440dfd00,0x00003006,0x40bff300,0x301efffa,0x7fe40dff,0x0bff300c,
    0xfd04ffa8,0x7edc401f,0x002ffcc1,0x5441bfe2,0x1cff986e,0x00bff6a2,
    0xc9839ff3,0xff3004ff,0x01fee00d,0x0003bff6,0xf0003ffd,0x000ee0ff,
    0x64c00000,0x5c3dffff,0x3efffffe,0x7dffff93,0x437fffa0,0x3dffffc9,
    0x6ffffecc,0x3ffffee3,0xffffffff,0x3ffff267,0x7f64403d,0xffffffff,
    0x3ff264ff,0xbdefffff,0x3ff2600a,0xefffffff,0xffc9802c,0xfd703eff,
    0xf9305bff,0x801bffff,0x1cffffeb,0x7fffe440,0x000020be,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x80000000,0x4031a981,0x33100aa8,0x4ccccc33,0x98866620,
    0x4cc41999,0x31066661,0x00098133,0x00554400,0x880554c4,0x99999999,
    0x1510a809,0x00a882a0,0x202a60a8,0x333101a8,0x00cccc33,0x00600164,
    0x40881106,0x2e20003a,0x3aef6e4f,0xdadda84f,0xcfffb86f,0x45bfff70,
    0xfd50ffd9,0xcfd985df,0x4c3ffb50,0x67d43ffd,0x674c0001,0xf500dffb,
    0xf907ff99,0xffdddddf,0x26bfee27,0x3fee27ff,0x83fffd8a,0xfd8bfeb8,
    0x3ffee5ff,0x7ffecc0e,0x807df914,0x3e6005f9,0xff8ff600,0x3ea1ff10,
    0x7e4c006f,0x9d03e21c,0x84fd8df0,0x7fd41ff9,0x7c40ea80,0x3e0b504f,
    0x883fe81f,0x98002dfc,0x2077e42f,0x0bfe60eb,0xa97fa079,0x7fbcbffb,
    0x2f6ffee6,0x54c0ffc9,0xfc8adbff,0xfea9bcaf,0x5c3ff905,0x3e25300f,
    0x77401514,0x7cd7fa04,0x2a3ff52f,0xda800fff,0x40fb80bf,0x2e27dc4a,
    0xd07fb05f,0x2e05905f,0x3e03b06f,0x203fd81f,0x1003eeb8,0x893fa0bd,
    0x646fd82f,0xe80efc80,0x3fa020ef,0xe817fc0d,0x0ffec0df,0x6fe81fea,
    0xa7fc03f1,0x703fe8be,0x3f603f1b,0x3e63ff13,0x4076260f,0x5c02eeb8,
    0x366140df,0xfa837d41,0x0685fc86,0x0d107fe2,0x1fec0ffc,0x00cfda80,
    0x7fd413ee,0x55557f90,0x54041ffb,0x05fd01ff,0x7fb05fd0,0x3ee0ff60,
    0x2207f885,0x5402dbff,0xcfeacdfe,0x0d50f880,0x227f8bf2,0xc986887f,
    0xff3001cf,0x7644007f,0xd07fe06f,0x202541ff,0xf01dc4fc,0x007fb03f,
    0xd81dfc98,0x25ff103f,0xaaaaaafd,0x3fe600aa,0x200bf603,0x04fc82fe,
    0x0bf507fb,0xffa803fe,0x3bee2005,0x0ba1ec02,0x746d87ee,0x3f663b86,
    0xffa8000b,0x376601ff,0x3f206f99,0xd93f32a4,0xd07fcc01,0x6c0ffc01,
    0xf710003f,0xf01ffc5d,0x0001fa7f,0x2fd80bfd,0xfc82fe80,0xf507fb04,
    0xb003fe0b,0xdb7100bf,0xd3039f9b,0x47981f30,0x39126c5c,0x000cfd98,
    0x07fffb10,0x037cc5f5,0x7cc74ff3,0x3fa00d17,0x1ff80953,0x20003fd8,
    0x17fe2eea,0x01ff2fe8,0x003bf200,0x5fd005fb,0x3f609f90,0xff05fa83,
    0x1fff4401,0x2b63bfa0,0x81742ffa,0x0ea3444c,0x32200479,0xa81001df,
    0x0fee0ffe,0x9fe80df3,0x0eebfa59,0x01db7d40,0x1fec0ff4,0x0b7ee200,
    0x0ff81ffa,0x404c07fb,0xfd801ffa,0xc82fe802,0x507fb04f,0x803fe0bf,
    0x201ffaad,0x3aa7f0dc,0x1f8816e1,0x0110220c,0x05dd7100,0x23fe80c8,
    0x037cc1fe,0xfb8777ee,0x3fe000ed,0x82fe806b,0xf93003fd,0x07fe4039,
    0x03ff27f8,0x41ffc42c,0x4017ec18,0x04fc82fe,0x0bf507fb,0x925c03fe,
    0x17e600df,0x16a007c4,0x54000000,0x84c80bfe,0x70ffa2fb,0x7fc402ff,
    0x002ffc45,0x3600bff2,0x01ffd44f,0x2002fb6a,0x2f983ff8,0xc88bffe2,
    0x5305fe82,0xfe803fe8,0xfb04fc82,0xf10df507,0xf88d301f,0x04f8804f,
    0x00060011,0xfb300000,0x360fe439,0x2b3fee0f,0x204bffcd,0x01fd82fd,
    0xb803fc40,0xfdccabff,0x3bae21ae,0x1ffa8002,0x3fee0fa6,0xfc86feff,
    0x741d880e,0x83ff804f,0x09fd05fd,0x3ff10df7,0xffb82f88,0x00000002,
    0x80000000,0xdff94fc8,0xfd8819b7,0x809fd0ef,0x000d506a,0xffd80136,
    0x543bfb3f,0x4c0001cf,0x203eddfe,0x40dffffa,0xeeeeeffa,0xffb51fff,
    0xffd503bf,0xfff9319f,0x3fff6a39,0xdfffc99c,0x27dffd73,0x3a61effa,
    0x0000dfff,0x00000000,0x98230000,0x00808802,0x8000c030,0x20c40008,
    0x00009809,0x30005440,0x00000015,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x333332a0,0xcccccccc,0xb8835513,0x005f75c0,
    0x04444471,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xaaaa9800,0xaaaaaaaa,0xfd17f21a,0x7edd6e49,0xffd0b82d,
    0x0000dfff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x3a3ec000,0x3ae2124f,0x3fa5dbdf,0x0006ffff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x0ba20000,
    0x32600c43,0x0000001c,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x20000000,0xaaaaaaa9,0x81aaaaaa,0x00000048,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xbbb50000,
    0xbbbbbbbb,0x000207bb,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_30_usascii_x[95]={ 0,3,1,0,1,0,0,1,1,0,1,0,1,1,
1,0,0,3,0,1,0,1,1,1,1,1,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,-1,1,0,-1,0,0,1,1,0,0,0,
-3,0,0,0,0,0,-1,0,0,1,0,0,0,0,0,0,0,3,2,2,0, };
static signed short stb__times_30_usascii_y[95]={ 24,5,5,5,4,5,5,5,5,5,5,7,21,16,
21,5,5,5,5,5,5,6,5,6,5,5,11,11,8,12,8,5,5,5,6,5,6,6,6,5,6,6,6,6,
6,6,6,5,6,5,6,5,6,6,6,6,6,6,6,5,5,5,5,28,5,11,5,11,5,11,5,11,5,5,
5,5,5,11,11,11,11,11,11,11,7,11,11,11,11,11,11,5,5,5,15, };
static unsigned short stb__times_30_usascii_w[95]={ 0,4,9,14,12,22,21,3,8,8,11,15,5,7,
4,8,13,8,13,11,13,11,12,12,11,12,4,5,15,15,15,10,24,20,17,18,19,16,14,20,20,9,11,20,
16,24,21,19,15,19,19,13,16,20,20,26,20,20,16,7,8,7,13,15,5,12,14,12,14,11,11,14,14,7,
9,14,7,21,14,13,14,14,10,9,8,14,14,20,14,14,12,9,2,8,15, };
static unsigned short stb__times_30_usascii_h[95]={ 0,20,9,20,23,20,20,9,25,25,12,16,8,3,
4,20,20,19,19,20,19,19,20,19,20,20,14,18,14,6,14,20,25,19,18,20,18,18,18,20,18,18,19,18,
18,18,19,20,18,25,18,20,18,19,19,19,18,18,18,25,20,25,11,2,6,14,20,14,20,14,19,19,19,19,
25,19,19,13,13,14,19,19,13,14,18,14,14,14,13,19,13,25,25,25,4, };
static unsigned short stb__times_30_usascii_s[95]={ 248,145,239,174,112,189,212,235,32,1,209,
225,249,44,23,1,234,91,108,128,197,226,44,171,101,161,251,219,1,1,91,
150,59,1,132,10,112,95,80,57,42,209,137,1,225,200,149,125,184,84,22,
87,150,70,49,22,167,188,63,104,78,51,221,125,17,27,29,241,113,121,140,
167,152,248,41,211,100,172,157,107,238,122,146,17,242,76,61,40,194,182,133,
22,19,10,28, };
static unsigned short stb__times_30_usascii_t[95]={ 21,1,87,1,1,1,1,87,1,1,87,
68,87,102,102,27,1,48,48,27,27,27,27,48,27,1,48,68,87,102,87,
1,1,48,68,27,68,68,68,27,68,68,48,68,48,48,48,1,48,1,68,
27,68,48,48,48,68,68,68,1,27,1,87,22,102,87,27,68,27,87,27,
27,27,1,1,27,48,87,87,87,27,48,87,87,48,87,87,87,87,27,87,
1,1,1,102, };
static unsigned short stb__times_30_usascii_a[95]={ 108,144,177,217,217,361,337,78,
144,144,217,244,108,144,108,120,217,217,217,217,217,217,217,217,
217,217,120,120,244,244,244,192,399,313,289,289,313,265,241,313,
313,144,169,313,265,385,313,313,241,313,289,241,265,313,313,409,
313,313,265,144,120,144,203,217,144,192,217,192,217,192,144,217,
217,120,120,217,120,337,217,217,217,217,144,169,120,217,217,313,
217,217,192,208,87,208,234, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_30_usascii_BITMAP_HEIGHT or STB_FONT_times_30_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_30_usascii(stb_fontchar font[STB_FONT_times_30_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_30_usascii_BITMAP_HEIGHT][STB_FONT_times_30_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_30_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_30_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_30_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_30_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_30_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_30_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_30_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_30_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_30_usascii_s[i] + stb__times_30_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_30_usascii_t[i] + stb__times_30_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_30_usascii_x[i];
            font[i].y0 = stb__times_30_usascii_y[i];
            font[i].x1 = stb__times_30_usascii_x[i] + stb__times_30_usascii_w[i];
            font[i].y1 = stb__times_30_usascii_y[i] + stb__times_30_usascii_h[i];
            font[i].advance_int = (stb__times_30_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_30_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_30_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_30_usascii_s[i] + stb__times_30_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_30_usascii_t[i] + stb__times_30_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_30_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_30_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_30_usascii_x[i] + stb__times_30_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_30_usascii_y[i] + stb__times_30_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_30_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_30_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_30_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_30_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_30_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_30_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_30_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_30_usascii_LINE_SPACING
#endif

