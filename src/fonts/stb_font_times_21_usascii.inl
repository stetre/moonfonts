// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_21_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_21_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_21_usascii_BITMAP_WIDTH         256
#define STB_FONT_times_21_usascii_BITMAP_HEIGHT         62
#define STB_FONT_times_21_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_times_21_usascii_FIRST_CHAR            32
#define STB_FONT_times_21_usascii_NUM_CHARS             95

#define STB_FONT_times_21_usascii_LINE_SPACING          14

static unsigned int stb__times_21_usascii_pixels[]={
    0x00000200,0x10000010,0x05eee4c0,0xdaa6e644,0x800282cc,0x20100040,
    0x11555400,0x95398155,0x65665405,0x00010100,0x4017b993,0xb9800100,
    0xa800199b,0x80d45304,0xba800cca,0x300bbbab,0x2e06a205,0x5301a881,
    0xed887f10,0x6407f513,0x675c0f75,0x07ecc00b,0xb506400b,0xc81fd00d,
    0x76d7fdc3,0x445ec45f,0x8fae20fe,0xb1000fd9,0x441f4c1b,0x003f663f,
    0x0cdfa974,0x3a3fcb88,0x0321b80f,0x980f452e,0x4c03201c,0x0370b204,
    0x3901d40d,0x07f506e8,0x74c3dd72,0x4407c8c9,0x400aa0fc,0x4c036c45,
    0x2fc82c2f,0x5c5c83f6,0x88fe620f,0x0db000fc,0x88720fe6,0x47a800fc,
    0x2e1d104f,0x8b01fb0f,0x16e1f985,0x805c0166,0x1b8b502b,0x005982d4,
    0x1fb017dc,0x321eeb90,0x7dc03493,0x0aa01220,0x336c01b2,0x7f51f209,
    0x01f50fe2,0x800fb87f,0x03f602fb,0x32003ee0,0x47a836c7,0x162c1f60,
    0x4c3f51b6,0xf80e000d,0x20dc7b80,0x8005d06c,0x427e407f,0x2bd0f75c,
    0x03ea00a4,0xd901900b,0x0647ea00,0xf35f87c8,0x3f80fa83,0x3fc007dc,
    0x2e013ea0,0x21fa800f,0x640d703e,0x333b32a6,0x317a0cec,0x5dc0747f,
    0x5d80e5ab,0x2e0dc7c8,0x5c407a87,0xfa80ff12,0x90f75c85,0x7970097f,
    0x402a81f7,0x072ad905,0x32058de8,0x87f34e87,0x5c3f80fa,0x4455510f,
    0x12fd407f,0xc98fb857,0x975d900b,0x055fb510,0x4ddcc4d7,0x13e21bb9,
    0x361269f1,0x80549f11,0x0dc6c87b,0x881b61ea,0x80df33fc,0xf75c86f9,
    0x201dfd10,0x81ff13e8,0x640aa048,0x505fedbe,0x23e405bf,0xf517e3f8,
    0x0fb87f01,0x06f985d1,0x3fc8b7cc,0x27de57dc,0x6cc019c8,0xc85a819f,
    0x07f30321,0x4990aebf,0x5c02a2f9,0x06e34c0f,0xf00bf095,0xf301be27,
    0x41eeb90d,0x6b81efd8,0x902c07e4,0xfc83f201,0xfc80fd01,0x19f91aa0,
    0x87f01fb3,0x980d88fb,0x137cc06f,0x321fb87f,0x199aeb87,0x84981b20,
    0x227c42c5,0x7dc1b4f8,0x54071ea0,0x86e2b82f,0x027c40b8,0xa80ff1fc,
    0x0f75c85f,0x2742ffd8,0x40aa03ea,0x7f31b205,0xbf900ee0,0xfc881777,
    0x3f80fabf,0xf006cfdc,0x7c4fa80f,0x0f707dc3,0x5ffffff3,0x71c40d90,
    0xddfdddfd,0x4fe62f41,0x91761f46,0x4a81fcc0,0x7c416637,0x3f63f804,
    0x320bee00,0xe9c80f75,0xfa85f10f,0x02a84880,0x6417e1b2,0x009be400,
    0xf80fa844,0x007efdc3,0x17dc03fb,0x5c1f70fe,0x99894c0f,0x0c06c86a,
    0xdb039922,0x7c4d2fa8,0x0398fe61,0xb86e0bea,0x13e03221,0x04f88fe0,
    0x7bae41ba,0xf32f9a40,0x0b00fa89,0x74364019,0x7c805884,0xf01f5000,
    0x0ee8fb87,0x2f409f10,0xb83ee1fc,0x8381a20f,0x7154006c,0x1f51ee05,
    0xb887d436,0xfb80911f,0x506e2cc1,0x7f00bd09,0x04c81fa8,0x9243dd72,
    0xfa8fd0fc,0x40585500,0xd897cc6c,0x07c800dc,0x7f01f700,0x05f98fb8,
    0x03b20bee,0x5c1f70fe,0x22b7e60f,0x06c80ca8,0x0643912a,0xb8ba1e88,
    0xf357bf12,0x5c0a1933,0x06e3640f,0xf00d90f5,0xb759b307,0x0f75c805,
    0x2e35521f,0x01fd88cf,0x32015491,0x3df32dc7,0x017fd500,0x1067ecc0,
    0xf50fb89f,0x5de74c09,0xf713e04d,0x32a07dc1,0xfb00cefe,0x0b163ec0,
    0x4c3cbd88,0x1cb872a4,0x6426c0a6,0x21ee0dc7,0x01fc00fa,0xb9009ff5,
    0x373f61ee,0x7fdc40bb,0x4900cfcd,0x5f6cc00c,0x0000002c,0x2efc8800,
    0xff339fd5,0x20098039,0xfd32efc8,0x019fd519,0x59ff7100,0x00081020,
    0x2000e401,0xf703f104,0xd83641b8,0x2601fc02,0xbae403fe,0x84016607,
    0x00104008,0x00000044,0x00000000,0x00000000,0x00000000,0x00390000,
    0xa81dc032,0x41660dc5,0x8017c058,0x2b900bea,0x0000c07b,0x00000000,
    0x00000000,0x00000000,0x00000000,0x20000000,0x0cb980ac,0x20e40930,
    0x8e60681b,0x800688c8,0x9ddd31b9,0x000fbbaa,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x6e5e5cc0,0x440a601d,0x3501b80a,
    0x577cca20,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x44039900,
    0x03995003,0x980b6e20,0x2600cccc,0x333221bb,0x5e542ccc,0xa9666541,
    0x665c3ccc,0x44165c42,0x99501ccb,0x0cda9817,0x26f36a20,0x19999528,
    0x951ccc88,0xcca83999,0x4deed41c,0x3732a202,0x9997028b,0x33332a17,
    0x986665c1,0x710bcccc,0x664c1799,0x23cccccc,0x03605d3d,0x03a236a0,
    0x0bfb7b10,0xb817fff6,0xffffb80d,0x2d87a2ff,0x1bee2fdc,0x4c7a21ec,
    0x00efa81e,0x7ec370d5,0x3262ec80,0x981fea3f,0x8077d41f,0x445f40ea,
    0x43f705fa,0x3ee05fc9,0xd01ffa85,0x07fd881b,0x335b707f,0x3e21ff33,
    0x00370991,0x1c02c8ba,0x007303f2,0xf81d8176,0xf86a8b50,0x70d07e86,
    0xbfb06c8b,0x987e1660,0xd807dc3f,0x49807f44,0x16205f88,0xf50b50d5,
    0xfa81a601,0xd107f903,0x70bfa201,0x1fe40e09,0x931ae1f3,0x0f8fe200,
    0x06c3d400,0x088075c0,0xd51b25a8,0x1fc83f90,0x261f4244,0x84fcd82f,
    0x3e23f848,0x4880fea4,0x01c81fd4,0x362440bf,0x04f98906,0x407f3024,
    0x201640fe,0x40b30ff8,0x7c45fa81,0x40058b91,0x8002d8ef,0x177fcc3b,
    0xc8003f98,0x82d93ea2,0x227dc4f9,0x2227c42b,0x87fb583f,0x0fcc0848,
    0xf80803fb,0x17e05886,0x06fe4488,0x0805fb02,0xf980fe60,0x7d401265,
    0x22000d8d,0x5d2e80ff,0x3f2000e4,0x039fd10d,0x7edcc2cc,0xebafc84f,
    0x5c0f800b,0x1ba01cdf,0xdf058fdd,0xd1584f88,0x6c02443f,0xb8003fc4,
    0xbf015c2f,0x3fa22440,0x003fe03f,0x6403f980,0x6c001b2f,0x7ec001ef,
    0x4c579102,0x3f6a0044,0x3f202dc6,0x3fd100df,0x0ff51ee8,0x1df905a8,
    0xbc98fdc0,0x3f20912f,0x9960be60,0x880910ff,0x001be60e,0xf01a37c4,
    0x6442440b,0x37cc1eff,0x80ceeb88,0x7fc403f9,0x7fc4002c,0x013ea000,
    0x0dae8960,0x6c9f95c8,0x03fc8800,0xf513e274,0x64c16403,0x9f301efa,
    0x0dd3e26e,0xfdbbfd88,0x8b7d4580,0x3e60e404,0x47f20006,0x102fc049,
    0x1fff4c09,0x0fe80ff3,0xf5007f30,0xbfd5000d,0x003be200,0x5ca74390,
    0x53ff13dc,0x405e8005,0xf313e27b,0x9a607c09,0x2dfa06f9,0x466016fd,
    0xbf70b06e,0xf8838091,0x9f30000f,0x40bf0032,0x0ffb8049,0x3ec03ff1,
    0xf1007f30,0xfb588009,0x003fb005,0x7b97c3a8,0x17bee2f4,0xd3013200,
    0x303f85f8,0x1fa8b90b,0x7dc97f70,0x0bea004b,0x04cfd82c,0x00fec0a2,
    0x00b3fd00,0x0e1d40df,0x07fb1fdc,0x05f303ec,0x44009f10,0x401ff10d,
    0x220104fb,0x27a97c45,0x45fd86f9,0x6401d800,0x03e23643,0x7c2ec164,
    0x443ff100,0x0fa001ff,0x09fd1058,0x881be600,0x00bbea02,0x216403f6,
    0x221f980d,0x40fb00ff,0x4f8801f9,0xbf507600,0x0481be60,0x1727d019,
    0x3b6a17fd,0x05439adf,0x16a2b8d3,0x205a8be2,0x2cc7980f,0x01f61b60,
    0x807403d8,0x812e04f8,0x01c40dfa,0x4f8803fc,0x40dd85a8,0xb06f985c,
    0x06a8fb8f,0x3200bf30,0xfd09fd04,0x0ea16a03,0x261746d4,0x3f23fffd,
    0x37fe20ef,0x3dffd84d,0x036ef660,0x579502cc,0xa83a8017,0x015d4c04,
    0x2605bf93,0xd301fa04,0x200999bf,0x3b66004b,0xd9904dcc,0x22019b79,
    0x2ddbaded,0x400e6fcc,0x500bffda,0xfea83bfd,0xddff91df,0x709ffddd,
    0x2200a980,0x04401101,0x00800220,0x00080088,0x00180100,0x00400800,
    0x01000130,0x41002600,0x0cc40018,0x00000220,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x88000000,0xcccccccc,0x0133264c,0x64c33322,0x64c03ccc,0x99711ccc,
    0x66664c17,0x32e601ab,0x999932cc,0x05e665c3,0x666664c0,0x99932ccc,
    0xcc981579,0x301abccc,0x99999999,0xccccc989,0x02e000ab,0x07221d40,
    0xb7101d10,0x80002005,0x800571b8,0x2baa761c,0x7b99df99,0x32017fc4,
    0x01ff886f,0xfa81ff10,0x933ff102,0x0ff401df,0x3ee03fe2,0x3be20905,
    0x225c9999,0x43fc99ff,0xeb99aff8,0x333ff01f,0xff881d33,0x00cfca89,
    0x7ecc03e8,0x3601fcc4,0x7f6fcc0f,0x4002c00f,0x3ae22dc9,0x8a7cc00b,
    0x17e20abf,0x440dfd07,0x00fd05fe,0x00f446e8,0x40bf71ba,0x306e80fd,
    0x740f307f,0x6c6f8906,0x6c43742f,0x1507e82f,0x07f70dd0,0x9f006fa8,
    0x0fdb8010,0x807f7064,0x0336a005,0x04019b50,0x8bf102be,0x701fce80,
    0x01fa09f7,0x00ec4dd0,0x81fe2374,0x260dd07d,0x157fd43f,0x37408374,
    0x20dd17ea,0x03f40ff8,0x1be21ba0,0xf005f9b0,0xfac98009,0x01be0620,
    0x0bdb880b,0x00eecc00,0x02fc40f4,0x8e82fc74,0x800fd04f,0x2003d16e,
    0xb037cc6e,0x7cc1ba0f,0x40cfe443,0x37404c6e,0x40dd13ea,0x143f42fb,
    0x0bf10dd0,0x402fc64c,0xfaac004f,0x2c05d800,0x00005f50,0x82c01d91,
    0xfb6805f8,0x04f8ba83,0x8ee800fd,0xb1ba001e,0xe83ec05f,0xf707f306,
    0x20323740,0x3a0fec6e,0xfd13ea06,0x21ba0588,0x6c7202fd,0x0027c00f,
    0x1003ea39,0x6666545f,0x2a1cccce,0x930000cd,0xf101803b,0x13e6d00b,
    0x3a09f11d,0x7f7f4007,0x36ffa001,0x83ec00cf,0xeeeeeefe,0x3a07b83f,
    0xe80feeef,0xe83ed9af,0xfd1be206,0x740fdddd,0x01ffecdf,0x404f9962,
    0x5473004f,0x402dc00f,0x03bb3005,0x000336a0,0x4d00bf10,0x3e2930fd,
    0xe800fd04,0xd001ffae,0xb007f93d,0x7cc1ba0f,0x1ba07b83,0x353dd017,
    0xdf303740,0x3a0487e8,0xb81ff4c6,0x13e03f42,0x2a2c43b3,0x4006c00f,
    0x16e44005,0x1005edc4,0x2203663b,0x3e66805f,0x413e21b4,0xab74007e,
    0x26e801ff,0x83ec01fd,0x707f306e,0x0223740f,0x037401ba,0x187e89f5,
    0x07f41ba0,0x7ee66674,0xdf913e02,0x7ee666e4,0x2003903c,0x3d710005,
    0x7cc00b6e,0xbf103f74,0x59fe8d00,0x03f413e2,0x7fd4dd01,0xdf137401,
    0x0dd07d80,0x81ee0fe6,0x00dd006e,0x41fd81ba,0x8374007e,0x441d43fc,
    0x2213e06f,0x373332a5,0x002a83cf,0x04200016,0x44020400,0x7d46805f,
    0x7417e21f,0x51ba1207,0x237403ff,0x41f604fa,0x507f306e,0x00dd033f,
    0x837401ba,0x207e85fa,0x3fd06e84,0x03f900d8,0x500e213e,0x0107501f,
    0x00000014,0x06f88000,0x7c45e878,0x9701fd06,0x5ff50ff0,0x0ff21fe0,
    0x83fc07f4,0x3fe884fa,0x0ff007f8,0x13ee1be0,0xf84a83f4,0x2a2fdc46,
    0x7c1be605,0x7d4014c4,0x55557540,0x0000002c,0x6d400000,0xfc980bff,
    0xfda8ae1c,0xdff930bf,0x4c3ffddd,0x3f21cffc,0xff932dff,0x32dfe839,
    0x3265bff9,0x3fae1cff,0xfc9800be,0xff9301cf,0x3ff26039,0x981cddde,
    0xedcceffb,0x3bff261f,0x7543deed,0xdffd983f,0x015df731,0x3ea0fa80,
    0x007fffff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x05551554,0x2e60f32a,
    0x22aa983c,0x2c980aa8,0x2202f260,0x55541cca,0x55455551,0x33223261,
    0x93039710,0x52602f26,0x2aaaa0ca,0x2aaa62aa,0x0000aa88,0x1b14a824,
    0x4ccc436e,0x2e199999,0x8800881e,0xcccccccc,0x7ffff13c,0x00000000,
    0x43ec7d80,0x15b8f11c,0xc83fb09f,0x0fd86442,0x207e4762,0x7447f51d,
    0x4b51be27,0xefbcafea,0x2a0eebc9,0x45fceafe,0x22fdafea,0x44fb999e,
    0xe807e5fb,0x6c16dc02,0x4ffa5f57,0xccccccca,0xbb0f60cc,0x444285bd,
    0x20888888,0x001bbbb8,0x40000000,0x0fc3dc7b,0x21b63e89,0x0ec2c3f9,
    0xf126c5f1,0x83f226c5,0xc83ee0fa,0x7f70fdc0,0x8bee0fcc,0x502fb87c,
    0x9fc83744,0x15d2982b,0x3216b107,0x12225f36,0x104c9000,0x00079bd9,
    0x00000000,0x5c7b8000,0x4102fe87,0x4cdb07e9,0x66667c42,0xf803f14e,
    0x8fe1fd43,0x3ee123fb,0x2f887e60,0x703ee3dc,0x403f600f,0x9f504ee8,
    0x2390dd59,0x41f2d439,0x1111111a,0x04101111,0x00000130,0x00000000,
    0x87b8f700,0xca81efe8,0x23f507ca,0x2601f984,0x10fe601f,0x3726c8bf,
    0x41f50556,0x70be21f9,0x3dc0fa8f,0x2a017dc0,0x37ae203f,0x306c4981,
    0x65435347,0xcccccccc,0x00000000,0x00000000,0x2e3dc000,0xc87fee07,
    0x8de81f25,0x1084f884,0x17e2109f,0x373f313e,0x3ea093f5,0x2f887e60,
    0x703ea3dc,0x804f980f,0xed981fcc,0x206c3ebc,0x00030c58,0x00000000,
    0x00000000,0x41f70000,0x53e2287b,0xb81f22f9,0x81db01cf,0x74511b63,
    0x67417c46,0x7d4137e5,0x2f887e60,0x703ea3dc,0x0637440f,0x6dc3746e,
    0x0a66a9d8,0x0000005c,0x00000000,0x00000000,0x265f5000,0x4b63c0fd,
    0x11fd54f8,0x7d40bf10,0x3ee0dacf,0x17dc5aaf,0xc8bee0b5,0x4c1f700f,
    0xf70fe21f,0x3ee07dc1,0x4381fb00,0xf813e649,0x00000002,0x00000000,
    0x00000000,0xffe80000,0x3be0cfba,0x57fe44bb,0x00b202fa,0xd503bfd5,
    0x99f703bf,0xd11a201b,0x2673fa60,0xdfc99dfd,0xd519fd51,0x37faa19f,
    0x66677dc1,0xfa93ea6d,0x000a80cf,0x00000000,0x00000000,0x00000000,
    0x26004100,0x00800100,0x20020020,0x00101001,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_21_usascii_x[95]={ 0,2,1,0,1,0,0,0,0,0,1,0,1,0,
1,0,0,2,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,-1,1,0,-1,0,0,0,0,0,0,0,
-2,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,2,1,1,0, };
static signed short stb__times_21_usascii_y[95]={ 16,3,3,3,2,3,3,3,2,2,2,4,14,11,
14,2,3,3,3,3,3,3,3,3,3,3,7,7,5,7,5,3,2,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,19,3,7,2,7,2,7,2,7,2,2,
2,2,2,7,7,7,7,7,7,7,4,7,7,7,7,7,7,2,2,2,9, };
static unsigned short stb__times_21_usascii_w[95]={ 0,3,6,10,8,16,15,3,6,6,8,11,3,6,
3,6,9,6,9,8,9,9,9,9,8,9,3,4,11,11,11,8,18,14,12,12,13,12,10,14,14,6,8,14,
12,17,15,13,10,13,13,9,12,14,14,18,14,14,12,5,6,5,9,11,4,9,10,8,10,8,9,10,10,5,
6,10,5,15,10,9,10,10,7,7,6,10,10,14,10,10,9,6,2,6,11, };
static unsigned short stb__times_21_usascii_h[95]={ 0,14,6,14,16,14,14,6,19,19,9,11,6,2,
3,15,14,13,13,14,13,14,14,14,14,14,10,13,10,5,10,14,19,13,13,14,13,13,13,14,13,13,14,13,
13,13,14,14,13,17,13,14,13,14,14,14,13,13,13,17,15,17,7,2,4,10,15,10,15,10,14,14,14,14,
19,14,14,9,9,10,14,14,9,10,13,10,10,10,9,14,9,19,19,19,4, };
static unsigned short stb__times_21_usascii_s[95]={ 129,231,159,235,84,1,18,252,44,20,140,
212,166,211,252,111,246,180,202,34,192,43,53,63,73,101,248,187,224,170,236,
127,1,165,152,136,125,139,103,189,81,74,204,45,32,14,111,179,114,58,60,
179,1,164,149,82,228,213,243,78,104,72,149,199,182,20,118,50,93,41,221,
210,199,193,51,168,162,84,100,59,140,151,111,12,96,1,30,69,129,129,119,
37,34,27,187, };
static unsigned short stb__times_21_usascii_t[95]={ 16,1,50,1,1,21,21,36,1,1,50,
36,50,50,43,1,1,36,36,21,36,21,21,21,21,21,36,36,36,50,36,
21,1,36,36,21,36,36,36,21,36,36,21,36,36,36,21,1,36,1,36,
21,36,21,21,21,21,21,21,1,1,1,50,50,50,50,1,50,1,50,1,
1,1,1,1,1,1,50,50,50,1,1,50,50,36,50,50,50,50,1,50,
1,1,1,50, };
static unsigned short stb__times_21_usascii_a[95]={ 76,101,124,152,152,253,236,55,
101,101,152,171,76,101,76,84,152,152,152,152,152,152,152,152,
152,152,84,84,171,171,171,135,279,219,202,202,219,185,169,219,
219,101,118,219,185,270,219,219,169,219,202,169,185,219,219,286,
219,219,185,101,84,101,142,152,101,135,152,135,152,135,101,152,
152,84,84,152,84,236,152,152,152,152,101,118,84,152,152,219,
152,152,135,146,61,146,164, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_21_usascii_BITMAP_HEIGHT or STB_FONT_times_21_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_21_usascii(stb_fontchar font[STB_FONT_times_21_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_21_usascii_BITMAP_HEIGHT][STB_FONT_times_21_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_21_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_21_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_21_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_21_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_21_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_21_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_21_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_21_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_21_usascii_s[i] + stb__times_21_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_21_usascii_t[i] + stb__times_21_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_21_usascii_x[i];
            font[i].y0 = stb__times_21_usascii_y[i];
            font[i].x1 = stb__times_21_usascii_x[i] + stb__times_21_usascii_w[i];
            font[i].y1 = stb__times_21_usascii_y[i] + stb__times_21_usascii_h[i];
            font[i].advance_int = (stb__times_21_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_21_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_21_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_21_usascii_s[i] + stb__times_21_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_21_usascii_t[i] + stb__times_21_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_21_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_21_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_21_usascii_x[i] + stb__times_21_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_21_usascii_y[i] + stb__times_21_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_21_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_21_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_21_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_21_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_21_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_21_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_21_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_21_usascii_LINE_SPACING
#endif

