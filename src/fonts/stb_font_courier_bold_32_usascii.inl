// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_32_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_32_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_32_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_bold_32_usascii_BITMAP_HEIGHT        114
#define STB_FONT_courier_bold_32_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_bold_32_usascii_FIRST_CHAR            32
#define STB_FONT_courier_bold_32_usascii_NUM_CHARS             95

#define STB_FONT_courier_bold_32_usascii_LINE_SPACING          15

static unsigned int stb__courier_bold_32_usascii_pixels[]={
    0xe98f6400,0x00000004,0xe8000b88,0x01ee41ee,0x40030260,0x00b6a3da,
    0xeeed8004,0x3bbb224e,0x0026205e,0x10000310,0x00262001,0x00180060,
    0x08000133,0x3ffa8000,0x4c005ff9,0x05fb006f,0x7c002fec,0x3ffe62ff,
    0x64df9005,0xfffe805f,0x6d40dfd0,0x3e02dfff,0xf52fffff,0xd30dffff,
    0xa803dfff,0x002dfffe,0x13bffb2a,0x1fffffdc,0x37fffa60,0x01dff302,
    0x9fffffb3,0x3fb2a001,0x00cb8cef,0x3e63ffd0,0x3ff2006f,0x02ffd403,
    0xff000dff,0x3fffd85f,0x3fa7fd80,0x2fffd407,0xffb10dfd,0x01bfffff,
    0x21bfffff,0x46ffffd8,0xfffefffa,0xfffff501,0xffb003ff,0xe81fffff,
    0x6fffffff,0xffffff30,0x7fff909f,0xffffffa8,0x7ec00eff,0xffffffff,
    0x6ff9802f,0x9800fff4,0xff100fff,0xfffb105f,0x3300397d,0x0bff3013,
    0x37f4ffd0,0xff03ff60,0xeffff88d,0x40effffd,0xdfd006ff,0xd886ffc4,
    0xffff986f,0x100efffc,0xd9bffffd,0xcefffc8b,0xff84fffe,0x1fffecff,
    0xf127fff4,0xffd99dff,0x7ffec0bf,0xfffffedf,0x42ffd803,0x36005ffa,
    0xdff704ff,0xffffff90,0x20000dff,0x6fe806ff,0xdff01bfe,0xffd8dff0,
    0x2fff4c1e,0x7f401bfe,0x3e21bf26,0x067fe40f,0xfd109ff9,0xff8803ff,
    0x07ffcc1f,0x7d41bff3,0x1fffec6f,0xff107ff1,0x3fffb01f,0x809fff70,
    0xffd06ff9,0x3ffe6001,0x4c2ffe80,0xfffeffff,0x6665cc7f,0xff84cccc,
    0x3e6ff806,0x437fc05f,0x3bfee6ff,0x45ffd100,0xdfd006ff,0x7ec07fe2,
    0x741bfe22,0x0effd86f,0xb04ff980,0x0ffe43ff,0xff91ffec,0x3200887f,
    0x77fcc2ff,0x00ffee00,0x3ee07ff9,0x3ff6004f,0x6c37fd43,0x3faa0bff,
    0x3ffffea7,0xff87ffff,0xf15ff806,0x86ff80bf,0x07ffa6ff,0x7fcdff30,
    0x26dfd006,0x47fb107f,0xff703ffa,0x0077fcc1,0xfb04ff98,0x983ff43f,
    0x3fff25ff,0x0ffec002,0xf100bfee,0x3ffc403f,0x4003ffe0,0x7fec6ffa,
    0xd506ff83,0x7ffffcc7,0xff87ffff,0xfffd7106,0x05bfffdd,0x9bfe1bfe,
    0xffb005ff,0xfe8037fc,0xffa8df56,0x07fee3ff,0xff917fd4,0x3fe004c7,
    0x23ffc40f,0xdff307ff,0x800fffdc,0xfd87ffb8,0x4019800f,0x7dc03ffc,
    0x3ffe004f,0x3603ffe0,0x2a2002ff,0x7feaaaaa,0xff906ff8,0xffffffff,
    0x0dff01ff,0x13fe6dff,0xff87fe40,0x2edfd006,0x3ffff24f,0x403ff23f,
    0x3ff64ff9,0x02ffffd9,0xfb7bfff9,0x2ffd89ff,0x3ea7ffe8,0x3fa600ff,
    0xff82ffff,0xff100006,0xfff8801f,0x23ffd000,0xff507ff8,0x00037bff,
    0x3ffa1ffa,0xfffffa82,0x45ffffff,0xff85ffb8,0x2005ff56,0x0dff2ffb,
    0xa7ddbfa0,0x3fc8bff9,0x7c403ff2,0x3ffffa4f,0xd04fffff,0xdfffffff,
    0x641bff70,0xff30ffff,0x7ffe401f,0x5ff885ff,0x9ff70000,0x00fff200,
    0xff997fec,0x3ffff606,0x74003fff,0x6fffc87f,0x3ea7ff50,0x7ffff02f,
    0x3feadff0,0x23ff9003,0xdfd006ff,0x92fe53ee,0x807fe47f,0x3ffe4ff8,
    0xfffecfff,0x7ffff441,0xfe80efff,0xfffffdff,0x80fff31f,0x2fffffd9,
    0x0002ffc4,0x1000fff8,0x3f200fff,0x80bff54f,0xffffffda,0x21ffa004,
    0xf507fffa,0x20bfee5f,0xf81ffff8,0x009ff36f,0x37fc3ff6,0x9f76fe80,
    0x23fc8ff2,0xff300ffc,0x06ffff49,0xffd8dff7,0x5fffebef,0xffffff98,
    0xff10ffef,0x7fec400d,0x0037fc1f,0x0027fdc0,0x2e00fff2,0x0bff74ff,
    0x7fff5cc0,0xd0ffd001,0x3ee03bff,0x203ff72f,0xff85ffda,0x1003ffe6,
    0x037fcfff,0x29f76fe8,0x47f90ef8,0xff501ffb,0x407ffec7,0x3ffe67ff,
    0x40fffcc1,0xe9efffd8,0x002ffc6f,0x3f227fe4,0x7f40000f,0x7fcc001f,
    0x53ffd806,0x03510dff,0xe801ffdc,0x706ff87f,0xffddffdb,0x3fe019df,
    0x3f26ff86,0x1ffec05f,0x3fa00dff,0x7fec9f76,0x3fe64ffe,0x5c5ff703,
    0x3ff902ff,0x7e413fee,0xfa84c03f,0x000ed44f,0x3ea37fc4,0x40b8804f,
    0xb0005ffa,0xffe805ff,0xf70fff11,0x01ffd40f,0x6ff87fe8,0xffffff98,
    0x03ffffff,0x4dff0dff,0xd884fff8,0x037fc6ff,0x4bf36fe8,0x46ffffc8,
    0x1ffd06ff,0xfd827fd4,0x203ff91f,0xf3004ff9,0x400005ff,0xfff86ff8,
    0x8dfd300c,0x30001ffe,0xfff80dff,0xfb03ffe0,0x1ffd109f,0x3e1ffa00,
    0xffffb06f,0x3dffffff,0x3fe1bfe0,0x677ffd46,0x42fffecb,0xdfd006ff,
    0x55541be2,0x2e1ffec0,0x7ffc45ff,0xf53ffc40,0x0bff60bf,0x00fffee0,
    0x7fe40288,0xcffff984,0x5fffdcbb,0x0001bfe6,0x3e603ffd,0x217ff47f,
    0xecdffffd,0x3a005fff,0x406ff87f,0x01ffa7fd,0x1bfe1bfe,0x3fffffea,
    0x6ff81fff,0x7f4dfd00,0x7ffc4001,0x81fffebe,0xfdbdfffa,0x3ffe24ff,
    0xffffdbdf,0x3b2f3aa0,0x15105fff,0xbabcffe8,0x301fffec,0xffffffff,
    0x7fec1bff,0x7fd40002,0xb89ff905,0x7ffe45ff,0x1fffffff,0x3e1ffa00,
    0xd3ff406f,0x0dff00ff,0x3f620dff,0xf00dffff,0x9bfa00df,0xfa8005fc,
    0x02ffffff,0x3ffffff6,0x7ffcc0ff,0x41ffffff,0xfffffffe,0xd8dff104,
    0xffffffff,0x6dc402ff,0x43efffff,0x00006ff9,0xff883ffd,0x0fffc41f,
    0xffffbbd3,0xfe8001bf,0x7405ff87,0x201bfe7f,0x06ff87fe,0x83bffff1,
    0x401bfe2a,0x21ff46fe,0x3fae06c8,0x5c402fff,0x00cffffe,0xbfffffb1,
    0xfffff701,0x37fc403b,0x3fffff22,0x98001dff,0x0bff601a,0x2ffd4000,
    0x7e417ff2,0x3bfe205f,0x5ff98000,0xf00fff26,0x4037fcdf,0x3fe0cffd,
    0xfffff886,0x1fffdfff,0x88155dff,0x7cc6ffaa,0x06ffeeff,0x88000a88,
    0x2a60009a,0x00353001,0x55300544,0x80000013,0x00006ff8,0xff887ffc,
    0x3fff102f,0x40037fc0,0xff13ffd9,0x5ff801ff,0xf500bff1,0x1bfa1fff,
    0x3ffffff2,0xf0ffffff,0x263fffff,0xa86fffff,0x00cefffd,0x00000000,
    0x00000000,0x40000000,0x00003ffb,0xffb9ffdc,0x027fe405,0x7ec40dfd,
    0x0effffff,0xf005dff1,0x801ffc9f,0x17f67ffb,0x2eb37fea,0x3e0beffd,
    0xf31fffff,0x440dffff,0x00000009,0x00000000,0x00000000,0x01bea000,
    0xb97f4000,0x4fe800ff,0xfb813f60,0x0effffff,0x193000c4,0x510005cc,
    0x80005441,0x15555500,0x02aaaa88,0x00000000,0x00000000,0x00000000,
    0x00000800,0x40026040,0x005c4028,0x59dfffb1,0x00000001,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x40000000,
    0xd954ccb9,0x5400179d,0x9972ceec,0xaccb9837,0x0de65440,0x39ddb710,
    0x00159993,0xd7000002,0x2c980bdd,0x0bddd900,0x00010000,0x09880008,
    0x3bbbbb60,0x41eeeeee,0xeeeeeeec,0x008001de,0xf8800200,0xfffeffff,
    0x4c02ffff,0xeffffffe,0xf31fffff,0xfe8bffff,0xfb81ffff,0xfeffffff,
    0x36a04fff,0x0003dfff,0x83ffffc4,0x02ffffe8,0x01bfffe2,0x7fff5c00,
    0x7100babe,0x32200dfb,0xe82ffffe,0xffffffff,0x7fec2fff,0x5fffffff,
    0xfffeca80,0xb880caad,0x803efffe,0xffffffff,0x03ffffff,0xfffffff3,
    0x1fffffff,0x17ffffe2,0x83fffffb,0xfffffffb,0x83ffffff,0xffffffd8,
    0x320000df,0x7f907ffe,0xec80dd51,0x440006ff,0xfffffffe,0x3fb223ff,
    0xe9806fff,0x5fffffff,0x7ffffff4,0x6c2fffff,0xffffffff,0x7ffec01e,
    0x2fffffff,0x7fffffec,0x74c00eff,0xb309efff,0xfe883fff,0xffb511ef,
    0xffd105ff,0x03bfee05,0x265bfff1,0x80cffffc,0xedeffff8,0x0000ffff,
    0x45f83ff4,0x6fe802fa,0x7fff4000,0x4ffffedf,0x3ffffff2,0x7fffc406,
    0x23ffffcd,0x3ff605fd,0x0007fec1,0x77ffff44,0x24ffffed,0xfdfffff8,
    0xfe805fff,0xbff900ef,0x3605ffb8,0x3fea07ff,0x905ffd05,0x3fea0bff,
    0x3dffb02f,0x005ffe98,0x7cc3ff40,0x7401fcc3,0x3ea0006f,0x7ff4c1ef,
    0x3efbfea4,0x6ffdc06f,0x713ffd40,0x21bfe201,0xd8000ffd,0xfd981eff,
    0x07bfe24f,0xe803ffd3,0x3ffc02ff,0xf8807ff6,0x0fff407f,0x7f41bfea,
    0x0bffe01f,0x4403bfea,0x65c02ffe,0x0ffd2cee,0x001f91ba,0x3bb2adfd,
    0x3ff200bc,0x089ff302,0x3fa037f4,0x03ffb00f,0x360ffee0,0x260010ff,
    0x3e600fff,0xb81ff43f,0x7ff403ff,0xf07fec00,0x0ffd00ff,0x7f45ffa8,
    0x80dff02f,0xffe82ffc,0x837fcc01,0xffffffe9,0xff507ffe,0x8088bfd9,
    0xffffeffe,0xff701eff,0x200ff405,0x16d406fe,0x2003ff90,0xffd81ffd,
    0x204effed,0xdb802ffd,0xfa8064c0,0x1fff403f,0xfd8fff10,0x1ffe601f,
    0x7d47ffa0,0x03ffe06f,0xff82ffd8,0x50ffb005,0xffffffff,0x6d40ffff,
    0xfeb98bef,0xfffffe85,0x82ffffff,0x100afff9,0x000dfd00,0x800fff88,
    0xffb06ff8,0x1dffffff,0x0001ffd0,0x07ffa200,0x201fffd0,0x7fdc5ffd,
    0x01fffa06,0x7ff5bfea,0x40fff602,0x7cc2fff8,0x3ff9004f,0x45f7ffc4,
    0x07ffffc8,0xfffec988,0xffffe81c,0xfffeb89c,0xeffffd80,0x3fa000ac,
    0x7fec0006,0x07ff7005,0x3bbffff2,0x6ff86fff,0xfb880000,0xffe806ff,
    0xffc9adff,0x7ffc41ff,0xfffc99cf,0x9ffd007f,0xffb80dff,0x7ffec41e,
    0x801ffd42,0x3ff22ffb,0x81fffa05,0x1cffffc9,0xb03fff40,0x3ff209ff,
    0x00dfffff,0x10006fe8,0x2001fffd,0xbb301ffe,0x1fff5415,0x0000bff1,
    0x1fffffc8,0xfffffe80,0x02ffffff,0xfffffff3,0x200fffff,0x02fffffa,
    0xdbefffe8,0x4c2fffff,0xff7003ff,0x7017ff43,0xfff70fff,0x8017339d,
    0x3e604ffe,0x3fae606f,0x400effff,0xe88006fe,0xf1001fff,0x7d4000df,
    0x217fe25f,0xefffffeb,0x33fffa01,0xfbffd000,0x05dfffff,0xfffffd98,
    0x2007fedf,0x1006fffe,0xfffffffd,0xff885fff,0x41ffb005,0x7fc406ff,
    0xd51cec87,0x7f409fff,0x07ff400f,0x7ffdd440,0x0037f405,0x007fffe6,
    0x0003ffb8,0xdff1bfe2,0xffffffd0,0x077f40bf,0x5c5ffa00,0x4c002bcc,
    0xffb1bccb,0x17ffd400,0x3ffff200,0xe82ffcdf,0x7fc400ff,0x22037fc7,
    0x7ff007ff,0x3fa05fb3,0x07ff400f,0x7fe88095,0x50037f40,0x8001dfff,
    0x40001ffe,0x43fec7ff,0xeffeeeda,0x000baa01,0x00001ffa,0x5003fec0,
    0x4c000dff,0x05ff709a,0xfd80bff9,0x00fff43f,0xf500fff7,0xffd06e85,
    0x137fcc07,0xffd807ff,0x401bfa01,0x000efffb,0x00037fc4,0xff917fe6,
    0x04ff9805,0x1ffa0000,0x7ec00000,0x0bffa007,0x3ffb0000,0x6c17ffa0,
    0xdffc86ff,0x07ffe980,0x07e40fc8,0x440ffff4,0x3fe64ffd,0x0fff502f,
    0xfc806fe8,0xf70005ff,0x00e5407f,0xff989ffb,0x13fe602f,0x7fe80000,
    0xfb000000,0x1bfea00f,0xffb88000,0x3bffe607,0x1fffecbc,0xbefffe88,
    0xdfffffec,0xbf0bea03,0xfffffdb8,0xffffebce,0x3bfffe60,0x5ffffdbc,
    0xb1037f40,0x02209fff,0x7c03ffd0,0xecbacdff,0xffc80fff,0xfedbbcef,
    0x0dcc04ff,0xffffd900,0x400001bf,0x4fffffec,0x7fffffe4,0xfeb8005f,
    0x03ffffff,0x7fffffd4,0x3e601fff,0xffffffff,0x201fffff,0x22febcfe,
    0xfffffff8,0x2fffffff,0x7fffffc4,0x20efffff,0xfffeeec8,0xff70ceee,
    0xddddddff,0x37fc01ff,0x3fffff20,0x202fffff,0xfffffffd,0x2603ffff,
    0xf8801fff,0x3fffffff,0xfff30000,0x263fffff,0xffffffff,0x7ffc002f,
    0x003fffff,0xbfffffb1,0xfff91001,0xfffd9fff,0xeffd980b,0xcffffd83,
    0x0dffffff,0xfffb5d90,0xff707fff,0xffffffff,0x3fffee7f,0xffffffff,
    0x2007f202,0xffffffeb,0xffd9801d,0x00bfffff,0x800fffcc,0xdfffffec,
    0x3b200000,0x644effff,0xdffffffe,0x7ff5c000,0x30001bdf,0x54c00035,
    0x1880001a,0x13553000,0x0aa98800,0x3ffffa60,0x71efffff,0xffffffff,
    0x0005ffff,0x01aa9980,0x026a6200,0x00015100,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x2a0fbba6,0x4000eeed,0x003eeed8,0x005ddb00,0x17bbbb6e,0x7dddb710,
    0x37bbb221,0x001eb80b,0x77776dc0,0xb803deee,0x20bdeeed,0xeeeeeeed,
    0x24eeeeee,0x4c1ceedb,0x6d43deec,0x6d42deee,0x6dc2deee,0x764c1cee,
    0x776d43de,0x7775c40d,0xddb710bd,0x17bddddd,0x427fff40,0x000fffff,
    0x027fffdc,0x03ffe800,0xdffffff0,0xfffffc80,0xfffffb4f,0x009ff09f,
    0x7ffffcc0,0x01ffffff,0xffffffd1,0x7ffff4ff,0xffffffff,0xfffff35f,
    0xfffffe8d,0xffffff11,0x3fffe21f,0xfff30fff,0xfffe8dff,0xffff11ff,
    0xffffc8bf,0xffff94ff,0x7fffffff,0x13fffee0,0x003fffae,0x09fffb30,
    0x0fffa000,0x7ffff5c0,0x7fffd406,0xffff52ff,0x0bff05ff,0xffffe800,
    0x206fffff,0xfffffffe,0x3ffffa7f,0xffffffff,0xffffd15f,0xeffffc89,
    0x3fffffa0,0x7ffffec5,0x3ffffa26,0x77fffe41,0x3fffff60,0x3ffffea2,
    0xfffff52f,0x03dfffff,0x09fffff1,0x80007fe4,0x00004ff9,0x20001331,
    0xdff006ff,0x81ffa603,0x880005ff,0x09eff999,0x887bfe20,0x27ffa0a9,
    0x999eff99,0x7ffdc5ff,0x817ffcc1,0x31009fff,0x3fea0dff,0x0fffc40f,
    0x0efffe88,0x9883ff44,0x0099eff9,0x13ffbff2,0x0000ffc8,0x00009ff3,
    0x37fc0000,0x7406ff80,0x7fe5447f,0x0accccce,0x00bff000,0x3a007ff5,
    0x3e37fc7f,0x0effc85f,0x7409fff1,0x3e26647f,0x17ff205f,0xfe809ffb,
    0x7fe84fff,0x9806ff80,0x04ff9fff,0x65443ff2,0xff300acc,0x059dd939,
    0x79999710,0x01bfe000,0x3fa037fc,0x7ffffec7,0x05ffffff,0x540bff00,
    0xcccdffdc,0x7c7fe82c,0xd82ffc6f,0x5ffe8eff,0xfa87fec0,0x09ff12ff,
    0xfb97ff44,0xfffe806f,0x03ff41ff,0x7f4037fc,0x204ff9bf,0xfffd0ffc,
    0x3fe60dff,0xdfffffff,0x3ffffe00,0xdff0006f,0xd01bfe00,0xffffd8ff,
    0x4fffffff,0x20bff000,0xfffffffb,0x7ec3ffff,0x3fa37fc5,0xffffd104,
    0xffc801df,0x269fff91,0x7fcc04ff,0x801fff9f,0x46ffbffe,0x6ff807fe,
    0xf9b7fd40,0x43ff204f,0x05fffffd,0xfffffff3,0x7f40bfff,0x0006ffff,
    0x3fe00dff,0x443ff406,0xaaaaeffa,0x3fe0000a,0xfffff505,0x87ffffff,
    0x237fc1c8,0x3fe200c9,0xfb800fff,0x2fffff2f,0xfc803ffa,0xd004ffff,
    0xe8fffaff,0x06ff807f,0x7cc7ffe2,0x23ff204f,0x01aefffb,0x42bfffe6,
    0x54c07ffa,0xf0006ffa,0x1bfe00df,0x7fc0ffd0,0xff800005,0x3ff2a205,
    0x000aaaad,0x5c001bfe,0xf5003fff,0xfffff57f,0x2005ff75,0x2006fffe,
    0x1fff37fe,0x3fe01ffa,0x997ff206,0x3ff204ff,0x800dfffd,0xfc80eff9,
    0x0dff002f,0x401bfe00,0x3ff406ff,0x4400bff0,0x02ffc05e,0x0001ffd4,
    0x26001bfe,0x801fffff,0xcffccff9,0x01ffccff,0x003fff30,0xbff93ff4,
    0x3fe01ffa,0x41fff306,0x3f204ff9,0x2004ffff,0xff504ff9,0x01bfe005,
    0xf8037fc0,0x03ff406f,0x7d400bff,0x017fe01f,0x0000ffea,0xe8800dff,
    0x00effeff,0x7ffeffc4,0x0ffdfff8,0x001bfe00,0xaffe8ffd,0x6ff807fe,
    0xdddfffb0,0x3207dffd,0x002fffff,0x7d413fe6,0x0dff002f,0x401bfe00,
    0x37fc07fe,0x5c00bff0,0x17fe02ff,0x000ffea0,0xd800dff0,0x0bffb6ff,
    0x29fffff0,0x007ffffc,0x3a0037fc,0x77ffd47f,0x06ff807f,0xfffffffd,
    0xf903ffff,0x007fffff,0x7d413fe6,0x0dff002f,0x401bfe00,0xff302ffc,
    0x002ffc09,0x3e205ff7,0x3ffa804f,0x037fc000,0x221fff90,0x7f404ffe,
    0xfff52fff,0x6ff800df,0x6c3ff400,0xf807ffff,0xffffd06f,0x0bffffff,
    0x3ff27ff2,0x4ff9804f,0x2005ff50,0xff0006ff,0x3bfee00d,0x017ff440,
    0x2ea20fff,0x3607ff70,0xffa802ff,0x37fc0003,0x41fffb80,0x3603fff9,
    0x7ffc7fff,0x37fc005f,0x221ffa00,0xf807ffff,0xff98006f,0x5c3ff204,
    0x7cc05fff,0x05ff504f,0x4001bfe0,0x3fa006ff,0xfffdbdff,0x5efff405,
    0x73fffedb,0xf97bffff,0xf5001dff,0xec88007f,0x0ceefffe,0x1ffffec4,
    0x037fffee,0xf917fff2,0xec8809ff,0x0ceefffe,0xbdfff910,0x23fffd43,
    0xfffeeec8,0xb700ceee,0xda87fffd,0x3fee0fff,0x7f5c3def,0x3fb20def,
    0x776dc4ef,0xdeeefffe,0x7f776dc2,0x02deeeff,0xffffffd1,0xffa801df,
    0xffffffff,0xffffff32,0x4c01dfff,0xeeeffeed,0x3ff203de,0x3fffffff,
    0x7fffffe4,0xffffff10,0x85fff709,0x6403fffa,0xffffffff,0xffff704f,
    0x7ffd8bff,0x7fffffe4,0x883fffff,0x1fffffff,0xd83ffffe,0x30ffffff,
    0x27ffffff,0x2ffffffa,0xfffffff1,0x44ffffff,0xffffffff,0x200fffff,
    0x04fffffc,0x3ffffea0,0xfda80bff,0x400cefff,0xfffffffe,0xd301ffff,
    0xdfffffff,0xffffe983,0x77fffe44,0x80fffa81,0x74c03fff,0xefffffff,
    0xffffd301,0x47ff885d,0xffffffe9,0xf901efff,0xeb8bffff,0x3fa60fff,
    0x7fec4fff,0xffb11eff,0x7fe41bff,0xffffffff,0x7fffe44f,0x4fffffff,
    0x00035300,0x0004d54c,0x75400153,0xffffffff,0x0000005f,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x76d40000,0x6f76405e,0x3bbb6e23,
    0x37bb6a3d,0xeeeedb83,0x2202bcee,0x711ceeec,0x74c39ddd,0xeeeeeeee,
    0xddb711ee,0xdddddddd,0x3b6e27dd,0xeeeeeeee,0x3b6e25ee,0x01bceeee,
    0x33bbb6e2,0x6f7764c1,0x3bbb260b,0x2000ceee,0xeeeeeec9,0xeedb8800,
    0x01bcdeee,0x77776dc4,0x0002cdee,0x3ffe2000,0xfff301ff,0x3ffee3ff,
    0xff8affff,0x3e62ffff,0xffffffff,0xffd81eff,0xfff95fff,0x7ffd4bff,
    0xffffffff,0xffffff72,0xffffffff,0x3ffffee9,0xffffffff,0x3ffffee7,
    0x81efffff,0x6ffffffb,0x7ffffff4,0x3fffffe3,0x3a005fff,0x3fffffff,
    0xfffffb80,0x0dffffff,0xffffff70,0x03dfffff,0x40017dc0,0x905ffffe,
    0x261dffff,0x0efffffe,0x81dffffd,0xfffffffe,0x540fffff,0xf53fffff,
    0x7d47ffff,0xffffffff,0xfffd32ff,0xffffffff,0x3ffa69ff,0xffffffff,
    0x3ffa67ff,0xffffffff,0x7fffcc2f,0x7ffdc3ff,0x3ff20fff,0x03ffffff,
    0x3ffffee0,0xfe9806ff,0xffffffff,0xffd306ff,0xffffffff,0x3fa001ff,
    0xfffb0006,0xffff881f,0x419ff506,0x201fffe8,0x9999eff8,0xf985ffeb,
    0x85ff704f,0x9999cffa,0x7d40effd,0x999999cf,0x7fd44ffa,0xe999999c,
    0x99ffe87f,0x0fffdb99,0x6c05ffb8,0x3f2603ff,0x260001bf,0x02fffffb,
    0x3339ff50,0x407fff93,0x9999cffa,0xf004ffdb,0x3f6000df,0x7fdc4fff,
    0x7ff306ff,0x0077ffcc,0xff8837fc,0x81ffcc0f,0x7fd42ffa,0x40fffd43,
    0x3e603ff9,0x027fcc4f,0x0ffd0ffd,0x7c427ff4,0x07ffc07f,0x0007fee0,
    0x3ff3ff60,0x09ff3005,0xf9817fe6,0x0dff103f,0x4001bfe0,0x20fffffd,
    0x306fffff,0x3ffea7ff,0x0dff000e,0x3e60ffe4,0x85ff503f,0x3fe22ff9,
    0x47ff303f,0x30bfe1da,0xc8ed49ff,0x207fe85f,0xfd80fff8,0x09ff502f,
    0x0003ff70,0xffd6ff88,0x09ff3001,0xff3037fc,0x01bfe207,0xd80037fc,
    0xf53ffcff,0x260dffbf,0x5fffbbff,0x8837fc00,0x7fcc0fff,0xb05ff503,
    0x13ffa21d,0x3fa3ff98,0x3fe60a65,0x80a97fa4,0x7fe407fe,0xd06ff982,
    0xff7003ff,0xffc80003,0x3007ff73,0x3ff209ff,0x20ffe604,0xf004ffda,
    0x3f6000df,0xffd7ff9f,0x3e60dff3,0x006fffff,0xfc886ff8,0xeeff986f,
    0x2ffeeeee,0x406ffd80,0xffeeeff9,0xefff9806,0xfe806ffe,0x81ffd407,
    0x7fcc1ffe,0x03ff7006,0x10fff800,0xff300dff,0xffd75339,0x77fcc03f,
    0xfffffeee,0xfaaaaa80,0x01aaaaff,0x9ffb7fd8,0x41bfedff,0xfffffff9,
    0x67ffc004,0x2ffffecc,0xffffff98,0x402fffff,0x4c00fffb,0x6fffffff,
    0xfffff980,0x7fe806ff,0xb827fcc0,0x17fe44ff,0x001ffb80,0xfb13fea0,
    0xfff9805f,0x2fffffff,0x7ffffcc0,0xc85fffff,0xffffffff,0x404fffff,
    0xffff37fd,0x4c1bfe5f,0xfffdffff,0x3fffe004,0x02ffffff,0xfffffff3,
    0x4c05ffff,0xf9802fff,0x06ffffff,0xffffff98,0x07fe806f,0xff027fcc,
    0x01ffe21f,0x2601ffb8,0x2b3ff600,0x405ffcaa,0xfffffff9,0xff9801ff,
    0xffffffff,0x7fffe45f,0xffffffff,0xd3fec04f,0x37fcdfff,0xf51fff98,
    0x3fe007ff,0x0dffffff,0x540ffe60,0xfff102ff,0x7cc1d989,0x2017fa3f,
    0x1bfa4ff9,0xb80ffd01,0x3ff202ff,0x4009ff73,0xff501ffb,0x3ffffe20,
    0x00ffffff,0x3733bfe6,0xf9804fff,0x7fe5443f,0x55554c4f,0x1aaaafff,
    0x3ea7fd80,0x41bfe3ff,0x7fd43ff9,0x9eff800f,0xff300099,0x40bfea07,
    0x5fd85ffd,0x5f71ffcc,0x5c9ff300,0xfd07fa3f,0x01ffc80f,0x7ff5bfe6,
    0x07fee000,0x7e407fe4,0xffffffff,0x3fe603ff,0x027ffe44,0xf980ffe6,
    0x06ff806f,0xfe8ffb00,0x4c1bfe0f,0x3ffc83ff,0x0006ff80,0x3ea07ff3,
    0x0effc82f,0x7fcc7fe8,0x9ff30003,0x3a27fc40,0x1ffe607f,0x3ff3ff60,
    0x0ffdc005,0xff81ffc8,0xaaaaaaaf,0x3fe606ff,0x02fffa84,0xfb00ffe6,
    0x06ff801f,0x200ffb00,0x7ff306ff,0x801fff10,0xf30006ff,0x0bfea07f,
    0x3a03fff5,0x01ffcc7f,0x204ff980,0x3ff44ff9,0x01fffd44,0x17ffffd4,
    0x407fee00,0x7fd41ffc,0x817fe404,0xff704ff9,0x0ffe601f,0xf807ff98,
    0x7e44006f,0x6cc1deff,0x910cfffe,0xb87ddffd,0x6dc2deff,0x0ceeefff,
    0x6f7ff640,0x9dffd911,0x7777fff4,0x917ffeee,0x7bdddffd,0xfffec880,
    0xfeeeeeee,0xdfff914f,0xbfffffdd,0x37fffc00,0xffeeda80,0xffeeeeee,
    0xdfff911f,0xffeda83b,0xffd910de,0xdffb09dd,0x77ff6449,0xfffeeeee,
    0x06ff805f,0x7ffffd40,0x7fffec6f,0xffff73ff,0x7fc45fff,0x3ffe67ff,
    0x03ffffff,0x3fffffe6,0xffffff95,0x3fffffa5,0x77ffffff,0xffffffff,
    0x7ffdc03f,0xffffffff,0xfff74fff,0xffffffff,0x7fdc001b,0xffff003f,
    0xffffffff,0x3fee3fff,0x7f46ffff,0xf73fffff,0x85ffffff,0xf72ffff8,
    0xffffffff,0x001dffff,0xd8800bfd,0x543effff,0x30dffffe,0x1bfffffd,
    0x6c3fffc8,0xdfffffff,0x7fffec00,0xffffd32e,0x3ffffa1b,0x7fffffff,
    0xffffffd3,0xffd880bf,0xffffffff,0xffb14fff,0x37bdffff,0x1fff1000,
    0x3fffae00,0xffffffff,0xfffd31ff,0xffeb85df,0xffb10dff,0xf501bfff,
    0x3ffa61bf,0xefffffff,0x0baa002d,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x20000000,
    0x0001abda,0x5106a000,0x67654401,0x372a000a,0x32601bce,0x665cc2cc,
    0x3bb2a01c,0x2201aace,0x98bdeecb,0x3bb6ea01,0x654401cd,0x3dedc8ac,
    0x33332a20,0x5e6664c1,0x0de65c40,0x40accb98,0xdec8ccb9,0x0017bb70,
    0xdfa8076a,0xff700001,0x0003ffff,0xfd05fb30,0x07ffe67f,0x3ffffff2,
    0x7ff4c04f,0xa84fffff,0x3e24ffff,0xe883ffff,0xffffffff,0xffffb80f,
    0x40ffffff,0xfffffff8,0x3ff603ff,0xffffffef,0xffffe80e,0xffff52ff,
    0xfffe8dff,0x7ffcc0ff,0x3ffe66ff,0xfeffffff,0xe800ffff,0x3fff605f,
    0x3e60000c,0x01ffffff,0x3fff2200,0xbb7ffcc5,0x7fec3fff,0x5fffffff,
    0xffffff30,0xfa8bffff,0x7ffc4fff,0xfffc83ff,0x2fffffff,0x7fffffec,
    0x4c1fffff,0xffffffff,0xfffb02ff,0xffffffff,0xfffffb09,0x3fffe63f,
    0x7fff46ff,0x7ffc40ff,0x3ffe65ff,0xffffffff,0xf804ffff,0x3ffa606f,
    0xf90003ff,0x003d915f,0x77fffdc0,0xd12ffe81,0x7ffec1df,0xbfff512d,
    0x0adfff88,0x887fff73,0xfc984ffb,0x577fc43f,0xa87ffaa0,0x9510bfff,
    0x57505fff,0x027fdc43,0x215ffff5,0xfb307fe9,0xffd8819f,0x49ff701d,
    0x7ff915ed,0x23dffb10,0xff88efff,0x9bfe0a86,0xffffb819,0x37fc002f,
    0xfffa8000,0x404403ff,0x807ffc40,0x3f20fff8,0x3ffea06f,0xa827fcc0,
    0x77fc43ff,0x3e274409,0x3ff603ff,0xff099801,0x0f7fcc0d,0xf880ffdc,
    0x0fff887f,0x7cd7fe60,0x03ffb1ff,0xffd87ff6,0xff71ffa0,0xfd9dff9d,
    0xfff9105f,0x3fe003df,0x3aa0001f,0x000cffff,0x017fea00,0x7ff45ff9,
    0xcccccccd,0x7fcc1ffe,0xb07ff504,0x57bdffff,0x401fff10,0x3fae06f8,
    0x06ffffff,0x7d413fe6,0x0fff203f,0xff009ff7,0x7d3fff2f,0x83ff607f,
    0x23ff47fd,0xfffffffb,0x2602ffff,0x01dffffd,0x4002ffdc,0x1dffffd9,
    0xffc80000,0xf2ffcc01,0xffffffff,0x987fffff,0x7ff504ff,0xfffffd10,
    0x7fd41bff,0x3fa20004,0xffffffff,0x413fe606,0x3e203ffa,0x007ffc7f,
    0x7ffcffec,0x205ff9ff,0x1ff60ffd,0xffb50ffd,0x05bfffff,0x3ffffa60,
    0x7fff500c,0x3fff2200,0x000001ef,0xf3007ff2,0x7ffffc9f,0xffffffff,
    0x827fcc4f,0x2ea03ffa,0x1fffffed,0x20009ff5,0xcdffffe8,0x2606ffee,
    0x7ff504ff,0xf73ffc80,0x3fee009f,0xfdfffffe,0x83ff603f,0x03ff47fd,
    0x01fffff1,0x3fffea00,0x7fffd43f,0xfb8dff0f,0x8002ffff,0xfa801998,
    0x17fec05f,0x33337ffb,0x81333333,0xff504ff9,0xb301c987,0x3ffe29ff,
    0xeffb8000,0x4c0dff01,0x7ff504ff,0xf8eff980,0xff3000ff,0xffff7fff,
    0x07fec03f,0x07fe8ffb,0x13fffff6,0x7fffdc00,0x3bffe62f,0x2fffadff,
    0x0fffffea,0x217ff200,0x05fffc40,0xb83ffee2,0x0cc00fff,0x75437fc4,
    0x077ec3ff,0x3fa6ff88,0xb1f5403f,0xff9105ff,0x827fcc0d,0xfd803ffa,
    0x4005ffef,0xffd6ffff,0x0ffd80ff,0x0ffd1ff6,0x3fe7ffea,0x3fea001f,
    0xffb83fff,0xbfffffd3,0x3bfffee0,0x83ffe002,0x3ee0efe8,0xffdbdfff,
    0xfffd83ff,0xffedbace,0xacfff82f,0x3effffec,0x2af7fffa,0x2a5fffdc,
    0xbaacefff,0x3ee6ffec,0xffdcacef,0x75c3dfff,0x3aa0dfff,0x7cc03eff,
    0x4001ffff,0xff53fffd,0x7ffe40df,0x23bffb1d,0x7ec0cffe,0x00bff52f,
    0x19ffffd3,0xff99ff60,0x7e4407ff,0x4c01efff,0x7ffdc3ff,0x7ffffd43,
    0xd102ffff,0xffffffff,0xff705fff,0xffffffff,0x3fffa1ff,0xefffffff,
    0x7ffffdc0,0x21ffffff,0xffffffe8,0x0fffffff,0x9ffffff1,0x07fffffc,
    0x017fff60,0xf83ffee0,0xfff504ff,0x3fff6bff,0xa87fffd4,0x3017e43f,
    0x03bffffb,0x3ee1ffd8,0xfb3004ff,0x3201bfff,0x1fff986f,0xfffffd98,
    0xfffb802d,0x02dfffff,0x37ffffee,0x3ea4fffc,0xfffffffd,0xfffb500b,
    0x103bffff,0x7dfffffb,0xfd89ffff,0x3f21efff,0xf9804fff,0xf98001ff,
    0x817fe45f,0xb2efffd8,0x3ffa3dff,0xc880001e,0x001effff,0xfb79dff9,
    0x54009dff,0x40cffffe,0x015101fe,0x20003530,0x0009aaa8,0x40004d4c,
    0x2001aaa9,0x009aaa98,0x001aaa88,0x00000000,0x00000000,0xa8000000,
    0x002fffff,0x7fffff44,0x002fffff,0x97ffffd4,0x000005f9,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xffb00000,0x6c40007f,
    0xffdfffff,0xff70000d,0x8803a6bf,0x64c1ccca,0x33220acc,0xcccccccc,
    0x3332a21c,0x1033b2a3,0x00500333,0x26666662,0x30099999,0x00003ddd,
    0x18007db3,0x555102d8,0x55555555,0xaaaaa981,0xaaaaaaaa,0x000001aa,
    0x00033a60,0x004d4c40,0x07b22000,0xfffffd80,0x9fffff52,0x7fffffcc,
    0x362fffff,0xfd8effff,0x3e63ffff,0x0bee00ff,0xfffffe88,0xffffffff,
    0x337fe40e,0x3fea3fff,0x7fffec0f,0xf897e60d,0x213fa0ff,0xfffffffa,
    0x3fa2ffff,0xffffffff,0xffffffff,0x00000006,0x00000000,0xfc800000,
    0xff31ffff,0x7fcc9fff,0xffffffff,0x3ffff22f,0xffffffff,0xa81ffe27,
    0xff501fff,0xffffffff,0xe83fffff,0x3ffe22ff,0xfd8fff30,0x98efffff,
    0xfff70fff,0x506ff447,0xffffffff,0x7ff45fff,0xffffffff,0x7fffffff,
    0x00000000,0x00000000,0xff300000,0x3ffe63ff,0x56ffcc1e,0x85fffdaa,
    0xefffffa8,0x7ff89d52,0x1fffff30,0x3bbbb6e0,0xdeeeeeee,0x7c37fc43,
    0x89bfe27f,0xffe88eff,0x3e64ffff,0x26fc81ff,0x99999998,0x2a209999,
    0xbbbbbbbb,0xabbbbbbb,0x00000000,0x00000000,0x22000000,0xfffcfffe,
    0x543ff00e,0x7fc05fff,0xdfd005ff,0xfffffd10,0x4000001d,0x6fe82ffa,
    0x83b62ffc,0x85ffffd8,0x016e00a8,0x00000000,0x00000000,0x00000000,
    0xfb100000,0x980bffff,0x013ffea1,0xd800fffe,0x8effe85f,0x00005ffe,
    0x7ec17f20,0x70027f45,0x000005bb,0x00000000,0x00000000,0x00000000,
    0x3a000000,0x54006fff,0xff004fff,0x44fc800d,0xff10effc,0xeeedb89f,
    0xeeeeeeee,0xc80ffc3d,0x001fec3f,0x00000000,0x00000000,0x00000000,
    0x00000000,0xffd88000,0xf5005fff,0x7fc009ff,0x51fdc006,0xff983fff,
    0xfffff52f,0xffffffff,0x817e25ff,0x00fdc2fa,0x00000000,0x00000000,
    0x00000000,0x00000000,0x7f440000,0x0efffcff,0x113ffea0,0x0037fc03,
    0x2ffc83e6,0x3627ff50,0xffffffff,0x20dfffff,0x22064402,0x00000004,
    0x00000000,0x00000000,0x00000000,0x98000000,0xff31effe,0xfff503df,
    0x3e07fd09,0xb880006f,0x0005d402,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x3ff20000,0xffd10dff,0x7ffd49ff,0xffeeeeef,
    0xfffdd915,0x003bdddd,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x3fffe600,0xffff73ff,0x3fff25ff,0xffffffff,
    0xffffff55,0x00bfffff,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x7fffec00,0xffffb10d,0x3ffff21b,0x5fffffff,
    0xffffffb1,0x0003dfff,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_bold_32_usascii_x[95]={ 0,6,3,1,2,2,3,6,7,3,2,1,5,2,
6,2,2,2,1,1,2,1,2,2,2,2,6,5,-1,0,1,2,2,-1,0,0,0,0,1,0,0,2,1,0,
0,-1,-1,0,1,0,0,1,1,0,-1,-1,0,0,2,7,2,3,2,-2,5,1,-1,1,0,0,2,0,0,1,
2,0,1,-1,0,1,-1,0,1,2,2,0,0,-1,0,0,2,4,7,4,1, };
static signed short stb__courier_bold_32_usascii_y[95]={ 23,4,5,3,3,5,7,5,4,4,5,6,19,13,
19,3,4,4,4,4,5,5,4,5,4,4,10,10,6,10,6,5,4,6,6,5,6,6,6,5,6,6,6,6,
6,6,6,5,6,5,6,5,6,6,6,6,6,6,6,5,3,5,4,28,4,10,5,10,5,10,5,10,5,5,
5,5,5,10,10,10,10,10,10,10,6,10,10,10,10,10,10,5,5,5,12, };
static unsigned short stb__courier_bold_32_usascii_w[95]={ 0,5,11,15,13,13,13,5,7,7,13,15,7,13,
5,13,13,13,14,15,13,15,14,13,13,14,5,7,17,17,17,13,13,19,17,16,16,16,16,17,17,13,17,18,
17,19,18,17,16,17,18,15,15,17,19,19,17,17,13,7,13,7,13,21,7,16,18,16,18,16,15,17,17,15,
11,17,15,19,17,15,18,18,16,13,15,17,18,19,17,17,13,9,3,9,15, };
static unsigned short stb__courier_bold_32_usascii_h[95]={ 0,20,9,23,24,19,17,10,24,24,13,17,9,4,
5,24,20,19,19,20,18,19,20,19,20,20,14,16,17,10,17,19,22,17,17,19,17,17,17,19,17,17,18,17,
17,17,17,19,17,23,17,19,17,18,17,17,17,17,17,23,24,23,10,4,5,14,19,14,19,14,18,19,18,18,
24,18,18,13,13,14,19,19,13,14,18,14,13,13,13,19,13,23,23,23,6, };
static unsigned short stb__courier_bold_32_usascii_s[95]={ 239,217,154,81,45,112,19,108,37,29,241,
235,146,196,182,1,159,161,175,223,1,204,173,190,188,202,59,51,33,128,1,
238,145,178,217,239,123,106,89,220,57,242,117,21,160,1,223,75,40,111,198,
145,151,83,140,185,167,205,75,129,15,137,114,210,188,147,126,130,93,81,135,
57,33,51,59,15,67,221,164,65,1,20,91,116,101,98,182,201,59,39,77,
97,107,71,166, };
static unsigned short stb__courier_bold_32_usascii_t[95]={ 21,1,98,1,1,26,83,98,1,1,83,
65,98,98,98,1,1,26,26,1,46,26,1,26,1,1,83,83,83,98,83,
26,1,65,65,1,65,65,65,26,65,46,46,65,65,65,46,26,65,1,65,
26,46,46,65,46,46,46,65,1,1,1,98,98,98,83,26,83,26,83,46,
26,46,46,1,46,46,83,83,83,26,26,98,83,46,83,83,83,98,26,98,
1,1,1,98, };
static unsigned short stb__courier_bold_32_usascii_a[95]={ 271,271,271,271,271,271,271,271,
271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,
271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,
271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,
271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,
271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,
271,271,271,271,271,271,271, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_32_usascii_BITMAP_HEIGHT or STB_FONT_courier_bold_32_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_32_usascii(stb_fontchar font[STB_FONT_courier_bold_32_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_32_usascii_BITMAP_HEIGHT][STB_FONT_courier_bold_32_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_32_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_32_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_32_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_32_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_32_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_32_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_32_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_32_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_32_usascii_s[i] + stb__courier_bold_32_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_32_usascii_t[i] + stb__courier_bold_32_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_32_usascii_x[i];
            font[i].y0 = stb__courier_bold_32_usascii_y[i];
            font[i].x1 = stb__courier_bold_32_usascii_x[i] + stb__courier_bold_32_usascii_w[i];
            font[i].y1 = stb__courier_bold_32_usascii_y[i] + stb__courier_bold_32_usascii_h[i];
            font[i].advance_int = (stb__courier_bold_32_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_32_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_32_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_32_usascii_s[i] + stb__courier_bold_32_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_32_usascii_t[i] + stb__courier_bold_32_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_32_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_32_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_32_usascii_x[i] + stb__courier_bold_32_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_32_usascii_y[i] + stb__courier_bold_32_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_32_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_32_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_32_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_32_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_32_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_32_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_32_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_32_usascii_LINE_SPACING
#endif

