// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_bold_13_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_bold_13_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_bold_13_usascii_BITMAP_WIDTH         128
#define STB_FONT_consolas_bold_13_usascii_BITMAP_HEIGHT         66
#define STB_FONT_consolas_bold_13_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_bold_13_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_bold_13_usascii_NUM_CHARS             95

#define STB_FONT_consolas_bold_13_usascii_LINE_SPACING           9

static unsigned int stb__consolas_bold_13_usascii_pixels[]={
    0x9880442a,0x01822019,0x04000333,0x80151010,0xf9800039,0x19807f11,
    0x50377150,0x1f881577,0xfff50bf9,0x0fd57f60,0x3ee0fffc,0x307f304f,
    0x27ffdc9f,0x3e60db88,0x2ec0d51e,0x10bd01b2,0x641fdddf,0x7c41fedf,
    0x3d407e21,0x03b60fcc,0xd13d705f,0x3620dd07,0x07ee7f32,0x66cffff9,
    0xf101f8bb,0xa981f985,0xbf10aaef,0x99fccfe2,0x3a0fc41f,0x0f50f503,
    0x442f8bd1,0x1f71aa1f,0xf91aaaa8,0x36fe64f8,0x36fb321a,0x2ec1b203,
    0x8777ff5c,0x7dd3e2f8,0x1f883f30,0xa87a8274,0x42f8f707,0x47cffaeb,
    0x4feee85e,0x3ea6e8db,0x5e6441ed,0xfa81fc06,0x5f10bd00,0xf50fb9fc,
    0x7641f883,0x36cc7a82,0xb0be0fa8,0x44f7f7d9,0x7ca7c03f,0x37ff636c,
    0x2a01f881,0x7413a00f,0xfc9bf885,0x3fd39f31,0x7fcc1f88,0x07fe3d40,
    0xe85f17c4,0x267af9fb,0xfaa7c01f,0x3fea13e0,0x0e5e6c1f,0x41ee0274,
    0xffff885e,0x0fe7fe42,0x20bb07e2,0xf306c87a,0x3efa17c5,0x0fe26af9,
    0x2bbe29f0,0xf9da81fc,0x16febaa3,0x2f8803f3,0x3e219ee8,0x41f98402,
    0xa81f41f8,0x1f707a87,0x37efa17c,0x202f44ef,0x0bffa64f,0x23fbd975,
    0x46ada9e8,0x50d9006d,0x0be23fff,0x3e20fcc0,0x87a81f41,0x2f8bb07a,
    0x064dddec,0x44f803f2,0x7f5413f8,0x745322df,0x400be22f,0xc88101f9,
    0x88191001,0x7a81fc1f,0x0fdc0f88,0x100d70be,0x20fe20bd,0x02d86ffd,
    0xa8005100,0x40000001,0x81fd51f8,0x7dd07dc9,0x337e0fe6,0x0797bd10,
    0x766ccfe6,0x7015300f,0x00000001,0x88000000,0x9301551f,0x0514c099,
    0xcb883332,0x5c42600b,0x000000cc,0x00000000,0x03220000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x14c00000,0x202a20a6,0x107f30a8,0xa8133310,0x26001abc,0x1f9804ed,
    0x0be20d44,0x9881aa98,0x03310199,0x20a88553,0xf913e1fb,0x34fb89ff,
    0x744f985f,0x33b65fff,0x4ffc83ef,0x300beb3e,0x2ff7dc3f,0x7ff405f1,
    0x3ffff44f,0xfb1fff62,0x93ee1dfd,0x4c3f54f8,0x6cc3f73f,0x2d885f31,
    0xf72f97a0,0x22135f50,0x2ea07f2f,0x2a7f11fc,0x3755f12f,0x3bd1f608,
    0x881ed833,0x3663f33f,0x646dbec1,0x5f3027c7,0xbd00d554,0x6436cef4,
    0x01dddd07,0x2e3fdbf9,0x77c53f27,0x8bb00fee,0x8bf880de,0x0fc8df80,
    0x21fd7cc0,0x88a3746d,0x813fb62f,0x837bba5e,0x21ccfec9,0x7cc356fc,
    0x23f23f33,0x2bf15eee,0x3ffa23f8,0x51ffff41,0x4c1bffff,0xe8042fff,
    0x363e40ff,0x0fc53ee6,0x22bd027c,0x764c19bf,0xf7f71ccf,0x987dc7d7,
    0xd1bff91f,0x44f8be2b,0x2620feaa,0x37f51fd9,0x7dfe47f5,0xf707f50e,
    0x27c1f509,0x7c054df1,0xffe97a04,0x6c3e41ff,0x7dc5ff75,0x8fee3f50,
    0x1fc5f14f,0x5f502f98,0xf34f8be2,0x1fd4fe65,0x77c407e4,0x8a741fca,
    0x4dc4f81d,0x7c3f53fa,0x4fe43e44,0x33e60ff9,0x3bf11fe9,0x26fe21f9,
    0x366661fc,0x3faa661f,0x4bee7ba0,0x22fa8cf9,0x301fed40,0x2fdc5ffb,
    0x67ccc7f3,0x54bffd09,0x642fcadf,0xedffe887,0x3efff20e,0x88bffea1,
    0x3e22fffe,0x7ffc2eff,0x1ffecc1d,0x5013fff2,0x22020039,0x3ffe2080,
    0xcc9802ff,0x0207c81c,0x00020020,0x04004008,0x00000020,0x00000000,
    0x00000000,0x00000000,0xaa980000,0xf3098310,0x2aa6207d,0xf10d54c0,
    0x83102205,0x3e099999,0x33333103,0x98130621,0x22044099,0x13026661,
    0x3a618188,0x41f72fff,0x89fb714f,0x363ffffa,0x0be26fff,0x4c9f07dc,
    0x3e3fffff,0xfffff703,0x17d4fea9,0x6c9ffff1,0xfff8b544,0x8db1f65f,
    0x223dd3fb,0x427c1f70,0x443be27d,0xf1049f31,0xa7c41975,0x74ccc0fb,
    0x0d44fe0f,0x23f60be6,0x6c57c46e,0x16b89b0f,0x7dcbee5f,0x3bf313e1,
    0xf83ee07f,0x07ee7d84,0x7c40efcc,0x47dc7fef,0xf0bee04f,0x5f30bf17,
    0x883fdf30,0x5721f72f,0x45f15b8d,0x3e67f14f,0x01fabf81,0xf927c1f7,
    0xee9be45f,0x8877ff23,0x7c43f75f,0x0bf100fe,0xf301dd7f,0x2217f605,
    0x3723fddf,0x5f15bbf9,0xf96e8bee,0x03f54fb8,0x324f83ee,0x9f517c86,
    0xf10ffc98,0x9f707e65,0x7fc07ec0,0x205f301f,0x6fc40fff,0x3b36e0ee,
    0xffff15be,0x45e8fb89,0xfa827cc0,0xb8298fe0,0x7d413e1f,0x07e65f12,
    0x0bee05f3,0xf983767c,0x44fafb82,0x2e4f8af8,0xf14dfaee,0xf7f30139,
    0x757fd005,0x3ee73e63,0x3be21721,0x33734f9a,0x4cbe23fb,0x4417cc1f,
    0x3e1aaaef,0x2f985f9b,0x21fcafc4,0x2a1f92f8,0x3e29fd6f,0x007ffc02,
    0x70fffec4,0x07d87fff,0x265fffd3,0x3e23ffff,0x2f983f32,0x3fffffa8,
    0x261fdcfe,0xf88fe42f,0xa7ccbe25,0x227f74fa,0x02fe402f,0x00802000,
    0x00011008,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x88262000,0x42621310,0x09826008,0x99833331,0x13062199,
    0x113ffa00,0x4cc43333,0x4ccc0009,0x4c013100,0x5406a01a,0xafd53a6f,
    0x220db3fc,0x3fa3f92f,0x7fffc7ff,0x9fc1f50f,0x9f3100da,0x70ffffe8,
    0x6c07ffff,0x0bffff13,0x3ffa0dfb,0x827f544f,0x2a9d2ffa,0x1b67fd7f,
    0xd1fcd7c4,0x542f980b,0x774cfe0f,0x0bd13e00,0x0bf223ee,0x4be23fd1,
    0x07f7c1fb,0x3e27d854,0xbbf504fc,0x7df6dd3a,0x3e20db4d,0x202f45eb,
    0xf07d42f9,0xf80fec47,0x0fb82f44,0x0774c9f1,0xa83ee5f1,0x7e403f9f,
    0xfa827c20,0x9b74e9fa,0x41b6999f,0x7740fff8,0x42f983cc,0x83fffffa,
    0x744f81fe,0x83ee7fff,0x881ff15e,0xb644feef,0x417e205e,0x37af504f,
    0x93f5b74e,0x67c41b6b,0x1e67743f,0x2fea17cc,0x17ec3faa,0x557744f8,
    0x25f83ee2,0x33e20ef9,0x653e2fda,0x201dd00f,0x3eef504f,0xae52b94e,
    0xf95f106d,0x3e602f43,0x27f07d42,0x13e01fe8,0x543ee0bd,0x88f7443f,
    0x3e69f12f,0xed82ffff,0x3d413e00,0xb91329ff,0x442aabb6,0x17a6f8af,
    0x2a1bfa98,0x0754fe0f,0xd09cf998,0x3ee1555d,0xd880ffcb,0x1f937f13,
    0x13eaabee,0x541557fb,0x3d41adfa,0xd71369f7,0x44bffff6,0x17a9f52f,
    0x50fffff8,0x4401fc1f,0xfd2fffff,0x3fee1fff,0xff1000de,0x362f45bf,
    0x3ffffe27,0x0fffffe3,0x00000000,0x00000000,0x00000000,0x00000000,
    0x06a60262,0x81333331,0x510a8311,0x880bca81,0x03c982ca,0xcb983995,
    0x0b266a0b,0x4cc17517,0x5c40b99b,0x23bbbb80,0xf88ae0b9,0x27ffec4f,
    0x47fffff5,0x3e26a8f8,0x77ec3f32,0x3bfe60ef,0x23767dc7,0x6ec4ccfd,
    0x3bfba6ec,0xffddf11f,0x1f77f764,0x3bba07e2,0x2edd10ff,0xa93bb20f,
    0x2621f72f,0xf711fc99,0x4be25db7,0x265f31f9,0x2203ba3f,0x77c5f13f,
    0xfd1fa800,0xbafc4fe1,0x75f1d91f,0x804fc44b,0x7e7cc3fa,0xb93a7e63,
    0x3e05f30f,0x3ffbfaa5,0x47e65f15,0x7c53e0fb,0xfffff303,0x20effdc7,
    0xbd1fffd9,0x3e65f104,0x56e7eb91,0x44fffffb,0x8df905f8,0x6fcc9d4e,
    0x1fb83fda,0x3e24cb54,0x87ee3f52,0x7cc13e4f,0x5c40999b,0x739f10ff,
    0x7c417a3f,0x7d723f32,0x5f3315b9,0xd00ee813,0x743ee1ff,0x17ef7544,
    0x2bb662f4,0x3ab7e1de,0xf93bf31f,0x21cdfec3,0x454189df,0x37f30fd8,
    0x4417a3fb,0x5723f32f,0x0fc45b9f,0x32155fec,0xfffb6e9f,0x03ee0dff,
    0xeffc83f5,0x2fff22ef,0x0fffee1f,0x4c1fffb1,0x3fe0fffe,0x67fec3ff,
    0x3e20bd1f,0x7d723f32,0x406445b9,0xf50fffff,0x2aa73e65,0x2eaa2dfa,
    0x9b06e84f,0x0200207e,0x22011000,0x00000200,0x00000000,0x3eff89d0,
    0x17b02fa8,0x0000001f,0x4c000000,0x1111062f,0x894cbb62,0x333321fd,
    0x00000ccc,0x2a000000,0x88351543,0x80c01f03,0xf70aaaaa,0xfb97c53a,
    0x2e7fff54,0x5c4dcfbe,0x33333324,0x0000000c,0x87ee0000,0x8f513a4f,
    0x5c0eafae,0x7777444f,0x453af71e,0x2627f71f,0x3aa55099,0x0000000e,
    0x00000000,0xc87e69f1,0xe98d7195,0x7cfc42ef,0x1edea001,0x00000083,
    0x00000000,0x2d900000,0x67d75c6c,0x6f7f6c4c,0xd12dcf20,0x4223dddd,
    0x00000008,0x00000000,0xf9800000,0x76fd43fa,0x47c543de,0x21d83623,
    0x000aaaaa,0x00000000,0x00000000,0x07ff4000,0x0bfe7fe6,0x0000005c,
    0x00000000,0x00000000,0x5fb80000,0x03fb6f88,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_bold_13_usascii_x[95]={ 0,2,1,0,0,0,0,2,1,1,0,0,1,1,
2,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,1,0,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,1,0, };
static signed short stb__consolas_bold_13_usascii_y[95]={ 9,0,0,0,-1,-1,0,0,-1,-1,0,2,6,4,
6,0,0,0,0,0,0,0,0,0,0,0,2,2,1,3,1,0,-1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,10,0,2,0,2,0,2,-1,2,0,-1,
-1,0,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,-1,-2,-1,4, };
static unsigned short stb__consolas_bold_13_usascii_w[95]={ 0,3,5,7,7,8,8,3,5,5,7,7,4,5,
3,7,7,7,7,7,7,7,7,7,7,7,3,4,6,7,6,6,8,8,7,7,7,6,6,7,7,7,5,7,
6,7,7,7,7,8,7,7,7,7,8,7,8,8,7,5,7,5,7,8,5,7,7,7,7,7,7,7,7,7,
6,7,7,7,7,7,7,7,6,7,7,7,8,8,7,8,7,6,3,6,7, };
static unsigned short stb__consolas_bold_13_usascii_h[95]={ 0,10,4,9,12,11,10,4,13,13,6,7,6,3,
4,11,10,9,9,10,9,10,10,9,10,9,8,10,9,5,9,10,13,9,9,10,9,9,9,10,9,9,10,9,
9,9,9,10,9,12,9,10,9,10,9,9,9,9,9,13,11,13,5,2,3,8,10,8,10,8,10,10,9,10,
13,9,9,7,7,8,10,10,7,8,10,8,7,7,7,10,7,13,14,13,3, };
static unsigned short stb__consolas_bold_13_usascii_s[95]={ 125,23,75,25,68,76,57,81,46,25,51,
104,123,89,85,85,74,117,109,90,1,98,106,17,114,9,122,18,85,67,55,
17,37,100,92,1,77,70,32,24,47,39,35,24,17,9,1,10,106,59,90,
32,73,9,114,98,81,48,57,31,93,12,59,109,103,73,82,49,66,57,49,
41,40,27,52,65,62,96,88,41,109,117,81,65,101,33,33,42,120,1,112,
18,1,5,95, };
static unsigned short stb__consolas_bold_13_usascii_t[95]={ 1,16,57,48,1,1,16,56,1,1,57,
48,27,56,56,1,16,38,38,16,48,16,16,48,16,48,16,16,38,57,38,
27,1,38,38,27,38,38,38,27,38,38,16,38,38,38,38,16,27,1,27,
27,27,27,27,27,27,27,27,1,1,1,57,56,56,48,16,48,16,48,16,
16,27,16,1,27,38,48,48,48,1,1,48,48,1,48,57,57,48,16,48,
1,1,1,56, };
static unsigned short stb__consolas_bold_13_usascii_a[95]={ 114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_bold_13_usascii_BITMAP_HEIGHT or STB_FONT_consolas_bold_13_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_bold_13_usascii(stb_fontchar font[STB_FONT_consolas_bold_13_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_bold_13_usascii_BITMAP_HEIGHT][STB_FONT_consolas_bold_13_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_bold_13_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_bold_13_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_bold_13_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_bold_13_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_bold_13_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_bold_13_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_bold_13_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_bold_13_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_bold_13_usascii_s[i] + stb__consolas_bold_13_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_bold_13_usascii_t[i] + stb__consolas_bold_13_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_bold_13_usascii_x[i];
            font[i].y0 = stb__consolas_bold_13_usascii_y[i];
            font[i].x1 = stb__consolas_bold_13_usascii_x[i] + stb__consolas_bold_13_usascii_w[i];
            font[i].y1 = stb__consolas_bold_13_usascii_y[i] + stb__consolas_bold_13_usascii_h[i];
            font[i].advance_int = (stb__consolas_bold_13_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_bold_13_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_bold_13_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_bold_13_usascii_s[i] + stb__consolas_bold_13_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_bold_13_usascii_t[i] + stb__consolas_bold_13_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_bold_13_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_bold_13_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_bold_13_usascii_x[i] + stb__consolas_bold_13_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_bold_13_usascii_y[i] + stb__consolas_bold_13_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_bold_13_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_bold_13_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_bold_13_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_bold_13_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_bold_13_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_bold_13_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_bold_13_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_bold_13_usascii_LINE_SPACING
#endif

