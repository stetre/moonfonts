// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_bold_10_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_bold_10_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_bold_10_latin1_BITMAP_WIDTH         256
#define STB_FONT_consolas_bold_10_latin1_BITMAP_HEIGHT         48
#define STB_FONT_consolas_bold_10_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_consolas_bold_10_latin1_FIRST_CHAR            32
#define STB_FONT_consolas_bold_10_latin1_NUM_CHARS            224

#define STB_FONT_consolas_bold_10_latin1_LINE_SPACING           7

static unsigned int stb__consolas_bold_10_latin1_pixels[]={
    0x041d8080,0x87620ec0,0x04262198,0x04208020,0x04216cf4,0x2022004c,
    0x22008808,0x04401101,0x4c04c198,0x106e0005,0x03bbae02,0x03500022,
    0x100b1011,0x5500a881,0x81100445,0x23ee9810,0x1d10ec3c,0x983b2f88,
    0xdd937dc1,0xfb868176,0x230b67a2,0x5c2d9e81,0xa81d500e,0x176ec0dd,
    0xbb5036e2,0xa881d501,0x2a075c1d,0x5d41d806,0xf516cf45,0x0ea81f5f,
    0x9307ff6c,0xe85dbb0b,0xf883aa02,0x2e76c4fd,0xdda85dbb,0x744b67a0,
    0xd87e21d0,0xd8541361,0x5c7e29b1,0x30b66984,0x260f83f9,0x3f14d8a1,
    0x05440544,0x05440544,0x3be60544,0x2628663e,0x4fcf88a1,0x3baa2866,
    0x217fec3f,0x641a82c8,0x0d40faff,0x36225da6,0x0b503503,0x34c85435,
    0x8a607d4f,0x550d5542,0x372eee35,0xd31d96a2,0x3b1fff98,0x097355e6,
    0x9f11e4d3,0x5320f83d,0x1355e678,0x6fc49fbf,0x93f7e24f,0x3e24fdf8,
    0x073ae4fd,0x14c9e299,0x87ed664f,0x4fd4f14c,0x9f6b6e79,0x3ea2fee8,
    0x07d7fcc6,0xebf88df5,0x7d437d42,0x35b81f06,0x2e3f1ecf,0x44f2fb85,
    0x99f13ccf,0x8b3f7367,0x02dc7678,0x8f6ba03d,0x36a6984b,0x7a893d51,
    0x57478a64,0x93cd323d,0xf34c9e69,0x53279a64,0x837fa279,0x8a64f14c,
    0x47eb2f67,0x8b54f14c,0x1f3b790f,0x07e64b70,0xcc83e6a2,0x202b660f,
    0x7e640fcc,0xd9f84b80,0xd71f9363,0xf89ebd70,0x33a07c40,0xd87c2cfa,
    0x08f40991,0x09707f5c,0xf99f4cd3,0x9913a23b,0x41fd71e2,0xf1ec7e3d,
    0x7b1f8f63,0x07e3d8fc,0x78a64dbd,0xd7b3c532,0x278a647e,0x76dcf56a,
    0x9bbb6279,0x83e03e9f,0x3fe23e9f,0x21f4fc4f,0x0f883e9f,0x23ae3f5c,
    0xb84be67a,0x3be279fc,0x27ddf13e,0x261dfccf,0xd02d4767,0x44f88763,
    0x0f26984b,0x64787dfb,0x44f88f14,0xf2647e4c,0x991f9323,0x47e4c8fc,
    0x5327be88,0x73c53278,0x8a64f3bd,0xd07fbea7,0x6bb545ff,0x308b93f3,
    0x72e4fccf,0x4fcc3e2b,0x1727e65c,0x20fe21ec,0x7fdc1ffc,0x44fb7976,
    0x33f1099f,0x70ef6ba1,0x00f88ecb,0x0f98763d,0x7934c25c,0x5c1f0590,
    0x40f98f35,0x3aa7a8ea,0x2a3aa7a8,0xa9ea3aa7,0x3fee7a8e,0x73cd6e1e,
    0x5ffd1e6b,0x1aa79adc,0xdef881d8,0xc8fddd76,0x3bbae3fe,0xb8fbba67,
    0x3bae7eee,0x5d0d307e,0x59027360,0xf13fc65c,0x1e40f881,0xc8761f98,
    0x1d8fc425,0x309705fb,0x406c16cd,0x8bffa21d,0xffc882fd,0x88bff222,
    0x3f222ffc,0x0bff222f,0x5ffd1073,0x3a17ff44,0x22ffe880,0x3a00006a,
    0x5d0107e2,0xf17400fc,0x001f8ba3,0x0eecc0ba,0x89f2970a,0xfff15fff,
    0xc83bb62b,0x54360ec2,0x200764ff,0x75bf67fb,0x0f660105,0x00000000,
    0x00110000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x13faa088,0x26013254,0x00981100,
    0x44021011,0x27a0ec40,0xf90f622d,0x2003c83d,0x883b103c,0x21e7543d,
    0x0f622d9e,0xb3012600,0x2016cf40,0x764192eb,0x1e43d884,0x11676c00,
    0x55055105,0x441aaa85,0x2a15441d,0x5d00fa0e,0x075c075c,0x0eb8376a,
    0x27a06ed4,0x2607542d,0xa8983181,0x50b71f30,0x0289fd50,0x41513033,
    0x418c0fdc,0x03e80a89,0x1aa6c8d5,0x6ffc8318,0x74c95b3b,0x0544c1f8,
    0x0ffbaa0a,0x446a8511,0x33224ecf,0x87ddf13f,0xaedfc419,0x9fd11aaa,
    0x206a1a60,0x55511aaa,0x50aaaa25,0x12aaa883,0x77e45555,0xf9177e42,
    0x07a3aa5d,0x4be25df9,0x225fdd10,0x3ba22fee,0x88fff22f,0x3ff22fee,
    0x7fe40982,0xfdd50cc6,0xd56ab547,0x235f55aa,0x5aa0eaf9,0xa8bff26a,
    0x3ba2799f,0x2bfffb2f,0x7901f54b,0x355aa1e2,0x9f1b71d3,0x1ba76e79,
    0x88df50f6,0xbf913ccf,0xa8f7f227,0x9efe446f,0x2d33dfc8,0x9b55a66a,
    0x1afaad56,0x03cdaad3,0x5c16e16e,0x5c1aad55,0xf89eed75,0x2355aa3f,
    0x9e67ea4a,0x5532d56a,0x3fa20ec6,0xbb55aa28,0xf8b54f76,0xb1aa5b80,
    0x75c3fd97,0x23bff10f,0xffd8d56a,0x5fd40f88,0x903e20f9,0x807c41f9,
    0x6642e82e,0x2e82e80f,0xfb97bbee,0xbddf75ee,0xfb97a3aa,0x423f15ee,
    0xdb16eed8,0xb776c4dd,0x76c4f34c,0x03e2996e,0x26aa647b,0x7c5aa4fc,
    0xaddaad50,0xc9772a6c,0x55aa7cdc,0x543e2996,0x776c4f56,0x29f91aa6,
    0x11b2620f,0x1355aad9,0xddf1bb5f,0x2e27f547,0x223e9f84,0x41743eef,
    0x41f4fc2e,0x1aa2e82e,0x54354354,0x41aa1f16,0x2ed54ffb,0x6a9aed56,
    0x535daed7,0x5475daed,0x656e3d87,0x56a81f16,0xd16cbccf,0x36ba2dbf,
    0x4bf17b1c,0x23aed979,0x87fbea7a,0x2354d76a,0x1ae0d56b,0x26cbcd72,
    0x33f1f36b,0x41f85f01,0x3e25c9f9,0x74174099,0x21727e62,0x7ec2e82e,
    0xb2f7ec5e,0x3afaabdf,0x362f7ec5,0x45b7be21,0x3be26def,0x43ffd16d,
    0xfd16def8,0x7447b05f,0x9873e6df,0x3fa21fef,0x2396a86d,0xfbdf50ee,
    0x45b7fa23,0x41aa2ffe,0x3a26def8,0xa87ff65e,0xdff31eff,0x89b7fa23,
    0x40f8bfee,0x16a0eeeb,0xf89fbbae,0x45d05d00,0x2e87eeeb,0x000002e8,
    0x00028000,0x20000000,0x9807fff9,0x500000ed,0x0000000d,0x000000d5,
    0xf1000000,0x00044bff,0xff88fc5d,0x2bfff35f,0x45d5fff9,0x2bfff31f,
    0x0005fff9,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xaa880000,0xced8b601,0x2a16cf42,0x402a20aa,
    0x0c9ae0ba,0x00955980,0x445b0082,0x00afb602,0x7b1064d7,0x000c8edc,
    0x21e4595b,0x41662ee8,0x2aa00aa9,0x4330b30a,0x806a200a,0x81d883eb,
    0x40aa22aa,0x428662aa,0x1f8a6c3c,0x174599f3,0x8c14445d,0xf12fcc81,
    0x4beb89fb,0x3bae4ab4,0x42d5a66e,0x3ea76e1d,0x2fe60cc0,0x76428882,
    0x26255a2e,0x953d30a8,0x44c2ffc8,0x1ec05408,0x3f3ae0d3,0x30cff883,
    0xd1aaf30d,0x7d0b3b27,0x0330faa2,0x2b66b9db,0x973ba24b,0x9850f14c,
    0x407d4d57,0xffc8ba0a,0xd817fe42,0x5d1e6992,0x4ec1a360,0x896ad31c,
    0x3f7e1be9,0xd30ffe23,0x7f6ccbd7,0xd1b03f12,0x36e3ff88,0x27bb546a,
    0x3fe23ff8,0x6da63d83,0x5c3cd6e4,0x17f74c6c,0x99c83d7b,0x4c83900f,
    0x0fa8bff2,0xb86e6cec,0xa9e29906,0x1ed74d56,0x0ec19fd1,0x73ddae5d,
    0xd96c1eed,0x66fd47e3,0x7f541c80,0x976d31ee,0x2f14dfca,0xb4c3d84b,
    0x9727e679,0x80e41efc,0xa641c83d,0x6c1ec0f8,0x2fa63d83,0x40fa7f45,
    0x3f30df9e,0x7027c4b9,0x74407fff,0xb9eed71f,0x2574ae85,0x5324c8bd,
    0x7355aa78,0x4dd501fd,0x8a64761e,0x03e2990f,0x23f264b6,0x64c09be8,
    0x30763a4b,0x1d83f7ff,0x1ec1e4fc,0x699b27a6,0x64cbb0d5,0x64c3d85c,
    0x1ea3ae4b,0x360f60f6,0xb90bfe63,0x4f4c1f31,0x8b55a61e,0x5cdc3efd,
    0xd12d8f56,0x2e1f14c8,0x2b9eae86,0x14c9ea9b,0x226ab54f,0x74d7044f,
    0x5475c262,0x11ea3ae7,0x3d4754ba,0x36cf407a,0x261dd9d9,0xdf105405,
    0xf987b09d,0xb55a60ce,0x23a2fef9,0x3a1ec0e8,0x3ff626d9,0x83d83d82,
    0x83eba63d,0x7645c8db,0x16ab4c6d,0x8bf839d5,0x0a5e8f37,0x7ccf51d7,
    0x36aab212,0x5cf11d70,0x6cbccf35,0xfff703e6,0x225d1745,0x3fa22ffe,
    0x897fe22f,0x3ff22ffc,0x3ae6b27f,0xf3059800,0x0d8aabff,0x34cdfff3,
    0x408d5698,0x3e63dd2c,0xd73596ff,0xdfff3001,0x7cdbffe6,0x9b2d36ff,
    0x47c0dffb,0x2ad31ff8,0x4037d516,0x4f622ffc,0x3ffa20fa,0xd8b7fdc2,
    0x37fe42ed,0x7445ffd1,0x005fb6df,0x000002e8,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00005900,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x3003fee0,0x51005555,0x81a80035,0x4188980a,0x144a22b8,
    0x82a55551,0xa8a2330a,0x15054260,0x15554c10,0x2a255553,0xaa88081a,
    0x262894c1,0x202a20a2,0x98d5541a,0x22b880aa,0x4332aaa8,0x598d5542,
    0x7315c4b5,0x30000003,0x776407c0,0x41b59792,0xd9d54fea,0x2a2fee87,
    0xab80f86f,0x4fb3e63b,0x6ecc9b6a,0xa9e6b76e,0x3b0ecb97,0x7d41f936,
    0x549bf951,0xf9f56eee,0x67cc5d87,0x9f23ee4e,0x3fd0f2fb,0x37e27f44,
    0x47f9d73c,0xf913fce8,0x23c52e7b,0x2ad33cdf,0x4ccbaf65,0x4dbdb90e,
    0xbd12fed9,0xa885f09f,0xb55a619f,0xf10cda8c,0x05aad425,0x207e64b7,
    0x7fffdc0f,0x755aa991,0x7c5f106a,0x0fe6c3d9,0x2a3b133b,0x81eb8f36,
    0xb54f602e,0xd30ec85b,0x6ebeb9e6,0x36a3d7ae,0xf132a21e,0x20f34b81,
    0x2971744c,0x5a607c78,0xcc9dde5a,0x1d5b7b0e,0x7c5727e6,0x2262278a,
    0xb933f6a0,0xb7195eef,0x3ea1e619,0x2f76c2fd,0x80f85d3d,0x2faa2c9d,
    0x203fd57c,0x4c3f5c4d,0x6d74ec5f,0x44991f10,0x2605d03f,0x05d9f50f,
    0x35c74d3a,0x65cd7f79,0x3a3a279e,0x777c4c81,0x7407c973,0xddf71742,
    0xd32ccf8f,0xb0deb972,0x276761db,0x45aad30d,0x1dddd707,0x643543c4,
    0x47e21938,0x54f93d50,0x367e6b76,0x33aa07c5,0xab66544e,0x80ea84de,
    0x646fb83f,0x2ba0ddeb,0x741f4c2e,0x5f549b02,0xf327440e,0x4f4e43bf,
    0x4f97770e,0x640beadc,0x4b84cfc4,0xe84d81f3,0xf1e676e2,0x37fa2357,
    0x5d46eea5,0x1b3b3b1b,0x078b55a6,0xc83c4054,0x329394ef,0xad53fee0,
    0x577be26a,0x07c7ddeb,0x220babe6,0x43f1d53d,0x0f408af8,0xec8fa7e2,
    0x1fb20eea,0x20ba0f44,0x1edaa0f9,0x320d30b6,0x22ee1d09,0x3bf7727f,
    0x0f833220,0x362e465c,0x9717408d,0x4001f1e2,0x15530aa9,0x4c367676,
    0xd01e2d56,0x2080f105,0x400ecddc,0xd802dffa,0x6fff87e2,0x93be63da,
    0x7fdcd76a,0x5720f47f,0x1f2f90fa,0x2e800bf3,0x7ab544d8,0x43b06980,
    0x41f2771d,0x9fffe61e,0xbff75fff,0x9bfffd41,0x22975fff,0x000007c7,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x53ffe200,0x4754b21e,0x20e9326a,
    0x23222899,0x2200e510,0x88880713,0x2e111110,0x2ea8ec5f,0x2e2d80a8,
    0x362d885d,0x6cec7b12,0xa9ecc721,0x7fc76760,0x43313fff,0x0000001d,
    0x00000000,0x20000000,0x41ccc81d,0x175b1f98,0x30feec3b,0x5b3d1aaf,
    0x9e8f7ba2,0xd83bae2d,0x4cbd91ed,0xddd55eee,0x4e83e22d,0x45e985b3,
    0x202223f8,0xd8a17419,0x329f11d9,0x0c60fddb,0x051eec80,0x00000000,
    0x00000000,0x3a220000,0x1736aa0a,0x67de47d1,0x3a17e20e,0x9e3a63da,
    0x32e1efc8,0xf31dde5a,0x2662dc4b,0x5d368809,0xd85916c4,0x400001d8,
    0x82a2a00a,0x00003500,0x00000000,0x00000000,0x5c000000,0xd190eefe,
    0x706ec177,0xfdd8fd9d,0x3607edc1,0x4a72a3cb,0x33a0e8e8,0x29b5d12e,
    0xddd30fa8,0x8ffec209,0x4c7ff22c,0x00000913,0x00000000,0x00000000,
    0x00000000,0x00000000,0xb7575076,0xfaafffcc,0x75daa6d9,0x42217e20,
    0x204204c0,0x3630c1a8,0x0000005d,0x00000000,0x00000000,0x00000000,
    0x00000000,0x20000000,0x00cca81c,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__consolas_bold_10_latin1_x[224]={ 0,1,1,0,0,0,0,2,1,1,0,0,1,1,
1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
2,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,1,2,1,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__consolas_bold_10_latin1_y[224]={ 7,0,0,0,-1,0,0,0,-1,-1,0,1,5,3,
5,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,1,0,-1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,8,0,1,0,1,0,1,0,1,0,-1,
-1,0,0,1,1,1,1,1,1,1,0,2,2,2,2,2,2,-1,-1,-1,3,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,-1,0,0,0,
-1,0,0,0,0,2,3,3,-1,0,-1,0,0,-1,0,2,0,3,7,0,0,2,0,0,0,1,-2,-2,-2,-2,
-2,-2,0,0,-2,-2,-2,-2,-2,-2,-2,-2,0,-2,-2,-2,-2,-2,-2,2,-1,-2,-2,-2,-2,-2,0,0,0,0,
0,0,0,-1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
 };
static unsigned short stb__consolas_bold_10_latin1_w[224]={ 0,3,4,6,6,6,6,2,4,4,5,6,3,4,
3,5,6,5,5,5,6,5,6,5,5,5,3,3,5,5,5,4,6,6,6,5,6,5,5,6,6,5,5,6,
5,6,6,6,6,6,6,5,6,6,6,6,6,6,5,4,6,3,6,6,4,5,6,5,5,5,6,6,5,5,
5,6,5,6,5,6,6,5,6,5,5,5,6,6,6,6,5,5,2,4,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,3,5,6,6,6,
2,6,5,6,4,5,5,4,6,5,5,5,4,4,6,6,6,3,2,4,5,5,6,6,6,5,6,6,6,6,
6,6,7,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,5,6,6,6,6,6,6,6,6,5,6,
5,5,5,5,6,5,5,6,5,5,5,6,5,5,6,5,6,6,6,6,6,6,6,5,6,5,5,6,6,6,
 };
static unsigned short stb__consolas_bold_10_latin1_h[224]={ 0,8,3,7,10,8,8,3,11,11,5,6,4,2,
3,9,8,7,7,8,7,8,8,7,8,7,7,8,7,4,7,8,11,7,7,8,7,7,7,8,7,7,8,7,
7,7,7,8,7,9,7,8,7,8,7,7,7,7,7,10,9,10,4,2,3,7,8,7,8,7,7,9,7,8,
11,7,7,6,6,7,8,8,6,7,8,6,5,5,5,8,5,10,11,10,3,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,10,7,7,7,
11,9,3,8,6,5,4,2,6,3,5,7,4,5,3,7,9,3,2,4,6,5,7,7,7,8,9,9,9,9,
9,9,7,9,9,9,9,9,9,9,9,9,7,9,10,10,10,10,10,5,10,10,10,10,10,9,7,8,8,8,
8,8,8,9,7,8,8,8,8,8,7,7,7,7,8,7,8,8,8,8,8,6,9,8,8,8,8,10,9,10,
 };
static unsigned short stb__consolas_bold_10_latin1_s[224]={ 255,74,135,53,112,178,185,127,16,8,48,
1,94,164,110,14,224,167,186,231,160,237,1,120,250,60,252,8,107,77,133,
12,1,40,27,24,179,173,205,37,198,192,92,66,47,146,153,98,139,223,126,
64,113,44,100,93,86,79,73,37,209,42,103,157,130,34,159,21,147,8,1,
188,239,141,21,217,211,228,235,192,205,172,241,166,218,211,35,21,28,57,15,
57,13,46,144,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,255,70,51,
105,139,245,27,7,151,30,223,42,83,164,8,114,60,133,89,72,120,126,174,
140,169,98,217,54,112,172,185,153,20,181,45,202,167,195,231,230,27,1,243,
249,39,58,33,52,224,236,84,91,98,105,77,66,133,140,126,119,63,216,153,
83,102,108,115,212,128,161,119,96,90,64,77,71,205,146,179,199,121,160,198,
17,134,78,85,248,154,51,243,192,166,30,147,70, };
static unsigned short stb__consolas_bold_10_latin1_t[224]={ 1,22,40,32,1,13,13,40,1,1,40,
40,40,40,40,13,13,32,32,13,32,13,23,32,13,32,22,23,32,40,32,
23,1,32,32,23,32,32,32,23,32,32,22,32,32,32,32,22,32,1,32,
22,32,23,32,32,32,32,32,1,1,1,40,40,40,32,13,32,13,32,32,
1,22,13,1,22,22,32,32,22,13,13,32,22,13,32,40,40,40,23,40,
1,1,1,40,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,1,22,1,
22,22,22,1,13,40,23,32,40,40,40,40,40,40,22,40,40,40,22,1,
40,40,40,32,40,22,22,22,13,13,1,13,1,1,1,22,1,13,13,1,
1,13,13,13,13,22,1,1,1,1,1,1,40,1,1,1,1,1,1,22,
13,13,13,13,13,13,1,22,13,13,13,13,13,22,22,22,22,13,22,13,
23,13,22,22,32,1,23,13,13,13,1,1,1, };
static unsigned short stb__consolas_bold_10_latin1_a[224]={ 88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_bold_10_latin1_BITMAP_HEIGHT or STB_FONT_consolas_bold_10_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_bold_10_latin1(stb_fontchar font[STB_FONT_consolas_bold_10_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_bold_10_latin1_BITMAP_HEIGHT][STB_FONT_consolas_bold_10_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_bold_10_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_bold_10_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_bold_10_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_bold_10_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_bold_10_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_bold_10_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_bold_10_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_bold_10_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_bold_10_latin1_s[i] + stb__consolas_bold_10_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_bold_10_latin1_t[i] + stb__consolas_bold_10_latin1_h[i]) * recip_height;
            font[i].x0 = stb__consolas_bold_10_latin1_x[i];
            font[i].y0 = stb__consolas_bold_10_latin1_y[i];
            font[i].x1 = stb__consolas_bold_10_latin1_x[i] + stb__consolas_bold_10_latin1_w[i];
            font[i].y1 = stb__consolas_bold_10_latin1_y[i] + stb__consolas_bold_10_latin1_h[i];
            font[i].advance_int = (stb__consolas_bold_10_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_bold_10_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_bold_10_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_bold_10_latin1_s[i] + stb__consolas_bold_10_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_bold_10_latin1_t[i] + stb__consolas_bold_10_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_bold_10_latin1_x[i] - 0.5f;
            font[i].y0f = stb__consolas_bold_10_latin1_y[i] - 0.5f;
            font[i].x1f = stb__consolas_bold_10_latin1_x[i] + stb__consolas_bold_10_latin1_w[i] + 0.5f;
            font[i].y1f = stb__consolas_bold_10_latin1_y[i] + stb__consolas_bold_10_latin1_h[i] + 0.5f;
            font[i].advance = stb__consolas_bold_10_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_bold_10_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_bold_10_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_bold_10_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_bold_10_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_bold_10_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_bold_10_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_bold_10_latin1_LINE_SPACING
#endif

