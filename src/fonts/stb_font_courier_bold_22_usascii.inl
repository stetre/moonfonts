// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_22_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_22_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_22_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_bold_22_usascii_BITMAP_HEIGHT         62
#define STB_FONT_courier_bold_22_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_bold_22_usascii_FIRST_CHAR            32
#define STB_FONT_courier_bold_22_usascii_NUM_CHARS             95

#define STB_FONT_courier_bold_22_usascii_LINE_SPACING          10

static unsigned int stb__courier_bold_22_usascii_pixels[]={
    0x20081310,0x99981008,0x4cc3a800,0x44026009,0x5114000c,0x98022180,
    0x36e200bb,0x3997103c,0x32a1e654,0x01cedb9c,0x331015c4,0x00401333,
    0x71015730,0x2b7b6a03,0x75101cca,0x277b6e03,0x26620bcc,0x33331000,
    0xbf701333,0x45f837ec,0xfff71fe9,0x227f880d,0xf880ffff,0x400bf305,
    0x205f92fc,0x320dd3fa,0xfb81ffff,0x5c1effff,0x3ffe4fff,0x3ffffe1f,
    0xea84ffff,0xfd84ffff,0x4c2fffff,0x7e401efd,0x7fe41fff,0x7ffffec0,
    0x7ec46fff,0x3fa22fff,0x2fffffff,0x2005fff1,0xfffffffc,0x3a64ea86,
    0x3a37c43f,0xdf9910cf,0x3e24fb80,0x7ff703ce,0x801fe815,0x0ff50ff9,
    0x4c37cfee,0xf98db13f,0x86ffbaef,0x3fe60dfc,0x5f7fec42,0x7fc3ffa8,
    0x6c1febbe,0x40ccccdf,0x2a06b8cd,0x20ffcbff,0x3ff21ffd,0x0cffea8c,
    0x32afbfa2,0x322bbf60,0x7f5c1fff,0x99bf7002,0x4c00dfb9,0xf137c45f,
    0xf01be20d,0x982fc41f,0x43ffffff,0x4fc805fb,0x57dc1ff4,0x545c86f8,
    0x360bfa0f,0x707fc44f,0x21bee0bf,0x260d46f9,0x4007ec5f,0x7ec07e0f,
    0xffc8ff21,0xf881ff11,0x102ff42f,0x06fc81ff,0x322005f9,0xccba7dc0,
    0x17e64ccc,0x837c4df1,0x13ee06f8,0x37f20bf1,0xff84fdaa,0x503fe200,
    0xf15f90df,0x1fb87d0b,0x1fea0ff3,0x01ff93ee,0x01fa07f7,0x33fb17e6,
    0x06a9ec03,0x64bf31fe,0x20bf30ff,0x017e62fd,0x0df10bf5,0x33b6eff2,
    0x227f6001,0x27ffffff,0x137c45f9,0x81be20df,0x82fc40fe,0x5c0e40fe,
    0x417ea04f,0xdff911ff,0x3e219ffd,0x2e3fff71,0x103fe04f,0x40bf71ff,
    0x06f986fb,0xd85ff991,0x982effff,0x0db8aefe,0x5cff09f3,0x103fe27f,
    0x5d7dc5ff,0xa86f982d,0xffff906f,0xf1009fff,0x7d5554cf,0xdf117e67,
    0x6f882fc4,0xbf10bf50,0x006fbf20,0x3f201ff1,0x3e65fd04,0x2fffffff,
    0xf39f11f3,0xfd80fee3,0x1ffdfb81,0x26b7fee0,0xff903ffc,0xbbffb0df,
    0x3aea05ff,0x20fea3ef,0xfb1fea7e,0x5ffd737d,0x7fffffec,0xfd11ffc1,
    0x2bbff20d,0x5c02ffc9,0x3e3fc04f,0x26df10cf,0x0df104fe,0x17e207fa,
    0x177ffec4,0x3f607f90,0x7447f902,0x260cfbaf,0x23f16b8f,0x1ff105f9,
    0x7017ffe0,0x9fffffff,0x1ffe5440,0x25f982a2,0x80bdfeb8,0x267e83fa,
    0xffffd86f,0x3ffa2fff,0x7d45fc9d,0x06fffdff,0x0df50ff9,0x3fc01fd8,
    0xb7c47ff6,0xdf102ffc,0x3e20bf50,0x7ff64c05,0x3a0ff102,0xe89f902f,
    0x7cc3fb8f,0x21f89fa8,0x06fb80ff,0xf7003fee,0x0015b957,0xfe803fcc,
    0xff917b50,0x7c45f989,0x5c417e26,0x362fcacd,0x2a07ec6f,0x06fdffff,
    0x81fe09f9,0x27f807f8,0x9be21ef8,0x0df105fb,0x17e205fd,0x81be6054,
    0x03fd83fc,0x3ff267fb,0x3e62dfec,0x6c7fffb2,0x0bfee1ef,0xfb805fb8,
    0x1fd80002,0xe981fd80,0x23fc2e99,0x000544fa,0x21fe45f9,0x113102fb,
    0x213f20df,0x13ee07f8,0x45f99fe0,0x41be26f8,0x037cc6f8,0x89f50bf1,
    0x1be606f8,0x8ff413ee,0xfffffffd,0x155327c7,0xfffeffd8,0x003fe204,
    0x0c400bee,0x30733fc4,0x5c9901ff,0x3fb1fec4,0x22fc8000,0x007f46fa,
    0xffc827e4,0xfd02fe41,0x7ccff003,0xdf137c45,0x5fb1be20,0x7d42fc40,
    0x03ffcbdf,0x1bea17ec,0xef983fe2,0x3740afd9,0x7dfff900,0xbffddd30,
    0x3eefed80,0x76ef7e40,0x3bff24ff,0xd503fffd,0xff985d11,0x16446ffe,
    0x1f7ff640,0x0bffbffb,0x3fffddb1,0xbdffffb0,0x3e203fff,0x7ccff007,
    0xdf137c45,0x6f89be20,0x7cc2fc40,0x00cfffff,0x17f437cc,0x2bf117f2,
    0x23fa80fd,0x5dffb049,0x7ffd4951,0x3fa00eff,0x6c404fff,0x443ffffe,
    0x03ffffec,0xfa82ffe4,0x37cc0eff,0x2fffff40,0x019fffb1,0x03bffff1,
    0x3fff7ffa,0x0fe201ef,0x4f99be20,0x0df137c4,0x03fc9be2,0xa8982fc4,
    0x3fa000ef,0xff137dc2,0x1fd5f983,0x17fbff20,0x3ffffff2,0x000000ff,
    0x4004c400,0x02200098,0x00880220,0x0000c000,0x0004cc00,0x7dd3f200,
    0x3a2fc41f,0xdffd30ef,0x3e201fe2,0x0bf105ff,0x7446fa80,0xf30bf71f,
    0x77301fa9,0x2af3aa03,0x00001cec,0x00000000,0x00000000,0x00000000,
    0xb1000000,0x2e3fffdd,0xd889d03e,0x2dfff51f,0xff8803f9,0x00bf00ef,
    0x23f50fd0,0x71d880fb,0x80000009,0xaaaaaaa8,0x22222222,0x00008888,
    0x00000000,0x00000000,0x00000000,0x3bffff10,0x08000000,0x00980000,
    0x00000100,0x10000000,0xdfffffff,0x3fffffee,0x01ffffff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x2aaaaaa2,0xddddb52a,0x1bdddddd,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x33100000,0x26015c40,0x013300ab,0x20099800,
    0x06620098,0x00999880,0x2e200244,0x5cc402cd,0x40133001,0xabc98029,
    0xcb881aaa,0x5100aacd,0x441517bb,0x57712baa,0x039b9305,0x219bdda8,
    0xaaaabcc8,0x559712aa,0x02b88055,0x441fff88,0xc83ffffd,0x7e43ffff,
    0xfd88006f,0x7fb05fff,0x007ffe60,0x202ffff4,0xff7001fb,0xf301dfff,
    0x5407dfff,0x7fedc4ff,0xfffff806,0x7ffcc6ff,0xf984ffff,0x24ffffff,
    0xfc9ffffd,0x3ffa2fff,0x7d40efff,0x267fffff,0xffffffff,0xfffff96f,
    0xff701bff,0x83fd7001,0x1ffcbefb,0x3ff33fe6,0x001bf261,0x17bb3bf2,
    0xfd701764,0x3f32a003,0x4017e405,0xffbaeff9,0x2f7fe20f,0xffd00ffc,
    0x37fffcc9,0x6fed54c0,0x2b3fe60a,0x7cc5fea9,0x5ffb99cf,0x544b3f62,
    0x4dffc3fe,0x5ff43fda,0x3e67fd99,0xfbaefbae,0x955df716,0x0bd309fd,
    0x1fe0fe40,0x517e49f5,0x006f88df,0x800006f8,0x7c4001fd,0x9bfd7105,
    0x05fd0799,0x227dc9fb,0xfffb84fa,0x037c5544,0x3f20fee0,0x7f44f882,
    0x7e44fa82,0x2f41fc82,0x85f99be2,0x7c57e67e,0x37c4df15,0x2e0007f4,
    0x21fcaded,0xd37cc6f8,0x220fe81f,0x01cedbef,0x5999ff97,0x80799950,
    0x3ccb89fd,0x7dc17e20,0x0fffffff,0x3fcc1fe6,0x46f98191,0x104fbff8,
    0x3fb800df,0x882606f8,0xf907206f,0x8083f905,0x03be26f9,0xf8a7c453,
    0x86f897e5,0xfd1000fe,0x83ffffff,0x3fea9cfe,0x1ff887f2,0x3fffffe2,
    0x7fffcc1f,0xffe87fff,0x54fec05f,0xf101ffff,0x567ecc0b,0x027dc0aa,
    0x4fd801ff,0x827ce7ec,0x7dc006f8,0x50027cc3,0x2fc8009f,0x2e201fc8,
    0x77fec3ff,0xf11b80ac,0x5df10d4b,0x400bff75,0xfeb8befc,0x7fffc41f,
    0x446fcc6f,0x3fe22ffe,0x984fc89e,0x80aaaefb,0x6c05fba8,0x01bffd9f,
    0x5f9017e2,0x3603fb80,0x31bf601f,0x209f31ff,0x703306f8,0x5c4fa87f,
    0x13ea3ccc,0xf905f900,0x0fffe203,0x17ffff5c,0x7c40bf10,0x205fffff,
    0x2607fc40,0x7ffdc1ff,0x7ff41fff,0x3e23ffff,0xf8837c46,0x017e2006,
    0x001dfffb,0x2fc80bf1,0xf882fd40,0x0efe880f,0x04f997f4,0x21ba0df1,
    0x52fcc3fb,0x267fffff,0x17e4005f,0x1df00fe4,0x1ffb5100,0xf8817e20,
    0x504ffccf,0x417ea1ff,0x4bfe21fe,0xfea85fc8,0x1be21fec,0x037c41be,
    0xfd80bf10,0xbf1003ff,0x4402fc80,0x86fb80ff,0x7d40efe8,0x82efdccf,
    0x70ff06f8,0x20ff885f,0x7fc6fbaa,0x20fee000,0x406a00fd,0x205f905a,
    0x9be205f8,0xffa84ff9,0x3fa0bf30,0x1fe17ea1,0x6f88ff70,0x0df106f8,
    0x3602fc40,0x8803ffdf,0x21fe405f,0x70f7e429,0xdff985ff,0xfffffc80,
    0x06f885ff,0x0ff441ff,0x3e6067f4,0x220efe45,0x507fcc6e,0x7ec000ff,
    0x880ff444,0x31be205f,0x441303ff,0x0ffdc2ff,0x06f98df3,0xf885ff71,
    0xdf106f86,0x202fc400,0x04ff99fd,0x3e202fc4,0x42fffddf,0x4fffeffe,
    0x88227fdc,0x05fa9999,0x3ffe0df1,0xf104ffde,0xbffdbdff,0xfdbfffb0,
    0xdbff909f,0x1e4405ff,0xfedfffd8,0xffffb85f,0x3ffea0ef,0x013fee3f,
    0x3ff7ffee,0x3ffa4fff,0x3b23ffed,0x74c4fffd,0xdffd15ff,0x3ffffa61,
    0x7ffdc3ff,0xd10effff,0x3ffee3ff,0x3ffffee5,0xfeb80eff,0xff902eff,
    0xffff05ff,0xd10bffff,0x3fa27fff,0x225fffff,0x404ffffc,0xcfffffd8,
    0xdfffd900,0x67ffdc07,0x407fd401,0xbefffdeb,0xfffffb80,0x3fffee0e,
    0xa802fec3,0xffeeffff,0x1ffffe44,0x207bfff2,0xe98efffa,0xfff50eff,
    0xfb89ffff,0x1effffff,0x3ea3ffd1,0x3ffee6ff,0x201effff,0x01300098,
    0x7ffffffc,0xfffe886f,0xfffffd14,0x000220bf,0x98800262,0x80026000,
    0x00988008,0x00000000,0x26001988,0x00026200,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x5d400000,0x2aae60aa,0x982aee21,0x2aee22ab,0x950aae60,0x5c405555,
    0x55750aab,0x2a1aaba8,0x2f2a1aab,0x5d41aaaa,0x4357712a,0x01aaabb8,
    0x2aaaf326,0x99710aaa,0x21555555,0x0aaaabb8,0xaaaacc88,0x10d5cc2a,
    0x97105577,0x57500555,0x44355501,0x00bccccb,0x001e6dc4,0xf5037100,
    0x7ffc9fff,0x93ffee7f,0xff70ffff,0x87fffcbf,0x2ffffff9,0x3bffff90,
    0x3e23ffff,0xfff36fff,0x3fffe6bf,0x3fe27fff,0x6fffb9ff,0x3ffffff6,
    0xfffff84f,0xf92fffff,0xffffffff,0x3fffff23,0x7ffc43ff,0x7fc6ffff,
    0xffff70ff,0xfffffb85,0x17ffe201,0xffc9bffe,0x01dfffff,0xe81ffffd,
    0x7fe4001d,0x20bffa80,0x2e21dfd9,0x8bbf20ff,0x3f21ffb8,0x57fd542f,
    0x2bbee202,0x5c2eff88,0x3eaa1aef,0x3beeaa0f,0x977d41aa,0x2e21ffa8,
    0x3fecaaef,0x5556fe4c,0xdf712fda,0x23fb5555,0xfdbacfd8,0x2abbe23f,
    0x7ecc5fea,0x09fb514f,0x0bfff751,0x2a0fffa8,0x3ee21fff,0x85fdbaae,
    0xe81c9cfa,0xf5000cff,0x6c1fe40b,0x22bf902f,0x2df901ff,0x1fe01ff9,
    0xfe8afc40,0x915f880d,0x7c41be29,0x3e17e205,0x7c45f986,0xfb83fb86,
    0xf909be22,0x3e617dc3,0x7dcbf10f,0x1fffc80f,0xdfb80bf2,0x3fe200ff,
    0x21bffa4f,0x40fe85f8,0xffb803fc,0xf300004f,0x7406f98d,0x6c04fdaf,
    0x7c03ffdf,0xf3bf1007,0xf76f80bf,0x220bf33f,0x217e205f,0xe85f986f,
    0x7c9fdc0f,0x9b7c4191,0x17dc499f,0x269f1fe4,0xfbf901ff,0xfd017e4d,
    0x7c407f93,0xfef98ffe,0x7cc5f886,0x007fcc0f,0x01fffe44,0xf90ff400,
    0x6fff9807,0x04ffe880,0xff1007f8,0x2ff00dff,0x04facffe,0x7fc40bf1,
    0x986feeee,0x21bf225f,0x00ffeefb,0x07fddff1,0x13ea0bee,0xfc80ffa2,
    0x05f94fda,0x037c5be6,0xfb7f9bf1,0xdff10df5,0xf709ffdd,0x8802eebf,
    0x0002effd,0x07fc57ea,0x800ffe40,0x7f802ffd,0xfffff100,0xefafe809,
    0xf103fbef,0x7fffc40b,0xff986fff,0xb81fffee,0x100fffff,0x207fffff,
    0x85f982fb,0x57e405fd,0x02fc9ff8,0x80fec7f9,0x7fff9df8,0xffff10df,
    0xffa8bfff,0x803ffaff,0x76c3fffc,0xfb8ff802,0x00df1004,0x007ffbee,
    0xf88d70ff,0x203fe9af,0xefebfefd,0x40bf102f,0xf9999ef8,0xfffff986,
    0xb39f700d,0x27be201f,0x2fb813fb,0x37e44fa8,0x2e5f9073,0xf882fcef,
    0x05ffffff,0x4fff6bf1,0x99ef886f,0x3f65feb9,0x00efff9b,0x307bff66,
    0x2ff200df,0xdf1001fe,0xf73ff500,0x6c3fc01f,0xf897e20f,0x1fff900f,
    0x2203fff7,0x217e205f,0x005f986f,0x101ccfee,0x3e22e2df,0x3f20bee4,
    0xfc83fea2,0xffd17e41,0xdddf705f,0xf101ffdd,0x37c3fe6b,0x3fc42fc4,
    0x0bff23fb,0x8177fe44,0xff1001fb,0x37c400df,0xfc8bfe60,0x3f61fe06,
    0x9f717e20,0x7c5bfee0,0x0bf100ff,0x437c2fc4,0x3ee005f9,0x30df1003,
    0x7117dcbf,0x0bfe21ff,0x22fc83f9,0xfe82fff9,0xf883fc81,0x886f8265,
    0x267f985f,0x2effedff,0x00ffff22,0xffd8009d,0xffffa802,0x7ffdc0ef,
    0x23dffd14,0xffffffe8,0xfff50fff,0x0bffe27f,0x3ff47ff5,0x3fffffa2,
    0x3bffa65f,0x70effea8,0x409fffff,0x03fffffc,0xfffffff5,0x3ffeabff,
    0x322fffff,0xffffffff,0x43bffee1,0x3fa22ffc,0x3fff63ff,0x8ffffa25,
    0x3ea5fffc,0xffffffff,0x7f7ff5c4,0x19ffd12f,0x4000e880,0xff7007fa,
    0xfb83dfff,0xfffd14ff,0x3ffffa23,0xf70fffff,0x7fdc7fff,0xf70ffcc3,
    0xffffe98f,0x3ffea5ff,0x0efffa9e,0x09fffff7,0x1fffffec,0xffffffb8,
    0xfff75fff,0xfc819dff,0x1fffffff,0xe83bffee,0x3fffa62f,0x897fff63,
    0x3f63fffe,0x3ffee5ff,0x203effff,0x0033a018,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x159db930,0x56f6e440,0x7bb7100b,0x2a3cc981,0xdb7104cc,
    0x36e60379,0x3ccb80bd,0x64439971,0x23cccccc,0xec89ccb8,0x6d5e5c0b,
    0x799500bd,0x950ccc98,0x332e2799,0x3aef2e1c,0x0803dd9c,0x1503ca80,
    0x555554c0,0x576a1aaa,0x21baa5d9,0x0fa000b9,0x224ea800,0x05ffffff,
    0xfffffff7,0xfffffb07,0xd37fe43f,0xfff70fff,0xff70bfff,0x7c43ffff,
    0xfffa8fff,0x3ffffe25,0x3ffea6ff,0x226ffffd,0xffffffff,0x21ffff81,
    0xffd4fffc,0xffff51ff,0x3ffffe69,0x402fffff,0x417fc04f,0xfff706f9,
    0x1fffffff,0x337cdbe6,0x1effd8df,0x0df103d3,0x89ffd300,0x1fd989ab,
    0x544e7fcc,0x577ec3fe,0x7d46fc98,0x3e1fea26,0x45fb98af,0xfea9cffa,
    0x23bfa60f,0x3e20cffa,0x42ffdaae,0xb9cfffd9,0x44f7fcc4,0x9ff884fb,
    0x25fc8ce8,0x3ea0ffb8,0x4dffcc2f,0x206f9bff,0x1be605f8,0x2217ffe2,
    0xcccccccb,0x7c57e23c,0xdfb97e25,0x81ffbffd,0x362006f8,0x97501eff,
    0x4fc87fb9,0x3fe22fa8,0x3fe9999a,0x21fe1be2,0x0989bdfe,0x1fe417f4,
    0x0fffff62,0x02ffa964,0xf8803ff7,0x3fb06f86,0x05f91ff7,0x41fe43fd,
    0x7f9be6f8,0x5f7de6c4,0x740fdc4d,0x0003fecf,0x3e27c9f0,0xfffb96a4,
    0x100df103,0x7405fff9,0x43ffffff,0xf98101fe,0xffffffff,0x1fe1be24,
    0x37ffffea,0x7cc1be20,0x009ffd05,0x7dc05ff5,0xf86f8802,0xffd7f707,
    0xbf501fd7,0x3e203fe2,0x4c7f9be6,0x6fffffff,0x8afec2ec,0x333222ff,
    0x43cccccc,0x07d0fa2e,0x55540a88,0x41aaaefb,0x5c03fffb,0x3fdaabef,
    0xf9800fec,0xcccccccf,0x1fe1be22,0x37f654c2,0x17ea03fe,0x80bffff6,
    0x7dc02ffa,0xf86f8802,0xfdfff107,0x4ff40dff,0x4df104fc,0x2a21fe6f,
    0x1e81dfff,0x9fe637cc,0xfffffffb,0xa82a0fff,0x44000dc0,0xffffffff,
    0x07fff65f,0x7fb11fe0,0x3b80dfc8,0xf8181ffc,0x3ea3fdc7,0x3f60fe82,
    0x88bfa60d,0x4ffa8efe,0x1ae2ffa8,0x3e200bee,0x3fe07f86,0x205ffdbf,
    0x100ffefa,0x0ff37cdf,0x003bffea,0x4c2980b8,0x99999999,0x05b00000,
    0xefbaa981,0x7fd40aaa,0x3bf600cf,0x25ffffec,0xedceffe8,0x6fffd46f,
    0x7f44ffed,0x25ffffde,0xffddeffb,0x76fff445,0x3ffe65ff,0x21dfff36,
    0xfffffff9,0xfffff90f,0xffe983df,0x20bffb0e,0x3ffa8ffd,0x8827ff40,
    0x2bff4ffe,0xc9ff85ff,0x0000004f,0xfa800000,0x2203fea4,0xfff7005f,
    0x3fff6207,0x6446ffef,0x80dffffe,0xcfffffe9,0x6ffffc41,0x3fbe66ff,
    0xd880beff,0x7d44efff,0xdfff36ff,0x3ffffea1,0xfff90fff,0xf983dfff,
    0xdffd0eff,0x1fe97ee0,0x8807fdc0,0x2bff5ffe,0x363d86ff,0x00000002,
    0x7d300000,0x3e203fea,0x3ff22005,0x0033102e,0x88009988,0x09980099,
    0x40013100,0x00000009,0x00000000,0x00000000,0x00000000,0x00000000,
    0x3e201104,0xffd98005,0x00000004,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x001f4000,0x00007d50,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__courier_bold_22_usascii_x[95]={ 0,4,2,1,1,1,2,4,5,2,1,0,3,1,
4,1,1,1,1,1,1,1,2,1,1,2,4,3,-1,0,0,1,1,-1,0,0,0,0,0,0,0,1,1,0,
0,-1,-1,0,1,0,0,1,0,0,-1,-1,0,0,1,4,1,2,1,-1,3,0,-1,1,0,0,1,0,0,1,
1,0,1,-1,0,0,-1,0,1,1,1,0,0,-1,0,0,1,3,4,3,1, };
static signed short stb__courier_bold_22_usascii_y[95]={ 16,3,4,2,2,3,5,4,3,3,3,4,13,9,
13,2,3,3,3,3,3,3,3,3,3,3,7,7,4,7,4,4,3,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,2,3,3,19,3,7,3,7,3,7,3,7,3,3,
3,3,3,7,7,7,7,7,7,7,4,7,7,7,7,7,7,3,3,3,8, };
static unsigned short stb__courier_bold_22_usascii_w[95]={ 0,4,8,10,10,10,9,4,5,5,10,11,5,9,
4,10,10,10,9,10,9,10,9,9,10,9,4,6,12,12,12,10,9,14,12,12,11,11,12,12,12,10,11,12,
12,14,13,12,11,12,13,10,11,12,14,13,12,12,10,6,10,5,10,14,5,12,13,11,12,11,11,12,12,10,
8,12,10,14,12,11,13,12,11,10,11,12,12,13,12,12,10,6,3,6,10, };
static unsigned short stb__courier_bold_22_usascii_h[95]={ 0,14,6,16,17,14,12,6,17,17,9,12,7,3,
4,17,14,13,13,14,13,14,14,14,14,14,10,12,12,7,12,13,15,12,12,13,12,12,12,13,12,12,13,12,
12,12,12,13,12,15,12,13,12,13,12,12,12,12,12,17,17,17,7,3,4,10,14,10,14,10,13,14,13,13,
18,13,13,9,9,10,14,14,9,10,13,10,9,9,9,14,9,17,17,17,5, };
static unsigned short stb__courier_bold_22_usascii_s[95]={ 145,191,231,86,52,169,223,240,74,80,190,
1,201,120,251,34,180,140,120,147,130,158,209,246,14,25,250,246,13,218,233,
202,97,180,210,176,143,131,118,163,93,82,151,55,42,195,166,107,106,107,236,
213,224,189,1,68,29,16,155,45,63,28,207,130,245,26,232,39,1,51,48,
219,35,60,1,71,84,175,135,87,133,196,123,76,95,63,162,148,99,120,112,
21,17,10,245, };
static unsigned short stb__courier_bold_22_usascii_t[95]={ 16,1,48,1,1,1,35,48,1,1,48,
48,48,16,54,1,1,20,20,1,20,1,1,1,20,20,20,35,48,48,35,
20,1,35,35,20,35,35,35,20,35,35,20,35,35,35,35,20,35,1,20,
20,20,20,35,35,35,35,35,1,1,1,48,16,54,48,1,48,20,48,20,
1,20,20,1,20,20,48,48,48,1,1,48,48,20,48,48,48,48,1,48,
1,1,1,48, };
static unsigned short stb__courier_bold_22_usascii_a[95]={ 186,186,186,186,186,186,186,186,
186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,
186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,
186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,
186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,
186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,
186,186,186,186,186,186,186, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_22_usascii_BITMAP_HEIGHT or STB_FONT_courier_bold_22_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_22_usascii(stb_fontchar font[STB_FONT_courier_bold_22_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_22_usascii_BITMAP_HEIGHT][STB_FONT_courier_bold_22_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_22_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_22_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_22_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_22_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_22_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_22_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_22_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_22_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_22_usascii_s[i] + stb__courier_bold_22_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_22_usascii_t[i] + stb__courier_bold_22_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_22_usascii_x[i];
            font[i].y0 = stb__courier_bold_22_usascii_y[i];
            font[i].x1 = stb__courier_bold_22_usascii_x[i] + stb__courier_bold_22_usascii_w[i];
            font[i].y1 = stb__courier_bold_22_usascii_y[i] + stb__courier_bold_22_usascii_h[i];
            font[i].advance_int = (stb__courier_bold_22_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_22_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_22_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_22_usascii_s[i] + stb__courier_bold_22_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_22_usascii_t[i] + stb__courier_bold_22_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_22_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_22_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_22_usascii_x[i] + stb__courier_bold_22_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_22_usascii_y[i] + stb__courier_bold_22_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_22_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_22_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_22_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_22_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_22_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_22_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_22_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_22_usascii_LINE_SPACING
#endif

