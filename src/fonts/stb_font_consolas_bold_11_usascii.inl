// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_bold_11_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_bold_11_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_bold_11_usascii_BITMAP_WIDTH         128
#define STB_FONT_consolas_bold_11_usascii_BITMAP_HEIGHT         50
#define STB_FONT_consolas_bold_11_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_consolas_bold_11_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_bold_11_usascii_NUM_CHARS             95

#define STB_FONT_consolas_bold_11_usascii_LINE_SPACING           7

static unsigned int stb__consolas_bold_11_usascii_pixels[]={
    0x8041dc00,0x201795c8,0x4bba62cb,0x03b80eeb,0x43200910,0xca88a61a,
    0x0393510a,0x20400000,0x1327502b,0xd886e41e,0x52d9dc83,0x07e6213d,
    0x83ffc932,0xd73d402e,0xfbde8a74,0x43f9df31,0x3ffc80f8,0x3f63fec4,
    0xf307e65f,0x6ffc9323,0x263542d8,0xf8355666,0x2a355511,0x35c2fa9f,
    0x89f88f60,0x98fcd70f,0x3ee69d0f,0xf53f50ab,0x3e60e745,0x3a3dc3f0,
    0x6dfd5323,0x234c2e81,0xd57cfebc,0x766447e0,0x2226cb95,0xd81f101f,
    0x1f9b25bc,0xfdaa6cf3,0xa6cb90cc,0x3e20a9f9,0x98fc0fbc,0x6fd5320f,
    0x6c076444,0xf79b9d0d,0x640fc1aa,0x643649b5,0xdf309904,0x8fdc7d45,
    0x7cc5f179,0x2eb926c0,0x3ee1feef,0x8d73e84f,0x897fee4c,0x85fc40eb,
    0xd56bdcce,0x657207e0,0x03e61725,0x21fa03f1,0xff31fdfe,0x5c0f989f,
    0x9d3d5725,0xb0bea7e6,0xd8991ae7,0x2a1743fb,0xaef6e746,0xb903f06a,
    0x40be6bea,0xf8835c3d,0x0798fc03,0x35f307e2,0x3a27e25f,0xf0ba1f53,
    0x34c83e65,0x2d85f5d3,0x2b6ba354,0x07e0d50c,0x04ffb972,0xf905d1aa,
    0x1e63f00b,0x75c3ffb0,0x12ff5c4f,0x0f98bffb,0xfd54c8be,0x5b89907d,
    0xf06a825c,0x8dc89b03,0x83ccba01,0x01830008,0x80000008,0xc87d43e8,
    0x5e981a24,0xdee883fb,0x75cbbea4,0x81fdd51f,0x42205fe8,0x00000008,
    0x20000000,0x9329705b,0x80108018,0x884cc409,0x0000cc19,0x00000000,
    0x00000000,0x00000440,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x40000000,0x2202003b,0x44081abb,0x0640712c,
    0x00910571,0x40000080,0x7101b980,0x33000059,0x26fff976,0x2fe3fffa,
    0x9fff21fc,0x7c05b6bd,0x987d9f11,0x317fee07,0x7ffc5ffd,0x3e4d96e7,
    0x13f664ff,0x7fd46b76,0x2ecbb3ff,0x5ae172fd,0xf3188bf9,0x411fa9e2,
    0xa885afbc,0x132f31fc,0x7cc373f3,0x19f12f88,0x70cd7c11,0x1ee126cb,
    0x885f03ea,0x3f10fc99,0x5c8cc3f1,0x7c0d96b8,0x033e64ee,0xe881d571,
    0x3bba1fbd,0x8fe77cc0,0x1ea9f75c,0xb2dc1bf8,0x262e4c49,0x337f2a7c,
    0x3761fc41,0x2e13205c,0x4d3febb6,0x5ffb809f,0xf35c0ad8,0x8aabfa63,
    0x3769d0f9,0x40d75ddd,0x4b70efee,0xf13faa4d,0x567d4c3b,0x7fcc2ec1,
    0xb83baec1,0xf8a6cb96,0x2fa81eff,0x6c8fb76a,0x77d66c7e,0xf94d9e63,
    0x403dd327,0x1ecb72f8,0x201b17c4,0xb00fb82f,0x4531f90b,0x22beabb1,
    0x9a6cd74e,0x23a25f31,0x2e3ea69f,0x87f29b1f,0x3ea5f179,0x19f12f88,
    0x2a3f5013,0xf982f88f,0x217c0322,0x64099cf8,0x7cbb6b84,0x3ffee1ef,
    0x23dbbf33,0x4b24fffa,0x76ff43ec,0x4bddff31,0x7e44fff9,0x97ffd44f,
    0x7ec2fff8,0x93ffe64f,0xb85f02f8,0x2643ffff,0x04000332,0x00080cc4,
    0x00001000,0x04000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x24400000,0x40097000,0x79900048,0x00000000,0x2e000000,
    0x316c7f17,0x266b93ad,0x9ffff907,0x7ffcc4b8,0x3e603e64,0x236d44ff,
    0x3ee992fb,0x305f3f99,0xfff8be6f,0x3ffff10f,0x3aa3d9ae,0x3635dfc7,
    0x9b35d662,0x640e4fcc,0x7cc2aa85,0x11f31fb8,0x1fcde615,0x32df71ae,
    0x27f77f74,0x89d7982f,0xd717202f,0x47de99ec,0x556c2ffa,0xf13f35ab,
    0x07ef7cc3,0x31bb2172,0x47cc3e6f,0x43e9e65d,0x64fedc6b,0x299dd974,
    0x86bf982f,0xd717202f,0x47a87d33,0xedbc87f8,0x31eafe5a,0x5c83f11f,
    0xfff98d70,0x983b7e62,0x35c1fbaf,0x6533736e,0x05f4beeb,0xfff07ff3,
    0xffb8b90f,0x2e3d43ff,0x776643fe,0x3133724c,0x41720fcf,0x2747cc6b,
    0xef98bbf3,0x6dc6b81c,0x79794df8,0x3e60beb7,0x0cdfc0fa,0x3d9ae2e4,
    0xf75f13d4,0x27ddf5c1,0x27985df5,0x6b82e41f,0xf30fabcc,0x203cc9d1,
    0x4fdadc6b,0x9bfad45b,0xf1b6f309,0x9ae2e405,0x227ee63d,0x9fb97a6c,
    0x207fc3f9,0x8b907e79,0xf32ffff9,0xf98f99fc,0x3fe60f32,0x3e6b72ff,
    0xffad45b4,0x3e2f32ff,0x3fe20be3,0x9ecd71ff,0x003ffff8,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x8e200000,0x5c44a80b,
    0x5c40ae2b,0xbb88660b,0x4c0ddd40,0x80ff803b,0xff71ffff,0x27fec47d,
    0xfd89dff3,0xa87ad44f,0x3fffea5f,0x2e0fcf33,0x31d67c1f,0xfddf889f,
    0x7def4dd0,0xc83f2f20,0xa9360dcf,0xb82f82fe,0x22e2fa8d,0x3e6f30fa,
    0x23f31d71,0x222fbdc9,0x2a6625ee,0xb0fcf31f,0x103bf01d,0x27d35cbd,
    0x5d55f319,0x3f11fa98,0x4dcc9f20,0x96e19bf8,0xf30f984d,0xf9b21f53,
    0x47dbbd32,0x4b905bdc,0x6f447e79,0xd86fd980,0x426cd70e,0xd11cccfa,
    0x03e63f9b,0x0f55f2dc,0x96e1ffff,0x3e64e85d,0xddf30dfe,0x3255647f,
    0x3f10b71f,0x20fdc7cc,0x0f9840ed,0x89fa8bd1,0x07e6972f,0xf88fcdea,
    0x4c33608c,0x17c1fbbf,0x5d89f2dc,0x223f8bcc,0xddf92f9a,0x3bb3b65f,
    0x6ff43643,0x3e25b81e,0x6c1324fe,0xfb9b64ff,0xdbfd10ff,0x807ff543,
    0x7c4ecceb,0x327ae19b,0x4267b61f,0x4cc5f379,0x332ba26c,0x47dd9970,
    0x000102f8,0x10000002,0x7d000020,0x3fffe364,0x4c3bff71,0xff33ffff,
    0x06ffc49d,0x2dc0b23e,0x000001b2,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x515c5c00,0x8b9994c3,0x2a214c0b,0x5dddc1b9,
    0x0a8d4730,0x400530e2,0x020bbbb8,0x23aab954,0xba8b225d,0xdddddd2b,
    0x7e77c000,0xec9ecd72,0x2ef24ded,0x1fbdf30c,0x443fb322,0x45d0f9bf,
    0x5d825c69,0xa85dddc4,0x299499ff,0x31ba5bbd,0x4cf32a3b,0x00019999,
    0x9f895cbe,0x597790f8,0xf31ffd4b,0x2f983f11,0x97917fd4,0x376e6b59,
    0x88b72a1b,0x5590aaaa,0x5e5325ff,0x0000005b,0x9b01f800,0x55dd64b7,
    0x21dbbd15,0x09d07e79,0xfecb83fe,0x59dd954b,0xc8874474,0x01881ccc,
    0x00000000,0x3e603f00,0x2aeeb22e,0x7982ee25,0x408ed87e,0x37ea5ddc,
    0x2225c3fd,0x00000261,0x00000000,0x1fa01f80,0x00b57759,0xff88fcf3,
    0xf11f51ff,0x0beabe67,0x00000075,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_bold_11_usascii_x[95]={ 0,2,1,0,0,0,0,2,1,1,0,0,1,1,
1,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0, };
static signed short stb__consolas_bold_11_usascii_y[95]={ 8,0,0,0,-1,0,0,0,-1,-1,0,2,5,4,
6,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,2,0,2,0,2,0,2,0,0,
0,0,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,0,-1,0,3, };
static unsigned short stb__consolas_bold_11_usascii_w[95]={ 0,2,4,6,6,7,7,2,4,4,6,6,4,4,
4,6,6,6,6,6,6,6,6,6,6,6,2,4,6,6,5,5,6,7,6,6,6,6,6,6,6,6,5,6,
5,6,6,6,6,7,6,6,6,6,7,6,7,6,6,4,6,4,6,7,4,6,6,6,6,6,6,6,6,6,
5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,2,5,6, };
static unsigned short stb__consolas_bold_11_usascii_h[95]={ 0,9,4,8,11,9,9,4,12,12,6,6,5,2,
3,10,9,8,8,9,8,9,9,8,9,8,7,8,7,4,7,9,11,8,8,9,8,8,8,9,8,8,9,8,
8,8,8,9,8,11,8,9,8,9,8,8,8,8,8,11,10,11,5,2,3,7,9,7,9,7,8,9,8,8,
11,8,8,6,6,7,9,9,6,7,9,7,6,6,6,9,6,11,12,11,4, };
static unsigned short stb__consolas_bold_11_usascii_s[95]={ 127,1,88,44,14,31,46,85,6,1,22,
57,123,103,93,71,61,121,23,89,51,75,113,58,120,37,99,123,72,71,86,
96,33,1,30,68,16,9,100,10,114,107,4,93,87,80,73,106,59,56,45,
24,31,82,16,9,1,116,109,40,64,45,64,108,98,109,54,116,39,102,102,
17,24,38,50,52,66,15,29,92,92,85,1,79,99,65,8,50,43,78,36,
21,11,27,78, };
static unsigned short stb__consolas_bold_11_usascii_t[95]={ 1,14,42,33,1,14,14,42,1,1,42,
42,33,42,42,1,14,24,33,14,33,14,1,33,1,33,33,14,33,42,33,
14,1,33,33,14,33,33,24,14,24,24,14,24,24,24,24,1,24,1,24,
14,24,14,24,24,24,14,14,1,1,1,42,42,42,33,14,33,14,33,14,
14,24,24,1,24,24,42,42,33,1,1,42,33,1,33,42,42,42,1,42,
1,1,1,42, };
static unsigned short stb__consolas_bold_11_usascii_a[95]={ 97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_bold_11_usascii_BITMAP_HEIGHT or STB_FONT_consolas_bold_11_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_bold_11_usascii(stb_fontchar font[STB_FONT_consolas_bold_11_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_bold_11_usascii_BITMAP_HEIGHT][STB_FONT_consolas_bold_11_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_bold_11_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_bold_11_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_bold_11_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_bold_11_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_bold_11_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_bold_11_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_bold_11_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_bold_11_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_bold_11_usascii_s[i] + stb__consolas_bold_11_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_bold_11_usascii_t[i] + stb__consolas_bold_11_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_bold_11_usascii_x[i];
            font[i].y0 = stb__consolas_bold_11_usascii_y[i];
            font[i].x1 = stb__consolas_bold_11_usascii_x[i] + stb__consolas_bold_11_usascii_w[i];
            font[i].y1 = stb__consolas_bold_11_usascii_y[i] + stb__consolas_bold_11_usascii_h[i];
            font[i].advance_int = (stb__consolas_bold_11_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_bold_11_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_bold_11_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_bold_11_usascii_s[i] + stb__consolas_bold_11_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_bold_11_usascii_t[i] + stb__consolas_bold_11_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_bold_11_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_bold_11_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_bold_11_usascii_x[i] + stb__consolas_bold_11_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_bold_11_usascii_y[i] + stb__consolas_bold_11_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_bold_11_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_bold_11_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_bold_11_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_bold_11_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_bold_11_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_bold_11_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_bold_11_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_bold_11_usascii_LINE_SPACING
#endif

