// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_23_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_23_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_23_usascii_BITMAP_WIDTH         256
#define STB_FONT_times_bold_23_usascii_BITMAP_HEIGHT         80
#define STB_FONT_times_bold_23_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_bold_23_usascii_FIRST_CHAR            32
#define STB_FONT_times_bold_23_usascii_NUM_CHARS             95

#define STB_FONT_times_bold_23_usascii_LINE_SPACING          15

static unsigned int stb__times_bold_23_usascii_pixels[]={
    0x00000000,0x00000000,0xdb710000,0x802f7b29,0x00000000,0x00000000,
    0x00000000,0x00000000,0x80000000,0x416e402b,0x00dd987a,0x013ea0aa,
    0x5de6edcc,0xddb91000,0x5fc8039d,0x764407fd,0x6ee4400a,0x3f201cdd,
    0x167e5cc3,0x00cedc88,0x5c45f1ea,0x026c02cc,0x00f7f260,0x9bfd9510,
    0x76dc0915,0x02b9beee,0x6d41bb98,0x3a239cfe,0xfb80b70e,0x13e63d42,
    0x1ffa05d0,0x32037b90,0x10ffd402,0xafdc09fd,0x9dc883fe,0xfa80eead,
    0x213fa21f,0x3f10fff8,0xdd10ffea,0x35c03be6,0x5c7ec1f3,0x800d703f,
    0x01ff88fb,0x545dfd10,0xcfe986fd,0x80bff261,0x0de80dfa,0x7fdcbf71,
    0x6f8813a2,0x80bf23d4,0x413ea05d,0x055005e8,0x3e20bfee,0x3abf705f,
    0x588fc83f,0x2ffb83f1,0x7c45ff98,0xff8fee7f,0xdfd2fec6,0x227a9360,
    0xf10df57f,0x326e8003,0xefe8804f,0xff98dd00,0x4c0bf206,0x905f505f,
    0xf70ffd4d,0xf51fe607,0x5f903fe8,0x002f4000,0x0fff1032,0x7dc17fec,
    0x3ff07fd5,0xff10dcb1,0x217fec0f,0xe93ee6ff,0xd93fe0ff,0x322e80ff,
    0x7fcdfee5,0x2a0026c0,0x801f70ff,0x2601ffe8,0x200fff46,0x207f982e,
    0x225885fd,0xa83fc47f,0x3f23d46f,0x2a07f884,0x885c82aa,0x0e0aa8cc,
    0x7dc0bffb,0xfd5fb87f,0x4b7fff07,0x817ff608,0x27ec7ffb,0x266ff826,
    0x4bff24ff,0xeccdfcca,0x3eaff34e,0x540035c6,0x803e9bff,0x23807ffa,
    0x19806ffc,0xfb027fc4,0x2f4181bf,0x2fe417f4,0x70bf71ea,0x3ffc40df,
    0x233e607c,0xfd0e0ffd,0x7ffd409f,0x3feafdc0,0x206fffc8,0x3ea04ffe,
    0x80bee0ff,0x3fe20efa,0x6553fee5,0x4dfcccfd,0x893ea3fa,0xff88001f,
    0x066660cf,0xe800bff9,0xf50005ff,0xfb81999f,0x7900cfff,0x9f50bfb0,
    0x427d47a8,0x3fec04fe,0x21ff11a6,0xff1246fe,0x7ffcc07f,0x3feafdc1,
    0x1efffe88,0x301fffc4,0x07cc3fff,0xffb01dd0,0x9ae17fdc,0x6decc0f8,
    0x4001360c,0x7dc5fffa,0x027ffc2e,0x0013ffe0,0x7fe5ffe4,0x7ffffec4,
    0x6fd80983,0x647a8dd0,0x404ff80e,0x3a25c7fd,0x4713fe3f,0x2603fff8,
    0xafdc2fff,0x3ff203fe,0x3ffe22ff,0x8bffe603,0xb8166078,0x0ffd8cff,
    0x040d526c,0x02ee635c,0x7ffcdf4c,0xff107e23,0x7fc4007f,0xdff0003f,
    0x3ee07fec,0x9004ffff,0x477220ff,0x1019917a,0x7fd809ff,0x21ff316c,
    0x3e1c1ff9,0x3fea04ff,0xfeafdc1f,0x7fffd403,0xa813ffe0,0x502c1fff,
    0xeefd9801,0x2b7ea67f,0x8802aeda,0x3ee7f21f,0xff737cc2,0x7f412a3f,
    0x7ff4005f,0xdeeed984,0x7d4dff13,0xfffd882f,0x07fc800f,0xd8bd476e,
    0x04ff880b,0xd83e3fec,0x511ff66f,0x2e05ffd8,0xd5fb87ff,0xfee8807f,
    0x817ff62f,0x20287ffb,0x27fc4001,0xfffffff9,0xf89b00ff,0x7e46f98f,
    0x2cf7fec6,0x800dff90,0xff106ffc,0x266ff87f,0xfd3074ff,0x0dfb007f,
    0xed8f51b6,0x6c04ff80,0x9fd0747f,0x81717fe6,0x3f206ff9,0xfd5fb83f,
    0x746c4707,0x81bfe64f,0x00003ffc,0x2a077dc0,0x6a8017c7,0x7fcc7fd4,
    0xf887ffe0,0x3ea01fff,0x3ea000ff,0x0bffe07f,0x9ffccffd,0x04ff880e,
    0x4fa85fd8,0x213ea3d4,0x3fec04fe,0xc8cff876,0x6c0aa3ff,0x6ff882ff,
    0x0ffabf70,0x83f9589a,0xff882ffd,0xe983fb86,0x01df3005,0x4007ccd7,
    0x47fcc1f8,0x3ffa0ff9,0x3bffea0e,0x5ffc8151,0x7ff90e60,0xf90bffe0,
    0x7c7fe61f,0xd005fb04,0xa8bf707f,0x7dc2fdc7,0x2e3fec05,0x3e3bffa3,
    0x6c14552f,0x3bf621ef,0x3fabf700,0x3ab14f83,0xd83df906,0x87ff80df,
    0x7cc02ffd,0x3d49b00e,0x1fd04d80,0xfffa8bf5,0xfffecabe,0x7ff904ef,
    0xfc80da81,0x82fff81f,0x7c9f53fe,0x802fc42f,0x46fa80ff,0x4427e47a,
    0x23fec07f,0x5437ea59,0x406a1bde,0xbefcdfda,0x7f57ee00,0xdecefc83,
    0x37faa00b,0x3f603eeb,0x500ffa85,0x22e80377,0x206a805c,0xb81ecafa,
    0xd32efffd,0xeda80bff,0x4c04eddf,0xdfdbcefd,0xebfd880a,0x667ee744,
    0x3fa800cf,0x47a8ff30,0x05f903fe,0x01dc3fec,0x7d401c40,0x5fb801ff,
    0x2d4c07fd,0x1000cc00,0x00110040,0x3200220c,0x8802a801,0x80013009,
    0x98800098,0x080c0009,0xe8002662,0xf51fe205,0x17a02fd8,0x0d83fec6,
    0xb8012200,0x5fc806ff,0x003007fd,0x00000000,0x00000000,0x00000000,
    0x00000000,0x1aa00000,0x47a87f50,0x8ba204fa,0x105fc9fb,0x00950079,
    0x137dff90,0xeca76dc4,0x000000ad,0x00000000,0x00000000,0x00000000,
    0x00000000,0x201d4000,0x987a83ec,0x4cae00ce,0x4c00fdbf,0xcba98abc,
    0x32a20001,0x000001cc,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x10144010,0x001a8800,0x0009aa98,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x5eec8800,0xa8555554,0x3ddb30aa,0x40000000,0x02aabcc9,
    0x3b600000,0xb882eeee,0x000488cd,0x4c5554c0,0x7775c1cc,0xbdddb34e,
    0xd71ddb87,0xda859ddd,0xddd933ee,0x6f6dc39d,0x3bbbba61,0x099004ee,
    0x22017bb5,0x1f40cfdb,0x2001dd10,0x7ffc46ff,0x3fee17c2,0x41722002,
    0x980ceeb8,0x5eff89ff,0x7301fa80,0xfff309f7,0x4fa81fff,0x2400dfd7,
    0xdddffd80,0x3ffe42ff,0x6c17ffa2,0x007ffdc3,0x0bffd07f,0x3fff21aa,
    0xf003ffff,0x0dd1fb85,0x71bffff6,0x01ffdc0b,0xffb86ff8,0x3fee1624,
    0x5ffd9802,0x1dffffd0,0x17fa6fc8,0x2207fe20,0xec85ff6f,0x7cc4eeee,
    0x00dff10f,0x3ee00be6,0x883ff64f,0x7fdc1fff,0x3ffe0b07,0x3f60d103,
    0xfd0b104f,0x01ffffff,0x27f98f30,0x5455c4fc,0x03e22ffe,0xf8007744,
    0x21fff06f,0x02ffb82a,0x42ffe54c,0x3fffdacb,0x7fc97fe2,0xc81ffd80,
    0x00d0556f,0x0dff1bf6,0x2e017f20,0x0bfee2ff,0xff889ffb,0xfc82442f,
    0x3605706f,0xd0b104ff,0x9006d813,0x3ee6fc8b,0x0bfee0c7,0x6d40005d,
    0xf706ff8c,0x7fdc127f,0xf301cb8a,0xffc850bf,0xdfb2ffc4,0x81ffec80,
    0x33ea06ff,0xf1bfe01b,0xfff100df,0x22ffb803,0x7fd43ffa,0x22fff40f,
    0x5fff101b,0x27fec0b0,0x44044588,0xe85d003f,0x803fee6f,0x985b86fa,
    0xdfd80aaa,0xf106ffda,0x3ee091df,0x82ffcdef,0xfa805ff8,0xfd3fdc2f,
    0x7fdecc07,0x2bbfea21,0xeffffd80,0x3e2ffc42,0xfffb806f,0x517fdc04,
    0x7fff09ff,0xb07fff44,0x545ffd80,0x413ff602,0x01f50058,0x6ff81f10,
    0xfd80bfee,0xffb07980,0xf10ffb85,0x6ffe40df,0x6c7ff701,0x2ffc40ff,
    0x4c07fd40,0x2202eddf,0x261ffb8e,0xf80cfffc,0x43ffffff,0x037fc6ff,
    0x007ffd6c,0x7fd45ff7,0x2e6ffc82,0x0733ffe9,0x160fff98,0x2209ffb0,
    0x200db005,0x737fc45b,0xffd507ff,0xf705d01b,0x7c6fe85f,0x1bfe606f,
    0x3ee2ffb8,0x02ffc42f,0x8ac82fe4,0xff71d800,0x4c0dff03,0x0ffffca9,
    0x0dff1ff6,0x07ffd2a8,0xff717fdc,0x23fff103,0x032dff75,0x1cd3ffa0,
    0x4413ff60,0x003f8805,0x26ff987d,0xfea84ffb,0xb84c85ff,0x237fc2ff,
    0x1fec06ff,0x7d45ff70,0x02ffc44f,0x0fdc0774,0x3fee3b80,0x2006ff81,
    0x3ea2ffd8,0x80dff53f,0xb81ffee5,0x0bfd1eff,0x89d67fec,0x5005afff,
    0xb0036fff,0x012209ff,0x3e2003ea,0xf737fc40,0x3ffdc05f,0x17fdc3cc,
    0x6ff8dff1,0xf7007d40,0x21ffd45f,0x7dc05ff8,0xfffffb01,0x999e98bf,
    0x7fc0affc,0x43fd8006,0x6ffbfffb,0xfff88ea0,0xdd7ff702,0x7fd401bf,
    0x17ffec5f,0x099fff00,0x2609ffb0,0x7006d804,0xfb9bfe0d,0x07fec01f,
    0x0bfee0fc,0x06ff8ffd,0x17fdc058,0xff883ff5,0xa807e205,0x3fffffff,
    0x3fffffee,0x037fc3ff,0x2180fd40,0x337606ff,0x706ffecc,0x400225ff,
    0x7fd44fff,0x7ffdc007,0x05ffb800,0x03f88075,0x9bf607b0,0x7d400ffb,
    0xffb89906,0x3fe3fe42,0x80351a87,0x3fee2ffb,0xd02ffc40,0x2faa1985,
    0x2e6fcaaa,0xffffffff,0x53037fc3,0x3fe00d50,0xff109306,0x05ff703f,
    0xf01ff900,0xff88009f,0x0bff5005,0x03f50072,0x3ea03f10,0x0a897f27,
    0x46a81fcc,0x7fd42ffb,0x4c1fff93,0xff700b6f,0x7cc17f49,0x999d905f,
    0x413e21fb,0x0ffdc04e,0xff8837fc,0x2001911d,0x203b07ff,0xffb85ffd,
    0x05f88002,0xfb0003f9,0x17fec003,0x01b6012e,0x43fa0354,0x8bbee1fe,
    0xb87e205c,0xfffb83ff,0x3e24effa,0xaeb801df,0xf302ecce,0xffff70df,
    0xacfc8dff,0xfb805da9,0x207ff81f,0x00cdfffc,0xa81fff10,0x0bffea07,
    0x20007ffb,0x000d302d,0x3f2001a6,0xf003deff,0x10136007,0xe983f9bb,
    0xd803deff,0x03dffd33,0x00a20186,0xb8804c08,0xf32cfffe,0x0bffffff,
    0x00135551,0xfc887fee,0x02200cff,0x55555100,0x2a0effdc,0x532ffffd,
    0x30005555,0x06000180,0x80018800,0x00150009,0x01310022,0x00000cc0,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x2eeeda80,0x441deec8,0x2a02cdca,0x10bdeeed,
    0xc9807ddb,0x1cceeeee,0xeeeeee98,0x20eeeeee,0xeeeeeee8,0x3b262eee,
    0x4c01ceee,0x20ceeeec,0x262deed9,0xcceeeeec,0x9873001b,0x89ceeeec,
    0x12ceeedb,0x93007ddb,0xdddddddd,0x77764cdd,0x25eeeeee,0xcdeeeec9,
    0x3bb6601a,0x3bbbb262,0x9501bcee,0x0ffff443,0x87fc4354,0x3fe204fb,
    0x04ffa83f,0xf939ffb0,0xb1cf98bf,0x83f669ff,0x7ff41cf9,0x00bffd06,
    0xf506ffd8,0x99fff409,0x7400dffc,0x90dffb03,0x9ff50fff,0x32ffec00,
    0x9ffb0fd5,0x7f43fd4c,0x0efe99bf,0xfd05ff90,0x5ffd317f,0x7e47ff88,
    0x42c40eff,0x03fe25fc,0xf982fff8,0x9ff9004f,0x8d317fec,0x50744ffd,
    0x03fff709,0x90013ff6,0x05d10bff,0x7ec3ffd8,0x40ff603f,0xffb85ffc,
    0x004ff986,0x43c17ff2,0x87884ffc,0x3fa23ffe,0x82ffa81f,0x3fe63ffd,
    0x3237fc0f,0x8585fffb,0x07fe0fff,0xf982fff8,0x9ff9004f,0x85337fdc,
    0x705c4ffd,0x04fff881,0x90013ff2,0x01e98bff,0x7dc3ffd8,0xdffd886f,
    0x427fe41a,0xff986ffb,0x17ff2004,0x93ff2121,0x0fff6161,0xfa81fff3,
    0x43ffc82f,0x05cc2fff,0x21fffe52,0x88dffd85,0x17ffc07f,0x6dc67fcc,
    0x5c9ff902,0x7fec06ff,0x7fec0404,0x13ff200f,0x54bff900,0x7ffb000d,
    0xda86ffa8,0x7e42cdff,0x86ffb84f,0x55514ff9,0x44bff905,0x49ff9013,
    0x0fff6025,0xfa87fff1,0x23ffc82f,0x9000fff8,0x0b17ffec,0x3dbdfff5,
    0x982fff80,0x2ffdddff,0x3f64ffc8,0x27fec03f,0x0bffea00,0x8009ff90,
    0x00d95ffc,0x7e43ffd8,0x07ff502f,0x3ee13ff2,0x24ff986f,0xbff903fa,
    0x9ff901dc,0x7ffb01e2,0xfa8bffd0,0x23ffc82f,0x92004ffc,0x0b0fffe8,
    0x00bfffea,0x3e60bffe,0x3217fe6f,0xcffb8cff,0x027fec00,0x00bffd10,
    0xc8009ff9,0x03ffddff,0x5ccfff60,0x3fea05ff,0x99dff903,0x30dffb99,
    0x901649ff,0x07f95dff,0x3fe6ffe4,0x360fff60,0x17fd47ff,0x7f6f7fe4,
    0x2624000d,0x2058efff,0x402ffffd,0xff982fff,0x3f21bfe4,0x001ccdff,
    0x64009ffb,0xfc801fff,0x7fe4004f,0x001fffdf,0xfffddffb,0x03ffa805,
    0x5555dff9,0xff30dffb,0xff900b29,0x6407fd9d,0x407ecdff,0xffc83ffd,
    0x6417fd47,0xdffbacff,0x4243fd82,0x985dfffa,0x0fffe8ee,0x260bffe0,
    0x21ffa4ff,0xb0004ffc,0x3e6009ff,0xff9004ff,0xdffc8009,0x800fffe8,
    0xfff8bffd,0x81ffd405,0xffb84ffc,0xfccff986,0x92ffe403,0x8a7fe407,
    0x41ffec07,0x7fd46ffc,0x223ffc82,0x3fea1fff,0x7fe4120f,0xd13fe85f,
    0x3fe045ff,0x24ff981f,0x4ffc87fe,0x09ffb000,0x441bffa0,0x5027fe42,
    0x3e6bff90,0xffd805ff,0x405fff53,0xff903ffa,0x30dff709,0x03ffdfff,
    0x0712ffe4,0x08b27fe4,0x7ec1ffec,0x417fd45f,0x7fe43ffc,0x487ffa25,
    0xf117ff60,0xa9ffdc5f,0x203ffe6f,0x1ffa4ff9,0x40013ff2,0xfb804ffd,
    0xc85902ff,0x321a04ff,0x3ffea5ff,0x91ffec04,0x3ea01fff,0x09ff903f,
    0xff30dff7,0x640dff39,0xf900c5ff,0xd8b10c9f,0x7ffc43ff,0x6417fd41,
    0x3ffdc3ff,0xe8806c68,0x222ff85f,0x21ff90ff,0x9ff307ff,0x7fe43ff4,
    0x9ffb0004,0x05fff880,0x4ffd83f1,0xbff90d30,0x203fffc8,0x7ff43ffd,
    0x539ff306,0xfb85ffc8,0x94ff986f,0x3ff209ff,0x13ff2005,0x0fff6264,
    0xff509ff7,0xd87ff905,0x7c4983ff,0x2e17e202,0xf997ea4f,0x2a09ff14,
    0x21ffe4ff,0xd0005ffc,0xffd809ff,0x40ffb80f,0x5f985ffd,0x7c45ffc8,
    0xffb02fff,0x04fff989,0xffb09ff7,0x50dff70b,0x0fff49ff,0xb002ffe4,
    0x3fc98bff,0xff527ff4,0x20ffee09,0x3fee4ffd,0xfb50b986,0x216a017d,
    0x0cfbceb8,0x827f66d4,0xfb9fffd8,0xfff733ff,0x3260037f,0xa81bffff,
    0xeeeeffff,0x3ee67fff,0xffeeefff,0x3ffee64f,0xfffd50cf,0x3ff2619f,
    0x3fee0bff,0xf73000cf,0xf7137fff,0x3a259fff,0xfffb1eff,0x3fffee65,
    0x3fee601b,0xffffeeff,0xdffff932,0x3a6037dd,0xff931eff,0x07bdfdff,
    0x80100006,0x00188018,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xec980000,0x3aa00eee,
    0xdb30bdee,0x36617ddd,0xddb70cee,0xeec985bd,0x9dddd932,0x0000cc03,
    0x20395154,0xc980adca,0x2aaa23ac,0x15455551,0x2aaaaa00,0x551aaaa8,
    0x42aaaaa5,0xdca80aaa,0x0665400b,0x8815b950,0x25951aaa,0xdb89aaa8,
    0x4d5554c2,0x2aa21aa9,0x30bdb89a,0xffb005b9,0x7fff409f,0x87fff982,
    0xfffa83f9,0x3f60be04,0x004d805f,0x225ff910,0xb9fc87ff,0x74c7e46f,
    0xf99ffe45,0x02ffea6f,0x547ffe20,0x443a26ff,0x217c3fff,0x03ff73e8,
    0x20fe63f2,0x40ee8afd,0x6ffacffa,0x3f7b7fee,0xf37fdc2f,0x9bbff505,
    0xffdb7bff,0x7ffcc803,0x03fff730,0x990fffee,0xa83ffec0,0x009ff904,
    0xfda8009b,0x546ff83e,0x7c5ff16f,0xffa8b11f,0xd711bfe3,0xffb805bf,
    0x1cc3ffe3,0x86893fee,0x09ff15fc,0x50ff4df5,0x2637dcff,0x23eaceff,
    0xbff0eff9,0x0755ffd0,0x7ec3bfe6,0x809ff33f,0xd82fff8c,0x3601fff8,
    0x80b30fff,0x0e83fff8,0xb009ff90,0xbfd71009,0x3205cc03,0xff83724f,
    0x3ffa833f,0xfd981bfe,0x6ff880be,0x0327ffd3,0xc82a9ffe,0x3a17fe5f,
    0xfc8ffa4f,0xf887fea6,0x93fe607f,0xeff986ff,0xd93fe605,0x09ff10ff,
    0x46ffc8c8,0x403fff58,0x0d8dfff8,0x20fffc80,0x13ff202b,0xfc981360,
    0x3e0000bf,0x7ffe404f,0x3e3ffa84,0xffb8806f,0x64ffec0d,0x2e096ff8,
    0x9840b3ff,0xeff85ffd,0x3fe4ffee,0xf88ffea5,0x93fe605f,0x7ffb06ff,
    0xf927fcc0,0x017fe21f,0x43fff119,0x803fff1b,0x000efffa,0x1629fff1,
    0xca89ff90,0xccceeccc,0x019ff51c,0x02ffc400,0x517fff62,0x037fc7ff,
    0x542ffd98,0x9ffb4cff,0x27bfe205,0x3e7b6203,0x02ffc45f,0x7fd4bff1,
    0x9813fe24,0x41bfe4ff,0x3e607ff8,0x443ff24f,0xd86405ff,0xfff965ff,
    0x0fffd801,0x23ffee00,0x27fe401c,0x3ffbbbae,0x2e22eeee,0xd0002dfe,
    0xfc8401ff,0x8ffea0ff,0x7f5406ff,0x4bffe02d,0x7ec07ffa,0x1ff300ef,
    0x3ffa17fe,0xfa97fa00,0x813fe21f,0x1bfe4ff9,0x981fff44,0x43ff24ff,
    0x86405ff8,0x23a8fffa,0xf8801fff,0x7f4006ff,0xffc804ef,0x2004d804,
    0xc80bffd9,0x227fdc4f,0x21ffa961,0x1bfe3ff9,0x0073ff22,0x09ff1ff2,
    0x3604ff98,0x90bff16f,0x3ee285ff,0xff11fee6,0xf27fcc09,0x3fe360df,
    0x24ff980f,0xbff10ffc,0x3ffa0c80,0x00fffc5b,0x01ffff54,0x001fff50,
    0x9b009ff9,0xbfd71000,0xf11ffe23,0x7c1959ff,0xbff11fe2,0x6ccfffb3,
    0x26000bef,0x400fe44f,0x3ffe01fe,0x542effdd,0x444acfff,0x989f90ff,
    0x3fea04ff,0x4b21ffe4,0xff985ffc,0x7c47ff65,0xf706406f,0x1fff89ff,
    0xfffdac40,0x1fff1000,0x009ff900,0xda80009b,0x3ea17f63,0x6f741eff,
    0xfffb81fc,0x3b93fff9,0x260f4000,0xb80b5007,0x03ff74ff,0x301bfff5,
    0xd889f7bf,0xfd882fff,0x3fffb9ef,0xff919fb3,0x7ffec49f,0xd8dfff9a,
    0x83202fff,0x7fc0fff8,0x4436201f,0xf1006fff,0xff9001ff,0x0009b009,
    0x01100200,0x02200c42,0x40200000,0x00002000,0x18800980,0x00000000,
    0x20000000,0x7c2fe40c,0x507601ff,0xf1007fff,0xff9001ff,0x00055009,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x441d8000,
    0x17ffc42f,0xfffb05d8,0x1fff9803,0x005ffd80,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x4c000000,0x2a243efc,0x70befffd,
    0x75417ffd,0xa883ffff,0x80adfffe,0x1bffffb9,0x2aaaaaaa,0x00000002,
    0x26666200,0x00999999,0x00804cc4,0xeeeeea84,0xdddddd12,0x0007dddd,
    0x00000000,0x00000000,0x00000000,0x00000000,0x266be200,0x06b83ffe,
    0x27ec0b90,0x91fd8bf6,0xffffffff,0x12fdc7ff,0xeffb89fd,0xffb8540b,
    0x77712fff,0x37777777,0x00000000,0x00000000,0x00000000,0x00000000,
    0x92200000,0x1fb06ffa,0x982ff980,0xbff11fff,0x44453fe6,0x88888888,
    0xe883ffe0,0x3f6eba27,0x2625bbdf,0x00009999,0x00000000,0x00000000,
    0x00000000,0x00000000,0x88400000,0x232a1fff,0x3760b75a,0x45ffd06d,
    0x07ff14ff,0x886fc800,0xeb88351e,0x000001df,0x00000000,0x00000000,
    0x00000000,0x00000000,0x32000000,0x57fec4ff,0x7d40ffdc,0x83a03f98,
    0x5c7fa2fe,0xeeeeeeee,0x110042ee,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x26000000,0xc9980fff,0x24e8099d,0x5c5880fc,
    0xbb99f20f,0xbbbbbbbb,0x00000001,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x047ffb00,0x2e07ab72,0x9313e20f,0x02d46981,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x4dff5000,0x3e2ff248,0x7dc1fc47,0x14428060,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xfff88000,0x864c9911,
    0x1300c44b,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xffdbfff9,0x00000007,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_bold_23_usascii_x[95]={ 0,1,1,0,0,1,0,1,0,0,1,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0, };
static signed short stb__times_bold_23_usascii_y[95]={ 18,3,3,3,3,3,3,3,3,3,3,5,14,12,
14,3,3,3,3,3,3,4,3,4,4,3,8,8,6,8,6,3,3,3,4,3,4,4,4,3,4,4,4,4,
4,4,4,3,4,3,4,3,4,4,4,4,4,4,4,4,3,4,3,21,3,8,4,8,4,8,3,8,4,3,
3,4,4,8,8,8,8,8,8,8,5,8,8,8,8,8,8,3,3,3,10, };
static unsigned short stb__times_bold_23_usascii_w[95]={ 0,5,9,10,10,19,17,4,7,7,9,12,5,7,
5,6,10,8,10,10,10,10,10,10,10,10,5,5,12,12,12,9,19,15,14,14,15,13,13,16,16,8,11,17,
14,20,15,16,13,16,16,10,14,15,15,21,15,15,14,5,6,5,10,12,5,11,11,9,12,9,9,11,11,6,
7,12,6,17,11,10,11,12,9,8,7,11,11,15,11,11,9,7,2,7,12, };
static unsigned short stb__times_bold_23_usascii_h[95]={ 0,16,8,16,17,16,16,8,20,20,9,12,8,3,
5,16,16,15,15,16,15,15,16,15,15,16,11,14,11,6,11,16,20,15,14,16,14,14,14,16,14,14,15,14,
14,14,15,16,14,19,14,16,14,15,15,15,14,14,14,18,16,18,9,2,5,11,15,11,15,11,15,15,14,15,
20,14,14,10,10,11,15,15,10,11,14,11,11,11,10,15,10,20,20,20,5, };
static unsigned short stb__times_bold_23_usascii_s[95]={ 251,121,100,148,93,159,179,251,28,1,73,
63,94,148,123,1,8,81,90,19,113,134,229,240,17,137,89,250,76,110,126,
127,44,158,235,197,212,198,184,212,154,54,28,111,96,1,1,104,52,64,129,
240,66,224,208,186,22,38,81,87,30,81,83,156,129,167,69,95,44,179,124,
101,40,37,36,171,228,234,210,189,174,145,200,105,146,114,155,139,222,57,63,
20,17,9,135, };
static unsigned short stb__times_bold_23_usascii_t[95]={ 10,1,68,1,1,1,1,1,1,1,68,
55,68,68,68,22,22,22,22,22,22,22,1,22,39,1,55,39,55,68,55,
1,1,22,39,1,39,39,39,1,39,55,39,39,39,55,39,1,39,1,39,
1,39,22,22,22,55,55,39,1,22,1,68,68,68,55,22,55,22,55,22,
22,39,22,1,39,39,55,55,55,22,22,55,55,39,55,55,55,55,22,68,
1,1,1,68, };
static unsigned short stb__times_bold_23_usascii_a[95]={ 83,111,184,166,166,332,277,92,
111,111,166,189,83,111,83,92,166,166,166,166,166,166,166,166,
166,166,111,111,189,189,189,166,309,240,222,240,240,222,203,258,
258,129,166,258,222,314,240,258,203,258,240,185,222,240,240,332,
240,240,222,111,92,111,193,166,111,166,185,147,185,147,111,166,
185,92,111,185,92,277,185,166,185,185,147,129,111,185,166,240,
166,166,147,131,73,131,173, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_23_usascii_BITMAP_HEIGHT or STB_FONT_times_bold_23_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_23_usascii(stb_fontchar font[STB_FONT_times_bold_23_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_23_usascii_BITMAP_HEIGHT][STB_FONT_times_bold_23_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_23_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_23_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_23_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_23_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_23_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_23_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_23_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_23_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_23_usascii_s[i] + stb__times_bold_23_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_23_usascii_t[i] + stb__times_bold_23_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_23_usascii_x[i];
            font[i].y0 = stb__times_bold_23_usascii_y[i];
            font[i].x1 = stb__times_bold_23_usascii_x[i] + stb__times_bold_23_usascii_w[i];
            font[i].y1 = stb__times_bold_23_usascii_y[i] + stb__times_bold_23_usascii_h[i];
            font[i].advance_int = (stb__times_bold_23_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_23_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_23_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_23_usascii_s[i] + stb__times_bold_23_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_23_usascii_t[i] + stb__times_bold_23_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_23_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_23_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_23_usascii_x[i] + stb__times_bold_23_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_23_usascii_y[i] + stb__times_bold_23_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_bold_23_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_23_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_23_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_23_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_23_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_23_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_23_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_23_usascii_LINE_SPACING
#endif

