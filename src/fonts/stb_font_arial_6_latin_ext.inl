// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_6_latin_ext_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_6_latin_ext'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_6_latin_ext_BITMAP_WIDTH         256
#define STB_FONT_arial_6_latin_ext_BITMAP_HEIGHT         40
#define STB_FONT_arial_6_latin_ext_BITMAP_HEIGHT_POW2    64

#define STB_FONT_arial_6_latin_ext_FIRST_CHAR            32
#define STB_FONT_arial_6_latin_ext_NUM_CHARS            560

#define STB_FONT_arial_6_latin_ext_LINE_SPACING           4

static unsigned int stb__arial_6_latin_ext_pixels[]={
    0x18830c00,0x82614088,0x850660b8,0x1a82a218,0x530aa154,0x8110c298,
    0x5c2eee1a,0x710b8a20,0x25114298,0x2ee238a2,0x10a19841,0x4198a287,
    0xa8528a1a,0x98013062,0x98550661,0x30a88662,0x0c285c35,0x20b94795,
    0x5dc45062,0x205dc4a3,0x89426209,0x944a1312,0x44a25098,0x544a2509,
    0xba89451b,0x89437511,0x217710bb,0x5c42619b,0xb154c71b,0x84c6ee21,
    0x1c265532,0x7294ae61,0x25294a35,0x1ca29452,0x514a28e5,0x228dd4a2,
    0x4c514352,0x52a99451,0x6426e287,0x383770e0,0x2a72a98a,0x0c811ce4,
    0x294a394a,0x28e52947,0x38e51ca5,0x71ce3947,0x211c239c,0x11c2619b,
    0x471c738e,0x22739470,0x50dd2a72,0x0aa9ce15,0x1ca38155,0x8e3944e5,
    0x8ae51c72,0x14715ca3,0x4e728e33,0x23b8e38b,0x70aae1c2,0x5739caaa,
    0x811ca271,0x5139ce3a,0x4e5139ce,0x739ca273,0x44e71ca2,0x38e39c72,
    0x5dc23847,0xa54e130b,0x4e38eaa3,0x3aa9454a,0x54eee213,0x9564b12c,
    0x27296258,0x5cca2728,0x7289c70c,0x9cea289c,0x289c5728,0x55289c66,
    0x2e38ae27,0x4e1c1519,0xa9d4ce1a,0x2a37953a,0x5d437730,0x5dcceae5,
    0x2ee67570,0x2ee67570,0x2ee67570,0x2e637710,0x2237710b,0x5dcce1bb,
    0x0b837731,0x5ceee217,0x88a65550,0x54a333bb,0x0447072a,0x98a61c53,
    0x985dcca2,0x0a8660bb,0x4c2a1773,0x265770bb,0xbb98e0bb,0x2ee61770,
    0x8aa65550,0x414111c3,0x53ab9c28,0x13800055,0x00000005,0x00000000,
    0x08000000,0x10404002,0x00000000,0x20000000,0x20000000,0x08100040,
    0x00008000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x86605c00,0xa80b83b9,
    0x2a0a14c1,0x770c41aa,0x19932e17,0x85305144,0x44110a61,0x18a170bb,
    0x3885d430,0x5c5550d4,0x0c130a60,0x705c5706,0x450e2175,0x2a830a38,
    0xb82a2151,0x8a282a20,0x528a1512,0xa8350170,0x14350660,0xba88ee6a,
    0x87501551,0x42ee23b9,0x2ea663b9,0x531728a2,0x8dd44afa,0xa8871bb8,
    0x8dd4451b,0xb8471ba8,0x75128a53,0x85d42ea3,0xca9ce50b,0x250b8723,
    0x8e17770c,0xa9c70bbb,0x2a61750b,0x52ee1451,0x5b994a52,0x38e5294a,
    0x28e714a5,0x143338a9,0x2e628667,0x2382aae5,0x5d417113,0x84705545,
    0x0dcea0aa,0x2249b947,0x4239c72b,0x238e71c3,0x5c239c73,0x239472a8,
    0x42ea3553,0x871ce53b,0x21929dc2,0x45c7298b,0x0ba9c729,0x239ce175,
    0x2739de43,0x4e714c73,0x4e738e73,0xb8b8eaa3,0x470ee239,0x8a61c3b8,
    0x9c70b88b,0x144e0bba,0x108e1711,0x32aaa171,0x713944e1,0xa9ce3954,
    0x738e5774,0x99c738e1,0x9caa71bb,0x2389c728,0x455171aa,0x8b82a1c3,
    0x926e172a,0x45c93719,0x2aa3550b,0x438e5551,0x55ceae2a,0x73ab8713,
    0x5cae6e75,0x2617073a,0x43838573,0x570e2383,0x86ee2177,0xbba8e00a,
    0x2ea37730,0x4755710b,0x50a20bb9,0x5c46ee25,0x5dc42a3b,0x46ee2511,
    0x10661bb8,0xb885dcc5,0x0aa7001b,0x82a9c038,0x0e270713,0x2ee38000,
    0x077b0002,0x48038000,0x1c383819,0x00077b1c,0x40000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x35000000,0xb82f2214,0x22130aa0,0x2537510a,0x350506e2,
    0x1705c1a8,0x183530dc,0x05409850,0xa9854433,0x20544e62,0x43882e1a,
    0x5c555143,0x28795510,0x215546a2,0x82605419,0x260d40a8,0x446aa0c0,
    0x14287109,0x4c432985,0x50e21510,0x73142628,0x42a4cccb,0xa99d44a2,
    0x51c72c71,0x5c141595,0x8d4caaa0,0x45570bbb,0x46a63bc9,0x23530bbb,
    0x23530bbb,0x54cea673,0x5ddc7531,0x994a3530,0x8d4ce71a,0x8d4c3732,
    0x5c7531a9,0xb85550bb,0x4170aaa0,0x17770bbb,0x94a529ce,0x1ac94a52,
    0x31a98555,0x54c6a635,0x43863531,0x5ce66e29,0x2e55371a,0x471ce739,
    0x56d4c513,0xa98ea0e2,0x866e5573,0x826ae2aa,0x5c3372ab,0x55c3372a,
    0x39ce7552,0x39c71ce7,0x2738739c,0x0e1c89c3,0x371d5ce7,0x8ea1d4c3,
    0x371d43a9,0x5590cdc3,0x9ce739ce,0x5511ce73,0x4e739ce1,0x1539ce73,
    0x554c388e,0x94cdce71,0x225552ba,0x82ea61bb,0x50e1acab,0xaa9d5cb7,
    0x30a83372,0x95543599,0x5caaa19b,0x554aaa19,0x4aaa7552,0x5538e3aa,
    0x1554eae5,0x544aaa71,0x25550bda,0x9b85c2aa,0x5ba8eae1,0x25ba8eae,
    0x3866e19b,0x73ab9d5c,0x55ceae75,0x5546a2a2,0x4aaa5552,0x2a5552aa,
    0x201dec70,0x00028e73,0x89c38000,0x01777002,0x7701dd4e,0x02eee017,
    0x5dc00008,0x0000000b,0x17770000,0x4e0289c0,0x2e177728,0x000000bb,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x3710c811,0x43050130,0x42871098,
    0x81506a62,0x85442622,0xa98a1438,0x2098aa61,0x4a514519,0xbb88a332,
    0x5dc47733,0x14a63531,0x10cc3751,0x1a866155,0x35066143,0x1a98cc50,
    0x306a6353,0x43143503,0x15511bb8,0x28d4c6e6,0x71186e65,0x4190d417,
    0x701911b9,0x26281701,0x2a63531a,0x5c0e3531,0x9554aaa0,0x2a5552aa,
    0x22e5552a,0x23339ce1,0x528e0998,0x270a6215,0x71c1554a,0x20aa982e,
    0x75285ce3,0x51450a53,0xbbb85ddc,0xa8cc7530,0x1ce1552a,0x2282e02e,
    0xaba8470c,0x394c4e72,0x384c2ae7,0x271d4282,0x07509573,0x5570cc75,
    0xb955caae,0x3a85552a,0x99d4cea6,0x2a67533a,0x8e2e7533,0x887713aa,
    0x44a270b9,0xab8d4cc5,0x8e171138,0x0b988374,0x2653b9c7,0x8e38719a,
    0x19b866e3,0x26e331ce,0x21d4ce73,0x2863a83a,0x1ab9a54e,0x757388e7,
    0x208e29c2,0x2aa96ea3,0x2dd43955,0x53aa96ea,0x554aaa55,0x2a1c5552,
    0x55ceae5b,0x4eae7573,0x2e7573ab,0x2a0e383a,0x217730c8,0x950c9429,
    0x4c2eea37,0x545593cb,0x237710b8,0x35532a8b,0x5c71c70e,0xaa866e19,
    0x4aaa1773,0x543552a9,0x462dd45b,0x2677710a,0x2a5531aa,0x52aa852a,
    0x9c70ddcc,0x289c0028,0x0000144e,0x000a2700,0x07000000,0x00020000,
    0x27000010,0x1c70e02a,0xbb85ddc7,0x2000000b,0x0289c513,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x442b2aa0,0x71d446a1,0x05ddc177,0x640aa141,
    0x286aea61,0x21e5428a,0x8503941a,0x2a088aa2,0x2a388a18,0x151a82a1,
    0x5051aa98,0x0ba8544a,0x213146a5,0x473371a9,0x4617050b,0x2a3bc982,
    0x4c663531,0x5547771a,0x85c705c2,0x40292372,0x4ccce5b9,0x14572ada,
    0x2385c737,0x5c2e270b,0xb95ccae1,0x54eb271b,0x0e09c72a,0x8dcc5335,
    0x2ea173bb,0x509c0171,0x21c6ea37,0x21757142,0x385dc473,0x85d4aaa7,
    0x4e28a173,0x2aa77573,0x25141372,0x826ae1ab,0x38a5571c,0x87531cdc,
    0x253b8e3a,0x730e58ab,0x277114c3,0x3871acab,0x471c8aea,0x2472671c,
    0x4e71c98e,0x4e72acaa,0x21c884e4,0x4f6e2baa,0x71c173ab,0x71c38380,
    0x17371c38,0x233706aa,0x554e73ab,0x471c7571,0x253372aa,0x9c70ee73,
    0x86b32673,0x551caaa2,0x55c2e6e5,0x2e296ea3,0x475572a8,0x83895443,
    0x201c3803,0x2eee0bbb,0x4aee5950,0x4e01ce03,0x8715dc53,0x42e20cb9,
    0x8d647088,0x5dc22223,0x46b23592,0x01b8e1c3,0x1ce03150,0x4701c700,
    0x70cdce72,0x5d4e739c,0x2e0380a3,0x944e00bb,0xc8b954e1,0x3604aee2,
    0x00001c3b,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x85454000,0x23138a92,0x947951a9,0x2017770b,
    0xa8120bbb,0x450a833b,0x98a17772,0x2e17771a,0x4d46ea3b,0x98757529,
    0x44a63351,0x552b94a3,0x25319865,0x202a2532,0x8661352a,0x466773b9,
    0x4aa08860,0x386662b9,0x28446635,0x00055506,0x32000000,0x28e6e2e2,
    0x770e3845,0xb894c5c3,0x32446a70,0x5c405455,0x38e55370,0x43373847,
    0x7551c09b,0x3a855ce5,0x1553b962,0x0e71c2aa,0x53395c62,0x2a8cc6e6,
    0x4a15c479,0x20863119,0x2e6332a9,0x00182222,0x00000000,0x4c590000,
    0x21d44573,0xb8aae1c3,0x5dc72649,0x1c3751c1,0x99b95e43,0x85c39c72,
    0xc866e19b,0x4e19731a,0x2e33109b,0x92210819,0x38019ce3,0x23370010,
    0x00000099,0x00000000,0x00000000,0x290545c0,0x70a0dc0c,0x1c4e3538,
    0x118381c1,0x51c66045,0x791c2eee,0x01c2eee3,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__arial_6_latin_ext_x[560]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,
-1,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0, };
static signed short stb__arial_6_latin_ext_y[560]={ 4,0,0,0,-1,0,0,0,0,0,0,0,3,2,
3,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,1,0,1,0,1,0,1,0,0,
0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,0,0,0,0,
0,0,0,0,0,1,1,2,0,-1,0,0,0,0,0,1,0,1,3,0,0,1,0,0,0,1,-1,-1,-1,-1,
-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,0,0,0,0,
0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,
-1,0,-1,0,0,1,-1,0,-1,0,-1,0,-1,0,-1,0,0,0,-1,0,-1,0,-1,0,0,1,-1,0,-1,0,
-1,0,-1,0,0,-1,-1,-1,0,0,-1,0,-1,0,-1,0,0,0,-1,1,0,0,-1,0,0,0,1,-1,-1,0,
0,0,0,0,0,0,0,-1,0,0,1,-1,0,0,0,1,-1,0,-1,0,-1,0,0,1,-1,0,0,1,-1,0,
-1,0,-1,0,0,1,-1,0,0,0,-1,0,0,0,-1,0,-1,0,-1,0,-1,0,-1,0,0,1,-1,0,-1,0,
-1,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,
0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-2,-2,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0, };
static unsigned short stb__arial_6_latin_ext_w[560]={ 0,2,2,3,3,5,4,1,2,2,2,3,2,2,
2,2,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,6,5,4,4,4,4,4,4,4,2,3,4,
3,5,4,4,4,4,4,4,4,4,4,6,4,4,4,2,2,2,3,5,2,3,3,3,3,3,2,3,3,1,
2,3,1,5,3,3,3,3,2,3,2,3,3,4,3,3,3,2,1,2,3,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,2,3,3,3,4,
1,3,2,4,2,3,3,2,4,5,2,3,2,2,2,3,3,2,2,2,2,3,5,5,5,3,5,5,5,5,
5,5,6,4,4,4,4,4,2,2,3,2,5,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,3,
3,3,3,3,5,3,3,3,3,3,2,2,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
5,3,5,3,6,4,4,3,4,3,4,3,4,3,4,4,5,3,4,3,4,3,4,3,4,3,4,3,4,3,
4,3,4,3,4,3,4,3,4,3,3,3,3,3,3,3,2,2,2,1,4,3,3,3,4,3,3,3,2,3,
3,3,2,3,2,3,2,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,6,5,4,2,4,2,4,2,
4,3,4,3,4,3,4,3,4,2,4,3,4,2,4,3,4,3,4,3,4,3,4,3,4,4,6,4,4,3,
4,4,3,4,3,4,3,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,
4,4,4,4,4,4,4,4,4,4,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,3,3,3,4,
3,4,3,4,3,4,3,4,3,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,5,3,6,5,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4, };
static unsigned short stb__arial_6_latin_ext_h[560]={ 0,4,2,5,6,5,5,2,6,6,2,4,2,1,
1,5,5,4,4,5,4,5,5,4,5,5,3,4,4,2,4,4,6,4,4,5,4,4,4,5,4,4,5,4,
4,4,4,5,4,5,4,5,4,5,4,4,4,4,4,6,5,6,3,2,1,4,5,4,5,4,4,5,4,4,
6,4,4,3,3,4,5,5,3,4,5,4,3,3,3,5,3,6,6,6,2,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,6,5,4,4,
6,6,1,5,3,3,2,1,5,1,2,4,3,3,1,5,6,2,3,3,3,3,5,5,5,5,5,5,5,5,
5,5,4,6,5,5,5,5,5,5,5,5,4,5,6,6,6,6,6,4,5,6,6,6,6,5,4,5,5,5,
5,5,5,5,4,5,5,5,5,5,4,4,4,4,5,4,5,5,5,5,5,3,4,5,5,5,5,6,6,6,
5,5,5,5,6,5,6,5,6,5,6,5,6,5,5,5,4,5,5,5,5,5,5,5,6,5,5,5,6,6,
6,6,6,6,6,7,5,5,4,4,5,4,5,4,5,4,6,6,5,3,5,6,6,6,6,6,3,5,5,6,
6,4,4,4,4,4,4,5,4,6,5,5,4,4,5,5,6,5,6,5,6,5,5,4,5,4,6,5,5,4,
6,5,6,5,6,5,6,5,6,6,5,5,4,5,6,5,6,5,6,5,6,5,6,5,6,5,5,4,5,6,
5,5,4,5,4,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,4,4,6,4,4,4,
4,4,4,4,4,4,4,4,4,4,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,4,6,
5,6,5,6,6,6,6,6,6,6,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,6,7,5,5,6,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4, };
static unsigned short stb__arial_6_latin_ext_s[560]={ 9,224,169,182,196,227,11,198,78,14,185,
37,178,200,212,244,228,46,78,232,61,240,192,54,188,196,133,58,50,188,242,
18,38,218,209,247,70,82,87,218,65,75,184,27,238,232,227,142,41,127,32,
122,22,102,13,6,1,251,246,110,212,102,118,192,209,214,223,205,180,198,195,
106,184,182,84,174,254,101,129,161,203,87,126,146,215,138,122,96,111,107,92,
126,129,135,181,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,
95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,9,253,143,
132,81,76,163,227,203,152,115,107,165,200,223,215,172,30,139,144,206,236,55,
175,151,136,154,161,96,111,136,28,22,16,52,206,200,1,188,91,198,193,175,
170,167,164,160,157,24,147,86,106,81,73,59,41,117,101,45,170,165,91,123,
82,78,74,70,66,62,58,1,48,44,40,36,32,155,158,252,202,7,142,249,
245,241,237,233,147,14,219,215,211,207,159,151,147,187,183,177,173,16,163,17,
155,92,144,87,136,28,128,123,118,18,110,168,102,97,93,88,84,97,73,68,
64,64,113,105,223,121,131,138,5,19,15,165,45,1,10,245,119,236,115,180,
188,216,142,207,205,214,231,247,235,157,178,175,69,252,100,92,62,85,34,59,
137,55,96,124,119,170,133,158,140,74,114,6,28,64,159,148,49,145,7,50,
150,153,38,33,167,23,163,11,111,1,115,242,239,128,133,66,142,218,190,209,
186,200,199,191,203,183,212,175,219,224,71,231,155,240,249,88,5,104,194,108,
112,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,10,95,95,117,
95,95,95,95,95,95,95,95,95,95,95,95,95,32,128,95,95,95,95,95,
95,95,95,95,95,95,95,95,38,150,95,95,95,95,95,95,95,95,95,95,
95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,54,60,
50,178,79,171,69,132,59,55,50,46,41,37,32,28,95,95,95,95,95,95,
95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,
95,95,95,22,1,77,44,9,24,95,95,95,95,95,95,95,95,95,95,95,
95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,
95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,
95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,
95,95,95,95,95,95,95,95,95, };
static unsigned short stb__arial_6_latin_ext_t[560]={ 8,28,33,9,1,16,22,33,9,1,33,
33,33,33,33,22,22,33,33,22,33,22,22,33,22,22,33,33,33,33,28,
33,9,28,28,22,33,33,33,22,33,33,22,33,28,28,28,22,33,22,33,
22,33,22,33,33,33,28,28,1,22,1,33,33,33,28,16,28,22,28,28,
16,28,28,1,28,9,33,33,28,16,22,33,28,22,28,33,33,33,22,33,
1,1,1,33,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,8,16,1,
22,28,28,1,1,33,22,33,33,33,33,22,33,33,28,33,33,33,22,9,
33,33,33,33,33,22,22,22,22,22,22,22,22,22,22,28,9,16,16,22,
22,22,22,22,22,28,22,9,9,9,9,9,28,22,9,9,1,1,22,28,
22,22,22,22,22,22,22,28,22,22,22,22,22,28,28,22,28,22,28,16,
16,16,16,16,33,28,16,16,16,16,1,1,1,16,16,16,16,9,16,1,
16,1,16,1,16,9,16,16,16,28,16,16,16,16,16,16,16,1,16,16,
16,9,1,1,1,1,1,1,1,16,16,28,28,16,28,9,28,9,28,1,
1,9,33,9,1,1,1,1,1,33,9,9,9,1,28,28,28,28,28,28,
9,28,9,9,9,28,28,9,16,1,16,9,16,1,16,16,28,9,28,9,
9,9,28,9,9,9,9,9,9,9,9,1,1,9,9,28,9,1,9,1,
9,1,9,1,9,1,9,1,9,9,28,9,1,9,9,28,16,28,9,28,
28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,16,28,28,1,
28,28,28,28,28,28,28,28,28,28,28,28,28,16,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,16,28,28,28,28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,16,16,
16,28,1,9,1,16,1,1,1,1,1,1,1,1,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,
28,28,28,1,1,16,16,1,16,28,28,28,28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,28, };
static unsigned short stb__arial_6_latin_ext_a[560]={ 24,24,31,48,48,76,57,16,
29,29,33,50,24,29,24,24,48,48,48,48,48,48,48,48,
48,48,24,24,50,50,50,48,87,57,57,62,62,57,52,67,
62,24,43,57,48,72,62,67,57,67,62,57,52,62,57,81,
57,57,52,24,24,24,40,48,29,48,48,43,48,48,24,48,
48,19,19,43,19,72,48,48,48,48,29,43,24,48,43,62,
43,43,43,29,22,29,50,64,64,64,64,64,64,64,64,64,
64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,
64,64,64,64,64,64,64,64,24,29,48,48,48,48,22,48,
29,63,32,48,50,29,63,47,34,47,29,29,29,50,46,24,
29,29,31,48,72,72,72,52,57,57,57,57,57,57,86,62,
57,57,57,57,24,24,24,24,62,62,67,67,67,67,67,50,
67,62,62,62,62,57,57,52,48,48,48,48,48,48,76,43,
48,48,48,48,24,24,24,24,48,48,48,48,48,48,48,47,
52,48,48,48,48,43,48,43,57,48,57,48,57,48,62,43,
62,43,62,43,62,43,62,53,62,48,57,48,57,48,57,48,
57,48,57,48,67,48,67,48,67,48,67,48,62,48,62,48,
24,24,24,24,24,24,24,19,24,24,63,38,43,19,57,43,
43,48,19,48,19,48,25,48,29,48,19,62,48,62,48,62,
48,52,62,48,67,48,67,48,67,48,86,81,62,29,62,29,
62,29,57,43,57,43,57,43,57,43,52,24,52,32,52,24,
62,48,62,48,62,48,62,48,62,48,62,48,81,62,57,43,
57,52,43,52,43,52,43,19,64,64,64,64,64,64,64,64,
64,64,64,64,64,64,64,65,64,64,48,64,64,64,64,64,
64,64,64,64,64,64,64,64,74,56,64,64,64,64,64,64,
64,64,64,64,64,64,64,73,58,64,64,64,64,64,64,64,
64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,
64,64,64,64,64,57,48,24,19,67,48,62,48,62,48,62,
48,62,48,62,48,64,64,64,64,64,64,64,64,64,64,64,
64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,
64,64,57,48,86,76,67,52,64,64,64,64,64,64,64,64,
64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,
64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,
64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,
64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,
64,64,64,64,64,64,64,64, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_6_latin_ext_BITMAP_HEIGHT or STB_FONT_arial_6_latin_ext_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_6_latin_ext(stb_fontchar font[STB_FONT_arial_6_latin_ext_NUM_CHARS],
                unsigned char data[STB_FONT_arial_6_latin_ext_BITMAP_HEIGHT][STB_FONT_arial_6_latin_ext_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_6_latin_ext_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_6_latin_ext_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_6_latin_ext_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_6_latin_ext_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_6_latin_ext_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_6_latin_ext_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_6_latin_ext_s[i]) * recip_width;
            font[i].t0 = (stb__arial_6_latin_ext_t[i]) * recip_height;
            font[i].s1 = (stb__arial_6_latin_ext_s[i] + stb__arial_6_latin_ext_w[i]) * recip_width;
            font[i].t1 = (stb__arial_6_latin_ext_t[i] + stb__arial_6_latin_ext_h[i]) * recip_height;
            font[i].x0 = stb__arial_6_latin_ext_x[i];
            font[i].y0 = stb__arial_6_latin_ext_y[i];
            font[i].x1 = stb__arial_6_latin_ext_x[i] + stb__arial_6_latin_ext_w[i];
            font[i].y1 = stb__arial_6_latin_ext_y[i] + stb__arial_6_latin_ext_h[i];
            font[i].advance_int = (stb__arial_6_latin_ext_a[i]+8)>>4;
            font[i].s0f = (stb__arial_6_latin_ext_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_6_latin_ext_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_6_latin_ext_s[i] + stb__arial_6_latin_ext_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_6_latin_ext_t[i] + stb__arial_6_latin_ext_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_6_latin_ext_x[i] - 0.5f;
            font[i].y0f = stb__arial_6_latin_ext_y[i] - 0.5f;
            font[i].x1f = stb__arial_6_latin_ext_x[i] + stb__arial_6_latin_ext_w[i] + 0.5f;
            font[i].y1f = stb__arial_6_latin_ext_y[i] + stb__arial_6_latin_ext_h[i] + 0.5f;
            font[i].advance = stb__arial_6_latin_ext_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_6_latin_ext
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_6_latin_ext_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_6_latin_ext_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_6_latin_ext_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_6_latin_ext_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_6_latin_ext_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_6_latin_ext_LINE_SPACING
#endif

