// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_14_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_14_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_14_usascii_BITMAP_WIDTH         128
#define STB_FONT_times_14_usascii_BITMAP_HEIGHT         62
#define STB_FONT_times_14_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_times_14_usascii_FIRST_CHAR            32
#define STB_FONT_times_14_usascii_NUM_CHARS             95

#define STB_FONT_times_14_usascii_LINE_SPACING           9

static unsigned int stb__times_14_usascii_pixels[]={
    0x30501303,0x32a37020,0x3355300c,0xcc80b880,0x405c4003,0x06aaaa18,
    0x21450153,0x22018829,0x2120e01b,0x09818243,0x102e206c,0x32659105,
    0x20e541e1,0x643952c8,0x47b99d15,0x51381b0c,0x00e24e4c,0x2244032b,
    0x2e1a1c2c,0x2441b002,0x4c3c8310,0x326761e5,0x5cb50fa1,0xb9a1b835,
    0x4ee1a9c1,0x94a806a6,0x83b06c01,0x6442c3c3,0xaa8906c1,0x40fc453b,
    0x98d98f0f,0xf883f518,0x9b160950,0x6e6e5c91,0x1c562ea4,0x2a6afe60,
    0x706e2c82,0x2d834458,0xd864906c,0x3e83d451,0x7b839f0f,0x220e67d0,
    0x70a86e83,0x008e3570,0x641a27f3,0x05470544,0x3616416a,0x2692a530,
    0x79741ea2,0x3e60de88,0x70512e80,0x10edaa83,0x54039339,0xaab875b0,
    0x47701b8f,0x41a8e0a8,0x0d85905a,0x8ad47635,0x1f10be62,0xd077441e,
    0x2c0c7885,0x2b6a5b34,0x2a5102cb,0x7bb34cf4,0x38390e40,0x1641a22c,
    0x98e9c436,0xb899073c,0x1e4c41e4,0x2044b899,0x45534438,0x951c0153,
    0x93e67a9a,0x870762c0,0xd8590687,0x64ced4e0,0x795b9052,0x54c45478,
    0x215d5d43,0x5540dc5b,0x501ca239,0x3624ec41,0x45fe9bce,0xd0e16448,
    0xd8190350,0x01980660,0x4c781dd1,0x00203bbd,0x80200008,0x10101881,
    0x48709030,0x6c24a170,0x0a6214c0,0x307836e0,0x00000003,0x00000000,
    0x20a02602,0xa82ee301,0xaaa880cc,0x99098001,0x00000007,0x00000000,
    0x00000000,0x00000000,0x14c15c40,0x0351024c,0x2a202aa6,0x2aa65531,
    0x554c3530,0x14c05391,0x20337730,0x2a218ab9,0x4c337301,0x10aa61aa,
    0x2570b605,0xd5b03cc5,0xa8199b09,0xb13a3e84,0x81c54b90,0x12d8588c,
    0x911d88d7,0x362d4e29,0x584e8b51,0x445900a8,0x10788726,0x4c02e24c,
    0x22dcb705,0x41984b83,0x83d87258,0x4aa416c3,0xb0e344f1,0x55070907,
    0x8772cc5b,0x81502c8f,0x809e83ee,0x2a1f50f8,0xa8704b80,0x007c52a5,
    0x261003e2,0x6c086fc5,0x9a144483,0x45a96e2d,0x7dc2e99f,0x3e65d982,
    0xb9ec0eba,0x092e073d,0x52e1f10e,0xa965c47b,0xd3032007,0x8907b07f,
    0x22c9260a,0x54f16e5a,0x43a07a85,0x1d51325a,0x2e071d57,0x2a0ccb64,
    0x30f52ead,0x28803d4f,0x07b17ee0,0x592dc389,0x27897344,0x2e01b049,
    0x222d4b11,0x2019f0cf,0x7c40e04b,0x44f107e0,0x0881800f,0x483c87e2,
    0x164f30a2,0x373c1d9a,0x86c48120,0x1725d82b,0x0380ee26,0x3c46c839,
    0x1010a176,0x116a0e87,0x67640547,0x0eb660cd,0xaea8eaf6,0x02f3e609,
    0x8aa05393,0x404dc83a,0x5c06e618,0xdc84c9ad,0x441e82ab,0xcc83babe,
    0x2101c3ba,0x00010000,0x08000000,0x88002100,0x00200800,0x00201003,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x50000000,
    0x5154c155,0x441a9815,0x4c0930ca,0x4caaa1aa,0x886aa2aa,0x81262bba,
    0x0aaaaaa9,0x9aaa986e,0xaaa98100,0x98577501,0x85d83d9d,0x22c2ec0d,
    0x01e23748,0x7d4598db,0x0fcd0ea2,0x6ccdc0f1,0xb0262b9c,0x0b03d73b,
    0x2c1b93bb,0xe9af885b,0x5c1c3542,0x412a1c4e,0x170fc407,0xf10e2d70,
    0x2081e074,0x4990023d,0x9057dc4d,0x324997c9,0x3a16e782,0x3e2e02a2,
    0x82dc98e2,0x2d503917,0x41336029,0xd8f849bc,0x3220f604,0xf07d2641,
    0x4b97c990,0x8599e0b2,0xf99c125b,0x2f04a871,0x0133601a,0x802e05f1,
    0x0f603d1f,0x36f7216c,0x93b90f03,0x82d874cb,0x27e20ae7,0x47dc7029,
    0x2cf82543,0x2a007c40,0x5bddd06d,0x1ec0b278,0x7ce642d8,0x13990f00,
    0xf05b9f90,0x26640737,0x544ec870,0xf00d7f04,0x44e9c401,0x27893128,
    0x3207b02c,0xf05ba642,0x59080990,0x7f1002f0,0x2a2ec1c0,0x40991f04,
    0x449100f8,0x14c72e1f,0x07b02c9e,0x26c990b6,0x0099066c,0x400f10b2,
    0x887d300d,0xf307b624,0xf7019f15,0x7447d507,0x302f2a2f,0xf309d15f,
    0x264e881b,0x019f11ee,0x2600f74c,0x00bae0cd,0x00000004,0x00000000,
    0x00000000,0x00000000,0x55300000,0x3710aa63,0x22aaaaa8,0x35531aa9,
    0x554c6aa2,0x55530aaa,0x5554c355,0x711ca809,0x4055554c,0x1440301c,
    0x26035331,0x4055532a,0x16c12a5d,0x913a6672,0x23645c8b,0x2647514d,
    0xda9dd893,0x4288740e,0x544d98dd,0xc880f880,0xd83ed2a5,0x53202e46,
    0x410b6048,0x2e2640ea,0x11322dc4,0x8990225c,0xc83a5c6c,0x2e007e24,
    0x9ccb503e,0x22ecc3eb,0x24e6404b,0x0fc40b20,0xb712e264,0x497064c8,
    0x17cc4c81,0x89320e3a,0x06ac800f,0x6ab944b3,0x012e2d64,0x2c801db9,
    0x2b7209d0,0x22dc4daa,0x6dc3dadc,0xe84c86ba,0x764075c3,0x4c042ecc,
    0x20b305d1,0x16ae25d3,0xedcc8097,0x1ae0b200,0x2e25c4c8,0x4b852645,
    0x0be1320a,0xfb9320b1,0x93390fe1,0x54e0b30b,0x09716a76,0x201db4c8,
    0x900fcc2c,0x22dc4b89,0x9012e04c,0x02987a89,0x8e24d899,0x40f999b8,
    0x9d7c7059,0x90425c5a,0x16c076c9,0x264330fa,0x4c8b716e,0x643312e0,
    0x3b993624,0x547f1320,0xb3136120,0xd50fb920,0xe98cc4c8,0x447ff51e,
    0x3333f24e,0x23dd30ec,0x3db11ed9,0x3a207ba6,0x3a66caae,0x64c2dcbe,
    0xb97dd300,0xb10f5407,0x307b225f,0x7ec5225d,0xd999dd31,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x1c02a800,0x1ca80018,0x1c8a5491,0x4cb2632a,0x06554004,0x75106ea2,
    0x4c44aa81,0x5cc2881b,0x91b30cbb,0x5ec076e9,0x0e0b905e,0x11e8ae60,
    0x4d072783,0x0dd4151d,0x15877488,0x263d2c4d,0xc8d13853,0x2dc31bb9,
    0x2cc66c7e,0xba81f10c,0x15d40705,0x32782a5c,0x054c9641,0x32620aea,
    0x72540e64,0xc982fe29,0x1ee543aa,0x3b9e074c,0x441d00d1,0x36aaa59b,
    0x403952aa,0x327828e8,0x474cecc2,0xc8964c02,0x5c12a4a8,0x25d896a5,
    0x372f604a,0xb9e07a20,0x389301a3,0x2e20e0b3,0x2037200b,0x27d05b0f,
    0x85dc405c,0x8fc4954b,0x133b9e21,0x428fc472,0x11ec0c98,0x2034773c,
    0x70598543,0x4981ba80,0x819b7b90,0x2e60932b,0x0dbce982,0x595077ee,
    0x2e24ed47,0xeb8102ef,0x15f31caa,0x203f51bb,0x7f77640a,0x07300385,
    0x10008401,0x00000350,0x00001008,0x0d400000,0x0020b303,0x00000000,
    0x00000000,0x00000000,0x0bfffea0,0x8d980166,0x512eb30c,0x40819159,
    0x54088152,0x322bbbbb,0x54410020,0x2eeeee1a,0x0000001b,0x7c000000,
    0x0f457c19,0x3f30a732,0x0ee0f5e2,0x55022222,0x8a2732e6,0x0059930f,
    0x00000000,0x20f00000,0x413a0b27,0x3506d628,0x5dddd433,0x5d40842b,
    0x00000020,0x00000000,0x64f07800,0x1440eb82,0x4438e1ce,0x00000888,
    0x00000000,0x00000000,0xa8593c1e,0x150005b8,0x00000144,0x00000000,
    0x00000000,0x2be617cc,0x7c56a4d8,0x00000003,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_14_usascii_x[95]={ 0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,
-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,1,0,1,0, };
static signed short stb__times_14_usascii_y[95]={ 11,2,2,2,1,2,2,2,2,2,2,3,9,7,
9,2,2,2,2,2,2,2,2,2,2,2,5,5,3,5,3,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,13,2,5,2,5,2,5,2,5,2,2,
2,2,2,5,5,5,5,5,5,5,3,5,5,5,5,5,5,2,2,2,6, };
static unsigned short stb__times_14_usascii_w[95]={ 0,2,5,7,6,11,10,2,4,4,6,7,3,4,
3,4,6,4,6,6,6,6,6,6,6,6,2,3,7,7,7,6,12,9,8,8,9,8,7,9,9,4,5,10,
8,11,10,9,7,9,9,7,8,9,9,12,9,9,8,3,4,4,6,8,3,6,7,6,7,6,6,7,7,4,
4,7,4,10,7,6,7,7,5,5,4,7,7,10,7,7,6,5,2,4,7, };
static unsigned short stb__times_14_usascii_h[95]={ 0,10,5,10,11,10,10,5,12,12,6,8,5,2,
3,10,10,9,9,10,9,10,10,10,10,10,7,9,7,4,7,10,12,9,9,10,9,9,9,10,9,9,10,9,
9,9,10,10,9,12,9,10,9,10,10,10,9,9,9,12,10,12,5,1,3,7,10,7,10,7,9,9,9,9,
12,9,9,6,6,7,9,9,6,7,9,7,7,7,6,9,6,12,12,12,3, };
static unsigned short stb__times_14_usascii_s[95]={ 127,79,49,96,62,104,116,125,20,1,100,
15,45,86,82,57,70,120,1,85,8,92,99,82,89,6,125,106,23,62,58,
32,35,110,97,23,79,70,62,13,47,57,119,22,13,1,11,69,102,48,87,
39,73,47,1,106,47,37,38,58,1,30,55,91,70,66,77,73,62,93,22,
57,65,82,25,29,33,114,29,80,118,110,23,87,97,39,31,47,37,89,107,
14,11,6,74, };
static unsigned short stb__times_14_usascii_t[95]={ 1,1,54,1,1,1,1,35,1,1,46,
46,54,54,54,14,13,35,46,13,46,13,13,1,1,14,13,35,46,54,46,
14,1,35,35,14,35,35,35,14,35,35,13,35,36,36,25,1,25,1,25,
14,25,14,25,13,25,25,35,1,14,1,54,54,54,46,13,46,13,46,25,
25,25,25,1,25,35,46,54,46,25,25,54,46,25,46,46,46,54,35,46,
1,1,1,54, };
static unsigned short stb__times_14_usascii_a[95]={ 51,67,83,101,101,168,157,36,
67,67,101,114,51,67,51,56,101,101,101,101,101,101,101,101,
101,101,56,56,114,114,114,90,186,146,135,135,146,124,112,146,
146,67,79,146,124,180,146,146,112,146,135,112,124,146,146,191,
146,146,124,67,56,67,95,101,67,90,101,90,101,90,67,101,
101,56,56,101,56,157,101,101,101,101,67,79,56,101,101,146,
101,101,90,97,40,97,109, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_14_usascii_BITMAP_HEIGHT or STB_FONT_times_14_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_14_usascii(stb_fontchar font[STB_FONT_times_14_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_14_usascii_BITMAP_HEIGHT][STB_FONT_times_14_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_14_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_14_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_14_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_14_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_14_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_14_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_14_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_14_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_14_usascii_s[i] + stb__times_14_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_14_usascii_t[i] + stb__times_14_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_14_usascii_x[i];
            font[i].y0 = stb__times_14_usascii_y[i];
            font[i].x1 = stb__times_14_usascii_x[i] + stb__times_14_usascii_w[i];
            font[i].y1 = stb__times_14_usascii_y[i] + stb__times_14_usascii_h[i];
            font[i].advance_int = (stb__times_14_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_14_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_14_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_14_usascii_s[i] + stb__times_14_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_14_usascii_t[i] + stb__times_14_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_14_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_14_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_14_usascii_x[i] + stb__times_14_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_14_usascii_y[i] + stb__times_14_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_14_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_14_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_14_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_14_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_14_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_14_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_14_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_14_usascii_LINE_SPACING
#endif

