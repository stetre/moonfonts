// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_33_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_33_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_33_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_33_usascii_BITMAP_HEIGHT        100
#define STB_FONT_courier_33_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_33_usascii_FIRST_CHAR            32
#define STB_FONT_courier_33_usascii_NUM_CHARS             95

#define STB_FONT_courier_33_usascii_LINE_SPACING          16

static unsigned int stb__courier_33_usascii_pixels[]={
    0x40005440,0x0700600c,0x0000bd80,0x032b7100,0x700000e4,0x53bbba05,
    0x5105eeed,0x4004c003,0x26000000,0x00044000,0x00440060,0x5d442aaa,
    0x2a2001bd,0x0fe60000,0x1e80f500,0xd9800f60,0x1a678806,0x20ba3bf0,
    0xfb7100fa,0x07d4059d,0xa98d55fc,0x77ec46ca,0x3ff202ff,0x0bf301ef,
    0x0017dd71,0x05ffffb1,0x02dfffb8,0x9fffd910,0x7fffd930,0xf33fdd30,
    0x01fd979d,0x40005f70,0x1ec003f9,0x07a80ba0,0x3cc01e80,0x3a3540d5,
    0xbd305e82,0x409f9537,0x5400f84f,0x5c433a26,0x711ee82f,0xd0df505f,
    0x3e202d45,0x209f932e,0x2fc88cfc,0x8856fd40,0xb8857e41,0x0ff3e05e,
    0x3ee0075c,0x07220002,0xb300f980,0xe8335dff,0x20264003,0x4c81aa69,
    0x207ee174,0x0dd103fa,0x801f03f2,0x35c1726a,0x03ee03aa,0xd8398df5,
    0x7cc17a00,0x7c40fcc2,0x3007f700,0x40fe201b,0x035c02ff,0x00000726,
    0x3ba09b00,0x44fec99b,0x0264006a,0x3205b9aa,0x41ba1744,0x41f4403e,
    0x2007c3f8,0x2201f16a,0x3f80fa0f,0x20722fcc,0x403f103a,0xb7036c4e,
    0x00003f30,0x005f82e4,0x0000003d,0xb80f8800,0x5d09f106,0x2a026400,
    0x44c812e5,0x2e0be62e,0xb01f5006,0xb5400f8d,0xfa96c05b,0xbf31ae01,
    0x500d83a8,0x1fc6b80d,0x04e81f10,0xf8354000,0x00079003,0x55555540,
    0x05c801aa,0x5c0d405d,0x70132006,0x8990264b,0x0fc1f22e,0x5f507d00,
    0x65aa007c,0x3dcba603,0x09f11ea0,0xf102cc3d,0x07e26c01,0x003543b0,
    0x1f827400,0xaa98b700,0xee9800aa,0x05eeeeee,0x01f80fc4,0x32005f00,
    0x07926404,0x6f8ba264,0x2dc00788,0x801f27cc,0xfc885d6a,0x880b92ff,
    0x2613e20f,0x2080cedc,0xe83f104e,0x09717403,0x01fb8000,0xb132007f,
    0x0005fddd,0x05c80b70,0x2dc00172,0xeea84b80,0xeeefeeff,0x44ba1ec3,
    0x4006a85f,0x07cbf06a,0xd10fdaa0,0x0f65b17b,0x407f07e0,0x263ec980,
    0x09d712de,0xb27dc0d9,0x801e64c5,0x201efca9,0x805d005f,0x5b80002e,
    0xe8807e20,0x3e2001be,0x4c0fa801,0xceaadeaa,0xd0be21aa,0x16e13e65,
    0x9be0f300,0x1fb5400f,0x0f65b1b2,0x007f07e0,0x22059d93,0x304fffff,
    0x4b7d503f,0xfccfe88f,0x7ff5400e,0x2017fc03,0x002e806b,0x1ae05b80,
    0x1effed40,0xfd802e40,0x40f45b04,0xf52e84fc,0x9800b507,0x007cfb07,
    0x87d0fdaa,0x3f007b2d,0x9d9503f8,0x97df9003,0x33ee03df,0x26a9fb89,
    0x3620ce9f,0x09d51006,0xfc81fe7c,0x0002e801,0x00be05b8,0x803bae60,
    0x3ed800f8,0x5c0fc5d0,0x7f52e85f,0x5b800f30,0x2007cfb0,0x21ec3f6a,
    0x3f007b2d,0x33b622e8,0x20376001,0xffb501fa,0x5ee92e39,0x44007f10,
    0xdd33f05d,0x003ddb9b,0x2e0000ba,0x0000d505,0x404d80b9,0x1f0f407a,
    0x4cba17c0,0x000f884f,0x1f37c132,0x543f6a80,0x0264b60e,0x181903e6,
    0x4c1cec88,0x1017601f,0x007ec790,0x0f8800bb,0x2f2e61f8,0x00174002,
    0x03e82dc0,0x200f8800,0x113200f9,0xfdddfddb,0x43c81bdd,0x360bf12e,
    0x105f1004,0x2a007cbf,0xcdfd83d6,0x7b80b74e,0x263d1000,0xf501ae2d,
    0x25c3d000,0x36001aa0,0x00001f82,0x2e0000ba,0x1b807a85,0x36007cc0,
    0x2aa13204,0xaafbabfb,0xf1744c82,0x2003e60d,0x7c9f305c,0x82db5400,
    0x0f54dcb8,0x390006d8,0x10132588,0x07dc001f,0x005b80b5,0x001f83d8,
    0x0000ba00,0x200fa16e,0x4026c06d,0x409900f9,0x9901e678,0x403f22e8,
    0x03ee00ec,0x801f0fd4,0xf800996a,0x4000fe02,0x03ee1b06,0x3e2007b8,
    0x5d007c42,0x3f03f000,0x01740000,0x3e62dc00,0x0adfd800,0x74003f2a,
    0x3cc09903,0x744c80d3,0xfd80fe22,0xb00fe442,0xb5400f8d,0x8364006a,
    0x402b887a,0x0fe2680d,0xbd3004f8,0x13cc16e0,0xf05d8017,0x17400003,
    0x362dc000,0xfb55b004,0x4003dffd,0x4c09907a,0x89901aa7,0x2e036c2e,
    0x00dfeeff,0x801f0fe6,0x8800ba6a,0x20bea0cf,0x12601ffe,0x11cfa877,
    0xc9810dd7,0x896ec03f,0x05fec4fb,0xed883b62,0x2003eeef,0x9be99998,
    0x5c000999,0x40003e65,0xd0000bf8,0x35409905,0x744c80b5,0x26017d42,
    0xfc800adf,0x9aa007c0,0xb10702fa,0x3605ffdf,0x675c01ff,0xefe980be,
    0xfdfd04ff,0xf91003bf,0x36a09ffd,0x40cffeff,0x2aaaaaa8,0xfffff100,
    0x0bffffff,0x01325b80,0x40005d00,0x2a01e86b,0x8d3016e5,0x2a05e82e,
    0x2a0abbef,0x03e13e24,0xbdfb8d50,0x2a205fca,0x000d4401,0x026a6003,
    0x40001530,0x3530009a,0x00000001,0x89ec0000,0x1740001f,0x754be000,
    0x0992dc06,0x20ba5dd0,0xeffb80f9,0x3ffffecd,0x337e03ee,0x0db9952c,
    0x0017bd93,0x00000000,0x00000000,0x00000000,0x22000000,0x0000b92f,
    0x6b80005d,0x54730057,0x02e75002,0x880c40dc,0x9901a819,0x3332e799,
    0x22220003,0x08888888,0x26666662,0x99999999,0x00000019,0x00000000,
    0x00000000,0x0019b660,0x00001700,0x00000005,0x00000000,0xa8000000,
    0xffffffff,0xfffb6fff,0xffffffff,0x005fffff,0x00000000,0x00000000,
    0xeed98000,0x0000dfee,0x00000000,0x00000000,0x00000000,0x33260000,
    0xcccccccc,0x0000003c,0x00000000,0x00000000,0x2aa20000,0x00001aaa,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x37b95100,0xb980d54c,0x55510acd,
    0x980d5544,0x6c000aaa,0x400003ee,0x0001eee9,0x3bbbbbb2,0x000001ee,
    0x00000013,0xddddb000,0x00bddddd,0xb8000000,0x13bae0ee,0x0002e000,
    0x3f6f3bee,0xf90bdf95,0xf33fd97b,0x3bff23dd,0x07dfdd05,0x404da980,
    0x402cfec9,0x20001faa,0xaaaaaacd,0x00bae602,0x0f7ffed4,0x5bdfd910,
    0xfeca880e,0xabf871ce,0x7baaaaaa,0x7bfd9510,0x3ffb661c,0xf7f1003e,
    0x00365441,0x32000fc0,0x4ded881e,0x9f503db0,0x2201aa0f,0x1320001f,
    0xdb9acfc8,0x000fc01f,0x644007b0,0xa802fdfe,0x07fb51cf,0xfb539df5,
    0x9dd103fb,0x3fbfb735,0x21aa007c,0xfda9bdf9,0x59fd0fae,0x801dfb53,
    0x0d501f5c,0x4003f000,0x27ec00fa,0xff3007d4,0x16e01740,0x36099000,
    0x401f700e,0x0f60001f,0x5d0adb80,0xf301fa80,0xf881fc43,0x102f441f,
    0x6c0043fb,0xf5017443,0x74407e1f,0x07c3e604,0x7c000354,0x200f6001,
    0x802e84f8,0xf01aa07c,0x84c80003,0x075400eb,0x360001f8,0x01740003,
    0x5cbd0136,0xd10fd407,0x003f100b,0x00fa21f8,0x7007c3f2,0x0f8fa01f,
    0x530006a8,0x555559f5,0xd001f815,0xf5001f09,0x0b702e80,0xc82b3260,
    0xe8017c44,0x6dcc3f04,0x001ec02b,0x00700ba0,0x7401ecd5,0x1c003aa0,
    0x0d51aa00,0x44003e20,0x07c6a81f,0x37b95354,0x777f7640,0x222eeeee,
    0xf1132007,0xd701e600,0xdf5007e0,0x1329fb79,0x834c00d7,0xdbcee89f,
    0x517b00ee,0x3a001799,0x26a80002,0x04c8004c,0xb1320000,0x10004005,
    0x0f85d01f,0xbdfe8ea8,0x01f803fe,0x274007e0,0x03d4007c,0x501ae174,
    0x99bb105f,0x07c003c8,0xfc81f5fc,0xddfffd80,0x02e803ff,0x3e64d800,
    0x000f4002,0x0f83f000,0x0b700000,0xf501f0b7,0x805f307f,0x00f6001f,
    0x00fa13e2,0xf1ae01f6,0x200fcc05,0x001744fe,0x00ffe07a,0x883750d9,
    0x017402fb,0x3ea1ae00,0x03c401bd,0x88f30000,0xd8800007,0x7c0fc41f,
    0x3203fa80,0x3000fc05,0x84fd801f,0x1fea00fa,0x406b9740,0x44f9804c,
    0x41ec001f,0x02e8806f,0x5d007d40,0x00fdc000,0x839dfdb5,0x20000078,
    0x0003c44c,0xb01bf930,0x1aa03e09,0x01f80f30,0x6c417e40,0x03db04de,
    0x2e00f7f5,0x01e805d6,0x001e89d0,0x801fc16c,0x02e8004c,0x7d4000ba,
    0x3f2a2001,0xaa981e22,0xe800aaaa,0x00003c42,0x03e603bb,0x2035407c,
    0x000fc079,0x7ee677dc,0x6fdc0995,0x0799fecc,0xf101b7a0,0x0f626c00,
    0x05f01d00,0x360016e0,0x2000ba03,0x2a0001fb,0x76403e1f,0x401efeee,
    0x000f8879,0x67407b00,0xaf999999,0x1e603540,0x220003f0,0x1320acca,
    0x21379710,0x0bee0079,0x26c003e0,0x07880132,0x012e005f,0x02e80f60,
    0x0000fdc0,0x4003d264,0xf05b801f,0x06a00005,0xfffffff8,0x03546fff,
    0x003f01e6,0x00132000,0x1aa00798,0x4e800ec0,0x5c8007cc,0x0f6007f0,
    0x2e80ba00,0x9807f200,0x1ecb7004,0x5d003f00,0x00001720,0x5407c000,
    0x3e03cc06,0x99000001,0x002d4000,0x016e005d,0x013613ea,0x07fc07e2,
    0x30007e20,0x8017401f,0x0fd401fc,0x01f32740,0x1f1007e0,0x5400be20,
    0x1f000002,0x07980d50,0x8000026c,0x0fa0004c,0xd1003540,0x427fc405,
    0x0fa203f8,0x26c05ff8,0x04d805d1,0x07640174,0x2a02fd40,0x4007642f,
    0x202d401f,0x0fdc01fa,0x80005e4c,0x4c06a80f,0x4c17dc07,0x4c8001fc,
    0x00ed8800,0xf88005d0,0x9dcafa84,0x2606fcc0,0xb3f3104e,0xb86e981b,
    0x0774c1df,0x1db00ba0,0x19df5280,0x3f209d50,0x01fc880b,0x67d401ec,
    0x440f6cc0,0x22005fff,0x2e60af99,0x9fa8809e,0x3bbfae00,0xb1001dff,
    0x209dffdd,0x0dfeeeec,0xdfdddd70,0x7ec4005b,0xff92efee,0xfddfb10d,
    0x3ffe607b,0x7ffddf91,0x7f7fec40,0xd333304f,0x75c13337,0x99999999,
    0x3bf2b37a,0x4c02ffee,0xcffeeffe,0x3000f801,0x1bffdffd,0x002fffc0,
    0x2adffffd,0x7cc6ffff,0xa8807fff,0xaa88001a,0x5502aaaa,0xa9803555,
    0x01aaaaaa,0x00015300,0x00002a62,0xa8800353,0xffff9009,0x21ffffff,
    0xfffffffc,0x53107fff,0x4c400135,0x000009aa,0x800d4c40,0x000002a8,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x2399bd93,0x544cccca,0xd10ccccc,
    0x880003dd,0xcccccccc,0xeeeed83c,0x33332a01,0x400acccc,0xccccccc8,
    0xccc981bc,0xcccc81cc,0x0799913c,0x43333326,0xb801ccc8,0x666643cc,
    0x2a00cccc,0x5c3ccccc,0x33324ccc,0xcccccccc,0x999951cc,0x99995019,
    0x66665c19,0x07333260,0xbacef880,0x9bf953cc,0xbeecc987,0x000beaa0,
    0xf9999710,0x5530799b,0x6e4c05d5,0xffdccccf,0x33f32203,0x0dffcccc,
    0x07333f22,0x44bbb32e,0xc981ffcc,0xf910ceec,0xdef980dd,0x677665c3,
    0x372600bc,0x7e5c2ccf,0x33337e3e,0xeccccdfc,0x199bf952,0x19bf9950,
    0x305e7ed4,0x40019fb9,0x003e004c,0x002e80f2,0x8005b000,0x206a802e,
    0x00f804ea,0x00f88bd5,0x36fc0f20,0x7d741320,0x00f73201,0x0d500097,
    0x40fc2f44,0x26c2d82e,0xd500f880,0x44007980,0x003e000f,0x002e80f2,
    0x8005b000,0x406a802e,0x007c01fa,0x000f87f1,0x1f4fc0f6,0x32ba0990,
    0x07b3f105,0x6a8004b8,0x07e09d10,0xd30b60ba,0x6a81ae00,0x26003cc0,
    0x4007c007,0x000ba03c,0x20016c00,0x806a802e,0x2007c03e,0x3ea0f45d,
    0x53f02e85,0x7413201f,0xb5b80f8a,0x8004b807,0x203f986a,0x2d82e81f,
    0x02e802e8,0x00f301aa,0x555f9551,0x003e0555,0x4c2e80f2,0xb0002aaa,
    0x802e8005,0x402e806a,0x362dc00f,0x0fc3f642,0x3209b1f8,0x21365d04,
    0x4b807b2e,0x7d46a800,0x1740fc02,0x202dc16c,0x01aa00f9,0xddd700f3,
    0x3ddddddf,0x079001f0,0x3bff6174,0x02d8001e,0x35401740,0x03e01ea0,
    0x743d87b0,0xf807c1ea,0x09903f11,0x9aa3ccba,0x0025c03d,0x005f5354,
    0x0260ba05,0x04c803e2,0x01e60354,0x0f800f30,0x0ba03c80,0xd80007f5,
    0x40174002,0x05f9106a,0x07dc01f0,0x4c8f8932,0x321f81e2,0x45d04c85,
    0x03d8f62e,0xb540025c,0x740004fb,0xf01ec002,0x999ea803,0x007a9999,
    0x03e003cc,0x22e80f20,0xd80002fb,0x40174002,0xfedcccfa,0x881f000c,
    0x25b82fda,0x034cd55b,0x2642e83f,0x7cdaa2e8,0x09700f60,0xf7d9d500,
    0x0ba0003d,0x1aa0d500,0x3ffffea0,0x4007ffff,0x007c0079,0x325d01e4,
    0x4004401e,0x0174002d,0x7e6667d4,0x7fffc005,0xd500cfff,0x16a1f1ec,
    0x907d41f8,0x93d0ba09,0x25c03d89,0x8877d400,0x2e8000fd,0x3d81f800,
    0x3cc06a80,0xf001e600,0x74079001,0x4b800eda,0x74002d80,0xe986a802,
    0x266be005,0x3e798009,0xf02dcf61,0x82649b03,0x20ff5c2e,0x2025c03d,
    0x5c07d438,0x002e8006,0x007c44c8,0x01e60354,0x1f800f30,0x3fa03d80,
    0x04c801fd,0x174002d8,0x5d883540,0x10001f00,0x32b71e6f,0x3e607e04,
    0x10ba0990,0xb807b0bf,0x1aa35404,0x174003e8,0x16e3cc00,0x1e603540,
    0xd800f300,0x3a02f802,0x4c803f54,0x74002e80,0x2206a802,0x000f803e,
    0x798b91f0,0xc80fc07b,0x00ba0995,0x025c03d8,0x4c0d51aa,0x00ba000f,
    0x005d1740,0x00f301aa,0x25c00798,0x2e803e60,0x04c807ea,0x3a0007cc,
    0x4c06a802,0x0007c00f,0x9f82e9e8,0x4407e02e,0x05d04caf,0x12e01ec0,
    0x406a8d50,0x00ba003e,0x0079adc0,0x00f301aa,0x7c400798,0x5d013601,
    0x1d701fa8,0x74002ec0,0xc806a802,0x80007c05,0xecc80fbd,0xea807e01,
    0x4005d04c,0x2025c03d,0x2a03546a,0x000ba006,0x002647c4,0x007980d5,
    0x7d4003cc,0x20077442,0x901fb82e,0x07e4417f,0x26017400,0xf10099eb,
    0x9af99817,0xdd900099,0x4c03faa0,0x9fd009af,0x40137d30,0x4c40cd99,
    0x99999dc9,0x3ae66b99,0x035f0099,0x337d3331,0x1fcc8001,0x013d7300,
    0x44013f53,0x9999fa99,0x77f54009,0x26200dff,0x19fc882e,0xdfeefea8,
    0x99998800,0x909999be,0x40bfffff,0xfff30ffa,0x200dffff,0x0ff104fc,
    0x03fffff2,0xfff713e6,0xfff903ff,0x3ffe21ff,0xffffffff,0xffff96ff,
    0x13ff20bf,0xfffffff9,0x37cc001f,0xfffffa80,0x1ffffee0,0xffffffd8,
    0x51006fff,0xfff88015,0x3ffffc82,0x20015510,0xfffffff9,0x0005ffff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x4066664c,0x32a3ccca,0xcccccccc,0x9950cccc,0x99999999,
    0x66654599,0x200acccc,0xa80cccc9,0x332a3ccc,0x1bcccccc,0x99999930,
    0x66547999,0xcccccccc,0xcccccc80,0x80150003,0x00b80018,0x1b9cc000,
    0x88054000,0x2203cdca,0x555302aa,0xc9866620,0xdf9503df,0x667ee4c7,
    0xfccccccc,0x999fb931,0x49d99999,0xccccdfc9,0xfc980dfd,0xdfca80bd,
    0x333f7263,0x40dfeccc,0xccccccea,0x333266dc,0x03cccdfc,0x1fbf9997,
    0x82ffe800,0x01ffffd9,0x200005d0,0x1bf73fd8,0x45ffd000,0xfdbdefe9,
    0x86eeb80f,0xfd07eee8,0xa80d90df,0x200d500f,0x6403541f,0x3f201f84,
    0x6b80d700,0x5d981aa0,0x013a02d4,0x1f10005d,0x7fd4007b,0x550ce86f,
    0x00017400,0xb1033f22,0x3ea0019f,0x402626ff,0x101a604c,0x03fff10f,
    0x00fcc13a,0x507e00d5,0x3f09900d,0x13605c80,0x0d500fc4,0x816a2f88,
    0x002e806c,0x400d55b8,0x3cc4fff8,0x000ba000,0x4c01dfb8,0xff8803fd,
    0x03e2004f,0x21e2034c,0x3e205ffa,0x2a01f442,0x6a81f006,0x01f84b80,
    0x1f8817c4,0x035404d8,0x260b51ec,0x002e800f,0x8007e2e8,0x005b82b8,
    0x54001740,0x754002ee,0x015c402e,0x06981740,0x0ffec3c4,0x05d83ea0,
    0x808186a8,0x4044186a,0x206a801f,0x2007546b,0x262e806a,0xd003e883,
    0x64798005,0x0f300004,0x2002e800,0x40003fe9,0x30001dfb,0x5d359975,
    0x0f101a60,0x3ae00bff,0x6a800eb8,0x86a802e8,0x801f802e,0xf8a74078,
    0x6406a802,0x400bb007,0x2264002e,0x36000079,0x00ba0003,0x00033f62,
    0x0067e440,0xccdefd88,0x0d302ffd,0x07fcc788,0x003fbb00,0x3a6667aa,
    0x999ea802,0x01f802e9,0x4fc401f0,0x33d5004d,0x01db7533,0x74001f50,
    0x740fc002,0x1f500002,0xfffffd80,0x1fffffff,0x00001df7,0x100ffa20,
    0x817401bf,0x2e3c4069,0x27cc004f,0xfffff500,0xfff5005f,0x3f005fff,
    0xf7007e00,0x3fea001f,0x05ffffff,0x74002f88,0x5c1a6002,0x81998805,
    0x854c5efb,0xbe999998,0x7dc19999,0x4400000d,0x06c803fd,0x80d302e8,
    0x00076478,0x54007f76,0x6a802e86,0x01f802e8,0x07d003f0,0xc9883540,
    0x0013a02e,0x04c800ba,0xffe801f1,0x17c46e44,0x02e805db,0x0019f910,
    0x80cfc880,0x200ba1a8,0x980f302e,0x32000447,0xd5001f76,0x0d5003b0,
    0x003f003d,0x00ba00f1,0x0fa806a8,0x5d0006b8,0x77777c00,0x2203feee,
    0x50fc0fff,0xd003f11d,0x3fd98005,0x03bf7000,0x04c9fffc,0x1e80bfa2,
    0x8000ff50,0x201760fa,0x1aa0006a,0x400fc140,0x005d005a,0x43d80354,
    0x407901f9,0x55d5002e,0x0d755555,0x1a61ffdc,0x7401af36,0x5dd50002,
    0x00bbaa00,0x3e2dfff5,0x5f6fd442,0x260db809,0x0009fcfc,0x04e82f88,
    0xd5000354,0x03f07e00,0x0ba009b0,0xb7006a80,0x80f203e8,0x005b002e,
    0x21bf603d,0x177c40f9,0x40002e80,0xfd301efb,0x3ffe2007,0x3ffbfee3,
    0x109ffd1e,0x11bffdfb,0x9d0009ff,0x6a80be20,0x401aa000,0x2e00fc1f,
    0x005d000e,0x23c80354,0xd01e405c,0x001f1005,0x207fe099,0x007c83f8,
    0x220000ba,0x9fb10dfc,0x10350001,0x20001355,0x000009a8,0x00fa80d9,
    0x354000d5,0x00fc1f80,0x174003f5,0xf500d500,0x79003ea3,0x2dc01740,
    0x7d40f880,0xfa8bae04,0x01d801ce,0x75b62000,0x0000000c,0x00000000,
    0x22035f71,0x75cc1ed9,0x73001999,0x3333333d,0x57cc3f33,0x1feb9999,
    0x9be99980,0x27ae6009,0xfca99999,0x26666fe2,0x263d9999,0x999be999,
    0x804df4c0,0x2a0be998,0x777dc00e,0x002ff99f,0x00000000,0x00000000,
    0x7fec0000,0xfffe82ff,0xfffff91f,0xffc809ff,0xffffffff,0xfff91fff,
    0x015bffff,0xffffff90,0xfff901ff,0x9dffffff,0xffffff83,0xf93fffff,
    0xffffffff,0x3ffff21f,0xffffc80f,0xaa88000f,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x42f36e60,0x2b36ea00,0x9b951000,
    0x5554c015,0x02aaa600,0x115ee5cc,0x55555544,0x2aa22aaa,0x2e22cb88,
    0x2aaa601c,0x882aaa81,0x55cc0aaa,0x0d5554c0,0x30555554,0x0dedd455,
    0x66440b00,0x00b3322c,0x23eee880,0x88888888,0x35008888,0x7d4001dc,
    0x6dffdbdf,0xecbded88,0x77fd403f,0xe882ffec,0xdd103eef,0x9bf907df,
    0x54d7dfd9,0xeeeeeeef,0x3f3fae7f,0xcee8cfcd,0xbdff904f,0x41efee98,
    0xfb11feec,0x7f743fbb,0x7f74c4ee,0x23bb63ef,0x04febded,0x7ffc0788,
    0xd80fffe2,0xa9fffc01,0xffffffff,0x7c6fffff,0x00bd13ff,0x6f981fc4,
    0x4e9827cc,0xb8817f70,0x4007b03f,0x880de80f,0x981aa7fc,0x263fe82f,
    0x403e24ff,0x017602fa,0xa833ea7a,0x2e802e84,0xf309df50,0x7c078805,
    0x0bffa1ff,0xfd007fe4,0x4444445f,0x08888888,0xd137ffd4,0x80d5001b,
    0x2201f46a,0x201fcc2f,0x985b81fa,0x02e43cc0,0x260d53f4,0xbd09d02f,
    0x17cc05b0,0x6f4017a2,0x01ae002f,0x027d40d5,0x1e2088b9,0xb07fec11,
    0x91f503ff,0x007fec0d,0x0fffe000,0x0be201b6,0xa8035c10,0x5e8036c7,
    0x22fcc798,0x400fc45b,0x1f440469,0xb05b03d0,0xd12f9807,0x00ff400b,
    0x07b00fc0,0xd1e60354,0xb51f35bf,0x2e3fe4bf,0xd0fcc0ff,0x001ff209,
    0x0500d400,0x06af7ee0,0x83e003c8,0x20f3001f,0x791fae0f,0x20000698,
    0x40f404e8,0x9803d82d,0x74004ebf,0x20b70002,0x01aa00f9,0xffd730f3,
    0x6fb837df,0x0fa23fd4,0x4df707f1,0xeeeeeeea,0x05eeeeee,0x65cc0000,
    0x1741dffe,0x3fe25d00,0xffffffff,0x22e80fff,0x707a2eae,0x2ec0000b,
    0x416c0f40,0x0df5003d,0x20003d00,0x404c80f8,0x203cc06a,0x17ea05fd,
    0x305d8df3,0x225fa83f,0xaaaaaaaa,0x301aaaaa,0x88000015,0x00ba3fca,
    0x266be1e8,0x99999999,0x5de69901,0x05b81f15,0x200d9000,0x3d82d81e,
    0x03ece880,0x90000f40,0x5401f889,0xf703cc06,0x0fe205f3,0x0075c9f1,
    0x027c41f7,0xeefd8000,0x40001881,0x200990fa,0x000fa0f8,0xf8addaa0,
    0x00698698,0xd000ec80,0x07b05b03,0x09d14e88,0x30000f40,0x5402dc1f,
    0xf983cc06,0x40601f51,0x0a002609,0x2000006e,0xe88bee5d,0x3a003e03,
    0xd9001f53,0x880006b8,0x25d745d7,0x70000fc4,0x3d02e01f,0x407b05b0,
    0x027443f9,0x6c0001e8,0x1aa00ba3,0x913a0f30,0x0000000d,0x58800000,
    0x05ebcf98,0x87e601fc,0x407cc05d,0x7c05005d,0x81eedc7b,0x1f4c00eb,
    0x20f403f5,0x3d82d81e,0x3a207f30,0x0001e804,0x5006ab54,0x0707980d,
    0x0000000e,0x80000000,0xff801dc8,0x445e980c,0x02fc81ee,0xf7103dd1,
    0x2227ec0d,0x0bf601ff,0xbf997f22,0xe9999999,0x7b02fa61,0x7d40cd81,
    0xdf99809c,0x4df4ccc0,0x74001999,0xeb9803db,0x09fa8809,0x00000000,
    0x00000000,0xfd9e8000,0x204ffeef,0x1efeeffb,0xfeeffb80,0x17dc02ef,
    0x7fdc03ec,0x641dffee,0xffffffff,0xffff71ff,0x3f60ffd8,0xbffff50f,
    0x26ffff98,0xfffffffa,0x2e001fff,0x7fcc00ff,0xfffe86ff,0x00000004,
    0x00000000,0x4c400000,0x530009aa,0x55300015,0x00000003,0x00026aa6,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__courier_33_usascii_x[95]={ 0,6,3,2,3,2,3,6,8,4,0,2,4,2,
6,3,3,3,2,2,3,2,3,3,3,3,6,4,0,1,0,0,3,0,1,1,2,1,2,1,1,3,2,1,
1,0,0,0,2,1,1,2,2,1,0,0,1,1,3,0,0,0,3,1,6,2,0,2,1,1,3,1,1,2,
2,2,2,0,1,2,0,1,2,2,2,1,0,0,1,2,3,0,8,0,2, };
static signed short stb__courier_33_usascii_y[95]={ 24,5,6,4,4,5,8,6,6,6,6,8,19,14,
20,4,5,5,5,5,6,6,5,6,5,5,11,11,8,12,8,6,5,7,7,6,7,7,7,6,7,7,7,7,
7,7,7,6,7,6,7,6,7,7,7,7,7,7,7,6,4,6,5,30,5,11,6,11,6,11,6,11,6,5,
5,6,6,11,11,11,11,11,11,11,7,11,11,11,11,11,11,6,6,6,13, };
static unsigned short stb__courier_33_usascii_w[95]={ 0,5,11,13,12,13,12,5,6,6,11,14,7,13,
5,12,12,12,12,13,11,13,12,11,12,12,5,7,14,16,14,11,11,18,15,15,15,15,15,16,16,12,16,16,
15,18,17,15,14,16,17,13,14,16,18,17,16,16,12,5,11,5,12,18,6,14,16,14,16,15,13,16,16,13,
10,15,13,18,15,14,16,16,14,13,14,15,17,17,16,15,12,6,2,6,13, };
static unsigned short stb__courier_33_usascii_h[95]={ 0,20,9,22,23,20,17,9,22,22,11,16,10,3,
5,23,20,19,19,20,18,19,20,19,20,20,14,17,16,7,16,19,21,17,17,19,17,17,17,19,17,17,18,17,
17,17,17,19,17,22,17,19,17,18,17,17,17,17,17,22,23,22,9,2,5,14,19,14,19,14,18,19,18,19,
25,18,18,13,13,14,19,19,13,14,18,14,13,14,13,19,13,22,22,22,5, };
static unsigned short stb__courier_33_usascii_s[95]={ 253,149,189,57,25,155,152,214,81,105,177,
165,247,136,237,12,136,115,128,208,212,101,195,172,169,182,210,144,180,220,195,
200,124,125,83,184,50,34,18,155,234,112,48,183,167,148,130,68,97,88,79,
141,200,15,215,112,1,66,99,112,38,118,201,150,243,216,84,64,51,30,1,
18,224,239,1,32,65,92,161,15,222,1,128,1,241,231,143,46,111,35,79,
71,78,50,237, };
static unsigned short stb__courier_33_usascii_t[95]={ 1,1,84,1,1,1,66,84,1,1,84,
66,66,22,84,1,1,27,27,1,27,27,1,27,1,1,66,66,66,84,66,
27,1,66,66,27,66,66,66,27,47,66,47,47,47,47,47,27,47,1,47,
27,47,47,47,47,66,66,66,1,1,1,84,22,84,66,27,84,27,84,47,
27,27,1,1,47,47,84,84,84,1,27,84,84,27,66,84,84,84,27,84,
1,1,1,90, };
static unsigned short stb__courier_33_usascii_a[95]={ 280,280,280,280,280,280,280,280,
280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,
280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,
280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,
280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,
280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,
280,280,280,280,280,280,280, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_33_usascii_BITMAP_HEIGHT or STB_FONT_courier_33_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_33_usascii(stb_fontchar font[STB_FONT_courier_33_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_33_usascii_BITMAP_HEIGHT][STB_FONT_courier_33_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_33_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_33_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_33_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_33_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_33_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_33_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_33_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_33_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_33_usascii_s[i] + stb__courier_33_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_33_usascii_t[i] + stb__courier_33_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_33_usascii_x[i];
            font[i].y0 = stb__courier_33_usascii_y[i];
            font[i].x1 = stb__courier_33_usascii_x[i] + stb__courier_33_usascii_w[i];
            font[i].y1 = stb__courier_33_usascii_y[i] + stb__courier_33_usascii_h[i];
            font[i].advance_int = (stb__courier_33_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_33_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_33_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_33_usascii_s[i] + stb__courier_33_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_33_usascii_t[i] + stb__courier_33_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_33_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_33_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_33_usascii_x[i] + stb__courier_33_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_33_usascii_y[i] + stb__courier_33_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_33_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_33_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_33_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_33_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_33_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_33_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_33_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_33_usascii_LINE_SPACING
#endif

