// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_6_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_6_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_6_latin1_BITMAP_WIDTH         256
#define STB_FONT_courier_6_latin1_BITMAP_HEIGHT         20
#define STB_FONT_courier_6_latin1_BITMAP_HEIGHT_POW2    32

#define STB_FONT_courier_6_latin1_FIRST_CHAR            32
#define STB_FONT_courier_6_latin1_NUM_CHARS            224

#define STB_FONT_courier_6_latin1_LINE_SPACING           3

static unsigned int stb__courier_6_latin1_pixels[]={
    0x02000000,0x40802081,0x42204040,0x81000000,0x02040040,0x20408100,
    0x411004c0,0x40182209,0x82188220,0x00000021,0x00000008,0x44030020,
    0x88204130,0x188860c1,0x94222111,0x41826189,0x23506221,0xa8311098,
    0x26098260,0x84083060,0x510988a1,0x0c182621,0x0822a111,0x40c04a26,
    0x98545311,0x08613309,0xa8944c51,0x104c3110,0x41302208,0x22311040,
    0x88210619,0x98881041,0x22651328,0x42661332,0x08421099,0x46108c21,
    0x1118c631,0x446328c3,0x2318c618,0x26333199,0x0a233319,0x988cc421,
    0x46623311,0x22331198,0x22613108,0x33188212,0x10988c41,0x2308c217,
    0x82108108,0x10a88440,0x18c2a215,0x4c666333,0x22108319,0x10a21842,
    0x084230a2,0x42308421,0x894c4611,0x44653129,0x22231129,0x104c3111,
    0x09862611,0x88c44622,0x22211108,0x86621110,0x26513098,0x22651328,
    0x4a265132,0x22822189,0x4c131098,0x86661311,0x04cc2662,0x82621023,
    0x20431309,0x26315040,0x26198661,0x26233119,0x43310421,0x44cc3310,
    0x26213109,0x42661330,0x00000099,0x2a014400,0x00000a20,0x0000a500,
    0x41100000,0x2000000a,0x31184000,0x88544000,0x2601510a,0x26633319,
    0x14a35061,0x28c52821,0x00000005,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00100408,
    0x10004102,0x10440041,0x400c4004,0x02202020,0x30844000,0x10983180,
    0x80260982,0x40826208,0x04102220,0x82202080,0x08810608,0x08441821,
    0x40802620,0x22088600,0x11042660,0x46118423,0x88cc3310,0x21988c20,
    0x41086199,0x43051289,0x88821098,0x45710a20,0x21510418,0x88ccc188,
    0x084a2a09,0x44262313,0x2318a30a,0x2b886231,0x0a886204,0x89461886,
    0x30c3330a,0x23310842,0x08288611,0x44222311,0x18618221,0x80c31845,
    0x88ca61a8,0x84442209,0x19823098,0x0a853304,0x810c4331,0x45310999,
    0x102a6198,0x09810544,0x21988454,0x26531098,0x8c63131a,0x44626298,
    0x41b98218,0x18218140,0x22086223,0x30888208,0x444a2653,0x18440850,
    0x309884c3,0x22898218,0x8ccc1099,0x28cc1110,0x3104c331,0x30cc4226,
    0x2842a233,0x222942e2,0x84508a09,0x133314a2,0x884c42a2,0x1330510a,
    0x800144c0,0x802a2831,0x42a200a8,0x442e2198,0x1198a30a,0x402a2015,
    0x08981800,0x26233304,0x0420c220,0x00100400,0x00c08800,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x20000000,0x00000400,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x01100000,0x00000018,0x00002000,0x000c0820,
    0x11840000,0x1310c611,0x82098862,0x13022209,0x02008422,0x08208810,
    0x00040102,0x83310a8e,0x262504a0,0x99886660,0x40003510,0x2942628a,
    0x131998a2,0x1454a265,0x311a98a5,0x215104cc,0x0c313198,0x2898c213,
    0x98ccc666,0x09985119,0x86114131,0x0888c630,0x9984c131,0x51c350a0,
    0x4c422215,0x822a9822,0x984c4223,0x75081511,0x30818225,0x00000202,
    0x42620000,0x083511a8,0x54450a0c,0x08102221,0x198102a6,0x19894333,
    0x8a214c22,0x19884219,0x894cc666,0x21310a0a,0x4c06a231,0x01306660,
    0x33009984,0x20860043,0x00411040,0x00000000,0x44400000,0x4a051308,
    0x0cccaa22,0x44ca2615,0xa8854142,0x85443130,0x208a2618,0x22613318,
    0x31998661,0x33314a33,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_6_latin1_x[224]={ 0,1,0,0,0,0,0,1,1,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
1,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__courier_6_latin1_y[224]={ 4,0,0,0,0,0,1,0,0,0,0,1,3,2,
3,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,1,0,1,0,1,0,1,0,0,
0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,2,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,0,0,1,0,
0,0,0,0,0,1,2,2,0,0,0,0,0,0,0,1,0,2,3,0,0,1,0,0,0,1,-1,-1,-1,0,
0,-1,0,0,-1,-1,-1,0,-1,-1,-1,0,0,0,-1,-1,-1,0,0,1,0,-1,-1,-1,0,-1,0,0,0,0,
0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,
 };
static unsigned short stb__courier_6_latin1_w[224]={ 0,1,3,3,3,3,3,1,2,2,2,3,2,3,
1,3,3,3,3,3,3,3,3,3,3,3,1,2,3,3,3,2,3,4,3,3,3,3,3,3,3,3,4,4,
3,4,3,3,3,3,4,3,3,3,4,4,3,3,3,1,2,1,3,4,2,3,3,3,4,3,3,3,3,3,
3,4,3,4,3,3,3,4,3,3,3,3,4,4,3,4,3,2,1,2,3,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,1,3,3,3,3,
1,3,3,4,2,3,3,3,4,5,3,3,3,3,2,3,3,1,1,3,3,3,4,4,4,2,4,4,4,4,
4,4,4,3,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,4,
 };
static unsigned short stb__courier_6_latin1_h[224]={ 0,5,3,5,5,5,4,3,5,5,3,3,2,1,
2,5,5,4,4,5,4,5,5,5,5,5,4,4,3,2,3,5,5,4,4,5,4,4,4,5,4,4,5,4,
4,4,4,5,4,5,4,5,4,5,4,4,4,4,4,5,5,5,3,1,2,4,5,4,5,4,4,4,4,4,
5,4,4,3,3,4,4,4,3,4,5,4,3,4,3,4,3,5,5,5,1,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,4,4,3,4,
5,5,2,5,3,3,2,1,5,1,2,4,3,3,2,4,5,1,2,3,3,3,4,4,4,5,5,5,5,4,
4,5,4,5,5,5,5,4,5,5,5,4,4,4,6,6,6,5,5,3,5,6,6,6,5,5,4,5,5,5,
5,5,5,5,4,4,5,5,5,5,4,4,4,4,5,4,5,5,5,5,5,3,4,5,5,5,5,5,5,5,
 };
static unsigned short stb__courier_6_latin1_s[224]={ 255,37,172,162,14,18,10,180,22,25,190,
193,205,243,221,28,102,49,77,154,73,146,150,6,50,54,253,70,145,201,136,
65,72,98,103,44,94,90,86,10,66,58,1,81,19,14,6,37,62,227,53,
191,45,183,40,35,31,27,23,177,174,246,132,238,223,245,207,237,32,229,225,
221,217,213,179,204,200,140,124,187,183,178,111,170,187,162,115,153,107,143,128,
41,236,238,228,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,255,58,107,
103,120,94,48,68,197,76,149,156,212,243,60,232,208,135,176,182,218,241,134,
226,216,168,160,164,89,111,116,253,248,97,241,98,121,231,126,223,219,215,211,
81,203,199,195,139,148,158,21,17,13,170,166,152,158,9,5,1,142,138,209,
130,126,122,118,114,110,106,195,249,93,89,85,81,233,85,191,131,60,174,51,
47,43,73,77,186,166,29,33,25,39,55,64,68, };
static unsigned short stb__courier_6_latin1_t[224]={ 7,1,14,1,8,8,14,14,8,7,14,
14,14,14,14,7,1,14,14,1,14,1,1,8,7,7,7,14,14,14,14,
7,7,14,14,7,14,14,14,8,14,14,8,14,14,14,14,7,14,1,14,
1,14,1,14,14,14,14,14,1,1,1,14,14,14,7,1,7,7,7,7,
7,7,7,1,7,7,14,14,7,7,7,14,7,1,7,14,7,14,7,14,
7,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,7,7,7,
7,14,7,7,7,14,7,14,14,14,14,7,14,14,7,14,14,14,7,1,
14,14,14,14,14,7,7,7,1,1,1,1,7,7,1,7,1,1,1,1,
7,1,1,1,7,7,7,1,1,1,1,1,14,1,1,1,1,1,1,7,
1,1,1,1,1,1,1,7,7,1,1,1,1,7,7,7,7,1,7,1,
1,1,1,1,14,7,1,1,1,1,1,1,1, };
static unsigned short stb__courier_6_latin1_a[224]={ 51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_6_latin1_BITMAP_HEIGHT or STB_FONT_courier_6_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_6_latin1(stb_fontchar font[STB_FONT_courier_6_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_courier_6_latin1_BITMAP_HEIGHT][STB_FONT_courier_6_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_6_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_6_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_6_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_6_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_6_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_6_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_6_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__courier_6_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__courier_6_latin1_s[i] + stb__courier_6_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__courier_6_latin1_t[i] + stb__courier_6_latin1_h[i]) * recip_height;
            font[i].x0 = stb__courier_6_latin1_x[i];
            font[i].y0 = stb__courier_6_latin1_y[i];
            font[i].x1 = stb__courier_6_latin1_x[i] + stb__courier_6_latin1_w[i];
            font[i].y1 = stb__courier_6_latin1_y[i] + stb__courier_6_latin1_h[i];
            font[i].advance_int = (stb__courier_6_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__courier_6_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_6_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_6_latin1_s[i] + stb__courier_6_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_6_latin1_t[i] + stb__courier_6_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_6_latin1_x[i] - 0.5f;
            font[i].y0f = stb__courier_6_latin1_y[i] - 0.5f;
            font[i].x1f = stb__courier_6_latin1_x[i] + stb__courier_6_latin1_w[i] + 0.5f;
            font[i].y1f = stb__courier_6_latin1_y[i] + stb__courier_6_latin1_h[i] + 0.5f;
            font[i].advance = stb__courier_6_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_6_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_6_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_6_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_6_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_6_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_6_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_6_latin1_LINE_SPACING
#endif

