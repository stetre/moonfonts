// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_7_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_7_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_7_usascii_BITMAP_WIDTH         128
#define STB_FONT_courier_bold_7_usascii_BITMAP_HEIGHT         24
#define STB_FONT_courier_bold_7_usascii_BITMAP_HEIGHT_POW2    32

#define STB_FONT_courier_bold_7_usascii_FIRST_CHAR            32
#define STB_FONT_courier_bold_7_usascii_NUM_CHARS             95

#define STB_FONT_courier_bold_7_usascii_LINE_SPACING           3

static unsigned int stb__courier_bold_7_usascii_pixels[]={
    0x8804a200,0x02010000,0x95cdc000,0x8f323cc8,0x85121529,0xb8f223c8,
    0x219910ec,0x49b32dc9,0x1c9c83c8,0x9a64c993,0x8ee24c82,0x2426c4c8,
    0x22644991,0xa49530cb,0x54a26e1a,0x74c2e150,0x2e33170c,0x35524198,
    0x2d986521,0x6e443222,0x921661c9,0x9a8774c4,0x1c992e64,0x217151c4,
    0x83911ca9,0xb877263d,0x42a1b0cd,0x4a29122a,0x511c4714,0x883b2a19,
    0x3748aa0b,0x92064415,0xaa97661a,0x4c437264,0xb8a8320c,0x5e4c36e0,
    0x45701b30,0x70a8541c,0xcc996641,0x0d419930,0x32541997,0x32a09899,
    0x1b7309be,0x644912a2,0x5c986664,0x4448936a,0x990f224d,0x30cc0661,
    0x12152983,0x00736200,0x00000260,0x982a0620,0x04c00d41,0x00000013,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x20000000,
    0x8a542c38,0x89214c0a,0x6644000d,0x2e257571,0x644b2a1c,0x2e37371c,
    0x447931b9,0x8703624c,0x2e320cc9,0x654e6322,0x1446eee0,0x42a4cb8b,
    0x710e42b8,0x4c9930a8,0x338c520d,0xb920c4e3,0x44991088,0xcc9b264c,
    0x0c882a1d,0x33b71266,0xa8916de4,0x1171203b,0x11dc42a5,0x150a619d,
    0x8482a242,0x59191a8b,0x4399324a,0xd970dc3d,0x0a8332a3,0xb8232054,
    0x8af321da,0x0a932a34,0x2a19bb16,0x0fc88ea0,0x0720a871,0x98e64c15,
    0x5cb32a4c,0x96de404c,0xd98004d8,0x2e19b30c,0x872b61dd,0x79d54b9e,
    0x710caef2,0x90007500,0x24dc86c4,0x00000cd9,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x32677390,0x9c86eaa4,
    0x2e59953b,0x997165c1,0x3930f2e3,0x98191ca8,0x0981e5c0,0xca932215,
    0x2219970b,0x322e044c,0x43cb9260,0xa8aab20a,0x8b82e6a0,0x2653710b,
    0x5c6e70db,0x8193529a,0x5433a64c,0x9a8f224d,0xa40f220b,0x2a717129,
    0xb89910aa,0x4c82a2a0,0x2f4c2a6a,0x50543db9,0x126441b9,0x270fcc7b,
    0xcca82a29,0xa891b6a1,0x547660b9,0x15065c6d,0x66c4372a,0x32e15950,
    0x2639b50c,0x64b951ec,0xab8aa1ca,0x5e49b31d,0x3b51642d,0xccd8f55c,
    0x66e49b10,0x74d2e7a2,0x1d4b2b24,0x3910eaf2,0xdc876a00,0x2005402d,
    0x000006a8,0x00000000,0x00000000,0x00000000,0x95900000,0x50154e45,
    0x55437261,0x2e39931c,0x473321cc,0x0447511a,0x9910a830,0x00000079,
    0x20000000,0x0eedc4b8,0x2b885459,0x77516274,0x439cd643,0x2617732a,
    0x0001b550,0x00000000,0x42c80000,0x032a66c9,0x766437a6,0x04447d52,
    0x00012efa,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__courier_bold_7_usascii_x[95]={ 0,1,0,0,0,0,0,1,1,0,0,0,1,0,
1,0,0,0,0,0,0,0,0,0,0,0,1,1,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,1,0,0,0,-1,1,0,-1,0,0,0,0,0,0,0,
0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,1,1,1,0, };
static signed short stb__courier_bold_7_usascii_y[95]={ 5,0,1,0,0,1,1,1,1,1,1,1,4,2,
4,0,0,0,0,0,1,1,0,1,0,0,2,2,1,2,1,1,0,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,6,0,2,1,2,1,2,1,2,1,1,
1,1,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,1,1,2, };
static unsigned short stb__courier_bold_7_usascii_w[95]={ 0,2,3,4,4,4,4,2,3,3,4,4,2,4,
2,4,4,4,4,4,4,4,4,4,4,4,2,2,5,4,4,4,4,5,4,4,4,4,4,4,4,4,4,4,
4,5,5,4,4,4,4,4,4,4,5,5,4,4,4,2,4,3,4,5,2,4,5,4,4,4,4,4,4,4,
3,4,4,5,4,4,5,4,4,4,4,4,4,5,4,4,4,2,2,2,4, };
static unsigned short stb__courier_bold_7_usascii_h[95]={ 0,6,2,6,6,5,5,3,5,5,3,4,2,2,
2,6,6,5,5,6,4,5,6,5,6,6,4,4,4,3,4,5,6,4,4,5,4,4,4,5,4,4,5,4,
4,4,4,5,4,5,4,5,4,5,4,4,4,4,4,5,6,5,3,1,2,4,5,4,5,4,4,5,4,4,
6,4,4,3,3,4,5,5,3,4,5,4,3,3,3,5,3,5,5,5,2, };
static unsigned short stb__courier_bold_7_usascii_s[95]={ 58,1,49,18,33,14,19,17,24,1,123,
103,46,53,66,38,43,37,32,4,113,113,53,98,28,48,80,124,74,35,64,
118,23,48,43,42,33,93,23,52,12,7,57,119,114,108,102,88,88,93,69,
103,38,47,17,1,67,72,97,11,13,28,12,69,58,77,5,62,123,82,54,
108,59,92,9,28,87,40,118,83,68,63,30,98,83,108,1,6,25,58,20,
74,77,80,61, };
static unsigned short stb__courier_bold_7_usascii_t[95]={ 7,1,19,1,1,8,8,19,8,8,14,
14,19,19,19,1,1,8,8,1,14,1,1,1,1,1,14,8,14,19,14,
1,1,14,14,8,14,14,14,8,14,14,8,8,8,8,8,1,14,1,14,
1,14,8,14,14,8,8,8,8,1,8,19,19,19,8,8,8,1,8,14,
1,14,8,1,14,8,19,14,14,1,1,19,14,1,14,19,19,19,1,19,
1,1,1,19, };
static unsigned short stb__courier_bold_7_usascii_a[95]={ 59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_7_usascii_BITMAP_HEIGHT or STB_FONT_courier_bold_7_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_7_usascii(stb_fontchar font[STB_FONT_courier_bold_7_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_7_usascii_BITMAP_HEIGHT][STB_FONT_courier_bold_7_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_7_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_7_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_7_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_7_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_7_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_7_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_7_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_7_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_7_usascii_s[i] + stb__courier_bold_7_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_7_usascii_t[i] + stb__courier_bold_7_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_7_usascii_x[i];
            font[i].y0 = stb__courier_bold_7_usascii_y[i];
            font[i].x1 = stb__courier_bold_7_usascii_x[i] + stb__courier_bold_7_usascii_w[i];
            font[i].y1 = stb__courier_bold_7_usascii_y[i] + stb__courier_bold_7_usascii_h[i];
            font[i].advance_int = (stb__courier_bold_7_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_7_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_7_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_7_usascii_s[i] + stb__courier_bold_7_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_7_usascii_t[i] + stb__courier_bold_7_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_7_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_7_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_7_usascii_x[i] + stb__courier_bold_7_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_7_usascii_y[i] + stb__courier_bold_7_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_7_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_7_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_7_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_7_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_7_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_7_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_7_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_7_usascii_LINE_SPACING
#endif

