// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_14_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_14_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_14_latin1_BITMAP_WIDTH         256
#define STB_FONT_times_bold_14_latin1_BITMAP_HEIGHT         70
#define STB_FONT_times_bold_14_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_bold_14_latin1_FIRST_CHAR            32
#define STB_FONT_times_bold_14_latin1_NUM_CHARS            224

#define STB_FONT_times_bold_14_latin1_LINE_SPACING           9

static unsigned int stb__times_bold_14_latin1_pixels[]={
    0x06200260,0x02200130,0x09800620,0x4a80a310,0x80401654,0x6d404aac,
    0x2aaa603b,0x1bba8012,0x1a9804c0,0x20298551,0x8800aa98,0x0702a601,
    0x35063751,0x03100188,0x204c40c4,0x7cc03029,0x5c04e800,0x00ff8806,
    0x7d4007cc,0x01f3d706,0x809f10ba,0x07539019,0xf982ecb8,0x44144b7f,
    0x00de99ed,0xd71720b9,0x215907c8,0x82ec02b8,0x9160f89c,0x6c7d515d,
    0xf803e882,0x360bfa02,0x1fe45a84,0x048801c8,0xa9c80370,0xd803a803,
    0x802102b8,0x2d409f01,0x98035530,0x7ffe81aa,0x07ec4b89,0x406407f3,
    0x02235c5c,0xb014c032,0x960c9fc0,0x5f1cc1fc,0x07501220,0x8582c5dc,
    0x0363267a,0x55303553,0x54c6aa15,0x303550aa,0xaa980555,0x70aaa981,
    0x2cd3ae35,0xbf1669d7,0x882d85d9,0x40dd89ed,0x0dd89ed8,0x2225fffe,
    0xdf11fe67,0x5c5c80c0,0x2191b626,0x4093cbc8,0x5613ee01,0x1f4107f8,
    0x15555553,0x2aaaaaa6,0x77555530,0xb82aaa61,0x446aaa67,0x40dd89ed,
    0x3f62c3fd,0x27b622c3,0x76c40dd8,0x7ec0dd89,0x22df12c3,0x2145be22,
    0xf10fc8ef,0x7cc1fb03,0x7f307ec3,0x444bffec,0xfd0bf71f,0x17203a03,
    0xd247c8d7,0xe80a5f37,0x41bf9700,0x5d00bf55,0x1e99bfc8,0x87a66ff2,
    0x21e99bfc,0x323543fc,0xf983f63f,0x90e17e43,0x07ec385f,0x20fd87f3,
    0x217e43f9,0x5c14fdc3,0xf74f829f,0xff307ea5,0x43fccdf0,0x25ffa26f,
    0xf86f9a7c,0xc84fa80f,0x99f235c5,0x21f71f73,0xb309f502,0x1bea0fe6,
    0x27f90750,0x44ff2198,0x4c4ff219,0x8ae0ff21,0xf0ff33fc,0x21c2fc8d,
    0xff31c2fc,0x43fccdf0,0x0e17e46f,0xbf105bf1,0x4bea9f05,0x42fd41fa,
    0xd0bf51fe,0xf095883f,0xdf307fc9,0x1721ff20,0x46a7c8d7,0xc814dd6e,
    0x952f987f,0x3a80ff10,0xc838bfc8,0xbfc838bf,0xb83fc838,0x2fd4ff22,
    0x85f90ff4,0xa8e17e43,0xf51fe85f,0x7e43fd0b,0x807ec1c2,0xf75f80fd,
    0x1be60fc3,0x437cc3fe,0x889480ff,0xfb8bee1f,0x43fc9982,0x9f235c5c,
    0x29f5bf29,0x3fc9980a,0x920bcfd8,0x5d0cc3fb,0xc83edfc8,0xdfc83edf,
    0x543fc83e,0x6f99fe46,0x0bf20ff8,0x31c2fc87,0x261ff0df,0x320ff86f,
    0x02cc1c2f,0x3b3be0b3,0x07f416c3,0xf81fd1be,0x0f312906,0x203b77b3,
    0x45c8df33,0x64e3e46b,0x098adc8e,0xf706f99c,0x5ef5c58b,0x3f21fc2c,
    0xabfc83ab,0x83abfc83,0x3235c3fc,0xdf03fa3f,0x2e1c2fb8,0x03fa1c2f,
    0x7c0fe8df,0x40e17dc6,0x14f81402,0x45f70b50,0x517dc2fa,0x2e25205f,
    0x440bf604,0x322feaac,0x51f235c5,0x3220c403,0x4542feaa,0x1dc161f9,
    0x29fe42f8,0x4329fe43,0xfc8653fc,0x8ff23d43,0x50bea2fb,0x3ea1449f,
    0x45f70a24,0x517dc2fa,0x224fa85f,0x6dc0b6e2,0x9809f102,0x2ebbeb81,
    0x05d77d70,0x100a24a4,0x544857fb,0x2d91725f,0x42a86cd9,0x7d448298,
    0x160e96c5,0x642d82d4,0x3fc9223f,0x223fc922,0x8b50ff24,0x5df5c3fc,
    0x779f902e,0x40ef3f20,0x702ebbeb,0x3205d77d,0x0e4c3bcf,0xbd501c98,
    0x02200803,0x39c00440,0x20988002,0x4ffea1fa,0x5c5532a9,0x3555100b,
    0xffa87ea0,0x0906ee23,0xd11a8031,0x229fb7df,0x14fdbefe,0x29fb7dfd,
    0x8510dfe8,0x0880dfe8,0x00200100,0x00880044,0x00000010,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xdc808000,0x0260382a,0x200ec6c4,0x22062009,0x46cc1d8d,0x02cdd40d,
    0xacc80371,0x2a00c982,0x4a05d504,0x2980c982,0x0dc81844,0x2ea01150,
    0x70289981,0x4c28e017,0x2039100c,0xb105102c,0x20311309,0xa8050ab9,
    0x406ed4c0,0x2201d505,0x27dc03b5,0x36b109b0,0x540dacc1,0x01ce058b,
    0x3201bb73,0x5f407a03,0x82f8fa86,0x6c0fe83c,0x42674c0d,0xd5c86feb,
    0x507add8b,0x41cda051,0x2609703d,0x3ccac80e,0x97d07732,0xbb11bb0d,
    0x2aa63803,0x90586aa0,0x21555301,0x646c41aa,0x80c04880,0x5530aaa9,
    0x73015555,0x03003005,0x0310980c,0x7d818021,0x28a16c54,0x6d7e0108,
    0x81d40207,0x40605758,0x3ea02201,0x08514738,0x7d41fb02,0xfd8b9504,
    0x555562c6,0x3fd8aa62,0x5302302c,0x403a0155,0x4dfe43fc,0x001d01e9,
    0x8f2e201d,0x266d8ce9,0x3a66d8ce,0x6dd46d8c,0x32e22e44,0x2136ea1f,
    0x8cf84dba,0x426dd42d,0x7f644dba,0x0ddcc6fe,0xb7506ee6,0x983ef989,
    0x0ddcc1bb,0x7fd4cdf1,0x717de640,0xe961c9fd,0x5f906c3f,0x6403a038,
    0x209f503f,0x89fe43fc,0x404fa819,0x3e5f04fa,0x3e3ed7e2,0xfb5f8fb5,
    0x50fd4fc4,0x9fc57c47,0x221fa9f8,0x67c1fa9f,0x2a7e25c8,0x3ea7e21f,
    0x9f858dc1,0x134cfc69,0xfc83f53f,0x234cfc2f,0x57ea699f,0xbf83fd38,
    0x97fc5c0a,0x44df52c3,0x40e17e42,0x07f904fa,0x1fe41ff2,0xc80e2ff2,
    0x43fe407f,0xafcbf1fa,0x47dafc7d,0xc8b8fb5f,0x1fa8a22f,0x17e45cbf,
    0x9f0bf22e,0xfc8b87ea,0x117e45c2,0x7cc3d35b,0xb9f30fdc,0x17e45c1f,
    0xcf997fd4,0xfb9f30fd,0xff1d7ea1,0x9c077c43,0x22c39ff9,0x5f9073fd,
    0x20ff9038,0xfc9983fc,0x7e43fc83,0xf93303ed,0x0ff26607,0x5f97e3f5,
    0x8fb5f8fb,0xaca8fb5f,0x7c7ee02f,0x50beb2a5,0x54f85f59,0x17d6545f,
    0xfb8beb2a,0x0bea4ddc,0x56540bea,0x56ec822f,0x105f505f,0xe87f87df,
    0xdf71c10f,0x57fcc587,0x41c2fc81,0xfc83fc99,0x90df3383,0x3abfc87f,
    0x9c1be670,0xf97c46f9,0x3e3f57e3,0xfd5f8fd5,0x717dd7cc,0x33f97cc9,
    0x7cc5f75f,0x4e7c2fba,0xf75f30fa,0x17dd7cc5,0xbf10aeb1,0x08afc422,
    0x545f75f3,0x57e29970,0x822bf108,0x20bea2fb,0x321c5ffa,0x27e42c5f,
    0x9c1c2fb8,0x43fc86f9,0x42feaac8,0x29fe43fc,0x7f556443,0x7f556442,
    0x321de542,0x3f21fecf,0x33f21fec,0xf5bf31fe,0x2f2e3ec9,0x93eb7e65,
    0x264fadf9,0x3e64cccf,0x37e64fad,0x06ce64fa,0x3aa17754,0x3eb7e62e,
    0x8336fa64,0x77542eea,0x6dd75dc2,0x20e02501,0x27dc2c5e,0x10a24fa8,
    0xc85fd559,0x17ea243f,0x23fc87f9,0x8bf51248,0x0082fd44,0x00400801,
    0x00004000,0x20000000,0x00000108,0x00005300,0x02801104,0x2c4885d3,
    0x9f9027dc,0x5fa89077,0x43f51fe4,0xbfd13ffa,0x36fbfa21,0x7d43f54f,
    0x7d43f53f,0x0000003f,0x00000000,0x00000000,0x00000000,0x00000000,
    0x22400004,0x0401dfd8,0x3fea1fa8,0x001bfd13,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x80000000,
    0x8298002c,0x41c0cc0b,0x1980b819,0x05cc0288,0x03720b20,0x30115062,
    0x42899815,0x03500aa8,0x2a6026e6,0xa98aaaa0,0x40157302,0x43102aaa,
    0x7302aaaa,0x8054c015,0x4418acb9,0x2aaa60b9,0x75103550,0x06aa6063,
    0x07540d50,0x44498f31,0x3621543d,0x65e424c3,0x75b006c4,0x26074c0d,
    0x2e1c84ce,0x34de46fe,0x75d1eb76,0x17c7441d,0x3b63d476,0xb03fe26f,
    0x5712c883,0x987fff50,0x3fffe21e,0x2b896445,0x6c43f2e8,0x968bd31e,
    0x161fec3f,0x8faa2bb2,0x0dd89ed8,0x40ea8060,0x23c82c5b,0x05879058,
    0x015cf77f,0x440d33f1,0x1160a280,0x7f15f102,0xf89fa820,0xf10e5ee4,
    0x3f211243,0x9070ff20,0x855177d5,0x07cc199c,0x90b26aea,0x45575751,
    0x7e49b3f9,0x33f12c41,0x0e17e47f,0x363983f9,0xd30fe60f,0xd800db19,
    0xd8f20391,0x80e47900,0x80915cbe,0x7100bdf8,0x43cb8879,0x51e5c448,
    0xcb893e5f,0x92fcbee3,0x07ff101f,0x53fc43c8,0xb91f1981,0xf82cf892,
    0x3307401d,0x3e2494b5,0x0ff31eaf,0xf90fdc02,0x41fe2385,0x0df0ff30,
    0x2141f6bf,0x104932bc,0x102751bd,0x204931bd,0x801b0bb9,0x43f52fea,
    0xf97c5f2f,0x3e5f06e2,0xf97e5f72,0x7cfe65f2,0x707dff95,0xbf903dff,
    0x7072fd81,0x2a3975fc,0x9f30ffff,0x38b303f9,0xffa8707b,0xb0017ea4,
    0x51c2fc83,0x85fa80bf,0x7dafc1fe,0xb52c01c8,0x02765620,0x4ae02d4b,
    0x22b60dbc,0x3ea2a8ff,0x7c7eabf1,0x3e3f5165,0x557e5f75,0x675cbf1f,
    0x017f513f,0xb103ffa6,0x19ef985f,0x21f5f0b8,0xf73fc983,0x85709f15,
    0x64384c8b,0x4df53ffc,0x0cc1ccb8,0xfa8e17e4,0x7c37cc06,0x47dafc0f,
    0xc98e406d,0x82d41b05,0x440b931c,0x267d3f14,0xa89df53f,0x47eabf1f,
    0x1fa8915f,0xa7cbeabf,0xf70bf1fa,0x20a81f81,0x82f882fb,0xf15304fe,
    0x5d8129b3,0x3a1be5f5,0x4cf4d4c0,0x7cc7d491,0x5f98ff15,0x470bee00,
    0x0fe807f8,0x7eafc37c,0x261753e2,0xa81d9b14,0x8a4c0643,0x21b00ecd,
    0xdf34e9f9,0x44a7bf61,0x4be27f2f,0x2f88573f,0x97c57c7f,0xe887f2f8,
    0x92f3f6a1,0x21987c4a,0x5c03f506,0x20c9889a,0x9fc4aa28,0x1b82cc4e,
    0x0fa83213,0xf317dc7d,0x9f50790b,0x30fee144,0x5f517dc3,0x43fd9f90,
    0x22583b5f,0x71620eca,0x6544b0bb,0x56c2b80e,0x2b7ff21e,0x2f2a1ffc,
    0x0b1de543,0x9b50ef2a,0x223bca89,0x7eddc1ba,0x2eb3aa2f,0x80673ee3,
    0xcbbcb805,0x215f7cc0,0x03b85aea,0x2032ef2e,0x7540dabc,0x5e82ecab,
    0x20779f90,0xb82cbdeb,0x0202ebbe,0x0c41bb88,0x33026044,0x00881883,
    0x04080605,0x00204010,0x00100401,0x20080208,0x00400000,0x00402004,
    0x31000008,0x20010000,0x00088008,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xa8000000,0x0aaa89aa,
    0x006a6353,0xaa98aa60,0x501c6aa0,0x2e1c0555,0x206aaa65,0x401532aa,
    0x1aaaaaaa,0x98500ba8,0x30aaaaaa,0x41555555,0xcea8b93e,0x2aaa62ec,
    0x8aaa9809,0x5530aaa9,0xa986a615,0x350e4c02,0x7950154c,0x4c5510dd,
    0xb5100aaa,0x985554c7,0x3e2b71aa,0x248bf70f,0x40d904f8,0x9637ec7d,
    0x403fe00c,0x3f236c7b,0x8fea4fab,0x4f7ec405,0x37ff43c9,0x7f903faa,
    0x67e43d33,0x6d3e2d99,0x7e477c46,0x3ba6ff60,0x7f91fe40,0x13e23fc8,
    0x7c3c80bf,0xaf982fc4,0x3cfd41f9,0xaaf80bf2,0x87a1fe47,0xff8bf66d,
    0x904f8510,0x3ae3ec0d,0x202a8e4f,0x00fd307f,0xf83fa5f7,0xf9b80336,
    0xe8a98a16,0x3207ec1f,0x7dc3313f,0xdb4f8a23,0xc8bee9f0,0xfc8df12f,
    0x7f90bf23,0x202fc4f8,0x82fc0981,0x6c2f89fa,0x855bf907,0x3fb811f9,
    0x5f980191,0x6fc14ffa,0x66d402eb,0x97fc5c7d,0x10ff02c3,0x5f700f97,
    0x39fc83fa,0x3b7c54c0,0x07e43dc0,0x2e0e2ff2,0x369f073f,0x45f54f86,
    0xc87fa2fc,0xf90bf23f,0xbafc4f87,0xea8faa1d,0x11766fc3,0x7541d79b,
    0xf9afc83f,0x7dc0bea5,0x3fa0049b,0xf076fa99,0x11443f2b,0x2671fa7f,
    0x806c39ff,0xc8f9387f,0x17e67dc4,0x2700f3e6,0x6c05cff8,0x7e40fc84,
    0xddfb83ed,0x0feafc45,0xb51fbafc,0x47f9159f,0x2feccdfc,0xf13e1fe4,
    0xf13e02eb,0x47d8ef89,0x20fb009b,0x221fd2fc,0x6fdc116f,0xfb8b705f,
    0xf037fd3c,0x51ccbea9,0x5c71f65f,0xf81543ef,0x0fecd547,0x05fdc1fd,
    0x055ff554,0x477dd554,0x7e41a204,0x41d5fe40,0x7c459bfb,0x77c3fccf,
    0xb17e43ec,0xf91fe47f,0x27c3fc85,0x27c0f37e,0x9f6bf13e,0x6c1bccf9,
    0x3fa5f907,0xf70ffaa0,0x8db09fd7,0x0df72ff8,0x5b97d53e,0x0e3ecbea,
    0x26488bf9,0xfffc8ff2,0x0bee1c6f,0x40cfeccc,0x095be228,0x0fc810c8,
    0x5c329fe4,0x20c9853f,0xf9014f80,0x7f90ffc5,0x0ff217e4,0x0fdef89f,
    0x3e27c4f8,0xfeed8f95,0xcfc83ec6,0xb82b82ec,0x002ff8bf,0xf81fc4f9,
    0x89f61f75,0xe838fb3f,0x37db6585,0x987f6662,0x99817dc1,0x444819fe,
    0x3372246f,0x3207ec3c,0x3fb9223f,0x4f880d50,0x2fccbf20,0x42fc8ff2,
    0x3e2fc3fc,0x45f86f8d,0x27dafc5f,0x0fb1a24a,0x0b500ff2,0x07fe67f7,
    0x20190e60,0x3fa2dade,0x4bfb3ae0,0x5c2442e9,0x403f7931,0x6fec407c,
    0x907ff300,0x2ffee21b,0x3ffea5eb,0x42ffa62f,0x4fdbefe8,0x7301bfb1,
    0x881dea80,0x443ecdfe,0xdfe98dfd,0x2a1bfd10,0x91df30ef,0xa877d49f,
    0xd1df30ef,0x055ddc3f,0xfe983fd1,0x8813100c,0xffe88dfd,0x08008002,
    0x001083a8,0x00008100,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x70000000,0x80aaa987,0xaaa81aa9,
    0x81669d71,0xa993a201,0x99409aaa,0x2aaaaaa0,0xa98aaaa1,0x2a155532,
    0x26aaa61a,0x2f220a00,0x4c11985b,0x32aaaaaa,0x00135555,0x4cccc1c0,
    0x2a070199,0x543bcbda,0x2ca883db,0x9d70ddc4,0x00951db1,0x4003bb88,
    0x207445bc,0x3ff203fc,0xf893fa20,0x80740516,0x2ff20ecc,0xb5f10ee9,
    0x7fc45749,0x8361ff40,0x360ee5fd,0x5c0de9bf,0x47da7445,0x2ee0ffd9,
    0x3669afe9,0x881fd9af,0x18683ccb,0x3e216010,0x223d4f99,0x4fc1fa9f,
    0x134cf47a,0x8263f6bf,0x7c5bdcbc,0x407325f2,0x0440a8ea,0xfcb80bf2,
    0xf70feea3,0x827d4053,0xf72fc8a2,0x3f628047,0x0a26fa83,0x20913ff1,
    0x54df12fc,0x6cbea4ef,0xb1408847,0x32fc8a3f,0x0fe7f0bf,0x5804061a,
    0xb59f7170,0x30fe45c7,0xcbf9821f,0x3ee3f20f,0x6447442b,0x32fc7e63,
    0x1ff987d9,0x0bf21f54,0x2ee6f9b8,0x016fc43f,0x0faa0ff9,0xa87f65f9,
    0x40df503e,0x3ee073fd,0xe8bf203e,0x5f717e1f,0xecce99f6,0xf903fb03,
    0x5f317e65,0x3f32edf7,0xb82033cc,0x2a4ccecc,0x59504f9d,0x5417d43f,
    0x3abf302f,0x4b115c2e,0x2a0bf1fa,0xf03fea4e,0x4e02fc89,0x3fb99afd,
    0x93300fd8,0xf913e07f,0x09f03fdb,0x7cc05ff1,0x13f601af,0x8ff62fc8,
    0x7d9fcc5f,0xd83ec77c,0xdabfc81f,0x746fd41e,0x133d3316,0xd3310406,
    0x7cbe2333,0x75f3188e,0x08b7c43f,0x9d022bf1,0x447503ee,0x41fc7e24,
    0xf3131dda,0x17e44f85,0x5cf7ea70,0x4e05983f,0xc89f06f9,0x4f85fb2f,
    0xfc805fc8,0x80ffdc04,0xf8ff62fc,0x47eceb85,0x3f60fb5f,0x2febfc81,
    0xd09f3f88,0x42c02030,0x5ffabff9,0x513eb7e2,0x2eea87dd,0xf30b11b8,
    0xaca87d57,0x502fae23,0x44f81b5b,0x747142fc,0x0a07f72f,0x17f55644,
    0x4cbf227c,0x3e627c6f,0x3ee0260f,0x1beaa604,0x43ff17e4,0xf1f6105f,
    0x0fec1f6b,0x07fc57e4,0xcb96f726,0x2033ccfc,0x00400b00,0x10200000,
    0x09177370,0x40200ae0,0x961fe45f,0x23fb9ae3,0xf51202db,0x2fc8bf0b,
    0x745f89f5,0x4fb82c3f,0x427ec710,0xc89f32fc,0xbf1f600e,0x40ff41f6,
    0x40df72fc,0x4ccccc40,0x33333330,0x00000020,0x00000000,0x7d400000,
    0x75dfd30e,0x9c4ba6bd,0x3930dfd8,0xffa87ea0,0x74c3bea3,0x2a0bdbdf,
    0x75ff70ef,0xbfb10fd9,0x3ee3ea83,0x337fa63f,0xed98003d,0x3fd1ff32,
    0x260bff98,0x09fb0cfe,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x4db19d30,0x000934eb,0x9cd88a15,0x7d79d31e,0x07141bb3,
    0x105d79d3,0x1edaca83,0x20591bd3,0x280b8905,0x198cc530,0x983506e6,
    0x4c330542,0xca80661d,0x32a4cccc,0x1e44cccc,0x8898ec41,0x41983261,
    0x82222220,0xddd13bba,0x00005ddd,0x44fb5f80,0x6440336f,0x3a1dd265,
    0x23ba0cae,0x223f9afc,0xb1df0955,0x9945a88f,0x01d7e45f,0x0f236603,
    0x5b550fe2,0xad9b75ba,0x221f551d,0xacaa7c79,0x0f629f53,0x26666273,
    0x26666219,0x3f99a669,0x1eb365f3,0x2fb72a79,0xbbbbb13a,0x01376e3b,
    0x3e000000,0x29fb8fb5,0x7cc3bb50,0xd07e86a8,0x0fe23eeb,0x2bf0fa99,
    0x3aefe27c,0x3e207f43,0xcccccb87,0x9d81fcc3,0x6cb6e20e,0x1cc6e9b4,
    0x9f45b8d1,0xc8e259bb,0xbbbab443,0x265803bb,0x02007620,0x017710c6,
    0x00000000,0x47dafc00,0x5f542cf8,0x86c8fa80,0x3eebd05e,0xdb5c3f88,
    0xb87cafc5,0xc81fd40b,0x4cccc42f,0x4c2e6409,0x96e64954,0x2326572a,
    0x3b022e1c,0x12bc88e4,0x984c3c85,0x80199999,0x00000001,0x00000000,
    0x36bd0000,0xdc887d87,0xd0b27703,0x47dd7a0b,0x2cc743f8,0x65c7cafc,
    0x0c5be25a,0x82c0dd51,0x20d8b33c,0x0442200d,0x8ffdc393,0x2000c2ac,
    0x000004d8,0x00000000,0x00000000,0x767e4000,0x2a024c1f,0x2385c1cd,
    0x7fc40ef8,0x25fabfd8,0x1df3070a,0xfc8203fd,0xb1d31ecc,0x20c0a09f,
    0x00000001,0x00000000,0x00000000,0x00000000,0x10000000,0x12600100,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_bold_14_latin1_x[224]={ 0,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__times_bold_14_latin1_y[224]={ 11,2,2,2,2,2,2,2,2,2,2,3,9,7,
9,2,2,2,2,2,2,2,2,2,2,2,5,5,3,5,3,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,12,2,5,2,5,2,5,2,5,2,2,
2,2,2,5,5,5,5,5,5,5,3,5,5,5,5,5,5,2,2,2,6,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,4,2,2,3,2,
2,2,2,2,2,5,5,7,2,1,2,3,2,2,2,5,2,5,10,2,2,5,2,2,2,4,-1,-1,-1,0,
0,0,2,2,-1,-1,-1,0,-1,-1,-1,0,2,0,-1,-1,-1,0,0,4,2,-1,-1,-1,0,-1,2,2,2,2,
2,2,2,2,5,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,2,2,2,2,2,2,2,
 };
static unsigned short stb__times_bold_14_latin1_w[224]={ 0,3,5,7,6,12,10,3,5,4,6,7,3,4,
3,4,6,6,6,6,6,6,6,7,6,6,3,4,7,8,7,6,12,9,8,9,9,8,8,10,10,5,7,10,
8,12,9,10,8,10,10,7,8,9,10,13,10,9,9,3,4,3,7,8,3,7,7,6,7,6,6,7,7,4,
5,8,4,11,7,6,7,7,6,5,5,7,7,10,7,7,6,4,2,4,7,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,3,6,7,7,7,
2,6,5,10,4,7,8,4,10,8,5,7,4,4,3,8,7,3,3,4,4,7,10,10,10,6,9,9,9,9,
9,9,14,9,8,8,8,8,5,5,5,5,9,9,10,10,10,10,10,7,10,9,9,9,9,9,8,7,7,7,
7,7,7,7,9,6,6,6,6,6,5,4,5,5,6,7,6,6,6,6,6,7,6,7,7,7,7,7,7,7,
 };
static unsigned short stb__times_bold_14_latin1_h[224]={ 0,10,5,10,10,10,10,5,12,12,6,8,5,2,
3,10,10,9,9,10,9,10,10,10,10,10,7,9,7,4,7,10,12,9,9,10,9,9,9,10,9,9,10,9,
9,9,10,10,9,12,9,10,9,10,10,10,9,9,9,12,10,12,5,2,3,7,10,7,10,7,9,9,9,9,
12,9,9,6,6,7,9,9,6,7,9,7,7,7,6,9,6,12,12,12,3,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,10,12,10,7,9,
12,12,3,10,5,6,4,2,10,1,5,8,5,5,3,9,12,3,4,5,5,6,10,10,10,10,12,12,12,11,
11,11,9,12,12,12,12,11,12,12,12,11,9,12,13,13,13,12,12,6,10,13,13,13,12,12,9,10,10,10,
10,10,10,10,7,9,10,10,10,10,9,9,9,9,10,9,10,10,10,10,10,6,8,10,10,10,10,12,12,12,
 };
static unsigned short stb__times_bold_14_latin1_s[224]={ 64,141,119,192,222,49,62,141,88,124,68,
175,150,220,189,87,99,109,102,136,58,165,172,179,198,113,252,65,17,163,241,
216,164,37,53,233,99,116,125,205,161,172,50,241,7,16,35,243,70,129,140,
128,131,223,143,1,88,78,68,150,45,154,106,211,199,193,15,201,27,208,218,
210,202,197,158,183,178,40,60,234,143,115,33,249,109,1,9,215,82,29,75,
207,18,245,203,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,
166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,64,23,1,
120,226,79,194,187,193,187,114,25,172,220,154,225,125,158,131,136,181,134,116,
185,159,154,145,52,38,27,16,9,140,177,41,92,57,82,87,197,212,221,230,
73,239,51,250,67,151,8,43,1,32,105,94,98,243,22,12,54,31,21,225,
168,133,214,152,160,176,184,183,234,200,207,229,236,1,192,47,62,145,123,102,
73,80,92,106,90,151,1,109,117,125,72,80,64, };
static unsigned short stb__times_bold_14_latin1_t[224]={ 14,15,60,15,15,28,28,60,1,1,60,
50,60,60,60,28,28,39,39,28,39,28,28,28,28,28,39,39,60,60,50,
28,1,50,50,28,50,39,39,28,39,39,39,39,50,50,39,28,39,1,50,
28,50,28,28,39,50,50,50,1,39,1,60,60,60,50,39,50,39,50,39,
39,39,39,1,39,39,60,60,50,39,50,60,50,50,60,60,50,60,50,60,
1,15,1,60,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,
50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,14,39,15,
28,50,39,1,1,60,28,60,60,60,60,28,60,60,50,60,60,60,39,1,
60,60,60,60,60,28,28,28,28,1,1,15,15,15,15,39,1,1,1,1,
15,1,15,1,15,39,15,1,1,1,1,1,60,15,1,1,1,15,15,39,
15,15,15,15,15,15,15,50,39,15,15,15,15,50,39,50,50,15,50,15,
28,28,28,28,60,50,28,15,15,15,1,1,1, };
static unsigned short stb__times_bold_14_latin1_a[224]={ 51,67,112,101,101,202,168,56,
67,67,101,115,51,67,51,56,101,101,101,101,101,101,101,101,
101,101,67,67,115,115,115,101,188,146,135,146,146,135,124,157,
157,79,101,157,135,191,146,157,124,157,146,112,135,146,146,202,
146,146,135,67,56,67,118,101,67,101,112,90,112,90,67,101,
112,56,67,112,56,168,112,101,112,112,90,79,67,112,101,146,
101,101,90,80,45,80,105,157,157,157,157,157,157,157,157,157,
157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,
157,157,157,157,157,157,157,157,51,67,101,101,101,101,45,101,
67,151,61,101,115,67,151,101,81,111,61,61,67,117,109,51,
67,61,67,101,152,152,152,101,146,146,146,146,146,146,202,146,
135,135,135,135,79,79,79,79,146,146,157,157,157,157,157,115,
157,146,146,146,146,146,124,112,101,101,101,101,101,101,146,90,
90,90,90,90,56,56,56,56,101,112,101,101,101,101,101,111,
101,112,112,112,112,101,112,101, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_14_latin1_BITMAP_HEIGHT or STB_FONT_times_bold_14_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_14_latin1(stb_fontchar font[STB_FONT_times_bold_14_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_14_latin1_BITMAP_HEIGHT][STB_FONT_times_bold_14_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_14_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_14_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_14_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_14_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_14_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_14_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_14_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_14_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_14_latin1_s[i] + stb__times_bold_14_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_14_latin1_t[i] + stb__times_bold_14_latin1_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_14_latin1_x[i];
            font[i].y0 = stb__times_bold_14_latin1_y[i];
            font[i].x1 = stb__times_bold_14_latin1_x[i] + stb__times_bold_14_latin1_w[i];
            font[i].y1 = stb__times_bold_14_latin1_y[i] + stb__times_bold_14_latin1_h[i];
            font[i].advance_int = (stb__times_bold_14_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_14_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_14_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_14_latin1_s[i] + stb__times_bold_14_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_14_latin1_t[i] + stb__times_bold_14_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_14_latin1_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_14_latin1_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_14_latin1_x[i] + stb__times_bold_14_latin1_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_14_latin1_y[i] + stb__times_bold_14_latin1_h[i] + 0.5f;
            font[i].advance = stb__times_bold_14_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_14_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_14_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_14_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_14_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_14_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_14_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_14_latin1_LINE_SPACING
#endif

