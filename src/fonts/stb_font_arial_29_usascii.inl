// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_29_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_29_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_29_usascii_BITMAP_WIDTH         256
#define STB_FONT_arial_29_usascii_BITMAP_HEIGHT        104
#define STB_FONT_arial_29_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_29_usascii_FIRST_CHAR            32
#define STB_FONT_arial_29_usascii_NUM_CHARS             95

#define STB_FONT_arial_29_usascii_LINE_SPACING          19

static unsigned int stb__arial_29_usascii_pixels[]={
    0x3baa05d1,0x2203d702,0x0ba206ec,0x6664d322,0x7999912c,0x3b72e200,
    0x0000acee,0x5cc00022,0xa9801bdd,0x000d4c02,0x2637b710,0x2e65511a,
    0x2a2001bd,0x0001beec,0x2b37b2a2,0xbdb75000,0xdb980057,0x32000bde,
    0xffa83646,0xd02fc83f,0x836c0fff,0xffff77f9,0x17fffe67,0xfffffb30,
    0x019fffff,0x4400d900,0xfffffffd,0x07fe605f,0x16442fe8,0x3fffff60,
    0x5bf34fbc,0x01dfffff,0xffffffb8,0xf7000dff,0xffffffff,0x7fff4405,
    0x200effff,0xffffffc8,0x8df004ff,0xff9303f8,0xff505f90,0x40be6015,
    0xfd5537f9,0x0aabfe67,0x09beffc8,0x3dffb751,0xfffd7100,0x7ff4c039,
    0xffeca9bd,0x4c13fa05,0x202fe87f,0xfc99dffb,0xdfff34ff,0x20dff713,
    0x9abeffe8,0x4406ffec,0xa9aceffd,0xf985ffec,0xfebaabff,0xffe881ff,
    0xfffcaacf,0x641fcc04,0x903fe00f,0x80bf705f,0x7fb0006d,0x3f601fe6,
    0xffd1002f,0x7fffcc03,0xfd02ffff,0x27fd405f,0x9f906fb8,0x3e605fd0,
    0x34ffc81f,0x9fd10dff,0x4c07ffb0,0x3ff205ff,0x20ffe404,0xff100ffc,
    0x405ffd0b,0x3f203ffd,0x3a04f981,0x6417e41f,0x00fea03f,0x7f99fec0,
    0x0006fec0,0x7c407fec,0xfd8eb9df,0x00ffe40f,0x7c41ffdc,0xe81ff81f,
    0x20bf902f,0x5ff34ff8,0xff51bea0,0x09ff5005,0x36007ff3,0x201ff45f,
    0x1ffdc7fc,0xe81bfe20,0x7403fa07,0x6417e41f,0x803fa03f,0x33fd82a8,
    0x837cc0ff,0x42aa1bc9,0x0ffa84fc,0xf0ffe2d7,0x3fe4009f,0x37d44fd8,
    0x06b3fea6,0xa7ec07fb,0x3fe207f9,0xb8017fa0,0x037e40ff,0x7fc1df30,
    0xd06f4403,0x37ea00bf,0x2e05f880,0xc85fd04f,0x503fc82f,0x87f980df,
    0x40ff33fd,0x7ffd41fe,0x20ff8cff,0x2e5fc86f,0xff8872e6,0x03fe6000,
    0x87fb1fea,0x45fffffb,0x53f202ff,0x8ffc06f9,0x22001ff9,0x01ff41ff,
    0x03bf6020,0x000bfe00,0xf3017d40,0xf90bf60d,0x3207fb05,0x43fcc03f,
    0x20ff33fd,0x67fcc4fa,0x47fdfea9,0x737e40fd,0x007fa80d,0xff817fc4,
    0xa981ff12,0x7fc1acff,0x7cd3ee01,0xfa97fc06,0x1ffc000f,0x00005ff1,
    0x0039fff5,0x00003fe6,0xff1007e4,0x5f90bf60,0x3f605fd0,0x6c3fcc02,
    0x320ff33f,0x20ffe22f,0x17dc5ffe,0x035c7fea,0x3a001bf2,0x2ebf904f,
    0x40bfa05f,0x53f202fe,0x3fe206f9,0xb000ff70,0x007fd4bf,0xffffa800,
    0xff701bdf,0x037c0000,0x27dc0ffc,0x03fe0bf2,0x3e600ffc,0xff33fd87,
    0x5fd83fa0,0xf987ff70,0x65fff444,0x002ff406,0x7f9837ec,0x17f405fb,
    0x3f604fd8,0x7cc0ff34,0x2001bf27,0x81fee7fc,0xaaaaaaa8,0xffffc981,
    0x37e41eff,0x04f98000,0xff882fe8,0xbf90bf21,0x3003fe20,0x267fb0ff,
    0xff8df07f,0x985ff101,0xfffe885f,0x0bfb01bf,0x740bfb00,0x3a00ffaf,
    0x01ff702f,0x3fe69ff1,0x7e4bfb03,0x26fc8006,0xff300ffb,0x809fffff,
    0x2ffffdb9,0x40001fee,0x4fd802fb,0x3f2dfd10,0x201bff32,0x7f9807f9,
    0x0ff33fd8,0x037cc9f3,0x3fb81ff3,0xffffd710,0x006fb81b,0x3ee04ff8,
    0x17f405ff,0x7543dfd0,0x7fff34ff,0xf507fe44,0x49fb000f,0xdd301ff9,
    0x009ffddd,0xa8fffd44,0xd80000ff,0x409fb007,0x265f97fc,0x1fea01ff,
    0x3f61fe60,0x5f70ff33,0xdf502fdc,0xf9005fb0,0x7cc1fffd,0x17fc4007,
    0x803fff10,0x3fe602fe,0x4feffeef,0xfbffdff3,0x0ff883ff,0x3e17f400,
    0x27f4003f,0x9fd10011,0xa8007fe2,0xe802fc41,0x27dfb03f,0x3ff912fc,
    0x3003fe20,0x267fb0ff,0x362fb87f,0x117f204f,0x2d7001ff,0x17fc5ffb,
    0x803ff500,0x2fe807fd,0x77ffec40,0x1ff34fd9,0x205bfffb,0x3e6003ff,
    0x002fec0f,0x02fed3fa,0x0ffe6fc8,0xf51ffc40,0x207fe007,0x217e46f9,
    0x07fe07f9,0x7fb0ff30,0x8fe61fe6,0x7ff106fb,0xd7003fd8,0x3ff63fe4,
    0xff11db80,0x007f900b,0x04c005fd,0x89fe69fb,0x00ffc801,0xff70ffd0,
    0xaa7f4007,0x4bf9007f,0xfb801ffd,0x2007f20f,0x3fc80ff8,0x0ff417e4,
    0x7cc02fd8,0xff33fd87,0x7fcc9f10,0x321ffd80,0x5c37306f,0xe883fe66,
    0x6ffec0df,0x7c400ffd,0x02fe800f,0x7cd3f600,0x1dfd0007,0xd02ffc80,
    0xff7007ff,0x1017fe29,0x77fc45fd,0xd17fe600,0x41be600f,0x417e43fd,
    0x07f902fd,0x3fd87f98,0xd1ba0ff3,0x3ffa23bf,0x01ffd9af,0xf535c9fd,
    0xaeff881f,0x0bfffaa0,0x74017f20,0x3f60004f,0x2000ff34,0x4c0affe8,
    0x3e604ffe,0x2e60bdff,0x3f22fffe,0x3ea20aef,0x77fdc0ff,0x3bff6a0b,
    0x54013e20,0xc85fd04f,0x503fd82f,0x87f980bf,0x20ff33fd,0x3ffe22fc,
    0xffffaeff,0x9ff200ef,0x4c1bf66b,0xffeeffff,0xeb81dfff,0xf9001fff,
    0xfb000bff,0x8001fe69,0xfeefffe8,0xe8803fff,0xffffffff,0xffb80cff,
    0xefffffff,0xdffff700,0xb81fffff,0x07f9002f,0x05f907fa,0x1be607f9,
    0x7fb0ff30,0x37cc1fe6,0x5c33bf26,0x20cc3dff,0x56b8dff9,0x6d4407ff,
    0xd9bdffff,0x3fee0cff,0x3f62002f,0x4fd8007f,0x88000ff3,0xbdfffeca,
    0x7edcc000,0x401cefff,0xeffffed9,0xfffc9804,0x1fb03fff,0x201ff100,
    0x417e41fe,0x0bf603fc,0x3fd87f98,0x2fe40ff3,0x17f62000,0x3bfbffee,
    0x04c005ff,0x55446e98,0x00060000,0x003304c4,0x00018800,0x20000cc0,
    0x26200019,0x80154009,0x07fe03fc,0x07f705f9,0xff5037cc,0x1fe67fb0,
    0x0001bfb0,0x2a01dfd1,0x03fffffe,0x00030000,0x00000000,0x00000000,
    0x00000000,0x10000000,0x07fc40df,0x17ee0bf2,0x3ee03f90,0xff33fd86,
    0x9bffe880,0x77fdc400,0x01ed8801,0x00000000,0x00000000,0x00000000,
    0x00000000,0xb8000000,0x6ffd982f,0xff882fc8,0xb8bf104d,0xfdd54ffc,
    0x3bbfe67f,0x3fffaa04,0xfdccabdf,0x35c003ff,0x00000000,0x00000000,
    0x00000000,0x00000000,0x80000000,0x3fff505f,0x3ee05f90,0xf87ee07f,
    0xfff70eff,0x3fffe67f,0xfffeb805,0x0cefffff,0x0003a800,0x00000000,
    0x00000000,0x00000000,0x00000000,0x0a880000,0x26015510,0x00aa200a,
    0x220d5435,0x26609999,0x4c400099,0x000009aa,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x3604c980,
    0x2a205d85,0x2e2001bc,0x363512cd,0x2f2a2005,0x2ca80001,0x40af2e60,
    0x220004c8,0x5401acca,0x1eb802dd,0x05bd9100,0x01597100,0x65c00732,
    0x555554c2,0xb7101aaa,0x002644bd,0x0265c991,0xf883fdc0,0xfb82fc46,
    0x401fffff,0xbdfffffd,0x7003f95f,0x05dfffff,0x4427ec00,0x0efffffd,
    0xa8003fcc,0x04ffffff,0x05ffdff5,0x7cc017e2,0x801fffff,0x2fffffe9,
    0xfd003ff8,0xfffffe89,0xfe883fff,0x01fe66ff,0x1ff67f98,0x4c1fee00,
    0x5c1fd44f,0xffeaadff,0x73bff702,0x3eabfffd,0x67ffdc03,0x0001ffea,
    0xefe889fb,0x20effcab,0xf98007f9,0x4ffdabef,0x0df31fd8,0x7ec007f2,
    0x805fd98c,0xffcaadfe,0xe801ffc2,0x7777fc4f,0xfb82eeee,0x1fe619bf,
    0x3f67f980,0x07fb8007,0x42fc85f7,0x6fc83ff8,0xfc81ff98,0xf8817e5f,
    0x077d40cf,0x2e27ec00,0x1ffc40ff,0xfd000ff3,0x441ff70d,0x220ff46f,
    0x8ff3005f,0x3f200ff9,0x7fc7fb85,0x4c9fd003,0x5fc8007f,0x8000ff30,
    0xfb8007fd,0xfd83f907,0x4c07fdc0,0x027e40ff,0x807ecbfd,0x9fd00ffc,
    0xf89fb000,0x4cbf902f,0x7fc4007f,0x2a2ff882,0x3217e44f,0x8df7001f,
    0xff101ff8,0xff8bfe03,0x549fd003,0x3fd8005f,0x8000ff30,0xfb8007fd,
    0x7fd55537,0x455ff555,0x3ff102a8,0x3f202fe8,0x7ec0bee5,0x881bf206,
    0x49fb1bdb,0x260205fb,0x059b737f,0x7fc07fe2,0x5f913ea2,0xf3002fc4,
    0x7037dc5f,0xf2fe40df,0x93fa007f,0x2a6004fc,0x7cc2adfe,0x54455507,
    0x2001ff62,0xffffb7fb,0xffffffff,0x1fea001f,0x5fb807fe,0x1ff413e6,
    0xfb01ff50,0x9fb9ffff,0x26001fe4,0xfffffaff,0xa85fd80e,0xd1be60ff,
    0x000fe43f,0x3fee7ff6,0xa817f202,0x400ffe6f,0x98bf64fe,0x3ffff600,
    0x21fe60ff,0x9fe62ffb,0xfb8007fc,0x5bf95537,0x055bf955,0x887ff710,
    0x17ee01ff,0x817f60df,0x7fdc0ffc,0x4ffffb9d,0x77edcbf6,0xffff981d,
    0x40fffc9c,0xeb89cffa,0xf30ff84f,0x4002fc4d,0x02fffff8,0xff5027ec,
    0xfe801ffc,0x3ff2ffe4,0xfea983ff,0x23fcc2ad,0x3fcc2ffb,0xf7000df9,
    0xfc85f70f,0xfffe8801,0x6405ff02,0x6407e45f,0x3ffd00ff,0x7e40ffcc,
    0x3f6bfa4f,0x4c2fffff,0x7f440eff,0xffffe883,0xfbff502f,0x000fec5f,
    0x800fffd8,0x9fe603fe,0x9fd003ff,0x3bbfffe2,0x7fb05fff,0xffb9fe60,
    0x3ee7f982,0x87fb8006,0x007f41fd,0x067fffd4,0xbfb01ff4,0xff983fa8,
    0x21fffa84,0x9ff105fc,0x44eff7fc,0x3e61ffeb,0x50ff702f,0x09ffffff,
    0x3e61f5c4,0xffe98005,0x3fe804ff,0x7fc3fe20,0x2a9fd003,0x3f660cff,
    0x303fd83f,0x407feeff,0x017ea7f9,0x1fa1fee0,0xb88401be,0x7fd41ffe,
    0x445ff980,0x9fff905f,0x43ffbfd7,0x93f602fd,0xbff03fff,0xff103fcc,
    0x4467fec1,0x4000efeb,0x33fee0fd,0xd8dffa81,0xe82f22ff,0x43fe603f,
    0x9fd003ff,0x7fe80aa2,0xff303fd8,0x7cc05ff7,0x20013ea7,0x237c47fb,
    0x3e0005f9,0x8bffe84f,0xe85fffc8,0x3ffff207,0x3e0ff8cf,0xe93f202f,
    0x4ff900ff,0x8ffc06f9,0x9fd01ff9,0xf727cc00,0xff87ff7f,0x2a3ffa24,
    0x80ff60ff,0x07ff0ff9,0xb8013fa0,0x81fec0ff,0x06fffff9,0x04f99fe6,
    0xffb7fb80,0xffffffff,0x64001fff,0xfffe887f,0xb85fdeff,0x2f2e601f,
    0x7fc1ff31,0xfd93ee01,0x4c3fe605,0xc8ffc06f,0x01fee06f,0xf1fa0fd8,
    0x221fea1f,0x645fdeff,0xe9fea04f,0x07ff004f,0x3617fc40,0x5fff303f,
    0x9fe607ff,0x207503f9,0xffffb6fb,0xffffffff,0xf300441f,0xdfb9103f,
    0x3e613f29,0x46fa8004,0x93f202fe,0x3fe605fc,0x7c40df30,0x4407fd0f,
    0x4f9801ff,0x23fb17e2,0xfff505fd,0x205fc85f,0x017fa6fa,0xf30017fc,
    0x303fd83f,0x07fee3ff,0x83f89fe6,0x5fc80ff8,0x03fa07ec,0xff702ff4,
    0x04fd8001,0x201a98df,0x01fe44fd,0x03fdc9fb,0x07fccdf7,0x13f67f98,
    0xe800ffa8,0xf913ea0f,0xfb81bf65,0x207fa87f,0x01bf24fd,0x2fec3fe6,
    0xfd81ff90,0xfe8ff303,0x0547f986,0x4fe82ff8,0x7037c3f4,0x1bfa01ff,
    0x3fe205b7,0x7d41fb02,0x41ff880f,0x9ff307fb,0xfe817fc4,0x6c0bfe64,
    0xd81bf25f,0x44fa807f,0xc97e44fa,0xfff901ff,0xf105fd09,0x027fd43f,
    0x1ffb9ff6,0x7fb0bfd0,0xff31fe60,0x2007f987,0xff712efd,0x3e62fc45,
    0x837fe204,0x7dc1ffc8,0x00ffc80f,0x27fc45f7,0x7f40ffa2,0x13ffaa1d,
    0x7e443ff9,0x87ffe61f,0x3e20ffc8,0x1ffdc45f,0x3e607f40,0xff88ff46,
    0x3fff220e,0x077dc4ff,0x3ff213f6,0xffd3109c,0x306ffc43,0x7fb03ff9,
    0x3f21fe60,0xca9fe61f,0xfffff304,0x44f989ff,0x7fd403fa,0x83fffddf,
    0xecbdffe8,0x13e201ff,0xffb9fff5,0x6fffc40b,0x444fdffe,0xfffceffd,
    0x77f77cc2,0xfa83fffd,0x5fffddff,0xfd04fa80,0xff51bea5,0x17fffddf,
    0x7f447ffd,0x00efecdf,0xfffffffb,0xfff505ff,0x205fffbb,0x0ff303fd,
    0x27f99bfa,0x3fa607fc,0x2fb84eff,0x74c00fe4,0x201effff,0xefffffd8,
    0xea87e801,0x9803dfff,0xfc9efffc,0xbffff704,0xfb1df305,0x6c403dff,
    0x002fffff,0x3fa601fd,0xfe881dff,0x76c1dfff,0xbefffc80,0x7ffedc00,
    0x3a602dff,0x201effff,0x0ff303fd,0x3fccffe6,0x13100ff9,0x0aa054c0,
    0x00133100,0x2000d544,0x00262029,0x440004c0,0x00988001,0x10004cc0,
    0x03930059,0x80100660,0x33100019,0x00cc4001,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x7000665c,0x004cb879,0x1e543991,0x300f3220,0x00f2e199,
    0x664c9930,0xcccccccc,0x9911cccc,0xcca64c00,0xabcccccc,0xc8b22000,
    0x4597002c,0x2e003ccc,0x007322cc,0x95003990,0xcccc9859,0xcccccccc,
    0x1664f2a3,0x5532cb80,0x7005ff98,0x4ff985ff,0x7d46fe80,0x3ffee00f,
    0xfb9bee00,0x97fa000f,0xfffffffa,0x2fffffff,0x7d400ff3,0xfffffff7,
    0x003bffff,0x0fffc9fb,0xfff27ec0,0xa7ffc00f,0x22002ff8,0x7fdc02ff,
    0xfffffa85,0x6fffffff,0x01ffdbf2,0x0dfb4fe8,0xf8805ff7,0x05ff904f,
    0x3e207fe4,0x3fff602f,0xf893f602,0x3ff1003f,0x6e66664c,0xcccccdff,
    0x5400ff31,0x999bff7f,0x1dffdb99,0xff27fe40,0x49fb00df,0xa802ffff,
    0x5ff14fff,0x017fc400,0x3260bff7,0xcccccccc,0x5bf26ffd,0x9fd003ff,
    0x7ff41bf6,0x803bf600,0xffa80ffe,0x7c07fd02,0x3fe04fcf,0xb8037ec2,
    0x1ff3006f,0x2007f980,0x807ff7fa,0xfd884ffb,0x3fffe4ff,0xff27ec04,
    0xffb009fd,0x00bfe29f,0xf702ff88,0xfb0000bf,0xffb7e43f,0x229fd003,
    0x0bff3009,0xf1007fea,0x04ff88bf,0x6fcc17f2,0x1ff307f9,0xe801ff98,
    0x1ff3003f,0x2007f980,0x007ff7fa,0xfffb8dfb,0x3fbfe4fe,0xf93f601f,
    0x7c407fbf,0x5ff14fde,0x417fc400,0x80004ffb,0xb7e42ffc,0x9fd003ff,
    0x217fdc00,0xf7004ff8,0x2037f47f,0x27f907fa,0x06fb81ff,0xff9809fd,
    0x01ff3000,0x99717f98,0xff7fa817,0x21ff7007,0x4fc8eff8,0x81bfabfe,
    0x3a7fe4fd,0x373ea02f,0x005ff14f,0x3ee17fc4,0xfb80004f,0xff6fc84f,
    0x013fa007,0x7ec1ffd0,0x47fec006,0x7c400ffc,0xfb1fe81f,0x2e07fb07,
    0x02fe407f,0x9801ff30,0xfffff9ff,0x7fdfea1f,0x227fc803,0xff93f22e,
    0xfb04ff9a,0x27e4ffc9,0x29fb3fb0,0x22002ff8,0x13fee2ff,0x17fe6000,
    0x03ffb7e4,0x98009fd0,0x03ff54ff,0xffeff880,0x887fd002,0x3e17ee7f,
    0x03ff101f,0xf30017fc,0xfff9801f,0x0fffc9be,0x00ffeff5,0x9f901bfe,
    0x1ffc97fc,0x27fe4fd8,0x2df107f9,0x05ff14fd,0xfb97fc40,0xf880004f,
    0x2df900ef,0x9fd003ff,0xd3ff7000,0x3ea0007f,0x3ee004ff,0xff12fd45,
    0x7ec07f98,0x800ff504,0x7cc00ff9,0x97fcc0ef,0x407ff7fa,0x6403ffc8,
    0xfe8bfe4f,0x3fe4fd86,0x7f503fd1,0x17fc53f6,0xf75ff100,0xd00007ff,
    0xb7e403ff,0xffffffff,0x04ffffff,0x0dfffd00,0x02ffe800,0x5fb1fe60,
    0x17ee2fe8,0x3f60ff50,0x07fcc004,0x740bfe60,0x3feff53f,0xfeeeeeee,
    0x4fc806ff,0x4ff98bfe,0x23ff27ec,0xb0fd84fc,0x00bfe29f,0xeffdff88,
    0x360001ff,0xb7e402ff,0xffffffff,0x04ffffff,0x01fff300,0x7fffe400,
    0xf83fe000,0xfb27e40f,0x885ff007,0x7cc000ff,0x07fcc00f,0x2ff54fc8,
    0xffffffff,0xf9003fff,0x3f217fc9,0xff93f61f,0x6f88ff31,0x17fc53f6,
    0x7ffff100,0x0001dfd1,0xf9007ff7,0x26673fed,0xfe999999,0x17f60004,
    0xfbff9800,0x4bf6005f,0x26fa86f9,0x5fc800ff,0x4c002fdc,0x3fcc00ff,
    0x5fea9f90,0xaaaaadff,0x27e40019,0x4dfd05ff,0xe87fe4fd,0xfd8fee1f,
    0x4005ff14,0x3e63fff8,0x7fcc005f,0x3edf9005,0x29fd003f,0x3f6003ca,
    0xbff10005,0x5c00ffee,0xf109f74f,0x4c01be6f,0x00bfa0ff,0x3003fe60,
    0xaa7e40ff,0x0007ff7f,0x5ff27e40,0x3f69ff30,0x4fc87fe4,0x14fd83f6,
    0x7c4005ff,0x03ffb83f,0x001dff10,0x01ffdbf2,0x0dfb4fe8,0x8002fec0,
    0x3ff60ffd,0xfd6f9801,0x3ea7fa03,0x4cffa004,0xff30007f,0x207f9801,
    0x3eff54fc,0x3200003f,0x640bfe4f,0x3e4fd9ff,0x7c5fe61f,0xff8a7ec6,
    0x0bfe2002,0x7400fff4,0x3f2000ff,0x3a007ff6,0x400dfb4f,0xfb8005fd,
    0x037fc41f,0x207f8ff8,0x002fcbfb,0x027e57ee,0x400ff980,0x53f207f9,
    0x007ff7fa,0xff27e400,0x7ef7f405,0x5fd07fe4,0x14fd87f7,0x7c4005ff,
    0x0dff102f,0x4002ffc8,0x007ff6fc,0x005b93fa,0xf30017f6,0x13fea09f,
    0x817f3f60,0x000fecf9,0x07fe3fe2,0x007fcc00,0x4fc81fe6,0x00ffeff5,
    0x3e4fc800,0x3ffe602f,0xf707fe4f,0x4fd81fd9,0x44005ff1,0x3fee02ff,
    0x007ff704,0x0ffedf90,0x09b27f40,0x1002fec0,0xffc80dfd,0x1fffdc02,
    0x001bffe0,0x001bf7f2,0x4c00ff98,0x553f207f,0x0007ff7f,0x5ff27e40,
    0x24fffc80,0x7ffcc1ff,0xff14fd85,0x33333337,0x00bfe213,0xff985ffb,
    0x9999999d,0x5bf21999,0x9fd003ff,0xfd8007ee,0x03ff6005,0x401ffd10,
    0x6c00fff8,0xf98003ff,0x260003ff,0x3fcc00ff,0x5fea9f90,0x200003ff,
    0x00bfe4fc,0x1ff93ffa,0xfd82ffe8,0xffffff14,0x227fffff,0x7fc402ff,
    0x3fffee0f,0xffffffff,0x3edf91ff,0x29fd003f,0x2fec0009,0x003ffb80,
    0xfe80bff3,0x01ffb806,0x001ffd00,0x2007fcc0,0x53f207f9,0x007ff7fa,
    0xff27e400,0x49ff3005,0x0ffb81ff,0xfff14fd8,0xffffffff,0x200bfe27,
    0x3fee6ffa,0xffffffff,0xdf91ffff,0x7f400ffe,0x00000004,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x79951000,0x33332e03,0x2ccccccc,0x99999999,0x32399999,0xabcccccc,
    0x66666402,0x009acccc,0x66666664,0x990000ab,0x32600007,0xaaaaaa82,
    0x80aaaaaa,0x00bdeeca,0x015ee5cc,0x440b32a2,0x406a602a,0x002bdcb8,
    0x0179b973,0x057b9710,0xa8d44aa6,0x7ffdc0bd,0x7f40dfff,0xffffffff,
    0xfffff4ff,0xffffffff,0x3fffffe7,0xf03effff,0xffffffff,0x3e20bfff,
    0xffffffff,0x3ea000df,0xe80000ff,0xffffd84f,0x1fffffff,0x3fffff62,
    0xfff902ff,0xf703dfff,0xa89fffff,0x213f607f,0xdffffffb,0xffffb100,
    0x7e407fff,0x40dfffff,0xf5bf57fc,0x77fdcdff,0x20effdab,0xcccccefe,
    0xdff2cccc,0x99999999,0x337fe399,0xfffedccc,0xaaadff85,0x6ffecbaa,
    0xcccdff88,0x00effeec,0x009fdfb0,0xc84ffc80,0xeeeeeeee,0x3ff60fff,
    0x1ffeb89c,0x5ccdffd4,0x67fd46fe,0x2a2ffb99,0x713f607f,0xfd535dff,
    0x26fbfa0d,0xc80ffeb9,0xffb99cff,0x7d5ff20e,0xf32ecffe,0x49ff107f,
    0x7fc004fe,0x03ff8003,0xff0fffa2,0x85ff9007,0x3ea02ff8,0x9ff8803f,
    0x3ea0007f,0xf88004ff,0x20ffea3f,0x27e45ff8,0xff98ffcc,0x3ea6fa82,
    0xf893f607,0x43fe883f,0xff881ff9,0x4417fcc3,0x546624fe,0x1ff706ff,
    0x4fe9bf60,0x001ffc00,0x7ec01ffc,0x200ffe0f,0x7fc44ff8,0x4037e402,
    0x005fd5fb,0x09fbff10,0xfc8bfb00,0xd8ff900f,0x7dc1304f,0x7d473606,
    0xfc93f607,0x98ff700f,0xb13fa03c,0x07fd40bf,0xd902ffa8,0xfd3fd40b,
    0x03ff8009,0xf003ff80,0x801ffc9f,0x17fc46fd,0x3a01fee0,0x000df93f,
    0x009f95fb,0x6540ffb8,0xf71fe603,0x7e4017df,0x81fea004,0x813f64fd,
    0x51000ff9,0x02fe89fd,0x7d407fe2,0x3f60000f,0xf0013fa6,0x7ff0007f,
    0xff9bf200,0x88bff003,0x27ec02ff,0x7cc3fe60,0x57ee001f,0x3e2004fc,
    0xbf70002f,0x9dffff90,0x2003fe83,0x93f607fa,0xfffffffe,0xb881ffff,
    0x4fffffec,0x3fe00ffc,0x000ff502,0x9fd27fc4,0x003ff800,0xf5003ff8,
    0x6401ffcf,0x17fc43ff,0xc803ff70,0x8027f45f,0x09f90ff9,0x8002fec0,
    0xfb502ffa,0x7fc9ffff,0x81fea002,0x3bbfe4fd,0xeeeeeeee,0x77fffdc1,
    0x3e24fdbc,0x817f401f,0x320007fa,0x33bfa0ff,0x0ccccccc,0x33333bfe,
    0x3e3ccccc,0x1ff3003f,0x2aaab7fe,0x85ffecba,0xeeeeeff8,0xf801fffe,
    0x803fdc2f,0x013f22fe,0x4000ffcc,0x73004ff9,0x0ffa7ffd,0x3a07fa80,
    0x000bfa4f,0xb02b7fee,0x402ff89f,0x0ff501ff,0xd0bfee00,0xffffffff,
    0x7fffc3ff,0xffffffff,0x4c00ffe5,0xfffff2ff,0x9fffffff,0x3ffffe20,
    0x01efffff,0x7fc43fd4,0x3227e402,0x0df9004f,0x20bff500,0x6dbf6018,
    0x4cbb204f,0xd93fe07f,0x3a04c04f,0xd13fa04f,0x03fcc07f,0xf9000ff5,
    0x99dfd07f,0x41999999,0xaaaaadff,0x3fe2aaaa,0x23ff3003,0xfeeeeeff,
    0x3e200aff,0xcbaaaacf,0x3f603ffe,0x4c0dfb04,0x804fc86f,0x44003ff8,
    0x0ffe05ff,0x0ffbb7dc,0xff32ff88,0x5c9ff301,0x8df900ff,0x9ff303ff,
    0x3f207fc8,0x001fea06,0x3fa07ffb,0x01ffc004,0xa801ffc0,0x307ff0ff,
    0x7c403dfd,0x0ffe402f,0x6666ffc4,0x881ffdcc,0x04fc81fe,0x4000ffa8,
    0x7fec06fc,0xfd1ffc40,0x07fec43b,0xfff98bff,0x2a177f44,0x437e41ff,
    0x7c45fff9,0x17fdc0df,0x01fea995,0xd017fec4,0x3ff8009f,0x003ff800,
    0x81ffcff9,0xf100efe8,0x09ff005f,0xfffffff7,0xf909ffff,0xfd99999d,
    0x3fa0199d,0x02fe8004,0x7677ffc4,0x3fe60eff,0x41fffdef,0xefedfffb,
    0x7ffcc4fc,0x984ffecf,0xefecdfff,0xfffa86fd,0x642ffecd,0x100ff57f,
    0xfe803ffd,0x01ffc004,0xe801ffc0,0x980ffe5f,0x5ff105ff,0xfd0dfb00,
    0x5555555b,0xffc81ffb,0xffffffff,0x1ff980ff,0x801ff800,0x4fffffc8,
    0xbffffb10,0x3fffee03,0xc884fb8d,0x203fffff,0x14fffffa,0xffb101ff,
    0xff905bff,0xfd101fea,0x09fd001d,0x8003ff80,0xffb803ff,0xf900ffe2,
    0x05ff107f,0xff98bfd0,0x21ffc401,0xccccccca,0xb80ccefe,0x1550007f,
    0x00099800,0x0c400266,0x00098800,0x98000266,0xfb000001,0x13fa001d,
    0x0007ff00,0xff9807ff,0x7401ffc6,0x17fc40ff,0xf90ffe60,0x01bfa00d,
    0xfc809f90,0x00000005,0x00000000,0x00000000,0x54000000,0x99999aff,
    0x013fa199,0x33339ff0,0x21333333,0xa9999cff,0x7c1fffda,0x5ff9803f,
    0x4ccdffc4,0x0effc999,0xfa801ffc,0x13f2001f,0x10009fb0,0xa6540399,
    0x5eeeeee8,0x77777771,0x57777777,0x00000000,0x00000000,0xffffffd0,
    0x7f4fffff,0x7fffc004,0xffffffff,0xffffff6f,0x03dfffff,0x3f2007ff,
    0x3fffe23f,0xffffffff,0x8007fd41,0x32004ff8,0x017fc04f,0x901ffc40,
    0x3fffe2ff,0xffff56ff,0xffffffff,0x00000bff,0x00000000,0xfff88000,
    0xffffffff,0xf0013fa7,0xffffffff,0x3fedffff,0xdeffffff,0x400ffe02,
    0xff10fff8,0xbdffffff,0x0017f607,0x32001ff9,0x07fe204f,0x80ffe200,
    0x555517fc,0x44444555,0x88888888,0x00000088,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x23000000,0x59b711a8,0x0c3cdb88,0x501aa800,0x4c2a6035,
    0x50d4c02a,0x55555555,0x80d54455,0x23510aa9,0x800bdca8,0x76c00098,
    0x6c000000,0x32a59705,0x132a7973,0x39950002,0x00000000,0x2e200000,
    0xff3bf35f,0x3fe6bfff,0x33f26fff,0x417f2000,0x23ff06ff,0x3fe00ff9,
    0x3fffffe1,0x7ec7ffff,0x32ff440f,0xfffff3bf,0x04fb805f,0x6413fee0,
    0xffffffff,0x0bd05fff,0xdb7e57fa,0x7e4ff95f,0x2c40beff,0x000017fa,
    0x00000000,0x26bfff93,0xfd9befff,0xfc9bffdf,0x3bfff73f,0xf50ff500,
    0xe8ff30ff,0xa8df502f,0xfcaaaaaa,0x22ffc44f,0x3be60efd,0xffeb9cff,
    0x8013ee00,0xfc80fffe,0xffffffff,0x362f25ff,0x57fa4b8d,0x32bfb6fc,
    0xfffffd7f,0x8ffb7bff,0x00000ff8,0x80000000,0x22dfffea,0xffd86ff9,
    0x3665fc85,0x200befff,0x7ffe41ff,0x3f227dc1,0x2009fb05,0xff505fe8,
    0xf307fea5,0x07ff10df,0xfa8027dc,0x00003fcd,0x7ffffffc,0xb5b97fa7,
    0x775ff2bf,0xffffdb9a,0x03e986ff,0x00000000,0xffff9100,0x05ff3019,
    0xdf703ff7,0x9fffd710,0xfe87fb03,0x20ff44fc,0x7fc40ff8,0x01dfb000,
    0x1ffcf7e4,0xfe80ffcc,0x4013ee04,0x006f8afd,0xbffc9800,0x29b27ec1,
    0x0edf54fc,0x01ef6dc4,0x00000000,0x3ff66000,0x7fcc02df,0xa80ff981,
    0x7fed407f,0x897ea1df,0x3e26f9ef,0xfb87fd07,0x01ffb006,0x05fffe88,
    0x3f201ff3,0xf9333314,0x9813333b,0x000bf67f,0x1dddd100,0x23f72fb8,
    0x009f33fa,0x00000000,0xf9000000,0x3e60039f,0x2a0ff307,0xff91007f,
    0xfa87fc4b,0x17ea1ff4,0x0bfa37d4,0x4007ff20,0xf300fff9,0xfca7e40f,
    0xffffffff,0x51fe45ff,0xaaaa98df,0x1aaaaaaa,0x22fccfec,0x7cc131fa,
    0x00007f11,0x00000000,0xfff90000,0x0ff30017,0x3fd41fe6,0x2fff5c40,
    0xd8fe4bfa,0x2205fb2f,0x01ff11ff,0x2002ffa8,0xf301fff9,0xfca7e40f,
    0xffffffff,0x03fe25ff,0x7ffe43ff,0xffffffff,0x00792545,0x00000000,
    0x00000000,0xfffda800,0x41fe601d,0x0ff507f9,0x177ffe4c,0x2e7fa7dc,
    0x6401ff4f,0xa80bf74f,0x7f4003ff,0x0ff306ff,0x9f7027e4,0xfb85fb80,
    0x3bbbbae5,0x04eeeeee,0x00000000,0x00000000,0x26000000,0x40befffc,
    0x0ff307f9,0x3faa1fea,0x3e601dff,0x3be65f9e,0xb7cc05fa,0x3fe601fe,
    0x477e4005,0x07f984fe,0x4fb813f2,0x7c417fc0,0x0000000f,0x00000000,
    0x00000000,0x2e200000,0xf31cfffe,0x541fe60f,0xffff917f,0x33fa0017,
    0x17effc3f,0x037dff40,0xa800bfd1,0x83ff51ff,0x13f207f9,0x0cc04fb8,
    0x00001310,0x00000000,0x00000000,0x00000000,0x7cd7ff6a,0x2a0ff307,
    0x05dff97f,0x83fff900,0xb800fffd,0xfd103fff,0x7fc4001d,0xf307fe44,
    0x7027e40f,0x0000009f,0x00000000,0x00000000,0x00000000,0x4d722000,
    0x20ff307f,0x003997fa,0x5c3ffcc0,0xff1006ff,0x3bfee01f,0xfffffffe,
    0x3e21bf62,0xc81fe65f,0x013ee04f,0x00000000,0x00000000,0x00000000,
    0x00000000,0x7f983fcc,0x0000ff50,0xff885ff8,0x81bf6003,0xfffffffb,
    0xff52ffff,0x4cbfea03,0x013f207f,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_29_usascii_x[95]={ 0,2,1,0,0,1,1,1,1,1,0,1,2,0,
2,0,1,2,0,1,0,1,0,1,1,1,2,2,1,1,1,1,1,-1,1,1,2,2,2,1,2,2,0,1,
1,1,1,1,2,1,2,1,0,2,0,0,0,0,0,1,0,0,0,-1,1,0,1,1,0,0,0,0,1,1,
-2,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,1, };
static signed short stb__arial_29_usascii_y[95]={ 23,4,4,4,2,4,4,4,4,4,4,7,20,15,
20,4,4,4,4,4,4,4,4,4,4,4,9,9,7,9,7,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,26,4,9,4,9,4,9,4,9,4,4,
4,4,4,9,9,9,9,9,9,9,4,9,9,9,9,9,9,4,4,4,11, };
static unsigned short stb__arial_29_usascii_w[95]={ 0,4,7,15,14,21,16,3,7,7,10,13,3,8,
3,8,13,8,14,13,14,13,14,13,13,13,3,3,13,13,13,13,25,19,15,17,16,14,13,18,15,3,11,17,
13,19,16,19,15,19,17,15,16,15,18,25,18,18,16,6,8,6,12,16,5,14,13,12,13,14,9,13,12,4,
6,12,3,19,12,14,13,13,8,12,8,12,13,19,13,13,13,9,3,8,14, };
static unsigned short stb__arial_29_usascii_h[95]={ 0,19,7,20,24,20,20,7,25,25,9,13,7,3,
3,20,20,19,19,20,19,20,20,19,20,20,14,18,14,9,14,19,25,19,19,20,19,19,19,20,19,19,20,19,
19,19,19,20,19,21,19,20,19,20,19,19,19,19,19,25,20,25,11,3,4,15,20,15,20,15,19,20,19,19,
25,19,19,14,14,15,20,20,14,15,20,15,14,14,14,20,14,25,25,25,5, };
static unsigned short stb__arial_29_usascii_s[95]={ 255,248,184,13,87,137,159,176,32,1,165,
124,180,163,159,246,176,134,1,29,116,206,94,131,123,66,243,249,1,151,35,
145,61,96,80,228,45,30,16,193,233,229,1,194,180,160,143,173,118,102,62,
212,84,190,65,39,20,1,212,54,57,47,138,172,207,213,109,172,80,198,220,
43,101,243,40,230,114,15,111,228,159,145,247,159,136,185,69,49,97,122,83,
22,18,9,192, };
static unsigned short stb__arial_29_usascii_t[95]={ 1,27,88,27,1,27,27,88,1,1,88,
88,88,84,84,1,27,48,68,27,68,27,27,68,27,27,68,48,88,88,88,
68,1,68,68,1,68,68,68,1,48,48,27,48,48,48,48,1,48,1,68,
1,48,27,48,48,48,48,48,1,27,1,88,84,88,68,27,68,27,68,27,
27,48,27,1,27,48,88,88,68,1,1,68,68,1,68,88,88,88,1,88,
1,1,1,88, };
static unsigned short stb__arial_29_usascii_a[95]={ 115,115,147,231,231,369,277,79,
138,138,162,243,115,138,115,115,231,231,231,231,231,231,231,231,
231,231,115,115,243,243,243,231,422,277,277,300,300,277,254,323,
300,115,208,277,231,346,300,323,277,323,300,277,254,300,277,392,
277,277,254,115,115,115,195,231,138,231,231,208,231,231,115,231,
231,92,92,208,92,346,231,231,231,231,138,208,115,231,208,300,
208,208,208,139,108,139,243, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_29_usascii_BITMAP_HEIGHT or STB_FONT_arial_29_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_29_usascii(stb_fontchar font[STB_FONT_arial_29_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_29_usascii_BITMAP_HEIGHT][STB_FONT_arial_29_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_29_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_29_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_29_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_29_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_29_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_29_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_29_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_29_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_29_usascii_s[i] + stb__arial_29_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_29_usascii_t[i] + stb__arial_29_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_29_usascii_x[i];
            font[i].y0 = stb__arial_29_usascii_y[i];
            font[i].x1 = stb__arial_29_usascii_x[i] + stb__arial_29_usascii_w[i];
            font[i].y1 = stb__arial_29_usascii_y[i] + stb__arial_29_usascii_h[i];
            font[i].advance_int = (stb__arial_29_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_29_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_29_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_29_usascii_s[i] + stb__arial_29_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_29_usascii_t[i] + stb__arial_29_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_29_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_29_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_29_usascii_x[i] + stb__arial_29_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_29_usascii_y[i] + stb__arial_29_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_29_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_29_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_29_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_29_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_29_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_29_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_29_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_29_usascii_LINE_SPACING
#endif

