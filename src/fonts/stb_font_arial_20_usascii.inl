// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_20_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_20_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_20_usascii_BITMAP_WIDTH         256
#define STB_FONT_arial_20_usascii_BITMAP_HEIGHT         62
#define STB_FONT_arial_20_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_arial_20_usascii_FIRST_CHAR            32
#define STB_FONT_arial_20_usascii_NUM_CHARS             95

#define STB_FONT_arial_20_usascii_LINE_SPACING          13

static unsigned int stb__arial_20_usascii_pixels[]={
    0x00000000,0x74c80000,0x0fbb29dd,0x000001e4,0x00000000,0x00000000,
    0x00000000,0x22353000,0x002a6110,0x8d441f44,0x10188008,0x3f21f101,
    0x9fb07a84,0x75c400f2,0x400aceff,0x36dd535e,0x7ff5c1ae,0x77edc02e,
    0x2e5b802c,0x5c0ef5c6,0x75c35c05,0x5c402def,0x9802cefd,0x05d01dfc,
    0x1befdb88,0xcefeca80,0xbbfdfb00,0x3fbfb7a9,0x744f8805,0x5c5ddfff,
    0x883f53fe,0x3263c83f,0x7d43d42f,0xb801f11c,0xedb9bdff,0xdb6c001f,
    0xdbccf985,0xcffe880f,0x26c05feb,0x3dcf5c99,0x88f600fc,0x4fecbefe,
    0xd97bfd10,0x56fc40bf,0x440b907d,0x3fecbefe,0x32f3bf60,0x897e42ff,
    0x21bfd4fd,0x27c403fb,0x97f665f9,0x9f10adf9,0x83cc0fa8,0x3643d44e,
    0x07f90264,0x81101fc8,0x2bb0bb6d,0xfe84f8ab,0x3a05fa82,0x3e4d8fa2,
    0x87e016e1,0x81fd82fa,0x04fa81ee,0x20be21f7,0x207f6079,0x82fc81fd,
    0x317e0fd8,0xdd03fa9f,0xbf14f880,0x07ea5f98,0x9b0bd1f2,0x90f513a0,
    0xf501f30b,0x7dc61a89,0xdb6c5e81,0x02574f85,0x2fb80bee,0x266be662,
    0x9747d0af,0x23cc01f8,0xb85d307c,0x20bf202f,0x203f51fb,0x102fb81f,
    0x203fa89f,0xf07f32f9,0x03f21ba9,0x05f34f88,0x067ee2bf,0x30be25f3,
    0xf517603f,0x213a0bb0,0x37ffea4e,0xbd07d0fb,0xdd0bb6d8,0x03ec0571,
    0xffffd27c,0x532bffff,0x700b70f8,0x2003fa8b,0x427c406d,0x205faee8,
    0x8007c83d,0xf50400fc,0x213a9d05,0x53e200fb,0xfd5d81fa,0x2ebd0fff,
    0x17207a87,0x320bb0f5,0x27f33cc6,0x216e7fd8,0x85db6c5e,0xf00ceff9,
    0xb70dd00b,0x36fe635c,0x5d003f16,0x015bffb0,0x82fc027c,0x35c04ffa,
    0x36c00374,0x3e13e600,0x80fb0dd4,0xf10fe4f8,0x7b807dcb,0x5c0d909d,
    0x81f43d46,0x8bf35c7b,0x3a1e65f9,0x105db6c5,0xf887fff9,0x4d87d804,
    0xc8b26132,0x03e20225,0x0f7ffed4,0x1f600fe2,0x1013fbea,0x8005f81f,
    0xcccca85f,0x29f31ba3,0x202fc0fe,0xf51b64f8,0xf8807dcb,0x206d81fb,
    0x4cf51de8,0x41f500ed,0xf883f34d,0xb17a1ea4,0xb970176d,0xd805f87f,
    0x00fa2f86,0x27fe47e2,0x32a201aa,0x4027c2ff,0xfda7dc6e,0x42e82f8a,
    0x86e8006e,0x2a6ffffc,0xd4fea9df,0x03fb35df,0x3bea4f88,0x3ee5ffcb,
    0x741bf600,0x7a9fd405,0x1fa807ee,0x7cc3dcbe,0xb17a1722,0x2570176d,
    0x74036c7e,0x3bbbfb25,0x57204eef,0x321e88f9,0xbf100984,0x45f805e8,
    0x07eff45e,0x301f6264,0x7400fc83,0x75ffe4c6,0x3dff9bd4,0x0fe20e98,
    0x49d19fb5,0x0fea00fb,0x17f3036c,0x01fb89ea,0x7c9f41f7,0x05f10fb8,
    0x8bb6d8bd,0x1f2571d8,0x1fd403f7,0x5f955f95,0x5c3e2035,0xf82f9326,
    0x3f91f604,0xf88fee18,0xa82ffc44,0xf880fdc6,0x3a017d46,0x5ea74106,
    0xf517c402,0x2e3f8043,0x403ea00f,0xf51b207b,0xb1b207d0,0x6f987eab,
    0x362f417a,0x2ebf0bb6,0x0ee889d2,0x2dc0ee88,0x5c9900d7,0xd83cd725,
    0x444f881f,0x3effa0ee,0xefd86e86,0x3a21f880,0xd81fc80f,0x00df302f,
    0x74017a9d,0x360febbe,0x1f717d45,0x1f302f40,0xb0f51760,0x2f717609,
    0xffebaee8,0x8bd00eeb,0x9f90bb6d,0xd103f979,0x1df7557f,0x2026c9b0,
    0x2e9e60f8,0x33fa60b7,0x881ffbab,0xffeaabff,0xeaaefb82,0x3d80efdf,
    0x75d677cc,0x2f7f604f,0x802ffdba,0x2600bd4e,0x7d41effd,0x7dc4fdce,
    0x201fed80,0xa89d02f8,0x87f05d87,0x1bfb12f9,0x204c9df7,0x05db6c5e,
    0x405bfff9,0x0ceffeb8,0x201f45f0,0x0eeed84d,0x7f6c407b,0x32200dff,
    0x4fdbeffe,0x51efffb8,0x930b703f,0x8015bffd,0x04efffdb,0x001dcae0,
    0xcdb98022,0xdc80fb82,0x9d05d801,0xa86c87a8,0x002fb80f,0x44f81db1,
    0x3c80bb6d,0x0c004400,0x20150026,0x88004c19,0x4c088000,0x40202205,
    0x00004018,0x00000003,0x00000000,0x89f03f10,0x3e86c87a,0x44033f60,
    0x3f6a1fe9,0x3f6dfd72,0x0003503e,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xd52dc000,0xf987a83f,0xd500d52e,0xffd99bff,
    0x2a1db819,0x059973cc,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x40000000,0xd305b70d,0x0164f6a0,0x579b9550,0x00000001,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xd8000000,0x41eed443,0x36e2004c,0x3332e02d,0x7bb702cc,
    0x00e6d401,0x4166d403,0x05d100eb,0x3bbbb600,0x3d71eeee,0x5d897540,
    0xca6436e0,0xeb9f4405,0xeeeeeeee,0x0fae0d73,0x7775cfa2,0x4c83cdee,
    0x777775c0,0x7775c0be,0x06c82cee,0x9fb13a00,0x005e8bfb,0x09fb7df1,
    0x0fbbbbbe,0x41ff33f6,0xa85fccfe,0xfdcff887,0xf9807e44,0x05f75cc3,
    0x6666665c,0x01df11ff,0x84fa8df1,0x7d57a3fa,0x6547ea02,0xcccdfdcc,
    0xdfd03f52,0x33f25f50,0x45ffdccc,0x667e405e,0x321ffedc,0xefeecccf,
    0xe8001f60,0x2fa87ee4,0x07e4017a,0x02f883f7,0x0fe22fa8,0x20fd43f5,
    0x260fb87b,0x4c03f22f,0x2efbe63f,0x9f7000fe,0x1fd84fa8,0x17e21fd8,
    0x036c0bf0,0x0fe205f5,0xfc81f9f1,0x3f201f90,0x0f9017a2,0x707c9be6,
    0x3003ecbf,0x85e93a35,0x0d457a5e,0x21fcc3b8,0x85e800fa,0x3e23e429,
    0xe827f223,0x03f25e85,0x88f91fcc,0x05f9804f,0x81fd43fb,0x81fd0fe8,
    0x2203f208,0x80bea03f,0x17c7dc5e,0x300fc97a,0x2622f49f,0x87ec0f90,
    0x6cbee07c,0xbfffd007,0x3641fc9f,0x0bfff9dd,0x2f707f20,0x044fe029,
    0x17d43f70,0x3e29fff9,0x03f26c83,0x907b1fcc,0x00ef880f,0x01be2df1,
    0xd03f9bf3,0x7dc1fccb,0xc80bea00,0x225eaec7,0x5403f23f,0x5f997a2f,
    0x326e81f2,0x3ed3e607,0xfd997e40,0x4f907f14,0x07f70dfe,0x7ec1fedc,
    0x7c44fffe,0x902effda,0xf707fbbf,0x64ff0bd0,0x007f300f,0x01fe80bd,
    0x007e5fd4,0x5e81ffe4,0x202f4374,0x83ea02fa,0x0fccf73f,0x733333f9,
    0x9f35e8ff,0x49f507c8,0x7db7c07c,0xa7cc5f80,0x3a7b82f9,0xe883f40f,
    0x12fe83ff,0x6ffcc5f9,0xfb81fd9a,0x87b83ffe,0x43fee2fb,0x07f300fc,
    0x3f601fd8,0x07ffb002,0x7407fe20,0x5f307dc5,0x2202fa80,0x3e61f32f,
    0xfffc8f71,0x740bffff,0xefc84f9d,0x20fffeee,0x7dbf407c,0xa7c1fcc0,
    0x3a7c82f8,0x5400fc86,0x4cbd004f,0x7ec4f87f,0x0f713ea1,0xf9dfdfb1,
    0x3f9807e4,0xfb80bf60,0x01be2004,0xbd06ffe8,0x01f23f88,0x29d00bea,
    0x45d9fc6c,0x4fcaabfc,0x903ffdd0,0x179ddddf,0xdb7407c8,0x740fd407,
    0x4d907f14,0x800fb84e,0x21f7006e,0x7c7c84f8,0x03dc6d84,0x5cd71593,
    0x205f301f,0x17e602fb,0x64017e00,0x5e84fbaf,0x2013e6d8,0xeb6402fa,
    0x642faec4,0x7427dc0f,0x07c86ecf,0x2bf01f20,0x41fc407d,0x97613e4f,
    0x0dc7d86e,0x903513e4,0x27c84f8f,0x20fb82f8,0x9976007b,0x203f502f,
    0x03be206d,0x26017e00,0xbd07f64f,0x01f53f50,0xfa805f50,0x7cfdc2f9,
    0x7ec07e40,0x43fab743,0x81f2007c,0xf00fb3fa,0x1f24fa8d,0x207f47f1,
    0x27c3746f,0xdb13e1ba,0xe85d8bf0,0x22ec3dc5,0x417e23f8,0xe80f607e,
    0x0bf0001f,0x7fc46f88,0x6e7c17a0,0x805f5005,0xcf887cf8,0xf880fc86,
    0x1fd97a0f,0x07c801f2,0x403ecff1,0x4feb9dfa,0x1beabbe2,0x3fd35ffd,
    0xfda9cfa8,0x754e7d40,0x4cefcc1f,0x4e7d41fd,0x5fd41fd9,0x3aa2fe61,
    0xdabdfb85,0xf70002ff,0x9999999d,0x3602fc03,0x3a5fa81f,0x005fd905,
    0x3fa00bea,0xf909fd05,0x5e97ea01,0x007c9be2,0x373333f2,0x333f61ff,
    0x3aa1cccc,0x7cc4dbff,0x66741dff,0xfb500cff,0x3f6a039f,0xffd301ef,
    0x3ff6a05d,0x45fe881c,0x700cffeb,0x805bfffd,0xffff904d,0x407fffff,
    0x80fee05f,0x220bd3fc,0x0bea007f,0x7e40fee0,0x3600fc82,0x3fa8bd2f,
    0x7fe400f9,0x6c0cefff,0x2fffffff,0x40010008,0x44001000,0x20011000,
    0x00080000,0x00df000c,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xe880f5c0,0xed80bd72,0x37620d93,0x99999911,
    0x5c7a6199,0x365d100e,0xdddddd54,0x3bbae1dd,0x993eeeee,0x1312ea80,
    0x337bbbb2,0x005e9801,0x5bb510f2,0x9807a200,0x154401aa,0x22044044,
    0x554401aa,0x880aa800,0x82603109,0x35111003,0x3e203bf2,0x2205ff93,
    0xd10fb4ff,0x7777445f,0x5f50ffee,0x9fcc03f2,0x9999f75e,0x667e4999,
    0xbd2ccccc,0x5f53fb80,0x3bb733f6,0x0ffe403f,0xff127dc0,0xe801ff99,
    0xfefe882f,0xfffc80ef,0x93a17a3f,0x81efeffa,0x904ffffc,0xfa89ffff,
    0x3f881f72,0xce8033fe,0x09ff97fe,0x13bf27f1,0x47da7f5c,0xf3001fe8,
    0x0fc97d47,0x5d7a7f30,0x00fc800f,0x9fdc05e8,0x360fb1c9,0x13afe00f,
    0x2e4ffc88,0xf701fc47,0x541fb05f,0xc85fdc3f,0x49d0bd0f,0xf713e24f,
    0xf90fee25,0xc98fee27,0x0fb87f11,0x20b7fee2,0x9f919cfe,0xf93f885f,
    0x53efa0f9,0x007fa27d,0x4bea2f44,0x27f300fc,0x9001f75e,0x26bd001f,
    0xd81fd41a,0x2a03f507,0xff00fc9f,0x6c2749d5,0x05f7f306,0x6f89f055,
    0xe85e8e44,0x40889f14,0x3e27d85f,0x36c07e85,0xefda817a,0x1f90fd0b,
    0xc9fc41dd,0x4fcc1f9f,0x3fa2fb4f,0x503f2001,0x4c03f25f,0x03eebd3f,
    0x3a003f20,0x50efffde,0x641f605f,0x3e6db00f,0x013a1903,0x26fa21be,
    0x372a602f,0xd00fe25f,0x7fec9d0b,0xccdf982c,0x7f30fecc,0x7d401f90,
    0xb1005f31,0x5f21ba7f,0x64fe24f9,0x9f6b89d7,0x00ffa3f6,0x2fa83f98,
    0x999999f9,0x7dd7a7fb,0x20aaaaab,0xaaaaabfc,0x2e19fd0a,0x3605f33f,
    0x2fdbaaaf,0x03747f10,0x0fea0274,0x4c17cdb2,0x25fbdfff,0x42f402f9,
    0x7ffed44e,0x3bbbbe62,0x03f50eee,0x94f803f5,0x3dfd500f,0xfc9f217a,
    0x5df27f12,0xfb4f9f47,0x2001fdfd,0x92fa80fc,0xffffffff,0x7fdd7a7f,
    0x320fffff,0xffffffff,0x269f0fd1,0xffffb01f,0x3ee03dff,0x9d007ee0,
    0x7d42fcc0,0xef885f30,0x09f12fc0,0x13e17a15,0x7f13f544,0xf907f300,
    0x413ef900,0x741cffc8,0x3ba27c85,0x26f93f88,0x53e1f31f,0x06f98efd,
    0x4bea0bf0,0x27f300fc,0x3335f75e,0x999fc833,0x21ba1999,0x3603f15e,
    0x417ecc47,0x5f9999ee,0xdfa82740,0x5f31fc40,0x2fcc2f98,0x365f11be,
    0x2f9a7cc6,0xb0df07dc,0x37c37c4b,0x407e7cc0,0xbd00bffd,0x8cf98f90,
    0xca74f93f,0x707ed3e5,0x01fa809f,0x403f25f5,0x3eebd3f9,0x800fc800,
    0x1f15e85e,0xf03ec7aa,0xfffff98b,0x13a00fff,0x67ec17ea,0x7c4dfdcc,
    0x45ffa89e,0x26d99dfa,0x4fea9cfb,0x1baa2bb6,0x5f935bf5,0xfda9dfb8,
    0x3fa0ba62,0xbd005d06,0xf7f90f90,0x5d7b9f27,0xfd87da7c,0xfa81b601,
    0x3e601f92,0x003eebd3,0x17a003f2,0x4bea697a,0xf91ba07d,0x7f533333,
    0x13ee2740,0xffffffd8,0x3ff6a0ff,0xffa87cae,0x7ffec1cf,0x3ff624da,
    0xfffa80df,0xdfff703d,0xfb82fa85,0x42f40003,0x3ffe887c,0x07dfccf9,
    0x3e21f69f,0x540bf00f,0x2601f92f,0x03eebd3f,0x3a003f20,0x47205e85,
    0xf8bf307d,0x4e81ba05,0x260013ea,0x8002202f,0x01000800,0x04400220,
    0x00000000,0x3ffa83e4,0x7c5fe8f9,0x17ea0fb4,0x2fa80fe2,0x4fe601f9,
    0x9001f75e,0x9999999f,0x557a17a9,0x67ecd12e,0x21ffcccc,0x07ee02fa,
    0xccff8a74,0x7cc04ccc,0x00000002,0x00000000,0x00000000,0x4ff207c8,
    0x3e17dc7c,0x1fec0fb4,0x2fa80be6,0x4fe601f9,0x9001f75e,0xffffffff,
    0x557a17af,0x7fec112f,0x6c1cefff,0xe82fc407,0xffffff54,0x02f980ff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x22000000,0x0d443530,
    0x88131022,0x09881310,0x4c223300,0x9999981a,0x0012a019,0x74c00000,
    0x25d37d11,0x05e542e8,0x05555446,0x8974c1db,0xcccccccc,0x000000cc,
    0x00000000,0x00000000,0xfffdce80,0xb0efffab,0x9fc3fb8d,0x007746f8,
    0x6e74ffaa,0xff30efff,0x203fffff,0x00fd807b,0x3fffe0f1,0x5f52ffff,
    0x44fe73e2,0xfffff13f,0x3fea9d9b,0xa8fe22ff,0x7777712f,0x00177777,
    0x00000000,0x00000000,0x9fd00000,0x7cc7bf62,0x2ff41f52,0xc9fd43f3,
    0xbff9101f,0xfa867f45,0xb813e603,0x21ffc407,0x5c38e8b8,0x1bbbbbbb,
    0x7cdfc472,0x22e67f13,0x21effda8,0x03980888,0x00000000,0x00000000,
    0x00000000,0x9f51fa00,0x227f15e8,0x321b27df,0xfd983fbf,0x40fe80bf,
    0x80bf104f,0x35f5c07b,0x037fff66,0x25f1a200,0x0000be1f,0x00000000,
    0x00000000,0x00000000,0x37400000,0x6cbd0be6,0x3a3f3f55,0xf05fe884,
    0xe86e805f,0xf80ee885,0x3fffffff,0x6c17c5fc,0x8888884e,0x19022088,
    0x0000c832,0x00000000,0x00000000,0x00000000,0xbd000000,0x72f41f98,
    0x7c5fd72f,0x3209fb01,0x0bd00cff,0x201fb0bd,0xaaafdaaa,0x236c3ee0,
    0x7fc2e8eb,0x02ffffff,0x00000000,0x00000000,0x00000000,0x00000000,
    0x4c5e8000,0x3f32f41f,0x41ef767d,0x7102fdfa,0x85e85bfd,0x800fec5e,
    0xf997a07b,0xaaa80841,0x000aaaaa,0x00000000,0x00000000,0x00000000,
    0x00000000,0x7cc5e800,0x3f7a2f41,0xf109df51,0xb5003f6b,0x3a17a3ff,
    0xb800bf25,0x5e83f507,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x07e62f40,0x227fc8bd,0x10fd82ff,0x4b2200bf,0xbf55e85e,
    0x20355555,0x0000007b,0x00000000,0x00000000,0x00000000,0x00000000,
    0xe8000000,0x17a0fcc5,0xb87e8bf3,0x001fdc2f,0xfcaf42f4,0x04ffffff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_20_usascii_x[95]={ 0,1,0,0,0,1,0,0,1,1,0,0,1,0,
1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,-1,1,0,1,1,1,0,1,1,0,1,
1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,-1,0,0,1,0,0,0,0,0,1,1,
-1,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0, };
static signed short stb__arial_20_usascii_y[95]={ 16,3,3,2,2,2,2,3,2,2,2,5,14,10,
14,2,3,3,3,3,3,3,3,3,3,3,6,6,5,6,5,2,2,3,3,2,3,3,3,2,3,3,3,3,
3,3,3,2,3,2,3,2,3,3,3,3,3,3,3,3,2,3,2,18,3,6,3,6,3,6,2,6,3,3,
3,3,3,6,6,6,6,6,6,6,3,6,6,6,6,6,6,2,2,2,8, };
static unsigned short stb__arial_20_usascii_w[95]={ 0,3,6,10,10,14,12,3,5,5,7,10,3,6,
3,5,10,6,10,10,10,10,10,10,10,10,3,3,10,10,10,10,18,13,10,13,11,10,10,13,11,3,8,11,
9,13,11,14,11,14,12,12,11,11,12,17,12,12,11,4,5,4,8,12,5,10,9,9,9,10,6,9,8,2,
4,8,2,13,8,10,9,9,6,9,5,8,9,13,9,9,9,6,3,6,10, };
static unsigned short stb__arial_20_usascii_h[95]={ 0,13,5,15,16,15,15,5,18,18,7,9,5,3,
2,15,14,13,13,14,13,14,14,13,14,14,10,13,10,7,10,14,18,13,13,15,13,13,13,15,13,13,14,13,
13,13,13,15,13,15,13,15,13,14,13,13,13,13,13,17,15,17,8,2,3,11,14,11,14,11,14,14,13,13,
17,13,13,10,10,11,14,14,10,11,14,11,10,10,10,14,10,18,18,18,4, };
static unsigned short stb__arial_20_usascii_s[95]={ 254,100,112,91,65,102,151,119,1,25,89,
69,108,134,147,117,11,133,140,32,151,43,54,39,65,82,224,104,39,97,238,
105,31,119,108,170,234,80,69,184,54,50,218,27,246,13,1,76,222,136,200,
123,170,93,157,182,141,128,116,60,164,55,80,151,141,162,22,173,1,202,237,
227,91,154,50,213,66,1,50,213,208,198,249,192,76,183,228,15,29,244,59,
18,14,7,123, };
static unsigned short stb__arial_20_usascii_t[95]={ 1,35,49,1,1,1,1,49,1,1,49,
49,49,49,49,1,20,35,35,20,35,20,20,35,20,20,35,35,49,49,35,
20,1,35,35,1,20,35,35,1,35,35,1,35,20,35,35,1,20,1,20,
1,20,20,20,20,20,20,20,1,1,1,49,49,49,35,20,35,20,35,1,
1,35,20,1,20,35,49,49,35,1,1,35,35,20,35,35,49,49,1,49,
1,1,1,49, };
static unsigned short stb__arial_20_usascii_a[95]={ 80,80,102,159,159,255,191,55,
95,95,111,167,80,95,80,80,159,159,159,159,159,159,159,159,
159,159,80,80,167,167,167,159,291,191,191,207,207,191,175,223,
207,80,143,191,159,239,207,223,191,223,207,191,175,207,191,270,
191,191,175,80,80,80,134,159,95,159,159,143,159,159,80,159,
159,64,64,143,64,239,159,159,159,159,95,143,80,159,143,207,
143,143,143,96,74,96,167, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_20_usascii_BITMAP_HEIGHT or STB_FONT_arial_20_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_20_usascii(stb_fontchar font[STB_FONT_arial_20_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_20_usascii_BITMAP_HEIGHT][STB_FONT_arial_20_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_20_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_20_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_20_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_20_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_20_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_20_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_20_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_20_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_20_usascii_s[i] + stb__arial_20_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_20_usascii_t[i] + stb__arial_20_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_20_usascii_x[i];
            font[i].y0 = stb__arial_20_usascii_y[i];
            font[i].x1 = stb__arial_20_usascii_x[i] + stb__arial_20_usascii_w[i];
            font[i].y1 = stb__arial_20_usascii_y[i] + stb__arial_20_usascii_h[i];
            font[i].advance_int = (stb__arial_20_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_20_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_20_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_20_usascii_s[i] + stb__arial_20_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_20_usascii_t[i] + stb__arial_20_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_20_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_20_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_20_usascii_x[i] + stb__arial_20_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_20_usascii_y[i] + stb__arial_20_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_20_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_20_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_20_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_20_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_20_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_20_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_20_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_20_usascii_LINE_SPACING
#endif

