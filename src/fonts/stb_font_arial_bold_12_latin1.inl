// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_bold_12_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_bold_12_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_bold_12_latin1_BITMAP_WIDTH         256
#define STB_FONT_arial_bold_12_latin1_BITMAP_HEIGHT         58
#define STB_FONT_arial_bold_12_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_arial_bold_12_latin1_FIRST_CHAR            32
#define STB_FONT_arial_bold_12_latin1_NUM_CHARS            224

#define STB_FONT_arial_bold_12_latin1_LINE_SPACING           8

static unsigned int stb__arial_bold_12_latin1_pixels[]={
    0x0c892ab2,0x3c806cc0,0x03a80930,0x71cc8811,0x8198a879,0x3332e20d,
    0x2a16e443,0x1c80c883,0x81e6dd40,0x0e83a5c8,0x12e00c88,0x33018a88,
    0x039b5051,0x0001b914,0x0c4cc075,0x2a0198a8,0x26039303,0x98a87504,
    0x57007e61,0x64076ee0,0x3a607602,0x542fe61d,0x21dcec6d,0x7effec5b,
    0x93f77ee4,0x406440f8,0x26f76049,0x17d40eda,0x1d407c1f,0x2e077b30,
    0xb57703db,0x106ccf88,0x26427549,0x766403b0,0x40593b01,0x40b5b00d,
    0x770d881c,0x2caf995c,0x322571dc,0x50e44ea1,0x13a87227,0x07ccfdbf,
    0x750e45b2,0x2bffe17c,0x44b8fa2e,0x2e06443e,0x753d81dd,0x46b8b793,
    0xbb703e0f,0x40776e03,0xbb701ddb,0x880df883,0x6426c2db,0x44079104,
    0x20f2203c,0x11ccccc8,0x22399999,0x221ccccc,0x4be2f70c,0x2e4fbef9,
    0x8be65f17,0xb645f36c,0x7d5b22f9,0x903e60ab,0x16c8be6d,0xeaffc81f,
    0x5c803f32,0x9df90fcc,0xacdac4df,0x22e478ef,0xefc83e0f,0x677e46fc,
    0x7e77e46f,0x37e77e46,0xdf83fff3,0x931720fe,0x01ff7059,0x7dc03fee,
    0x666fcc0f,0x999bf31c,0x33337e63,0x57c47e61,0x2e5f30fa,0x43eabe27,
    0x7cdb22f9,0x917cdb22,0x3e627fcd,0x22f9b640,0x3ea0f36c,0x803f52ea,
    0xf98fcc6b,0x4dd4be24,0x7f5353a6,0x4f98a0f8,0x127ccbe2,0xf893e65f,
    0x97c49f32,0xf51fd8dc,0x9fd41391,0x740fdbf9,0x7fbd03fd,0xf30ff7a0,
    0x4c0be605,0xd87e602f,0x547e64dc,0xf326e6c7,0x22f9b645,0x3645f36c,
    0x3e61ffb1,0x22f9b640,0x57c0f56c,0x2547f12e,0x2a3f31ea,0xcacaf41f,
    0xfc962be5,0x1fa807c1,0x741faaf4,0x55e83f55,0x7f55e83f,0x4157dcfa,
    0x3f2625f8,0x21b67e61,0xf986d9f9,0x66fcc6d9,0x99bf30cc,0x3337e619,
    0xfa87e60c,0x3637e61f,0xf30ffd45,0x22f9b645,0xb645f36c,0xf32eab88,
    0x45f36c81,0x3e01f36c,0x2abb62ea,0x3e635c5f,0x55d81f51,0x3abeed77,
    0xe83e2ec2,0x55d81f50,0x1f55d81f,0xd81f55d8,0x4c7f7ee5,0x9ae3f9ef,
    0x321fbdf9,0x56c83f56,0x3f56c83f,0x86666fcc,0x30cccdf9,0x4c1999bf,
    0x3e63fc1f,0x47f81efd,0x7c5b62f8,0xb17c5b62,0x47ef3ead,0xf8b640f9,
    0xf01f9b62,0x7f5c45d5,0x3e62640d,0x9fc47f11,0xefcec8e8,0xf07c5c82,
    0x3f88fe21,0x89fc47f1,0x7c4fe23f,0xdd30fe23,0x2e45ffb8,0xff87eaf7,
    0x7ffc5fff,0x7fffc5ff,0x4c0be65f,0x405f302f,0x313e21f9,0x427c403f,
    0x3e4fa9ef,0x3be4fa9e,0x3ff24fa9,0x4d903e63,0x324fa9ef,0x705d5f03,
    0xfb83f01b,0x3f6aff60,0x16e03ae0,0x83e0f8d7,0x20fdabfd,0x20fdabfd,
    0x20fdabfd,0x10fdabfd,0x1cc1f33b,0x37fa24d8,0x9335f53f,0x266bea1f,
    0x335f50fc,0x26fe61f9,0x337f3099,0x266fe613,0x7dc7e609,0xb80fcc0f,
    0xfff980ff,0x3bffe60e,0x03bffe60,0xb2ff9857,0x77ffccdf,0x757c1a20,
    0x26075cc2,0x2e237d45,0xfea81cfe,0x7cc0ceee,0x220f83e6,0x5c41cfeb,
    0x75c41cfe,0x7f5c41cf,0x22ffec1c,0x002fd80b,0xdb3f88db,0x88db3f88,
    0xfffff33f,0x3ffffe69,0x9fffff34,0x20188fcc,0x00006201,0x4cc00000,
    0x08001310,0x08811130,0x00188110,0x08801300,0x00000306,0x01100000,
    0x00000440,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x015c0000,0x1e440193,
    0x94000020,0x418a980a,0x2895c1c9,0x40e5c415,0x8074c1e8,0x220b602d,
    0x80e983ac,0x6ecc4aac,0xd881b302,0x75c0f605,0x3930bb01,0xb84bac85,
    0x069ca83b,0x261260b6,0x0ee0643d,0x0591d109,0x405700b1,0x99101dbb,
    0x2cdee440,0x320763a2,0x12d6c1eb,0x3e1db4cb,0x815c1fcd,0x4c0b102b,
    0x503ba984,0x44333307,0x05707ccf,0x09305977,0x2ee12b62,0x20e4dc2b,
    0x3ec8198a,0x93028998,0x9aa61ee0,0x7526d449,0x4b87ed30,0x01e441dc,
    0x2f440791,0x2ffcefc8,0x47333322,0xc88ea2c8,0x0c883220,0x9304c3e6,
    0x883b8859,0xa86441cb,0x26072e23,0x1664c2cc,0x710d73f3,0x71077107,
    0x03971039,0xcc985993,0x5c41dc42,0x0e5c41fc,0x261d4322,0x0361d304,
    0xfed8592a,0x4cfe65fe,0x00ffb82f,0x3ee01ff7,0xfd14f80f,0x6666fcc9,
    0x9ae1ff31,0x987e61f9,0x7cc1ee1f,0xb9f10fdb,0x1fe7744f,0x745b23f3,
    0x2fe63fce,0xfb7f30fd,0x113a7e61,0x67c4fb9f,0x3f3ba27d,0x8ff3ba23,
    0xf30fdbf9,0x33e21fb7,0x2feff47d,0x4c7f9dd1,0x86c8d91f,0x503a8edb,
    0x37aa0ae9,0x747e42ec,0x207fbd05,0xfbd03fde,0xb7b1fa87,0xf9817ccd,
    0x0fccd74f,0x10fcc3f3,0x4c47f37f,0xf33f51fc,0x33643ea3,0x87d5b23f,
    0x0fe4c46c,0x3e63f931,0x27ea1fc9,0xf33f51f9,0x53643ea3,0x9311b21f,
    0x8fe4c43f,0xf31f99fa,0x90fa9f23,0x26c8fccd,0x92c101fc,0xcbac4443,
    0x2212eba0,0x9f980fff,0x6d9f986d,0x546d9f98,0x4cdb4d8f,0xf30cccdf,
    0x7ccd73fb,0x1f987e61,0xbf32ff5c,0x333f23f7,0x87dcf71c,0x9eedb1f9,
    0xf7bf30fb,0x47ef7e63,0x326e89f9,0x9f91cccf,0xfb9ee399,0x987dcf70,
    0xbf31fbdf,0x333f23f7,0x73dcf71c,0x1f987dcf,0x0447eadb,0x903d72b8,
    0x3fa97713,0x3fa86fff,0x907ead90,0x2d907ead,0x53be21fa,0x337e63f8,
    0xdd3f30cc,0xf30fccd9,0x6d40fcc3,0x98fd5ee1,0x7f30d99f,0x457c49d3,
    0x9d37f36e,0xf71fabdc,0x4cfcc7ea,0xb33f30fb,0x43667e61,0x264e9bf9,
    0x5ee4e9bf,0x3eaf71fa,0x21b33f31,0x264e9bf8,0x3e24e9bf,0x23f36e8a,
    0xbd55886d,0x43a64987,0x3e603f69,0xbfffff02,0x45fffff8,0x745fffff,
    0x260fd9af,0xf33f302f,0xf30fccdf,0x2a20fcc3,0x3f7fa21d,0xf713fae3,
    0xdefd819f,0x8833fee6,0xfd13fdfe,0x3abe67fb,0x227f5c4f,0x7fdc4feb,
    0x067fdc0c,0x227fbfd1,0x3ae3fdfe,0x067f544f,0xfb033fee,0x7ffe4dbd,
    0x7b531c81,0x25bf30d8,0x3e6078db,0xc99afa82,0x9335f50f,0x266bea1f,
    0xff9d50fc,0x99bf9839,0x3f23f309,0x1f987e66,0x003107e6,0x00000000,
    0x00000000,0x00000000,0x00000000,0x40404010,0x84426620,0x360be601,
    0x46d9fc46,0xf88db3f8,0xff300113,0x47e69fff,0x987e66e8,0x0007e61f,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x32090ee0,0x1b06e41e,0x2a02f6e0,0x2b92668c,0xca816e44,
    0x225880bd,0xb806443b,0x700d8ae3,0x179307bb,0x99951d40,0x207bb701,
    0x327221ca,0x81bdc982,0x81102db8,0x49302dd9,0x302f262b,0x75771059,
    0xb881ddb8,0x5439139a,0x43999953,0x3a936a2c,0x36a4ad98,0x3ea0954b,
    0x28a983e9,0x3ee4e9ea,0x77dc4fdd,0xf2d40fec,0x807ccddb,0x16c5f17b,
    0x12d4456c,0x3640ddbf,0xad83dddb,0x67745a88,0x9f9df30f,0x23f5efc4,
    0x446fdefc,0x3f33e22f,0x29d0fb80,0x3e26dcf8,0x7e77c5ec,0x1bf3bf26,
    0x3e6df9bf,0x77755b22,0x49513e2f,0x2750c885,0x201d5aca,0x6443eafa,
    0x4e9ea750,0x3e24b8fa,0x27907224,0xf31f98fa,0xaaf88573,0xd3912e0f,
    0x4a2753dd,0x3655c46a,0x3a67205f,0x23f53a9d,0x9ee5f309,0x7c3912f9,
    0xdfc8be64,0x202a1f31,0x3e6150fb,0x2ad70f98,0x9b6c3e67,0x7d4be24f,
    0xc8be6db0,0x21fc5c86,0x3f30574a,0x557745b2,0x4c27fc04,0x43ead91f,
    0x5403f34e,0xe813311f,0x4cbe2f71,0x66c4fbef,0x75634c4d,0x2fb8b3b9,
    0xf8b7e6fc,0x88eac4ff,0x8fb3eeb1,0xfd8f51f9,0xd07e61ce,0xfb8efe4b,
    0x6c3ee02c,0x7b93bb62,0x6c9ea3f5,0xf75e83f5,0x322f9b6c,0x0ba07c46,
    0x98e4b111,0x1d08d91f,0x77744395,0x647e639e,0x29f37f56,0x47ea01fa,
    0xb9e25ffc,0x4be65f17,0x40ffd47b,0xb36f560f,0x1f50ed98,0x7cce45b6,
    0x5d613561,0xbf31fabf,0xffb50bb1,0x4db03ea3,0x1bff62f8,0x227b0fb8,
    0xdd10edde,0x26fe27fd,0x5d81f56f,0x26df59f3,0x0bb1b22f,0x75c7205b,
    0x21b63f31,0x2a6af8da,0x265ff98f,0x3beadb1f,0x547f14ef,0x74c4fe24,
    0x98fb96a5,0x1ee3f32f,0x1b16c1fe,0x10922b2d,0x06c9ee5f,0x665c6c9f,
    0x3a1f348b,0x43dfbf33,0x7c53e24a,0x7c4bd153,0xb94c1fc2,0x5f3dcfa7,
    0x3ee2f998,0x447f16df,0x5b73aa3f,0x5f1b62f8,0x2a9303b0,0xd15f13de,
    0xf1d31d0d,0x6ff457cc,0x2dd15f10,0x2abb607a,0x5cdfec5f,0xaf98f25f,
    0xb1bf30fb,0x9704f88b,0x0da896cc,0x221f73f5,0x5f36f9bf,0x4c6cc3f5,
    0x273e0d89,0x2203f31f,0x362fb9cf,0x221ffdbe,0x357f90bf,0xf9b6bee1,
    0x21f53f34,0x900fc9e9,0x7ed5fecd,0xf9761710,0x3e64fa9e,0x30d81a80,
    0x6f7ec7b5,0x89bd2d46,0x21fbefeb,0x0f56defd,0x406ff5c4,0x3a0cffec,
    0xf3177541,0x7fdc3df9,0xdd98d300,0x1f7e41dd,0xfc9b7fee,0xdddd982e,
    0xf327f541,0x27ff5c03,0x17fbfae2,0x3f7b25fd,0x43dfb14f,0xb0fff24f,
    0x136403bf,0xfe839fd7,0x3ffe62ff,0x1fc1ea0e,0x22000404,0x00010040,
    0x00000031,0x0c400003,0x000080c0,0x00020000,0x2000800c,0x30000049,
    0x08800001,0x00098800,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x99991000,0x20ee3b83,
    0x883c884b,0x9999101c,0x4c85d507,0x999901e4,0x50e44999,0x06443229,
    0x3223ac88,0x32601910,0x69a6d41b,0x440e883b,0x40adb880,0x9999911c,
    0x93333223,0x5c1cccc8,0x911ccccc,0x0c8865c3,0x41999993,0x1931dc4b,
    0x2e2b8b22,0x43b8950c,0x6e6fcc4a,0x3e63ea2f,0x7dc2fcc2,0x0cdfcc0f,
    0x93f337e6,0x3620d9d8,0x67d40b10,0x3e64ccdf,0x98fcdf22,0x4775300f,
    0x103f30c8,0x6fc1fbbf,0xe882a511,0x6f426c1f,0xf99fc4eb,0xbf31cccd,
    0x66fcc999,0x3f72e2fd,0x325f31cc,0x64c7e62f,0x3e60ffcc,0xaf445f33,
    0x7c5b60fc,0x0fc8db2f,0x6c5f317a,0x2236e747,0x3fde85fe,0x877fffcc,
    0x911762f9,0x1910c881,0x407e73a0,0x7cdf22f9,0x23931f31,0x910cb8c8,
    0x432e7e61,0x3ee5f149,0xf883222d,0x3bb311fd,0x207b9221,0x05f302f9,
    0xb87d8be6,0x3fbaf987,0x17e40fcc,0x542f47e4,0x47dc3fcf,0x989d4efa,
    0xfb85f32f,0x3661f72c,0x33721cff,0x236cfcc5,0x33fa8af9,0x983fb9bf,
    0xf98fcc1f,0xdf99fa81,0x337e63cc,0x263f37ec,0x3be65e9f,0x263f35fb,
    0xfb84fbef,0x7cc5bf70,0x6c7e6621,0xf984ffff,0x3337e604,0x599bf30c,
    0x81f717cc,0x6fdf987b,0x27d41f98,0xb00fff88,0xb93f30df,0xbd05f1d9,
    0x537f61ee,0xdffd90fb,0x91723ea7,0x2f987ead,0x337e69f1,0x20fcc4fd,
    0xd03f31f9,0x799bf53d,0xbf666fcc,0x8fff31f9,0x3e6db2f9,0x51b65f31,
    0x7cc2f87f,0xb311f981,0x84f8813b,0x999bf31a,0x8fbbbe61,0x703ea2f9,
    0x7fbff30f,0x17e61f98,0x7ec07f50,0xf57d7f06,0xd1f701f5,0x3e45f309,
    0x3659df97,0x3fe4ffef,0x3be65fff,0x45f31fee,0x307e60fb,0xf307e63f,
    0x2603ffff,0x8fcdf22f,0x3e62fef9,0x4c7e6d91,0x1fd4d91f,0x207e617c,
    0xa826c1f9,0x0be67f07,0x2f9817cc,0x261ee1f2,0x7cc1fb4f,0x9801dd11,
    0x7fbf502f,0xdf13fdb0,0x07f3e20d,0x93ee6fe6,0x552cefcb,0x2bea3db5,
    0xbf30fc99,0x4dfcc359,0x20fcc7da,0xd83f31f9,0x99afa99e,0x37c8be61,
    0x3f27e63f,0x4db23f30,0x5b23f31f,0x3e0aaef8,0x7cc0fcc2,0x83577531,
    0x3e657028,0x5f30999b,0x3ee6fe60,0x2f987b84,0xd8fccbf1,0x980999af,
    0xfb6f882f,0x3fa7fb81,0x4c1ffa04,0xbb04efff,0x88db2e40,0x2605f33f,
    0x4c2effff,0xf98fcc1f,0xff98fe61,0x45f31fff,0x3e63f37c,0x23f34f88,
    0x3e63f36c,0x3fff2d91,0x3f30be3f,0x3ff63f30,0x383d44ff,0x53ffffe6,
    0xfff302f9,0x261ee09d,0x7ccbf22f,0x5fffffd1,0x3f905f30,0x4bf317e2,
    0x13ee02fb,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x80000000,0x19910cc8,0x88b33322,0x0e44ea2c,
    0x0bcccc88,0x5e541dc4,0x21d43221,0x8959502b,0x664c1cb8,0xcc982cba,
    0x260e5c42,0x51019999,0x88208066,0x0cc8bb8c,0x84197191,0x2e5715c0,
    0x44322952,0x64e44309,0x10722950,0x24ccca82,0x32a14c1c,0x99953ccc,
    0x4c776279,0x4c33224c,0x21ff72ff,0x31fecdf9,0x7c5ae1ff,0xf99bf302,
    0x266dcf8b,0x43e66cbf,0x7742645c,0x7e6fc5fb,0x7df99f11,0x7e5fc47d,
    0x47f9dd10,0xafecc080,0x57c42efa,0xf9bf32f8,0x37e6bf7d,0x3d3f14fb,
    0xb92f8bdc,0xfb9ea3f6,0xbdf32fff,0x2636e7c4,0x3f72a69e,0xa8b70fa6,
    0xbb54dddd,0x4f6a2bdb,0x79791d8a,0x7f6d3be6,0x9a7c5f30,0x3e2d74ff,
    0x3e45f302,0x263f33f5,0xc87cc2df,0x23777755,0x267db8f9,0x5cc4130f,
    0x4c46c9cf,0x2e1f51fc,0x7f4c2026,0x1ff5c41c,0x8fccbff7,0x4be6d94f,
    0x89af6e6c,0x23e67aaf,0x3e65caef,0x05f30faa,0x57443ff5,0x300fd82e,
    0x2a257db7,0x2b701aaa,0xd9323dcc,0x2d9f34a9,0x37f30fcf,0x3f7e67f7,
    0x205f16b9,0x25ebacf9,0x2a1cccfb,0x23f30ffd,0x7dddd95d,0x43eb2bee,
    0xf7bf107a,0x6fcc999d,0x3d4f71fb,0x077ee101,0xff12fdc4,0x93f87cc5,
    0x33647e6d,0x6eec3f5f,0x7e5f67c4,0x47e23e62,0x0ff881f9,0xf903ebe6,
    0x77ff5c03,0x0bffff74,0xba6f5d6e,0x23dd31cf,0xfafafaf9,0x4bffff30,
    0x16cee9f9,0x3bbe605f,0x6ccfcc3f,0x23f11b50,0x545e8af8,0x2ec77cc1,
    0x2e5f37f1,0x4771bf57,0x3e63f57b,0x82024e9b,0xfb32efd9,0x7defc45d,
    0x64fe1f32,0xd9b21f36,0x0ffcc3db,0x83fe73f6,0xf31ffff9,0xc8bdbd01,
    0x273ee5bc,0x10b706e1,0x44000111,0x74fcc019,0x5f30f9ee,0x3fe67e60,
    0x3e605f16,0xfeb81fd2,0xb13ff624,0x44d8bbdf,0x5c0cfee8,0x3bfa25fe,
    0x3a21efeb,0x3fea2fdf,0x2202020c,0x8e03b75c,0x4fe1f30b,0x5b21f36c,
    0x0dd048c8,0x7317e5f5,0x03e63955,0xc87f31f7,0xffffb0c8,0x00970fe1,
    0xf3000000,0x21f39f93,0x23f302f9,0x337f16fc,0x5f897cc3,0x40000000,
    0x02040000,0x33330000,0x00000033,0x00000000,0x00000000,0x00000000,
    0x53f30000,0x3e61f35f,0x3a23f302,0x3fffff16,0x02fb8be6,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x70000000,0x1d43d98b,0x32326199,0x224a8a62,0x715b910b,0x44b51322,
    0x3617750b,0x222222c9,0x0b896608,0x01bbbbba,0x00000000,0x00000000,
    0x00000000,0x00000000,0x22000000,0xa9aa62ff,0x2a93754d,0x9bb93f8f,
    0xb90f99ee,0x16eabffb,0xfc8fc419,0x7435171f,0x8dc6eeee,0x222221f8,
    0x00000008,0x00000000,0x00000000,0x00000000,0x00000000,0x4c5ceb80,
    0x66cd2a0e,0xee8baf33,0x410d8f50,0x00002218,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x80000000,0xdb71f8bf,0x08532541,
    0x5101aa88,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x51000000,0x088086a1,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_bold_12_latin1_x[224]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,-1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,
0,0,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,-1,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__arial_bold_12_latin1_y[224]={ 9,1,1,1,0,1,1,1,1,1,1,2,7,5,
7,1,1,1,1,1,1,1,1,1,1,1,3,3,2,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,1,3,3,3,3,3,3,1,1,1,4,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,9,3,1,1,2,1,
1,1,1,1,1,3,3,5,1,-1,1,1,1,1,1,3,1,4,9,1,1,3,1,1,1,3,-1,-1,-1,-1,
-1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,1,1,1,1,
1,1,1,0,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,1,1,1,1,1,1,1,
 };
static unsigned short stb__arial_bold_12_latin1_w[224]={ 0,3,5,6,6,10,8,3,4,4,4,6,3,4,
3,4,6,5,6,6,6,6,6,6,6,6,2,3,6,6,6,7,11,8,8,8,8,7,7,8,7,3,6,8,
7,9,7,8,7,9,8,7,7,7,9,11,8,9,7,4,4,3,6,8,3,6,7,6,6,6,4,6,6,3,
4,6,3,9,6,7,7,6,5,6,4,6,6,9,6,6,6,4,3,4,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,2,6,6,6,6,
3,6,4,9,4,6,6,4,9,8,4,6,4,4,4,6,7,3,4,3,4,6,9,9,9,7,8,8,8,8,
8,8,12,8,7,7,7,7,4,3,5,5,9,7,8,8,8,8,8,6,9,7,7,7,7,9,7,7,6,6,
6,6,6,6,10,6,6,6,6,6,4,4,5,5,7,6,7,7,7,7,7,6,7,6,6,6,6,6,7,6,
 };
static unsigned short stb__arial_bold_12_latin1_h[224]={ 0,8,4,9,11,9,9,4,11,11,4,6,4,2,
2,9,9,8,8,9,8,9,9,8,9,9,6,8,7,5,7,8,11,8,8,9,8,8,8,9,8,8,9,8,
8,8,8,9,8,9,8,9,8,9,8,8,8,8,8,11,9,11,5,2,2,7,9,7,9,7,8,9,8,8,
11,8,8,6,6,7,9,9,6,7,9,7,6,6,6,9,6,11,11,11,3,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,9,11,9,6,8,
11,11,2,9,5,6,5,2,9,2,4,8,5,5,2,9,11,2,3,5,5,6,9,9,9,9,10,10,10,10,
10,10,8,11,10,10,10,10,10,10,10,10,8,10,11,11,11,11,11,6,10,11,11,11,11,10,8,9,9,9,
9,9,9,10,7,9,9,9,9,9,8,8,8,8,9,8,9,9,9,9,9,7,7,9,9,9,9,11,11,11,
 };
static unsigned short stb__arial_bold_12_latin1_s[224]={ 255,250,65,248,47,18,29,76,71,93,71,
219,80,105,128,70,75,135,117,112,18,126,143,243,198,205,216,156,120,226,127,
148,112,25,42,52,176,160,168,61,80,202,188,193,27,1,19,219,11,166,35,
158,185,235,245,233,224,214,206,54,97,59,44,132,124,98,82,80,119,44,124,
228,110,106,98,92,88,141,151,105,150,212,189,51,176,58,165,172,195,90,209,
124,129,187,84,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,255,195,180,
181,182,11,133,173,110,133,240,202,233,105,102,115,60,141,245,51,96,45,76,
101,91,56,250,158,1,238,228,220,11,199,20,208,217,29,67,84,242,226,234,
48,250,70,64,74,1,56,103,137,146,155,164,134,38,31,39,23,63,1,34,
138,124,87,176,183,131,192,87,80,94,146,153,190,57,62,51,129,197,99,101,
160,168,116,205,65,72,109,213,11,38,16,8,1, };
static unsigned short stb__arial_bold_12_latin1_t[224]={ 1,24,51,13,1,24,24,51,1,1,51,
43,51,51,51,24,24,34,34,24,34,24,24,24,24,24,43,34,43,43,43,
34,1,34,34,24,34,34,34,24,34,34,24,34,43,43,43,24,43,24,43,
24,34,24,34,34,34,34,34,1,24,1,51,51,51,43,24,43,24,43,34,
24,34,34,1,34,34,43,43,43,24,24,43,43,24,43,43,43,43,24,43,
1,1,1,51,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,1,24,1,
24,43,34,1,1,51,24,43,43,43,51,24,51,51,34,43,51,51,24,1,
51,51,51,43,43,24,13,13,13,13,1,13,1,1,13,34,1,1,1,1,
13,1,13,13,13,34,13,1,1,1,1,1,43,13,1,1,1,1,13,34,
13,13,13,13,13,13,1,43,13,13,13,13,13,34,34,34,34,13,34,13,
13,13,13,13,43,43,13,13,24,24,1,1,1, };
static unsigned short stb__arial_bold_12_latin1_a[224]={ 48,57,81,96,96,153,124,41,
57,57,67,100,48,57,48,48,96,96,96,96,96,96,96,96,
96,96,57,57,100,100,100,105,168,124,124,124,124,115,105,134,
124,48,96,124,105,143,124,134,115,134,124,115,105,124,115,162,
115,115,105,57,48,57,100,96,57,96,105,96,105,96,57,105,
105,48,48,96,48,153,105,105,105,105,67,96,57,105,96,134,
96,96,86,67,48,67,100,129,129,129,129,129,129,129,129,129,
129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,
129,129,129,129,129,129,129,129,48,57,96,96,96,96,48,96,
57,127,64,96,100,57,127,95,69,94,57,57,57,99,96,48,
57,57,63,96,143,143,143,105,124,124,124,124,124,124,172,124,
115,115,115,115,48,48,48,48,124,124,134,134,134,134,134,100,
134,124,124,124,124,115,115,105,96,96,96,96,96,96,153,96,
96,96,96,96,48,48,48,48,105,105,105,105,105,105,105,94,
105,105,105,105,105,96,105,96, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_bold_12_latin1_BITMAP_HEIGHT or STB_FONT_arial_bold_12_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_bold_12_latin1(stb_fontchar font[STB_FONT_arial_bold_12_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_arial_bold_12_latin1_BITMAP_HEIGHT][STB_FONT_arial_bold_12_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_bold_12_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_bold_12_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_bold_12_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_bold_12_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_bold_12_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_bold_12_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_bold_12_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__arial_bold_12_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__arial_bold_12_latin1_s[i] + stb__arial_bold_12_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__arial_bold_12_latin1_t[i] + stb__arial_bold_12_latin1_h[i]) * recip_height;
            font[i].x0 = stb__arial_bold_12_latin1_x[i];
            font[i].y0 = stb__arial_bold_12_latin1_y[i];
            font[i].x1 = stb__arial_bold_12_latin1_x[i] + stb__arial_bold_12_latin1_w[i];
            font[i].y1 = stb__arial_bold_12_latin1_y[i] + stb__arial_bold_12_latin1_h[i];
            font[i].advance_int = (stb__arial_bold_12_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__arial_bold_12_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_bold_12_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_bold_12_latin1_s[i] + stb__arial_bold_12_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_bold_12_latin1_t[i] + stb__arial_bold_12_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_bold_12_latin1_x[i] - 0.5f;
            font[i].y0f = stb__arial_bold_12_latin1_y[i] - 0.5f;
            font[i].x1f = stb__arial_bold_12_latin1_x[i] + stb__arial_bold_12_latin1_w[i] + 0.5f;
            font[i].y1f = stb__arial_bold_12_latin1_y[i] + stb__arial_bold_12_latin1_h[i] + 0.5f;
            font[i].advance = stb__arial_bold_12_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_bold_12_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_bold_12_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_bold_12_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_bold_12_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_bold_12_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_bold_12_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_bold_12_latin1_LINE_SPACING
#endif

