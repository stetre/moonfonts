// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_16_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_16_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_16_latin1_BITMAP_WIDTH         256
#define STB_FONT_courier_bold_16_latin1_BITMAP_HEIGHT         78
#define STB_FONT_courier_bold_16_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_bold_16_latin1_FIRST_CHAR            32
#define STB_FONT_courier_bold_16_latin1_NUM_CHARS            224

#define STB_FONT_courier_bold_16_latin1_LINE_SPACING           8

static unsigned int stb__courier_bold_16_latin1_pixels[]={
    0x80000510,0x00700001,0x800c400c,0x28800028,0x06c46c40,0x00001ff4,
    0x220604f8,0x403307fe,0x75980803,0x001ae03d,0x27103a20,0x0661661b,
    0x54407100,0x0f5408ac,0x880ba5d0,0xb80f982e,0x2600dc85,0x3ba604ee,
    0xd00f4c04,0x04d80ba5,0x0fea071c,0x405badc0,0x84ee982c,0x00ea87da,
    0x3f66036e,0x85e9bdc5,0x317303f9,0x503ee03f,0x887b8fef,0x05d3003e,
    0x17ffbfe6,0x13098019,0x8bf00ec0,0x405503f8,0x4320370c,0x3002e01b,
    0x01700261,0x404c4331,0x2201a9bf,0x33310311,0x0370c813,0x500190f7,
    0x47b1f885,0x1ee1ae7b,0x1bffffa6,0x5f7b84f8,0x200903dc,0x44bf101b,
    0xa881cc5e,0x4c45550a,0x1f702621,0x01cc07e4,0x0aa881cc,0x85544555,
    0x207302aa,0x45550aa8,0x1ffd2ffc,0x0efffff8,0xf902aa98,0x2aa27fff,
    0xbdc1aaaa,0x1aaaaaa8,0x35555551,0x9ee5a92a,0x7c47b86b,0x2e09fd1d,
    0x7dfec40f,0xaa98f70c,0x81554c02,0xe994c0f9,0x7fec4fff,0xf91fff9d,
    0x883ffa5f,0xfd313e3f,0xffd309ff,0x9dffd89f,0xbffb1fff,0x74c3fff3,
    0x7fec4fff,0x3a1fff9d,0x3fe0bea5,0xffd0bd32,0x3e66605f,0xffffff93,
    0xfff97b87,0x3ff27fff,0x1593ffff,0xf73dcbfb,0x87dc6c81,0x09d07dfb,
    0x27fffffb,0x17fff459,0x705fffd0,0xb8efc40d,0x0fe1fc2f,0x7417d4bd,
    0x6fc47f14,0x6fc45f71,0x43f85f71,0x8fe1fc3f,0x85f71df8,0x3ea1fc3f,
    0x713e0db1,0x017be60f,0x1f45c8fa,0x1f45c9ee,0x93b3e8b9,0xf33dcb59,
    0x5b227dcf,0x540f9bf9,0x3f3bb00f,0x80bdf300,0x06b85ef9,0xf8bb03ee,
    0x47ea1fc3,0x3e6bb06d,0x4bb03ee2,0x3e2ec0fb,0xf0fe1fc3,0x17607dc7,
    0xde83f87f,0xc8df01f9,0x01f5db05,0x4ed723e8,0x2b93dc1b,0x6d721b9d,
    0x55b3b1b9,0x43f73dcb,0x7c75c6d8,0x05e81f75,0x4c7f9dd5,0x00faed83,
    0xf303ebb6,0xf50d9105,0x20fe1fc1,0xbd01f9de,0xa86c8fe2,0x1f50d90f,
    0x7f0fe1fc,0x2a1b23f8,0x07f0fe0f,0x7fc0bdf3,0xf881fecf,0x23e809f2,
    0xf703fffc,0x641fffe4,0x4d6c3fff,0x6b9ee6fe,0x777c47b8,0x01f98dd0,
    0x21ffffff,0x4f97c47b,0x213e5f10,0xceda9cfd,0x21fc7b87,0x05ef983f,
    0x1f24f8fe,0x7b87c9ee,0x7f0fe1fc,0x2e1f23f8,0x40fe1fc7,0x373e01fd,
    0x99f700bd,0x323e80fd,0x4f702fcf,0xfc82fcfc,0x132dc2fc,0xf70d73dc,
    0x3fd59fd0,0x55f405d8,0x33ee3dc7,0x99f707ec,0x3fff60fd,0x2741fa9e,
    0x3603f13a,0x643f701f,0x49d07ea7,0x3a2741fa,0xf13a0fc4,0x13a0fd43,
    0xbd01f89d,0xdd003f80,0x7c05fddd,0x2dc55723,0x8aae4f91,0x5c55725b,
    0xb8663f15,0x87ea1b67,0x41dffdfa,0x5dfc02f9,0x3bba3dc6,0xeee82fee,
    0x1d102fee,0x0feacfd8,0x036cdfe4,0x262f40bd,0x3ab3f63f,0x7567ec0f,
    0x6cdfe40f,0x6d9bfc86,0x0feacfd8,0x236cdfe4,0x2a04fba8,0x27dc02df,
    0x2ea63dd3,0x55db10fd,0x5ffe2db5,0x6daaaed8,0xdb555db1,0xd50f7fd4,
    0x9fa20bf2,0x0364024d,0x9aa35d7c,0x87ba64fb,0x07ba64fb,0xfd710fae,
    0x37ff2039,0x827dd441,0x226c81f9,0xb881cfeb,0xff901cfe,0x37ff203b,
    0x1cfeb881,0xb83bff90,0xfd00efff,0x3fe201df,0x2e9ffd1f,0x3ff21dff,
    0x2626ffff,0xffffff91,0x3fffff2d,0x0410086f,0x06a00020,0x88404460,
    0x9ffd1fff,0x7f47ffe2,0x200ca84f,0xf7008800,0x80201dff,0x00200100,
    0x00220022,0x00044004,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x12600000,0x64030038,0x30066003,0x0a6b6e03,
    0x20003c88,0x0b983ffb,0x30000620,0x04400400,0x5b700620,0x201d4053,
    0x00220009,0x40710002,0x80110008,0xf9000400,0x201b7035,0x7b81eed8,
    0x5401d500,0x1b91700e,0xd005cd40,0x1afb8ba5,0x213fffa6,0xd2e84ee9,
    0xb1013605,0x00f4c05f,0xc8b803d3,0x0357100d,0x74c00f4c,0x20ff6201,
    0x303dc0fd,0x01e9803d,0xff505fb1,0x3fa27b8b,0x205507ff,0x7f10932a,
    0x0c801900,0x64401cc0,0x20984c04,0xb8efc47b,0x41b8643f,0x15c01309,
    0x205b15b0,0x3006c00d,0xc8155435,0x402c400c,0x6456c00d,0x3f20ff42,
    0x440b100a,0x362b600d,0x93ab3e22,0x3543ea18,0x30555551,0x83640555,
    0x886a62a8,0x74c2aaaa,0x55304fff,0x2aaaa205,0xfb8f71aa,0x55513ec0,
    0x55554455,0x400aa982,0x02a600a9,0x7c0cc131,0x1fff98ff,0x4c40554c,
    0x554c0660,0x202aa600,0xfffb11fe,0x9802a60f,0x702a600a,0x4c313dcf,
    0xfffd81cf,0x7fff40ff,0xf905f102,0x6c3ffa3f,0xf10fffff,0x3a0bee3b,
    0xffc82fff,0x8f73ffff,0xfb0fa86c,0x3f61ffff,0x3f20ffff,0xfe882fff,
    0x7ff444ff,0x7ddbf64f,0x3a4ff81f,0x17fffe43,0x0ffddbf6,0x20bffff2,
    0x6c2ffffc,0x1ea3f70f,0xa89fffd5,0x7544fffe,0x89364fff,0xfea8d71f,
    0x4c07b83f,0x41b605ef,0x701db1fb,0x5d81f70f,0x320bdf30,0x5c7b9f45,
    0x07b87b86,0xc84c41ee,0xfb89df86,0x3ee277e3,0x81f99b63,0x887d1fef,
    0x4db0d909,0xc84c41f9,0x8d909886,0xe811767c,0x3a2fb88c,0x3a2fb88c,
    0x9d2fb88c,0x827c97c4,0x03dc0fc8,0x4c03ebb6,0x3f5db02f,0x21b21ee0,
    0xfaed80fa,0x373b5c80,0xe83f31ee,0x1ee07b84,0x23fffe4c,0xf9aec1f9,
    0x44d92ec1,0xd6dbf81f,0x7fffc987,0x307e26c8,0x930ffff9,0x26b8ffff,
    0x7d4530fb,0xf55feeee,0x2abfdddd,0xb5feeeef,0x0fd8fc49,0x2e07d49b,
    0x27cbe207,0x3fe20db0,0x1f21ee04,0x7cbe21ee,0x43fffc84,0xeacfd87b,
    0x2e07b81f,0xfb57bd07,0x9aec1f98,0x4d92ec1f,0xf8bf81f8,0x55ef43eb,
    0x3e26c87d,0x3ed5ef41,0x23ed5ef4,0x3fbfa218,0x33333e66,0x9999f33c,
    0x3333e679,0x3dcf73cc,0x3bbfa3fd,0x2e07b85f,0x2607eccf,0xb80f701f,
    0x2741fa87,0x43f667dc,0x3dc2fcfc,0x700dffc8,0x7cc3dc0f,0x741feb9b,
    0x3a2fc9be,0x2e2fc9be,0xf83fea9f,0x7cc7ff73,0x5c1feb9b,0x263fea9f,
    0x21feb9bf,0x1feb9bf9,0x7417e404,0x3a2ca9ad,0x3a2ca9ad,0xf32ca9ad,
    0x8ff49d59,0xf702fda9,0x7f777740,0x3dc17a02,0x67ec1ee0,0xeee80fea,
    0xaae42fee,0xb03f75b8,0xb81b77df,0x7e41ee07,0x6c46feff,0x7ec42fff,
    0x7ff442ff,0x8efcc6fe,0x7ffe43fe,0x7ff446fe,0x7ffe46fe,0x7ffe46fe,
    0x2a1ee6fe,0xdfff9306,0x77ffe4c5,0x3bfff262,0xb83bfee2,0xda987b85,
    0x327dc2af,0x03ea03dd,0xa9835fb5,0x75c42afd,0x24fb81cf,0x5db11ee9,
    0x3feedb55,0x3ff7be64,0x8abf6a64,0x302afda9,0x00400400,0x5ffc8022,
    0x400607f3,0x30018008,0x80188080,0x2004c009,0x98002009,0xfffffc83,
    0x3a3fff10,0x982e04ff,0x7e44ffff,0x0100ffff,0x7f47ffe2,0xfffff94f,
    0x000662df,0x43fffff2,0x00fffffc,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x7fffb700,0x38cd9800,0x10004000,
    0x0ffff4c0,0x47200c00,0x4000001d,0x000188c9,0x6dc0ef5c,0x06609882,
    0x46c40000,0x416600d8,0x504ffffa,0x0c403315,0x0ffffff8,0x5544004c,
    0xebed8100,0x06fecc4c,0xb8175cd4,0xee980dfe,0x3bff9101,0x260f45d0,
    0x0ea82ffd,0xd702e170,0x01f9007b,0xf707bab6,0xdb9f5005,0x6c0e8ca8,
    0x443ff75f,0x3ff207db,0x700e380c,0x2aabea0f,0x7ffffd41,0x766f4c1f,
    0x7e556744,0xd880f540,0x6f84ffff,0x477d15f1,0x985eadf8,0x57f302aa,
    0xe98e88bd,0x5dabfb80,0xf98317cc,0x09300aae,0x5c402aa6,0x26018805,
    0x005900aa,0x2b87e6b9,0x7d4bb01b,0x641fbf61,0x2625eabf,0x07b80660,
    0x98cf80f5,0x55ecc1fe,0x1b204971,0x31ec82cc,0x67c5709f,0x43ea3be8,
    0x7fff41f9,0x43ea6c82,0x20066098,0x9d9f10fa,0x5300bd01,0x5ffff901,
    0x81ccbb50,0x5ffff901,0x64398590,0x3620ffbd,0x9721b9ce,0xb07b81f8,
    0x6fd87d45,0x66443ff7,0x3ea2ccfd,0x51ea1cff,0xbccac83f,0x20fe01b4,
    0x985f0199,0xbeefa801,0x1fcc3e63,0x7d42f7cc,0x5bf66e9b,0xd7301ffb,
    0x7e44fc4d,0x20b2be22,0x444fffe8,0x9998d909,0x6b82fc8e,0x11b21310,
    0x90fee179,0xc987fd5b,0xf12e42de,0x3600f703,0x43f336c7,0x3eefeed9,
    0x99bab3a6,0x2d07ee0f,0x50555bba,0x87ffb81f,0x540002f8,0x75efc3be,
    0x0faed84f,0x6c3fffe8,0x7e407e66,0x4c674c3f,0xdfdff73e,0x3fb89df8,
    0x51ffff26,0x877bf979,0xff9306fc,0xecccb8ff,0xf72e44be,0x0332f763,
    0x07fd53f9,0x83fb00f7,0x5c07e26c,0x743f1007,0x741ffbae,0x0572dca8,
    0x41f220d9,0x46c99bee,0x3be881fa,0x21ff7ecc,0xfb89f2f8,0x9b20feab,
    0x0fe401f8,0x5572ff22,0x3e63f15f,0x57bd2ec1,0x15fb10fb,0xd017dcdf,
    0x320fb57b,0xae47e8bf,0x59bc85f0,0x37f7ffe4,0x5fb103dc,0x80fc4d90,
    0x45f1007b,0x41feffd9,0xdae8ddbc,0x1ee03f80,0x177ffec4,0x1df44136,
    0xcfb83f70,0xf32ec7ec,0x03f13643,0xdf3047f0,0x34e87e61,0x7f35d83f,
    0xc983fd73,0x12ecd7b0,0x75cdfcc9,0xbd86441f,0x2b73b667,0x64686c1f,
    0x83dc009e,0x3f701fe8,0x1aa07fd5,0x83ed4dec,0x6c40f988,0xf507b11b,
    0x2203dc01,0x2201d00f,0x36aa23be,0xeeeee84f,0x326bf22f,0x3aa7ee0f,
    0x654d643f,0x43d8761f,0x3a1fb9de,0x322fc9be,0x206fefff,0x9f51fefa,
    0xfffc8fd7,0x3be606fe,0xff7ff91f,0xc87dd309,0x57ed4c05,0x2aaffe22,
    0x7f7ff443,0x2aaaaa26,0x37ffae1a,0x06ebaa82,0x207dbdb1,0x5fb5505a,
    0x107d9015,0x3b7fb203,0x705bff53,0x88f74c9f,0x7442fffd,0x7e46feff,
    0x776c2fff,0x7ff4c0ee,0x17ffec44,0x1fd80018,0x0c0b7f6a,0x100fe400,
    0x404a8080,0x31fffffc,0x01ffffff,0x3ffe6011,0x40085fff,0x0800dffe,
    0x3fffa000,0x003982ff,0x40989988,0x23fff100,0x40084ffe,0x10088008,
    0x80080333,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x0c400000,0x26017710,0xb1c8188c,0x20763903,
    0x0603ace9,0xaca88010,0x4d654408,0xaa880080,0x01885550,0x21555530,
    0x40262198,0x0ffa0039,0x404c454c,0x44c41aca,0x07fd00a9,0x01355510,
    0x153005cc,0x0954a8d5,0x2aaaaaa2,0x9d9bd301,0x84ffffb8,0x0b81eead,
    0x02e17017,0x2213ffa6,0x413f204d,0x25ffeff9,0x25ffeff9,0xffd805ea,
    0x2e1fff9d,0xffff8806,0x3a5ff93f,0x3ffa60ff,0x43fa804f,0x4fffffea,
    0x87ffbfe2,0x0dffffff,0x7e401fd4,0xfd82ffff,0x7ffcc1ff,0x2994c4ff,
    0xffffff90,0x3513b307,0x1f535c97,0x54c01530,0x4c02a600,0x02b86d8b,
    0x3e225cf2,0x0de97a25,0x200b3176,0xd911fc3f,0x0d700333,0xf117d4bd,
    0x4c0bee3b,0x4ef43f8a,0x87644fc8,0x4ffe21fa,0xa9bf83f9,0x7e44fa00,
    0x105c7e21,0x09ff53bf,0xfcd80333,0xb55907d1,0x504436f7,0x7fff443f,
    0x27fff444,0x113fffaa,0x985fbdb5,0x20666019,0xf994c0f9,0x21660c40,
    0x8fe1fc1b,0x02fffffe,0xd8fd435c,0x17607dc6,0x47ffffd5,0x76c3f87a,
    0xb89f02e0,0xcfffff86,0x12743e80,0x263ea05f,0x7fdc6cdf,0x5d7d7c07,
    0xa8cb682d,0x3e2fec42,0x3e3fb89d,0x3a3fb89d,0x362fb88c,0x2e3febcf,
    0xfff707ff,0x06b80d70,0xdd31da88,0x21fc3f83,0xb80099ec,0x83f3bd06,
    0x3a0fa86c,0x223fd98c,0xf30fe61f,0x8df039df,0xa8aff85d,0x3fffa23f,
    0x3ffeab92,0xafd7d41e,0x207c886d,0x207ff8ea,0x542b858e,0x360fcc2f,
    0x55d83f35,0x2bfddddf,0x113e63f8,0x43e440f9,0xfd35c06b,0x3332a3ff,
    0x3e1cccfc,0x81ae1fc3,0xf9835c68,0x7b87c85e,0x43f883ea,0x03ffddfc,
    0xff83fd95,0x5f81fecf,0x2b7ea35c,0x3fae2b90,0xcaefe80b,0x640f703f,
    0x3206efef,0x81b5bdab,0x6c1f9828,0x35d83f35,0x2799999f,0x20fe22f8,
    0x4c3dc07b,0x23f5082f,0xee986da9,0x13a69ac8,0x2606b83f,0xfd81ae0f,
    0x2741fa81,0x41fc41f5,0x6c3ebeda,0x333e1f40,0xb89f01ce,0x22743e86,
    0xffff305d,0xd03dc07d,0x05313f77,0x0f2315b1,0x4df74022,0x26fba2fc,
    0x26b7a2fc,0x26bb62ca,0x407b80fd,0x539fb07b,0x54df74db,0x3d83b85e,
    0x21b66ff2,0x30db9afa,0x409f539f,0x2b3f605e,0x556fc0fe,0x1f400dfd,
    0x3f935df1,0xffa803f8,0x7c43fb9b,0x2e0febad,0xb75daadf,0x5fb55004,
    0x7dcfdc15,0xdb105dab,0x03f207db,0x10bfff62,0xc985fffb,0x3222efff,
    0x6d541dff,0x36aa0aaf,0x7fec0aaf,0x3ff621ef,0x3e8802ef,0xb01dffc8,
    0x2e219fff,0xba884ffe,0x3fae204f,0xeffd981c,0xbf5103ff,0x1f7fef41,
    0xfd00b7ea,0xc817dffd,0x221defff,0x02ffffff,0xfffffe80,0xfffdff12,
    0x00100bff,0x01001001,0xd0080130,0x745fffff,0x102fffff,0x7c001300,
    0x800885ef,0xf7004008,0x01001dff,0x3ee00310,0xd00883ff,0x22001dff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x22000000,0xf506a62a,0x00ff50ff,
    0xf80262ee,0xa805fc85,0x32600aaa,0x266624ef,0x55511999,0x98aaa015,
    0x16ed40aa,0x2aaaaaaa,0x43fd0000,0x2aaaaaa8,0x0d554400,0x0aaaaa98,
    0x10d4c551,0x260d4c55,0x415530aa,0x303551aa,0x0d4c0555,0x64000555,
    0x41ffd2ff,0x7c887da8,0x0eebc980,0x17660f20,0x813fffe0,0x8064cbde,
    0x9fffffb1,0xfd2fff88,0x1767cc9f,0xfffffff1,0x7d40b503,0x3fffee1f,
    0xaecc06ff,0x44fffffc,0x90fffffc,0x43ffa3ff,0x1ffd2ffc,0xfff9fffc,
    0xff3bff33,0x05fffd0d,0x3fe63ffe,0x4007f31f,0x201db1fb,0x262f507b,
    0x00a88981,0x4ee40666,0x2f37e01a,0x0cd7d442,0xa9721806,0x3a17c41f,
    0x3f103dc4,0x03dc0fc4,0xbbdc3fbd,0x3f220d77,0x7dc5721e,0x22f45720,
    0xb81db1fb,0x7b81db2f,0x4b91ee31,0xbdf301f9,0x47d27fc0,0xb002efc8,
    0x3dc05f5d,0x45ffd7a8,0x84fffffa,0xff907ffb,0x337e09ff,0x3fff65fd,
    0x218061ff,0x360bea5c,0x7f307ea5,0x65667e20,0x3f907b80,0x77bbd43f,
    0x907ff70d,0x29717c4b,0xfaed80fd,0x03fbfb01,0xd93fb1f5,0x407e65c8,
    0xdf00faed,0x3660fa3f,0x7fc401df,0xfa83dc04,0x2fc80dfc,0x0f9101f5,
    0x407dcbf2,0xfa83ea2f,0x4300c09a,0x507ffefc,0x3fa1b63f,0x3be24faf,
    0xfeed987e,0xf17f13ee,0x822f7183,0xd900cfea,0xf701dfb9,0x013fe203,
    0x27e605fd,0x7e45dcff,0xf881feee,0x36fe09f2,0x7f4c07d6,0xcfdc880c,
    0x7d41ee02,0xf89b205f,0x9720f701,0x912f81f9,0x0301f88f,0xfb99d90c,
    0x0be33a09,0x43ffb3f5,0xc886ddf8,0xfb3ccfdc,0x1ee07f77,0xc8067f54,
    0xfa81ffef,0x301ee033,0x37e20bff,0x7644eecf,0xfb81fdcc,0x17f07ecc,
    0x75407d7f,0xfdc880cf,0x541ee02c,0x4d903fdf,0x20f701f8,0x3e07e65c,
    0x7c42ffff,0xb90c0301,0xf9f707b8,0x1df75f30,0x20144fc4,0xfffff87b,
    0x5c07b80f,0xd15c83ff,0x7d2fc41d,0x6fc40f70,0x3bff04f9,0x265c87ff,
    0xeeeee81f,0xff73f82f,0x01bfb307,0x980afd98,0x910aafda,0xd8873eef,
    0xaa87f51e,0xdb10aafd,0xbf50fee3,0x57f73039,0x6c460185,0x106ebaae,
    0x3ff209ff,0x2b3ee3ff,0x7103dc00,0x35fb507f,0x8977e440,0x23bf12ed,
    0x43faabfe,0x74c1afda,0xfd07f90f,0xed88bfa5,0x4fb87f71,0xdf987ba6,
    0x7ec47fd1,0xfffd001e,0xfffffd05,0x7fcdfea5,0x7f53fee6,0x7fffff46,
    0xff19ff72,0x27fffc1f,0x07ffffec,0x53333333,0x37fffff2,0x3003f201,
    0x07ffff10,0x3fea0598,0x3fffe60f,0xf95c8804,0x7d3ea1ff,0x263fffff,
    0x7e44ffff,0xd83ffd3f,0x7dc3f90f,0x10fff9df,0x3ffa3fff,0x7cd7ff24,
    0x0000ba63,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x51000000,0xaa881355,0x55443531,0x2aaa602a,
    0xaaaaa881,0x5555511a,0x05540a98,0x9a98054c,0x400aa980,0x04c40aa8,
    0x8054c033,0x130511a8,0x86980418,0x4c199998,0x33035289,0x12602661,
    0x833104c4,0x98853198,0x99833309,0x100400a8,0x3f201111,0x3f62ffff,
    0x50fff8ff,0x3e03ffff,0x321effff,0xb3ffffff,0x7c1fffff,0x88ffe65f,
    0x3e24fffe,0x3f20ffff,0xfd882fff,0x5bf64fff,0x7f541ffb,0x7ffd44ff,
    0x77745ffd,0x01fb2fdf,0x3ffff206,0xfffff10f,0x67fcc7ff,0xb5c25ff8,
    0xff93ff40,0x7feffec5,0x3e33ffa6,0xffff52ff,0x2e1ae09f,0x0fffffff,
    0x43fb13f8,0x360bf55c,0xbb12f804,0x2e1f45c8,0x323ff507,0x5c4efc7f,
    0x3aa3d93f,0x43642620,0xd89f31ec,0x19d07e66,0xf9185f71,0x6fcc5f37,
    0x000e65fb,0xa89f71b7,0x46b9fa9f,0x6c5fbdfa,0x220fefef,0x84e8ebaf,
    0x6c28affb,0x5f907ee6,0xbff303ea,0xaaaaaa88,0x24e87f01,0x3604fbdc,
    0x3ea2f804,0x0dced720,0x677d41ee,0x07e67ef8,0x37bfe6bb,0x3fffe4c1,
    0xd906617c,0xddf50fc4,0x7f54bfdd,0x2e4feeff,0xed981ee7,0x2a23eeee,
    0x2f57a84f,0x84ff987a,0xe81dffb8,0xa82fafeb,0x74be200f,0x83e25c85,
    0x223f9df8,0x02aaaaaa,0x3f25c87f,0x013600ff,0x917ae6fe,0x1ee07fff,
    0x5fe7dfd4,0x2bb07e67,0x743fb731,0x7c47dabd,0x3e26c802,0x33333e61,
    0xfb5bf13c,0x8fd45999,0x3332206d,0x53ea3ccc,0xf57abd40,0x703fdf90,
    0x3ff60ddf,0x07a80ffe,0xc81faed8,0x26d83e25,0xffff70fa,0x87f01fff,
    0x3baff25c,0x42449b00,0x640dffff,0x0f702fcf,0x2f3fe3ea,0x7e4df747,
    0x3f733bd2,0x3fae6fe6,0x64cdf741,0x7f54fdc6,0x654d6f43,0x9fd39f12,
    0x7ffdc373,0x800730ef,0x21faaefa,0xfa9fa9fc,0xff17fb11,0x81e8bd85,
    0xa87f9efb,0xf301aafc,0x23db10bf,0x030222fa,0x3a23f800,0x82745724,
    0x7f03e64d,0xb8aae403,0x97a83dc5,0xfd88f71f,0x3ffb62ff,0x77ffe44e,
    0x7ffec46f,0x77ff442e,0x7ffe4c6f,0x3bbfea2e,0x2f3a2eff,0x03fb2eac,
    0xffffb051,0x2b7fe25f,0xff74fadf,0x001fff19,0x88bd3f98,0x205fffff,
    0x4ffb81fd,0x00000dfd,0x7f5d6fcc,0x3ea5db10,0x55bd510b,0x567d41f9,
    0xaaaed880,0x55fb536d,0x3f662fc8,0x00440101,0x88008006,0x0c013000,
    0x98040002,0x00000005,0x00000000,0x00000000,0x3bfff200,0x43fff20d,
    0xffff52fe,0x7ffc1fff,0xffffc84f,0xffff96ff,0x4bffe21f,0x00004ffd,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x4cae0000,0x1d86c404,0x324c0020,0x7157010b,0x37777223,
    0x254084dd,0x2987f100,0x266620c0,0x08809999,0x3060c473,0xdddddddb,
    0x971d8e49,0x00019999,0x00000000,0x00000000,0x2b900000,0x87bd50ea,
    0x4c2e98ea,0x317aa5ff,0x74cbf3bf,0x97c5fc4d,0xecccccc8,0x7b9376a6,
    0x3ee2ef54,0x3633ff20,0x7fd43a23,0x47ffffff,0x361f91e9,0xcc99360f,
    0x23cccccc,0x332e170b,0x00000ccc,0x00000000,0x00000000,0x5d762000,
    0x21a2260f,0x363f99fb,0x4c2cc3d2,0x46a885ff,0xd7003f2e,0x8d53ee4c,
    0x743d8ae6,0x320fff99,0x2666662e,0x206c0999,0x00ae0a60,0x00000000,
    0x00000000,0x00000000,0x37620000,0x0f4c0fc8,0xb17d4f64,0x42cc1d17,
    0x6c985ff9,0xb800e8ec,0x599ea7a6,0x0d0e44ec,0x01cc0a88,0x00000000,
    0x00000000,0x00000000,0x00000000,0x55c80000,0x906bee1d,0xe983d51b,
    0x9836a23f,0x2665f9df,0x000820e9,0x1eeedcb5,0x042dc883,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x2e731a80,0x0b8e24cc,
    0xa9332a00,0x1cc99264,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_bold_16_latin1_x[224]={ 0,3,1,0,1,1,1,3,3,1,1,0,2,1,
3,1,1,1,0,0,1,0,1,1,1,1,3,2,-1,0,0,1,1,-1,0,0,0,0,0,0,0,1,0,0,
0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,1,3,1,1,1,-1,2,0,-1,0,0,0,1,0,0,0,
1,0,0,-1,0,0,-1,0,0,1,1,0,0,-1,0,0,1,2,3,2,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,3,1,0,0,0,
3,0,2,-1,1,0,-1,1,-1,-1,2,0,2,2,2,0,0,3,2,2,1,0,0,-1,0,1,-1,-1,-1,-1,
-1,-1,-1,0,0,0,0,0,1,1,1,1,-1,-1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,
 };
static signed short stb__courier_bold_16_latin1_y[224]={ 11,1,2,1,1,2,3,2,1,1,2,2,9,6,
9,1,1,1,1,1,2,2,1,2,1,1,4,4,2,4,2,2,1,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1,13,1,4,2,4,2,4,2,4,2,2,
2,2,2,4,4,4,4,4,4,4,2,4,4,4,4,4,4,2,2,2,5,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,4,1,2,3,2,
2,2,2,2,1,5,6,6,2,0,0,1,1,1,1,4,2,5,10,1,1,5,1,1,1,4,-1,-1,-1,0,
-1,-1,2,2,-1,-1,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,0,-1,4,1,-1,-1,-1,-1,-1,2,2,1,1,
1,2,2,1,4,4,1,1,1,2,1,1,1,2,2,2,1,1,1,2,2,3,4,1,1,1,2,1,2,2,
 };
static unsigned short stb__courier_bold_16_latin1_w[224]={ 0,3,6,8,7,7,7,3,4,4,7,8,4,7,
3,7,7,7,8,8,7,8,7,7,7,7,3,4,9,9,9,7,7,10,9,8,8,8,9,9,9,7,9,9,
9,10,10,9,9,9,9,8,8,9,10,10,9,9,7,4,7,4,7,11,4,9,10,9,9,8,8,9,9,8,
6,9,8,10,9,8,10,9,9,7,8,9,9,10,9,9,7,5,2,5,8,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,3,7,8,8,9,
2,8,5,10,6,8,9,7,10,11,5,8,5,5,4,9,8,3,4,5,6,9,9,10,9,7,10,10,10,10,
10,10,10,8,8,8,8,8,7,7,7,7,9,10,9,9,9,9,9,7,9,9,9,9,9,9,9,8,9,9,
9,9,9,9,10,9,8,8,8,8,8,8,8,8,8,9,8,8,8,8,8,8,9,9,9,9,9,9,10,9,
 };
static unsigned short stb__courier_bold_16_latin1_h[224]={ 0,11,5,12,12,10,9,5,13,13,7,9,5,2,
3,12,11,10,10,11,9,10,11,10,11,11,8,9,9,6,9,10,12,9,9,10,9,9,9,10,9,9,10,9,
9,9,9,10,9,12,9,10,9,10,9,9,9,9,9,12,12,12,6,3,3,8,10,8,10,8,9,10,9,9,
12,9,9,7,7,8,10,10,7,8,10,8,7,7,7,10,7,12,12,12,4,9,9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,11,9,8,9,
12,11,2,10,5,6,5,2,10,2,6,10,6,6,3,10,11,3,4,6,5,6,10,10,10,10,12,12,12,11,
12,12,9,12,12,12,12,12,12,12,12,12,9,11,13,13,13,12,13,6,12,13,13,13,13,12,9,10,11,11,
11,10,10,11,8,10,11,11,11,10,10,10,10,9,10,9,11,11,11,10,10,8,9,11,11,11,10,13,12,12,
 };
static unsigned short stb__courier_bold_16_latin1_s[224]={ 101,204,119,213,1,139,108,143,36,31,186,
126,154,221,190,205,243,157,165,47,135,193,65,223,29,10,144,250,152,243,243,
12,172,221,87,74,1,40,116,83,211,49,123,10,20,57,232,143,30,89,162,
173,143,104,97,200,190,180,172,84,28,149,235,173,198,85,193,95,153,115,69,
202,49,40,133,20,11,165,225,68,182,163,205,77,114,105,215,194,176,133,157,
189,180,183,159,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,101,251,208,
214,135,1,222,56,215,1,136,68,126,221,212,203,93,184,77,113,185,147,1,
194,168,99,147,83,120,93,92,102,225,236,17,18,122,64,242,247,163,154,140,
75,9,46,99,107,204,153,41,1,51,54,81,105,195,91,71,61,11,36,59,
130,115,184,194,110,82,164,124,240,216,225,234,38,231,56,65,233,47,30,73,
134,125,20,29,148,223,174,143,37,174,21,111,101, };
static unsigned short stb__courier_bold_16_latin1_t[224]={ 14,15,70,1,15,28,51,70,1,1,61,
51,70,70,70,1,15,28,28,28,51,28,28,28,28,28,61,28,51,61,51,
40,1,51,51,40,61,61,51,40,51,61,40,61,61,61,51,40,61,15,51,
40,51,40,51,51,51,51,51,15,15,1,61,70,70,61,40,61,40,61,51,
28,51,51,1,51,51,61,61,61,40,40,61,61,40,61,61,61,61,40,61,
1,1,1,70,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,14,15,15,
40,61,51,1,28,70,40,70,70,70,70,28,70,70,28,70,70,70,28,28,
70,70,70,70,70,28,40,28,28,1,1,15,28,1,15,40,1,1,1,1,
15,15,15,15,15,40,15,1,1,1,15,1,70,1,1,1,1,1,15,51,
28,15,15,15,28,28,15,61,28,15,15,15,40,28,40,40,40,40,51,28,
15,15,40,40,61,40,15,15,28,28,1,1,1, };
static unsigned short stb__courier_bold_16_latin1_a[224]={ 136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_16_latin1_BITMAP_HEIGHT or STB_FONT_courier_bold_16_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_16_latin1(stb_fontchar font[STB_FONT_courier_bold_16_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_16_latin1_BITMAP_HEIGHT][STB_FONT_courier_bold_16_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_16_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_16_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_16_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_16_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_16_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_16_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_16_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_16_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_16_latin1_s[i] + stb__courier_bold_16_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_16_latin1_t[i] + stb__courier_bold_16_latin1_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_16_latin1_x[i];
            font[i].y0 = stb__courier_bold_16_latin1_y[i];
            font[i].x1 = stb__courier_bold_16_latin1_x[i] + stb__courier_bold_16_latin1_w[i];
            font[i].y1 = stb__courier_bold_16_latin1_y[i] + stb__courier_bold_16_latin1_h[i];
            font[i].advance_int = (stb__courier_bold_16_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_16_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_16_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_16_latin1_s[i] + stb__courier_bold_16_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_16_latin1_t[i] + stb__courier_bold_16_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_16_latin1_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_16_latin1_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_16_latin1_x[i] + stb__courier_bold_16_latin1_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_16_latin1_y[i] + stb__courier_bold_16_latin1_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_16_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_16_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_16_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_16_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_16_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_16_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_16_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_16_latin1_LINE_SPACING
#endif

