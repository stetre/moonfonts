// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_bold_26_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_bold_26_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_bold_26_usascii_BITMAP_WIDTH         256
#define STB_FONT_arial_bold_26_usascii_BITMAP_HEIGHT         94
#define STB_FONT_arial_bold_26_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_bold_26_usascii_FIRST_CHAR            32
#define STB_FONT_arial_bold_26_usascii_NUM_CHARS             95

#define STB_FONT_arial_bold_26_usascii_LINE_SPACING          17

static unsigned int stb__arial_bold_26_usascii_pixels[]={
    0x33bae000,0x2207ff00,0x6fa83fec,0x32a03fe2,0x99304ccc,0x3bb2a007,
    0xc9801bdf,0x7301cccc,0x0037bdd9,0x30010000,0x02620003,0x6f765cc0,
    0x2ea2001b,0x3e03defd,0xdb73002f,0x7fc007bd,0x7ecbfb02,0x203f7006,
    0xf80ffffb,0xffff883f,0x7e42fe83,0xfffffc84,0x205ffa80,0xffffffc8,
    0x500dffff,0x705fffff,0xffffffff,0x0bff9019,0x1ee0bffa,0x8bffffb8,
    0x39ff55ff,0x401bfffd,0xfffffffc,0xfff9804f,0x82ffffff,0xffb804fd,
    0x02efffff,0xff807fcc,0x2a017fa4,0xfea82dfe,0x83ff83ff,0x5c2efffc,
    0x40ff987f,0x80fffeeb,0xfd305ffa,0x753357df,0xf505fff9,0xfe83ddff,
    0xffffffff,0x7ffcc0ef,0x223ffcc0,0xfff907fe,0x2bffbfff,0xffffdffa,
    0xffe80eff,0xffffffff,0xffff300e,0x3fffffff,0x7ec06fb8,0xffffffff,
    0x41bee01f,0x7ff12ff8,0x7ffff540,0x4ffa80ef,0xffd83ff8,0x3a09ff02,
    0x03ffe05f,0x3e602662,0xfd9801ef,0x82ffd41f,0x261dfffb,0xfe85fffd,
    0x227fe42f,0xff887ff8,0xfffeaaef,0x39ffff55,0xfb87fffb,0x3f661dff,
    0xfff984ff,0xfff9309e,0x500ff98d,0x2e21bfff,0x3f605fff,0x263ff504,
    0x3ffa01ff,0x884ffffe,0x83ff85ff,0xffb80ffd,0x203ff701,0x44000fff,
    0x201884fe,0x2ffd46fd,0x902fffc4,0xffb83fff,0x220fff45,0x7ffc87ff,
    0xff55fff8,0x27ffb85f,0x2e05fff8,0x7ff41fff,0x07fff205,0xfff105ff,
    0x0bffee09,0xb99717fc,0x9ffb99ff,0xf77ff305,0xf881fff5,0xe83ff85f,
    0x07fd80ff,0x7fc13fe6,0x45ffa80f,0x7ff5c5fd,0xe89ffdaf,0x217fea0f,
    0x7c00fffb,0x7ffc45ff,0xfc8dff30,0xfb1fffff,0x2bffb0bf,0x7cc0fffa,
    0x1fff50ff,0x225ffe80,0x55c01fff,0xfa84fd80,0x02f200ff,0xffb07fcc,
    0xffffffff,0x71ff909f,0xf103533f,0xd07ff0df,0x017fe0ff,0x3ffe0dff,
    0x225ffa80,0x3fff20ff,0x70fffffe,0x42ffd45f,0xfc805ffc,0x92ffd86f,
    0xfffc87ff,0x5ffd1fff,0x3eabff70,0x23fff06f,0xfc805ffc,0x01bfea6f,
    0xf70df700,0xfb8000bf,0x7ffffec7,0x84ffffff,0x01fbaffb,0x3ff87ff8,
    0xff887ff8,0xf83ffc04,0x5ffa80ff,0xdffc97f2,0x4cdfff30,0x217fea4f,
    0xfb804ffe,0xd5ffa87f,0xffb981ff,0x5ffd0aaf,0x3eabff70,0x23fff07f,
    0xfb804ffd,0x017ff27f,0xd81ff300,0x6c0005ff,0x25ff105f,0x3e203ff8,
    0xd801feff,0x21ffc2ff,0xffa86ff9,0x407ff404,0xffa80fff,0x7fc4ffa5,
    0x127fec0f,0x42ffd4df,0xfa803fff,0x9fff80ff,0xfff105ff,0xfd0bffb0,
    0x07ffeabf,0x3fe1fff3,0xfffa803f,0xf909ffd0,0xf0bfffff,0x04ffe85f,
    0xa81ffc00,0x03ff30ff,0xbeffffe8,0x33ffea00,0x3f227ff0,0x3ffb82ff,
    0x7c17fec0,0x5ffa80ff,0x17fdc7fe,0xdf31ffe4,0x7f42ffd4,0x7ffa804f,
    0x5ffdff90,0x321ffe20,0x7ffc47ff,0xc87fff55,0x13ffa7ff,0xfd9ffea0,
    0xffffc85f,0x44fd85ff,0x20004ffd,0xff901ff8,0x64007fdc,0x02ffffff,
    0x7fc7fff2,0x209fff53,0x7e402ffd,0x80fff83f,0x4ff15ffa,0xffd80ffd,
    0xffa97ee1,0x805ffd85,0xff306ffb,0x3e201fff,0xefff887f,0x55ffffcb,
    0xfb5bffff,0x2ffec7ff,0xf737fdc0,0xfddd70df,0x8df70bff,0x20005ffc,
    0xfecb87fa,0xccffeccf,0x7ffec402,0xfff900ff,0x7fd4ffe3,0x03ffb04f,
    0xff83ffb8,0x35ffa80f,0xe83ffcdf,0xf51fec7f,0x0dff90bf,0x02fff417,
    0x440bfffd,0xfff707ff,0x2bffdfff,0xffffeffa,0x3ffe46ff,0xf32fff40,
    0xffd801ff,0x7dc7f985,0x05efc07f,0x3ff617f2,0xffffffff,0xfcfb804f,
    0xfffb82ff,0x3227ff0b,0xffb82fff,0x40ffe402,0xffa80fff,0x3ffcff15,
    0xff537fcc,0x4c2ffd41,0x3fea3fff,0x203fffab,0x2202fffb,0x3fea07ff,
    0x55ffbaff,0xfffd1bff,0x07fff309,0x3e1fffd4,0x7fec04ff,0x7cc3ff05,
    0xfff702ff,0xec83fe85,0xeffeeeff,0x9fb803ee,0xffe85ff9,0x3ea1ffc1,
    0x03ffa85f,0x7fc07fec,0x25ffa80f,0x83ffd1fe,0x7ff34ffd,0xfb05ffa8,
    0x3ffa65ff,0x7dc06fff,0x3ffc407f,0xbff70440,0x01897fea,0x541fffec,
    0xffb86fff,0xfffc884f,0xfc87fd05,0x7ffcc2ff,0xa80ffc46,0x03ff30ff,
    0x23f77ed8,0x86ff86ff,0x87ff83ff,0x7f404ff9,0x501fff07,0xb9fe4bff,
    0xffd99eff,0xa84ffcdf,0xfff105ff,0xffff99df,0x7ffc405f,0x67ffc404,
    0xbff7000b,0x10017fea,0xd9bdffff,0x3203ffff,0xfecdffff,0xf904ffff,
    0xeffff88b,0x42ffffec,0x9ff207fa,0x7ec00ffb,0xff99fbbf,0x7c37fc44,
    0xf07fe83f,0x06ff80bf,0xff501fff,0xffd37d4b,0xffffdfff,0x17fea07f,
    0xfffffe98,0x42efffff,0x00ffffdd,0x02ffffe8,0x3eabff70,0xfe98005f,
    0xffffffff,0x7fffe402,0x02ffffff,0x3fa61fea,0x3fffffff,0x3f605fc8,
    0x2601bf25,0xffcfefff,0x42ffc41f,0x0ffe83ff,0x3e607fe8,0x01fff03f,
    0x7fc4bff5,0x222ffb22,0x2661bdfd,0x700bff50,0xf9dffffd,0x7ffc9fff,
    0xff3003ff,0x3ee005ff,0x00bff55f,0x7ffff5c0,0xb75000ce,0x017bffff,
    0xd901ff88,0x203bffff,0x93fe03fe,0xffb004fe,0x107fffff,0x07ff0bff,
    0xff501ffb,0x403fee03,0xffb80fff,0x000ffdc5,0xfa87fec4,0x20c4005f,
    0x3b20ffd8,0x098002de,0x99e64c00,0x300003cc,0x02600003,0x20026600,
    0x00998019,0x00998266,0x3bfff6a0,0xf09ff502,0x05ffb07f,0x27ec13fa,
    0x4441fff0,0xffd84ffd,0xffd3000c,0x002ffd45,0x00005300,0x00000000,
    0x00000000,0x00000000,0x40000000,0xfff501fb,0x907ff07f,0xfa85ffff,
    0x5c0ff887,0x320fffee,0xf903ffff,0x5357bdff,0x85fffdb7,0x01eefffa,
    0x00000000,0x00000000,0x00000000,0x00000000,0x5c000000,0xffff701f,
    0xf107ff01,0x5fd07fff,0xffc84fc8,0x3ffa0fff,0x3f6600ef,0xffffffff,
    0xffa80cff,0x00002fff,0x00000000,0x00000000,0x00000000,0x00000000,
    0x80544000,0xdd00ceea,0x0bbb2205,0x03db13aa,0xd8999995,0x51000cde,
    0x59bdddb9,0xccccc980,0x00000001,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x80000000,0x4401bcca,0x3001bcca,0x66440003,
    0x59b97104,0x0f326000,0x202f32e2,0xa8003cc9,0x1aaaaaaa,0x900e75c4,
    0x3bae009f,0x544001de,0x999301cc,0xa82664c0,0x303defdc,0xddb50799,
    0x66665c39,0x1ccccccc,0x26007993,0x859973cc,0x03fffffd,0x9fffffd3,
    0x5ffffdc0,0xf9805ff9,0xffff987f,0x5c000eff,0x7ffd45ff,0x7fdc2fff,
    0x7ffc4005,0x263fffff,0x884fffff,0xffe800ff,0x5001ffff,0x83dfffff,
    0x3ea07ffa,0x7ffec47f,0x541fffff,0x7ffd46ff,0x3fff61ff,0xffffffff,
    0x200bff73,0x7ffd6ffa,0x7fffffe4,0x7fffc42f,0xfd82ffff,0xffdfffff,
    0x47ff9805,0xffeffff8,0x7fdc005f,0x3ffffe65,0x3fee2fff,0x7ffcc005,
    0x363fffff,0xc81ff96f,0xeffa804f,0xa805ffbb,0x6fffffff,0xf503ffd4,
    0xffffe8ff,0x20fffffe,0x7fec6ffa,0x7ffec4ce,0xffffffff,0x200bff73,
    0x7ffd6ffa,0x7dcbffe2,0x877fdc6f,0x7fcc5ffc,0xfffea9df,0x47ff9805,
    0xff30effa,0x7fdc001f,0x2637ff65,0x3fee6ffd,0x6ffdc005,0x3a1ccccc,
    0x443ff54f,0xffd800ff,0xd003ff22,0xffd119ff,0x503ffd45,0x7ffc4fff,
    0x7fff710a,0x3fa04cc4,0x3333102f,0x1dfff733,0x54017fee,0x27ffd6ff,
    0x7ffc5ffb,0xf88bfae1,0x1bff60ff,0x26017ffe,0x1ffe47ff,0x19807ff6,
    0xfff97fee,0x5c7ffe61,0x802625ff,0xff801ffc,0x7e45ff33,0x4bffb005,
    0x3ea00ffe,0x50e6546f,0x7fd40fff,0x7417fee7,0xfff005ff,0xfff88003,
    0x017fee1f,0xffeb7fd4,0xfd87ffb3,0x6ffa803f,0x7ec27ff4,0x7ff9805f,
    0x3fa27fd4,0xffffb80f,0xff15ffbb,0x2e7ffd0f,0xffff9dff,0x10ffe80d,
    0xffaaff40,0x2001ff11,0xffdafffa,0x027fe406,0x2a07ffa8,0x3ffea7ff,
    0x2a099882,0xffffb6ff,0x3fa009ff,0x2ffdc2ff,0x2a1dffd1,0x25ffb6ff,
    0x7fe42ffd,0x3ffae204,0x5c0fffc3,0xff9805ff,0x4dfffc47,0xffd85ffc,
    0x5fffffff,0xffd0fff1,0x3ffffee9,0x7c0effff,0x83effdff,0x0ffc8efc,
    0xfd800bf9,0x400dffff,0xcdcabffd,0x207ffa80,0x3fe27ffa,0x5402ceff,
    0xffffb6ff,0xffb009ff,0x4bff707f,0x3ea0effe,0x3a5ffb6f,0x27fe42ff,
    0xd07fffb0,0xbff905ff,0x10fff300,0x09fffffd,0xd53bfff3,0x7ffcbfff,
    0x5d7ffe21,0xfc9bffff,0x3ffe64ff,0x445fffff,0xf13fffff,0xffb8001f,
    0xffd005ff,0x85fffffd,0x3ea07ffa,0x7fffdc7f,0xfa81cfff,0x7fff536f,
    0xfffb8035,0x36bff705,0x7fd40eff,0x3fe3ff96,0x02ffe42f,0xf907fffd,
    0x0bffd0bf,0xb10fff30,0xb09fffff,0xfff88dff,0x2277ff25,0xff76fffd,
    0x27ffc85f,0xfebefffa,0x0bda83ff,0xf90017f2,0x200dffff,0xfedfffff,
    0x1ffea0ff,0xea87ffa8,0x4fffffff,0x3fe37fd4,0xfff9801f,0x9bff700e,
    0xff501fff,0x7fc3feed,0x02ffe42f,0x41dffb55,0x3ea1fffa,0xff9805ff,
    0x5efff447,0x3fa0effe,0x25ffe84f,0xfffffff8,0x0fff75ff,0x2a21fff5,
    0x037fe42c,0xf911ff88,0xfffe817d,0x7bd4fffc,0x20ffff81,0x3fea5ffc,
    0x81ffea07,0xfffffec9,0xff1bfea4,0xfff8803f,0x3ffee00f,0xff503fff,
    0xffe9fead,0x8027fe42,0x3fe23ffd,0xffffedff,0x47ff9805,0x7fec4ffc,
    0x3207ffe2,0x7ff445ff,0xf74ffcdf,0x3fff10bf,0x01fff500,0x3fe2bf90,
    0x3fea6ffe,0xf7fff91f,0x8dffd0ff,0x3fe67ffa,0x01bfee07,0x53fffdc4,
    0x1fff8dff,0x017fff40,0x3fffffee,0x26dff506,0x90bff67f,0x3ee007ff,
    0x7fffd45f,0x315ffcef,0x47ffa835,0x7fd41ffe,0x320bffe5,0x215105ff,
    0xdff74ffc,0x003fff10,0x8801fff1,0x26ff71ff,0x89ff92ff,0x84fffffd,
    0x7fc44ffd,0x403ffe67,0x332e6ffb,0x23fff301,0x7ffc6ffa,0x0ffff601,
    0x3bfffee0,0x6ffa83ff,0x27fecdf3,0xdcb8bffa,0x4c37fdc0,0xffb8ceec,
    0xfa8bff74,0x20fffc6f,0x3ffa6ffa,0x085ffe84,0xff72ffe8,0x0fffa81f,
    0xffa83955,0x325fc806,0x7f4ffe6f,0x7fff442f,0x46ffc80f,0x3fe27ff9,
    0x4bff902f,0xff105ffe,0xf1bfea3f,0x3fee03ff,0xfff7005f,0xa81fff35,
    0x549d16ff,0x3ffe26ff,0xfd0fffa0,0x3ee0049f,0x43fff53f,0x7ff45ffd,
    0xf927fec4,0x7ffc41df,0xf98fff65,0x0fffee7f,0x7fecfff9,0x2027fe45,
    0x97f61ff8,0x0bff94ff,0x305ffff9,0x7fdc3fff,0x207fffc6,0x3f24fff9,
    0x7ffd82ff,0xfff1bfea,0x0dfff503,0xfb2ffdc0,0x16ffa8bf,0x6fff4133,
    0x7dc4ffeb,0xfffebdff,0xb03bfee1,0x3ffe25ff,0x42ffffdf,0xfdadfffb,
    0x3ffe21ff,0x5ffffbbf,0x3f2fffe6,0x3ffee3ff,0x3fffdaef,0x36b7ffea,
    0x7e401fff,0xff8bfe45,0x77dfff13,0x9ffffffd,0xccfffd81,0x7fdc2fff,
    0xfffeceff,0x3fffe20f,0x5ffffdcf,0xfff1bfea,0xddfffb03,0x9ddddddd,
    0xff897fee,0x6dbfea1f,0x3ffea2ff,0xfd80ffff,0x83ffffff,0xfeccefff,
    0x3ffee0ff,0xfb04ffff,0x09ffffff,0x9ffffff9,0xfffd8bff,0x3ee0dfff,
    0xffffffdf,0xfffffc86,0x7fc403ff,0x7e57fd41,0x3ffff21f,0xfffdffff,
    0x7fffcc0e,0xffb05fff,0x7fffffff,0xffffff50,0xffa8bfff,0x6c0fffc6,
    0xffffffff,0xff75ffff,0x2a6ffc8b,0x85ffb6ff,0x00efffe9,0x07bfffee,
    0x7fffffdc,0xfffa82ff,0x7fdc03df,0x3ea03fff,0x5ff9aeff,0x27fff5c4,
    0x7f45ffdc,0x3fee04ff,0xfc802eff,0x7ffff905,0xdffffd50,0x4407f625,
    0x403ffffd,0xdfffffeb,0x3fff6201,0xffa83eff,0x6c0fffc6,0xffffffff,
    0xff75ffff,0x52fff88b,0x0bff6dff,0x310004c4,0xddd93001,0x0188019b,
    0x20009880,0x00880008,0x22001880,0x03320009,0x9800bb88,0x04c00601,
    0x0004c400,0x000004c4,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x902ccb80,
    0x99501999,0x201e65c7,0x32e1ccc8,0x332a00cc,0x9999931c,0x79999999,
    0x440b3322,0x33263ccc,0x99991003,0x00179999,0x66443bae,0x2999100c,
    0x303cccc9,0x32279999,0x991000cc,0x66664c09,0x32299930,0x1332604c,
    0x882ccb88,0xcccccccc,0xeb800ccc,0x217ff21e,0xd82ffff9,0x1fff24ff,
    0x4c1fff70,0xff104fff,0x7fffdcdf,0xffffffff,0x207fff65,0x3ea1fffc,
    0xfff3006f,0x7fffffff,0x30fffa80,0x3e20bfff,0xfffff57f,0x57ffff20,
    0x3000fff9,0xff301fff,0xbffd45ff,0x3ea07ff9,0xfffe987f,0x3fe61eff,
    0xffffffff,0x7ffc400f,0x2e1ffea2,0xfe84ffff,0x0bffe62f,0xfc85ffd8,
    0xfffc81ff,0x3ffffee1,0x5fffffff,0xf317ffe2,0x6ffa89ff,0xfffff300,
    0x07ffffff,0x4c3fffe2,0xf882ffff,0xfffff57f,0xbffffd03,0x4003ffe6,
    0x7c40fff9,0x7fd42fff,0x540fff37,0x7ffc47ff,0x30efffff,0xffffffff,
    0xfe801fff,0x3ffe22ff,0x37fffec1,0xfd03ffe2,0x3ffe20bf,0x45fff882,
    0x4c43fff8,0x9effc999,0x7fd40999,0x21bffa2f,0xf3006ffa,0xf73333ff,
    0xfff70dff,0x3ffe61ff,0x57ff886f,0x887fffff,0xf35fffff,0x3e6001ff,
    0x3ffa20ff,0x37ffa82f,0x7fd40fff,0xa8f7fe47,0xfff33fff,0x33333333,
    0x2ffffb80,0x3fe17ffc,0x3ea0ffff,0x0fffb87f,0x2a07ffa8,0x3ff62fff,
    0x0dff9006,0x2e3fff60,0xffa82fff,0x3e602626,0x1fff507f,0x3fffffa2,
    0xfffff30f,0xf57ff887,0xfa8bffdf,0xff35ffef,0x3fe6001f,0x5fffd10f,
    0x7cdffea0,0x1ffea07f,0xffc87ffd,0x001fff35,0x3ffffe60,0xf327fec2,
    0x5c5ffbbf,0xfff885ff,0x404ffd82,0xfff56ffd,0x1bff2003,0x7efffc40,
    0xdff504ff,0x43dfffd1,0xff107ff9,0x27bfe25f,0xfff30fff,0x7fc41fff,
    0xffdbff57,0x5ffcffc8,0x2001fff3,0xffb0fff9,0xbffd407f,0x3ea07ff9,
    0x20554c7f,0xfff34ffc,0x3ffa0001,0x7fdc2ffe,0x3eeffee6,0x40fff64f,
    0x7fc45ffe,0x7ffc401f,0x2004ffec,0x2e006ffc,0x00ffffff,0xfffffff5,
    0x3fe61fff,0x23fff507,0x43ffe2f8,0x5ffeeff9,0x7fd5ffe2,0x3fa1ffcd,
    0xff35ffaf,0x3fe6001f,0x03fffd8f,0xff9bffd4,0xb999999f,0x3fa007ff,
    0x01fff33f,0xfb5ff900,0x27ff985f,0x6ff99ffe,0x7dc07ffe,0x1ffea0ff,
    0x7ffffdc0,0x3ff2000f,0x7fff4006,0x3ffea02f,0x2fffb9af,0x3333fff3,
    0x408ffff7,0xdff30fff,0x3e25fff3,0xf5bff57f,0x2b7fe29f,0x1fff35ff,
    0x37ffe600,0x5404ffff,0xffff37ff,0xffffffff,0x3ffee00f,0xdddfff30,
    0x3e60dddd,0xf05ffb4f,0x4fff13ff,0x7ff98fff,0xd8bffe20,0x3fa004ff,
    0x64002fff,0x7dc006ff,0x7fd407ff,0x99ffec1f,0xffffffff,0x7fc03fff,
    0x36dff30f,0x7ff88eff,0xdff1bff5,0x3feaffea,0x001fff35,0x3fffffe6,
    0x3ea01fff,0xfffff37f,0xffffffff,0x47fff500,0xfffffff9,0x1ffd07ff,
    0x3f60bff6,0x365ffabf,0x05ffaaff,0xff8affec,0x3fe6001f,0xffc8005f,
    0x3ffe2006,0x3fea03ff,0xf34ffc87,0xffffffff,0x1fff009f,0x7fc5bfe6,
    0xf57ff8cf,0x323ffabf,0x35ffa9ff,0x26001fff,0xffcfffff,0x5ffea06f,
    0xeeeefff9,0x407ffeee,0x7cc5fffa,0xffffffff,0x362ffc87,0xdffb82ff,
    0x3fea3ffc,0x5403ffcc,0x6ffa8fff,0x02fff800,0x006ffc80,0x3ffffff6,
    0x90dff500,0x3ffe69ff,0x00bccdee,0x3e61fff0,0x2bffee6f,0x2bff57ff,
    0x57ffaffc,0x3ffe6bff,0xffff3000,0x40fffea7,0xfff37ffa,0x503ffd40,
    0xff30bfff,0x3fe6001f,0xbffe999d,0x3bbfe609,0x3bfe20ff,0xff801ffe,
    0x003ffdbf,0x8002fff8,0xf5006ffc,0x0dfff9ff,0x3ee1bfea,0x00fff34f,
    0x261fff00,0x7fff46ff,0x2bff57ff,0x55ffeffa,0x3ffe6bff,0x9fff3000,
    0xa81fffe8,0x0fff37ff,0xfa83ffd4,0xfff305ff,0x3fff2001,0xffffffff,
    0x3ffffe22,0x7ffffe86,0xffdff900,0xfff0001f,0xdff90005,0x2dfff100,
    0xfa83fffb,0x34ffb86f,0xf0000fff,0x1bfe61ff,0x2ffffff3,0xfff15ffa,
    0x57fea7ff,0x3000fff9,0xff981fff,0x37ffa86f,0x7fd40fff,0x05fff987,
    0x4003ffe6,0xfffffffc,0x7f42ffff,0xffc84fff,0xff5005ff,0x2000dfff,
    0xc8002fff,0xffd806ff,0x03fffa1f,0xff70dff5,0x001ffe69,0x7cc3ffe0,
    0xffffc86f,0x7f4bff57,0xbff51fff,0x4003ffe6,0xfc80fff9,0xbffd43ff,
    0x3ea07ff9,0x37ffc47f,0x003ffe60,0x66666654,0x641cdffe,0xfa82ffff,
    0x3e003fff,0x0003ffff,0x90005fff,0xffa80dff,0x37ffcc4f,0x3ee1bfea,
    0x00fff34f,0x261fff00,0xfff886ff,0x64bff57f,0x3fea7fff,0xdddfff35,
    0x265ddddd,0xff880fff,0x5ffea0ff,0x3ea07ff9,0x7fffe47f,0xf35fffff,
    0xb00001ff,0x3fea05ff,0xfff880ff,0x3ff2002f,0xff0000ff,0xff90005f,
    0x7fffc40d,0x23fffb80,0xffb86ffa,0x000fff34,0x3e61fff0,0xffff506f,
    0xffa97fea,0x4d7fea5f,0xffffffff,0xfff33fff,0x97ffee01,0xfff37ffa,
    0x3a3ffd40,0xffffffff,0x01fff35f,0x05ffb000,0xe81bffe2,0x26000fff,
    0x20005fff,0xc8002fff,0x3ff206ff,0x3fffa02f,0xf70dff50,0x01ffe69f,
    0x4c3ffe00,0x3ff606ff,0x7c4bff57,0x57fea3ff,0xfffffff9,0xff33ffff,
    0x7fff401f,0x3e6fff52,0x9ffea07f,0xfffffff9,0xfff35fff,0xffb00001,
    0x00000005,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x99999910,0x4c999999,0xbccccccc,0x9999100a,
    0x03799999,0x33333322,0x54002ccc,0x26000ccc,0x8003cedc,0xaaaaaaaa,
    0x000032aa,0x26666000,0x00a98800,0x20004c40,0x88000099,0x0004c401,
    0x26200000,0xfffff309,0x4fffffff,0xfffffffa,0xff982fff,0xffffffff,
    0xffff983f,0x2fffffff,0x07ffff00,0xfffffb10,0x5ffd05ff,0x7ffffffc,
    0x17dd6fff,0x217fea00,0x7f544ffc,0xb104ffff,0x01bfffff,0x677fff54,
    0x3fffee00,0xfd98001f,0xffffd983,0xb3ffd82e,0x5ffc85ff,0xff537fcc,
    0x3ffffe6b,0x27ffffff,0xfffffffa,0x7cc4ffff,0xffffffff,0x7fcc4fff,
    0xffffffff,0x7fd401ff,0xffd806ff,0x1ffffdef,0xfff17ff4,0xdfffffff,
    0x0073fffa,0xff90bff5,0x7ffffc49,0xffd83fff,0x706fffff,0xdfffffff,
    0x3fffff60,0xfd5003ff,0xfff887ff,0x6c4fffff,0x89ff53ff,0x7fdc7ffe,
    0x7cd7fea4,0x999999ff,0x3ffea199,0xffeb9999,0x27ffe61f,0xffea9999,
    0x4cfffcc6,0x4fffb999,0x7ffffec0,0x07ffea01,0xffe8dff9,0x33333322,
    0xffb3fffc,0x2a05bfff,0x4ffc85ff,0x7d42bff2,0x37fee0ff,0x40fffb99,
    0xeaadfff8,0x7ffd43ff,0x00fffc9b,0xffffff71,0x67fff445,0x362fffea,
    0x4fff13ff,0x361ffff8,0x57fea1ff,0x54007ff9,0x3ffa07ff,0xa81ffe66,
    0x3fe60fff,0x817ff207,0x5ffdfff8,0x2213ff20,0x04cc47ff,0x262ffcc0,
    0xbefffffc,0x3217fea0,0x0bffe4ff,0x81751033,0x7fe42ffd,0x3a277cc6,
    0x1ffe43ff,0x3fffff26,0x7ffdc0be,0x3137fec0,0xa8ffec13,0xff13ffff,
    0x7fcd3e0f,0x3ffd4007,0x261fff50,0x3fe607ff,0x81ffe60f,0x3ee04ffc,
    0x00fff9df,0xff101531,0xffe8000f,0x3fff6a00,0x0bff52ff,0x7fec9ff9,
    0x1001bdff,0xe87fffb5,0x3fe004ff,0xb2ffcc1f,0x039fffff,0x7d427fec,
    0x7fdc00ff,0x2bfdff93,0x2fa84ffa,0x3333fff3,0x7d413333,0x3ffe207f,
    0x640fff32,0x3ffcc6ff,0x201fffb8,0x7ffd2ffe,0xbffb1000,0x17fd4000,
    0x3fffc880,0xff90bff5,0x7ffffc49,0xec982eff,0x43ffffff,0xf1002fff,
    0xffffffff,0x17fff4df,0xf02fff80,0xff8803ff,0x2ff9bfd5,0x2fdc2ffc,
    0xfffffff3,0x7d45ffff,0x9fffc07f,0xccccfff9,0x4c3fffec,0xffffffff,
    0x3e601fff,0x0dff90ff,0x0fffe880,0x01bfa000,0x9ffffe4c,0xffc86ffa,
    0x7fff5c44,0x3fe60fff,0x3ffdadff,0x98017ffc,0xeeeeefff,0x3fffa5ee,
    0x7ff400be,0x01fff882,0xbff9ffe8,0x87ff9ffa,0x7fffcc28,0x2fffffff,
    0xfd01ffea,0x3fffe69f,0x4fffffff,0xffffff98,0x201effff,0x3fe25ffc,
    0x3ffa001f,0x3ee0001f,0x3fae203f,0xf50cffff,0x09ffb0df,0x1fffedc4,
    0xffd89ffd,0x5c1fff43,0x07ffe21a,0x7fffecc0,0x9ffb01df,0x001fff50,
    0x13ffbff7,0x00bffbff,0x3333ffe6,0x2a1ccccc,0x7ff407ff,0xffffff33,
    0x26037fff,0xeeeeefff,0xf883ffff,0x2fff42ff,0x00effd80,0x3e201331,
    0xffc980ff,0xf983efff,0xa7ffc47f,0x7dc0edc8,0x81fff15f,0x7fe43ffe,
    0xd07ffcc6,0x1bdb89ff,0xfffffc98,0x3ffee0be,0x3137fec0,0xffff9813,
    0x0bffffa7,0x7ff984cc,0x03ffd400,0x7fccbffe,0x1dffd517,0xb81ffe60,
    0x7fd40fff,0xffeccccf,0x7ffc400f,0x40bffa00,0xffd04ffb,0x7c405bff,
    0xffea9dff,0x277ff64f,0x3a3ffea8,0xffd98cff,0x7fffc43f,0x543ffebb,
    0xffa9cfff,0x3fee201f,0x3fe23fff,0xffffbcff,0x3a0fff61,0x3fee5fff,
    0x6ff980ff,0xa800fff3,0x3fe207ff,0x88fff31f,0xf980ffff,0x17ffc07f,
    0x3ffffffa,0x403fffff,0x7f404ff9,0x03ff902f,0x40073ffa,0xcffffffd,
    0x3ffe24ff,0x546fffff,0xffffffff,0xffffb84f,0xff906fff,0x007fffff,
    0x221fff54,0xfffffffe,0x641ffec3,0x3fe63fff,0x2dff305f,0x54007ff9,
    0x3ff207ff,0x50fff30f,0xff30bfff,0x24fff80f,0xfffffff9,0x406fffff,
    0x7f403ee9,0x40ffd02f,0xfd8000be,0x4ffa9eff,0x7ffffecc,0xfffeb80c,
    0xd307ff8a,0x4019ffff,0x03dfffeb,0x91079300,0xb03dfffd,0xfff307ff,
    0x302fff81,0x1ffe6dff,0x20fff500,0x3e63fffa,0x7fffb07f,0x2e07ff98,
    0x3ff22fff,0xa999999e,0x26201fff,0x81fa8009,0x00006ff8,0x4c0004c0,
    0x00110009,0x22000cc0,0x20000001,0x00000018,0xdfff3000,0xdddddddd,
    0x3bbffea3,0x46ffffee,0xff107ff9,0x7ffcc1ff,0xfffeeeee,0x0fffe0ef,
    0x540bffd0,0x07d806ff,0x00009ff3,0x00000000,0x00000000,0x00000000,
    0x00000000,0x3fffffe6,0x52ffffff,0xffffffff,0xff981dff,0x97ffea07,
    0xfffffff9,0x2a1fffff,0x7dc00fff,0xdff500ff,0xf702fe80,0x0000007f,
    0x00000000,0x00000000,0x00000000,0x26000000,0xffffffff,0xff52ffff,
    0x5bdfffff,0xb01ffe60,0x3fe65fff,0xefffffff,0x02ffec0b,0xa81fffc4,
    0x005406ff,0x00005ff9,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x88002620,0x00003101,0x0c400000,0x00000000,
    0x4cc05ff9,0x99999999,0xb82fc809,0x299953cc,0x1a982ccc,0x66664420,
    0x87ffa24c,0xbbbbbbb8,0x003bbbbb,0x00000000,0xffa80000,0x1efffe8c,
    0x3feabff2,0xfffd33ff,0x03ff9009,0xfb13ffe6,0x5dffdcdf,0xfff10fff,
    0x4dffffff,0xffd05ffc,0x0bfff107,0x7ffffffc,0xfb84ffff,0xf95ffd81,
    0xa8fffedf,0x11beffff,0x3fffe6d7,0x12ffcc7f,0xffffffff,0x000fffff,
    0x00000000,0xbff50000,0x1fffffff,0x3fffbff2,0xffffcfff,0x7fe404ff,
    0x47fff201,0x3ee1fffb,0x226fffef,0xffffffff,0x03ffe66f,0xf901fff3,
    0x3fe03fff,0xffffffff,0x3f77f34f,0x57ff61f7,0x7fff6ffc,0x3fffffe6,
    0xf36fffff,0xf30fffff,0x3333221f,0xcccccccc,0x00000004,0x80000000,
    0xb9affffa,0xfff93fff,0xffffd33b,0x80fffb35,0x7f401ffc,0x43fff8ef,
    0x4dcffffb,0x3b333322,0x7ff43fff,0x4427fe42,0xd04fffff,0xdddddddd,
    0x3ffee7dd,0xff92ffff,0x7f57fee9,0xfb9df33f,0x2bffffff,0x03bbbbb8,
    0x00000373,0x00000000,0xfa800000,0xa7fec1ff,0x3ea0fffc,0x1ffe62ff,
    0x8803ff90,0x85ffffff,0x2002fffb,0xfb84fffa,0x40fffc5f,0x0ffeaffb,
    0x3ea20000,0x3fee0aef,0x3f69ff53,0xf930731f,0x000007df,0x00000000,
    0x00000000,0x90fff500,0x17ff29ff,0x7c41fff5,0x3bbba0ff,0x3eeeefff,
    0x0fffffb8,0x2007ffb8,0xf105fff9,0x1bfea1ff,0x4ffbbffc,0x99999998,
    0x7ec09999,0x97fcc3fd,0x1ff73ff8,0x00000000,0x00000000,0x00000000,
    0x21ffea00,0xbff94ffc,0xff87ff98,0x3ffffe0f,0x04ffffff,0x2e07fffb,
    0xff1006ff,0x7fe401df,0xf707ffb3,0x207ffc9f,0xffffffff,0x57f24fff,
    0x304cc2fe,0x00066213,0x00000000,0x00000000,0x80000000,0xffb86ffa,
    0xf989ff94,0x20fff86f,0xffffffff,0xff884fff,0xbff706ff,0x1fffd100,
    0xf8eff980,0x1ffe80ff,0xfff0fff2,0xffffffff,0x03a86c49,0x00000000,
    0x00000000,0x00000000,0x3ea00000,0x94ffb86f,0x6ff989ff,0x2660fff8,
    0x99affd99,0xffffd809,0x05ffb84f,0x001fffe8,0x09ff9ffd,0xff98dff5,
    0x77777746,0x003eeeee,0x00000000,0x00000000,0x00000000,0x2a000000,
    0x4ffb86ff,0xff989ff9,0x200fff86,0x7d401ffc,0x41fffcff,0x7ec05ffb,
    0x3ee001ff,0x9881ffff,0x00199809,0x00000000,0x00000000,0x00000000,
    0x00000000,0x70dff500,0x13ff29ff,0xfff0dff3,0x00ffe401,0x3fa7fff1,
    0x02ffdc6f,0xdddffff7,0xff101ddd,0x00000dff,0x00000000,0x00000000,
    0x00000000,0x00000000,0x1bfea000,0x7fe53fee,0x7c37fcc4,0x3ff200ff,
    0x99bff601,0x3fee4fff,0x3ffff205,0x00ffffff,0x0007fff9,0x00000000,
    0x00000000,0x00000000,0x00000000,0x3ea00000,0x94ffb86f,0x6ff989ff,
    0x2a00fff8,0xfff700cc,0x72fffb83,0x7fe40bff,0xffffffff,0x01fff300,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__arial_bold_26_usascii_x[95]={ 0,2,1,0,0,1,1,1,1,0,0,0,1,0,
1,-1,0,1,0,0,0,1,0,0,0,0,2,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,0,1,
1,1,1,1,1,1,1,0,0,1,-1,0,0,-1,0,1,-1,0,1,-1,0,0,1,0,0,0,0,0,1,1,
-2,1,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,0,2,0,0, };
static signed short stb__arial_bold_26_usascii_y[95]={ 21,4,4,4,2,4,4,4,4,4,4,6,17,13,
17,4,4,4,4,4,4,4,4,4,4,4,8,8,6,8,6,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,23,4,8,4,8,4,8,4,8,4,4,
4,4,4,8,8,8,8,8,8,8,4,8,8,8,8,8,8,4,4,4,10, };
static unsigned short stb__arial_bold_26_usascii_w[95]={ 0,4,9,13,12,19,16,4,7,7,9,13,4,8,
4,8,12,9,12,12,13,12,13,12,12,12,4,5,12,13,12,13,23,17,15,15,15,14,13,16,15,4,12,16,
13,17,14,17,14,17,16,15,14,14,17,22,16,17,14,7,8,7,12,15,6,13,13,13,13,13,9,13,12,4,
7,12,4,19,12,14,13,12,9,12,8,12,13,19,13,13,12,9,3,9,13, };
static unsigned short stb__arial_bold_26_usascii_h[95]={ 0,17,7,18,22,18,18,7,22,22,8,13,8,4,
4,18,18,17,17,18,17,18,18,17,18,18,13,17,14,9,14,17,22,17,17,18,17,17,17,18,17,17,18,17,
17,17,17,18,17,19,17,18,17,18,17,17,17,17,17,22,18,22,10,3,4,14,18,14,18,14,17,18,17,17,
22,17,17,13,13,14,18,18,13,14,18,14,13,13,13,18,13,22,22,22,6, };
static unsigned short stb__arial_bold_26_usascii_s[95]={ 253,251,136,239,1,121,141,146,38,46,126,
34,250,165,250,230,1,120,215,14,242,108,158,103,54,81,225,97,197,112,116,
83,70,65,49,214,16,1,228,188,199,194,41,177,163,145,130,170,105,102,32,
187,60,172,24,1,75,42,218,94,205,54,99,181,174,155,94,169,67,183,208,
27,92,203,62,233,246,14,1,210,156,143,62,142,134,129,85,230,48,120,72,
28,24,14,151, };
static unsigned short stb__arial_bold_26_usascii_t[95]={ 1,24,79,1,1,24,24,79,1,1,79,
79,61,79,70,1,24,43,43,24,43,24,24,61,24,24,61,61,61,79,61,
61,1,61,61,1,61,61,43,1,43,43,24,43,43,43,43,1,43,1,61,
24,43,24,43,43,43,43,24,1,1,1,79,79,79,61,24,61,24,61,24,
24,43,24,1,24,24,79,79,61,1,1,79,61,1,61,79,61,79,1,79,
1,1,1,79, };
static unsigned short stb__arial_bold_26_usascii_a[95]={ 103,124,177,207,207,331,269,89,
124,124,145,217,103,124,103,103,207,207,207,207,207,207,207,207,
207,207,124,124,217,217,217,227,363,269,269,269,269,248,227,290,
269,103,207,269,227,310,269,290,248,290,269,248,227,269,248,351,
248,248,227,124,103,124,217,207,124,207,227,207,227,207,124,227,
227,103,103,207,103,331,227,227,227,227,145,207,124,227,207,290,
207,207,186,145,104,145,217, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_bold_26_usascii_BITMAP_HEIGHT or STB_FONT_arial_bold_26_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_bold_26_usascii(stb_fontchar font[STB_FONT_arial_bold_26_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_bold_26_usascii_BITMAP_HEIGHT][STB_FONT_arial_bold_26_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_bold_26_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_bold_26_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_bold_26_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_bold_26_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_bold_26_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_bold_26_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_bold_26_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_bold_26_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_bold_26_usascii_s[i] + stb__arial_bold_26_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_bold_26_usascii_t[i] + stb__arial_bold_26_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_bold_26_usascii_x[i];
            font[i].y0 = stb__arial_bold_26_usascii_y[i];
            font[i].x1 = stb__arial_bold_26_usascii_x[i] + stb__arial_bold_26_usascii_w[i];
            font[i].y1 = stb__arial_bold_26_usascii_y[i] + stb__arial_bold_26_usascii_h[i];
            font[i].advance_int = (stb__arial_bold_26_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_bold_26_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_bold_26_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_bold_26_usascii_s[i] + stb__arial_bold_26_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_bold_26_usascii_t[i] + stb__arial_bold_26_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_bold_26_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_bold_26_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_bold_26_usascii_x[i] + stb__arial_bold_26_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_bold_26_usascii_y[i] + stb__arial_bold_26_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_bold_26_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_bold_26_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_bold_26_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_bold_26_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_bold_26_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_bold_26_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_bold_26_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_bold_26_usascii_LINE_SPACING
#endif

