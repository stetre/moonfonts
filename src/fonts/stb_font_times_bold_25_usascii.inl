// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_25_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_25_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_25_usascii_BITMAP_WIDTH         256
#define STB_FONT_times_bold_25_usascii_BITMAP_HEIGHT         88
#define STB_FONT_times_bold_25_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_bold_25_usascii_FIRST_CHAR            32
#define STB_FONT_times_bold_25_usascii_NUM_CHARS             95

#define STB_FONT_times_bold_25_usascii_LINE_SPACING          16

static unsigned int stb__times_bold_25_usascii_pixels[]={
    0x01801801,0x110000c4,0x00004c00,0x71000998,0x3ff21ffd,0x0002603d,
    0x30020004,0x1000c003,0x80020181,0x000c0001,0x00081880,0x88102662,
    0xb8065400,0x101f305f,0x065405db,0xd900ffd4,0x005dfb9f,0x5deff5c4,
    0xffa802bb,0x5c40df90,0xec800bdf,0x202dedcf,0x2f260ffc,0xdb103ffe,
    0x2f8019f9,0xbdb883ea,0x002e402d,0x0277ee4c,0x7f7f6540,0x754059bd,
    0xaadfecff,0x7d4026c4,0xf30df100,0x6401fd01,0x20fff205,0x7f445fe9,
    0x0df5400d,0xff980950,0x3b60df90,0x306fbad8,0xdfe88bfd,0x3a3fff80,
    0xd107ffa3,0x9817f63f,0x7f91ae1f,0x07d403fe,0x7c53e200,0x3ff6001f,
    0x41ff660b,0x5cc2efd8,0x803d44ff,0x85ff00ed,0x037d40f9,0x774c03f7,
    0x8837fcc0,0x03b606ff,0xff302440,0x3ee1bf21,0x261ee3b2,0xdff306ff,
    0x3ea7ffd0,0xf917fee6,0xa827fccf,0x4bfe2ec7,0x03f883fe,0x3fa3fb80,
    0x07ffb004,0x7ffc43ec,0xf113ee02,0x20df3003,0x207cc3ff,0x0bf507fb,
    0x01fff400,0x0b909ffb,0x3e609300,0xfd0df90f,0xfe868767,0x13ff603f,
    0x9fea3ffb,0x37fc6ffa,0x1b20fff1,0xe97fcc7f,0x0006c86f,0x00fecbfd,
    0x2202ffec,0x805ffd87,0xd004d84e,0x42ff883f,0x07fd40f9,0x555017f4,
    0x07ffdc15,0x541fff70,0x333b880f,0x0ff98241,0x7fff0df9,0x3fee0c3b,
    0x3ffee00f,0x1a83ff20,0xff893fee,0xa987ffc7,0xcfbaadea,0x3fa5ff12,
    0x80007d45,0x03f98fff,0x802fff98,0x017ffd43,0x8035c1c4,0x07fd45fc,
    0x3ff303e6,0x2600ff98,0x3ff63ffe,0x17ffd407,0x95bd307d,0x4c0547ff,
    0x90df90ff,0x6c03ffff,0x7fd407ff,0xb01bea2f,0x3ffcc1df,0x7fe4bffe,
    0x6fffffff,0x117f4ffa,0x7f40007d,0xf7000def,0xf90003ff,0x440001ff,
    0x0ffb801f,0x03e61fe6,0x7fc81ff1,0x3e3ffc80,0x7fcc07ff,0xf981f34f,
    0x441fff0f,0xf90ff983,0xfffff10d,0x01fffe05,0x7c49fff3,0x203be604,
    0x3ffa1fff,0x0d70fcc2,0xc8bf19f5,0x7fec0006,0x3bff621f,0x001fff61,
    0x0003fff4,0x7fd401f4,0x3e607f42,0x7f437cc0,0x23ffc807,0x7cc06fff,
    0xe88f95ff,0x711bfe3f,0x3f21ff30,0xffffd106,0x80dfff09,0x1745fff9,
    0x7fe40b90,0xf703ffe4,0x02ea05d8,0x801881f5,0x0effebd9,0x37ffc37c,
    0x07fff800,0xa806b800,0x227443ff,0x03b620f9,0x3f201ffe,0x01fffe3f,
    0x1769fff3,0x3fe61ff9,0x7fcc0cc4,0xfb80df90,0x7ffc4fff,0x27ffd407,
    0x44058076,0x6ffdeffc,0x001fc6c8,0xaec88fa2,0x265f903e,0x03e25fff,
    0x4001fffa,0x33307ffe,0xf9813333,0x827fd400,0x221f30fb,0x01bfe02f,
    0xffe8fff2,0x9fffd407,0xf72ffc3e,0xff30383f,0x3601bf21,0x7ff47fff,
    0x1fffdc07,0x10038032,0x5c9ff777,0xefeeeffe,0xc8d9004e,0xf983fd3f,
    0x4ffff20f,0x1fff902c,0x1fffb000,0x5dfff730,0xfa807d01,0x261ec83f,
    0x7c13a60f,0x3ffc806f,0xb803ffee,0x543f0fff,0x21ffe2ff,0x321ff304,
    0xfead806f,0x03ffee2f,0x040fffc8,0x3f600020,0x337f2a1f,0x803ccfdc,
    0xe97fc1fa,0x217fe44f,0x205bfffe,0x8001fffa,0x3e01fffb,0x017204ff,
    0x1fd85ff5,0x13e607cc,0x3f201ffa,0x01fffc3f,0x716c9ffb,0x17fee3ff,
    0x43fe6055,0x4ec486fc,0x7ffc2ff9,0x213ff603,0x22000400,0x21f982ff,
    0x0fa2006c,0x1bf65ff3,0xff88bfff,0x3fe202ff,0x7c40805f,0x3ffe03ff,
    0xb803e604,0x21fe21ff,0x07fc40f9,0x3f201ff6,0x837fd43f,0x8f20eff9,
    0xffbbaffc,0xff980e23,0x41d0df90,0xff50ff1d,0x03bfe60d,0xff881ff7,
    0x05fd1003,0x400bb1ee,0xd2ff886c,0x4fffc89f,0xa9ffffd4,0x017ffcc3,
    0x1fff30b5,0xf013ffe0,0x2a37e405,0x207cc0ff,0x7fd41ff9,0x41ffe400,
    0x7ec43ffa,0xff52540e,0x2a5ff19f,0x1ff306a4,0x43ba1bf2,0xf304fa9d,
    0x01bfd07f,0xffb87ffd,0x02fe8806,0x2007f1b2,0x27fb01f9,0x7ffcc1fe,
    0xffdebbef,0xff306fff,0x06dc415d,0xf80efea8,0x02e404ff,0x1ff987fb,
    0x3fea07cc,0x6402fe80,0xdf9103ff,0x2207dd99,0x547f910e,0x4c241bee,
    0x70df90ff,0x03bbdbfd,0xfdceed88,0x03fee03e,0x6d409ff1,0x127400be,
    0x07d1003f,0x827c6f4c,0x0cfffffa,0x401dffd3,0xeeeffdb8,0x9dfd9003,
    0x8015bfb9,0x20ff107a,0x207cc3ff,0x0bf707fb,0xd803ffc8,0x2d400fff,
    0xf3037000,0x881bf21f,0x988001d9,0x01002001,0x82a000c4,0x049800a8,
    0x53001730,0x4000cc03,0x26000099,0x0a80009a,0x5ff01fc8,0x37dc0f98,
    0x2e101fb0,0xfe8802ff,0x002c805f,0x1ff502b8,0x02a01bf2,0x00000000,
    0x00000000,0x00000000,0x00000000,0x5f100000,0xf303fe20,0x6c07f881,
    0x7fdcfd44,0xbfff1001,0x00264015,0x3ff6a059,0x0037ff90,0x00000000,
    0x00000000,0x00000000,0x00000000,0x6cc00000,0x303db101,0x01bf301f,
    0xf75f5264,0xfda88009,0x2b6605ef,0x201cb880,0x26621999,0x00000009,
    0x00000000,0x00000000,0x00000000,0x00000000,0x40570060,0x075100e9,
    0x0f76e088,0x73000000,0x00179999,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00011000,0x04198044,
    0x00100020,0x2e00080c,0x00005ffe,0x40030011,0x00999aca,0x80300188,
    0x1ffffffd,0x22355555,0x002002aa,0xb98d554c,0xeffffb81,0x9ffffd72,
    0xb8f7ecc1,0x40ceffff,0xb106ffdb,0x2007fd9f,0x3620beda,0x04acfddf,
    0x4019d9b7,0x200cffeb,0x0ffe20f9,0x405ffa80,0x817e4405,0x204ffec8,
    0xfffd9dfc,0x2607e806,0xf884fdcc,0x266fffff,0xf710efff,0x40126005,
    0xfeddffd8,0x7ffdc0ef,0x837ffc43,0x7ffd40f8,0xfd027c04,0xd1017f45,
    0x883fa05f,0x54fa84fc,0x3fff209f,0x517204ff,0x7d400dff,0x4c1b205f,
    0xfd02fffc,0xf50bffff,0x007fea1f,0x9fe81ff2,0x77540ffb,0x7dc2eeee,
    0x9002cc6f,0x3fea001f,0x889ff52f,0xffc85fff,0xfd04980f,0x503440ff,
    0x837e41ff,0x9f701fe8,0x3ff113a0,0x1750bfe2,0x201fff91,0x002fe83e,
    0x7d417fe6,0xfffbb986,0xffcbda82,0x33ff41ff,0xffa80bff,0x713ff507,
    0x7c003b03,0x400721ff,0xf5003ff8,0x40ffe8bf,0x7cc0fffc,0x501c83ff,
    0x0ee05fff,0x3ea2ffe8,0x01ff440f,0x8b501dfb,0x1bfe1ffb,0x301fff03,
    0x2a20001f,0xb85ff99b,0xe80aaeff,0x7cc482ff,0x13ffc2ff,0x7f440bff,
    0x03ffb07f,0x400d5fc4,0x80165ffb,0xf5007ffb,0x42ffd8bf,0xfe83fff9,
    0x7fc0686f,0xfd80d06f,0xd0df71ef,0xeffd80ff,0x07fec280,0xbfd00fff,
    0x55531ae0,0x373fea05,0x7f545ffd,0xfe81eeff,0x3ffd002f,0xff30ffd8,
    0x3ffcf407,0x0b3ffaa2,0x177fffdc,0x731fff10,0x17fff400,0x362ffd40,
    0x6ffe83ff,0x50ffffc4,0x1fffb807,0x3fea01d4,0x4c1eeaff,0xb80badff,
    0x200cffff,0x3ffe0ffe,0xe817e200,0x42ffec43,0x3ff64ff8,0x406ff985,
    0xfd002ffe,0x327fd10f,0x3e7900df,0x7fff4c7f,0xffffd04e,0x7fe40dff,
    0xd77000cc,0xff500dff,0xa83ffd8b,0x3eb22fff,0x100364ff,0x00d89fff,
    0x0fffffb8,0xffdfffb8,0x7ffff41d,0x41fff03f,0xfd501fff,0x503f103d,
    0x3ff90bff,0x7cc2ffcc,0x17ff406f,0xb027fc40,0x2d407bbd,0x3ff60fff,
    0x3ffb3201,0xff304fff,0x5c7400bf,0x7d401fff,0x80ffec5f,0x7e5a5fff,
    0x900588ff,0x01261fff,0x84ffffb8,0xdff51ffd,0xfffffd88,0x83ffe20e,
    0xffb82fff,0x835c1fff,0xffe85ff9,0x2617fe61,0x7ff406ff,0x206fa802,
    0x41d1003c,0x3ffb07ff,0x7fff5400,0x005ffb00,0x2fffc52a,0xfd17fea0,
    0x3fff201f,0x5fff33a8,0x3fe60057,0x26001b3f,0x44ffffce,0x3ffe1fff,
    0xffffea82,0xf83ffe26,0xffb102ff,0xf304d89f,0x41fff0bf,0xff985ff9,
    0x017ff406,0xcfb80fec,0x83b00999,0x3ffb07ff,0x05ffb000,0x0d801fea,
    0xa803fff2,0xffa8cfff,0x2fffe603,0x1bbffa0d,0xb1dffd00,0x745fea00,
    0xfff10fff,0x809ffec3,0x3e1ffffb,0x03ffe0ff,0x7c4dff70,0xf0bff301,
    0x2ffcc1ff,0x3a037fcc,0x17d402ff,0xffffffb0,0x6667549f,0x6c1cfffc,
    0xfd0001ff,0x98027403,0x027ffc45,0xfff9bff5,0x9fffd009,0x004fffb8,
    0x00f7ffd4,0x3fe25fe8,0xc87ffa2f,0x3a20b3ff,0x83ffa3ff,0xff8807ff,
    0xff981ea6,0x261ffd85,0x6ff985ff,0x1017ff40,0x3e60885f,0x4fffffff,
    0xfffffff7,0x1ffd85ff,0xc80f9000,0xdddd9001,0x201fffdd,0x00315ffa,
    0x220fffd4,0xe8001fff,0xff1006ff,0x362ffd89,0x47ff22ff,0x47ff100e,
    0x1bfe1ffc,0x09b27ec0,0x7dc2ffcc,0x21bfea3f,0x7f406ff8,0x160b602f,
    0xd9999bb3,0x333326df,0x6c1cfffc,0x032e01ff,0x02c11136,0xfff30588,
    0x017fea07,0xfb05ff80,0x3fee000d,0x917f6002,0x27fd41ff,0xf02f4ffb,
    0xf0ffc43f,0x6416445f,0xf980be0f,0x8fff885f,0xf80fffe9,0xfe80d9ff,
    0xdddf902f,0x206f8dff,0x83ffc03f,0x3fe01ffd,0xff112a3f,0x016c00aa,
    0xf501fffd,0x7e4000bf,0x0007f502,0xf5001be2,0x641ff41f,0xfe87fa7f,
    0x5c27d41d,0xfb8df53f,0x545f10cf,0x837fd407,0xffadfff9,0x1efe984d,
    0xf507fff0,0x89ffffff,0x37260afe,0xe83ffc00,0x3fae02ff,0xff883dff,
    0x03f3005b,0x5c27ffdc,0x260006ff,0x00007c07,0xdf700079,0x76405fb7,
    0x65f42ecd,0x202fdbef,0x440decfb,0x40ddfffe,0x3ffa605c,0x0442604f,
    0xffb71000,0x3fe639ff,0x83ffffff,0x02cddeca,0xfc88fff0,0x0c402eff,
    0xb801ed40,0x75c43eff,0x3664ffff,0x0000beee,0x40001803,0x26600008,
    0x0c022000,0x098006a6,0x06a01980,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x30000000,0x17dffff9,
    0x4cfbff22,0x98005ffe,0x540511bb,0x23effffc,0x40efffea,0x263effd8,
    0xffffffff,0x777fffc4,0x263ffffe,0xeefffffc,0xfffc982d,0x7ffd405f,
    0xfff932df,0xc98017df,0x543effff,0x3e24fffd,0xffffffff,0xf931ffff,
    0xbddfdfff,0x7ffe4c07,0xffc98bef,0x3fa23eff,0xffd3007f,0xfc83710b,
    0x81f500ff,0x22005ffa,0x5ecf9bfe,0x00fffc80,0x260bfffb,0xfffffb87,
    0x37e21fff,0x837ffcc1,0xfc98fffb,0xfffc80ef,0x3ffb600f,0x03fff906,
    0x02fffb80,0x39f10bf5,0xfc87ffe6,0x933ffe41,0x7dc01bff,0xfffc81ff,
    0x007ff980,0x3f617fea,0x03fff21f,0x2ffcc344,0x7dc9fb00,0x7ffc805f,
    0x13fffee0,0x3fff61a2,0x34c7ffff,0x501fffe8,0x7ffc1fff,0x4fffbb85,
    0x0dffbb10,0x0003ffee,0xf103fff5,0xff31e207,0x7dc1d83f,0x04fff87f,
    0x3203ffee,0xfff107ff,0x42ffcc00,0x3fee3fff,0x3e61a207,0x3ff7005f,
    0x5c02ffd4,0x3eee07ff,0xe8682fff,0x2a27c41b,0x04fffb82,0xfd83ffea,
    0xffdab87f,0xbffb3907,0x003ffee0,0x983fff50,0xf30e201e,0x5c1a83ff,
    0x7ffc87ff,0x203ffea0,0xff107ffb,0x2ffcc00f,0xff706fd4,0x7cc3440f,
    0x3605715f,0x17fea1ff,0xb81ffee0,0x40ffffaa,0x1fa81446,0x7fffc404,
    0x83ffea00,0x9ab87ffc,0xfb683fff,0x3ffee0bf,0x7ffd4000,0x20003aa1,
    0xb801fff9,0x7ffb87ff,0x203ffea0,0xff107ffb,0x215554cf,0x2e005ff9,
    0x21a207ff,0xffdceff9,0x507ffc0e,0xff700bff,0xffc95c0f,0xd801a0ef,
    0x5fffb007,0x20fffa80,0xd2b84fff,0xfb3a8dff,0x3ffee0bf,0x7ffd4000,
    0x4c000b91,0xfb801fff,0x04ffd87f,0x2e03ffea,0xfff107ff,0x260e7ec4,
    0x3ee005ff,0x261a207f,0xbff31eff,0x3ea0fff8,0x7ffb805f,0xfffd8ae0,
    0x27c401a5,0x02fffd40,0xfa87ffd4,0xf72b80ef,0xfd86c3ff,0x1fff705f,
    0x9fffa800,0x30000efd,0xf7003fff,0x0fffa8ff,0x26bffea0,0x07ffc999,
    0x02d8fff1,0x5c00bff3,0x21a207ff,0x7ff45ff9,0xfa83ffa1,0x7ffb805f,
    0xffe88ae0,0x3ea00d3f,0x0fffe801,0xfcfffa80,0xf8ae03ff,0x7ec935ff,
    0x1fff705f,0xffffa800,0x30005fff,0xf7003fff,0x9ffdb9ff,0xefffa801,
    0x7ffeeeee,0x164fff10,0x060bff30,0x6881ffee,0x7ec5ff98,0xa8bfee2f,
    0xffb805ff,0xff10ae07,0x3600d3ff,0x3fffc807,0x33fff500,0x7e457001,
    0x3f61c8ff,0x1fff705f,0x9fffa800,0x8004fffd,0xb801fff9,0xfffd9fff,
    0x0fffa801,0xf107ffb8,0xf301b2ff,0x43ffd0bf,0x16207ffb,0xffb17fe6,
    0x4477fcc7,0xfb805ffe,0x2a0ae07f,0x8806ffff,0x7ffcc04f,0xfff50606,
    0xf115c001,0xffd8b9ff,0x01fff705,0x89fffa80,0x4002fffe,0xb801fff9,
    0xdfff17ff,0x0fffa801,0xf107ffb8,0x407ff9ff,0x7fcc5ff9,0x03ffee4f,
    0x2ffcc2cc,0xff50bff6,0x50bff7df,0x703ffdc5,0x1bffee05,0xfd00bea0,
    0x512203ff,0x5c001fff,0x217ffec2,0xff705ffd,0x2a05c01f,0xfff31fff,
    0x7fcc003f,0x7ffb801f,0x5013ffea,0xff701fff,0x2fffe20f,0xff301fff,
    0x4cbffb0b,0x09501fff,0xffd8bff3,0x3fea1300,0xfc8ffdc5,0xd80ae06f,
    0x07d806ff,0x902fffd4,0x00fffa87,0xdff30ae0,0x2e0bffb0,0x21a00fff,
    0x3ea1fffa,0xf3000eff,0xff7003ff,0x02fffd8f,0x2e03ffea,0xfff107ff,
    0x7cc1bfee,0xff0f205f,0x2607605f,0x037f45ff,0x7e45ffa8,0x40bff91f,
    0x037f402b,0xff8813e2,0x85f300ff,0x2000fffa,0xe83fe82b,0xfff706ff,
    0x3ea1ee01,0x7ffe41ff,0x5fff3005,0x88fff700,0xf500fffe,0xfff901ff,
    0xfe9ffe20,0x05ff984f,0x3fff503a,0xff981e44,0x001ff30f,0xdf117fea,
    0xbb00ffec,0x5406f880,0x3fff202f,0x41ffc883,0x2001fffb,0xe80fb84c,
    0xfff906ff,0xb86fb885,0x7fc41fff,0xffa805ff,0xfffc802f,0x837ffcc0,
    0xfc81fffb,0x7ff980ff,0xf507ffe6,0x4c0b20df,0x02defffe,0x3b3b6be6,
    0x3fea001d,0xefddd986,0x3bffb501,0x1f6034c0,0xeeffff98,0x0fffffee,
    0x7dffff71,0x67fe4c01,0x3ff6a241,0xff732dff,0xffdddfff,0x7ffdccbf,
    0x3ffee3ef,0xeb882eff,0x980befff,0x43dffffc,0x731efffc,0x317dffff,
    0x47bffff9,0xf34fffd8,0x3fa65fff,0x4005c4ff,0x88200198,0xeeda8001,
    0x0002604e,0x05500600,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xffff9300,0x1fffffff,0x3fffff26,
    0x4c7fffff,0xdefffffc,0xff9300ab,0x3bddffff,0x00fffd10,0x5dffffd3,
    0x716fff5c,0x819fffff,0x3265ffd9,0x00beffff,0x544002a2,0x21b880ac,
    0xa98aaaaa,0x05551aaa,0x5002b2a2,0x95101337,0x0de54401,0x88d55554,
    0x2aaa22aa,0x4c355532,0xaa8aaaaa,0x1fffb81a,0x3ee07f54,0x83fd40ff,
    0xff317ffd,0xbffe403d,0x983fffa8,0xfd1007ff,0x07f307ff,0xf01fffe2,
    0x07ffee05,0x26003e60,0x6c2ff9de,0x9fff31ff,0x21bffd11,0x9ef982f9,
    0xacf983fc,0x4efcc2fd,0x5575c0ce,0x7ffcc4ff,0xf90fee0e,0x97ff62df,
    0xb8bfffc8,0xfffa80bf,0xffb81f01,0xf907980f,0x1fff88ff,0xfb8fff70,
    0x3ffc40ff,0x1ffff300,0x7fdc04c8,0x5c0b503f,0xf9800fff,0xd8ffc400,
    0x91fffc6f,0x37fd4bff,0x45ff10b1,0xd0fec2ff,0xfa8ffc45,0xffc9bea5,
    0x2a37fdc2,0x2e6ff985,0x4ffe85ff,0x7ffd4059,0xffb81901,0xf905860f,
    0x3fff50ff,0xf98fff70,0x3ffc43ff,0x97fff200,0xfffd0059,0x7dc01d01,
    0x0f9800ff,0xff53fd40,0x3e20dfa8,0x3fff70ff,0x83ff60aa,0x8fffc7fe,
    0xfa9ff229,0x323ff90f,0x1fff83ff,0x9bfe2072,0xff985ffa,0x7fd404af,
    0x5c04661f,0x01960fff,0xff10fff9,0x8fff709f,0x7c41fff9,0x8017717f,
    0x0e8afffe,0x87fff500,0x7ffdc03b,0x400f9800,0x0004c6fc,0x3f367ffb,
    0x3ffe0b4f,0xfd83ffa0,0x9efe83ff,0x7b12ffa9,0x2e0fff62,0x7c4165ff,
    0x417fea6f,0x5400fffc,0x80721fff,0x0b30fffb,0x3a0fff90,0x7ffb86ff,
    0x7c437fe4,0x0ffffaff,0x37fffe60,0x7fff4001,0xff700d10,0x9999881f,
    0x09999afa,0x50001ffe,0xff373dff,0xfff1091f,0xf317fec1,0xfff89fff,
    0x440aaaaa,0x883ffdeb,0x102a8fff,0x2ffd4dff,0x401fff88,0xfb89fffa,
    0x27ffee01,0xffc805eb,0x81fffb07,0xfdbafffb,0x9fff102e,0xf7013fee,
    0xf3000bff,0x200b29ff,0x7e40fffb,0xffffffff,0x03ffe3ff,0x1bfff000,
    0x7c077ffa,0x20ffec7f,0x3e3ffff9,0x77d400ff,0xfb03ffc8,0x7fc40b7f,
    0xc817fea6,0x7fd406ff,0x201fffef,0x5ffefffb,0x907ffc80,0xffb83fff,
    0x02dffedf,0x7fd4fff1,0x2fffe804,0xafffd800,0x1fff7005,0xfa999988,
    0x3209999a,0x009803ff,0x7fdcdff9,0xe83ff207,0xffe88c7f,0x980fff66,
    0x07ff91ff,0x880fffe6,0x17fea6ff,0x202fffd8,0xfb89fffa,0x23ffee01,
    0xffc805e8,0x83fffb07,0x7fec7ffb,0x33ffc40f,0xff700bff,0xf98001ff,
    0xf7000fff,0x1f3001ff,0x21fffa80,0x207ff218,0x3fe23ff9,0xe83fea04,
    0xdfb0744f,0x46a37fdc,0x7ff91ffd,0x2007ff40,0x17fee7ff,0x037fdce4,
    0x0e43fff5,0x221fff70,0x07ffc805,0xff70fffd,0x889fff0f,0x17fe67ff,
    0xbfff7b30,0x0fffb000,0x007ffdc0,0x7fc007cc,0x7fc4ccff,0xd81fd03f,
    0x89ff401f,0xf72741ff,0x5ffffc47,0x3bfffa3c,0xf502dffd,0x75ffd00b,
    0x2950dffd,0xf504fff8,0x700cc3ff,0x0e241fff,0x7fc1fff2,0x87ffb85f,
    0x3e20fffd,0x817fe67f,0x5fffb0e8,0x07ffc800,0x003ffee0,0x3a2003e6,
    0xffc84fff,0x0d50b700,0x3dd9fb10,0x09f9ddd0,0xa89fffd3,0xefe88dfe,
    0x26007e00,0xfffacfff,0xf53dfb33,0xff507fff,0x3ee0083f,0x868820ff,
    0xff987ffc,0x87ffb81f,0x3e20fffd,0x817fe67f,0x3fffe21d,0x1fff2000,
    0x00fffb80,0x22000f98,0x02200401,0x0131000c,0x18801304,0x00300000,
    0x00000098,0x8007ffea,0xbb00fffb,0xfb0fff90,0x1ffee09f,0xff11bffe,
    0xd82ffccf,0x05fffb83,0x801fff20,0x8800fffb,0x0000000c,0x00000000,
    0x00000000,0x00000000,0x003fff70,0x5117ffdc,0xfffb09fb,0x901ffe41,
    0x3f623fff,0x3ffcc0ef,0x0fb0dff5,0x8027fff4,0x2e007ffd,0x00001fff,
    0x00000000,0x00000000,0x00000000,0x2e600000,0x00beffff,0x3ffffee6,
    0x23ffffee,0xefffffc9,0xf9300bdf,0xbdfdffff,0x9fffb105,0x2e7fffd1,
    0x7e42dffe,0x2a04ffff,0x0adffffc,0xdffff730,0x00000017,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x15554400,0x000aa175,
    0x55555554,0x2555511a,0x2ea21bb8,0x12aaa881,0x54000177,0x10100102,
    0x80801801,0x7ffffdc1,0x13ffffff,0x20260577,0x23301cdb,0x12aaaaa8,
    0x99999999,0x00003999,0x00000000,0x3fea0000,0x3ee7ff97,0x37e000cf,
    0x22fffcab,0xffeafffb,0x2fffe9af,0xffafffb8,0x322000ff,0x04f982ff,
    0x1ffa9bf2,0x3e207f30,0x4c7ffa2f,0xbbbbbbbb,0x1ff21bbb,0xefd87ff2,
    0x4b10beff,0x17fffffa,0xdddddddd,0x00005ddd,0x00000000,0x7ffc0000,
    0x3223ffcb,0x46802dff,0x7fc45ffd,0x2bfff35f,0xff886ff8,0x04ffb8df,
    0x00bffda8,0x7ffc09f5,0x3a07ffb0,0x5ffa80ff,0x0009fff1,0xffd0bf60,
    0xfeb99227,0x3fea4fef,0x00006fff,0x00000000,0x80000000,0x40314fff,
    0x500bffea,0x7c07ffd4,0x83ffe27f,0x7ff887ff,0x5c417fea,0x3b502dfe,
    0xfd0f227e,0x540ffdcf,0xff984fbf,0x545bff64,0xaaaaaaaa,0x5c4d80aa,
    0x260131ff,0x000001cc,0x00000000,0x00000000,0x0007ffe0,0x205bff93,
    0xff03fff8,0x7fc7ff8f,0x33ffc40f,0xffd98bff,0x5ffe401c,0x7e46fe9c,
    0xf103fea5,0x3fe03f29,0xfff73b82,0xffffffff,0x00020a07,0x00000000,
    0x00000000,0x20000000,0x10000fff,0xff907ffb,0x3e3ffc0d,0x207ffc7f,
    0x3fe67ff8,0x0037fee5,0xaabebaa8,0x1be1fd40,0x42fc43f2,0x220e80fd,
    0x88888888,0x00000008,0x00000000,0x00000000,0xf8000000,0xeb88007f,
    0xfff982ef,0xff1ffe02,0x440fff8f,0x97fe67ff,0x00befeb8,0x205d3d30,
    0x222741f8,0x2e0fdc3f,0x00003b86,0x00000000,0x00000000,0x00000000,
    0x1ffe0000,0x1cffc980,0x8317ff60,0x23ffc7ff,0x7fc40fff,0x4c17fe67,
    0x2601cffd,0x1a07f97f,0x3a0db06e,0x002e24c6,0x00000000,0x00000000,
    0x00000000,0xf0000000,0xdfd500ff,0xfffa8017,0x8fff0ae0,0x3ffe0fff,
    0xf33ffc40,0xfeb880bf,0xf34fa82e,0x0e440009,0x00000c98,0x00000000,
    0x00000000,0x00000000,0x44000000,0xff500fff,0x3fe2003b,0xf88be63f,
    0x1fff10ff,0xf307ffe2,0x1bfea1ff,0x42ffda80,0x00000040,0x00000000,
    0x00000000,0x00000000,0x00000000,0x7fec4000,0x00bb80df,0x777ffe40,
    0xffb11fff,0xbfff91bf,0x21bfffb1,0xe8cfffd8,0x44003fff,0x0000002c,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_bold_25_usascii_x[95]={ 0,1,1,0,0,1,0,1,0,0,1,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,1,-1,0,1,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0, };
static signed short stb__times_bold_25_usascii_y[95]={ 20,4,4,4,4,4,4,4,4,4,4,6,16,13,
16,4,4,4,4,4,4,5,4,5,4,4,9,9,7,10,7,4,4,4,5,4,5,5,5,4,5,5,5,5,
5,5,5,4,5,4,5,4,5,5,5,5,5,5,5,5,4,5,4,23,4,9,5,9,5,9,4,9,5,4,
4,5,5,9,9,9,9,9,9,9,5,9,9,9,9,9,9,4,4,4,12, };
static unsigned short stb__times_bold_25_usascii_w[95]={ 0,5,10,11,11,21,18,4,8,7,10,13,5,7,
5,7,11,9,11,10,11,11,11,11,11,11,5,5,13,13,13,10,20,17,15,16,16,15,14,18,18,9,12,18,
15,21,16,17,14,17,17,11,15,16,17,23,17,17,15,5,7,6,11,13,6,10,12,10,13,10,10,11,12,7,
7,13,7,19,12,11,12,13,10,8,8,12,12,17,11,12,10,7,3,7,13, };
static unsigned short stb__times_bold_25_usascii_h[95]={ 0,17,9,17,18,17,17,9,21,21,10,13,8,3,
5,17,17,16,16,17,16,16,17,16,17,17,12,15,11,6,11,17,21,16,15,17,15,15,15,17,15,15,16,15,
15,15,16,17,15,21,15,17,15,16,16,16,15,15,15,20,17,20,9,2,5,12,16,12,16,12,16,16,15,16,
21,15,15,11,11,12,16,16,11,12,16,12,12,12,11,16,11,21,21,21,4, };
static unsigned short stb__times_bold_25_usascii_s[95]={ 254,128,95,157,98,169,191,118,29,1,84,
124,123,170,150,60,37,99,109,49,133,156,13,75,1,145,149,250,70,129,12,
134,64,181,49,210,32,16,1,227,209,114,45,156,140,118,58,110,103,46,191,
25,175,1,236,212,78,96,87,92,246,85,106,178,143,205,18,138,76,194,145,
121,65,68,38,228,242,37,57,173,199,31,1,185,90,229,216,155,242,168,26,
21,17,9,156, };
static unsigned short stb__times_bold_25_usascii_t[95]={ 1,1,74,1,1,1,1,74,1,1,74,
58,74,74,74,23,23,23,23,23,23,23,23,41,23,1,58,41,74,74,74,
1,1,23,58,1,58,58,58,1,41,58,41,41,41,41,41,1,41,1,41,
23,41,41,23,23,58,58,41,1,1,1,74,74,74,58,41,58,23,58,23,
23,58,23,1,41,41,74,74,58,23,41,74,58,23,58,58,58,58,23,74,
1,1,1,74, };
static unsigned short stb__times_bold_25_usascii_a[95]={ 90,120,201,181,181,361,301,100,
120,120,181,206,90,120,90,100,181,181,181,181,181,181,181,181,
181,181,120,120,206,206,206,181,336,261,241,261,261,241,221,281,
281,141,181,281,241,341,261,281,221,281,261,201,241,261,261,361,
261,261,241,120,100,120,210,181,120,181,201,160,201,160,120,181,
201,100,120,201,100,301,201,181,201,201,160,141,120,201,181,261,
181,181,160,142,80,142,188, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_25_usascii_BITMAP_HEIGHT or STB_FONT_times_bold_25_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_25_usascii(stb_fontchar font[STB_FONT_times_bold_25_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_25_usascii_BITMAP_HEIGHT][STB_FONT_times_bold_25_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_25_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_25_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_25_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_25_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_25_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_25_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_25_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_25_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_25_usascii_s[i] + stb__times_bold_25_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_25_usascii_t[i] + stb__times_bold_25_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_25_usascii_x[i];
            font[i].y0 = stb__times_bold_25_usascii_y[i];
            font[i].x1 = stb__times_bold_25_usascii_x[i] + stb__times_bold_25_usascii_w[i];
            font[i].y1 = stb__times_bold_25_usascii_y[i] + stb__times_bold_25_usascii_h[i];
            font[i].advance_int = (stb__times_bold_25_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_25_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_25_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_25_usascii_s[i] + stb__times_bold_25_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_25_usascii_t[i] + stb__times_bold_25_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_25_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_25_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_25_usascii_x[i] + stb__times_bold_25_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_25_usascii_y[i] + stb__times_bold_25_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_bold_25_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_25_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_25_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_25_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_25_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_25_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_25_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_25_usascii_LINE_SPACING
#endif

