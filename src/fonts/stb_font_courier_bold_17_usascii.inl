// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_17_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_17_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_17_usascii_BITMAP_WIDTH         128
#define STB_FONT_courier_bold_17_usascii_BITMAP_HEIGHT         80
#define STB_FONT_courier_bold_17_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_bold_17_usascii_FIRST_CHAR            32
#define STB_FONT_courier_bold_17_usascii_NUM_CHARS             95

#define STB_FONT_courier_bold_17_usascii_LINE_SPACING           8

static unsigned int stb__courier_bold_17_usascii_pixels[]={
    0x022304b8,0x2a050151,0x705c0280,0x55433001,0x5440330a,0x3260002a,
    0xc98e64c3,0x3aef2e1c,0xb0064c1c,0x8d73f30f,0x20fcc6fa,0x80fcc2fe,
    0x009f10fb,0xc8fff49f,0x21bfe607,0xec81dfd9,0x4bfea4eb,0x3ff63ffa,
    0x3f64feef,0xc9f98004,0x3e60fa86,0xfd50be61,0x22fc43df,0x07ea00fc,
    0x40fe63f3,0xbefc81f9,0x443a24fe,0x4f887e47,0x43ee1fe8,0x6664c4fc,
    0x2ec7d43c,0x43f30fcc,0x2f7e21f9,0x107ee3fd,0x4c2f409f,0x7cc1b61f,
    0x3f227cc1,0x107d4951,0x3a03f29f,0x87f93f85,0x2a6feeea,0x4c4ffefe,
    0xf987e61f,0x20b83ea1,0x2a0dd07d,0x261f981f,0x5c1f982f,0xbc9fc40f,
    0x7e40fde8,0x43fd04f9,0x805f70fb,0x3fbfaa6c,0xf327cc4f,0xff03f223,
    0x320bd05b,0x3e60dd07,0x0fcc3741,0xaca741b2,0xff881f4b,0xdbffd00f,
    0x200fd49f,0x04fbe46c,0x547e65ff,0xffec887f,0x07e417e0,0x0fcc0be6,
    0x83f307ea,0xc97c40fb,0xc80f8daa,0x3af7a04f,0x2007cc2c,0x3f3fae6c,
    0xf317cc1e,0x4330fd43,0x6c1ba4e8,0x3e606d87,0x0fcc5e81,0x64f70fe2,
    0xf905ff94,0x04027401,0xdffb3640,0x21f987df,0xd87e61f9,0x3ec9f10e,
    0x01fcc5e8,0x43f503f3,0xadfc81f9,0x881aa4fd,0xf300efaa,0x400c015b,
    0x17c6ec6c,0x43f30fcc,0x3fff61f9,0x30bea0ff,0x4c07c87f,0x7ccbd01f,
    0x85dff701,0x7e4512e8,0xfff03fff,0x007ea05f,0x1f9ce8db,0x87e60fb8,
    0x3f2663f9,0x0fd8dd03,0xfa880fe2,0x3e61f701,0xacffc80a,0x13fbe62c,
    0x99801331,0x55440400,0x7ce744fc,0x3e62fd41,0x3e617ec1,0x3e23f501,
    0xff007e43,0x4d3e203f,0x77fc47ff,0x00182fff,0x7e400000,0x050984ff,
    0x40c06031,0x030600d8,0x0aa98055,0x0d544aa0,0x00000204,0x03100000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x09979d91,0x50000000,0x2fb26059,0x050002cb,
    0x2aa264c0,0x32a1aaaa,0x88797002,0xf701a60c,0x81bfffbf,0xb501cfd9,
    0x7e447bff,0x7f7f43ef,0x7ff77e46,0x6fff544f,0x01d9d10d,0xffe8ff90,
    0x13fa4fff,0xb97fbf60,0xf803ea3f,0x3f21fe24,0x7cc4febe,0x3ee5fdad,
    0x3f51fdbd,0x2a3f8be6,0x5defdc4f,0x0ea771fe,0x88b23e40,0x2202743f,
    0x50c3f52f,0x545999fb,0x3e63e40f,0x8d90fe44,0x29d1a65d,0x2a9f10fb,
    0x13e27c0f,0x367661f1,0xf99d9102,0x6f40fb80,0x23dc1ceb,0xddfd903f,
    0x3e24f89d,0x3e20fdc7,0x0446fee3,0x3be27f30,0x45f10fec,0x003e64f9,
    0xb976af6a,0x407ffdff,0xeeffe86d,0x0bb1764f,0xff7007d4,0x06c8fffb,
    0xdfffc89d,0x20dfe880,0x7ec6fffe,0x9ee4febb,0xb7109998,0x264f839d,
    0x20fe207f,0x6c3ee1fe,0x21c9aec5,0x764c00fa,0x207dc7cc,0xbf9504f8,
    0xafb87f10,0x3f223fa8,0x43ee4fef,0x3796fffc,0x207d49f9,0x203ee07d,
    0x6c9fc45e,0x2a3fba74,0x23dc000f,0xd0fdc3f9,0xb0307b85,0x3e105e8d,
    0x54c4fe64,0x31c9dc2f,0x3607e83f,0x2f88dd06,0x18be21f5,0x26dd67cc,
    0xfc83fb50,0x7fc5fdad,0x1305fbab,0x3fbacfb8,0x217ed54c,0x1fdaadfe,
    0x3ba2b95c,0x882ffdab,0xadffa83f,0x2bbe26eb,0xfffc807e,0xffff302e,
    0x82dfea81,0x80cfffde,0xfffc83fa,0x83fffe84,0x0cffffc8,0x3262f744,
    0x40ffefff,0xfefe80f9,0x7fcc1cff,0x4006002f,0x00200998,0x30020062,
    0x31000980,0x00180100,0x00c00c00,0x00000000,0x00000000,0x00000000,
    0x00000000,0x5c0565c4,0x32e600ac,0x55510002,0x00264c55,0x55440133,
    0x5c435102,0x8097000c,0x17302cb8,0x3eeeeeb8,0xc8ffdff3,0xff706fef,
    0xbffd50fd,0x7fffcc1b,0x200ff91f,0xff507ffd,0x4bfd07ff,0xfb001ffa,
    0x37f7fcc0,0xfc83fff7,0x1934fdcc,0x99fc4be2,0x7027dc3f,0x43ff97bf,
    0x01f201f9,0x7406abe6,0xbff7030d,0x00001f98,0x54be61db,0x8b641fbc,
    0x54fe206e,0x09d1b60f,0x87e627c4,0xfc80aaf9,0x2f982deb,0x599df930,
    0x4c5ddf88,0x443cc99f,0x83500ccc,0x260fcc3f,0xfd501fb3,0x7c4be21f,
    0x0bbb3e27,0xf98301f5,0x3f20dfff,0x7c41fedf,0x3fae088f,0x47e43eee,
    0x7ecfcc5d,0x0ff74c4e,0x7cc1fd80,0x2605f701,0x37f61ffd,0xbff50fff,
    0x003dc7fb,0x645f5159,0xffd13e1f,0x03f81fbb,0xf31769f3,0x1f980bfd,
    0xf982fd80,0x0514fa81,0xdbd717a2,0x4d92fccd,0xdb0000fb,0xf993a3e4,
    0x3f83ffaa,0x3df99fb0,0x2007ffcc,0x3fa201f9,0xf883f302,0x06c81ee5,
    0x71fc49f3,0x00c1fc4f,0x4e8f92ec,0x0ffeb3e2,0x7776c0fe,0x3f3e62ff,
    0x407e600e,0x3e601fe9,0x7666fec1,0x9f955797,0x21bf6ae2,0x644ebbfc,
    0x22fcabdf,0x12fcaace,0x87ba65fb,0x30ffffeb,0x10179df9,0x3f221df7,
    0x2a0bff89,0x222cdfdc,0x31cccdff,0x3a39bfb9,0xd77fffff,0x7fcc9fff,
    0xffd880be,0xfffec80d,0x1f7ff543,0x3ff6dff7,0xffd80984,0xff982fff,
    0x3a3ff52f,0x3fffa2ff,0x3ffe26ff,0xfff74fff,0x088009ff,0x00440020,
    0x00040044,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xb1bdd900,0x665c49dd,0x77776c00,0x9dddd70d,0x37bbb603,
    0xba776c0b,0x3bba25ee,0x6c1ddd53,0xb86f5c4e,0x3eeb9eee,0x9ddb2f6c,
    0x3bbbbbaa,0xdf51cc1e,0xf98bfae7,0x665c01ff,0x33faa3df,0xefb82fec,
    0x67ec7fdc,0x6c4bf952,0x1bfb31df,0xff887fe4,0x3233faa5,0x9ffdc1ef,
    0xb9f52feb,0xfe85f9bf,0x20f913a1,0x5f1001f9,0xd05d8f90,0x1f51fc49,
    0xd05f1393,0xffa86d8b,0x7c85ff74,0x7ff40bf7,0x4c7d4f70,0x0c42f89f,
    0x260f913a,0x05f1001f,0xe82f4cf9,0x9f98fe24,0xb81f9dfc,0xf507f10f,
    0x85fbd1fb,0x7404fcfc,0xbccf75fd,0xd003f1f9,0x3f307c89,0x905f1020,
    0x201dffdf,0x20ffdcee,0xfafffaf8,0x1f73f880,0x5fbf5f50,0x4fffc85f,
    0x5d7d6740,0x4c03f307,0x41f22740,0x21f881f9,0xdcfc82f8,0x3bffa04f,
    0xfbfef80d,0x2f5f607e,0xf6fd8fa8,0x4fbafc85,0x3e7ed3a0,0x7f301f98,
    0x9826c6d8,0x261f881f,0x3ee7c81f,0xfd009d03,0xf981ffaf,0x31f501fd,
    0x4f90be5d,0x229d00fc,0x03f307ff,0x2b7ee1ae,0x03f301fc,0x0dd57bf1,
    0x3f217fb3,0x01677d43,0x01bf29fb,0x67e40dfd,0x6cc9f911,0x985df0bf,
    0x70ff72ef,0x03d07bfb,0x2a0bbfee,0x5c2cdfdc,0xfc80effd,0xe83fa2ff,
    0x3f206fff,0xfb80bf31,0x27fff103,0xff91fffa,0xf91bee3f,0x3e23f4df,
    0x0140ffff,0xffffd004,0x000220df,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xd1000000,0x23ddb1bd,0x7dd73eeb,
    0x20fbbba6,0x5eeeeeeb,0x033bbbae,0x3bae5dd7,0x5bdddd73,0x40bbbb20,
    0x13eeeeeb,0xddb10015,0x0a09dddd,0x7fd104c4,0x7f4c3bee,0x3223df52,
    0xfe981cfe,0x3ea7eccc,0x261ffdce,0x23df51fe,0x2fdccfea,0x306ffca8,
    0x2639bfb9,0xdfc803ff,0xf986eccc,0x3e42fa81,0xb1df113a,0xb80d901f,
    0x4e8d7117,0x2bf11ba2,0x363e40fd,0x03f9f306,0x7ec40fcc,0x909fc02e,
    0xf303f30b,0xe999fc83,0x01fff984,0xd9fb80d9,0x2a27418d,0x1fe7dc0f,
    0x2fdccfe4,0x4c09d6d8,0x37fa601f,0x13f59f01,0xf103f301,0xfffffc81,
    0x640bf904,0x2fffdc06,0x40fcc4e8,0xfff905fd,0x27f107ff,0x03f300fb,
    0xff09ff70,0xfff983ff,0x21e1ffff,0x84eaaafc,0xd902fef9,0x367ee2c8,
    0x7d44e835,0xf901f981,0xb83fd755,0x303fffff,0xcfea803f,0x41facf80,
    0xaabfbaa8,0x9d1f2020,0x03fb6f88,0x5ee4e8d9,0x13a1f888,0x407e60fb,
    0x3a1fc47c,0x306eccce,0x37fa603f,0x200cfe01,0xfb1001f9,0x74c77ea5,
    0x223df52f,0x4fcccfeb,0xfb999fb3,0x3b33ba63,0x3dfdb83f,0x6e667ecc,
    0x4477ee2f,0x3f7263fd,0x5dfb11cd,0x02cdfb80,0xfb800fcc,0x93ffe8ef,
    0x57ff29ff,0xfffffffa,0xffffff94,0x3ffff23f,0xffff882d,0x3ffff20f,
    0x3ffe63ef,0x323fff73,0xd34fffff,0xffff1007,0x000e880d,0x00000000,
    0x00000000,0x00000000,0x00000000,0xa6542a20,0x75cc2cc8,0x377221cd,
    0x39d7101b,0x8073b260,0x3223bdda,0xca81cdbc,0x950bdb8c,0x32e79999,
    0xc879973c,0x82dcbebc,0x3ff70040,0x2fec5fae,0x49fdbdf3,0xb86edefb,
    0x542ffdef,0x4c2ffdff,0x30ffedff,0x83fdbffd,0x3fdfffeb,0x29ffddf7,
    0xbff94ffc,0x7fefff44,0x6eafc0fd,0x5c1dfea8,0x35f72f47,0x3eaa206e,
    0xf1f627c2,0xd91f621b,0x3f707dc1,0x8f7cc274,0x22fd56a0,0x307f10fb,
    0x0be5f13f,0xfd99769d,0x5e8f701e,0x5067ffec,0x545ffffd,0x1fffffff,
    0x21f983f3,0x23dc183f,0x401f984d,0x329f05fa,0x3f11f307,0x5327b0be,
    0x3dc03ffc,0xf730997a,0x7d4d6f4b,0x2aab3e22,0xb87f10aa,0x2e013e1f,
    0x07cc26c7,0x70229f50,0x3e607f3f,0xb85f1f88,0x3ff22752,0x36afea02,
    0x737dd0ef,0x2e73e2bd,0x2fb60cfe,0x3f60dcaa,0x7ec6fcac,0xb12fbaac,
    0xa83ba65f,0x7d43bcfd,0xff85dbbf,0xf17f900f,0x980033e9,0xfe881efd,
    0xfdb2ffef,0x7fdc1bff,0x2e22ffef,0x640dfffe,0xfd905fff,0xb7fd49df,
    0xffd12ffb,0x7fe41fff,0x3fb86fff,0xff1dff10,0x50003ff1,0x03101bfd,
    0x004c0188,0x00180098,0x00000011,0x00000000,0x003d7000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x10ccb800,0x9e644799,0x40280ccb,0x77771004,0xdb801777,0xf91c9861,
    0x3ea9ffff,0xffffffff,0x00000003,0x333dfb00,0xaff44bfd,0x0fcc0efd,
    0x26f84fc8,0xfffffffb,0xfefd85b3,0x4cfee7da,0x711aaaaa,0x77777777,
    0x00000001,0x57d5fc00,0x67ec40fb,0x3eaea0df,0x3f7ee2ba,0x2220be63,
    0x91f44088,0x010bff23,0x00000000,0xdd800000,0x3a06cefd,0xffffb86f,
    0x3f29f33f,0xccc98d71,0x0141cccc,0x00000013,0x00000000,0xffbff900,
    0x17f7f209,0x5c83bfe2,0x7541ea6c,0x03eeeeee,0x00000000,0x00000000,
    0xff8ffa80,0xfcafec42,0x0fefee1d,0x00000180,0x00000000,0x00000000,
    0x03f29f10,0x3ff6bff7,0x001dcee3,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_bold_17_usascii_x[95]={ 0,3,1,0,1,1,1,3,3,1,1,0,3,1,
3,1,1,1,0,0,1,0,1,1,1,1,3,2,-1,0,0,1,1,-1,0,0,0,0,0,0,0,1,0,0,
0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,1,3,1,1,1,-1,3,0,-1,0,0,0,1,0,0,0,
1,0,0,-1,0,0,-1,0,0,1,1,0,0,-1,0,0,1,2,3,2,0, };
static signed short stb__courier_bold_17_usascii_y[95]={ 12,2,2,1,1,2,3,2,2,2,2,3,9,7,
10,1,2,2,2,2,2,2,2,2,2,2,5,5,3,5,3,2,2,3,3,2,3,3,3,2,3,3,3,3,
3,3,3,2,3,2,3,2,3,3,3,3,3,3,3,2,1,2,2,15,1,5,2,5,2,5,2,5,2,2,
2,2,2,5,5,5,5,5,5,5,2,5,5,5,5,5,5,2,2,2,6, };
static unsigned short stb__courier_bold_17_usascii_w[95]={ 0,3,6,9,7,7,8,3,5,5,7,9,4,7,
3,7,7,7,8,8,7,8,8,7,7,8,3,5,10,9,10,7,7,11,9,9,9,9,9,9,9,7,10,10,
9,11,10,9,9,9,10,9,9,9,11,11,9,9,7,5,7,5,7,11,3,9,10,9,10,9,8,9,9,9,
6,9,9,11,9,9,10,10,9,7,8,9,10,11,9,9,7,5,3,5,9, };
static unsigned short stb__courier_bold_17_usascii_h[95]={ 0,11,6,13,13,11,10,6,13,13,7,9,6,2,
3,13,11,10,10,11,10,11,11,11,11,11,8,9,9,5,9,11,12,9,9,11,9,9,9,11,9,9,10,9,
9,9,9,11,9,13,9,11,9,10,9,9,9,9,9,13,13,13,6,2,4,8,11,8,11,8,10,11,10,10,
14,10,10,7,7,8,11,11,7,8,11,8,7,7,7,11,7,13,13,13,4, };
static unsigned short stb__courier_bold_17_usascii_s[95]={ 125,121,121,8,34,77,57,122,42,48,23,
112,39,72,68,54,115,112,103,1,75,38,19,96,49,10,123,121,1,44,91,
41,92,71,61,28,41,31,102,67,1,83,21,89,21,77,100,21,43,82,32,
31,111,1,65,53,11,51,120,76,68,62,31,80,54,30,104,60,85,40,66,
57,47,93,1,83,11,109,70,50,110,10,80,22,1,12,98,1,13,100,90,
28,24,18,58, };
static unsigned short stb__courier_bold_17_usascii_t[95]={ 1,1,61,1,1,16,28,51,1,1,71,
51,71,71,71,1,16,28,28,28,28,28,28,16,16,28,16,40,61,71,51,
16,1,51,51,28,51,51,51,16,51,51,40,40,51,40,40,16,40,1,40,
16,40,40,40,40,51,51,28,1,1,1,71,71,71,61,16,61,16,61,28,
16,28,28,1,28,40,61,61,61,1,16,61,61,16,61,61,71,71,1,61,
1,1,1,71, };
static unsigned short stb__courier_bold_17_usascii_a[95]={ 144,144,144,144,144,144,144,144,
144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,
144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,
144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,
144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,
144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,
144,144,144,144,144,144,144, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_17_usascii_BITMAP_HEIGHT or STB_FONT_courier_bold_17_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_17_usascii(stb_fontchar font[STB_FONT_courier_bold_17_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_17_usascii_BITMAP_HEIGHT][STB_FONT_courier_bold_17_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_17_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_17_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_17_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_17_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_17_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_17_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_17_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_17_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_17_usascii_s[i] + stb__courier_bold_17_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_17_usascii_t[i] + stb__courier_bold_17_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_17_usascii_x[i];
            font[i].y0 = stb__courier_bold_17_usascii_y[i];
            font[i].x1 = stb__courier_bold_17_usascii_x[i] + stb__courier_bold_17_usascii_w[i];
            font[i].y1 = stb__courier_bold_17_usascii_y[i] + stb__courier_bold_17_usascii_h[i];
            font[i].advance_int = (stb__courier_bold_17_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_17_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_17_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_17_usascii_s[i] + stb__courier_bold_17_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_17_usascii_t[i] + stb__courier_bold_17_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_17_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_17_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_17_usascii_x[i] + stb__courier_bold_17_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_17_usascii_y[i] + stb__courier_bold_17_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_17_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_17_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_17_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_17_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_17_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_17_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_17_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_17_usascii_LINE_SPACING
#endif

