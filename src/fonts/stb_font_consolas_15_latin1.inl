// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_15_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_15_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_15_latin1_BITMAP_WIDTH         256
#define STB_FONT_consolas_15_latin1_BITMAP_HEIGHT         80
#define STB_FONT_consolas_15_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_15_latin1_FIRST_CHAR            32
#define STB_FONT_consolas_15_latin1_NUM_CHARS            224

#define STB_FONT_consolas_15_latin1_LINE_SPACING          10

static unsigned int stb__consolas_15_latin1_pixels[]={
    0x04316eb7,0x00151540,0x970c8144,0x03332659,0x00dccae6,0x00c80d44,
    0x02080131,0x00220088,0x20440041,0x02600098,0x80980044,0x80026008,
    0x2aaa602d,0x6640a200,0x54004400,0x5d6e0bcc,0x01fc7e65,0x001f41bb,
    0x2a6c85f9,0x055d75da,0x3ee239f5,0x376fae03,0x1d902e40,0x417c7e20,
    0xee983ee9,0xf8fc43cd,0x76416c02,0x980dd800,0x06ec03ee,0x70f37ba6,
    0x39f7100b,0x1fcffe98,0x2b2616e0,0x40fba603,0x21dccee8,0x0628b75b,
    0x003e8288,0x701f5122,0x04d816eb,0x791aa0d5,0x00cc07d0,0x445404c5,
    0x2055080a,0x33260262,0x8803300f,0x02a22a02,0x0aa10144,0xdfb803e2,
    0xafff43cf,0x2207a01f,0x222a01ee,0x200ec80a,0x20a2b75b,0x23305119,
    0xa982a8be,0xb81f42aa,0x81ec0b75,0x6883d079,0xcc980f98,0x20dc2442,
    0x99302cc9,0x20b32605,0x224fccfa,0x70911b84,0x306e1223,0x065c0599,
    0x22be04c8,0xf5fff887,0xcb81aa03,0xf8065c00,0x15badc02,0x3f12f83f,
    0xf9d9d2f8,0x0feeec8b,0x5badc0f5,0x43cc0b60,0x0f19b55a,0xd79f50fa,
    0x8fa07ccb,0x545ebcfa,0x7d45ebcf,0xc97c5ebc,0xe81f32fc,0x33e81f33,
    0x3ea3e81f,0xff885ebc,0x67c0f302,0x5fff8869,0x440f603f,0x3fe202ff,
    0x5c00f982,0xf526cb75,0xee9ea4d8,0x3e203f10,0xbadc0d90,0x0f807a05,
    0x47cf4de4,0x17c5c80e,0xd03e65f1,0x45f117c7,0x2f8be22f,0x1d3d4be2,
    0x7d03e67b,0x267d03e6,0x45f1f40f,0x2e75c2f8,0x3fea05b0,0x3ebff905,
    0xd700f881,0x2e75c0b9,0xb70007cc,0x7a89b3d4,0x1743e936,0x409b0f88,
    0x7d90b75b,0x2766ea80,0x501d78bd,0x9a6c3d4d,0x87a9f40f,0x29b0f54d,
    0x2d74d87a,0x03e6b968,0x7d03e67d,0x2a7d03e6,0x55ec4d87,0xd881aa07,
    0xf4ca81ef,0x5ec09903,0x1eaf607a,0x8b70017c,0xaf81f8af,0x5d0fa1f8,
    0x026c3e20,0x2e616eb7,0xe8b3600e,0x20f5a9e8,0x5721ae7a,0x6b9f40f9,
    0xb90d75c8,0xb5d721ae,0x03e6b74b,0x7d03e67d,0x2e7d03e6,0x47e25c86,
    0xc807e02f,0x0fc00fbb,0xf1f880fc,0x0be3f105,0x2e110136,0xc8356e45,
    0x3e1f46ad,0x1ae1f101,0x740b75b8,0xd1d0f102,0x2e0d1973,0x4d6e16e6,
    0x85b9f40f,0x2b70b75b,0x2d55b85b,0x03e6991d,0x7d03e67d,0x2e7d03e6,
    0xd9aa5b85,0x9d816e05,0x20fc01f8,0x5d9aa05a,0x2a1766a8,0x2e0989df,
    0x3ef98b75,0x3e87df30,0x30f881b2,0x05badc0f,0x743c40f6,0x02dedcda,
    0xa6435c9b,0x6b9f40f9,0x990d74c8,0x7cd321ae,0x07ccfe79,0x3a07ccfa,
    0x73e81f33,0x4eec990d,0x83e207b9,0x0fdae9a8,0x80ba0fc0,0xd87b99dd,
    0xd307b99d,0xbadc1dff,0x3a00fe85,0x6ffff40f,0x2f83e200,0xd816eb70,
    0x17b0f103,0x3e205517,0x27f03e61,0x4cbe21f8,0x0f99fc0f,0x7c0f99fc,
    0x9b237f63,0x44be21f8,0x7c4be21f,0x07ccbe21,0x7fffc4fe,0x88f602ff,
    0x400ceffe,0x881a60f9,0x22ffffff,0x2ffffff8,0x5d6e0d50,0x27404e85,
    0x8f5001f4,0xb75b80fa,0x87981ec0,0x2176005b,0x746c88de,0x6f41f914,
    0x46f46c88,0x446f46c8,0x6fff446c,0x0fc8a740,0xd07e453a,0xde83f229,
    0x21aa6c88,0x261a605d,0x3aefa206,0x0d501ec5,0x2ec354bb,0x2eb703c8,
    0x101d9115,0x07d01d91,0xb90bb118,0xa816eb70,0x442ec41e,0xd70110cf,
    0x1bffb101,0x41effe98,0x440dffd8,0x6c40dffd,0x00f80dff,0x307bffa6,
    0xe983dffd,0x7ec41eff,0x2a1360df,0x12606407,0x19079930,0xb3d426c0,
    0x0220f509,0xbf95badc,0x4037f201,0x6fff403e,0x3ffa1b00,0x701fff75,
    0x4037ea9d,0xd80dffd8,0x00000001,0x0e200000,0x00000000,0x00000000,
    0x00000000,0xbadc0000,0x00000005,0x00000000,0x00000000,0x00000000,
    0x00000000,0x66640000,0x0000000c,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00019999,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x31000000,0x93026001,0x80260059,0x00098808,
    0x9859804c,0x201100aa,0x20082020,0x10130020,0x20044013,0x882a6021,
    0x510054c2,0x8014c015,0x00054c2a,0x880a6055,0x10086021,0x405403db,
    0x06ec00ec,0x80bd79f5,0x7dd300dd,0x36001d90,0xec89500d,0x3ee982cc,
    0x222f8fc4,0x3f105f1f,0x806ec0be,0xdee980ec,0x3f8fcc3c,0x83c9b3aa,
    0xddf880ec,0x03ee982f,0x076406ec,0x74c06ec0,0xdede983e,0x83f8fcc3,
    0x9f3049ba,0x82880660,0x440be22f,0x05445402,0x014400cc,0x03e21bb5,
    0x28151150,0x804c5026,0x00a20262,0x02a84066,0x47cb20c5,0x3606606a,
    0x542a1724,0x19805100,0x21501440,0x2053080a,0x0f744062,0xccca8150,
    0x33332a3c,0x5c9b0f53,0x66544983,0x00cb83cc,0x44999997,0x13e4deee,
    0x24ccccb8,0xb84ccccb,0x9999500c,0x2e019707,0x5914cccc,0x0d5441b8,
    0x07a3e332,0x4ba0d544,0x1aa883e8,0x26035510,0x355301aa,0x4c06aa60,
    0x355301aa,0xb806aa60,0x1e6675c0,0x2e7999d7,0x03ea5c86,0xccceb89d,
    0xb817fc43,0x5764ceec,0x0bbbe61e,0xb933bb2e,0x7c44ceec,0x999d702f,
    0x702ff887,0x3e299dd9,0xde88ba0f,0x2bb623fc,0xfbbf304c,0x427457c9,
    0x443fcde8,0x7543fcde,0x67544fdc,0x6e7544fd,0x7ee7544f,0x27ee7544,
    0x413f73aa,0xb702dc1f,0xd16e1ae0,0x16e07d4b,0xb80b9d70,0x741f2f85,
    0x16e07f72,0xb9d705b8,0x9d7016e0,0x7c45b80b,0x24d8ba3e,0x206980f9,
    0x57c7e63e,0x7cc9b07a,0x00f99360,0x80f701ee,0x203dc07b,0x223dc07b,
    0x702dc1fb,0x1721ae0b,0x2e0fa3f3,0x03d5ec05,0x1e2be16e,0x5c07d47d,
    0x5ec16e05,0xd80b707a,0x22dc07ab,0xf8ba7af8,0xe81f999a,0x207c4089,
    0x09f15f3e,0x43f3335f,0x81f999af,0x75107ba8,0x41eea20f,0x75107ba8,
    0x89eea20f,0xcceb81bf,0x3333ae3c,0x83f81f33,0x9d706add,0xf8fc4799,
    0x33616e02,0xf897d469,0x16e05b81,0x5c17c7e2,0x3e23ccce,0x22dc05f1,
    0x25d3e8f8,0x1eeeeef8,0x31f75e64,0x4cbe7b0f,0x3bbbe25e,0xdddf11ee,
    0x66f4c3dd,0x6e6f4c7d,0x3ee6f4c7,0x31f737a6,0xe98fb9bd,0x81aa7dcd,
    0x2e3ccceb,0x3ba3ccce,0xff106c88,0x3333ae05,0x205d9aa3,0xaeefa85b,
    0x41777aa2,0x2a16e05b,0x33ae1766,0x5d9aa3cc,0x51f116e0,0x403f8bad,
    0x2799e8e9,0x2f9740f8,0x403f8be2,0xf31ec03f,0x7b1e63d8,0x798f63cc,
    0x3d8f31ec,0x700fa9e6,0xb102dc0b,0x36401bff,0x4eec0b70,0x416e07b9,
    0xfc81ced8,0x2dc0b701,0x43dcceec,0x2677605b,0xf116e07b,0xec8babe1,
    0x27a5d021,0x4d72f469,0xec8be22f,0x043d9021,0x3e3f4cfe,0x33f8fd33,
    0xfd33f8fd,0xf8fd33f8,0xaed8fd33,0x0b702dc1,0x0b700d70,0xfff882dc,
    0x0b702fff,0x40fa01e4,0xf116e05b,0xb85fffff,0xfffff105,0xf116e05f,
    0xc88bbae1,0xa96e6fff,0x7fec42ef,0x3feabe0e,0x37ffe444,0x51bfff22,
    0xfa8f5dff,0x7fd47aef,0x77fd47ae,0x577fd47a,0x3d77fd47,0x27ae3f5c,
    0x267ae099,0xdcdf8809,0x3ae05b80,0xb0d50999,0x19ec988b,0x6555c2d8,
    0x4f64c40f,0x467b2621,0x75c5d86a,0xb0d50999,0x19ec988b,0x0bfe21f1,
    0x00000004,0x00200200,0x01001001,0x10010010,0x3ffee000,0x3fffee6f,
    0x20397106,0x3ffee05b,0x8f509b6f,0xd87ffffd,0x405e6540,0x367ffffd,
    0x09b7ffff,0xffffb8f5,0xd8f509b6,0x1f17ffff,0x000017e4,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x0550014c,0x405302a8,
    0x98288218,0x00430531,0x800a9801,0x98086029,0x5401500a,0x45100a20,
    0x0aa22a29,0x40d55544,0x006629a9,0x05307951,0x65417995,0x65cc1ccc,
    0x00b32602,0x5414c0aa,0x0a62cccc,0xd813b7e6,0x2037600d,0xde983ee9,
    0xf07e23de,0x23f31b25,0x1fff443f,0x74c01d90,0x7f1f983e,0x07d01d90,
    0x980f31f4,0xcece9f67,0x7e67cc5f,0x3b3fa22e,0x2e0bff27,0x0ff83cdf,
    0xa9baefae,0x3ae2fccc,0xcfa85daa,0x037605eb,0x9d70fba6,0x307fc599,
    0x14407fbd,0x50a80a20,0x360a6101,0x286c9ea4,0x07d57206,0xa8540330,
    0x19806280,0x98fa03e8,0x4313cc07,0x6c3f10ee,0x4c9b16e4,0x3ea1fb87,
    0x8fa25c00,0x265d00f9,0x5f0f630e,0x014417c4,0x04b82a15,0x4374c12e,
    0x2a20a20a,0x0a20a81a,0x9ea06aa2,0x4151b24d,0x0f8a6c28,0x22035510,
    0x355101aa,0x7d144150,0x263e8551,0x4cf75307,0x745d0fa2,0x4c5f16e3,
    0x01ecbb07,0x81b25c80,0x7df3792e,0x26c3d4d3,0x2a605553,0x4004b82a,
    0x743fcee8,0xdf983e23,0xf11f44fd,0x27eefcc1,0xb90fc57c,0xa83e23e8,
    0xbd104e9f,0xddf987f9,0x7eefcc4f,0x21f11f44,0x3a5fcece,0x9fd11e63,
    0x87d2dcfd,0x3eefee2f,0x07983e22,0x6f6e7c7b,0xdbdb1001,0xd9e97401,
    0xb90d73c3,0xea83f754,0x2cefb87e,0xd1ea4d80,0x47d07c47,0xf88fa1f9,
    0x41f98fa0,0x22dc6adc,0xf883e23e,0xf993603f,0x21f98fa0,0x3e87e63e,
    0x887743e2,0x23d47d1f,0x25b9e64d,0xbd87e23e,0x70fc41bb,0xf10edc8f,
    0x881f733b,0x01eeec81,0x216cf4ba,0x0b70b70f,0x987a80f5,0x2204fcaa,
    0x3e87e20f,0x207c43e2,0x0f88fa3e,0x4c3e81f1,0x3a2dc3ef,0xfde83e23,
    0x99af87d4,0xe81f11f9,0x23e81f13,0x1f43e23e,0x74c774ba,0x2798be0f,
    0x2ec4fa5b,0x3a06673e,0x82f8ff54,0x3fa1741f,0x00fc9760,0x2baeb65d,
    0x321ae789,0x3d407a84,0x21fb3dc0,0x7d17c0f9,0xd87987c4,0x30f88fa3,
    0x1fd07b0f,0xf11f45b8,0x7dfcdaa1,0x3bbbbe22,0x27b0f31e,0x8fa3d879,
    0x2e87d0f8,0x2db3dfdd,0x6b9e60f8,0x9033fffa,0x4c1dfddf,0x07c79dff,
    0xf70ba174,0x40be0fc5,0x272ab72f,0x7f03e65b,0x07a80f50,0x443fa7a8,
    0x3d87e21f,0x207c43e6,0x0f98f62e,0xe82e81f1,0x31ec0884,0x7fb96e1f,
    0x03e203f8,0x5d03e25d,0x3a1f31ec,0x202e8fc3,0x6b9ee1f8,0x41f880fa,
    0x031e603e,0x207d43ae,0xfa93e0fa,0x41f71350,0xbd03e63e,0x1ea0d911,
    0x74c10f50,0x8d92ec04,0x20fe98eb,0x1d71ae5e,0x72f41fd3,0x4076444d,
    0x74c75c4b,0x3ea5f50f,0x810f640f,0x4bd1ae5e,0x74c75c6b,0xd3647d0f,
    0xea8de807,0x203e9b27,0x80be62f9,0x6c076279,0x3f221eff,0x177ff4c3,
    0xd885dff7,0xfd881dff,0x80f500df,0x3fffd87a,0x0dffd880,0x07d77ec4,
    0x881dffb1,0x220faefd,0x3f20effd,0xd88fb00d,0x3ee0faef,0x6446ebff,
    0x7ec46fff,0x7fec40ef,0x577ec40e,0x1bfff90f,0x3fe601f4,0x3e9b279d,
    0x1f7ffdc0,0x02f99e60,0x00054404,0x20000000,0x20fffffd,0x20fffffd,
    0x10000008,0x00020000,0x00080000,0x00000400,0x00000080,0x00000000,
    0x00000100,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x40000000,0x2981ccc9,
    0x002a6144,0x08605973,0x98599930,0x83511442,0x88218828,0xcca81b84,
    0x2207600b,0xbcca81aa,0x03300330,0x000a81cc,0x2aa98d4c,0x320e6540,
    0x08080acc,0xa849806e,0x27999503,0x2cccccc9,0x00159991,0xb8bf2aea,
    0x7641e47f,0x9d79f300,0xb87f1f98,0x3ee3bacf,0x3f711e47,0x3b7a61e4,
    0x7d03e63d,0x0ee67744,0x3f21eea2,0x33ba26dd,0xd00992db,0x3e82dc0f,
    0x29bbf500,0x3b207dc9,0x337e0ebb,0xd07e23fd,0x3e8073a5,0x6ff407e2,
    0x3353752a,0x3733e693,0x360f602f,0x06a9e624,0xf31f4066,0x0fe06281,
    0x11aa7988,0x841aa1fd,0x3a07cc29,0xf9803b23,0x07ea3fed,0x009902ec,
    0x5db53073,0xd801f455,0x2f81ea03,0x20fa8be0,0x3a5dedec,0x7d41efff,
    0x37a609b0,0x4ee4d543,0x7d41f348,0x3d82f440,0x5303d3cc,0x5c1f1055,
    0x40aaa62f,0x3d3cc04f,0x207a7d10,0x7cc1a88a,0x805f1f40,0x361f7b3e,
    0x6401f304,0x554c2a24,0xeefeea82,0x03517d0e,0x20f500fc,0xd0be00f8,
    0x1fd5fcc7,0x3607e47d,0xb7900f9c,0x23662a87,0x23e81f34,0x26dcc3f9,
    0xd504cac4,0x362f30fd,0x1fbaa3ee,0x588177d4,0x91bf3099,0x3f3b3a09,
    0x27d03e63,0x45e600f9,0x541365d7,0xa642aaa7,0x1fbaa5e8,0x9dbd05b8,
    0x57ccc47f,0x443d4099,0x32099afa,0x5b9364df,0x17c3e9b2,0x7c40fbe6,
    0x4551add8,0x81f348da,0x9505f54d,0x01a605fb,0x3ebea1ea,0x40f509b4,
    0xd301efc8,0x7740d300,0x207ccd50,0x4c01f33e,0x35cf6977,0x4bfb26b8,
    0xf505e8cc,0x0ee82dc0,0x77f754d5,0x4c3d42ee,0x321eeefe,0x5c9764df,
    0x3e23e9ae,0x067b6622,0xa9e76d6e,0x269117d2,0x2faa6c0f,0x4f407d40,
    0x261ea018,0x2a0f62ff,0xd01f9007,0x44f40313,0x43e63e81,0xf89f40f9,
    0x4763e202,0x4617f32e,0xd992e87a,0xb703d409,0x80f98fa0,0x441ea01f,
    0x9f0be00f,0x3a4e8fd4,0xeec8db33,0xd9be86ef,0x52249543,0xf327c0f9,
    0x3207cc07,0x1ea03fd4,0x81f88be2,0x83f1007a,0xc84ee8cc,0x23e83fd4,
    0x443f10f8,0xbb013e2f,0xffd31eef,0x25d0be2b,0x1ea04edc,0x447d06b8,
    0x2a01f80f,0x7c01f107,0xffa87e62,0x3fffa4ff,0x260b700d,0x9543ffff,
    0x507cd223,0x415e883f,0x5c74c5d8,0x20f501ec,0x506c88ec,0x3221310f,
    0x897074c7,0x41ecb8e9,0x4e83e23e,0x6fdc1f91,0x3fa20989,0xc86a81ef,
    0x3325d0af,0x40f503f9,0x11f412f8,0x5403f01f,0x7c01f107,0x3e25fc9b,
    0x9d2f988a,0x7fffec01,0xa87b26c7,0x9f9a4492,0x7b104fc9,0xe819fffb,
    0x2a09f9f2,0x037ff607,0x7ffc43d4,0xb91741df,0x9f9f2e81,0x983e23e8,
    0xea81effe,0x016c0eff,0x7ffdc132,0x0be6991e,0xffd701ea,0x80f88fa1,
    0x2a1ea01f,0x21ffffff,0x8283dfff,0x2dc00fa1,0xfffb07c4,0x3333336a,
    0x05bfff34,0x25b80440,0x7fec2e99,0x6c000fff,0x080fffff,0x37fd4b70,
    0x2174ccb7,0x0003e23e,0x04402400,0x54990220,0xfffffb2f,0xf11f4001,
    0xffb03f01,0x00001fff,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x20000000,
    0x5c01bccb,0x3220ae0c,0x2a370910,0x9933cccc,0x53298799,0x501910dc,
    0x4065c019,0x9300bccb,0x99999059,0x9260ee39,0x5515c0c9,0x3332e710,
    0x8379974c,0x4c7221c8,0x22cccccc,0x16442cca,0x0244006e,0x39999991,
    0xaa81aa88,0x35530551,0x26155510,0x0ff73b62,0x0d90ffcc,0x3a07c4d7,
    0x27999d73,0x5c3cccfb,0x9d1f4793,0x100ffe98,0x99bd05ff,0xfbbeb87f,
    0x7ee66643,0x44e81f51,0x4c83ea4e,0x9dd97698,0x97f737a9,0x4cff25f9,
    0x92cceecc,0x7c45f97d,0x074cba0f,0x33220798,0x3e61fccc,0x336a4fdd,
    0x3aa3edef,0x37e24fdc,0x1ecd92dc,0x87eba0d9,0xf11f40f9,0x20b73e81,
    0x2736606b,0x1727d1bd,0x5c03e6f6,0x2a3e85ce,0x07a87e27,0xfa97a274,
    0x43e8fd40,0x2dc5a84b,0xd31f98fa,0x2e0f7a1f,0xf12e4085,0x3f71747d,
    0x6a800f30,0x903f31f4,0x27b81aad,0x1ecd905b,0x07eb90d7,0xf107c47f,
    0x20b73e81,0xddfd306b,0x3aefabdf,0x6c03e600,0x2a3e87ab,0x0f883e66,
    0x1f981d70,0x1af7607d,0x45a8c56e,0x4be1f45b,0x4cdabcda,0x26b805b8,
    0x50ba7af8,0x4007987f,0x7d03e22e,0x3d4edcc4,0x9f33dd44,0x2b765b83,
    0xf87cc2fb,0x88d72e41,0x73fccccf,0x3ae7999d,0xe8f41aaa,0x3003f7a0,
    0x3e3f101f,0x0f656f42,0x40fc45f1,0xd5bb01f9,0x540ffc40,0xb712ed95,
    0x543ea3e8,0x84cace9d,0x223e805b,0x305d3e8f,0x5003cc9d,0x33d8798d,
    0x4999dbbf,0x4c7dcde9,0xddb01efd,0x0fc5d05f,0x221ec3e6,0x73fccccf,
    0x3ee7999d,0xf87c4eee,0x3003fba0,0x2ecd501f,0x713f737a,0xd03fdddf,
    0x017fc409,0x75aa07fa,0x22dc4b9f,0x2a3fdcde,0x2e12efd5,0x3e236405,
    0xd105d6a8,0x7d003cc9,0xd9740f88,0x98f60d74,0x360d9107,0x99eb8d73,
    0x457c0af9,0x3a07c40f,0x41ae0b73,0x2cfccfca,0xf980d97d,0x7b99dd80,
    0x883f11f4,0x75c0f899,0x32036400,0xd9e986de,0x22dc3cbc,0xadc1acde,
    0x0b70b73b,0x43e20764,0x1fcc2eaf,0x83d401e6,0x8cc9ae5e,0x99fc11fe,
    0x56c8227e,0x5c7d1ecb,0x45efeeee,0x0f886bdc,0xd705b9f4,0x3eebee60,
    0x817a7d1a,0x7ffc40f9,0x88fa2fff,0xf116e02f,0x4c0b7005,0x7c43f89f,
    0x5c3ce9bc,0x09701f45,0x320b70b7,0xd70f880e,0x4c0fdc5d,0x2207d007,
    0x3a60effd,0x2a4ffbaf,0x3f27aeff,0x6c791eff,0x03f01ee3,0x1f107df3,
    0x333d73e8,0x36981ae1,0x87f13e8b,0x2a1afa98,0x4cfa5d86,0x326620fc,
    0x4cceec0f,0x3a05b809,0xef883ee4,0x32625df0,0x6407d19e,0x85b85b84,
    0x10999afc,0x4cbfe21f,0x333f300e,0x0001f503,0x88010080,0x7f0f6040,
    0x0ff80fc0,0xb9f40f88,0x0d76ffff,0x1f45aad4,0x7ffec3f5,0xf509b1ff,
    0x20677ff4,0x7c40cefc,0xb82fffff,0x5e81f705,0x365f937c,0x07d7ffff,
    0x5c354264,0xffffff85,0x17e41f12,0xfffff980,0x00002741,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x0a800000,0x06aa20a2,0x1aa8816e,0x22a1cca8,0x205441a8,
    0x2510331a,0xaa819828,0x155554c0,0x1310a633,0x4c000665,0xc8825c03,
    0x3102882c,0x5730aa20,0x50913981,0x980ea015,0x541d4ae0,0x3bba0a88,
    0x06e61eee,0x88618188,0x7d3bbbbb,0xbbf907c4,0x3a20b70d,0x5cd43fcd,
    0x0ff3b3a7,0x4c87dcdb,0xf83f16a8,0x8b6af662,0x2e6feeec,0x36a6eddd,
    0x792eebee,0x405b82cc,0x3f79d06d,0x2541ff62,0x3326ede8,0x43d9745e,
    0x7441fcdd,0x261ff01e,0x5fc1f88f,0x266661f9,0x7fbf1099,0x221ff96e,
    0x2ee27f1f,0x447d7cbb,0xb803f50f,0x07cc9b05,0x3ba1f951,0x8be88d50,
    0xb94d6e1f,0x6c7a9365,0x980d9de9,0x1f8fee1f,0x791f73f5,0x40be6fe6,
    0x4d30005b,0xb71eae4d,0x1e60b775,0x5bae4d71,0xbc89934c,0x5c3f906a,
    0xf8af8d55,0x26666661,0x3f7e6b70,0x0c303fa2,0xf11f5e20,0x7fcc1361,
    0x2be3ffff,0x2ba1f999,0x7cc7d0f9,0x2a1f7cc0,0x7a932db6,0xcd8d8936,
    0x21fc42b9,0x76a8545b,0x2ff9932b,0x6677664c,0x99999932,0x4c3d9e65,
    0x103fe987,0x927fc49d,0x64d516e9,0xa82d9a24,0x7c6aadc7,0x3bba0f8a,
    0x35101eee,0x2b100000,0x26c3e23e,0x77c42dc0,0x2fe1eeee,0x7c47d0fd,
    0xbc40fe80,0x57c3d9ee,0x363621f8,0x426c2b8d,0xaddaa05b,0x30ffe64c,
    0x2599dd99,0x2cccccc9,0xf303f37a,0x42dddd98,0x23f104e9,0x7445d1f8,
    0x98b60ecd,0x4c5f910f,0x0201f88f,0x00000000,0x21f31ec0,0xf05b806b,
    0x228a9807,0xd903e23e,0x9795f0db,0x86bdc83d,0x20eb9b9d,0x540b706c,
    0x7cd32b76,0x0b703f9a,0x20554400,0x3151cfdc,0x6ffc4517,0x41db971d,
    0xaa88b34a,0x15104040,0x000952b8,0x510221a8,0x44fffb01,0x80888888,
    0x10fe98eb,0x12a0617f,0x64c10f64,0x447d2ccc,0x3a27ea0f,0x7fc57744,
    0x44177cc0,0x3ea1dccd,0xb540b700,0x98b2995b,0x6d80b705,0x22cccc98,
    0x1cc0aaaa,0xa8555544,0x0000002b,0xc8000000,0xd903fe0d,0x3fffe001,
    0x6c41ffff,0x3260faef,0x644005ff,0x2aa26fff,0x7c47d1aa,0x17cc7f10,
    0x7e83f4fb,0x7fec0440,0x40b70fff,0x0132b76a,0x09700e60,0x00355551,
    0x00000000,0x00000000,0x03fa0a20,0x00000066,0x3ffe0001,0x00101fff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_15_latin1_x[224]={ 0,3,1,0,0,0,0,3,2,1,1,0,1,1,
2,0,0,0,1,1,0,1,0,0,0,0,3,1,1,0,1,2,0,0,1,0,0,1,1,0,0,1,1,1,
1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,2,1,2,0,0,0,0,1,1,0,0,0,0,1,1,
0,1,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,1,3,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,
3,1,0,0,1,1,0,1,0,0,1,0,1,2,0,1,0,2,3,1,1,1,0,0,0,1,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
 };
static signed short stb__consolas_15_latin1_y[224]={ 11,0,0,1,0,0,0,0,0,0,0,3,8,6,
8,0,1,1,1,1,1,1,1,1,1,1,3,3,2,5,2,0,0,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,12,0,3,0,3,0,3,0,3,0,0,
0,0,0,3,3,3,3,3,3,3,1,3,3,3,3,3,3,0,-1,0,5,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11,3,0,1,1,1,
-1,0,0,1,1,4,6,6,0,1,0,2,0,0,0,3,0,5,11,0,1,4,0,0,0,3,-2,-2,-2,-2,
-2,-2,1,1,-2,-2,-2,-2,-2,-2,-2,-2,1,-2,-2,-2,-2,-2,-2,3,-1,-2,-2,-2,-2,-2,1,0,0,0,
0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,0,0,0,0,0,0,0,
 };
static unsigned short stb__consolas_15_latin1_w[224]={ 0,3,6,8,8,9,9,2,5,6,7,8,5,6,
4,8,8,8,7,7,8,7,8,8,8,8,3,5,6,8,7,5,9,9,7,8,8,6,6,8,8,6,6,7,
7,8,8,8,7,9,7,8,8,8,9,8,9,9,8,5,7,4,8,9,5,8,7,6,8,8,8,8,7,7,
7,7,7,8,7,8,7,8,7,6,8,7,8,8,8,8,7,6,2,7,8,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,3,7,8,8,8,
2,7,7,9,6,7,8,6,8,7,6,8,6,5,7,7,8,4,2,6,6,7,9,9,9,6,9,9,9,9,
9,9,9,8,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,7,8,8,8,8,8,9,7,7,8,8,
8,8,8,8,8,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,8,
 };
static unsigned short stb__consolas_15_latin1_h[224]={ 0,12,5,10,13,12,12,5,15,15,7,8,6,2,
4,13,11,10,10,11,10,11,11,10,11,10,9,11,10,4,10,12,15,10,10,11,10,10,10,11,10,10,11,10,
10,10,10,11,10,13,10,11,10,11,10,10,10,10,10,15,13,15,6,3,4,9,12,9,12,9,11,12,11,11,
15,11,11,8,8,9,12,12,8,9,11,9,8,8,8,12,8,15,16,15,4,10,10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,12,13,10,10,10,
16,13,4,11,8,6,4,2,8,3,6,9,7,7,4,12,13,4,3,7,8,6,11,11,11,12,13,13,13,13,
13,13,10,13,13,13,13,13,13,13,13,13,10,13,14,14,14,14,14,8,14,14,14,14,14,13,10,12,12,12,
12,12,12,12,9,11,12,12,12,12,11,11,11,11,12,11,12,12,12,12,12,8,11,12,12,12,12,15,15,15,
 };
static unsigned short stb__consolas_15_latin1_s[224]={ 254,55,209,51,198,149,68,251,41,83,150,
118,195,180,224,216,28,68,175,1,9,243,175,208,190,95,251,184,249,216,192,
169,73,77,87,93,240,37,44,118,28,142,199,60,200,157,183,216,149,17,1,
46,166,84,18,133,123,113,104,52,190,47,186,243,229,235,114,9,130,25,160,
151,152,135,33,127,169,101,41,217,143,160,93,244,143,1,67,58,49,46,85,
58,4,65,225,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,
231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,254,139,63,
177,195,212,1,71,239,206,34,171,247,180,76,235,179,16,158,165,216,122,207,
234,251,143,136,201,9,55,65,248,45,113,235,180,95,225,221,245,1,9,37,
105,123,55,79,87,186,131,90,171,108,117,126,110,135,144,153,162,99,27,204,
168,194,203,212,221,230,239,226,111,78,185,176,140,19,225,234,37,1,75,159,
19,87,37,96,127,102,105,10,28,59,16,25,7, };
static unsigned short stb__consolas_15_latin1_t[224]={ 1,32,68,57,1,18,32,57,1,1,68,
68,68,15,73,1,45,57,57,45,57,32,32,57,32,57,32,32,45,68,57,
32,1,57,57,45,45,57,57,45,57,57,32,57,57,57,57,32,57,18,57,
45,57,45,57,57,57,57,57,1,1,1,68,73,73,57,32,68,32,68,45,
32,45,45,1,45,45,68,68,57,32,32,68,57,45,68,68,68,68,32,68,
1,1,1,68,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,
45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,1,32,18,
45,45,45,1,18,68,32,68,68,68,15,68,73,68,68,68,68,73,32,1,
68,63,68,68,68,45,45,45,18,18,18,1,1,18,1,45,1,18,18,18,
18,18,18,18,18,45,18,1,1,1,1,1,68,1,1,1,1,1,18,45,
18,18,18,18,18,18,18,57,45,32,18,18,18,45,32,32,45,32,45,18,
32,32,32,32,68,45,32,32,32,32,1,1,1, };
static unsigned short stb__consolas_15_latin1_a[224]={ 132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_15_latin1_BITMAP_HEIGHT or STB_FONT_consolas_15_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_15_latin1(stb_fontchar font[STB_FONT_consolas_15_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_15_latin1_BITMAP_HEIGHT][STB_FONT_consolas_15_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_15_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_15_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_15_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_15_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_15_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_15_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_15_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_15_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_15_latin1_s[i] + stb__consolas_15_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_15_latin1_t[i] + stb__consolas_15_latin1_h[i]) * recip_height;
            font[i].x0 = stb__consolas_15_latin1_x[i];
            font[i].y0 = stb__consolas_15_latin1_y[i];
            font[i].x1 = stb__consolas_15_latin1_x[i] + stb__consolas_15_latin1_w[i];
            font[i].y1 = stb__consolas_15_latin1_y[i] + stb__consolas_15_latin1_h[i];
            font[i].advance_int = (stb__consolas_15_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_15_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_15_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_15_latin1_s[i] + stb__consolas_15_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_15_latin1_t[i] + stb__consolas_15_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_15_latin1_x[i] - 0.5f;
            font[i].y0f = stb__consolas_15_latin1_y[i] - 0.5f;
            font[i].x1f = stb__consolas_15_latin1_x[i] + stb__consolas_15_latin1_w[i] + 0.5f;
            font[i].y1f = stb__consolas_15_latin1_y[i] + stb__consolas_15_latin1_h[i] + 0.5f;
            font[i].advance = stb__consolas_15_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_15_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_15_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_15_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_15_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_15_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_15_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_15_latin1_LINE_SPACING
#endif

