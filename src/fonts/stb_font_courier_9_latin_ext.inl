// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_9_latin_ext_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_9_latin_ext'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_9_latin_ext_BITMAP_WIDTH         256
#define STB_FONT_courier_9_latin_ext_BITMAP_HEIGHT         60
#define STB_FONT_courier_9_latin_ext_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_9_latin_ext_FIRST_CHAR            32
#define STB_FONT_courier_9_latin_ext_NUM_CHARS            560

#define STB_FONT_courier_9_latin_ext_LINE_SPACING           4

static unsigned int stb__courier_9_latin_ext_pixels[]={
    0x11000000,0x40000030,0x22000000,0x00000009,0x00000000,0x00000000,
    0x00000000,0x18000000,0x1005c000,0x20a05541,0x206a60aa,0x80982882,
    0x20554199,0x4c0a81aa,0x0c615419,0x40a982aa,0x0a215452,0x05510554,
    0x03530a05,0x06a60a05,0x441aa833,0x2a60d4c2,0x98280980,0x260d4c1a,
    0x140d4c1a,0x20d4c144,0x18a060a9,0x826a614c,0x826a60aa,0x89819828,
    0x1305ca61,0x260b94c3,0x305ca618,0x260b94c5,0x9a85ca62,0x7298a629,
    0x2531ba81,0x4426660b,0x50aa60aa,0x26172983,0x2614c172,0x530a6099,
    0x884ccc13,0x84d4c332,0x4d4c1729,0xa9866510,0x298aa609,0x33154c17,
    0x4aaa0c2a,0x123128a2,0x20984c62,0x261d409a,0x31422288,0x22844511,
    0x14222889,0x14508945,0x94a14225,0x502844a2,0x24262844,0x0a0630c4,
    0x45088a11,0x8a484ca2,0x84c22132,0x4c261944,0x3098a110,0x44261941,
    0x0a110c60,0x418a5063,0x25145189,0x51883152,0x40a98500,0x94284452,
    0x14a14222,0x44a28a11,0x42251450,0x89452942,0x5088a050,0x4c31070c,
    0x28442809,0x19451422,0x1814a28e,0x8145130e,0x13014508,0x41330145,
    0x40998508,0x43140c38,0x04c54ca2,0x9a881462,0x22942943,0x44528318,
    0x8c452831,0x863128a1,0x2a18c4a2,0x189452ac,0x18c450c3,0x08c41cd4,
    0x8c45950a,0x1450c621,0x4a514735,0x20e6a1b8,0x43188144,0x5c4a2402,
    0x86311411,0x417060a0,0x26631189,0x3053731a,0x99854dc1,0x50a6a0c9,
    0x20cdc195,0x066e0caa,0x0cdc1955,0x0cdc3533,0x0cdc3533,0x5c353328,
    0x7066a219,0x4260a033,0xb82829a9,0x330cdc19,0x54cc5035,0x0a02a6e1,
    0xb82a6e0a,0x2054dc19,0x530a9b82,0x2619b853,0x805cc29a,0x01003ab8,
    0x370000cc,0x0000006e,0x00000000,0x00000cc0,0x0cc09880,0x40000000,
    0x10100098,0x000cc413,0x10198800,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00002a60,0x98082a60,0x0001801a,0x02aaa602,0x03330000,0x00000000,
    0x1982aa60,0x00628015,0x50000004,0x8000aa85,0x2330001a,0x3080000a,
    0x40898e18,0x3054c199,0x50a94c15,0x54c15298,0x21a8cc60,0x86ae20a9,
    0x054c1131,0x40aa8153,0x221a9831,0x054c281a,0x80a982a6,0x42218c09,
    0x4430c281,0x4cc1442a,0x054c0a81,0xa98530a6,0x4c30d4c0,0x71054c0a,
    0x05035106,0x9c130994,0x22261889,0x30995541,0x4130c221,0x8c2a8308,
    0x5554c308,0xa9818060,0x31130a21,0x8d4c0998,0x0d4c1889,0x31aa8153,
    0x1aaa8155,0x430886ae,0x04260aa9,0x41889831,0x50c54418,0x8a5146a3,
    0x89855532,0x10a8cc62,0x0d444355,0x151986a2,0x50e51098,0x4c18c18c,
    0x08866318,0x20c22283,0x43088c19,0x300c1131,0x428c4650,0x32850431,
    0x1819418c,0x8cc18c18,0x30886261,0x108cc318,0x188630a3,0x8a8c6905,
    0x18a19430,0x230d4443,0x21318338,0x22942988,0x72850338,0x0c60c608,
    0x0886ea14,0x20c22183,0x03088c31,0xb9853303,0x26195440,0x53530c60,
    0x20c62a88,0x053512a8,0x54c1ab83,0x350cce62,0x1861ab83,0x186304c3,
    0x8d64d426,0x94309b89,0x4443b8a1,0x0d44462a,0x99253186,0x441a8880,
    0x47054261,0x32aa0caa,0x38c86260,0x37140cdc,0x9862ab83,0x20501819,
    0x3514d441,0x0c0caa85,0xcaa8a6a2,0x26653510,0x2260c0b9,0x80409dc1,
    0x18a18982,0x19550a6a,0x593514d4,0x998e2a63,0x4c35331a,0x888cc280,
    0x80830c29,0x53110a9a,0x000a1428,0x000eae20,0x351b8030,0x0405cc00,
    0x20000008,0x20000000,0x466731ba,0x0042ab8b,0x00033398,0x49c40000,
    0x0aab9800,0x24a602a2,0x00105571,0x000624a6,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x214c0000,0x000101a8,0x82a53050,0x001c0031,0x0d540000,0x20008002,
    0x00000199,0x0ccc0000,0x00003814,0x4c000000,0x000002aa,0x2aa0a031,
    0x31018180,0x260a0510,0x530ccc28,0x4c1a982a,0x19882819,0x4054c144,
    0x0d4c1441,0x08851033,0x10502813,0xa9835305,0x213054c0,0x98226608,
    0x51054c19,0x30501530,0x441a9835,0x882818c2,0x15419982,0x18154154,
    0xa8853018,0x2609a881,0x4221dc0a,0x2110d441,0x5502a609,0x54c0a985,
    0x2054c180,0x220aa1aa,0x983100c1,0x8aaa62aa,0x88528818,0x470880c1,
    0x0d541109,0x31031031,0x2aa98310,0x98770d54,0x06226188,0x33033031,
    0x86060330,0x4c40c0c1,0x45415438,0x14a0c222,0x0aa83003,0x40606030,
    0x220cc181,0x51881451,0xa8318318,0x46218c09,0x218d44a2,0x8c430063,
    0x23114622,0x0c614622,0x0c60260c,0x30a310c6,0x86306306,0x2ae22ba8,
    0x4c0c0c1a,0x864e0898,0x0c221539,0x2a205013,0x886ee229,0x0a6a229a,
    0x0a6a2375,0xaa986306,0xa9854dc2,0x1dc1dc2a,0x31d5c29c,0x0a9b8555,
    0x35128a6a,0x43098618,0xa984c309,0x2181dc2a,0x0c60aab9,0x855530c6,
    0x2155c2ab,0x010082ab,0x39118606,0x2e020105,0x7054d419,0x2e666153,
    0x73330660,0x502e6661,0x0605cccc,0x829a8557,0x04c29a82,0x8c18c04c,
    0x00c14d41,0x0c0a9b85,0x85350a6a,0x214d429a,0x82603009,0x32aa0caa,
    0x51b8a6a0,0x1b8d46e3,0x88100835,0x2aae22ba,0x01008011,0x88002000,
    0x40000000,0x06a371ba,0x26040201,0x55730aab,0x3885ce21,0x10100817,
    0x37501013,0x30200000,0x0dd41557,0x00080000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x30002a00,0x2a0cc006,0x00004002,0x40003511,0x20c880a9,0x2054c0a9,
    0x380a982a,0x28089870,0x40a98188,0x31804099,0x42841a98,0x0a9801a9,
    0x035306e6,0x00630000,0x2140d4c0,0x02a620a9,0x41318851,0x2614c199,
    0x43730501,0x148281a9,0x0540d4c1,0x4c2aa60c,0x2054c2aa,0x54c1882a,
    0x8995542a,0x4620c418,0x89862262,0x106ae218,0x5c415103,0x4141941a,
    0x50aa21aa,0x0cc15435,0x540c40c4,0x54c54c0a,0x898d542a,0x9854e218,
    0x4c18c151,0x0c628a0a,0xa82506a2,0x86054442,0xaa815111,0x8cc53511,
    0x983018c4,0x18c28c41,0x88630c4c,0x21554c51,0x0a831831,0x146228c4,
    0x25154406,0x42462181,0x404c04c1,0x4c28c419,0x0631aa80,0x11886306,
    0x028c2941,0x155c50c3,0x986a214a,0x86185381,0x33188853,0x5c28a173,
    0x4614d443,0x770aaa61,0xa98630a0,0x4614d42a,0x06e218c1,0x826184c3,
    0x2629a881,0x3030c302,0x20c06030,0x88182aa9,0x30607718,0x4429a886,
    0x29a88703,0x46a37286,0x318a1009,0x545c4318,0x40620c60,0x43735109,
    0x05cccc09,0x429a8557,0x2a189809,0x20a6a0ca,0x2a0caa82,0x506660ca,
    0x4c29a853,0x300c1819,0x18181998,0x26a06030,0x26188182,0x0caa8300,
    0x4280c011,0x5330b999,0x54d43103,0x2ab82e60,0x22005ce2,0x01d64173,
    0x00aab980,0x2041a8dc,0x5710aab9,0x00002007,0x00000000,0x2a0d5c41,
    0x11ba801b,0x15d44575,0x88105751,0x4dd642ba,0x06ea0aab,0x82e60330,
    0x00000198,0x0d46e180,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x05000000,0x21c0d440,0x50d4c089,
    0x41943513,0x311540a9,0x44431813,0x26614c0a,0x09a98008,0x41511066,
    0x45310308,0x50d4c099,0x01518c15,0x30630038,0x304cc113,0x20544c35,
    0x2a530898,0x02aa0660,0x53066601,0x04c62281,0x4414c353,0x4a0d4c1a,
    0x1530d542,0x41860a98,0x89818829,0x8cc26110,0x10614e0a,0x20a986a3,
    0x38198918,0x98983185,0x26131130,0x550c2151,0x33026223,0x2aa98503,
    0x11331c22,0x2a7114a1,0x30892110,0x442a82a8,0x2218c1ab,0x418c1851,
    0x29428a52,0x40130c54,0x21860301,0x428c40c1,0x555531a9,0x2618c294,
    0x0cc3060b,0x06661946,0x89863063,0x71182629,0x22183306,0x4c48cc53,
    0x470c3180,0x73518999,0x1c3088c4,0x30330611,0x82660303,0x851830c1,
    0x131431bb,0x2a6a0a60,0x453510c0,0x222629a8,0x2186ae21,0x2218c609,
    0x06710e20,0x83062183,0x0cc08899,0x4aa82e71,0x22666286,0x80835111,
    0x22844621,0xa83b8182,0x86226629,0x50a6a238,0x8c184473,0x040c18c1,
    0x02a110c5,0x0a19460e,0x300c1535,0x0b999860,0x2ae17333,0x29a80829,
    0x4d44aaa6,0x03060182,0xb9830535,0x00819829,0x11cd4426,0x14c44333,
    0x4d543071,0x306e6a22,0x31140130,0x110dcc33,0x20cdc180,0x2155c2ab,
    0x0a6a6299,0x14094535,0x1a998cd4,0x081ab880,0x00001ba8,0x00000088,
    0x22130173,0x5751000a,0x00080004,0x11253000,0x10001ba8,0x555cc575,
    0x40002620,0x002a2019,0xa8dc6a37,0x2aea0001,0x06623510,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x1aa80800,0x54c19986,0x8898aaa1,0x3570ccc1,0x26600ae2,
    0x998aaa21,0x03306a22,0x54c0c0a6,0x3555000a,0x35105466,0x0a605441,
    0x28444405,0xaa986310,0x0351140a,0x0cd44553,0x42a82613,0x55541889,
    0x41a86a61,0x429440a9,0x98155018,0x098c1809,0x31328c11,0xa8a03183,
    0x422180e0,0x01511809,0x060c4a03,0x1828440c,0x22943194,0x300c3898,
    0x08406208,0x319c5466,0x21aa8226,0x86302601,0x18098331,0x19431983,
    0x41571066,0x2310bab8,0x00980542,0x18c03183,0x206306aa,0x55ca662a,
    0x40195541,0xb8331118,0x104d4cc1,0x215d4419,0x331088aa,0x6542a8c3,
    0x44226260,0x4cc5301b,0x266100aa,0x86b230aa,0x30c441ba,0x20303031,
    0x318181ba,0x15442a98,0x2ae14e06,0x02209863,0x50619554,0x0630d44a,
    0x80cab833,0x83065181,0x26620c02,0x3288c530,0x88180c43,0x04630030,
    0x14e44173,0x33281806,0x26314420,0x440c19aa,0x181830c1,0x81838c86,
    0x84ee0caa,0x8c0c29a8,0x14d418c1,0x89d54022,0x5371c09a,0x0660cd41,
    0x9a866a05,0x1aa85331,0x20302a6e,0x206aae21,0x4457512a,0x0d54c2aa,
    0x8aaea20c,0x644020b9,0x40aea22a,0x2062263a,0x40b9801b,0x355713ac,
    0xab88aea2,0x15d4401a,0x0155c5c0,0xb9c45751,0x2002e710,0x4180002a,
    0x08331000,0x10300000,0x00006600,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x14c11880,0x20984414,
    0x4c0661a9,0x20aa80aa,0x20c54418,0xa980a1a8,0x2660aa20,0x2a2a8080,
    0x206a2330,0x42a332aa,0x546a1519,0x94c6a351,0x2155530a,0x0554c528,
    0x010d5446,0x18202a33,0x1a835551,0x21aa86aa,0x30d5442a,0x1554c155,
    0x054446aa,0x81837188,0x10a8c289,0x40aa8151,0x21aa8508,0x28690518,
    0x180544c5,0x40260d54,0x0a8cc301,0x250c4c06,0x45461942,0x33306110,
    0x0c60898c,0x88c910c6,0x19c41530,0x86488544,0x30a06621,0x41318198,
    0x88831831,0x867314e1,0x054c0c09,0x4e14e0c6,0x10445542,0x2a2aa981,
    0x20131ac9,0x214d4453,0x4c418111,0x2666181b,0x44280608,0x5c4c4883,
    0x0ee0c609,0x2e1d5c0c,0x1535041a,0x435111a8,0x941dc01a,0x23060cc1,
    0x155c30c1,0x230620ee,0x14d42ee1,0x5541540c,0x418c18c4,0xa8088308,
    0x86b26a29,0x30c60a9a,0x54d41733,0x430180c0,0x98618251,0x04cc0c18,
    0x08987153,0x8c0c1454,0x4550c4c1,0x2222980a,0x5886a229,0x98eaa026,
    0x2155c181,0x4c111861,0x2713ac80,0x7510010b,0x88019385,0x05ce2173,
    0x1aa83553,0x9c400008,0x2164400b,0xa8182ba8,0x44aa371b,0x75711aab,
    0x2e5305cc,0x30e12710,0x20b982a7,0x4ce61738,0x2a15c451,0x188494c0,
    0x27301b88,0x46ea2ab8,0x2ae2351b,0x4c2aae62,0x00000aab,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x30000000,0x228c4513,0x41941519,0x318422aa,0x2204c042,0xa984018a,
    0x26201310,0x21333300,0x12c0038d,0x88862185,0x866a2088,0x50c6b158,
    0x2ee23555,0x00000003,0x00000000,0x00000000,0x5045ca00,0x29831833,
    0x466a2528,0x20a6e248,0x8ccc2a81,0x84c5152a,0x440a0c28,0x2aa27190,
    0x94a4860a,0x998861ca,0x00008819,0x00000000,0x00000000,0x00000000,
    0x04630000,0x18318171,0x92325570,0x0326a19a,0x19a89703,0x40262189,
    0x10880099,0x10555442,0x22333004,0x00000001,0x00000000,0x00000000,
    0x00000000,0x94e2e000,0x21c41939,0x8b801ab8,0x44133302,0x0e2e22ba,
    0x00000001,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_9_latin_ext_x[560]={ 0,1,1,0,0,0,0,1,2,1,0,0,1,0,
1,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
2,0,1,0,0,0,0,0,0,-1,1,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0, };
static signed short stb__courier_9_latin_ext_y[560]={ 6,1,1,0,0,1,1,1,1,1,1,1,4,3,
5,0,1,1,1,1,1,1,1,1,1,1,2,2,1,2,1,1,0,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,7,0,2,1,2,1,2,1,2,1,0,
0,1,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,1,1,3,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,2,0,1,2,1,
1,1,1,1,0,2,3,3,1,0,0,1,1,1,0,2,1,3,5,1,0,2,1,1,1,2,-1,-1,-1,0,
0,-1,1,1,-1,-1,-1,0,-1,-1,-1,0,1,0,-1,-1,-1,0,0,2,1,-1,-1,-1,0,-1,1,1,0,0,
0,1,1,0,2,2,0,0,0,1,0,0,0,1,1,1,0,0,0,1,1,1,2,0,0,0,1,0,1,1,
0,1,-1,0,1,2,-1,0,-1,0,0,1,-1,0,-1,1,1,1,0,1,-1,0,0,1,1,2,-1,0,-1,0,
-1,0,0,1,1,0,-1,-1,1,1,0,1,0,1,-1,0,1,0,0,2,1,0,-1,0,1,1,2,-1,-1,1,
1,1,1,1,1,1,1,-1,0,1,2,-1,0,1,1,2,0,1,-1,0,-1,0,1,2,-1,0,1,2,-1,0,
-1,0,-1,0,1,2,-1,0,1,1,-1,1,1,1,0,1,0,1,-1,0,-1,0,-1,0,1,2,-1,0,-1,0,
0,-1,0,0,1,-1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,0,-1,0,-1,
0,-1,0,-1,0,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,-2,-1,-1,0,-1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1, };
static unsigned short stb__courier_9_latin_ext_w[560]={ 0,2,3,5,4,5,4,2,2,2,3,5,2,5,
2,4,4,4,4,4,4,4,4,4,4,4,2,2,4,5,4,3,4,5,5,5,5,5,5,5,5,4,5,5,
5,5,5,4,5,5,5,5,5,5,5,5,5,5,4,2,3,2,4,6,3,5,5,5,5,5,5,5,5,5,
4,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,4,2,1,2,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,2,4,5,4,5,
1,5,3,5,3,4,5,5,5,6,3,5,3,3,3,5,5,2,2,3,3,5,5,5,5,3,5,5,5,5,
5,5,5,5,5,5,5,5,4,4,4,4,6,5,4,4,4,4,4,3,5,5,5,5,5,5,5,4,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,4,5,4,5,4,5,4,5,4,5,5,4,5,4,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,5,4,5,4,5,5,5,5,5,5,5,5,5,
5,4,5,4,5,4,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,4,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5, };
static unsigned short stb__courier_9_latin_ext_h[560]={ 0,6,3,7,7,6,6,3,7,7,3,5,4,1,
2,7,6,5,5,6,5,6,6,6,6,6,5,5,5,3,5,6,7,5,5,6,5,5,5,6,5,5,6,5,
5,5,5,6,5,6,5,6,5,6,5,5,5,5,5,7,7,7,3,2,3,5,6,5,6,5,5,6,5,6,
8,5,5,4,4,5,6,6,4,5,6,5,4,5,4,6,4,7,7,7,2,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,5,4,5,
7,6,1,6,4,4,3,1,6,1,3,5,3,3,3,6,6,2,3,3,4,4,5,5,5,6,7,7,7,6,
6,7,5,7,7,7,7,6,7,7,7,6,5,6,8,8,8,7,7,4,6,8,8,8,7,7,5,6,7,7,
7,6,6,7,5,6,7,7,7,6,6,6,6,5,6,5,7,7,7,6,6,5,5,7,7,7,6,8,7,7,
6,6,7,7,7,6,8,7,8,7,7,6,8,7,7,6,5,6,6,6,7,7,6,6,7,6,7,7,8,8,
8,8,7,7,7,8,7,7,5,5,6,5,6,5,7,6,7,8,6,4,6,8,8,8,7,7,4,7,7,7,
7,5,5,5,5,5,5,7,6,7,6,7,6,5,6,6,7,6,8,7,8,7,5,5,7,6,7,6,7,6,
8,7,8,7,7,6,8,7,7,7,7,6,5,6,7,6,7,6,8,7,8,7,8,7,7,6,7,7,7,8,
6,7,6,6,5,7,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,6,5,5,5,
5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,7,7,6,8,
7,8,7,8,7,8,8,8,8,8,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,8,8,7,7,8,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5, };
static unsigned short stb__courier_9_latin_ext_s[560]={ 255,252,90,85,59,100,1,103,249,246,111,
92,61,149,135,241,21,98,207,38,202,43,48,64,244,181,193,168,188,94,177,
136,203,217,229,58,223,235,196,15,156,212,6,144,109,103,182,249,171,228,162,
222,150,198,138,132,126,120,115,244,30,208,106,119,80,74,145,62,151,50,44,
169,31,157,127,13,7,1,246,242,186,192,19,219,216,207,13,195,7,238,241,
252,46,152,126,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,
148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,255,12,53,
130,25,118,155,69,138,124,252,30,84,149,175,142,64,93,76,68,72,32,26,
132,100,115,57,39,142,154,81,234,1,7,13,210,204,119,213,131,143,149,197,
163,7,226,191,140,37,130,167,156,1,192,42,35,94,103,144,150,61,24,80,
54,79,91,97,30,24,108,56,13,137,125,167,239,233,227,221,86,210,25,208,
196,202,182,176,106,124,237,243,12,140,184,18,30,117,111,64,36,47,93,190,
53,202,67,73,1,17,229,217,118,99,99,105,123,1,249,129,146,231,152,220,
214,172,178,214,161,185,179,173,121,161,155,236,230,216,224,205,201,114,245,103,
138,19,45,36,93,109,12,55,49,51,37,31,25,19,189,183,177,136,75,87,
235,70,223,106,211,82,68,76,71,187,48,71,169,82,157,112,160,146,199,134,
42,122,7,220,106,232,95,89,194,132,72,66,60,54,188,166,170,34,164,24,
158,196,7,226,163,115,100,140,112,181,18,238,208,65,247,88,135,172,13,251,
248,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,59,148,148,76,
148,148,148,148,148,148,148,148,148,148,148,148,148,82,1,148,148,148,148,148,
148,148,148,148,148,148,148,148,48,19,148,148,148,148,148,148,148,148,148,148,
148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,40,111,
117,88,98,77,87,83,76,1,65,59,53,47,41,35,148,148,148,148,148,148,
148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,
148,148,148,29,23,128,175,6,43,148,148,148,148,148,148,148,148,148,148,148,
148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,
148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,
148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,
148,148,148,148,148,148,148,148,148, };
static unsigned short stb__courier_9_latin_ext_t[560]={ 1,10,54,18,26,34,41,54,10,10,54,
48,54,54,54,10,41,48,48,41,48,41,41,41,34,34,48,48,48,54,48,
34,10,48,48,41,48,48,48,41,48,48,41,48,48,48,48,34,48,34,48,
34,48,34,48,48,48,48,48,1,10,10,54,54,54,48,34,48,34,48,48,
34,48,34,1,48,48,54,48,41,34,34,54,41,34,41,54,41,54,34,48,
1,10,10,54,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,1,41,41,
41,54,41,10,41,54,34,48,54,54,54,34,54,54,41,54,54,54,41,41,
54,54,54,54,54,41,41,41,34,18,18,18,34,34,18,41,18,18,18,10,
34,26,18,18,34,48,34,1,1,1,10,26,54,34,1,1,1,18,26,48,
34,18,18,18,34,34,18,48,34,18,18,18,26,26,26,26,48,26,48,18,
18,18,26,26,41,41,18,18,26,26,1,26,26,26,26,26,26,26,26,1,
26,1,18,18,34,1,10,10,34,41,26,26,26,26,18,26,26,18,26,18,
18,1,1,1,1,18,18,18,1,18,18,41,41,26,41,26,41,18,26,18,
1,34,54,34,1,1,1,18,18,54,18,18,18,18,41,41,41,41,41,41,
10,26,10,34,10,26,48,26,34,10,34,1,10,1,10,41,41,10,26,10,
34,10,34,1,10,1,10,10,26,1,10,10,10,10,26,41,26,10,26,10,
26,1,10,1,10,1,10,10,34,10,10,1,1,34,1,26,26,41,10,26,
41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,34,41,41,34,
41,41,41,41,41,41,41,41,41,41,41,41,41,34,48,41,41,41,41,41,
41,41,41,41,41,41,41,41,10,48,41,41,41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,10,10,
10,34,1,10,1,10,1,10,1,1,1,1,1,1,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,
41,41,41,1,1,10,10,1,18,41,41,41,41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,41, };
static unsigned short stb__courier_9_latin_ext_a[560]={ 76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_9_latin_ext_BITMAP_HEIGHT or STB_FONT_courier_9_latin_ext_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_9_latin_ext(stb_fontchar font[STB_FONT_courier_9_latin_ext_NUM_CHARS],
                unsigned char data[STB_FONT_courier_9_latin_ext_BITMAP_HEIGHT][STB_FONT_courier_9_latin_ext_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_9_latin_ext_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_9_latin_ext_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_9_latin_ext_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_9_latin_ext_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_9_latin_ext_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_9_latin_ext_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_9_latin_ext_s[i]) * recip_width;
            font[i].t0 = (stb__courier_9_latin_ext_t[i]) * recip_height;
            font[i].s1 = (stb__courier_9_latin_ext_s[i] + stb__courier_9_latin_ext_w[i]) * recip_width;
            font[i].t1 = (stb__courier_9_latin_ext_t[i] + stb__courier_9_latin_ext_h[i]) * recip_height;
            font[i].x0 = stb__courier_9_latin_ext_x[i];
            font[i].y0 = stb__courier_9_latin_ext_y[i];
            font[i].x1 = stb__courier_9_latin_ext_x[i] + stb__courier_9_latin_ext_w[i];
            font[i].y1 = stb__courier_9_latin_ext_y[i] + stb__courier_9_latin_ext_h[i];
            font[i].advance_int = (stb__courier_9_latin_ext_a[i]+8)>>4;
            font[i].s0f = (stb__courier_9_latin_ext_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_9_latin_ext_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_9_latin_ext_s[i] + stb__courier_9_latin_ext_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_9_latin_ext_t[i] + stb__courier_9_latin_ext_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_9_latin_ext_x[i] - 0.5f;
            font[i].y0f = stb__courier_9_latin_ext_y[i] - 0.5f;
            font[i].x1f = stb__courier_9_latin_ext_x[i] + stb__courier_9_latin_ext_w[i] + 0.5f;
            font[i].y1f = stb__courier_9_latin_ext_y[i] + stb__courier_9_latin_ext_h[i] + 0.5f;
            font[i].advance = stb__courier_9_latin_ext_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_9_latin_ext
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_9_latin_ext_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_9_latin_ext_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_9_latin_ext_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_9_latin_ext_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_9_latin_ext_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_9_latin_ext_LINE_SPACING
#endif

