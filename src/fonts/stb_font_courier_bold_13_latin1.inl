// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_13_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_13_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_13_latin1_BITMAP_WIDTH         256
#define STB_FONT_courier_bold_13_latin1_BITMAP_HEIGHT         60
#define STB_FONT_courier_bold_13_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_bold_13_latin1_FIRST_CHAR            32
#define STB_FONT_courier_bold_13_latin1_NUM_CHARS            224

#define STB_FONT_courier_bold_13_latin1_LINE_SPACING           6

static unsigned int stb__courier_bold_13_latin1_pixels[]={
    0x20033010,0x00022028,0x20300100,0x00403001,0x00c8c803,0x1bbfb101,
    0x404080c0,0x00406620,0x02206d66,0x400600a6,0x03101986,0x01803004,
    0x820110c4,0x5d40abd8,0x9807e868,0x1f13600d,0x6ec4d300,0x2603b104,
    0x203b100d,0x01b504dd,0xbb107a7e,0x7dce7c49,0x7882d882,0x754f1274,
    0x201dda87,0x5707d010,0x2204b801,0x3df12dfd,0x9bb00d98,0x6cc03660,
    0x16e0d980,0x03a889b6,0x04037880,0xd804c800,0x4c04c623,0x09804400,
    0x4c026310,0x41faf880,0x716e1318,0x1e201101,0x1e23c4f1,0x7d91018a,
    0x1cc07cc1,0x27720180,0x0260f14c,0x310098c4,0x204c0c40,0x911e21f8,
    0xeafe417d,0x3ffbe24f,0x27f57f24,0x7c43fffd,0x7643e600,0x3223ed8d,
    0x5f6440be,0x3b637b20,0xc82fb223,0x3a3ed8de,0x3b60ffff,0x880794ee,
    0x47880eed,0x8f11e278,0x9d00eed8,0x2226cdb3,0xdb100eed,0x10b7201d,
    0xeeeeeb8f,0x1ddddd70,0x83bbbbae,0x3b64eeed,0x789324ee,0x3e36ce74,
    0x33f88d52,0x06a97c5f,0x6409b07a,0x0fd4bea4,0xce8db39d,0x54bea6d9,
    0x9b673a1f,0x443f52fa,0xafb9878f,0xfd500b71,0x1f88f109,0xfd50f112,
    0xd1e8b309,0x409fd505,0xd7104fea,0x9f31e25f,0x33e61f55,0x59f30faa,
    0x57dcc1f5,0xb86bee61,0x74599ea6,0x22175ae1,0xd6b8f60f,0x3e60f405,
    0x9e20f880,0x23d16678,0x2788f459,0x23d16678,0xfd89e278,0x4c7884fe,
    0x441c88af,0xf87887af,0xf10f1024,0x4c8790f5,0x0f5f105d,0x2383d7c4,
    0x73d0f16a,0x49b9e893,0x4424dcf4,0x4d50f107,0x8990f26d,0xadf886de,
    0x036f40fb,0x320f607a,0x64f13c44,0x643ca643,0x793c4f14,0x3c4f14c8,
    0x2207f3ee,0x0dffea87,0x3c42eadc,0x3c4789e2,0x2d42eadc,0xadc1ecba,
    0x0bab702e,0x3c53af7e,0x7f417ff4,0x02ffe82f,0x2e1e20f1,0x745a9e25,
    0x7c417dc2,0x2fb81cec,0x23cc0f40,0xf13c41f8,0x2d4ba2d4,0x4f13c4ba,
    0x2789745a,0x83575478,0x7403a078,0x23c45fff,0x0f11e278,0x5d0bfffd,
    0x7435cf71,0xffd05fff,0x47f970bf,0xaadae878,0x82ab6ba0,0x440aadae,
    0x47d0f107,0x3dc57478,0x8078835c,0xd01f806b,0x73f82dc5,0x47b8ae8b,
    0x9fc7b8ae,0x3dc5745b,0x36a2dcfe,0x09f9885a,0x4fd4175c,0x71e21f99,
    0x8f713c4d,0x41f999fa,0x3e21dfd9,0x3e667ea1,0x7cccfd41,0x57c47881,
    0x8ba66ba0,0x3a2e99ae,0x2622e99a,0x27e6209f,0x17c41f50,0x75c3bfb3,
    0x1dfd80ef,0xc80efeb8,0xf9aa05ee,0x81bff301,0x6cc1dfd9,0x6ffcc1df,
    0x20efecc0,0x4000dff9,0x8085fffe,0x8ffb4ff8,0xea960ec5,0x7ed3fe26,
    0x44aa0107,0x44ffb4ff,0x20ffb4ff,0xfd8f7441,0xffb2ffff,0x3ff65fff,
    0x3ffa2fff,0x57fffa5f,0x8084a82a,0x55502aa9,0x20555301,0x060801a9,
    0x08010020,0x10020040,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x6d660620,0x01403300,0x00004015,
    0x50108022,0xabd88070,0x2b300880,0x0a01980d,0x36b30108,0x2200ca80,
    0x03300700,0x6c0500cc,0x276e0499,0x00004203,0x440a60c4,0x81500bec,
    0x402100d9,0x1b9b105a,0xb9703b10,0x20737660,0xeacc3dfc,0x0b507ee0,
    0x7d41d444,0x2a02103f,0x81b7b105,0x02101d59,0x7f540d5c,0x502cc0ff,
    0x4406d409,0x02080dcd,0xb301b898,0x39bb303a,0x84dcec88,0x5d9ce83c,
    0x1307f74c,0x7db1bd90,0x02620188,0x1bac04c4,0x2f603510,0x3f70302e,
    0x227b6010,0x1e27a3ed,0x1313bbb6,0x088044c0,0x0eeeeeb8,0xf12e814c,
    0x00c40301,0x88098801,0xdb100eed,0x5401801d,0x0fe9ce81,0x3a2cc098,
    0x75e64f21,0x4bea5d93,0x3ffea1fa,0x217ffd42,0x6d40fffd,0x7ffec39c,
    0x226f64c0,0x3ea2fffa,0x8df53fb0,0x743f56fa,0xafb986eb,0xb03fff61,
    0xffd81fff,0x2ab3e60f,0x83fff60f,0x3fee0469,0x17ffdc2f,0xb8df53fb,
    0xfea82fff,0x413faa04,0x7d42fffb,0x7d5662ff,0x8bffea3e,0x21f1e43c,
    0x1db3e8e9,0x3e6789e2,0x47e61f51,0x36a220fa,0x205ee4c4,0x67c4da88,
    0x547e67d9,0x31e8f30f,0x1f3ef88d,0x441fe574,0x44da8887,0x4444da88,
    0x4dcf44da,0x226d4444,0x57c46a2e,0x35f10fc9,0x698f41f9,0x03f26be2,
    0x7c40f5f1,0xc9af887a,0x3ea3f30f,0x975f1790,0xb87d47e6,0x261f1745,
    0x441f5f37,0x745b9e27,0x362e8b72,0x6cdc4fef,0x27f7ec1d,0x8b73ccd5,
    0x31e8b12e,0xf8f9f88d,0x443d47a0,0x44fefd87,0x7ec4fefd,0x17ff44fe,
    0x2a27f7ec,0xff70dffe,0x3fee3fff,0x4c7a1fff,0x3ffffee6,0x702eadc1,
    0xfff70bab,0x5d16e3ff,0xb8f53b2e,0x8af99745,0x25a8fc7b,0xf13c43fc,
    0x30fa97cc,0xb543ea5f,0x492a85d8,0x7c4bb16a,0xa97ccb71,0x364ba00f,
    0xd07ee5e2,0x8f10f395,0xb54bb16a,0x6c5aa5d8,0x8556d745,0x3a0bb16a,
    0x2188f4c1,0x2e8311e9,0x188f4cd9,0xd05fffe8,0x1e98bfff,0xfa97cc31,
    0x4d71df10,0x4c1f52f9,0x46641dff,0x9fc1e23d,0x17ffd45b,0xe88bffea,
    0x6c43feff,0x3bffa22d,0x077faa3f,0x3445fff5,0x88ffbfee,0xfb0ff88f,
    0xf9887ffb,0xfdffd109,0x3fbffa27,0x7fdffd13,0x8974cd74,0x543feffe,
    0xeffeb82e,0x83bffae0,0x2e3feffb,0x3ea0effe,0x7d41f999,0x75c1f999,
    0x3fea0eff,0x37fbea2f,0x217ffd41,0x223ccff9,0x40fcc4fe,0x0100dff9,
    0x20022008,0x00801100,0x00880804,0x01f51ffb,0x17fffa02,0x10044011,
    0xfffffb01,0x40000885,0x01100400,0xb4ff8808,0xda7fc4ff,0x8080107f,
    0x5008011c,0x81017959,0x0102fffb,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x01800000,0x4cc40544,0x4c1a8809,0x19980999,0xa80a8800,0x40001500,
    0x06202c01,0x88062018,0x000cc2aa,0xb7100e01,0xe980e017,0x01300a20,
    0x002a2688,0x08201300,0x9017b710,0xfb93fabf,0x77e47fef,0x1777642f,
    0x7c43bbea,0x3ff26eee,0xf53fb0de,0x31fefa8d,0x5ecc3fdd,0xff83c40e,
    0x07883ffe,0x3ff207ec,0x133665ff,0xfd1b33a2,0x5068ba80,0x2627620b,
    0x06016c0d,0x016cc0d7,0x5c0d3504,0x2dcc84ce,0xd88499d8,0x2f80d88b,
    0xfb8fc4d5,0x645a84c0,0x8a05f303,0x073af34c,0x25d1a63d,0xc9ae795b,
    0x10788570,0x441d119f,0xf8983ffd,0x1b623a60,0x87254041,0x08000378,
    0x91d791b0,0x46848008,0x8850aa08,0x70133644,0x40004103,0x848bbd9d,
    0x12dc5d6b,0x89d7101f,0x32e0ceec,0xf98f402b,0x98f41ce8,0xca6d6ec6,
    0x3ecb4f73,0x4155f751,0xcd8f60f8,0x3bfee4b8,0x26a92e0f,0x266fa9fd,
    0xef880ddd,0x2a7f63ef,0xd83fec6f,0x7fd92129,0x21d11f20,0x117711eb,
    0x266798bb,0xff70ec9d,0x07fd85ff,0x5ed60ffb,0x11b7a093,0x301fb57f,
    0xc9ba85fb,0x413b7f64,0x0e7f5c79,0x3ea364ba,0xff9f31ff,0x4ceb27a1,
    0x221defed,0x0fc7badf,0x07e44fcc,0xe8db13f3,0x54f44d31,0xf9a7c42e,
    0x4434c7a0,0x24691b07,0x20eec1e2,0x32dcecaa,0x4999d955,0x7d9550fa,
    0x85aa745b,0xac1e2078,0x3ee094ac,0x0fcec982,0x27881ea0,0x9901f15c,
    0xffd073a0,0x6b9fc7ff,0xe8e9f326,0xf883c43c,0x56e41cec,0x07c4973c,
    0x3d1bbfee,0xd19d11a6,0x47b07c43,0x0f10d31e,0x0aeb26ea,0x1cc7e0f1,
    0xd87d53d5,0x3ee1b18c,0x8bae36e1,0x0f10d31e,0x8cca83c4,0x00d702da,
    0x13d4303e,0x8ea96e25,0x3a03d079,0xf805741c,0x27542d72,0x7883731d,
    0x9f900f10,0x3f223a63,0x2e8b5100,0x83bae0d9,0x741f33f9,0x9f988d92,
    0x42dceb80,0x7dc09f98,0x67c424fe,0x545b1044,0x1e74421f,0xf311a65d,
    0x09f98813,0xb82dceb8,0x36600efe,0x3fffa25f,0x20effec2,0x06883ffd,
    0x403d073a,0xdf91fffa,0x4c113b87,0x6fec19b9,0x3ee1e201,0x76cc6fef,
    0x7f7fdc2f,0x7fc1d963,0x7fdc3eff,0xffff13fe,0x7fc4040f,0x01a887ff,
    0xcee817a6,0x74e98060,0x7c4ffaff,0x3fe27fff,0x980207ff,0x554402aa,
    0x20080102,0xdfe88000,0x4040060e,0x5437b200,0x2a2fffff,0x100c00aa,
    0x88055440,0x809ddf00,0x00002200,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x33100000,0x40330333,0x0c405301,0x10580662,0x3f6a0013,
    0x137f220c,0x6fec4022,0x86f7540d,0x23ed8dec,0x0620bec8,0x817bbae0,
    0xeb813009,0x80105d93,0x8813b200,0x00201100,0x3a21bb00,0x427776c5,
    0x40082202,0x0ff64100,0x3bf21ff6,0x320fe81f,0x2a03e07e,0x6757603f,
    0x327364c9,0xcf886b87,0x273a2fb9,0x2a5f52fa,0x9b673a1f,0x6d4401fc,
    0x3fff981d,0xe897ffea,0x7fd41d94,0x17ffdc2f,0xd50327aa,0x7fec1fff,
    0x3e67f60e,0x1af2fa26,0x30fee7f9,0x207035f5,0x21ffdffa,0xf82010f9,
    0x1f0f3501,0x81fd516e,0xffff8878,0x23301e47,0x0e2f9aa1,0xa85c5b80,
    0x227884c5,0x743d1667,0x825c0099,0x7339b03c,0x260faf98,0x3e21f51f,
    0x12e0fb89,0x441f12e8,0x98f43da8,0x21fe7646,0x105df6eb,0x3ea6000f,
    0x201146bb,0x3c40d7a0,0xfaf89360,0x01f03c40,0x201ff2f2,0x37faa2fd,
    0x1e43fec1,0x42662790,0x43c9e278,0x0bfffa4c,0x7ffc25c1,0x17fe4c6f,
    0x5a833f62,0xffffb974,0x83fff71f,0x3bf60469,0x4698f44f,0xecb8973d,
    0x47882cdd,0x21eeeeea,0x07fffefd,0xdeeb8402,0xdb03c40f,0x440fae41,
    0x6e403e07,0x0740c83f,0x3c43dcc2,0x2e9902dc,0x3c4f14fe,0x4fa2e8b5,
    0x04b96a5a,0x3d43607b,0xf9827ea2,0x27e21f51,0x807cc298,0x8b546a2e,
    0x46b9744d,0x65c3eaec,0x7882cafb,0x10d55544,0x8515f31f,0x9cc84021,
    0xd887884f,0x3fbbe20e,0x23f03c43,0x303bf219,0x2a3f300b,0x7cc3c40f,
    0x5f31c88a,0xb9fc5d11,0x23dc5745,0x4754d31e,0x207b03d8,0x64c3effe,
    0x7ffd40bf,0x077ff5c2,0x541711f7,0xfd10dffe,0x7fdc5fdf,0xbdbf13fe,
    0xd8a8cb8f,0x4047cc43,0xffdff900,0x10087ccb,0x883fffa6,0x3dd109f9,
    0x17dd5413,0xf7013f31,0x765ec5ff,0x41f30721,0x442effe8,0x7f5409f9,
    0x3ffee0df,0x037fe60e,0x2e83bfb3,0x27fec4d5,0x1101bd88,0x407ffe60,
    0x7fcc0400,0x20080eff,0x04022008,0xfb4ff882,0x85fffe8f,0x41010205,
    0x40999999,0x2dfffd00,0x446ffffa,0xffff15ff,0x2fee040f,0x02013ff8,
    0xffff8808,0x00880107,0xff901002,0xf8020ffe,0x00005fff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x80000000,0x3ae4eeed,0x4fae5d93,
    0x6d3b62ec,0x64fb625e,0x0bbb625e,0x23ddddd5,0x71dd8dd9,0x32017bdd,
    0x3625eeee,0x775c1cee,0xd88ed83d,0x83bdd53e,0x72ed9deb,0x75cddddd,
    0x220a03de,0x26150002,0x6c4eeeed,0x1a8c00ee,0x2017ddd7,0x80810110,
    0x0a810088,0xe8008431,0x4fa24eab,0x369d10dd,0x2627720e,0xf987dc3d,
    0x70567e42,0x225d5f5b,0x3e61d73f,0xdd305dab,0xbaec8d77,0x3aabe61f,
    0x1faafd45,0x7f305f71,0x2fe61bd1,0x2abe67aa,0xe987884e,0x1dd3001d,
    0x172ab722,0x3ee09fd3,0x57f31fff,0xfefff8b9,0x7fdbfa0f,0x11bfffa5,
    0x53f9eb8f,0x7cc5ffdf,0xf30d71b0,0xfcf881f5,0x6cfd6dc0,0x50d51f82,
    0x2ee3fb9d,0x98f45b78,0x50798f46,0x5a8957d9,0x07c4f0f2,0xf11e5df1,
    0x74275740,0x89e249b9,0xf703c40f,0x0ff62019,0x10a2e32e,0x53f30f5f,
    0x7a8f43ff,0x1e4fc6dc,0x2762dcba,0x33f361fb,0x27d0ff24,0x1f31e25a,
    0x7dc0ff20,0xebfcea82,0x507b4c81,0x05e21e4b,0xdd1bfffa,0x3a7207fd,
    0xfcbea84f,0x0f53ffe1,0x88f1f3f1,0x207ffa07,0x23c42ffe,0xddfdd51e,
    0xc87fb103,0xbff700df,0x2e1756e0,0x3a2d9f9c,0x7a5c5fff,0x03f6a879,
    0xdfe983f5,0x741dbf11,0x3e268d31,0x220f1092,0x7fcc0edf,0x9f880feb,
    0xebaea80f,0x9ae83c41,0x0fddf46b,0x40acfff8,0x7c41ccfa,0xb97887a0,
    0xe8ea788f,0x65740faa,0x1e8f10aa,0x1055f551,0xfc8819f9,0x05adb80c,
    0xf98bfffd,0x2ba0faaf,0x7d6e2ea9,0x85de83c8,0x3e248afa,0xd264f66c,
    0x67411a63,0x40f98798,0xf88bb4e8,0x27ec0ff6,0x981bcfa8,0x8d51e80f,
    0xd981f52e,0x2a0f8ae8,0x931f100e,0x7f88f88d,0xd26447cc,0x8ae83325,
    0x931f11e8,0x3ee0f10d,0x1fecc00d,0x47d4036e,0x3fe61f98,0x4c5742ff,
    0x33e7fe3d,0xf81fa87c,0x1ca27fff,0x2febfdc0,0x47ffff88,0x3f62fffb,
    0x93f89fd5,0x440fd40f,0xffb83fff,0x3e3ff22f,0x323ff93f,0x3ffbfe27,
    0x7fff10ff,0x81bfff90,0x7dcf57fd,0xff94ffff,0x3ff2bf13,0xfff91fff,
    0x36a1a01b,0x98f54001,0x7fc43fff,0x095cffb4,0x0dffffc8,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x01020000,0x88010221,0x05440c0a,0x0620b94c,
    0x40dce60c,0x41510dc1,0x3ba23f6a,0xff72eeee,0x054c7fff,0x302a1866,
    0x30420150,0x1bbbbbbb,0x37777766,0x09dddb0d,0x00000000,0x00000000,
    0x2fe80000,0x7e7fcbf9,0x3fedf52f,0x5de96761,0x23662cdc,0x7dc2dc4c,
    0x216c65c2,0x3661f10e,0x83ab30da,0x12eaaaa9,0x5c133333,0x1f996a5c,
    0xe83e63b1,0x6d667aee,0x55555510,0x2eeee215,0x33330bbb,0x00000003,
    0x00000000,0x98000000,0x7c0f8f9e,0x33ea089e,0x2933b82f,0x1f32ec0d,
    0x7f3160b9,0x1f8ce81f,0x3a92a3d5,0x402d2237,0xbbbbb72d,0x8096f665,
    0x72882080,0x0000005d,0x00000000,0x00000000,0x00000000,0x3e1f7f7e,
    0xb113f601,0x26276c37,0x1ec6dc69,0xd72e83a6,0x70174664,0x0842db81,
    0x55531c80,0x37722155,0x00000001,0x00000000,0x00000000,0x00000000,
    0xbfd80000,0x404fc45f,0x2a24faec,0x05d4042a,0x2aa0b94c,0x54a21022,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xff98fad9,0x7dbf23ff,0x0000003f,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__courier_bold_13_latin1_x[224]={ 0,2,1,0,0,0,1,2,3,1,0,0,2,1,
2,0,0,0,0,0,0,0,1,0,0,1,2,2,-1,0,0,1,1,-1,0,0,0,0,0,0,0,0,0,0,
0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,2,0,1,0,-1,2,0,-1,0,0,0,0,0,0,0,
0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,1,2,1,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,0,0,0,
2,0,1,-1,1,0,-1,1,-1,-1,1,0,1,1,2,0,0,2,2,1,1,0,0,-1,0,0,-1,-1,-1,-1,
-1,-1,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,
 };
static signed short stb__courier_bold_13_latin1_y[224]={ 9,1,2,1,1,1,2,1,1,1,1,2,7,5,
7,0,1,1,1,1,1,1,1,1,1,1,3,3,2,4,2,2,1,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,1,1,11,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,2,3,3,3,3,3,3,1,1,1,4,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,4,1,2,2,2,
1,1,1,2,1,4,5,5,2,0,0,0,1,1,1,3,1,4,8,1,1,4,1,1,1,4,-1,-1,-1,0,
0,-1,2,2,-1,-1,-1,0,-1,-1,-1,0,2,0,-1,-1,-1,0,0,3,1,-1,-1,-1,0,-1,2,1,1,1,
1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,1,1,1,1,1,1,1,
 };
static unsigned short stb__courier_bold_13_latin1_w[224]={ 0,3,5,7,6,7,6,3,3,3,6,7,3,5,
3,6,6,6,6,7,6,7,6,6,6,6,3,3,8,7,8,5,5,9,7,7,7,7,7,7,7,6,8,7,
7,9,8,7,7,7,8,7,7,7,9,9,7,7,7,4,6,4,6,9,3,7,8,7,8,7,7,7,7,7,
6,7,7,9,7,7,8,8,7,7,7,7,7,8,7,7,6,4,3,4,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,3,6,7,7,7,
3,7,5,8,5,7,8,5,8,9,5,7,4,5,3,7,7,3,3,4,5,7,7,9,7,6,9,9,9,9,
9,9,9,7,7,7,7,7,6,6,6,6,8,8,7,7,7,7,7,5,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,9,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,7,
 };
static unsigned short stb__courier_bold_13_latin1_h[224]={ 0,9,4,10,10,9,8,5,10,10,6,7,4,2,
3,11,9,8,8,9,8,9,9,9,9,9,7,8,7,4,7,8,9,7,7,8,7,7,7,8,7,7,8,7,
7,7,7,8,7,9,7,8,7,8,7,7,7,7,7,10,11,10,5,2,3,7,9,7,9,7,8,9,8,8,
11,8,8,6,6,7,9,9,6,7,8,7,6,6,6,9,6,10,10,10,3,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,8,9,7,7,7,
10,9,3,8,4,5,4,2,8,2,5,9,5,5,3,9,9,3,4,5,4,5,8,8,8,8,10,10,10,9,
9,10,7,10,10,10,10,9,10,10,10,9,7,9,11,11,11,10,10,6,9,11,11,11,10,10,7,9,9,9,
9,9,9,9,7,9,9,9,9,9,8,8,8,8,9,8,9,9,9,9,9,7,7,9,9,9,9,11,11,11,
 };
static unsigned short stb__courier_bold_13_latin1_s[224]={ 255,73,85,95,188,41,9,252,164,238,231,
146,75,164,118,40,249,16,23,18,30,26,34,41,64,71,251,61,163,100,154,
65,78,180,198,87,138,130,172,95,61,226,127,122,114,216,105,111,88,241,69,
71,53,103,35,25,17,9,1,195,33,141,56,154,122,192,141,184,108,168,136,
117,119,79,26,53,37,206,244,160,92,9,10,144,45,200,216,1,18,1,224,
242,128,132,130,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,255,208,101,
176,208,152,137,133,138,166,108,43,91,164,244,144,31,84,26,37,114,56,48,
126,71,51,79,63,190,198,212,183,178,118,146,199,189,168,78,110,216,200,208,
133,224,231,103,102,96,85,63,55,79,247,156,238,225,87,71,47,9,1,45,
94,33,109,117,49,125,141,241,149,157,165,181,209,158,175,228,236,57,220,233,
17,25,217,65,233,190,77,173,125,150,18,9,1, };
static unsigned short stb__courier_bold_13_latin1_t[224]={ 1,13,51,1,1,13,34,43,1,1,43,
43,51,51,51,1,13,34,34,24,34,24,24,24,24,24,34,34,43,51,43,
34,24,43,43,34,43,43,43,34,43,34,34,43,43,34,43,34,43,13,43,
34,43,34,43,43,43,43,43,1,1,1,51,51,51,34,24,34,24,34,34,
24,34,34,1,34,34,43,43,34,24,24,51,34,34,34,43,51,51,24,43,
1,1,1,51,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,1,24,24,
34,34,34,1,24,51,24,51,51,51,51,24,51,51,24,51,51,51,24,24,
51,51,51,51,51,24,24,24,24,1,1,1,13,13,1,43,1,1,1,1,
13,1,1,1,13,43,13,1,1,1,1,1,43,13,1,1,1,13,13,43,
13,13,13,13,13,13,13,34,13,13,13,13,13,24,24,24,24,13,24,13,
13,13,13,13,34,43,13,13,24,24,1,1,1, };
static unsigned short stb__courier_bold_13_latin1_a[224]={ 110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_13_latin1_BITMAP_HEIGHT or STB_FONT_courier_bold_13_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_13_latin1(stb_fontchar font[STB_FONT_courier_bold_13_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_13_latin1_BITMAP_HEIGHT][STB_FONT_courier_bold_13_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_13_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_13_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_13_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_13_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_13_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_13_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_13_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_13_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_13_latin1_s[i] + stb__courier_bold_13_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_13_latin1_t[i] + stb__courier_bold_13_latin1_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_13_latin1_x[i];
            font[i].y0 = stb__courier_bold_13_latin1_y[i];
            font[i].x1 = stb__courier_bold_13_latin1_x[i] + stb__courier_bold_13_latin1_w[i];
            font[i].y1 = stb__courier_bold_13_latin1_y[i] + stb__courier_bold_13_latin1_h[i];
            font[i].advance_int = (stb__courier_bold_13_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_13_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_13_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_13_latin1_s[i] + stb__courier_bold_13_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_13_latin1_t[i] + stb__courier_bold_13_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_13_latin1_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_13_latin1_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_13_latin1_x[i] + stb__courier_bold_13_latin1_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_13_latin1_y[i] + stb__courier_bold_13_latin1_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_13_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_13_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_13_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_13_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_13_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_13_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_13_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_13_latin1_LINE_SPACING
#endif

