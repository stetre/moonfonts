// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_20_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_20_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_20_usascii_BITMAP_WIDTH         256
#define STB_FONT_times_bold_20_usascii_BITMAP_HEIGHT         60
#define STB_FONT_times_bold_20_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_times_bold_20_usascii_FIRST_CHAR            32
#define STB_FONT_times_bold_20_usascii_NUM_CHARS             95

#define STB_FONT_times_bold_20_usascii_LINE_SPACING          13

static unsigned int stb__times_bold_20_usascii_pixels[]={
    0x40220100,0x80080008,0x00800008,0xf10ffb88,0x0002017f,0x00804400,
    0x0c110010,0x00044008,0x08100002,0x00419880,0x00822010,0x01804002,
    0x07ae03a8,0x00ce8879,0x103fd057,0x03bd79db,0x2eb32e60,0x887f403a,
    0x59d7106f,0x333b6201,0x0ff880de,0x2033b6b2,0x3a02ecdc,0x5edc1f12,
    0x2005b00d,0x1002eecb,0xb7bbbfb7,0x76e77640,0x2ee203bc,0x76ded40a,
    0xcdbcb83b,0x42dbda80,0x205b802d,0xbd0f20fc,0x7fc416c0,0xd107fd42,
    0x00bc807f,0x887f4071,0x32b6b86f,0x740ffa87,0xb97fd43f,0x5f90ffe6,
    0x987c07fa,0x13e2fe66,0xf3d4016e,0x89fd100f,0x2fe987d8,0xf981fe44,
    0x7441f503,0x4f897dc3,0x20fc9fc4,0x209f004b,0xf98f22fc,0x14c0d905,
    0x3e60ffe2,0x1007b01f,0x7c43fa09,0x234b5f86,0xffa83ff8,0x7ec7fe61,
    0x7fc4dfb1,0x4d30df90,0x3e2fee4b,0xe8007c47,0xe880db0f,0xe88f105f,
    0x260fa05f,0x2e1f604f,0x1ff17fc3,0x25fa97ec,0x03f70078,0xf11e43fb,
    0x2607f30d,0x0bff6099,0x41ec37fc,0x0150989a,0x11be21fd,0x360cb7ff,
    0x6ff882ff,0xb1cc3fe2,0xb87fccbf,0x5d9530ff,0x4ff23bb5,0xf0016c7f,
    0xb805d17f,0xf90e02ff,0x261cc03f,0x37fe00ff,0x43bfe140,0xfa97fc6f,
    0x7d400f47,0x0f20fe84,0x205f90ff,0x3ffe2ffa,0x4c1ffd00,0x7f5df4c5,
    0x21fd0512,0xfffe86f8,0x201fff00,0x41ba0fff,0x3fe61ef8,0x3ae3ff51,
    0x33efeeef,0x2dc9f17f,0x433ffa00,0x7ff41998,0x03ffe000,0x177bf900,
    0x409fffb0,0x21ebfffc,0x1ff52ff8,0x3fcc025c,0xdd0f23ec,0x3e203ff0,
    0x40fff32f,0x88ee2ffe,0x838ff56f,0x30df10fe,0xf985ffff,0x87ffa07f,
    0xd01d704c,0xd03fea7f,0x7b703e25,0x8003a219,0x3e64ffe9,0x01ffe22f,
    0x8007ff88,0x43ffbdfe,0x01efffe8,0xf987fffb,0x443ff52f,0x40ff8806,
    0xf98f22f8,0x880ffc41,0x0fff32ff,0x43b17fec,0x38bf72fd,0x0df10fe8,
    0x98ffff62,0x3ffa07ff,0x806c0ee2,0x87fcbffb,0x2040d30f,0x206eea2d,
    0x745ffd5c,0x003ffcc2,0x8800fff1,0x10ff72ff,0x507ffff9,0x7cc5fffd,
    0xe83ff52f,0x40ffc401,0x36a793c8,0x100ff980,0x03ffc5ff,0xf13c1ffd,
    0x188ff61f,0x0df10fe8,0x7fc7ffe8,0x983ffe07,0xbb880501,0x33f6a5fd,
    0x5c02cedc,0x83ee7ee5,0x1fff12fc,0x03ffe095,0x540fff80,0xff32effe,
    0x2087fe65,0x7e47ffd9,0x3e27ffa9,0xc81ff52f,0x40ffc403,0x6dc790cc,
    0x8807fc40,0x03ff62ff,0x5cb137fc,0x141ff36f,0x0df10fe8,0xb17fcec1,
    0xdff101ff,0x3fe00000,0x3b33baa1,0x83a202cd,0x3e3fb8fe,0x17bfea3f,
    0x2001ffd8,0xffb81ffd,0x7c4ffe23,0x3fee122f,0x7fdcff11,0x3fd4bfe1,
    0x1fe6034c,0x7c3c83ee,0xf101ff85,0x41ffcc5f,0xf9342ffa,0x0389bf69,
    0x11be21fd,0x260fcac7,0x2ffa83ff,0x801cc154,0x3a3c82fb,0x7fc2d801,
    0xdff15fa8,0x0877fec1,0x8502ffcc,0xffa84ff9,0xff89ff43,0x99ba03e0,
    0xd83fe27f,0x3e0bf52f,0x3a1bea00,0x21fa1e47,0x5ff102fe,0x3a20efa8,
    0xff90d83f,0x44e2bf5b,0x6f887f40,0x0bb587c4,0x7f441df5,0xf10ffcc3,
    0x02fb807f,0x7003e23d,0x5f71f90b,0x5cd77fec,0x984cffff,0xa83c83ff,
    0x1ffd41ff,0x227cdbe6,0x7ec3f85f,0x3f989f10,0x80f203f9,0x21fd82fb,
    0x7d43fc3c,0x305ff103,0x05bf99fb,0xd86f4cae,0x3fa0e2be,0x9fb0df10,
    0x3660199d,0x881debcf,0x80ff40ff,0x43e00bba,0x40744069,0x6445dae9,
    0xff92efff,0x3fb2601d,0x36201ddc,0x0ceebbdf,0xe85dcea8,0x983cbcec,
    0xa80bcadc,0x16a02ebe,0x45f906d8,0x7417e63c,0x880bfe06,0x00d806ff,
    0x43fa0660,0x0d3106f8,0x01001880,0x43000402,0x20154008,0x4404c01a,
    0x00062000,0x04002662,0x08004c10,0x40600300,0x43f700f8,0x4417e23c,
    0x0ffce21f,0x1013fea0,0x1055001b,0x03fe21ff,0x00000008,0x00000000,
    0x00000000,0x00000000,0x00000000,0x40762000,0x2e1e44e8,0x2a1b300f,
    0xb5006f8f,0x32207bff,0x31057102,0x00999833,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x07220180,0x802e60ae,0x00073321,
    0x2ee60026,0x00002bba,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x0c004000,0x3fee0020,0x15426624,
    0x02666a60,0x18004004,0x3ffea010,0x988100ff,0x10131099,0xfff70c55,
    0x7fffb31b,0x7dcff221,0x7f5c2dff,0x37fff933,0x74c77f22,0x8819805f,
    0x002dfffb,0x237ff540,0x3f21dfc8,0x2e3fffff,0xffecdeff,0x05dfd705,
    0x3af221a6,0x127f400e,0x1ffbbdfd,0xefe9de98,0x00f7f5c3,0xb83f500b,
    0xffffd84f,0x7d46d985,0xc83f30ef,0x6c4eebaf,0x07ff43ff,0x09ff7162,
    0x0dff10f2,0x80bf9036,0xffb01ff9,0xf100b003,0xe81b09ff,0x20ffffff,
    0x3ffe20dc,0xfffdea80,0x9fd83c80,0x27f400fc,0x2fec7ff6,0x227e4bfa,
    0x80fffffa,0x0ffc406c,0x55b117f2,0x7fecc355,0x1627fc86,0x227fc9f7,
    0x7fdc5ff9,0x3fe21543,0x1bfe0b07,0x202fe42c,0xff901ff9,0x802f9803,
    0x2243fffe,0x5daabcf8,0x81ffec24,0x3a0bfea3,0x200ffc41,0x644fe8a9,
    0xf99fee5f,0x9c4df71f,0x7ec3ffc8,0x3ffd009e,0x4e5c0a88,0x4437ec00,
    0xff8353ff,0x3fa13fa2,0x91bfe20f,0x530bff20,0x42c1bfe0,0x301535fc,
    0x00ffe403,0x2b201bf6,0x33121fff,0x7d4187d0,0x03fe006f,0xaffa88d3,
    0xfebfe880,0xf52fe44f,0xfc8ffc1f,0x45ff1024,0xc83cffea,0x26621ffb,
    0x0effff40,0xdfb06fd8,0x743ff112,0x24ffa84f,0x0911fffa,0x4091bfe2,
    0xf90b06ff,0x001ffb9d,0x2201ffc8,0xca401fff,0x30090fff,0x7ffc401f,
    0x703f5001,0x1dffd989,0x9ff13fd8,0x3fea5fc8,0x3ba33a60,0x903fe200,
    0x3e6ea0df,0x89bfa21f,0x82ffffff,0x7ff306fc,0x3a2ff987,0x6cfff04f,
    0x40374ffa,0x40711ffd,0xf90b06ff,0x2002fecd,0x2b201ffc,0xfb2405ff,
    0x1b2012bf,0x1009ff90,0x1e81bff9,0xff01ff98,0x3f227f45,0x2ee1fee5,
    0x84fa801b,0xf35886fc,0x446fc83f,0xc87ffeca,0x03ffa06f,0x04fe8ffe,
    0x3e735ff9,0xffa80b7f,0x37fc0194,0x2e5fc858,0xc80ae27f,0x3a9101ff,
    0xe89200ff,0x3e804cff,0x003ffe60,0xf127ffdc,0x2607fe60,0x913fa1ff,
    0x913f63ff,0x80ec800b,0xf30d86fc,0x406fc83f,0x37e41ff9,0x3f60bf50,
    0x2609ff15,0xff90cdff,0x3ffd0079,0xb06ff809,0x7fd4bf90,0x3205ff71,
    0x2a3701ff,0xf11204ff,0x0f980dff,0x020bffa0,0x12e6fe88,0x7c40ffcc,
    0xf913fa2f,0xfd0bfdbd,0x2607bdff,0xb8df901f,0x0dffdcce,0x3ee01bf2,
    0x3e037e40,0xd9dfd102,0x27ff409f,0x7001fff1,0xff801dff,0x4bf90b06,
    0x53fea7fa,0x01ff90c8,0x201fff16,0x407ffa84,0x17fee06b,0xd9bee024,
    0x203ff302,0x913fa3fe,0x7cc022bf,0xe81fffff,0xc8df9021,0x1fffffff,
    0x1a601bf2,0x00901bf2,0xa813fa11,0x02fec1ff,0xd805ff88,0xdf90b07f,
    0xd95c37dc,0x2a0ff95f,0x3ffdcccd,0x01fee090,0x3ffe207d,0x7c403b80,
    0x7fcc0f14,0x3eedf901,0x402fe45f,0x4fa999cd,0x22d5566c,0x55328ffb,
    0x6417ff75,0xc87be26f,0x6446fd81,0x7f400388,0x7d437c04,0x007f2002,
    0x0390bfea,0x40fe4df9,0x2fecbea5,0x86ff8858,0x981f6068,0x07ffb00f,
    0x31fdc5f7,0xff302d4d,0x2fffa203,0x1bf61dfe,0x1e885f10,0x17ffffee,
    0x7cc03bf6,0x3637ec1f,0xfb01cdff,0x00ccfa8f,0x32027f40,0x68800d02,
    0x33bfea00,0x799b902c,0x640b885d,0x4a80dfbc,0x6d47ffb0,0x5c0d01cf,
    0x99fff506,0x545ffddb,0x360ccffe,0x1bff9102,0xd9808440,0x6ecc02de,
    0x3fe60ccc,0x0004ffff,0x7fcc3ff3,0x2e60182f,0xbb11cfff,0xdeea8003,
    0x00080201,0x01880008,0x40002208,0x50ffee01,0x8005fffd,0x00002200,
    0x00080c40,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x3fff2600,0x7e4c3dee,
    0xfff503ff,0x3fff2639,0x3ff2601c,0x37fea0cf,0x33fff261,0xf9302dee,
    0xff7339ff,0x1ffa239f,0x3bfff260,0xf933ffee,0x5ffdddff,0x6efffecc,
    0x6ff980bc,0x3bbfff26,0x77fd41ce,0x2feeeffe,0xfa80ffd1,0x7f542eff,
    0x19fffd33,0x64c73faa,0x2001cfff,0x81980010,0x6ff818a8,0xffd09ff1,
    0x03ffb60d,0xff801ffe,0x3e03e887,0x813fe65f,0x0ffe87ff,0xff003fe4,
    0x7fc3d88f,0x3e2174c6,0x203bf25f,0x26ff86fd,0x43aa1ffd,0xb8b63ffa,
    0x7ffa807f,0xfff885b0,0x7ff826c2,0x6e5f2600,0x21ff9802,0xfe86d9dc,
    0xb903ff26,0xfec883ff,0x400dff07,0x00ec47fe,0x1ffd17fe,0x3fa1ffe0,
    0x2007fb87,0x7c3987fe,0x7c15426f,0x20ffec5f,0x26ff86fc,0xa8aa5ff9,
    0xfb8a63ff,0x87ffb007,0x4dff7058,0x01bfe059,0x5c433faa,0xff300cfe,
    0xe8597e23,0x90bfee6f,0xe8c8bff3,0x00dff07f,0x01b33ff4,0xffc8bff0,
    0xfd0fff01,0x4ccff70f,0x267fe809,0x926ff811,0x7d45ff81,0x7c37e44f,
    0x093fe66f,0xb821ffd4,0x2201537f,0xb00647ff,0xf80b19ff,0x5df9106f,
    0x82dfd980,0x23bfe219,0x3f66fe80,0x41ffd487,0x3fe0ffd4,0x55ffa006,
    0xd17fe005,0x43ffc0df,0x27fb87fe,0x7fe80bfb,0x8b7fc072,0x262ffc05,
    0x437e46ff,0x07ff26ff,0x2e03ffa8,0x00ffecff,0x00e67ff9,0x801bfff1,
    0x67ecc6ff,0x7f5c4001,0x0fffe403,0x77dc77f4,0x29ff5482,0x3e0ffd1a,
    0x3ffa006f,0xff001ffc,0x03ff931b,0x66667ffc,0x27fb87ff,0x2bffa01c,
    0x9fff01fc,0x85ff80bf,0x1bf20fff,0x13fb7ffe,0xb80ffea0,0x207fd1ff,
    0x0058fff8,0xf801dff5,0x05ff546f,0x027f5400,0x3a07ffe4,0x9202acff,
    0x3ff497ff,0x3a006ff8,0x00effcff,0x6ffdfff8,0x999fff80,0x7fb87fe9,
    0xaffe8059,0x5fff01fd,0x85ff80bb,0x1bf21fff,0x3faa7bfe,0x0ffea01d,
    0x13fa7fb8,0x001effb8,0xff013ffa,0x077f6a0d,0x705df910,0x1ffa8c47,
    0x248037f4,0x3fa3cffc,0x040dff07,0x2ffe5ffa,0xffdaffc0,0x743ffc03,
    0xfcffb87f,0x3b3ff405,0x4059bfe0,0x47ff85ff,0x26ff86fc,0x3ea06ff8,
    0xe9fee03f,0x03ffc04f,0x05fff930,0x2e2037fc,0x3f6a0bef,0x25ff501c,
    0xfd03f268,0xff89200d,0x7c1ffa0f,0xfe85306f,0xf013ffa7,0x07ffe2bf,
    0x7fe87ff8,0x2ffbffb8,0x01a9ffa0,0x8131cdff,0x2ffc45ff,0x1bfe1bf2,
    0x3ea03ffb,0xe9fee03f,0x03ffc04f,0x1dff5488,0xa801bfe0,0x8017d97d,
    0x7df10ff8,0x00dfd07d,0xfe89fb16,0x320dff07,0xff13ff41,0x52ffc05f,
    0x3ffc0dff,0xbfdc3ff4,0xffd00ffc,0x341bfe00,0x3ff22ffc,0x7fc37e41,
    0xa807ff46,0x9fee03ff,0x3ffc04fe,0x3ff62c40,0x000dff04,0x42000021,
    0x401ffe01,0x3fa0fcc5,0xa87ff80f,0x2a3ffc0f,0xdff02fff,0xff04ffc8,
    0xb81ffd0f,0x7c17fa7f,0x8fff007f,0x37fc46c8,0xdf905ff5,0x7fd4dff0,
    0x80ffee03,0x013fa7fb,0x2e880fff,0x7c17ffc4,0x0000007f,0x3fee6000,
    0x9f9301bf,0xfff73241,0x3fff2639,0x267fedce,0xf70cfffb,0x32619fff,
    0x3fa0bfff,0xfff730cf,0x9fff7337,0x6cfffa23,0xff730dff,0x3f26039f,
    0x5ffeceff,0x3f7fff26,0xffe980be,0xdbfff932,0x7f5405bd,0xffe882ef,
    0xa81effab,0xa82bfffb,0x3fea1cfe,0xfff933ff,0x00000037,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x84ccc400,0x88288098,0x23333199,0x81a98098,0x13310998,
    0x54c02540,0x2206a601,0x09989999,0x86a63331,0x8ccc40a9,0x233310a8,
    0x999980a9,0x10010099,0x70202040,0x3ffff217,0x2a27ffff,0xa8201102,
    0x3022220c,0x33333333,0x98000000,0x43f10eff,0x262e9cc8,0x29ff55ff,
    0x27ba21e8,0x9b7ec46d,0x016a04ff,0xe98bf5bb,0x3620efaa,0x20bf8aff,
    0xaffdbffd,0x7e41ffdc,0xfb14fe8f,0x4c1ffd9f,0x82ffc9ae,0x0be600fb,
    0xd37c53ee,0x453fe61f,0x99999999,0x3f60fec1,0xff89c2df,0x27ffff74,
    0xeeeeeee8,0x000000ee,0x8913fe40,0xfd8db1fb,0x5c49bfa6,0xfc8bf53f,
    0x5a813fa6,0x0ff4bee0,0x10ffa3fd,0xf70739ff,0x743ff63f,0x567fd43f,
    0x7cbfee2d,0x7fc4a63f,0x084ef886,0x5fd823f1,0x47fe2ff5,0x22226fe8,
    0xe8088888,0x3f2a2e64,0x4bfa2edf,0x002dddda,0x40000000,0xd8172ff8,
    0x7cc3f90f,0x98ffd89f,0xff98ff41,0x4fe9bf20,0x0fe816a0,0xfd1fc893,
    0x209ff709,0xd9bf27fb,0x80ffd44f,0x413fa7fb,0x9dc81ffc,0x4e4ff40f,
    0x7c4fee6e,0x29303fa6,0xfffffffc,0x2063887f,0x00080ba8,0x00000000,
    0x8896fd80,0x41ccccff,0xbff8bcfe,0xf98ffcc4,0xfe9bf21f,0x3b7332a4,
    0x3ff14ccc,0x09fdb500,0x3fdc17fa,0x227ecdf9,0xff700ffa,0x7fcc27f4,
    0x8bb0f984,0x21ccecc9,0x6c93a1f9,0x222221c8,0x00008888,0x00000000,
    0x26000000,0x7fc42bff,0xca7fdc02,0x8ffc44ef,0x9bee1ff9,0x3332a4fe,
    0xf14ccced,0x46ec405f,0x3ff704fe,0x37e4ff70,0x07fa89fb,0x84fe9fee,
    0x24d80ffe,0x6cf441f8,0x95164780,0x000000a8,0x00000000,0x40000000,
    0x8bfd06fe,0xf997fc40,0xf31fe81f,0x3fa7fb8d,0xfe816a04,0x7f4bf606,
    0x86fec884,0xd9bf27fb,0x703fd44f,0x2a27f4ff,0x07d4a2ff,0x1badd1b2,
    0x00c4130a,0x00000000,0x00000000,0x1fdc0000,0x0b9cffc8,0xb83747d8,
    0xfa89f53f,0x204ffa8f,0x33fee05a,0x7bff11b9,0xa8d819ff,0x87fdc3ff,
    0x717fa6fc,0xd3fdc0ff,0x737fc49f,0x2a0c0227,0x00000531,0x00000000,
    0x00000000,0x00f80000,0x5407bff6,0x7d901dc4,0x2bffa09d,0x0b500efe,
    0x642effc8,0x31efb8cf,0x5fff53fb,0x3a6fffa2,0x1fffaaff,0xd107ffd1,
    0x3dff57ff,0x3fb77ff2,0x00000002,0x00000000,0x00000000,0x08000000,
    0x80800880,0x00801800,0x04402540,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__times_bold_20_usascii_x[95]={ 0,1,1,0,0,1,0,1,0,0,1,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0, };
static signed short stb__times_bold_20_usascii_y[95]={ 16,3,3,3,3,3,3,3,3,3,3,5,13,10,
13,3,3,3,3,3,3,4,3,4,3,3,7,7,5,8,5,3,3,3,4,3,4,4,4,3,4,4,4,4,
4,4,4,3,4,3,4,3,4,4,4,4,4,4,4,4,3,4,3,18,3,7,4,7,4,7,3,7,4,3,
3,4,4,7,7,7,7,7,7,7,4,7,7,7,7,7,7,3,3,3,9, };
static unsigned short stb__times_bold_20_usascii_w[95]={ 0,4,8,9,9,16,15,3,6,6,8,10,4,6,
4,6,9,7,9,8,9,9,9,9,9,9,4,4,10,11,10,8,17,13,12,13,13,12,11,14,14,7,9,15,
12,17,13,14,11,14,14,10,12,13,13,18,13,13,12,5,6,5,9,11,5,9,10,8,10,8,8,9,10,5,
6,11,5,15,10,9,10,10,8,7,6,10,9,13,9,9,8,6,2,6,10, };
static unsigned short stb__times_bold_20_usascii_h[95]={ 0,14,7,14,15,14,14,7,17,17,8,10,7,3,
4,14,14,13,13,14,13,13,14,13,14,14,10,13,10,5,10,14,17,13,12,14,12,12,12,14,12,12,13,12,
12,12,13,14,12,17,12,14,12,13,13,13,12,12,12,16,14,16,8,2,4,10,13,10,13,10,13,13,12,13,
17,12,12,9,9,10,13,13,9,10,13,10,10,10,9,13,9,17,17,17,4, };
static unsigned short stb__times_bold_20_usascii_s[95]={ 253,109,163,133,84,143,160,159,25,1,150,
55,172,211,206,10,236,101,58,1,75,91,205,231,226,123,242,188,220,177,231,
114,54,203,147,176,127,114,102,190,75,212,193,44,31,13,217,94,1,39,60,
215,160,163,149,130,198,184,241,78,246,72,140,218,189,75,177,66,26,11,17,
48,173,85,32,90,141,95,120,34,37,119,111,247,68,44,1,20,85,109,131,
18,15,8,195, };
static unsigned short stb__times_bold_20_usascii_t[95]={ 1,1,47,1,1,1,1,47,1,1,47,
47,47,47,47,19,1,19,19,19,19,19,1,19,1,1,34,19,34,47,34,
1,1,19,34,1,34,34,34,1,34,34,19,34,34,34,19,1,34,1,34,
1,34,19,19,19,34,34,19,1,1,1,47,47,47,47,19,47,19,47,19,
19,34,19,1,34,34,47,47,47,19,19,47,34,19,47,47,47,47,19,47,
1,1,1,47, };
static unsigned short stb__times_bold_20_usascii_a[95]={ 72,96,160,144,144,289,241,80,
96,96,144,165,72,96,72,80,144,144,144,144,144,144,144,144,
144,144,96,96,165,165,165,144,269,209,193,209,209,193,177,225,
225,112,144,225,193,273,209,225,177,225,209,161,193,209,209,289,
209,209,193,96,80,96,168,144,96,144,161,128,161,128,96,144,
161,80,96,161,80,241,161,144,161,161,128,112,96,161,144,209,
144,144,128,114,64,114,150, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_20_usascii_BITMAP_HEIGHT or STB_FONT_times_bold_20_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_20_usascii(stb_fontchar font[STB_FONT_times_bold_20_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_20_usascii_BITMAP_HEIGHT][STB_FONT_times_bold_20_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_20_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_20_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_20_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_20_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_20_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_20_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_20_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_20_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_20_usascii_s[i] + stb__times_bold_20_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_20_usascii_t[i] + stb__times_bold_20_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_20_usascii_x[i];
            font[i].y0 = stb__times_bold_20_usascii_y[i];
            font[i].x1 = stb__times_bold_20_usascii_x[i] + stb__times_bold_20_usascii_w[i];
            font[i].y1 = stb__times_bold_20_usascii_y[i] + stb__times_bold_20_usascii_h[i];
            font[i].advance_int = (stb__times_bold_20_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_20_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_20_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_20_usascii_s[i] + stb__times_bold_20_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_20_usascii_t[i] + stb__times_bold_20_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_20_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_20_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_20_usascii_x[i] + stb__times_bold_20_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_20_usascii_y[i] + stb__times_bold_20_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_bold_20_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_20_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_20_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_20_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_20_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_20_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_20_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_20_usascii_LINE_SPACING
#endif

