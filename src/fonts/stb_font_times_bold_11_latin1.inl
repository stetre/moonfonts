// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_11_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_11_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_11_latin1_BITMAP_WIDTH         256
#define STB_FONT_times_bold_11_latin1_BITMAP_HEIGHT         48
#define STB_FONT_times_bold_11_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_times_bold_11_latin1_FIRST_CHAR            32
#define STB_FONT_times_bold_11_latin1_NUM_CHARS            224

#define STB_FONT_times_bold_11_latin1_LINE_SPACING           7

static unsigned int stb__times_bold_11_latin1_pixels[]={
    0x00eb8e2e,0x15072126,0x8a214ca2,0x555502a9,0x53014540,0x26016203,
    0x7101ec05,0x02666031,0x015c024c,0x5d6540b6,0x00414540,0x53032203,
    0x2a025403,0x01642abb,0x806d4072,0x322c428a,0x71704981,0x017007cc,
    0x45325439,0x6ac4a62d,0x640a21c4,0x8136e048,0x5005401a,0x372a0175,
    0x40375500,0x2e01c00b,0x38ffc849,0x309048c8,0xb707a051,0x9b203809,
    0x7101c449,0x6441ce40,0x03e1a839,0x2632e02e,0x5c195f32,0x8722298c,
    0x22d8a65a,0xb9213a29,0x2f2628ba,0x7164c570,0x1009a885,0x26a20135,
    0x20135100,0x5e4c09a8,0x85e4c570,0x5c2f262b,0x40e3ffe2,0x03207201,
    0x0c00c0f4,0xc98c2f98,0x2f262bab,0x2af262ba,0x2eaf262b,0x87c33262,
    0xf98ea3ca,0xd95f3199,0x3e0ccfcc,0x362992a2,0x2f5c4a21,0x0d367653,
    0x7f40a97e,0x5d2e4152,0xb90ba5c8,0x2e972174,0x5f85d2e4,0x054bf02a,
    0x3f60a97e,0x203f038f,0x3d01f84b,0x81f803f0,0x397a00fb,0x25e872f4,
    0x5e872f43,0x02a6e83e,0x547cc59b,0x97c166c7,0x09114c48,0xa8b96cee,
    0x49d065d6,0x218fea82,0xf89ae2f8,0x22f89ae2,0x6b8be26b,0x746b8be2,
    0x8293a0a4,0x1db10a4e,0x2a09f507,0x1e827d46,0x9f5027d4,0x6f403f50,
    0x4c6f4098,0x204c6f40,0x2f4098de,0x1457d41f,0x71f317d4,0x2f82fa8f,
    0x8ae298ea,0x2355f308,0x137adc89,0x22a0a4e8,0xa87ee2ef,0x7d43f71f,
    0x8fd43f71,0x5c7ea1fb,0x4e87ea1f,0xe8293a0a,0x41c540a4,0x44b80fca,
    0x41e80fca,0xf9500fca,0xd043f881,0x3ddd03dd,0xdd03ddd0,0x07cbd03d,
    0x4c680fb6,0xf0683dbf,0x6c532d45,0x45f98a61,0x189e9eaa,0x26505274,
    0xfb8bea6f,0x87dc5f50,0x543ee2fa,0x7d43ee2f,0x24e83ee2,0x3a0a4e82,
    0x21c540a4,0x2c83faa9,0x3a0feaa6,0x20feaa61,0xe983faa9,0x277a0bab,
    0xe819de81,0x19de819d,0xf303e5e8,0x1f30a105,0x8ba20a10,0x22c8a64b,
    0x283a2e29,0x0e5d8130,0x91fc7a8a,0xf1723f8b,0xc8fe2e47,0xd8b91fc5,
    0x839760e5,0x1c540e5d,0x361f666e,0x21f666e0,0x1f666e1e,0xa81f666e,
    0x41515e82,0xaf41515e,0x5457a0a8,0x4c0f97a0,0x540cc82f,0x440cc80f,
    0x4c3220ed,0x36298932,0x99999849,0x41abf980,0x5b3120d9,0xbad981b7,
    0x6dd6cc0d,0x06dd6cc0,0x3036eb66,0x7f30357f,0x357f3035,0x24b8e2a0,
    0x497064fb,0x5c7624fb,0x24b93ee4,0x883504fb,0x3e26caef,0x3be26cae,
    0x2bbe26ca,0x6c3be26c,0x80067dc1,0x00000098,0x00040801,0x08000080,
    0x80080080,0x00800800,0x84008008,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x51036200,0x02044015,0x260ee09b,0x00f44099,
    0x2b853575,0x987703b8,0x2a1c5c1f,0xb81dc0ba,0x2ea0fcc3,0x2a61c5c2,
    0x2660dc41,0x05305541,0x07dc5755,0x40b9a832,0x10642899,0x8910cc17,
    0x0331220a,0x1dc01751,0x3531c0ec,0x22b906a0,0x21a8502e,0x50380baa,
    0x049c8375,0x81c1f4b9,0x89190703,0x323e238b,0x19070384,0x45c2ba89,
    0x5750d4c3,0xf106d453,0xfb5424b3,0x7c473710,0x3502e6a2,0x3221d835,
    0x1c4f0911,0x2b20913c,0x7117203b,0x075a2530,0x17c43326,0x344a88d9,
    0x40603326,0x30180cc9,0x531b665f,0x54c1a981,0x2a60d4c1,0x50b23e60,
    0x542ba857,0x2a15d42b,0xd715d42b,0x10eb8829,0x2e02eb3f,0x2054c3f6,
    0x4571931e,0x4043eceb,0x24f0193b,0x6ec03278,0x45dba80b,0x6b85c0a9,
    0x7dcbd05d,0xfae87ea1,0x20bd0d31,0x3e0bd01f,0xa989fb81,0x4cd1d11f,
    0x8f5a63d6,0x23a23d69,0xa8f23e66,0xf1b50f8d,0x543e36a1,0xf1b50f8d,
    0x443e36a1,0x17da63fd,0x20271357,0x1a3a21ac,0x22e47cc9,0x89b87094,
    0x546c4129,0x26362089,0x89fc8812,0x8976f31e,0x2d92468e,0x3ea5e83e,
    0x17cc3ee2,0x2a17a16e,0xf50bd04f,0x2e55f709,0x5c95d70f,0x9f5ae7d6,
    0x2bae7d6b,0x31ea3e64,0x07dcc1f7,0x7dcc1f73,0xb983ee60,0x5c97ec0f,
    0x3565209d,0x3ae159b5,0x91f30c4a,0x89f675cb,0x434d201e,0x2906b8b8,
    0x4f6da669,0xd72e5ae2,0x2d71c495,0x27c5e83e,0x2a17ccbb,0xfca85e85,
    0xfca85e80,0x4d927c40,0x25d6a87a,0x75aa5d6a,0x51f30f52,0x987c74cf,
    0xf1d30f8e,0x4c3e3a61,0xf1d30f8e,0x6b9e5461,0x27e1705d,0x29d9d10f,
    0x47c4507a,0xa8e2a65c,0x988b83b7,0x2e0e2486,0x23ee6988,0x2d708ff8,
    0x82e1ea5c,0x8bd03d6a,0x6c0cbac8,0x22f4342f,0x5e83faa9,0x641fd54c,
    0x76c45aad,0x39064e42,0x8864e419,0x36bea2ed,0x54bebea3,0xf5f52faf,
    0x54bebea5,0xf5f52faf,0x44332ea5,0x3238859d,0x4aa72a6a,0xd17c2ed8,
    0x0d4d4db9,0x129877d1,0x7b0d41f5,0x0fa894c1,0x3fd79fd1,0xd89bb362,
    0x16b6122e,0x80fc82f4,0x45e81902,0x5e87d99b,0x823eccdc,0x00000000,
    0x00000000,0x00280000,0x00080404,0x40010800,0x33104080,0x04080808,
    0x10002000,0x8b2e01df,0xef886008,0x127dc970,0xfb92e1df,0x00000004,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x88aea000,0x41ca8554,0x85441cca,0x2aa2ccc8,0x5d40d542,
    0x5c2b981a,0x2abba838,0xa880d5d4,0x881262ba,0x531971cb,0x51032b2a,
    0x642aa987,0x215c5930,0x059809a8,0x71595126,0x8380aa39,0x2f262ba9,
    0x51654570,0xfa83f887,0x59017930,0x0ae04e4c,0x98aea717,0x36e64d8f,
    0xb3066647,0xd32eeea8,0x0fc6d4b6,0x4c351337,0x0e2e1f8d,0x26724cd9,
    0xb12e41b9,0x4f9007cc,0x5f3199f9,0x31ead8d9,0x743b176f,0xd2e4152f,
    0x02e01705,0x4c7ee7f1,0xa4c482e0,0x4152fc48,0x3702a4f8,0x3a38b817,
    0x04b98704,0x35338b87,0x5426c7cc,0x3f107665,0x57d43608,0x54fed91d,
    0x4c38e9d8,0x986a60f8,0x8d8a8c2f,0x30be2398,0x640657cc,0x1f3166c7,
    0xb5c3f8f5,0x3faa045c,0x6b8be218,0xc98ae326,0xf8b6c2b8,0x9867dc54,
    0x3a04fea2,0x143f20a4,0x730ae326,0x730ebde8,0x260655cc,0x3d699cc3,
    0xd31363e6,0xf537fd4b,0xfd8b01f7,0x939f5ea5,0x1b8151b7,0x0fb8f5a6,
    0x70a8b370,0x64fcc03f,0x17d47c86,0x7e4f71f3,0x22e5ae3f,0x7177c543,
    0xf98fd43f,0x323e65c8,0x7e557d45,0x8903e618,0x52740efd,0x98317f10,
    0x23cc5c8f,0x89e69f4e,0x23cc4caf,0x4cfad779,0x7d40edcf,0xd6c9f441,
    0x33662a87,0x947f2a2f,0xb83056bd,0x407ea7d6,0x3f71468a,0x47cc3762,
    0x4687c87a,0x2643dbf9,0x1b176f62,0x3ea6f994,0x47cc3ee2,0x1723e65c,
    0x317e6b7a,0x7542481f,0x36052746,0x5c8f982e,0x3e33a3cc,0x647c4f32,
    0x55e63cc5,0x040aa5d6,0x5ea5501b,0x2970643d,0x75125c3e,0xa8307555,
    0x10fe25d6,0x8e26a6a2,0xf99b63f8,0x9b2b66a8,0x980f9850,0x45c819cd,
    0x7c7a8a2f,0xc8f89723,0x21723e25,0xf989d0fb,0xf10b8d40,0x7d40e5d8,
    0x45c8f881,0x30d6f479,0x22e47c4f,0x9393cc79,0x4ee40b21,0x5b0afae2,
    0x4ec4581b,0x7307510c,0x90f50755,0x55f4c193,0x0eaae60b,0x993a6fa6,
    0x3aee1cae,0x1f503323,0xb05fd970,0x0d997c4d,0x1b75b312,0x6746dce8,
    0x06e4886d,0x32e705d1,0x55fcc2aa,0xdce81601,0xdf98fd46,0xafa8fd40,
    0xf50fd46d,0x00000003,0x08000020,0x08000000,0x00040100,0x80004c40,
    0x08000099,0x00000000,0x00400810,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x30d44000,0x24a85579,0xcc9800c9,0xc99224bb,0x2388cb80,0x222223a8,
    0x82eef260,0x81c88bc9,0x542f260b,0x24072a0b,0x405e4c2e,0x95977501,
    0x8f2ab221,0xc98ea3ca,0x2abc980b,0x315d5e4c,0x21793179,0x913babc9,
    0x2264c377,0x2ef262ca,0x5dc5d40b,0x982aa228,0x2215d41a,0x2346cc1a,
    0x9e61b94e,0xfb9800f8,0x1f124490,0x74311f50,0x4e82022a,0x388fd8bd,
    0x72f40fb8,0x5c3f64c1,0x20bd0f47,0x26f7380e,0xd0bea331,0x817a054d,
    0x25e8b94f,0xe89f2f43,0x2f8ce8e5,0x41fc8bf2,0x8f98f94e,0x8c65c56c,
    0x236a3d69,0xb8d1b30f,0x4fe69d05,0x0e63e279,0x20a8faa8,0x032be239,
    0x227cc55f,0x2ed3a080,0x7c40b7e2,0x301c6f40,0x7407b98f,0x2e04fa85,
    0x50bf1087,0x813a0a5f,0xaf45f34f,0x89f2f409,0xfa74135e,0x7d4d7aa4,
    0x40faa741,0x7cc3fabe,0x731f56e5,0x7d416e1f,0x7c56fd40,0x547c4f35,
    0x99f73700,0x32be2798,0x07e16e44,0x76774101,0xf102fa80,0x204eee81,
    0x51eaa23a,0x7e542f41,0x7e40f700,0x3a05db00,0x24f93e04,0xbee81dee,
    0x1e7744fb,0xba836f7a,0x741f9a8f,0xb7b83ead,0xb52e9889,0x87c74cba,
    0x2ed880fa,0xf34f8a74,0xa8826fc4,0x3cc28fb9,0x5d4b91f1,0x0107e2bf,
    0x986da741,0x40f880fd,0x8902fbde,0x7f11fcbb,0x3ea662f4,0x3e60f703,
    0x205f3023,0x229f044e,0x20637a4f,0x1bd13e5e,0xf1504e87,0xce83f33b,
    0x554881fc,0x2720cab8,0x44bebaa4,0x9d0902ed,0xf13cc7ea,0x7d4505f5,
    0xf89e6308,0x2feea5c8,0x410107e2,0x4cc1f74e,0x41f885f8,0xac81fb5e,
    0x43fb7519,0x11517a18,0x741ee0db,0x05f10a26,0x53e0993a,0x5457a1fa,
    0x744f97a0,0x2504e815,0x4e83f36c,0x000000dd,0xf3122000,0x8fd45b7d,
    0x321fcafa,0x3b57f913,0x6d7d47ea,0x7f11fdc6,0x30888888,0x754595df,
    0x3fa89f90,0x3fe63be2,0xa83fff51,0x21df10c7,0x9113ee4a,0xbacfb85f,
    0x2067dc1e,0x266baef9,0x3e21dbef,0x3be26cae,0xdf10df98,0x4c0ef881,
    0x47f7288c,0x04f88df9,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x30000000,0x54545717,
    0x45117528,0x555cc0a9,0xaa882e0a,0x06600151,0x2e612017,0x393730a9,
    0x4c18c195,0x2aa60cab,0x1730820b,0x03831819,0x0c98f203,0x8d4640d4,
    0x442e21a9,0x21886624,0xa80a2048,0x82a1aaaa,0x23555550,0x4a9bb24a,
    0x77770e2a,0x84cccc87,0x36a5c8f9,0x133f32da,0x3eb33562,0xbc47a3aa,
    0x2039912e,0x900b83ca,0xaf88b3a0,0x2a63e8eb,0x932be248,0x3a8c8bd1,
    0x464177f1,0x8157531b,0x71398b82,0xd8f85c85,0x0e449533,0x4f734e4f,
    0x46a9aa79,0x1333330c,0x4c3372aa,0x88e3a999,0x87170e19,0x80008888,
    0x4325c8f8,0xeb873638,0x55fd4c4a,0x09d5d703,0x2076e3d5,0x971ccdcb,
    0x07d4399d,0x0fad71f1,0x23e2793d,0x6c07d45c,0x39707e24,0x9716544b,
    0x266e3999,0x2a8b82e2,0x8b791bac,0x449a9e3b,0x440512c2,0x3999970b,
    0x00051000,0x22000000,0x546a5c8f,0x87a87ea2,0x0a827d68,0x5c47b1d7,
    0x40b2e22c,0x3a60900b,0x75ae3e24,0x44363623,0x4fe25c8f,0x7c432ea0,
    0xb06c6c40,0x8ae010b3,0x224713db,0x109b8011,0x1022041b,0x00000000,
    0x00000000,0x5cdb9d00,0x222c3ccc,0x2efea2ed,0x6ccbe1cf,0x3002ee59,
    0x4cc0b839,0xf793099d,0x23f2be65,0xa8662a4e,0x2bf26daf,0x5f338e0d,
    0x20051330,0x0000000b,0x00000000,0x00000000,0x00000000,0x02000000,
    0x00000200,0x15555301,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_bold_11_latin1_x[224]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__times_bold_11_latin1_y[224]={ 8,1,1,1,1,1,1,1,1,1,1,2,6,5,
6,1,1,1,1,1,1,1,1,1,1,1,3,3,2,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,1,3,3,3,3,3,3,1,1,1,4,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,3,1,1,2,1,
1,1,1,1,1,3,3,5,1,0,1,2,1,1,1,3,1,3,7,1,1,3,1,1,1,3,-1,-1,-1,-1,
-1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,2,1,-1,-1,-1,-1,-1,1,1,1,1,
1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,1,1,1,1,1,1,1,
 };
static unsigned short stb__times_bold_11_latin1_w[224]={ 0,3,5,5,5,10,8,3,4,3,5,6,3,4,
3,3,5,5,5,5,5,5,5,5,5,5,3,3,6,6,6,5,10,8,7,7,7,7,6,8,8,4,5,8,
7,10,7,8,6,8,8,6,7,8,8,10,8,8,7,2,3,3,6,7,3,5,6,5,6,5,5,5,6,3,
4,6,3,9,6,5,6,6,5,4,4,6,5,8,5,5,5,4,2,4,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,3,5,5,5,5,
2,5,4,8,4,5,6,4,8,7,4,6,3,3,3,6,6,3,3,3,4,5,8,8,8,5,8,8,8,8,
8,8,11,7,7,7,7,7,4,4,4,4,7,7,8,8,8,8,8,5,8,8,8,8,8,8,6,6,5,5,
5,5,5,5,7,5,5,5,5,5,4,3,4,4,5,6,5,5,5,5,5,6,5,6,6,6,6,5,6,5,
 };
static unsigned short stb__times_bold_11_latin1_h[224]={ 0,8,4,8,8,8,8,4,9,9,5,6,4,2,
3,8,8,7,7,8,7,8,8,8,8,8,6,7,6,3,6,8,10,7,7,8,7,7,7,8,7,7,8,7,
7,7,8,8,7,9,7,8,7,8,8,8,7,7,7,9,8,9,4,2,2,6,8,6,8,6,7,8,7,7,
10,7,7,5,5,6,8,8,5,6,8,6,6,6,5,8,5,10,10,10,3,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,9,8,6,7,
10,10,2,8,4,5,3,2,8,1,4,6,4,4,2,8,10,3,3,4,4,5,8,8,8,8,9,9,9,9,
9,9,7,9,9,9,9,9,9,9,9,9,7,10,10,10,10,10,10,5,8,10,10,10,10,9,7,8,8,8,
8,8,8,8,6,7,8,8,8,8,7,7,7,7,8,7,8,8,8,8,8,5,6,8,8,8,8,10,10,10,
 };
static unsigned short stb__times_bold_11_latin1_s[224]={ 255,171,154,182,136,148,221,182,21,163,125,
58,178,223,190,243,247,85,100,14,106,20,26,32,38,44,34,112,51,198,44,
59,47,121,68,71,163,171,188,88,179,116,104,91,155,202,140,148,195,6,213,
191,130,198,207,171,76,146,138,243,187,176,147,237,219,242,97,248,230,20,55,
159,42,38,20,19,15,78,94,236,116,129,113,231,182,1,14,222,72,110,101,
25,30,33,205,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,255,136,15,
123,8,49,38,41,232,79,160,119,212,223,50,245,138,65,143,165,228,7,147,
186,194,169,173,88,212,203,194,188,189,31,45,180,154,167,26,198,206,214,222,
230,238,1,26,40,7,67,75,84,93,102,111,107,54,120,129,138,58,246,228,
93,100,106,112,118,124,130,26,1,63,237,165,87,246,235,223,251,142,239,69,
75,81,1,65,131,38,157,164,216,175,14,7,1, };
static unsigned short stb__times_bold_11_latin1_t[224]={ 1,12,39,12,12,12,12,39,12,1,39,
39,39,39,39,12,12,31,31,22,31,22,22,22,22,22,39,31,39,39,39,
22,1,31,31,22,31,31,31,22,31,31,22,31,31,31,22,22,31,12,31,
22,31,22,22,22,31,31,31,1,22,1,39,39,39,31,22,31,12,39,31,
12,31,31,1,31,31,39,39,31,22,22,39,31,22,39,39,31,39,22,39,
1,1,1,39,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,
31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,1,22,12,
22,39,31,1,1,39,22,39,39,39,39,22,39,39,39,39,39,39,22,1,
39,39,39,39,39,12,12,12,12,1,12,12,1,1,1,31,1,1,1,1,
1,1,12,12,12,31,1,1,1,1,1,1,39,12,1,1,1,1,1,22,
12,12,12,12,12,12,12,39,31,12,12,12,12,22,22,22,22,12,22,12,
12,12,22,22,39,39,22,22,22,12,1,1,1, };
static unsigned short stb__times_bold_11_latin1_a[224]={ 40,53,88,79,79,159,132,44,
53,53,79,91,40,53,40,44,79,79,79,79,79,79,79,79,
79,79,53,53,91,91,91,79,148,115,106,115,115,106,97,124,
124,62,79,124,106,150,115,124,97,124,115,88,106,115,115,159,
115,115,106,53,44,53,92,79,53,79,88,71,88,71,53,79,
88,44,53,88,44,132,88,79,88,88,71,62,53,88,79,115,
79,79,71,63,35,63,83,124,124,124,124,124,124,124,124,124,
124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,
124,124,124,124,124,124,124,124,40,53,79,79,79,79,35,79,
53,119,48,79,91,53,119,79,64,87,48,48,53,92,86,40,
53,48,52,79,119,119,119,79,115,115,115,115,115,115,159,115,
106,106,106,106,62,62,62,62,115,115,124,124,124,124,124,91,
124,115,115,115,115,115,97,88,79,79,79,79,79,79,115,71,
71,71,71,71,44,44,44,44,79,88,79,79,79,79,79,87,
79,88,88,88,88,79,88,79, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_11_latin1_BITMAP_HEIGHT or STB_FONT_times_bold_11_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_11_latin1(stb_fontchar font[STB_FONT_times_bold_11_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_11_latin1_BITMAP_HEIGHT][STB_FONT_times_bold_11_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_11_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_11_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_11_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_11_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_11_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_11_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_11_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_11_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_11_latin1_s[i] + stb__times_bold_11_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_11_latin1_t[i] + stb__times_bold_11_latin1_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_11_latin1_x[i];
            font[i].y0 = stb__times_bold_11_latin1_y[i];
            font[i].x1 = stb__times_bold_11_latin1_x[i] + stb__times_bold_11_latin1_w[i];
            font[i].y1 = stb__times_bold_11_latin1_y[i] + stb__times_bold_11_latin1_h[i];
            font[i].advance_int = (stb__times_bold_11_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_11_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_11_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_11_latin1_s[i] + stb__times_bold_11_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_11_latin1_t[i] + stb__times_bold_11_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_11_latin1_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_11_latin1_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_11_latin1_x[i] + stb__times_bold_11_latin1_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_11_latin1_y[i] + stb__times_bold_11_latin1_h[i] + 0.5f;
            font[i].advance = stb__times_bold_11_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_11_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_11_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_11_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_11_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_11_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_11_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_11_latin1_LINE_SPACING
#endif

