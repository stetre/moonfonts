// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_26_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_26_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_26_usascii_BITMAP_WIDTH         256
#define STB_FONT_times_26_usascii_BITMAP_HEIGHT         86
#define STB_FONT_times_26_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_26_usascii_FIRST_CHAR            32
#define STB_FONT_times_26_usascii_NUM_CHARS             95

#define STB_FONT_times_26_usascii_LINE_SPACING          17

static unsigned int stb__times_26_usascii_pixels[]={
    0x00026200,0x40280080,0x200c0000,0x01bdedb9,0xf9bfffe2,0x00907fff,
    0x40014180,0xb8018818,0x665c4ccc,0xcc99dc42,0x4deedc00,0x01802205,
    0x37b6e600,0x0c01001b,0x93009b00,0x17995579,0x17501c40,0x05cc1620,
    0x3f201910,0x2617f902,0x4dd003fc,0x37ee204f,0xfd71001c,0x0e4001d8,
    0xb1009f93,0xd713a0df,0x7ffff59f,0xfb119d30,0x885fb50f,0xf90006fc,
    0x00fee215,0x37e445f9,0x100ff980,0x0644017b,0x0f403b10,0x201dc2c4,
    0x07ee00da,0x3ee01fd1,0x13e6e805,0x7e4ed6dc,0x47f99805,0x2634004a,
    0xff1004fc,0x3bea03e0,0x443ff914,0x4c47f82f,0x37dcc2fe,0x9807f400,
    0x987ea05f,0xff5006fb,0x4003d301,0xb81a600c,0x00f85884,0xfc8001a6,
    0x201fec03,0x3e213e6e,0xd00354b1,0x24c00d0f,0xf90027d4,0xbf304a85,
    0x83e49fb0,0x105f907e,0x3fc800df,0x2001fe40,0xff3006f8,0x90001d30,
    0xfb826401,0x03ea2c40,0x98001f44,0x7fcc00ff,0x84f9ba00,0x02c4b0fc,
    0x003b0fd0,0x013e6072,0x80ec6f88,0x26fa84f9,0x320fd06f,0x006f882f,
    0xf3003fea,0x37c4003f,0x2e87f880,0x4c053000,0x441fc81f,0xfb80fe45,
    0x0bfb0000,0x7409ff10,0x4ff213e6,0x0fd00145,0x4c1a0095,0x97e4004f,
    0x213e6068,0x20bf16f9,0x205f907e,0x17f2006f,0x10027f40,0x237c00df,
    0x3997105b,0x37c048d9,0x716207ec,0x4017e05f,0x013fa1c9,0x4dd02ffc,
    0x5aff984f,0xd39b7100,0x12601a0f,0x2ddaa7cc,0x0165be20,0x2bf109f3,
    0x20fd07f8,0x44df02fc,0x3fa0cccc,0x30bfb004,0x916f8839,0x5f17a05b,
    0x45fc8ba0,0x3a07ec04,0x1fd45887,0x32201fd4,0x00ffe2ff,0x4dd03fec,
    0x0fffb04f,0x3fa27d30,0x1c803907,0xfff99f30,0x357ec09f,0x3ea13e60,
    0x1fa0bfe4,0x46f817e4,0x03ff82fb,0x7e44ffb0,0x6cf7c42f,0x24d82ffc,
    0x5c5d80fa,0xf900642f,0x45886b83,0x03fc80f9,0x3fe25f90,0x40ff9003,
    0xfc813e6e,0x87f100ef,0x809507f8,0x44bbe606,0xff301ffc,0xc85f9809,
    0xf117fa0f,0x7c0bf20f,0x3e203a66,0x0ff9003f,0x3ff885f9,0xc8f61be6,
    0x7ec0fc86,0x0fee02c0,0x5c5881f1,0x2005fb05,0x013fa2fc,0x4dd037ec,
    0x7ffd404f,0x7e80fc82,0x204981a0,0x04fd84f9,0xff3007f6,0x3e627c41,
    0x07ecbbff,0x55be05f9,0x013fe00d,0x17e437ec,0x21be1be2,0x7f31362c,
    0xb8090df0,0x221b885f,0x1fe80aa5,0x7ec5f700,0x40bfb005,0x36013e6e,
    0x83fc2ffd,0x6407207e,0x2e13e601,0x201aa06f,0x3fcceef9,0x3a9fff50,
    0x3e05f907,0x5fe806be,0xf709fd00,0x7e86f885,0xf90ba1b8,0x03987f30,
    0x23d037d4,0xff809958,0x5c5f7001,0x05ff006f,0xb009f374,0x06f89fee,
    0x682540fd,0x7cc27cc0,0x2600b206,0x2600334f,0x17e41fa0,0x403feef8,
    0x5ff006fc,0x6f885f70,0x360987e8,0x0ff42f41,0x0bf70072,0x932c4173,
    0x4007fa01,0x0bfe22fb,0x6e80df50,0xfd96013e,0x1fa0ff12,0x980930d0,
    0x105f984f,0x013e600d,0x7e41fa00,0x3ff1df02,0x2017f440,0x85f705fa,
    0x807e86f8,0xd713e23b,0xfb80498f,0x16207cc4,0x00bf20d5,0x1be617dc,
    0x6e803fd0,0x54b0e13e,0x3a07fe2f,0x0720e407,0x7f709f30,0x3002c844,
    0xfd00009f,0xb7c0bf20,0x3ea00efa,0xb807f406,0x7437c42f,0xf12cc087,
    0xb12f4dcb,0xd90ff200,0x81f98b10,0x5f7003fb,0x3f609f50,0x13e6e801,
    0xb1ee5876,0x401fd0bf,0x7cc0344a,0xff10fd84,0x2fd400bf,0x407fc000,
    0x26f882fc,0x2fd406fb,0xf700f6c4,0x7e86f885,0xfd1e37c4,0x327f63dd,
    0x0fd8120d,0x2a2c43f4,0x004f983f,0x3b6205f7,0x000cecbc,0x6ec27cdd,
    0xf10fa2b0,0x7ff913df,0x00953403,0x0fd41df3,0x5c002ffa,0x8000cffe,
    0x641dffc9,0x747f883f,0x676c405f,0xfc804edb,0x7f437c43,0x43b1fe20,
    0x2ee20ab8,0x09f00dc0,0x5c5881fb,0x200dd02f,0x7fcc02fb,0xf374004f,
    0x9dbfd509,0x3ffa6039,0x200cfeaf,0x2a00391c,0x001edcfe,0x00000000,
    0xb51f7fdc,0xffb139ff,0x0151005d,0x54fbfee0,0xfc99cffd,0xb50221df,
    0x502c4000,0x883f903f,0xf980fe45,0x801fb800,0x2003ffe8,0x98813e6e,
    0x0c33000d,0x00051880,0x00000131,0x00000000,0x00000000,0x64000000,
    0x00d88003,0x443dc136,0x79007d45,0x4001f700,0xdd002ffb,0x0024027c,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00790000,0x0b3006cc,
    0x742c4264,0x32007401,0x39d70006,0x7cdd3330,0x0000199d,0x00000000,
    0x00000000,0x00000000,0x00000000,0x37b50000,0xa802f660,0x101b100d,
    0xc880950b,0x016cbf20,0xc88aa200,0x33323ccc,0x0000004c,0x00000000,
    0x00000000,0x00000000,0x00000000,0x66e54400,0x14c00bdc,0x02c40550,
    0xd50a8035,0x000003bf,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x02cca800,
    0x43b80080,0x03dd982c,0x2e6004a8,0xda8001cd,0x6764c02d,0x33332601,
    0x41cca804,0xcccccccb,0x01999912,0x40e66654,0x2603ddc9,0xa83ccccc,
    0x2e6002cc,0x4388bded,0x913cccca,0xca859999,0x999974cc,0x33332059,
    0x416f5d42,0xffff31fa,0x3bf32203,0x81b07202,0x4407d1f9,0x27f5000e,
    0x372000f9,0xbf704e88,0x3fa03fff,0x3a605fff,0xffff880b,0x7d43ffff,
    0x06f4405f,0x05ea974c,0x3aa0ffec,0xfa803ee1,0x7ff5109c,0xd88bff30,
    0x89f101ff,0x2200fff9,0x443a23fd,0x3636c3fc,0x443a202f,0x781d00ff,
    0xd81b25d8,0x9b1be002,0xf983ea00,0xbfb12442,0x15555b50,0xeb807ee0,
    0x0fbaaaab,0x6c04ffa8,0x3fa87f03,0x0fa1bee0,0x027cc13a,0x17f609f1,
    0x7c407fe6,0xc807fc80,0x9fe225c5,0x027d44f9,0x1a0398d9,0x7dcbf0b3,
    0x26004a80,0x4401f45f,0x40c6e86f,0x000e87f9,0x00d807f5,0x3ffe60d7,
    0x3ea0b202,0xf500fe81,0x7c82f98b,0x4b804f98,0x3fa0ff50,0x3e209503,
    0x3a07401f,0xdf52fd87,0x1b604f98,0x21d45980,0x10bea5f8,0x27f9800d,
    0x3fb800f9,0x4f802fd8,0x7c400f54,0x0fa00805,0x80ffe6cc,0xf907c82c,
    0xf317ea05,0xff88bd0b,0x7fc09001,0x5b06fb82,0xb302fe40,0x1fd81f90,
    0x01fb83fe,0xb99501be,0x39bd999d,0xd81f92fc,0x4ffc4001,0x5f9002ea,
    0xe8809f90,0x027fff40,0x440003fd,0x3f6b300f,0xff82c80e,0xf504fb80,
    0x7549ff0b,0x00037d41,0xffb85fc8,0x7fcc0680,0x20205b00,0x233e60fe,
    0xff9904e9,0xb3310599,0x133d3335,0x4b8bb364,0x1bffb000,0x3a177fec,
    0x405fb81f,0x7ff6441d,0xab7cc0ef,0x1ae000bd,0x0bfd1598,0x703ff059,
    0x217ea09f,0x80dadff9,0x300004fd,0x87fdd0ff,0x84fe804a,0x0bea0078,
    0x5500b2b2,0xe80355df,0xabe88340,0x4001a21e,0x5f81ffd8,0xdf501ff0,
    0x01bfd510,0x3ee37fdc,0x03fea9be,0x32cc07d0,0xd82c89ff,0x503fc84f,
    0x3ffe60bf,0x4407ff00,0xd01aaaaa,0x37d7445f,0x1fea0076,0x84e8012e,
    0x06f8002d,0x40598d10,0x65c1d82a,0x3f6fea02,0x7c407c46,0x886fa80f,
    0x200effca,0x0bf63fe9,0x1f100ff1,0x3fea2cc0,0x3fe60b22,0x5407fa62,
    0xffdb105f,0x404ff883,0x2e02ffd8,0x3fe2ee5f,0x7f400d11,0x69800742,
    0xccccef98,0x401be00a,0x4001d449,0x26c66c3b,0x4ff997dc,0x80ff80ee,
    0x7f4404fa,0xfd2fcc02,0xb805fb03,0x7dc2cc06,0x3660591f,0x207fbcef,
    0x8ae885fa,0x2ffc1ffe,0x2203fdc0,0x3f61d0ff,0x7dc00954,0x0c801666,
    0xffffffb0,0x701be07f,0xdddddddd,0x8d1003dd,0x4c3f30fa,0x44ffe45f,
    0x5c0ff405,0x04fa803f,0x207fa6f8,0x01f405fb,0x47fec166,0xfb84402c,
    0x3a17ea05,0x3fa2fec4,0x806fa807,0x3ea59afe,0x7c4003b6,0x24005b1f,
    0x2a666190,0x880df07c,0x9e999ad9,0x40e80099,0xfc8fe27c,0x0ef7fc42,
    0x3f207f60,0x803f8802,0x2a0bf65c,0x003e204f,0x677f40b3,0x80bfa002,
    0x217cc5fa,0x3fee0fe8,0x4037d401,0x7fc2cdfb,0xdfc8006a,0x40a20068,
    0x6f82c03c,0x00681d00,0xf13ec1dc,0x7cc1ffcb,0x83fa805f,0x01f000fd,
    0x41fdc7d0,0x01ae01fa,0xfff88166,0x805f5002,0x40fdc3fa,0x02ff41fb,
    0x3e201bea,0x27fe40ff,0x1e7fcc00,0x9f101100,0x06f81540,0x002cc688,
    0x4c3f20b3,0x741bfa2f,0x3a14c5ff,0xa801fc45,0x7c46a806,0x1ec06c86,
    0x3e602cc0,0x83f9802f,0x885f50b8,0xfa86a83f,0x01bea03f,0x7fcc2fec,
    0x1ffb0001,0xdfd00800,0x20bd957b,0x449806f8,0x403a003a,0x541f72fa,
    0xbea8adff,0x85cbeffb,0x321721f9,0xfd87a61c,0x980eb88b,0x880be23f,
    0x807a800f,0x1fcc02fb,0x20b95fa8,0xd302d86d,0x01bee05f,0x06f817d4,
    0x0017ea00,0xd95101ff,0x7cc03bdf,0x1643b807,0x6ec02c80,0xffeb84d8,
    0x3ffea0df,0x9b9d301e,0xbddffb01,0x4efffa81,0x175e6d40,0xf9101ae0,
    0x82c805bf,0x2201bba8,0x3200cdff,0xc802cbcf,0xbfecbdfe,0x640f1000,
    0x01740003,0x0001ff10,0x2b7ffae0,0x00981300,0x19500388,0x04c01980,
    0x01300080,0x08800130,0x00003300,0x00026020,0x004c0013,0x0009a980,
    0x00044030,0x02200060,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x80000000,0x82ccccca,0x441cccca,
    0x048acdec,0x71bdeb98,0x33333221,0x2ccccccc,0x57999993,0xccc98013,
    0xb809abcc,0xb83ccccc,0x9951cccc,0x66440079,0x999930cc,0xcc980399,
    0x33263ccc,0x333204cc,0xcccccccc,0x79999911,0x33333261,0x33332e23,
    0x9999931c,0x66664459,0x9999930c,0x4c999999,0xcccccccc,0x3fe21ccc,
    0x07ba201e,0xfd5139f3,0x4567dc0b,0xf11ffdb8,0x59ff557b,0x7ec49f97,
    0x0cffcabf,0x2efff620,0xffa81ffd,0x03bee02f,0x5c007ffa,0x7ec40cff,
    0x7fec002f,0x202ff981,0xaaaabdf8,0xffc85ffa,0x203ffb03,0xfc884ffa,
    0x09f901ff,0x2aaabbf6,0xaffc87eb,0x43fbaaaa,0x84d805fd,0x705e885d,
    0x98fdc07f,0x24c1fe85,0xdfd11bee,0x7d46fb80,0x02ffa82f,0x7fdc03ae,
    0x03ffd005,0x2e001fea,0x801d906f,0x03fee058,0x7dc03fe6,0x900ffc06,
    0x80fa05ff,0x2a1a05fb,0xf912606f,0xf9879009,0xbf70b302,0x20a65b00,
    0x7d4381fe,0x200ffb86,0x05fd86fa,0x00f40dfb,0xa801ffb5,0xff300ffd,
    0x70df5000,0x2053001d,0xff102ff9,0x3e037d40,0x437ec01f,0x02fd404c,
    0x380df305,0x1e4027e4,0x445817ee,0x029800ff,0x2a040ff4,0x03ff886f,
    0x3fee1bea,0xb83ff880,0x27e65404,0x403fe7a0,0xfa8006f9,0x880075c6,
    0x4409fd00,0x01bea07f,0xfe8803ff,0x3ea01aa4,0x037cc005,0x32013f20,
    0x406ffcc3,0x1003fd41,0xa801fe80,0x00ffb86f,0x3ff21bea,0x441ff500,
    0x7ce5400e,0x3fed300f,0x000df300,0x0075cdf5,0x0077e400,0x37d40ff1,
    0x26007fe0,0x800e89ff,0x300a85fa,0x320260df,0xc83c804f,0x7e402fff,
    0x3fa00005,0xe86fa801,0x437d405f,0x2fec06fe,0x3695005b,0x3fe5b04f,
    0x000df300,0x003b2df5,0x007fe600,0x37d40ff1,0x64007fe0,0xf5001eef,
    0x3e601b0b,0x9f901b06,0x3f207900,0x9fd01eff,0x0ff40000,0xd98b7d40,
    0x26fa803f,0x4401ffc8,0x5005abff,0xd303fe69,0x6f9807fc,0xfcefa800,
    0xfe880001,0x207f8804,0xaaaaaefa,0x2001ffaa,0x3ea005fe,0x00fecccf,
    0xd9999ff3,0x009f901f,0x7ff4c079,0x01ffc44f,0x003fd000,0x1ffddff5,
    0x3b3fea00,0xf7000def,0x92a001df,0xff1e43fe,0x001be601,0x07ffbbea,
    0x00dfb000,0xffa81fe2,0xfccccccc,0x3fee001f,0x55df5002,0x3e601f75,
    0x0fba999f,0x3c804fc8,0x45fffb80,0x200004ff,0x6fa801fe,0x2a007fd1,
    0xfe80006f,0xfa92a003,0x01ff1e26,0x2a001be6,0x01ffe8ef,0x003ff500,
    0x6fa81fe2,0x9800ffc0,0xa800efce,0xf300b85f,0x3f202e0d,0x1002c804,
    0x37f45ffb,0x03fd0000,0x7fccdf50,0x006fa801,0x2003fd80,0x3c97f44a,
    0x6f9807fc,0xd16fa800,0xf88003ff,0x1fe2003f,0x7fc06fa8,0xfd0e8801,
    0x30bf5009,0x08837cc0,0x1c805fb8,0x49fb0054,0x200007fc,0x6fa801fe,
    0x7d4037dc,0x3fd80006,0xdf712a00,0x00ff81f1,0xa8100df3,0x07ffa26f,
    0x0405fd80,0x6fa81fe2,0x6c00ffc0,0x500bfe62,0x6f9800bf,0x4037d400,
    0xf501d40e,0x401ffc4b,0x00ff4028,0x27f437d4,0x0001bea0,0x4a800ff6,
    0xff84dff8,0x700df300,0x7f446fa8,0x0ffb801f,0x0ff10e20,0x3fe037d4,
    0x7e426401,0x017ea00f,0x4700df30,0x16e01fe8,0x43fb81aa,0x12201ffb,
    0x2a00bfe0,0x03ff886f,0x20001bea,0x12e003fd,0x3fe03fee,0xc80ff501,
    0x74437d41,0x3fe602ff,0x3e616402,0xf01bea07,0x8835c03f,0x1bee05fe,
    0xc80df500,0x22077cc2,0x0efa80eb,0xffa837c4,0x2006440a,0xfb803ff8,
    0x205ff507,0xe80007fb,0x21b2005f,0x2ff885f8,0x9883ff70,0x107fc87c,
    0x3fa07fff,0x507ee205,0x1ff201ff,0xf702ff88,0x81ffdc03,0x7d4007fc,
    0x74c1ee07,0x00ceecef,0xfd9dfb95,0x7fecc019,0x5c00bdde,0x981cfffe,
    0xc83dfffc,0xff933eff,0xb50007bf,0x4c03bfff,0x0e42dffc,0x17dffd71,
    0x3fffff26,0x264fffff,0x223dfffc,0x24effffc,0xfffffffb,0x3227ffff,
    0x930befff,0x5c47bfff,0xd71beffe,0xfd705bff,0x3f265dff,0x5cc03dff,
    0xfeeeffff,0x54c404ff,0x4d440800,0x004c4000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x2d4002c0,0x1b709900,0x40680120,0x59990000,0x36a26654,0x5c430000,
    0xca882acd,0x6e4c01bd,0x336e200b,0x2f76e201,0xc96665c0,0x332a4ccc,
    0x41999973,0x52e22ccb,0x6664c2da,0x00aabccc,0x202f6e20,0xbcccccc9,
    0xfa8000aa,0x0dfd5000,0x3fe1bea0,0x1a005982,0x80017d50,0x23fd45fb,
    0x75c003fe,0x0fe61d14,0x03fa67f1,0x1fe44edc,0x84fb9754,0x43df71e9,
    0x2fec5fd8,0x1ff90f64,0x77f547d0,0xfd886fea,0xefdcaacf,0x7fffe402,
    0xaefd883f,0x003feb99,0x988027f4,0x6fe8806f,0x2f440ba8,0xd7100d00,
    0x17e60039,0x001951fe,0x26419d91,0x641f90ee,0x740f983f,0x3fe17cc7,
    0xdf10ba21,0x2fc45f98,0x407fc0ec,0x353ef986,0x7d41bee0,0x263b102f,
    0x6fb80ffc,0x2600dfb0,0x37c007ff,0x8037d6c0,0x00ccefe9,0x37aa0034,
    0x7c2fcc02,0x2ed98007,0x5c283fb0,0x6ec1fd45,0x22fd9999,0x9064c0fd,
    0xe83fb01f,0xb107f40f,0x0750fee0,0x3ea00df1,0x20ffe206,0xa83fe80b,
    0x03ff306f,0x005fd590,0x7d2e037c,0x5df75006,0x00068015,0xf3017db3,
    0x5400ff0b,0x7fdc01de,0xfeb8800c,0xaaaadf84,0x4017e1aa,0xa87f707e,
    0xb93fe23f,0x0d8df102,0xf5006f88,0x40ffb80d,0xf50bf701,0x2027f40d,
    0x400df778,0x6f9a206f,0x2217e200,0x99e99999,0x91000999,0x42fcc19f,
    0x675c407f,0x3ffee000,0xf53b9103,0xf1009f09,0x20ff100d,0x937c46fa,
    0x3602cff3,0x3e20932f,0x00df5006,0x3e6005ff,0x3e06fa83,0xf8a5c02f,
    0x40df001f,0x8801be1e,0xcccca85f,0x3cccccfc,0x98ff2200,0x5407f85f,
    0xd88001de,0x51f444ff,0x100df09f,0x3ff001ff,0x3f90bf30,0x126bf2b1,
    0x4072bf30,0xdf5006f8,0x2009fd00,0x06fa81fa,0x41d00ff9,0x0df005fc,
    0x400df0f2,0x01a005f8,0x40bec980,0x007f85f8,0x85005dd5,0x51ba0ffa,
    0x203fd09f,0x8a20bfe3,0x83f983fc,0xbf32bcf9,0xb3fd0039,0xa8037c40,
    0x06fc806f,0x3fea09b0,0x0cfecbab,0x3fe62d40,0x5986f800,0x880886f8,
    0x001a005f,0xff00bb6a,0x20087f88,0x1b00bed9,0x8ff10fc8,0x3ffc84fa,
    0x81df9064,0x7dc2fd44,0xfe8dfd00,0x05df5006,0xfa8037c4,0x807fc806,
    0x2bbea069,0x00cfedba,0x01fec0ec,0x203a237c,0x217fc46f,0x01a005f8,
    0x800e75c4,0xffbb9bfe,0x8805fb1a,0x22740cec,0x64e7f44c,0x3e21aefd,
    0x444ecfff,0x82fccfff,0x80ba22fe,0x01fd43fb,0x7f880ff0,0xb00df500,
    0x403b00df,0x5ff906fa,0x3bbbbe60,0x6f806fee,0x777777e4,0xdff35eff,
    0x1a005f88,0x0017d910,0xff3fff98,0x800bf617,0x7dfb1dea,0xffe981b9,
    0xd882ff8a,0xfd105fff,0x6fec05df,0x83c402ec,0x8132000f,0x401dffda,
    0x5fe806fa,0x3ea01e40,0x641bf606,0xf00bfe02,0xeeeeeb8d,0x2225effe,
    0xd0037c46,0x80002a80,0x000c0609,0x02621398,0x98800810,0x20018800,
    0x0c060009,0x00002200,0xf980df50,0x2012e02f,0x3fea06fa,0x3ee03441,
    0xf0037c05,0x3fe0e60d,0x001400aa,0x00000000,0x00000000,0x00000000,
    0x00000000,0x01bea000,0x02540bfd,0x3ee06fa8,0x2202640f,0x01fe01ff,
    0x80c886f8,0x00002ffb,0x0f722971,0x2e2019b7,0x2e07b714,0x4ccccccc,
    0x2233332a,0x02201ccc,0x22e40480,0x47b16c40,0x88888888,0xdd308888,
    0x02f6e010,0x81bea028,0x09500efc,0x40df50e2,0x017cc6ff,0x7f8837fc,
    0x0531be00,0x2a000008,0xffcd9efe,0x50dfdbb4,0xffbd3bfd,0x55559b05,
    0x3ffa89fd,0x0bd007ee,0xff80fee0,0x3ea1df70,0x7754ff35,0xeeeeeeee,
    0xf887ea4e,0x6fed5ec6,0xdf700d42,0x5409fd30,0xfeeeeeef,0x2a237dc1,
    0x3fae0efd,0xfffb304e,0x6ffedc5d,0x0006f802,0xff880000,0xc833fe23,
    0x23ff982f,0xfb8486f9,0x0f4df706,0x80453a18,0xfd00e8e8,0x4fa9ffe4,
    0x40000df1,0x289fe24b,0x05ddfda8,0xddffff93,0x7d40379d,0x6fffffff,
    0x3fffff26,0x0003dffe,0x00000000,0x44000000,0x541fd86f,0xf85f883f,
    0x07fcc187,0x20597fb0,0xf9bc8ef9,0x416a5907,0xf89d4c6d,0x000017e3,
    0x10020889,0x00000035,0x00000000,0x00000000,0x00000000,0xa83f90df,
    0xe85f884f,0x017f4407,0xd7013fe2,0x305bf79d,0x85c81d8d,0x24e87e0c,
    0xaaaaaaa9,0x0002aaaa,0x00000000,0x00000000,0x00000000,0x00000000,
    0x20fe437c,0x85f884fa,0x027ec07e,0xf7006fa8,0x260f403d,0x21d43a86,
    0xbb98b20e,0xbbbbbbbb,0x0000002b,0x00000000,0x00000000,0x00000000,
    0x37c00000,0x13ea0fe4,0x81fa17e2,0x376006fb,0x2fbf203f,0x825c2efb,
    0x01514c3c,0x00000a87,0x00000000,0x00000000,0x00000000,0x00000000,
    0x321be000,0x4427d41f,0xf307e85f,0x1590081f,0x2bf303fd,0x3a27e8bd,
    0x0001d100,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x83f90df0,0x85f884fa,0x82fe887e,0x3be64a83,0x2093e080,0x110cc019,
    0x3ba21111,0xeeeeeeee,0x0000006e,0x00000000,0x00000000,0x00000000,
    0x00000000,0x83fb0ff1,0x86f984fa,0x427ec0fe,0x36074c58,0x0027405f,
    0xdfffff00,0x44444444,0x00008888,0x00000000,0x00000000,0x00000000,
    0x00000000,0xcffd9800,0x73effc89,0x3aa17ffd,0xffc99cff,0xdddff51d,
    0x7fd4bfdd,0x077ffa63,0x66400000,0x00003ccc,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__times_26_usascii_x[95]={ 0,2,1,0,1,0,0,0,0,0,1,0,1,0,
1,0,0,2,0,0,0,1,1,0,1,0,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,-1,1,0,-1,0,0,0,0,0,0,0,
-2,0,0,0,0,0,-1,0,0,1,0,0,0,0,0,0,0,3,1,2,0, };
static signed short stb__times_26_usascii_y[95]={ 20,4,4,4,3,4,4,4,3,3,3,6,17,13,
17,3,4,4,4,4,4,4,4,4,4,4,9,9,6,9,6,4,3,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,24,4,9,3,9,3,9,3,9,3,3,
3,3,3,9,9,9,9,9,9,9,6,9,9,9,9,9,9,3,3,3,12, };
static unsigned short stb__times_26_usascii_w[95]={ 0,4,8,12,10,19,18,4,8,7,10,13,4,7,
4,7,11,7,11,10,11,10,10,11,10,11,3,5,13,13,13,9,21,17,15,15,17,14,13,17,17,8,9,18,
14,21,18,17,13,17,16,11,14,17,17,22,17,17,14,6,7,6,11,13,5,11,12,10,12,10,11,12,12,6,
7,12,7,19,12,11,12,12,8,8,7,12,12,17,12,12,11,7,2,7,13, };
static unsigned short stb__times_26_usascii_h[95]={ 0,17,7,17,19,17,17,7,23,23,11,13,7,3,
4,18,17,16,16,17,16,17,17,17,17,17,12,15,12,6,12,17,23,16,16,17,16,16,16,17,16,16,17,16,
16,16,17,17,16,21,16,17,16,17,17,17,16,16,16,21,18,21,9,2,5,12,18,12,18,12,17,17,17,17,
23,17,17,11,11,12,17,17,11,12,15,12,12,12,11,17,11,23,23,23,4, };
static unsigned short stb__times_26_usascii_s[95]={ 255,250,204,26,99,39,59,194,50,23,171,
99,199,194,233,131,78,65,19,90,73,101,112,123,176,154,140,85,144,213,113,
246,1,47,31,31,1,241,227,187,191,182,166,148,133,111,135,212,79,67,62,
19,47,1,228,205,209,93,167,92,123,85,182,202,227,167,139,190,110,179,14,
1,237,230,59,199,191,113,133,201,165,178,244,158,91,127,231,213,158,152,146,
42,39,31,238, };
static unsigned short stb__times_26_usascii_t[95]={ 1,1,73,25,1,25,25,73,1,1,73,
60,73,81,73,1,25,60,61,25,60,25,25,25,25,25,60,60,60,73,60,
25,1,60,61,43,61,43,43,25,43,43,25,43,43,43,25,1,43,1,43,
43,43,43,25,25,43,43,43,1,1,1,73,81,73,60,1,60,1,60,25,
25,1,1,1,1,1,73,73,60,1,1,60,60,60,60,60,60,73,1,73,
1,1,1,73, };
static unsigned short stb__times_26_usascii_a[95]={ 94,125,153,188,188,313,292,68,
125,125,188,212,94,125,94,104,188,188,188,188,188,188,188,188,
188,188,104,104,212,212,212,167,346,271,251,251,271,229,209,271,
271,125,146,271,229,334,271,271,209,271,251,209,229,271,271,355,
271,271,229,125,104,125,176,188,125,167,188,167,188,167,125,188,
188,104,104,188,104,292,188,188,188,188,125,146,104,188,188,271,
188,188,167,180,75,180,203, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_26_usascii_BITMAP_HEIGHT or STB_FONT_times_26_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_26_usascii(stb_fontchar font[STB_FONT_times_26_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_26_usascii_BITMAP_HEIGHT][STB_FONT_times_26_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_26_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_26_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_26_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_26_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_26_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_26_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_26_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_26_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_26_usascii_s[i] + stb__times_26_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_26_usascii_t[i] + stb__times_26_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_26_usascii_x[i];
            font[i].y0 = stb__times_26_usascii_y[i];
            font[i].x1 = stb__times_26_usascii_x[i] + stb__times_26_usascii_w[i];
            font[i].y1 = stb__times_26_usascii_y[i] + stb__times_26_usascii_h[i];
            font[i].advance_int = (stb__times_26_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_26_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_26_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_26_usascii_s[i] + stb__times_26_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_26_usascii_t[i] + stb__times_26_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_26_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_26_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_26_usascii_x[i] + stb__times_26_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_26_usascii_y[i] + stb__times_26_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_26_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_26_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_26_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_26_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_26_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_26_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_26_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_26_usascii_LINE_SPACING
#endif

