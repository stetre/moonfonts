// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_26_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_26_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_26_usascii_BITMAP_WIDTH         256
#define STB_FONT_consolas_26_usascii_BITMAP_HEIGHT         98
#define STB_FONT_consolas_26_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_26_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_26_usascii_NUM_CHARS             95

#define STB_FONT_consolas_26_usascii_LINE_SPACING          17

static unsigned int stb__consolas_26_usascii_pixels[]={
    0x00cd41db,0x2aa200c8,0x4c402aaa,0x5530000a,0x0c803555,0x7dc00000,
    0xcdcb8801,0x87fc0002,0x000002fd,0x3fe7ff30,0x59510001,0x76dc4003,
    0x3b61ecce,0x447ba202,0x4db02dee,0x8002dfdb,0xf10fe9ff,0x7dc03dff,
    0xffff500e,0x3ff220df,0x1ff4402f,0x09fffff9,0xfb302fe4,0xfc8007bf,
    0x7fffd400,0xa8000eff,0x8017ea4f,0xa80dffd8,0x7cbfe25f,0xffb8001f,
    0xfa803fff,0x1fffffff,0x6fb81bf2,0x0bbfffe2,0xffffb1ff,0x9ff8007f,
    0x3ff6a0fe,0x417fa206,0x06fbaaa8,0x8017bff9,0x37f27ffa,0xff701aaa,
    0x2f3bf203,0x5cc00dfe,0xfa80abfe,0xeffb9adf,0x20ff4000,0x9fd000fe,
    0x0ff88bfb,0x0ffcbfe2,0x2b3fe600,0x3ea02ffc,0x87fe60bf,0x7fd01ff9,
    0x2ffea988,0x644ffbfe,0x3fe000ff,0xff880fe9,0x013fe602,0x3fe21be6,
    0x97fe2001,0xff9803fc,0xf70bf903,0x3fffea0b,0x4ff84fff,0x2003ff98,
    0x04fb86f9,0x83fa4fa8,0x97fc43fc,0x7e4001ff,0xfd027ec4,0xfd07fe07,
    0x801ff309,0x3fff0ffd,0x7c007fd0,0xfb00fe9f,0x01ffb809,0x3fcc37cc,
    0x3f214400,0x505fe803,0x207ec0bf,0xbefbeffb,0x7037dc3c,0x17ec00ff,
    0x7dc03fc4,0x2fcc7f22,0x1ff97fc4,0x321fec00,0x40ff304f,0x43fdc1ff,
    0x7ff005fb,0x2fdc0bfe,0x1fd3ff00,0x36013ee0,0x437cc06f,0x900005fa,
    0x0ffb807f,0x7d401fd0,0x7ccbfe23,0x980ffa04,0x7f8801ff,0xf500bf60,
    0x0fe87ec7,0x3ff2ff88,0x640b7f6e,0xa81ff44f,0x107fe05f,0x02fe85ff,
    0x07fe9fb0,0x6dc437d4,0xfe9ffdee,0x1009f500,0x37cc03ff,0xdd902fd4,
    0x647ddddd,0x817fc03f,0x25f804fa,0x80fea7fa,0x17fc01ff,0xf3027dc0,
    0xaaef980d,0x7c07f96f,0xffd3ff1f,0xff507fff,0xfb81bf21,0x3607fe05,
    0x801fe65f,0x203ff4fd,0x7ffd46fa,0xfe9fffff,0x2009f500,0x1be604fe,
    0xffe817ea,0x324fffff,0x03fe603f,0x79b507ec,0x1ffa9ba9,0x3fe205f7,
    0x401ff400,0x0ff400ff,0x27bffee0,0x8ffc06f9,0xf913ffff,0xfddfd01f,
    0x02fe401d,0x1ff303ff,0x7cc013f2,0x2e03ff2f,0x82ffe65f,0x00fe9ffa,
    0x3f200bf5,0x2a1be607,0x4fc8004f,0x6fc80ff2,0xfffd97e0,0x7fc4fb5f,
    0xf301fcae,0x04fd801f,0x7d402fd4,0xd0aa9805,0xf1ff803f,0x07fd03ff,
    0x7007fff5,0x07fe60bf,0x01ff9ff4,0xf97ffbb6,0x749f901f,0xfd3ff03f,
    0x401be201,0xdf300ffa,0x90005f90,0xd01fe49f,0x54fe609f,0x1f69f75f,
    0x01fffff3,0xfd003fe6,0x001fd807,0xfb8001ff,0xff1ff804,0xf517ee05,
    0x26447fff,0xfd103fe6,0x2bbee03f,0x67ff406f,0x7c40ffc1,0x7c0ff32f,
    0x3600fe9f,0x3e201adf,0x26df301f,0x8000efb9,0x80ff24fc,0x25f703ff,
    0x365f91fd,0x7ffe440f,0x0ffc40cf,0xf980bfa0,0x00ff2006,0xff006f98,
    0x7d407fe3,0x3f2bfe66,0xfd0df51f,0x0ffff4c9,0x03feff88,0x1ff80ff4,
    0xbf52fec4,0x07f4ffc0,0x807ffea0,0x2df302ff,0x20003fff,0x40ff24fc,
    0x1f901ff8,0xd8fecdf1,0x3fffe207,0x1017fc1f,0x1fe403ff,0x400df100,
    0x203531fe,0x203ff0ff,0xe8ffa6fa,0xa85fb8ff,0xf9ffdeff,0x3fff601f,
    0xf80ff400,0xeffdceff,0xff817ee0,0x3aa00fe9,0x3fa00cdf,0x372df303,
    0xf90004ff,0xf881fe49,0xf31fb00f,0x07d87f4b,0x3ffab7e2,0xfa817fa0,
    0x003fe207,0xf7005fb0,0x217fff69,0x203ff0fe,0x41ff15fb,0x04fdeff8,
    0x3e3bfff7,0x13fea01f,0x7fc03f60,0xb83effff,0x3a7fe05f,0x003fe00f,
    0x6f9817fc,0x4000ff44,0x80ff24fc,0x2afb02ff,0x06e9fe4f,0x1ff44fe6,
    0x3fa01ff5,0x0013ee03,0xdf1017ea,0x0ff673ee,0xc80ffc31,0x981ff34f,
    0x0401ffff,0xff500ffc,0x7c031001,0x7dc0189f,0xfd3ff307,0x4017e601,
    0xdf301ff9,0x90007f70,0xf01fe49f,0x7d5fa09f,0x13e2df14,0x17f62fa8,
    0x7ec43dff,0x007fa00f,0xfb00ff40,0x05f99fa3,0x7fc40ffc,0xf703ff11,
    0x3fe000df,0x0017fa01,0x9800ffc0,0x7ff440ff,0xbf500fe9,0x981fee00,
    0x005fa86f,0x0ff24fc8,0x2fb05fe8,0x2edf95f9,0x447ee01f,0x7ffcc3ff,
    0x201fffef,0x2e0005fa,0x7c9f704f,0xff897e27,0xfd883ff2,0xb3077f45,
    0xf0003fff,0x1dfb103f,0x205fd100,0x3fa001ff,0x3fffd30d,0x13ea01fd,
    0xf302fec0,0x000bf50d,0x01fe49f9,0x43f60ff7,0xfbfdfcff,0x9fc8d546,
    0xc980ffda,0x400cffff,0x220002fd,0x07fc40ff,0xb93e61fd,0x9dfff5ff,
    0xf981dffb,0xefffeeff,0x7fc000ff,0x3fffb931,0x417fea00,0x3ea001ff,
    0xfe9ffeff,0x9f500fe9,0x980bfa00,0x005fa86f,0x0ff24fc8,0xfc81ff88,
    0xff37ff70,0xffffc81d,0x801fffff,0x7f8801ff,0x43fc8000,0x5f7dc2fd,
    0x4bfe61fe,0x3effffda,0x3bfff620,0x006ff88c,0xfff98ffc,0x3fe2000d,
    0x8003ff03,0xfd1dfffa,0x3ea01fd3,0x406fa804,0x05fa86f9,0x3f24fc80,
    0x5c2fec03,0xc980402f,0x03defffe,0x90217f60,0xf300007f,0xfc82fd4d,
    0x200882ff,0x00008000,0x00660cc0,0x06600880,0x7f400800,0x8809f500,
    0x37cc02ff,0x6c002fd4,0x300ff23f,0x05f987ff,0x005f8800,0xd77dff30,
    0x0000ff8b,0x08003fd0,0x00000000,0x00000000,0x00000000,0x9fb00fe8,
    0x9806fe80,0x00ff986f,0xfc8bfe20,0x41ffc803,0x4c0000fe,0x3ee0004f,
    0xd30dffff,0x75400009,0x00000003,0x00000000,0x00000000,0x0fe80000,
    0x3202ff88,0x6f9800ff,0x0883ff88,0x3f20ffb8,0xa8dfd003,0x500100ef,
    0xa880007f,0x000001bb,0x00000000,0x00000000,0x00000000,0x7f400000,
    0x81bffb20,0x99301ff9,0x3ee0dfb9,0x9bf51cff,0xfc85fff9,0xd102cccd,
    0xacefc89f,0x00005eba,0x00000000,0x00000000,0x00000000,0x00000000,
    0x3a000000,0x19fff10f,0xf5017cc0,0x5c0dffff,0xfff32fff,0xff903dff,
    0x7c409fff,0xffffeb83,0x0000002d,0x00000000,0x00000000,0x00000000,
    0x00000000,0x83fa0000,0x10020009,0x00133333,0x09998131,0x26666620,
    0x26200400,0x00000001,0x00000000,0x00000000,0x00000000,0x00000000,
    0x01fd0000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x18800000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xda800000,0x1eeeeefe,0x7d4007fb,0xff04ffff,0x0ee60003,
    0x59b97100,0x33333260,0x95101ccc,0xa980059b,0xdb9302cb,0x3ba20179,
    0x3772a202,0xdd97102c,0x6664c39b,0x950ccccc,0x10264c05,0x2159db95,
    0x0bceecb8,0xccccccb8,0x2fe884cc,0xfffea800,0x76ffec1e,0xfb1fffff,
    0x77754007,0x03ff04ff,0x8013f200,0xeffffffa,0x7ffffdc0,0xff983fff,
    0x4404ffff,0x85fffffb,0xfffffffd,0x707ffd82,0x9fffffff,0xffffffc8,
    0x3fffee4f,0x9f90ffff,0xfb83fd40,0x75ffffff,0x7fffffff,0xffffffe8,
    0x7fdc0fff,0x7ffec006,0x3bee2fee,0xfb0ffe20,0x27e40007,0x90001ff8,
    0x3fee009f,0x0effb9ac,0x2aaab7ee,0x67fcc1aa,0x104ffa89,0x35599ffd,
    0xa88bffc8,0x7fec0ffe,0x9bdffc87,0x3ff24dba,0x22b999ac,0xfbaaaaa9,
    0x5409f90f,0x6fff447f,0x755daa9b,0x3ffb7333,0x67fd5554,0x4ffa82aa,
    0x02bfea00,0x6fb82fe8,0x90001fec,0x007fe09f,0xf8027e40,0x23ff984f,
    0x3f6004fb,0xe80ff984,0x3ff800df,0x6c41ff98,0x01ffd42e,0x000ffe21,
    0x3f21ff10,0xf91fea04,0x2200405f,0x07fe03ff,0xf9000a60,0x503ff00d,
    0x003fd8df,0x7fc13f20,0xfddd1001,0x3dddddff,0xdf7037dc,0xf88027dc,
    0xa89fb00f,0x07fe006f,0xfd000ffc,0x03fea009,0x21ff1000,0x9fea04fc,
    0x80002ff8,0x07fe04fd,0x1ff40000,0x7dc1ff40,0x6c41fec5,0x413f204e,
    0xdfec89ff,0x7ffffcc2,0x21ffffff,0x3fe203fe,0x2e009f71,0x8dff505f,
    0x3f6002fe,0x2007fa84,0xf3000ffa,0xf880005f,0x5409f90f,0x001bf27f,
    0xff00ff40,0xddddd503,0x017f4007,0xff50ffdc,0x7443fd85,0x13f200ef,
    0x7fff57fc,0x6cccc2ff,0x419999cf,0x97fc01ff,0x9f9004fb,0xf8ffff90,
    0xfa80260f,0x07ff50df,0x20037dc0,0x20002ffe,0x09f90ff8,0x07fb3fd4,
    0x80df5000,0xfffa81ff,0x3fa004ff,0xffff9802,0x3fd83fff,0x9003bfa2,
    0x3fffe09f,0x640dfb32,0x07fc404f,0x7fdcffa0,0xfd82deff,0x3efffa23,
    0x3fafbe67,0xff504fff,0x8005ffdf,0x7cc005fc,0x4000beff,0x09f90ff8,
    0x85ff3fd4,0x54099998,0x400dfdba,0x4fc801ff,0x3ffbbb60,0x745eeeee,
    0x01cdecaf,0x3bfa27fb,0xf04fc800,0x0ff983ff,0xf9809f90,0xa9fec00f,
    0xeffffeee,0x7fd4bfa0,0xf50ff88e,0xffb9bfff,0x3fffea0d,0x27ec000d,
    0x7ffe4400,0xff1000cf,0xfa813f21,0xfd83ff17,0x7ff46fff,0x7fc01cff,
    0x204fc801,0xffffffff,0x1be27fff,0xfd17fb00,0x827e400b,0x03ff02ff,
    0xff3013f2,0x103fe801,0x7ecbff73,0x3e24ffca,0x305ff50f,0xdffa87ff,
    0xf981effd,0x0013f62f,0x1ffffb88,0xf90ff880,0xf8bfd409,0x7ee65c1f,
    0x7f5d5546,0x007fe02f,0xfe8013f2,0x4e7fcc02,0x33f60199,0x7e4005fe,
    0x3e03ff04,0x809f901f,0x7f401ff8,0xb0ffa802,0xf985ffff,0xfc81bea7,
    0xf98bfee6,0x3ffe40ff,0x20000bf9,0x4400fffa,0x409f90ff,0x80bfe7fa,
    0xffb806fa,0x9003ff00,0x17f4009f,0x7ffffec0,0x6fec3eff,0x7e4003ff,
    0x3e03ff04,0x009f901f,0x7fc405ff,0x91ff8801,0xdf501dff,0xff503fcc,
    0x7fc417fc,0xb8fffd43,0x2200006f,0x7fc402ff,0x7d409f90,0xfa80ffa6,
    0x205ff006,0x4fc801ff,0x200bfa00,0xfeedcefb,0x2aff64ff,0x3f2003ff,
    0x3e03ff04,0x009f901f,0x3fd40bfd,0xf70ff880,0xf127e40f,0x4dbea01f,
    0x217f607f,0x5ff51ffd,0x27ec0000,0x5fb9fea0,0x7fc97f20,0x7401bea0,
    0x003ff02f,0x7f4009f9,0x807fd402,0x5cff67fc,0x9f9002ff,0x7fc07fe0,
    0x500df701,0x0ffa01ff,0xff13fdc0,0xe83ff105,0x2a9f903f,0x213f607f,
    0x077f47fb,0x02fe8000,0x0ff537e4,0x7ff11ffc,0x2601bea0,0x03ff00ff,
    0x74009f90,0x027e402f,0x8ff61ff3,0xfc801ffc,0x3e03ff04,0x05ff501f,
    0x6c43dff0,0x5ff7007f,0x3a20efc8,0x41ffb86f,0x9ff11ffa,0xe885ff50,
    0x0f7fcc4f,0x91019954,0xf50b21ff,0xb84ff87f,0x6ffdc0ff,0x26037d40,
    0x07fe04fe,0xe8013f20,0x07fec02f,0x0ff66fc8,0xfc803ffb,0x3e03ff04,
    0x3fffa01f,0x7f4c1fed,0x41effeef,0xfffedeed,0xddffd883,0xffd00eff,
    0xb87ffd9b,0xffeddfff,0x41bfb2a4,0xffeffffa,0xdddff94f,0x7ec5fffd,
    0xa86fffef,0xffeddfff,0xdffff902,0x3bbadffd,0x745ffeed,0xffffffff,
    0x004fc80f,0xff500bfa,0xffd977bd,0x7f41fec3,0x3fbbb20f,0xff2eeeff,
    0x8807fe03,0x81fffffc,0x0dffffd8,0xcfffffd8,0x77ffe400,0x7ffe400c,
    0xffd501df,0xffe85dff,0x7ff6c403,0xffd71cef,0x9839ffff,0x204efffd,
    0x1dffffd9,0x7fffecc0,0xffffd2df,0xfffd03bf,0x91ffffff,0xddfffddd,
    0x017f405d,0x7ffffed4,0x41fec0cf,0xffd0efe8,0x5fffffff,0x0ffc07fe,
    0x10009880,0x00331001,0x22000220,0x300cc001,0x20060001,0x02600199,
    0x20001100,0x13330098,0x7ff40000,0x2fffffff,0x8800bfa0,0x00000999,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x99999300,0x22599999,0x332202cc,0x93007971,
    0x9bb75019,0x10059701,0x00f26199,0x4ca80b22,0x22059930,0x40332a3c,
    0x3332a3cc,0x2ccccccc,0x1e5c0332,0x99999997,0x32a19999,0x65cf2602,
    0x300abccc,0x99999999,0x33333269,0x99954ccc,0x54003579,0xd107260c,
    0xffffa85d,0x25ffffff,0xdfb00ffc,0x3a017fd4,0x7ffec45f,0x3fe43fff,
    0xbf537dc0,0xd509f500,0x3fee0fff,0x7e4bf306,0x26ff983f,0xfffffffb,
    0x07fe5fff,0xffe83fee,0xffffffff,0x5409f91f,0xfffffd6f,0xfff507ff,
    0x2effffff,0xffffffff,0xffffff97,0x3f9003df,0x3ff617dc,0x55555447,
    0x223ffbaa,0x1ff984ff,0xff5037f4,0x99adfe81,0x3fe61ffd,0xf31ff401,
    0x4c9f500d,0x707ffffe,0xbf305fff,0x7e437fe4,0x2aaaa67f,0x24feaaaa,
    0x0ffd41ff,0x3feaaaaa,0xf90aaaac,0xfeb7d409,0x2ffecaac,0x55557fd4,
    0x55df72aa,0x3f255555,0xfffcaaad,0xf907ec02,0x007ffd83,0x7fd437ec,
    0x7cc27f41,0x107fd02f,0xfd13fa07,0x30ffc409,0x27f700df,0x7fbaeff8,
    0x30dfdf70,0x0fefecbf,0x400ffbf1,0x87fe1ff8,0xff002ff8,0x5027e403,
    0x3a0bfadf,0x4037d46f,0x4fc806fb,0x200ffc88,0x2207ec7e,0x3ea002ed,
    0x5cdfb00f,0x0dfb00ef,0xc8001ff7,0x7037e46f,0x807f88df,0xfb8f23fb,
    0x5fd9f707,0x2bf65f98,0x1febea4f,0x7fc5fc80,0xf8013fa1,0x813f201f,
    0x705fd6fa,0x806fa8ff,0x4fc806fb,0x55513fa0,0x7fd555ff,0x7c400035,
    0x2bfe203f,0x3e202ff8,0x0017fc3f,0x3fe637dc,0xf887fb01,0x202fc807,
    0x79f707fb,0x3a5f98df,0x75f66f8f,0x1ff8800f,0x05fc8ffc,0xf900ffc0,
    0xfeb7d409,0x7d47fa82,0x806fb806,0x1fee04fc,0xfffffffd,0x000bffff,
    0x7dc037ec,0xfc805fdf,0x000df70f,0x0ffa17f2,0x1fe03fe2,0x017e41fd,
    0x33ee0ff7,0x97e61ff8,0x9f13f97e,0x3ee003fa,0xefb9ff85,0x00ffc000,
    0xb7d409f9,0x45fd82fe,0x6fb806fa,0x2604fc80,0x3ea620ff,0x99ef999d,
    0x3ff50000,0x03fffa00,0x3e2ffe20,0xff88001f,0xfa86fc81,0x3e21ff06,
    0xb807f22f,0x329f707f,0x7e97e65f,0x3a3f79f3,0x0ffc400f,0x007fdffc,
    0xf900ffc0,0xb999999d,0x266ffadf,0x7d40ffda,0x0999999f,0x99999ff7,
    0x8813f259,0x24f981ff,0x440005f8,0x3ea003ff,0x3fee004f,0xfb0005fc,
    0xb03fe60b,0x5c3fa07f,0x807f65ff,0x29f707fb,0x4bf31ff8,0xe9bbfa7f,
    0x837dc01f,0x0005ffff,0x7fe403ff,0xffffffff,0xffffffd6,0xffff501b,
    0x3ee9ffff,0x5fffffff,0x2ff809f9,0x13e63fa8,0x00dfb000,0x000fffe8,
    0x0007fffa,0xfe803ff2,0x7403fe23,0x21fdfb0f,0x1fee00fd,0x2bf927dc,
    0xfc9fe5f9,0x8807f63f,0xf7ff02ff,0x3ff0005f,0x55577e40,0xfd6fcaaa,
    0x203dfb9b,0xcccccffa,0x555df72c,0x13f23555,0xfb81ff88,0x65c0fea2,
    0x007fea00,0x05fdefb8,0x0013fea0,0xf9007ff2,0xfb037d4d,0x27f99f13,
    0x1fee00fe,0x1ff327dc,0xf33fcbf3,0x7017ec1f,0x5cffc0df,0x7fc001ff,
    0xa813f201,0x7dc5fd6f,0x806fa80f,0x4fc806fb,0x5447fe60,0xfcaacfda,
    0x1bff22ad,0x3001ffc4,0x07ff35ff,0x2000ffc0,0xf9801ffc,0x6407fb0f,
    0x6f9afaaf,0x07fb80fd,0x9cfd89f7,0x3b8ff15f,0x5ff017ec,0xefd8ffc0,
    0x807fe000,0x5bea04fc,0x427ec2fe,0x6fb806fa,0x2a04fc80,0x3fffee7f,
    0x7fffffff,0x7ec1fff6,0x92ff4006,0x3fe001ff,0x07ff2001,0xff8bff80,
    0x9f6bf200,0x5c07f8fe,0x989f707f,0xdf15faff,0x2e05fb00,0x88ffc06f,
    0x3fe005fe,0xa813f201,0xf985fd6f,0x4037d40f,0x4fc806fb,0xaa897fa0,
    0xbfeaabfe,0x213fea2a,0x2e001ffa,0x17fa20ff,0xc800ffc0,0x7e4001ff,
    0x7dc06fad,0x3efee5fb,0xb83fdc06,0x5fdfe84f,0x7f900df3,0xff00bfe0,
    0x801ffcc3,0x13f201ff,0x05fd6fa8,0x06fa89fd,0xfc806fb8,0x203ff904,
    0x8807ec7e,0x99cff880,0x22099999,0x2ffa84ff,0xc801ff80,0x99999aff,
    0xfbff3009,0x2fefb807,0x701bfbe6,0x213ee0ff,0xdf35fffa,0xf707f900,
    0xb83ff00d,0x1ff801ff,0xfa813f20,0xff505fd6,0x5c037d41,0x24fc806f,
    0x203ffe98,0x4003f46f,0xfffffffb,0x1bf66fff,0x7c00ffd8,0x7ffc401f,
    0x5fffffff,0x003fffe0,0xfe81fff5,0x7fffec5f,0xf74fffff,0x4d7ffa09,
    0x83fc806f,0x1ff803ff,0x7c00ffd8,0x813f201f,0x205fd6fa,0x01bea4fe,
    0x3fffffee,0xffff97ff,0xf805ffff,0x64003fc6,0xffffffff,0x05ff56ff,
    0x3e027fcc,0x7ffc401f,0x5fffffff,0x201bff20,0xffb85ffa,0x7ffffec5,
    0x9f74ffff,0x7d57fea0,0x5c4fc806,0x03ff007f,0xff80dfd1,0xa813f201,
    0x2e05fd6f,0x00df50ff,0xfffffff7,0x3ffff2ff,0x7c400ade,0x3ea037c5,
    0x0000001f,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x6665bff6,0x3001abcc,0x54000799,0xcccc83cc,
    0x19900abc,0xcddb9800,0x00000001,0x01eff64c,0x19dffd95,0x6f76e4c0,
    0xcdfec983,0x3b600000,0xc983db01,0x320deffe,0xeeeeeeee,0x867dd365,
    0x775c0ceb,0x2a1bd700,0x1bdd713e,0x3e3ffee0,0xdfffffff,0x07ffec00,
    0x2fffc400,0x7ffffffc,0x00ffc0cf,0xffffff90,0x00009707,0x3ffea16a,
    0x7cc1effe,0x1fffffff,0xffffffc8,0x7ffffe47,0x1ff801ff,0x7fc07fe0,
    0x3fbffee1,0x3fff61ff,0x3a7fffff,0xfbbfffae,0x2ff444ff,0x9f717fcc,
    0x1fffffd3,0x67fdffa0,0x05ffcaaa,0x00bfffe2,0x217fff60,0xfeb99aff,
    0x800ffc5f,0xff512efc,0x006ffc45,0x4c5ff900,0x1bf622ff,0x3aa21393,
    0x05ffe46f,0x317fdc93,0xff801ffd,0x7c07fe01,0x305ff31f,0x4ccccc41,
    0x3ffa3ff9,0x1be7fdf3,0x9fd0ffe6,0x31efefb8,0x5bf609fd,0x0ffa81ff,
    0x0bf9bf50,0x5fbefa80,0xffa81ff8,0x26007fe3,0x46fa80ff,0x8000efe8,
    0x1fec2ffd,0xf5002ff8,0x2017fccf,0x9fd01ff8,0x3e01ff80,0x2e3ff01f,
    0x7ec0005f,0xdfd37f45,0x7fdc07f4,0xff70df90,0x886fb81d,0x103ff2ff,
    0x2ff603ff,0xf1000ff9,0xff0bf73f,0xff97fa03,0x205fb801,0x1ffd81ff,
    0x81dfd100,0x13f207f8,0xbf91ff80,0x5c0bf700,0x00ffc06f,0x47fe03ff,
    0x90001ffa,0x22fe81df,0x403fa1fe,0x80ff9efd,0x7fa80ffb,0xff97ff2a,
    0xf107f981,0x400bfe1f,0xf0bf74fc,0xf9bee03f,0x04fd801f,0x7fe40bf6,
    0x06ffcc03,0x55557fd4,0x9885fdaa,0xb1ffaaaa,0x09f9007f,0x3fe03fcc,
    0x7c07fe01,0x2f7ffa1f,0x03ff5000,0xd07f41fd,0x3ffe201f,0x40bf702f,
    0xf0bffe19,0x20bfb03f,0x017f26fa,0x85fb9be6,0x4bf901ff,0x5fc801ff,
    0xfa80ff60,0x09ff504f,0x7fffffdc,0x7e45ffff,0x1fffffff,0x7fb005ff,
    0xed87fc40,0xeeeffeee,0x203ff0ee,0x3ff221ff,0x3e201dff,0x741fd03f,
    0xa803fa0f,0x17ee05ff,0x9ff00980,0x407fd975,0x03fea3fd,0x2fdc3fd0,
    0x7f440ffc,0x2a007fe3,0x09f900ff,0x2e0dff98,0x77d402ff,0xaaaaaaaa,
    0x266fff21,0x5fd1ff99,0x4c07fb00,0x3ffffe7f,0x1fffffff,0x07fe03ff,
    0x0bfff6e2,0x1fd027f4,0x01fd07f4,0xb80ffff4,0xff00005f,0x07ffffff,
    0x5ff07fe2,0x3ee27e40,0x2e61ff85,0x00ffc6fe,0xb99aefe8,0x74404ffe,
    0x07ff60ef,0x4400ff30,0x23ff02ff,0x4fc804fd,0xff01bea0,0xf80ffc03,
    0x3fec401f,0x3fa037e4,0x0fe83fa0,0x1df9df90,0x9800bf70,0x2b3fe2ee,
    0xa86ffdba,0x305fd86f,0x85fb81ff,0xffffeeff,0x800ffc0e,0xffffffe9,
    0x3fa603fe,0x03ffb80d,0x4c00bfe2,0x23ff307f,0x7d400ffb,0x807fd00f,
    0x0ffa01ff,0x26007ff2,0x03fea0ff,0x07f41fd0,0x3ff501fd,0x17ee17fa,
    0x7cfffd00,0x43ff981f,0x07fa84fd,0x0bf705fd,0x5bdfffff,0x50007fe0,
    0x0bf65797,0x2a027fd4,0x3ff204ff,0x42ff8801,0xff11fffb,0x6ff4501d,
    0x2007fe40,0x3bf601ff,0x047fff20,0x7fccff90,0x3a0fe802,0xf303fa0f,
    0x21ffcc7f,0x7fc005fb,0x6407fe7f,0x337fe25f,0x42ffcccc,0xcccccffa,
    0xff2ccffd,0x00ffc003,0xb81ff800,0xff3003ff,0xdffd101b,0x6c1fdb9b,
    0xedffddff,0x3bffea1f,0x3fe67fee,0x02fffddf,0x3e601ff8,0xfdcfedff,
    0xfb9bdfb1,0x77ff45ff,0xd1eeeeee,0xfd07f41f,0x5c2ff441,0x017ee2ff,
    0x7fc7ff70,0x7d4bf901,0xffffffff,0x7fffdc5f,0xffffffff,0x7c003ff4,
    0xfa80001f,0x001ffd85,0xb8077f44,0x45fffffe,0xb3efffd8,0xffec883f,
    0x7fec44ff,0xff000dff,0xffffa803,0x3ff23fb3,0x741dffff,0xffffffff,
    0x7f41fd2f,0xffd83fa0,0x2e1ffb00,0x4088005f,0x4ff881ff,0x2aaab7f6,
    0x5447fcaa,0xfdaaaaaa,0x03ff1aae,0x0000ffc0,0xfe887fe6,0x3f60000e,
    0x004cc01f,0x0180004c,0x33000110,0x8800c400,0x00000199,0x00000000,
    0x10ffc000,0x7fc1ffb5,0x00bfe201,0x1ff85fb8,0x0007fe00,0x213ff262,
    0xc80000dc,0x0000000e,0x00000000,0x00000000,0x00000000,0x40000000,
    0xffffffff,0x201fea1f,0x3ee004fd,0x2001ff85,0xffffffff,0x3ffff63f,
    0x000002ef,0xfd916d80,0x405db05b,0x07d50ee8,0x1f609d30,0x00019900,
    0xdfb3fe40,0x2a21ffcc,0x7f4c002b,0xfffffc85,0x9999996f,0x99999999,
    0x7ffffc01,0x04fd83de,0x2e007fb8,0x001ff85f,0x3ffffffe,0x37bf63ff,
    0x0000003c,0x3ffa7fe0,0x37e42fff,0x2fd4df70,0x7c827dc0,0x413fee00,
    0xfffffff9,0x4ff94fff,0x8ffe66fd,0x40efffe8,0x5fd882eb,0x7fffffe4,
    0xfffffff7,0x3fffffff,0x00000000,0x00000000,0x00000000,0x7fffc000,
    0xf98dfb32,0x4c7fd00f,0x53fc806f,0x20973649,0x981feef8,0xeeeeeeee,
    0x64df93ee,0xc8ffe26f,0x20efebef,0x97ee01fd,0x08888888,0x33333333,
    0x00333333,0x00000000,0x00000000,0x00000000,0x4c1fff80,0x41ff40ff,
    0x1fe20ff9,0xf92fd897,0xdfb1d73d,0x1be67f20,0x937dc000,0xf17fc4bf,
    0x65ffec1f,0x0008807f,0x00000000,0x00000000,0x00000000,0x80000000,
    0x83ff02ff,0x85fc86fb,0xe87fe0ff,0x3fbf661f,0x4bf102ef,0xb80003fc,
    0xff17ee6f,0x3f61be25,0x00002fff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x0ffc07fe,0x5ff07fe2,0x3fea3fb0,0x3ee03fe4,0x107ec05f,
    0x666441ff,0x2ccccccc,0x22fdcbf5,0x793001ff,0x00000003,0x00000000,
    0x00000000,0x00000000,0xff800000,0xfb03ff01,0xfc837d49,0x3fcfdf92,
    0x3fbbbfaa,0xfb84f983,0x3ffffe64,0x004fffff,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xff80ffc0,0x3f67fa81,0x37e7f703,
    0x366f8afc,0xdf96b8df,0x3fd00fe8,0x4ccccccc,0x00000999,0x00000000,
    0x00000000,0x00000000,0x00000000,0x40000000,0x03ff01ff,0x03fe2bfe,
    0x4d7ce7d4,0x8e64f9df,0x2c98e66c,0x0000f260,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x407fe000,0x7bf901ff,0x66fcc0bf,
    0x07f7fd0f,0x000003e4,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xff000000,0x4407fe03,0x2202feff,0x3bf25fef,0x001b202f,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x3ff01ff8,0x403ffec0,0x3fe62fff,0x0000001f,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x20000000,0x03ff01ff,0x6c027fd4,
    0x07ff40ff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_26_usascii_x[95]={ 0,5,3,0,1,0,0,5,3,3,2,1,3,3,
4,1,1,1,1,2,0,2,1,1,1,1,5,3,1,1,2,3,0,0,2,1,1,2,2,0,1,2,2,1,
2,0,1,0,2,0,2,1,1,1,0,0,0,0,1,4,2,3,1,0,0,1,2,2,1,1,0,1,2,2,
1,2,2,1,2,1,2,1,2,2,0,2,0,0,0,0,2,2,6,2,0, };
static signed short stb__consolas_26_usascii_y[95]={ 19,1,1,2,0,0,1,1,0,0,1,5,14,11,
15,1,2,2,2,2,2,2,2,2,2,2,6,6,4,8,4,1,0,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,0,2,22,1,6,1,6,1,6,0,6,1,0,
0,1,1,6,6,6,6,6,6,6,2,6,6,6,6,6,6,0,-2,0,9, };
static unsigned short stb__consolas_26_usascii_w[95]={ 0,4,9,14,12,15,15,4,8,8,11,13,7,8,
6,12,13,12,12,11,14,11,12,12,12,12,5,7,11,12,11,9,15,15,11,12,13,10,10,13,12,11,10,13,
11,14,12,14,11,15,12,12,13,12,15,14,14,15,12,7,11,7,12,15,9,12,11,10,12,12,14,13,11,11,
11,12,11,13,11,13,11,12,12,11,13,11,14,14,14,14,11,10,3,11,14, };
static unsigned short stb__consolas_26_usascii_h[95]={ 0,19,7,17,22,20,19,7,25,25,11,14,10,3,
5,21,18,17,17,18,17,18,18,17,18,17,14,18,16,8,16,19,25,17,17,18,17,17,17,18,17,17,18,17,
17,17,17,18,17,22,17,18,17,18,17,17,17,17,17,25,21,25,9,3,6,14,19,14,19,14,19,19,18,19,
25,18,18,13,13,14,19,19,13,14,18,14,13,13,13,19,13,25,27,25,6, };
static unsigned short stb__consolas_26_usascii_s[95]={ 160,160,185,233,90,144,177,195,65,17,147,
156,248,225,248,119,120,89,45,232,29,108,134,130,147,68,248,160,93,172,81,
221,74,13,1,168,219,208,197,218,171,244,194,143,56,115,102,93,44,103,184,
181,157,205,58,74,14,29,1,57,132,26,159,234,215,118,165,131,243,105,13,
28,67,1,45,42,55,206,105,142,231,193,235,182,79,170,117,132,220,206,194,
34,1,5,200, };
static unsigned short stb__consolas_26_usascii_t[95]={ 21,1,82,49,1,1,1,82,1,1,82,
67,64,82,75,1,29,49,49,29,67,29,29,49,29,67,49,29,67,82,67,
1,1,67,67,29,49,49,49,29,49,29,29,49,67,49,49,29,67,1,49,
29,49,29,49,49,49,49,49,1,1,1,82,82,82,67,1,67,1,67,29,
29,29,29,1,29,29,67,82,67,1,1,67,67,29,67,82,82,67,1,67,
1,1,1,82, };
static unsigned short stb__consolas_26_usascii_a[95]={ 229,229,229,229,229,229,229,229,
229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,
229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,
229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,
229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,
229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,
229,229,229,229,229,229,229, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_26_usascii_BITMAP_HEIGHT or STB_FONT_consolas_26_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_26_usascii(stb_fontchar font[STB_FONT_consolas_26_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_26_usascii_BITMAP_HEIGHT][STB_FONT_consolas_26_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_26_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_26_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_26_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_26_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_26_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_26_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_26_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_26_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_26_usascii_s[i] + stb__consolas_26_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_26_usascii_t[i] + stb__consolas_26_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_26_usascii_x[i];
            font[i].y0 = stb__consolas_26_usascii_y[i];
            font[i].x1 = stb__consolas_26_usascii_x[i] + stb__consolas_26_usascii_w[i];
            font[i].y1 = stb__consolas_26_usascii_y[i] + stb__consolas_26_usascii_h[i];
            font[i].advance_int = (stb__consolas_26_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_26_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_26_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_26_usascii_s[i] + stb__consolas_26_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_26_usascii_t[i] + stb__consolas_26_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_26_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_26_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_26_usascii_x[i] + stb__consolas_26_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_26_usascii_y[i] + stb__consolas_26_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_26_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_26_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_26_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_26_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_26_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_26_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_26_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_26_usascii_LINE_SPACING
#endif

