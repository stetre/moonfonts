// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_14_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_14_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_14_latin1_BITMAP_WIDTH         256
#define STB_FONT_courier_bold_14_latin1_BITMAP_HEIGHT         64
#define STB_FONT_courier_bold_14_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_bold_14_latin1_FIRST_CHAR            32
#define STB_FONT_courier_bold_14_latin1_NUM_CHARS            224

#define STB_FONT_courier_bold_14_latin1_LINE_SPACING           7

static unsigned int stb__courier_bold_14_latin1_pixels[]={
    0x00400000,0x00000000,0xb0064b50,0x2e00001d,0x00008d41,0x80000000,
    0x04554400,0x2e730000,0x40000001,0xaa441889,0x202a0002,0x74c05548,
    0x2e02d403,0x98036605,0x502d403e,0x1362980b,0x75400fa8,0x4c1f100e,
    0x0d983ecb,0x34c00f20,0x57003b20,0x3fbbee05,0x97006cc5,0x5c02a510,
    0xd303e984,0x2132f607,0x825c0333,0x33381bf8,0x40ee3620,0x401cc048,
    0x771b1049,0x0ea01260,0x7cc6aaa6,0x06f2be00,0x2e416ab5,0x012600a8,
    0x00d88037,0x950162b2,0x2e43f303,0x9839824c,0x3985532a,0x443b8d88,
    0xcbd83b8d,0x1cc01504,0x10ffef98,0xa806a655,0x3532a880,0x02a9954c,
    0x26551015,0x5101501a,0xeeb86a65,0xff80fa4e,0x4c722fdd,0x7dc1f886,
    0x2aa60dfe,0x00aa982a,0xa9802aa6,0x02aa600a,0x5544616e,0x55511aaa,
    0x557ee355,0x555530ef,0x5115554c,0x7dc35555,0x3bee1eed,0x446a20df,
    0x3249321a,0x40ffd9ff,0x320dfefb,0x70ffd9ff,0xb83beabf,0x3f20dfef,
    0x2e0ffd9f,0x3f20dfef,0xc80ffd9f,0x23f81ea4,0x436eda6b,0x7b12f85c,
    0x20ffffec,0x3fa05ffe,0x17ffa05f,0x4c85ffe8,0x3fffff20,0x9fffff94,
    0x360f9a6c,0xffb1ffff,0x3fff23ff,0x3f7ee4ff,0x1ec4be2d,0x43beedf7,
    0x3e20bdfa,0x44be0f60,0x3d83e23d,0x7c0f9a6c,0x07c47b12,0x7b12f87b,
    0x207b07c4,0x2f81f44c,0x8d58e9a6,0x2a2d42f8,0x3b602e86,0x03fb600f,
    0x3600fed8,0x2035c0fe,0x9ec7913d,0x363e63c8,0x0ba05d04,0x3e1e44f6,
    0xd516a2e9,0x881d76c8,0xd83e27eb,0x89aa2d43,0x1f30f60f,0x3545a89b,
    0xb51ec1f1,0xd83e26a8,0x06a89903,0xb47d77ff,0x6c35c7ce,0x0ba07c44,
    0x881f4fc4,0x3f103e9f,0x3a7e207d,0x5c4e7c43,0x8236ef66,0x6c08dbbd,
    0x205d00fe,0x8dbbd82e,0x3fffff10,0xe81f1136,0x3f06c1fd,0x6c3d83e2,
    0x0f887c44,0x03fb60f6,0xf10f889b,0x889b1ec1,0x1ec1f10f,0xf82f84c8,
    0xa96c2dec,0x235c17c2,0xd702e85b,0x27ae0d73,0xd73d706b,0x21ae7ae0,
    0x362effe9,0x5ffd85ff,0x17409f30,0x5ffd82e8,0x2e2f9fa8,0x27cc2dc6,
    0xf13ee77c,0x71ae1ec1,0x07b07c4b,0xb8d709f3,0x23d83e25,0x1f12dc6b,
    0xb84c81ec,0x96a00f86,0x67c41aa1,0x02e82fa9,0xd05ffffd,0xfd05ffff,
    0xffd05fff,0x20b205ff,0x3638b9bd,0x7cc38b9b,0x1740ba00,0x31c5cdec,
    0x67c41f1f,0x05d02fa9,0xde819f75,0x67c40fa8,0x46f42fa9,0x80f980fa,
    0x42fa9cf8,0x220fa8de,0x742fa9cf,0x32e0fa8d,0x21f881fd,0x3b202cfc,
    0xd980fa2e,0x5fcc42ef,0x1bb0fd41,0x41bb0fd4,0xa83761fa,0xb303761f,
    0xb99be88b,0xd7337d16,0x2207fb2a,0x3e621bf9,0x266fa21b,0x03e3e66b,
    0x2605dfb3,0x105d00bf,0x36605dfd,0xefe882ef,0x80ff6542,0xe882efd9,
    0xefd982ef,0x42efe882,0x70601bca,0x03000399,0x7fff4020,0x2edff11f,
    0x2dff13ff,0xdff13ffb,0x7fc4ffee,0x1307ff76,0x6fffffc8,0x2dfffff9,
    0xfe81ccc9,0xfffd1fff,0x3ffff23f,0x0200846f,0x506fffa8,0x00800401,
    0x39993008,0x80080080,0x00000800,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00200000,0x80100001,
    0x2000200a,0x00002000,0x00002001,0xe9848d40,0xd811a81e,0xc8aa914e,
    0x446980c0,0x001e4554,0x07bbae00,0x4000002a,0x1b3008b8,0xa9f76dc4,
    0x97025c04,0x3a0274c0,0x4c073702,0x642e880e,0x2e04b803,0x9012e02e,
    0x4c13a607,0x20e3504e,0x65cc2fa8,0x270e7c3e,0x03d0ba19,0xa86670bb,
    0x10ef541f,0x0e883bf9,0x6ff7dc39,0x223feb80,0xeac81dfc,0x6744d80d,
    0x407e65cd,0x880e6039,0x82403a8c,0x424401c9,0x201b84f9,0x322ea039,
    0x1540aa01,0x443a8c88,0xaa983a8c,0x0a98ba00,0x5317c553,0xf1174555,
    0x510fcc59,0x0fc35555,0x2e1d95f5,0x8fe46cae,0x2f44be60,0xdc866ff2,
    0x0aa987b9,0x647cc5d0,0xca82ec4b,0x0565cc0b,0xa80565cc,0x565cc0bc,
    0x40acb980,0x2a1533f9,0x5542a60a,0x05542a60,0x64c05e4c,0x80bca80b,
    0xffe80bc9,0x4fe8ba05,0xd8be3ffb,0x25d1ffff,0xd70fedfa,0x4fffffc8,
    0x4ba4c87e,0x3663f13d,0x51720ce9,0x44007ccf,0x82fff41f,0x2f73a22e,
    0x6fe43d44,0x3b3b20ef,0x85ecec85,0x320efdfc,0xcec85ece,0xfb9fc45e,
    0x9fdc5fb3,0x6cfee2fd,0x7f676c2f,0x83fb3b60,0x360efdfc,0xed80fece,
    0xff85d00f,0x7417c991,0x963d84c2,0x7913d85c,0xf36a86f4,0xd1bb3ea9,
    0x1363d719,0x3b7ae1f1,0xb05fd882,0x41fb81fd,0x7cc4bfc8,0x45d83e60,
    0x99307cc9,0x1760f98f,0x3260f993,0x8f62f87c,0x85d1ec2e,0xbf98ba3d,
    0x57f34faa,0xd83e69f5,0x9f557f35,0xd03e9f88,0x4996df85,0xd0c2e82f,
    0x2f617205,0x837a08db,0xdf54ffee,0xb35d90df,0x7e4b71ae,0xedb81fbd,
    0x21f4fc40,0x897901fb,0xd71aa0f9,0x743f6774,0x23547ece,0x1fb3ba6b,
    0x321fb3ba,0x6c2e8f60,0x747b0ba3,0x3bbbbee2,0x9ddddf74,0x3eed71aa,
    0x75c4eeee,0xf85d06b9,0x0be4cce9,0x3ee5d0ba,0xb0d70fdc,0x503f0bff,
    0x7c4fa7f5,0xf12fe882,0x35c5f539,0x2e1f4099,0x02e86b9e,0x447a8979,
    0xf54ea8cf,0x7d43f911,0x3e21fc88,0x1f54ea8c,0x47d43f91,0x66c01fc8,
    0x466c2fa8,0x5466c2fa,0x222be22f,0x5115f11a,0x3aa33e23,0x35115f14,
    0x82ffffe8,0x77cc7c2e,0xd0ba0be4,0xf30efd45,0x38b9bd83,0x6da8887e,
    0x687e633a,0x5dfd112a,0x22e89f98,0x742f988a,0x1742ffff,0x42ec4bc8,
    0x7ec4ffe9,0x7fec6fef,0x7ff4c6fe,0x37f7fec4,0xf1bfbff6,0x3ffffd45,
    0x51ffffea,0xda8fffff,0x3f6a3fff,0x3ffa63ff,0x1fffed44,0x506ec3f5,
    0xfc97c45f,0x7cc433e4,0x03d0ba1b,0x4cdf44bb,0x7dc1f36b,0x3ffa60ce,
    0x20ff7744,0x5c5bdff8,0x7ffec5ff,0x1bb0fd44,0x37fa2274,0x0403f33f,
    0x00880110,0x10022008,0x80080401,0x08800800,0x40080220,0xbb7fc408,
    0x45ff33ff,0x24f89ffd,0xffffd5ff,0x22030763,0x3fffff25,0x080107b6,
    0xb99b5000,0x88080207,0x47ff76ff,0x095001e9,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x40000000,
    0x4026000c,0x000aaaca,0x220aadb8,0x06550554,0x854c0004,0x400000aa,
    0xeb80b800,0xacb885ee,0x21b13501,0x21eeeee8,0xb7105548,0x53009805,
    0x000caa03,0x15522000,0x02600f22,0x0455440c,0xdd517451,0xee82e881,
    0xbb70effd,0x85ffb801,0xebb88333,0xd880e982,0xfd9fdc0d,0x220b6e62,
    0x03d81dfd,0x55764174,0x2feefdc2,0xf1bffbee,0x3383f757,0x03f7d903,
    0x641b97d7,0x5dc46fef,0x201ed42e,0x333800eb,0xd703a9c8,0x21d81b97,
    0x2e5feefb,0x2baa5d0f,0x4cf3006d,0x200ecc1f,0x64c0f999,0x80bca80b,
    0x0b33900c,0xfbd1747b,0x0d95bd05,0xc82e806e,0x2e1e809d,0x2fdcbe63,
    0xacb98d50,0x43e8ae80,0x259bb8ca,0xcb987e2c,0xd803a80a,0x40bca800,
    0xcca83a9c,0x3e60589c,0x97411721,0x1d81f13d,0x983f12dc,0xfea8952d,
    0x3b3b63ff,0x3bf7f20f,0x2602aa60,0x3a3d80aa,0x22482e82,0x302aa61f,
    0x649ddfdd,0x01e24fff,0x81efe6b9,0x2f67644d,0x360ffdf4,0x81b9b8d8,
    0x3b3b20fa,0x21dc3a85,0xbf91660d,0x5e6441df,0x3276361d,0x2dc7a1b8,
    0x87e5d00c,0xf107f22e,0x5dc3f915,0x3e20edad,0x2fe69f53,0x41f34faa,
    0x20bfaa5d,0x8cd82fea,0x402e82fa,0x217f546c,0x21acfaa8,0x66c3f128,
    0x23324a88,0xf880f8bf,0xe87cc981,0x2360fc9a,0x0bfa1543,0xdb31f326,
    0x75c19d35,0x3e61ec8c,0x4ddb9760,0x8aabdb58,0x3c80992f,0x25d0fcba,
    0xdfd501ed,0xcbfb983f,0x2e5d1ea6,0xd54eeeef,0x202e86b8,0xffffd82e,
    0x3f602e86,0x17405d00,0xffd31ec0,0xbaf7547d,0x9dd0f505,0x1f45d0fd,
    0x17353b1b,0xecee80c8,0xdbed9987,0x77f7313d,0x19ae354f,0x8d8d8b9b,
    0x27f10b9d,0xe83e206b,0x743e27d2,0x41f84162,0x7c6d98db,0x5f10fa8b,
    0x33e23511,0x02e84ea8,0x006f60ba,0x01dd105d,0x703d0174,0x7901f513,
    0x07ea7fe0,0x223ea26c,0x3afa21fc,0x2e32a2e8,0x1f50059a,0x29b03f91,
    0x23aa5a88,0x233e26d9,0x0ca444ea,0x97226f6a,0x139f14f9,0x25d0ead7,
    0x3ee6b9eb,0x33220fed,0x07ef406e,0xda87dfd5,0x3fa63fff,0x0dfcc44f,
    0x5b06fe62,0x10df4c40,0x988533dd,0x4d4cc1bf,0x0fbff209,0x3bea17aa,
    0x207a03ef,0x366feffd,0xea86fdef,0xb07f04dd,0x700dfdff,0x30feec09,
    0x37609ffd,0x44ddea84,0x3ffa64f9,0x6c5d012e,0x05dcc1df,0x3002f322,
    0x880101f9,0x3fe20200,0xfff13fff,0xd00547ff,0x3ea3ffff,0xff11ffff,
    0x3fea7fff,0x40085fff,0x00025900,0x00200110,0x02200801,0x104efc80,
    0x100103f9,0x402a0080,0x0041d800,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x55440000,0x51009809,0xeb806a65,0x0aaaa882,0x40aa6553,0x001db00a,
    0x88155793,0x64d540aa,0x0373980b,0x42aaaaa2,0xb83511a8,0x03555091,
    0x440226e2,0x41eeb81a,0x554404ea,0xc81d300a,0x2a00002e,0x266664ed,
    0x15551199,0x55446aa0,0xeefb82a0,0xf902e85f,0x201ffb3f,0xfffa83e8,
    0x3eabf72f,0x37fbee0e,0x36007d40,0x2a2ffedf,0x3f62feef,0x9441fdef,
    0xffffb00a,0x7ddbee7f,0x221c260e,0x95506ffe,0x0ffbe03d,0x5d885f51,
    0x27fffe40,0x01f4c144,0x4c3dde54,0x84023bbf,0x446ffffc,0x27ff56fe,
    0x5c3f13f8,0x05567545,0x4c1ec1f1,0x1e603dac,0x3e07cd36,0xaf887b12,
    0x887cc0bc,0x85d1744e,0x0a996e3f,0x99f10155,0x1d76b8b6,0xf980aa98,
    0x26a21cde,0x316a80bc,0x236e0ba0,0xf30f80aa,0x740554c5,0xdfd80ccc,
    0x576d43fe,0x5d04020a,0xd83e2174,0xb00b5044,0x7c43bddf,0xfbfb0f60,
    0x4c3cc07f,0x22d44d8f,0x777fc46a,0x89d1aa1f,0x2f808aed,0xfb3fb9aa,
    0x5db99505,0xa82fde81,0xa9f982fe,0x377fe66c,0x004fd447,0xdf7b705d,
    0xb71bf983,0x7f417f54,0x547d47dd,0x77f645ef,0x7d04021d,0x29b05f73,
    0x453200f8,0x81740bcb,0x798f60f8,0x26188fe2,0xd81fdb07,0x7f107c44,
    0x36f7a2dc,0x6ff6444f,0x17ddffc0,0xbc82e8f6,0x7ecc0ffd,0x260ba03f,
    0x7c9b1e67,0x80fffee1,0x83ffb82e,0x0d56ffe8,0x0fc9d05d,0x0d57f3b7,
    0xd04020b7,0xf503ffff,0xb5c2a172,0x1740fed9,0xb8f60f88,0x4cd51f45,
    0xd709f307,0x30fc45b8,0x4ddeb88f,0xcf87d114,0x3a3d82de,0x8bcfef82,
    0x802fa620,0xedcf982e,0xf05d1ec4,0xfb82e805,0x5c83e03f,0x3e3e82e8,
    0x3aaffe21,0x20105b84,0x83e44ba0,0x9fc42fbe,0x86c89bf9,0x3a0b98cd,
    0x3e20fa8d,0x3ea4fa8a,0x1f306c89,0x5f539f10,0x4d99df98,0x17f32640,
    0x400f87d3,0x542fa8cd,0x24c9dd8e,0x9881cfa8,0x5e7d41bf,0x2f8a7441,
    0x11d4d7dc,0x9dc837f3,0x4d7c40cf,0x2fe622fb,0x17c4fa21,0x109ffff3,
    0x100833b9,0x1f266fa2,0x540837dc,0xfa83ffff,0x3fa20dff,0xfffeb82e,
    0x1dff912f,0x301feca8,0xdff05dfb,0x764019ff,0x9ffdd11e,0x2a02cfc8,
    0x3e27ffff,0x25ffffef,0x7c44fff8,0xff13ffff,0x73ff70df,0x7fffccdf,
    0xfffff13f,0x3ff57ea7,0x88bbfff2,0xf73fffff,0x2e1ff93f,0x7fffc013,
    0x2666660f,0xdffff919,0x000fe205,0x08010011,0x30080080,0x00803999,
    0x332e0010,0x39970081,0x00000100,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x55513722,0x30001555,0x55554c5d,
    0x2aa2002a,0x5555500a,0x0d446a21,0x306a2351,0xa82aa235,0x55303532,
    0x54c2a601,0x55544002,0x54455440,0x402aaa21,0xaa881aa9,0x55531aaa,
    0x054c2985,0x32602f2a,0x0565cc2b,0x261acb88,0x9301751b,0x99cb8817,
    0x22bdc80b,0x1ffffff9,0x8ffa01d8,0x06fffffb,0x7ffe5722,0xffffe85f,
    0x3beedf71,0x3beedf90,0x3ee3bfe0,0xfb3ff52f,0x20bffd0b,0x23ffb4fe,
    0x3ff202ea,0x2fff24ff,0xfff50efc,0xffffd107,0x7ffffe45,0x43ffffb4,
    0xc8bfe2fe,0x3ae0eedf,0x33721fdc,0xfddfb85e,0x0fecbee4,0xa83fb3b6,
    0xd86dffce,0x0fc2d504,0x3dfb8174,0x4354fd6e,0x4fa1dfc8,0x5d9742e8,
    0x5c0ebb64,0xadc0ec8f,0xf1746a8a,0x403fb603,0xfb8991ff,0x3e61f01e,
    0x417a6ba2,0x6b9e600f,0x743c89ec,0xff56fb82,0x649b07cc,0xcc9829be,
    0xb0ee1e87,0x55f30f45,0xdfca89d5,0x5cfec2fa,0x063e7aa1,0xf8837f31,
    0x4fcea3da,0x4177dc49,0x8a85f53e,0x1fde80fb,0xd503ffb0,0xbe8b7bf3,
    0x9f881f99,0x32dbf03e,0x40dfc884,0xfde9720f,0x79803e04,0x1b77b1ea,
    0xfeb82e81,0x51aa7eea,0x077ed44d,0x788fbbdd,0xb87a2d80,0x3a4eeeef,
    0x23eeffde,0x2a3fecfb,0x7fd40fff,0x6db26fff,0xdfb03f03,0x827fff40,
    0x09f301fa,0xcf982fd4,0x7ff45cfe,0xb9eb81ff,0x999d3f06,0x1f0ffd40,
    0x1bffd354,0x7cc083e0,0x7fec3fee,0x9b705d05,0x5fc4f5fd,0x22be3ea8,
    0x911f32e9,0x988cd81f,0x17d466c4,0x235115f1,0xa8df99f8,0x83fa36e0,
    0xf3101b6a,0xfffff837,0xdd501f80,0x0dd37d05,0x3a0b27f1,0x07f9f102,
    0x89ff5ff1,0x3fa07e2e,0x98f82fff,0xcfd884ef,0x74b907c0,0x443e09d3,
    0x40d57cc7,0x7438b9bd,0x9cf8db82,0x227ff4c7,0x7ec5fffe,0x7f4c6fef,
    0x77fcc3ef,0x7ffed46f,0x3fbbfee3,0x3fffa21f,0xd0027ae4,0x0bd53305,
    0x7dc017f3,0xd117d11e,0x6ccf7419,0x2205fcc3,0xff05f55e,0x9f447f91,
    0xb0fd42f8,0xfc97c41b,0x440efe44,0xd12fb9af,0xf983f317,0x3ea0fa9a,
    0x99be8809,0x837f316b,0x0fb888eb,0x11004008,0x00801100,0x04110088,
    0xfff98110,0xfd00ec05,0x37ffd41f,0x7fe57220,0x3fe27f33,0x3fea3fff,
    0x647fec6f,0xf9af40ff,0x3fa7ff22,0x2edff10f,0x27ff63ff,0x807aa4f8,
    0x322efffc,0x2e5fb3ff,0x10ffffff,0xff90dfff,0x3ffadfff,0x2dff11ff,
    0x00003ffa,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x0984a000,0x5ddd41d8,
    0x2aaeaa0b,0x5ccee20b,0x5dcceea1,0x5dc46ea0,0x072a6ea0,0x2ae20100,
    0x400000bb,0xd34c800c,0x20000dc1,0x10888888,0x00355555,0x553893aa,
    0xa808625c,0x225b3040,0x39022220,0x2eeeeee2,0x44aa912b,0x1bbbbbbb,
    0x3ffffa00,0xfded8081,0x3ff7fa1f,0x363fe65d,0x2e3bf24f,0x26ff61ef,
    0x3bf21fe9,0x126dc6df,0xf981b31b,0x2b307ddf,0x89976e4a,0x983b219e,
    0x917c4fcf,0x441d819b,0x76ffffff,0xc8dfffff,0x9964745d,0x321749b7,
    0x8fe21b32,0xd9f9f14b,0x47ffffa7,0xbbbb32e8,0x19947bbb,0xddddddb3,
    0x64f5c009,0x84444446,0xb542fa8a,0x774479ae,0x1f35c82f,0x4cbf9f88,
    0x36300ed8,0x03aa7a60,0x3ae0fc7b,0xd0d985c8,0x06c3ffff,0x4c7a1bea,
    0x07fe4914,0x1aa22222,0x743db700,0x4eed12d9,0x712f5468,0x91187304,
    0x00088887,0x00000000,0xffa9e699,0x0bea5fff,0x43cd756a,0x9f880efc,
    0xddfbd04d,0x6c405b05,0xd8bd6d82,0xa9f987a2,0x321d980f,0xf306c0ef,
    0xb10c89f9,0x363ee595,0xff969806,0x56ccffff,0x290f662d,0x0010551a,
    0x00000000,0x70000000,0x8888dd9f,0x3273ea08,0x7cdf5ae1,0x3fb3fb10,
    0x3601fd90,0x74c0ffaf,0x66fc409c,0x10f63320,0xd30ba27d,0x6de41d53,
    0x5c5d5f11,0x1a6790ce,0xb0ec3510,0x33159803,0xab983333,0x00000001,
    0x00000000,0xf8000000,0x8082ecdc,0xf12ffffe,0x27f3fd5f,0x87fd8ffc,
    0x23ee04f8,0x7fffcc6c,0x4a208886,0xb9ffb829,0x8713886f,0x44411181,
    0x00000000,0x00000000,0x00000000,0x00000000,0x32001000,0x00000001,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_bold_14_latin1_x[224]={ 0,2,1,0,1,0,1,2,3,1,1,0,2,1,
2,1,1,1,0,0,0,0,1,0,1,1,2,2,-1,0,0,1,1,-1,0,0,0,0,0,0,0,1,0,0,
0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,3,1,1,1,-1,2,0,-1,0,0,0,0,0,0,0,
1,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,1,2,3,2,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,1,0,0,0,
3,0,1,-1,1,0,-1,1,-1,-1,1,0,1,1,2,0,0,2,2,2,1,0,0,-1,0,1,-1,-1,-1,-1,
-1,-1,-1,0,0,0,0,0,1,1,1,1,-1,-1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,
 };
static signed short stb__courier_bold_14_latin1_y[224]={ 10,1,2,1,1,2,3,2,2,2,2,2,8,5,
8,1,1,1,1,1,2,2,1,2,1,1,4,4,2,4,2,2,1,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1,12,1,4,2,4,2,4,2,4,2,2,
2,2,2,4,4,4,4,4,4,4,2,4,4,4,4,4,4,2,2,2,5,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,10,4,1,2,3,2,
2,2,2,2,1,4,5,5,2,0,1,1,1,1,1,4,2,5,9,1,1,4,1,1,1,4,-1,-1,-1,0,
0,-1,2,2,-1,-1,-1,0,-1,-1,-1,0,2,0,-1,-1,-1,0,0,4,2,-1,-1,-1,0,-1,2,2,1,1,
1,2,2,1,4,4,1,1,1,2,1,1,1,2,2,2,1,1,1,2,2,3,3,1,1,1,2,1,2,2,
 };
static unsigned short stb__courier_bold_14_latin1_w[224]={ 0,3,5,7,6,7,6,3,4,4,6,7,4,6,
3,6,6,6,7,7,7,7,6,7,6,6,3,4,8,8,8,6,6,9,8,7,7,7,8,8,8,6,8,8,
8,9,9,8,8,8,8,7,7,8,9,9,8,8,7,3,6,4,6,9,3,8,9,8,8,7,8,8,8,7,
5,8,7,9,8,7,9,8,8,7,8,8,8,9,8,8,6,4,2,4,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,3,6,7,7,8,
2,7,5,9,5,7,8,6,9,9,5,7,5,5,3,8,7,3,3,4,5,8,8,9,8,6,9,9,9,9,
9,9,9,7,7,7,7,7,6,6,6,6,8,9,8,8,8,8,8,6,8,8,8,8,8,8,8,7,8,8,
8,8,8,8,9,8,7,7,7,7,7,7,7,7,7,8,7,7,7,7,7,7,8,8,8,8,8,8,9,8,
 };
static unsigned short stb__courier_bold_14_latin1_h[224]={ 0,10,4,11,11,9,8,5,10,10,6,8,4,3,
3,11,10,9,9,10,8,9,10,9,10,10,7,8,8,5,8,9,11,8,8,9,8,8,8,9,8,8,9,8,
8,8,8,9,8,10,8,9,8,9,8,8,8,8,8,10,11,10,5,2,3,7,9,7,9,7,8,9,8,8,
11,8,8,6,6,7,9,9,6,7,9,7,6,6,6,9,6,10,10,10,3,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,10,8,7,8,
10,10,2,9,5,6,5,3,9,2,4,9,6,6,3,9,10,2,4,6,5,6,9,9,9,9,11,11,11,10,
10,11,8,11,11,11,11,10,11,11,11,10,8,10,12,12,12,11,11,5,9,12,12,12,11,11,8,9,10,10,
10,9,9,10,7,9,10,10,10,9,9,9,9,8,9,8,10,10,10,9,9,7,8,10,10,10,9,12,11,11,
 };
static unsigned short stb__courier_bold_14_latin1_s[224]={ 254,53,175,212,238,220,1,128,162,249,109,
17,181,210,194,94,4,85,92,218,25,116,211,142,187,180,251,250,41,154,124,
177,87,104,232,242,133,168,8,1,95,176,37,141,150,183,114,55,159,202,50,
83,33,19,241,85,76,67,59,141,70,126,138,221,190,209,64,218,28,236,215,
18,197,189,64,171,163,24,86,193,91,74,62,201,10,227,43,52,34,46,17,
236,1,175,202,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,
224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,254,238,155,
155,1,120,152,194,231,167,163,95,145,210,228,237,169,108,71,103,198,76,241,
217,186,116,132,77,203,193,27,11,117,127,137,226,116,147,110,157,165,173,204,
167,110,190,197,145,180,131,28,46,1,101,220,121,133,55,10,37,245,229,137,
159,44,9,18,184,150,35,244,124,84,92,108,44,100,60,68,129,36,146,27,
1,100,52,212,9,206,57,66,75,101,19,77,181, };
static unsigned short stb__courier_bold_14_latin1_t[224]={ 1,14,55,1,1,25,46,55,14,14,55,
46,55,55,55,1,25,25,25,14,46,25,14,25,14,14,36,25,46,55,46,
25,1,46,36,25,46,46,46,36,46,46,36,46,46,46,46,36,46,14,46,
36,46,36,36,46,46,46,46,14,1,14,55,55,55,46,36,46,36,46,36,
25,36,36,1,36,36,55,55,46,36,36,55,46,36,46,55,55,55,36,55,
14,25,14,55,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,1,25,14,
36,55,36,14,14,55,25,55,55,55,55,25,55,55,25,55,55,55,25,14,
55,55,55,55,55,25,25,25,25,1,1,1,14,14,1,36,1,1,1,1,
14,1,1,1,14,36,14,1,1,1,1,1,55,25,1,1,1,1,1,36,
25,14,14,14,25,25,14,46,25,14,14,14,25,25,25,25,36,25,36,14,
14,14,25,25,55,36,14,14,14,36,1,1,1, };
static unsigned short stb__courier_bold_14_latin1_a[224]={ 119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_14_latin1_BITMAP_HEIGHT or STB_FONT_courier_bold_14_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_14_latin1(stb_fontchar font[STB_FONT_courier_bold_14_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_14_latin1_BITMAP_HEIGHT][STB_FONT_courier_bold_14_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_14_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_14_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_14_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_14_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_14_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_14_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_14_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_14_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_14_latin1_s[i] + stb__courier_bold_14_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_14_latin1_t[i] + stb__courier_bold_14_latin1_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_14_latin1_x[i];
            font[i].y0 = stb__courier_bold_14_latin1_y[i];
            font[i].x1 = stb__courier_bold_14_latin1_x[i] + stb__courier_bold_14_latin1_w[i];
            font[i].y1 = stb__courier_bold_14_latin1_y[i] + stb__courier_bold_14_latin1_h[i];
            font[i].advance_int = (stb__courier_bold_14_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_14_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_14_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_14_latin1_s[i] + stb__courier_bold_14_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_14_latin1_t[i] + stb__courier_bold_14_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_14_latin1_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_14_latin1_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_14_latin1_x[i] + stb__courier_bold_14_latin1_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_14_latin1_y[i] + stb__courier_bold_14_latin1_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_14_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_14_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_14_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_14_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_14_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_14_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_14_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_14_latin1_LINE_SPACING
#endif

