// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_6_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_6_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_6_latin1_BITMAP_WIDTH         256
#define STB_FONT_consolas_6_latin1_BITMAP_HEIGHT         24
#define STB_FONT_consolas_6_latin1_BITMAP_HEIGHT_POW2    32

#define STB_FONT_consolas_6_latin1_FIRST_CHAR            32
#define STB_FONT_consolas_6_latin1_NUM_CHARS            224

#define STB_FONT_consolas_6_latin1_LINE_SPACING           4

static unsigned int stb__consolas_6_latin1_pixels[]={
    0x02604020,0x81426041,0x04088042,0x04040100,0x01010404,0x20400080,
    0x00820080,0x44150c44,0x220860a0,0x1506a218,0x0ee61410,0x01044182,
    0x00102080,0x21104411,0x86227188,0x70d40983,0x70c8ea63,0x286e38c4,
    0x82815122,0x44331409,0x4130541a,0x2228260a,0x444b6218,0x86a23111,
    0x2a28260a,0x5188873a,0x94a5294a,0x73249732,0x7731dcc7,0x9c7732a8,
    0x5cc2e383,0x0190eee3,0x52a87267,0xea85c457,0x4b265534,0x73bb8e72,
    0x552c310e,0x55318e37,0x98a1c28e,0xb98ee63b,0x5cc71ce3,0x26739ce3,
    0x2a67533a,0x9dcc7733,0x5c4ee273,0x4ee27713,0x2e3573b8,0x9ce7533b,
    0x2739ce73,0x4738e3ab,0x2ea39c73,0x4c738e70,0x1ce7714b,0x4c0c8173,
    0x93398970,0x3eb8dd41,0x2671c135,0x3a99ce3a,0x5d5c70c4,0x99ca0470,
    0x4e511441,0x38e71ce3,0x738e7147,0x573ab9ce,0x239ceae7,0x4a99ce73,
    0x4d2a6953,0x26e9534a,0x39d5ce73,0x4e739ce7,0x271c7573,0xb8e71ce3,
    0x47751ce3,0x39d2a673,0x385711dc,0x25dc51dc,0xaa9cc735,0xb83638e0,
    0x4310363a,0x0e38eea1,0x70d438e5,0x47751dd4,0x512ea3ba,0x54ba8eea,
    0x5d4aea97,0x8eea5752,0x2e9753ba,0x2ae9574a,0x52ae9574,0x2a75749b,
    0x2ea7752b,0x4eea7753,0x3ba8a3da,0x43ba8eea,0xba87751c,0x52ae9750,
    0x42e6e3ba,0xd98a24aa,0x4c5bb8a3,0xb32ba9c3,0x30e1cc25,0xa8c43507,
    0xa89c3209,0x4470dc71,0x0c000005,0x00000000,0x00000000,0x02200000,
    0x00180000,0x22e00000,0x8003030b,0x003711b9,0x18040808,0x88426040,
    0x00401020,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x47710a80,0x4442a142,0x31101011,
    0xa8220d44,0x0e704400,0x22008282,0x2085731a,0x223532b8,0x5cc5531b,
    0x088302a3,0x294eee02,0x9dc45012,0x20e704b9,0x04771020,0x016a6551,
    0x2e608773,0x04294e71,0x0810ee02,0x0e55310c,0x18b26553,0x71c5caa6,
    0x0640c871,0x0a064593,0x04c39c19,0x3110a819,0x12c5ca2e,0x0aa94c35,
    0x42aee157,0x2a5933aa,0x73514e3c,0xa80e739c,0x384e5b51,0x43a98e27,
    0x05070e2b,0x3828aaa7,0x9c372447,0x22c45913,0xb98b221b,0xc9eccaa2,
    0x09a8709a,0x426a398e,0x882a20a8,0x470ae22b,0xb89222b8,0x24892ee2,
    0x489222b8,0x71d64eee,0x2911cc77,0x2135748b,0x3ab8e3a9,0x20a98ea6,
    0x0c8e73bb,0x522e3853,0x0d8e24aa,0x73bb8f6a,0x57738488,0x70e71c54,
    0x26975398,0x4550642d,0x44aea2bb,0x0aa88e0d,0x382aa593,0x505542e2,
    0x92aa3b87,0x9551c4aa,0x0392aa38,0x70e25547,0x23baa55c,0x54caa673,
    0x8eaa7732,0x3da8e3ba,0xa871dc24,0x21a8713b,0x1389732b,0x4e1c1cc7,
    0x731c5733,0x44a926e3,0x7551c3ba,0x4110b660,0x1305d5c0,0x2a2b9844,
    0x32ba8a2b,0x2575085b,0xb926e48b,0x217170b8,0x217172d9,0x217172d9,
    0x7172d980,0x96ccb661,0x0039c0d3,0x44b66000,0x124dc380,0x02000000,
    0x039c3804,0x504c05b3,0x02d98071,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x53a98dcc,0x1a95c435,0x21e4cee2,0x5c45152b,0xb98ee602,0x94728a74,
    0x5d426509,0x2a48b262,0x5d4ae62b,0x728b8322,0x8a504c91,0x4a5932b9,
    0x98dcc932,0x5cc3572a,0xa8055504,0x47751542,0x170e71a9,0x0f2e0eee,
    0x4d4a6235,0x545cee63,0x30457100,0x5c4a2631,0x8e327571,0x4a9a4dc3,
    0x42a61795,0x70a0e4ba,0x8ea6330e,0x38a6e1c8,0x80e14cc7,0x939ce38b,
    0x73bb8ae2,0x07704c97,0x3926e38e,0x384d426a,0x5c6e2707,0x49950e39,
    0x9822a3a8,0x44c7532b,0x55528e73,0x229a9644,0x3cb85c0d,0x99d4c622,
    0x31d8ea3a,0x464aea75,0xa4dcae23,0x545774ab,0x5cc7550b,0x1dd45532,
    0x543b090e,0x998ea63c,0x1ab921c1,0xa8ddd2a2,0x5d52ae4a,0xa83b8262,
    0x8e49b8e0,0x4e1550aa,0x71b885c4,0xbb8b6693,0x88292724,0x73803608,
    0x0dc45550,0xca8e6a33,0x5c40b572,0x42263711,0x77700189,0x2e000dc0,
    0x4285352c,0x0e3bb803,0x234e4917,0x070aea0d,0x1c6e639c,0x769c2e2e,
    0x8b964c2a,0x96ccf2a3,0x054f6673,0x70ef2575,0x428eee08,0x00e22199,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x24000000,0x75324204,0x82199854,0x01b89408,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x98710000,
    0x80c07510,0x4ba92199,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000110,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__consolas_6_latin1_x[224]={ 0,1,0,0,0,0,0,1,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__consolas_6_latin1_y[224]={ 4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,0,3,2,
3,-1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,4,-1,1,-1,1,-1,1,-1,1,-1,-1,
-1,-1,-1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,-1,-1,-1,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,-1,0,0,0,
-1,-1,-1,0,0,1,2,2,-1,0,-1,0,-1,-1,-1,1,-1,1,4,-1,0,1,-1,-1,-1,1,-1,-1,-1,-1,
-1,-2,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,
-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,
 };
static unsigned short stb__consolas_6_latin1_w[224]={ 0,2,3,4,3,4,4,1,3,3,3,4,3,3,
2,3,4,3,3,3,4,3,3,3,3,3,2,3,3,3,3,3,4,4,3,3,4,3,3,3,3,3,3,4,
3,4,3,4,3,4,4,3,4,3,4,4,4,4,3,2,3,3,3,4,2,3,3,3,3,3,4,4,3,3,
3,4,3,4,3,4,3,3,4,3,3,3,4,4,4,4,3,3,1,3,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,2,3,3,4,4,
1,3,3,4,3,3,3,3,3,3,3,3,3,3,3,4,3,2,1,3,3,3,4,4,4,3,4,4,4,4,
4,4,5,3,3,3,3,3,3,3,3,3,4,3,4,4,4,4,4,3,4,3,3,3,3,4,3,3,3,3,
3,3,3,3,4,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,3,3,3,3,4,3,4,
 };
static unsigned short stb__consolas_6_latin1_h[224]={ 0,6,3,4,6,6,6,3,7,7,4,4,3,1,
2,6,5,4,4,5,4,5,5,4,5,4,4,5,5,3,5,6,7,4,4,5,4,4,4,5,4,4,5,4,
4,4,4,5,4,6,4,5,4,5,4,4,4,4,4,7,6,7,3,2,3,4,6,4,6,4,5,5,5,5,
7,5,5,3,3,4,5,5,3,4,5,4,3,3,3,5,3,7,7,7,2,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,6,4,4,4,
7,6,3,5,3,3,2,1,4,2,3,4,4,4,3,5,6,2,1,4,3,3,5,5,5,5,5,5,5,5,
5,6,4,5,5,5,5,5,5,5,5,5,4,5,6,6,6,6,6,3,6,6,6,6,6,5,4,6,6,6,
6,6,6,6,4,4,6,6,6,6,5,5,5,5,6,5,6,6,6,6,6,4,5,6,6,6,6,7,7,7,
 };
static unsigned short stb__consolas_6_latin1_s[224]={ 245,165,191,173,224,210,232,254,19,43,160,
168,183,221,195,220,89,139,127,98,178,102,106,156,115,96,88,146,150,188,166,
228,23,104,164,184,151,147,143,158,135,131,192,122,118,113,109,206,100,192,91,
215,83,142,73,68,63,58,54,28,70,15,197,206,205,22,136,14,197,5,175,
196,180,188,33,201,211,208,201,49,138,162,183,1,154,219,192,230,221,170,226,
39,37,47,214,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,245,253,183,
31,35,223,31,237,235,110,213,217,198,221,242,202,243,250,246,232,187,63,241,
211,219,228,239,247,30,25,133,17,72,58,49,40,35,215,236,5,9,245,1,
21,13,45,119,249,9,85,187,205,178,173,168,251,160,156,152,148,144,128,18,
132,128,124,120,116,112,201,26,40,95,91,87,140,54,68,77,81,104,94,56,
61,51,74,99,44,123,66,83,79,108,10,6,1, };
static unsigned short stb__consolas_6_latin1_t[224]={ 7,1,19,15,1,1,1,9,1,1,15,
15,19,19,19,1,9,15,15,9,15,9,9,15,9,15,15,9,9,15,9,
1,1,15,15,9,15,15,15,9,15,15,9,15,15,15,15,9,15,1,15,
9,15,9,15,15,15,15,15,1,1,1,15,19,15,15,1,15,1,15,9,
9,9,9,1,9,9,15,15,15,9,9,15,15,9,9,15,15,15,9,15,
1,1,1,19,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,1,1,
15,15,9,1,1,15,9,15,15,19,19,9,19,15,9,9,9,19,9,1,
19,19,9,15,15,9,9,9,9,9,9,9,9,9,1,9,9,9,1,9,
9,9,9,9,1,15,9,1,1,1,1,1,15,1,1,1,1,1,9,15,
1,1,1,1,1,1,1,15,15,1,1,1,1,9,9,9,9,1,9,1,
1,1,1,1,15,9,1,1,1,1,1,1,1, };
static unsigned short stb__consolas_6_latin1_a[224]={ 53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_6_latin1_BITMAP_HEIGHT or STB_FONT_consolas_6_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_6_latin1(stb_fontchar font[STB_FONT_consolas_6_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_6_latin1_BITMAP_HEIGHT][STB_FONT_consolas_6_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_6_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_6_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_6_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_6_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_6_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_6_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_6_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_6_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_6_latin1_s[i] + stb__consolas_6_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_6_latin1_t[i] + stb__consolas_6_latin1_h[i]) * recip_height;
            font[i].x0 = stb__consolas_6_latin1_x[i];
            font[i].y0 = stb__consolas_6_latin1_y[i];
            font[i].x1 = stb__consolas_6_latin1_x[i] + stb__consolas_6_latin1_w[i];
            font[i].y1 = stb__consolas_6_latin1_y[i] + stb__consolas_6_latin1_h[i];
            font[i].advance_int = (stb__consolas_6_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_6_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_6_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_6_latin1_s[i] + stb__consolas_6_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_6_latin1_t[i] + stb__consolas_6_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_6_latin1_x[i] - 0.5f;
            font[i].y0f = stb__consolas_6_latin1_y[i] - 0.5f;
            font[i].x1f = stb__consolas_6_latin1_x[i] + stb__consolas_6_latin1_w[i] + 0.5f;
            font[i].y1f = stb__consolas_6_latin1_y[i] + stb__consolas_6_latin1_h[i] + 0.5f;
            font[i].advance = stb__consolas_6_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_6_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_6_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_6_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_6_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_6_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_6_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_6_latin1_LINE_SPACING
#endif

