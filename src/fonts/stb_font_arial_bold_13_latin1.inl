// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_bold_13_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_bold_13_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_bold_13_latin1_BITMAP_WIDTH         256
#define STB_FONT_arial_bold_13_latin1_BITMAP_HEIGHT         68
#define STB_FONT_arial_bold_13_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_bold_13_latin1_FIRST_CHAR            32
#define STB_FONT_arial_bold_13_latin1_NUM_CHARS            224

#define STB_FONT_arial_bold_13_latin1_LINE_SPACING           8

static unsigned int stb__arial_bold_13_latin1_pixels[]={
    0x1510a266,0x14c03500,0x03303930,0x2aa20e44,0x21105551,0xaa988001,
    0x300a880a,0x2e02a205,0x01551003,0x26150a98,0x4403b802,0x0088400a,
    0x04c02611,0x64405408,0x30032602,0x30154039,0x26f20111,0x300be60e,
    0x137e601d,0x206985c8,0xb4ff885b,0x1f39b0ff,0xffa81b50,0x3f622fff,
    0x7f7ec5ff,0x7cc17cc0,0x377fa200,0x1ff881ff,0x8813f63f,0x036f401f,
    0x2e01ddd5,0x01f105f6,0x5b81f832,0x26c04d80,0x3e03fb90,0xf98006ba,
    0x54404402,0x2a23530a,0x1f435131,0x46a21351,0x513dc2f8,0xfd86a615,
    0x37ffa1ff,0x5cbfa0ec,0x0729f13f,0x01731026,0x3f504ba2,0xc87e0fa8,
    0x40175106,0x51009ab8,0x4d5c4035,0x8b105c80,0x2a03b81f,0x5542acba,
    0x5e542aac,0x5de542bb,0x1f73ec2c,0xd8fff7e6,0x1fc43ee7,0x98fe27f3,
    0x3f89b23f,0x217c4fe6,0xf98fe27b,0x45995f33,0x265ccffe,0x13fa0c4f,
    0xffd317cc,0xe8ae83bf,0x544ccfcf,0x30f70fc7,0x983bfffd,0x4c1dfffe,
    0x4c1dfffe,0x7c1dfffe,0xf077f543,0x882ff883,0x227fffff,0x227fffff,
    0x227fffff,0x547fffff,0x77ccbd1f,0x23f51fb9,0xf98fe25e,0x1fcc7f13,
    0xf31fc4f7,0x4f70be27,0x44fe63f8,0xcffa84cf,0xa80bea5c,0x7cc0efcf,
    0x3aa2bfa2,0x5d3ad30e,0x23e468af,0xfd03ee1f,0x741dd515,0x20eea8af,
    0x0eea8afe,0x3baa2bfa,0xccf83f10,0xff707e4e,0x4407f10b,0x80fe203f,
    0x9cf803f8,0x7c4fe62f,0x88be73e3,0x7c4fe63f,0x1fa8fe63,0x89fcc7f1,
    0x7f13dc2f,0x7ff91fcc,0x4cb99d10,0x263f203f,0xf997cc6f,0x8cb97dc4,
    0x4d11f50f,0x774403fb,0x2fb89f30,0x32fb89f3,0xf32fb89f,0x3f32fb89,
    0x0fc2cfd4,0xf103f37a,0x101fc407,0x01fc407f,0x3e63dfe4,0x5fe47f13,
    0x7f31fc47,0x23f98fe2,0x4c7f10f9,0x7b85f13f,0x43f98fe2,0xccd84fea,
    0x27f12f45,0x4c7a8ef9,0xf985f52f,0xbdcf5793,0x100fee3b,0x30bea1dd,
    0xf30bea7f,0x7f30bea7,0x27f30bea,0x32bea0f9,0xaf987e08,0x7ffc44f8,
    0x3ffe25ff,0x3ffe25ff,0x3ffe25ff,0x4ff985ff,0x07e577cc,0x3f889ff3,
    0x31fc4fe6,0x7f13d47f,0x42f89fcc,0xf98fe27b,0x0d793533,0xcfc8b99b,
    0x3fe60fea,0xf997cc3e,0x9da9fd43,0x0ebef9af,0x7b87e3e4,0x4fea1fcc,
    0x99fd43f9,0xf99fd43f,0x1f89fd43,0xf9baffe2,0x1fa67f21,0x43555bf1,
    0x21aaadf8,0x21aaadf8,0x01aaadf8,0xfdf983fd,0xf81fe83f,0x24f8be64,
    0x9f1b22f9,0x42f897cc,0x5f327c7b,0x213b77e6,0xfda85ccd,0x42fd882e,
    0xf917e2f9,0x33ae3e23,0x3dc08dfd,0x5f86b87e,0xc8bf0fe4,0x3f917e1f,
    0xf87f22fc,0xf0f7fd43,0x7fffffc3,0xf880fe22,0x880fe203,0x30dd003f,
    0xd06e805f,0x741fd57f,0x3a0feabf,0x7f55ff42,0x47b85f10,0x20feabfe,
    0xcd80cffb,0x885b505c,0x2fa89f2d,0x17f6b7f2,0x8bb103d5,0x6c87e0fa,
    0x5fdadfc8,0x2fed6fe4,0x17f6b7f2,0x8bfb5bf9,0x7c06c45c,0xf3337f51,
    0x5556fc4b,0x555bf10a,0x2ab7e215,0x55bf10aa,0x17fd4155,0xffa817cc,
    0x5fffd302,0x22fffe98,0xfffe9869,0x7ed3fe22,0x17fff4c7,0xb99b024c,
    0xfb079510,0x07fd43fd,0x540b7f6a,0x84fecdee,0x363f1ff8,0x5bfb504f,
    0x40b7f6a0,0xb502dfda,0x41f105bf,0x1f63f02a,0x7ffc43f2,0xfff10fff,
    0x3fe21fff,0xff10ffff,0x5441ffff,0x54402601,0x01001001,0xa8808033,
    0x0405551a,0x08888020,0x2a600a88,0x000054c0,0x260054c4,0x00a6150a,
    0x00000000,0xa8020980,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x21dc0000,
    0x4032604a,0x02a801c9,0x222206a2,0x42008401,0x22022300,0x04a8330a,
    0x05115004,0x806a0235,0x01530108,0x01a80151,0x00460153,0x80151035,
    0x40351029,0x9814c04b,0x44cc0a89,0x10152882,0xe807e23f,0x2602e403,
    0x1fbb03de,0x3207abe8,0xbddb06ee,0x449d1f30,0x41fefffd,0xefea81bc,
    0x986b9f81,0x80f980ef,0x7ec1eee9,0x205c81fe,0x4df980f9,0xd306edc8,
    0x7d013201,0x6c03b7a0,0x09bf300d,0xbc81d197,0x2dad40e9,0x83711b88,
    0x206a212a,0x0ddc404a,0x5c40aa98,0x2225501b,0x301d441a,0xa97ec155,
    0x9f03887f,0x4fd44bb1,0x0fd640dd,0x08888098,0x81fc5fc4,0x44406202,
    0x44010818,0x80600c00,0xff880889,0x40311102,0x30040000,0xf70fe67f,
    0x3e20fe47,0x0bfe202f,0x7fc41fcc,0xf10ff882,0x302ff887,0xe8a7c47f,
    0x3fff22fd,0x7f407ea1,0x3662ffff,0x3faa0eff,0x177f542e,0xc81f75f1,
    0x7fe41fff,0x0fffe41f,0xd707fff2,0xcfeb819f,0x2177f540,0xfb82efea,
    0x19fd705f,0x5c1fffc8,0x7f540cfe,0xf33f982e,0x9f31fd07,0x5c0bff70,
    0x07f305ff,0xff10bff7,0xff70fe29,0xfa8fe60b,0x227f39b2,0x3ea4f8ad,
    0xf8cc8111,0x97ed6f40,0x10fc9df8,0x261f93bf,0x3620fdaf,0x2b624f8a,
    0x22b624f8,0x3e2b624f,0x8fa6fe24,0x223e9bf8,0xf10fc9df,0xde81f93b,
    0x4dfc40fc,0x3e2b623e,0x8fa6fe24,0x40fc9df8,0x307f33f9,0xbd01fd9f,
    0x337a01f9,0xe83f980f,0x7fc40fcd,0x6f43f89f,0x23f980fc,0x5f55daf9,
    0x3e2fedcc,0x37aa6e9d,0x23f50afb,0x223f54f8,0x3e23f53f,0x8bf35f33,
    0x5cc5fdb9,0x7edcc5fd,0x72fedcc5,0x7dcbd99f,0x47ea5ecc,0x223f53f8,
    0x3e2be63f,0x2f667dc4,0xfb97f6e6,0x47ea5ecc,0x99fcc3f8,0x05ff903f,
    0x309f15f3,0xf309f15f,0x4f8af987,0x7c77dfc4,0x13e2be63,0x4bdf0fe6,
    0x3a73e67c,0xd0f7ed45,0x2a5fffff,0x3ea7f11f,0x47ea7f11,0x2a5f33f8,
    0xbd39f33f,0x32f4e7cc,0x7ccbd39f,0x2fee5e9c,0x2afee2aa,0x7c47ea2a,
    0x8fe23f53,0x5c7e99fc,0x3e62aabf,0x2fee5e9c,0x447ea2aa,0xf99fcc3f,
    0x320df103,0xfc87e99f,0x3f987e99,0x23f4cfe4,0x3fbfaaf8,0x21fa67f2,
    0x567ec3f9,0x267ee4fc,0x4c3da85f,0xb3bf09b7,0x3277e21f,0xf93bf10f,
    0x3e6abe61,0x4bf33f74,0x2e5f99fb,0x3ee5f99f,0x2fe65f99,0x22fe63d8,
    0x3277e23d,0xf93bf10f,0x7fffffc1,0x8f62fe62,0x265f99fb,0x3e23d8bf,
    0x7cc0fc9d,0x2fc07f33,0x2ffffff8,0x17fffffc,0xffff0fe6,0xd97c45ff,
    0x3fffe3ff,0x51fcc2ff,0x885bfd7d,0x5446defe,0x82eb5c5c,0x74c2dfd9,
    0x6ff4c2df,0x3bf2be62,0x4dbdfd10,0x226defe8,0x3a26defe,0x7ed46def,
    0x077ed40e,0xd30b7fa6,0x4dfd45bf,0x7ed45f99,0x37bfa20e,0x2077ed46,
    0xf982dfe9,0x2fc07f33,0x7cccdfd4,0x2666fea5,0xf51fcc5f,0x44bf3337,
    0x2a7ff12f,0x45f999bf,0x000043f9,0x06110350,0x00000000,0x00000000,
    0x00000000,0x003f21f6,0x30000000,0xf80fe67f,0x0fc87d85,0x4c1f90fb,
    0x3f21f63f,0x9fdc5f10,0x260fc87d,0x0000003f,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x0d400000,0x82819800,
    0x1440c428,0x88298062,0x1a881442,0x9440d440,0x02a2000a,0x403102a0,
    0x01a801a9,0x2a600cc0,0x220a8800,0x00300999,0x102a0153,0x000d4435,
    0x26031004,0x07a8000a,0x3d950be6,0x91ba615c,0x0e46e983,0x6cf885d0,
    0x3bbe20f6,0x303b7a05,0x71fa8b6d,0x100be61f,0x20dffb8f,0x01ffffe8,
    0xfb9f67f1,0x303bff60,0x401bb57d,0x3fff22f9,0x40fff545,0x40ddbce9,
    0xf31fc42d,0x0fff3e67,0x6c5f9fd5,0x3bf60fff,0x83c97a2f,0x2a072200,
    0xd530b10f,0x3354c2cc,0x8da8080b,0x3f50798f,0x044601f5,0x3ee3f500,
    0x5a805f30,0xe8fe2fe2,0x106e98bf,0x2f47ea7f,0x4c7f35f3,0x0598aaad,
    0x99dd8be6,0x226d3e20,0x598ba8d9,0x98fe225c,0xf93df33f,0x97ecefc3,
    0xf13f8af8,0xf13b9365,0x0fccbe67,0x791307a2,0x1b34c072,0x980d9a60,
    0x3a63f32f,0x3e207b79,0x32f985fe,0x7ccbe63f,0x43ee3f51,0xc84fecf9,
    0x8af47ea3,0xf880444f,0x40be73e3,0x2f2360fa,0x7fdc397b,0x02f7e2fc,
    0x1b0135f5,0x9872d5b5,0x7f31fc46,0xa9fc4fe6,0x3e25f31f,0x05f13f9b,
    0x4e7ff4aa,0xfc83f32f,0x2cc6ecc0,0x9812a930,0x4be60954,0x26bb21f9,
    0x41bfa207,0x263f32f9,0x3ea3f32f,0x3be61f92,0x70f41fb9,0x97d5ba1f,
    0xf880aaa8,0x541eff23,0x5bccb44f,0x3633e273,0x7fdff12f,0x217f7fdc,
    0x223983b6,0xf98fe20f,0x4fe27f33,0x5c5f51f9,0x3bbf66ff,0x8cf9a641,
    0x643f52f9,0xf50d802f,0x0775c740,0x7ccf50e8,0x2f603f52,0x9bf11ee9,
    0x97cc5d7f,0x2a5f31fa,0xfd3bf51f,0x1fc4fe61,0xdd1fb8f1,0x7ffccfe6,
    0x3e63f882,0x49f3104f,0x4ea3d796,0x4c5f51fa,0xd9fdcdb0,0x2a52cb45,
    0x47f11743,0x93df33f9,0x7ecefc1f,0x29f59f12,0xa6c0aeea,0x2a7f33f8,
    0x80c5f31f,0x2e0fb34a,0x7703d153,0x53f99f66,0x2f6f303f,0x3f63f54c,
    0x7d4fe61f,0x47ea7f31,0x30fdfefa,0x6a8fe27f,0xf15e8fd4,0x2952fa8d,
    0x20ff43f9,0xc9c9b628,0x3ea3b689,0xc8625f51,0x23e4bea7,0x3b6ce99c,
    0xf327c4c8,0x0fff7e65,0x2e5f9fd5,0x8274db0f,0x3e27f15e,0x5f11fd8c,
    0x743a0bea,0x363441fb,0x3efa6884,0x3fb19f11,0x56ef67b0,0x3ffc9cf8,
    0x47f633e2,0x51fd8cf8,0x5df3013f,0x222641f9,0x3ee3facf,0xf72febae,
    0x86e83f97,0x223fabf9,0xbf13222e,0x33e25fb3,0x74f7c5e9,0x9918f444,
    0xabfe8d50,0x005f30fe,0x4e7c4be6,0x7579f94f,0x3219f374,0x3f21fbff,
    0x2a3b85ff,0xfb1641fa,0x2aa2c839,0x3efff21f,0x5dd53cc1,0x2edffed4,
    0xc87efff2,0x3f51fbff,0x0fff3e60,0x09fd505d,0x445bffd7,0x3fea3ffd,
    0x819fd702,0xa83eded8,0x3ae2fbfe,0x6fecc0bf,0x3eded880,0x7f4c1f10,
    0x00be62ff,0xbfd717cc,0x3fff7b21,0x02fecdd0,0x181406a0,0x204ccc28,
    0x33000302,0x00010088,0x00054400,0x00800030,0x0001a880,0x00000010,
    0x00c00400,0x98002601,0x15408000,0x00000002,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x10054c40,
    0x00054401,0x54401a98,0x01a85300,0x33331154,0x20d55543,0x2002a22a,
    0x9aaa80a8,0xa8815100,0x55555301,0xaaaaa855,0x05442a22,0x15104220,
    0x0aa002a2,0x01882a88,0x21a9446a,0x2aaa21a8,0xaaaaa809,0x306a0aa1,
    0xd83bfffd,0x3f620cff,0x5f7dc5ff,0x3ffff22f,0x6fffecc1,0x07f11741,
    0xfff70f98,0x3fffe2ff,0x3ec3f26f,0x103f617a,0xb87fffff,0x0fe65fef,
    0x7ffffffc,0x3ffffe26,0x17ccfe27,0x443ddd30,0x8805f13f,0x1dfb02ff,
    0x2a0fffec,0x4591d34f,0xfff10fdd,0x7ffc47ff,0x983f64ff,0x5457f43f,
    0xf33f30ee,0x3fb97f47,0x25fb19f1,0xe8bf13f8,0x20fea8af,0x66f77c40,
    0x33310880,0xfb8fe27f,0x87f39f12,0x207fdc2b,0x1fd98bf8,0x4cbe67f1,
    0x5e9fb83f,0xf880fe20,0x84405f33,0x25f10980,0x20bff700,0x7457cc4f,
    0x2013ff25,0x22fe2111,0x07f11fd9,0x41f91fd4,0xb97dc4f9,0x227cd7e7,
    0x17d47ea1,0xf98115df,0x3f897e44,0x1bf73be2,0x44d907f1,0xfc87ee3f,
    0xfdf8807d,0x9f11fc40,0x3e65f304,0x40bd5e83,0x4fe203f8,0x225f9af9,
    0x3e25fdbf,0x0bfd9f13,0xfe81f9bd,0x15e8626f,0x1fc49f3d,0x23f88fe2,
    0x807f14f8,0x5f517e5f,0x35f33f98,0xa80beadf,0x7d45f51f,0x0bea0dff,
    0x88fe27f3,0xf883f23f,0xff117c43,0x7f649fff,0x33600eff,0x677e40fa,
    0x4bf30bf0,0xe97d43f9,0x3e24ffff,0x3e25ffff,0x88bf7f33,0xf11fc8ef,
    0x3f23be27,0x13e2be61,0x3ee01bf1,0x0fe24f82,0x21fc47f1,0xfffff15f,
    0x85f31f90,0x91fd43f9,0x0fe6dddf,0x2feadf88,0x3ea6fca8,0x3f89fcc2,
    0x20fd8fe2,0x223643f8,0x52fcaadf,0x5c199fd9,0x81f51f72,0x0bf0adfb,
    0x743f98bf,0xaaaefaaf,0x2aab7e21,0x7fccfe21,0xf99fc42f,0x4fe27f12,
    0x267f22f9,0xf704f87e,0x3f893e09,0x87f11fc4,0x555bf15f,0x20f97f30,
    0x420fe45f,0x3f897a5f,0x54beb766,0x7cc3f21e,0x223f7575,0x3fffe23f,
    0x3a1fc44f,0x57e1fc43,0x20eeffec,0xfffffb5e,0x9f31fc43,0x1fcc1e88,
    0x0bfffff3,0x7f101fc4,0xf11b7be6,0x9fc4be65,0x7c5f32f8,0x7c2fffff,
    0x3e04fa84,0x7f10fe24,0x29f11fc4,0xfee803f8,0xfb5bf904,0x17ddfccb,
    0x21fd59f9,0x7c3f51b8,0x7ec6fbae,0x3e26ffcd,0x06ab7e23,0x42f88fe2,
    0x4fcaadf8,0x9855fb53,0x17f95554,0x7f5d6fc4,0x3e60e440,0xaee83f63,
    0x2b7e22aa,0x27f10aaa,0x223f9af9,0x3e25f32f,0x4be65f13,0x5f999bfa,
    0x2bfe227c,0x3e24f82a,0xbf11fc43,0x3e21fd75,0x02ffc803,0x320b7f6a,
    0xefda82ef,0x237f7f42,0xc81effda,0xf13fefff,0x2201fc47,0xf107e63f,
    0xf909ffff,0x03ea0320,0x03bffff1,0x33f985f1,0xffffe89f,0x3ffffe27,
    0x3e67f10f,0x4be21f92,0x227f12f9,0x1f65f32f,0x5c4f83f2,0x4f86ffff,
    0x47f10fe2,0x21dffff8,0x7f9803f8,0x00000000,0x10000553,0x0000015c,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x21a80000,0x0d4551a8,0x5554c551,0x555512aa,0x2a215435,
    0x854c1531,0x2986a62a,0x154c1551,0x35013555,0xa80261a8,0x02009aaa,
    0x10020800,0x20040002,0x01016a00,0x04333331,0x04104000,0x00210104,
    0x11fc4001,0x27c57e7f,0x7ffec5fb,0xffff56ff,0xf91fdcbf,0x26e97e63,
    0x5e97f67d,0xb7f49ff1,0x23fffff8,0x27f10ff8,0xfff104f8,0xffd81dff,
    0x3e65f30e,0x3f7ffee1,0x77fecc4f,0x5033fae1,0xffc83dfd,0xd506b81f,
    0x708045df,0x3f71005d,0x36ffafe6,0xfb7f10ef,0xd9fefc4b,0x1f303ee6,
    0x4fe23f88,0x3f69f15f,0xe805f303,0x7cc7f41f,0x17e57dc4,0x45ffe1f7,
    0x22dff13f,0x267f16ff,0x453fe27e,0x2209f13f,0xfa8fee3f,0x25f31c89,
    0xf15b11f9,0x6fc5f33f,0x37f12fe8,0x5d8cf87d,0xa93e2b62,0x3e24cfec,
    0x2010fc9d,0x819ffb30,0xf30cffc9,0x7f35fd1b,0x47ee37e2,0x3f30aef8,
    0x103e617a,0x5e9fc47f,0x407f99f1,0x0ff202f9,0x203fb3e6,0x57cc5ffe,
    0x1fa9fcf9,0xbf51fbf1,0x0fc8fe2d,0x7f13fff1,0x1fc413e2,0x77fc47f3,
    0x3ea5f30b,0x33ff6e21,0x973f54fc,0x3b33ee9f,0xb9807ea5,0x3fbb25fd,
    0x223f50ee,0x7102013f,0x0bbea3fd,0x9f3e4be6,0x88fccfe2,0x1f9ce83f,
    0x47bbfbaa,0x3ffffff8,0x3fffe29b,0x5c0be603,0x0bff204f,0x3e207fd4,
    0x7bbf8fbc,0x372befe2,0xf99df16d,0x477dfc4d,0x2209f13f,0x40efeeef,
    0x7f34fdb8,0x4efcc7ea,0xf51aaafe,0x5fdcfeb7,0x447ea2aa,0x17a73e60,
    0x447ea1ae,0xb502013f,0x33fe61df,0x27c8fcc1,0x3e65f14f,0x9f705f11,
    0xcdfdca8d,0xf755bf11,0x5ffc4f27,0x05f300fe,0x6f880df3,0x3a0bff60,
    0x4dbbb5dd,0xdbeceaf8,0x19dddf16,0x7dfd57c4,0x3e209f13,0x9ea86fce,
    0xb19f15e8,0x3e27ea3f,0xff12e9af,0x2fe61f93,0x74efc3d8,0x17e67ee6,
    0x277e21ae,0x4c2010fc,0xfd502dfe,0x3e47e61d,0x7ccbe29f,0xff105f11,
    0xf103e607,0x12b9fc47,0x4c17e69f,0x007fc42f,0xecfa82fc,0xb9ffe40f,
    0x32be24ff,0x7f16d9ff,0xffd97c40,0x3e209f13,0xffb0bf53,0x7dffe43b,
    0x3f73ff61,0x37fba25f,0x2077ed42,0x3a21efda,0x2aa66def,0x6ff4c2aa,
    0x1cb84022,0x3e63b300,0xf8a7cf91,0x0be23f32,0x0e9807ec,0x27f11fc4,
    0x7ec9f12b,0x7ec2f982,0xbf02aaac,0xbf31df10,0xff31ffa8,0xbfd57c45,
    0x4407f16d,0x227ff12f,0xf11aaadf,0x00017e47,0x00008000,0x3ff60000,
    0x33000fff,0x00033333,0x00000000,0x11fc4000,0x27c57a7f,0x2f981ff1,
    0x37fffff4,0x22fc85f8,0xf1fe22fc,0x7c57c41f,0x80fe2db5,0x44fee2f8,
    0xf15fffff,0x0007fc47,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x22204081,0x00018808,0x4c320081,0x5c065223,
    0x205c42a9,0x54088888,0x2222220a,0x11440c40,0x41983305,0x8cc54429,
    0x083910a8,0x12e44730,0x44bbae37,0x3bbbba1c,0x2253172e,0x3777762e,
    0x0000002d,0x40000000,0x9b25f55d,0x642ffffb,0x5bcbda87,0xe97e2bee,
    0x8bf5dd15,0x4f545bcd,0x2e1fe41f,0xb31fffff,0x7fffdcb9,0x4c59531f,
    0x5cb9d15e,0x23d952dd,0x2bea4dea,0x3e23f76d,0x597dfd52,0x90ea99ec,
    0xf89775cb,0x26666662,0x362b55d0,0x2aaaaaa1,0x00000000,0x5c000000,
    0x893e9f97,0x14c0efa9,0x227f7fcc,0x8ae0fdfd,0x9f985fe8,0x89d5f13f,
    0x55446df8,0xdd930aaa,0x8fd55544,0xb510cfea,0x8ba234ea,0x4f15b0fa,
    0x1f56d9f9,0xfdabb8e4,0x20a9840e,0x00000000,0x00000000,0x00000000,
    0xf3fbd3f1,0x7643fb03,0x47e66eee,0x017fc44d,0xf103bfe6,0x3abe27d5,
    0x317c7644,0x36199999,0x47e206bc,0xd2cc3ce8,0x1317447d,0x896f2e79,
    0x44913a8c,0x00000003,0x00000000,0x00000000,0x33a00000,0xfd87cf9f,
    0x266665c2,0x889d15f1,0x37e204ff,0x35e6c6e8,0x7c43e7aa,0x77754db3,
    0x097b31ee,0x81130f44,0x9f764049,0x39710dd9,0x00000000,0x00000000,
    0x00000000,0x00000000,0x713fadf7,0x4a8355bf,0x45ffffa8,0x8ae1fcee,
    0xc8c88622,0x022a9b80,0x00000001,0x00000000,0x00000000,0x00000000,
    0x00000000,0x4c000000,0xfd85f74f,0x43643fff,0x2e39a9b8,0x02f4dd1f,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_bold_13_latin1_x[224]={ 0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,-1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,
1,0,0,-1,0,0,0,0,-1,-1,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,-1,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__arial_bold_13_latin1_y[224]={ 10,1,1,1,0,1,1,1,1,1,1,2,8,6,
8,1,1,1,1,1,1,1,1,1,1,1,3,3,2,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,1,3,3,3,3,3,3,1,1,1,4,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,10,3,1,1,2,1,
1,1,1,1,1,4,3,6,1,0,1,2,1,1,1,3,1,5,10,1,1,4,1,1,1,3,-1,-1,-1,-1,
-1,0,1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,3,1,-1,-1,-1,-1,-1,1,1,1,1,
1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,1,1,1,1,1,1,1,
 };
static unsigned short stb__arial_bold_13_latin1_w[224]={ 0,2,5,7,6,10,9,3,4,4,5,7,3,4,
3,5,6,5,6,6,7,7,7,6,6,6,2,3,7,7,7,7,12,9,8,8,8,8,7,9,8,3,6,9,
7,9,8,9,8,9,9,8,7,8,9,11,8,9,7,4,5,4,7,8,3,7,7,7,7,7,5,7,7,3,
4,7,3,10,7,7,7,7,5,6,4,7,7,10,7,7,6,5,2,5,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,2,7,7,7,7,
2,7,4,10,5,6,7,4,10,8,5,7,4,4,3,7,8,3,4,3,5,6,10,10,10,7,9,9,9,9,
9,9,13,8,8,8,8,8,4,4,5,5,9,8,9,9,9,9,9,7,9,8,8,8,8,9,8,7,7,7,
7,7,7,7,10,7,7,7,7,7,4,4,5,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
 };
static unsigned short stb__arial_bold_13_latin1_h[224]={ 0,9,4,10,12,10,10,4,12,12,5,7,4,2,
2,10,10,9,9,10,9,10,10,9,10,10,7,9,8,5,8,9,12,9,9,10,9,9,9,10,9,9,10,9,
9,9,9,10,9,10,9,10,9,10,9,9,9,9,9,12,10,12,6,2,3,8,10,8,10,8,9,10,9,9,
12,9,9,7,7,8,10,10,7,8,10,8,7,7,7,10,7,12,12,12,4,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,10,12,10,7,9,
12,12,2,10,5,6,5,2,10,2,5,8,5,5,3,10,12,2,3,5,5,6,10,10,10,10,11,11,11,11,
11,10,9,12,11,11,11,11,11,11,11,11,9,11,12,12,12,12,12,6,10,12,12,12,12,11,9,10,10,10,
10,10,10,10,8,10,10,10,10,10,9,9,9,9,10,9,10,10,10,10,10,7,8,10,10,10,10,12,12,12,
 };
static unsigned short stb__arial_bold_13_latin1_s[224]={ 254,10,130,108,76,58,69,136,192,43,98,
247,140,165,170,111,117,209,202,149,101,175,183,73,233,11,43,97,206,76,198,
119,124,186,80,18,227,145,236,124,1,127,134,13,98,70,89,1,80,44,106,
35,23,208,244,58,49,39,31,57,202,62,68,192,152,166,103,158,167,150,196,
27,178,174,109,158,154,214,225,182,217,225,233,116,251,123,239,1,35,141,12,
137,205,146,144,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,
190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,254,248,197,
240,27,89,143,101,183,191,84,61,90,165,156,174,108,174,114,119,161,95,83,
188,156,104,124,54,39,28,17,9,21,208,31,66,47,212,131,92,218,227,236,
245,1,6,41,76,109,57,114,152,162,172,182,46,82,34,48,25,67,11,59,
140,148,156,164,172,230,92,131,100,188,180,222,238,68,54,221,215,116,166,124,
196,204,132,246,19,142,1,50,79,87,17,9,1, };
static unsigned short stb__arial_bold_13_latin1_t[224]={ 1,48,58,14,1,26,26,58,1,1,58,
48,58,58,58,26,26,37,37,26,37,26,26,37,26,37,58,37,48,58,48,
37,1,37,37,37,37,37,37,26,48,37,26,48,48,48,48,37,48,37,48,
37,48,26,37,48,48,48,48,1,26,1,58,58,58,48,26,48,26,48,37,
37,37,37,1,37,37,48,48,48,26,26,48,48,26,48,48,58,58,26,58,
1,1,1,58,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,1,26,1,
26,58,37,1,1,58,26,58,58,58,58,26,58,58,48,58,58,58,26,1,
58,58,58,58,58,26,26,26,26,14,1,14,14,14,14,37,1,1,1,1,
1,14,14,14,14,37,14,1,1,1,1,1,58,14,1,1,1,1,14,37,
14,14,14,14,14,14,14,48,14,14,14,14,14,37,37,37,37,14,37,14,
14,14,14,14,58,48,26,26,26,26,1,1,1, };
static unsigned short stb__arial_bold_13_latin1_a[224]={ 52,62,88,104,104,166,134,44,
62,62,72,109,52,62,52,52,104,104,104,104,104,104,104,104,
104,104,62,62,109,109,109,114,182,134,134,134,134,124,114,145,
134,52,104,134,114,155,134,145,124,145,134,124,114,134,124,176,
124,124,114,62,52,62,109,104,62,104,114,104,114,104,62,114,
114,52,52,104,52,166,114,114,114,114,72,104,62,114,104,145,
104,104,93,72,52,72,109,140,140,140,140,140,140,140,140,140,
140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,
140,140,140,140,140,140,140,140,52,62,104,104,104,104,52,104,
62,137,69,104,109,62,137,103,74,102,62,62,62,107,104,52,
62,62,68,104,155,155,155,114,134,134,134,134,134,134,186,134,
124,124,124,124,52,52,52,52,134,134,145,145,145,145,145,109,
145,134,134,134,134,124,124,114,104,104,104,104,104,104,166,104,
104,104,104,104,52,52,52,52,114,114,114,114,114,114,114,102,
114,114,114,114,114,104,114,104, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_bold_13_latin1_BITMAP_HEIGHT or STB_FONT_arial_bold_13_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_bold_13_latin1(stb_fontchar font[STB_FONT_arial_bold_13_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_arial_bold_13_latin1_BITMAP_HEIGHT][STB_FONT_arial_bold_13_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_bold_13_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_bold_13_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_bold_13_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_bold_13_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_bold_13_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_bold_13_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_bold_13_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__arial_bold_13_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__arial_bold_13_latin1_s[i] + stb__arial_bold_13_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__arial_bold_13_latin1_t[i] + stb__arial_bold_13_latin1_h[i]) * recip_height;
            font[i].x0 = stb__arial_bold_13_latin1_x[i];
            font[i].y0 = stb__arial_bold_13_latin1_y[i];
            font[i].x1 = stb__arial_bold_13_latin1_x[i] + stb__arial_bold_13_latin1_w[i];
            font[i].y1 = stb__arial_bold_13_latin1_y[i] + stb__arial_bold_13_latin1_h[i];
            font[i].advance_int = (stb__arial_bold_13_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__arial_bold_13_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_bold_13_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_bold_13_latin1_s[i] + stb__arial_bold_13_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_bold_13_latin1_t[i] + stb__arial_bold_13_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_bold_13_latin1_x[i] - 0.5f;
            font[i].y0f = stb__arial_bold_13_latin1_y[i] - 0.5f;
            font[i].x1f = stb__arial_bold_13_latin1_x[i] + stb__arial_bold_13_latin1_w[i] + 0.5f;
            font[i].y1f = stb__arial_bold_13_latin1_y[i] + stb__arial_bold_13_latin1_h[i] + 0.5f;
            font[i].advance = stb__arial_bold_13_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_bold_13_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_bold_13_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_bold_13_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_bold_13_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_bold_13_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_bold_13_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_bold_13_latin1_LINE_SPACING
#endif

