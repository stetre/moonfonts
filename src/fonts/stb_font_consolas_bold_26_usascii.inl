// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_bold_26_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_bold_26_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_bold_26_usascii_BITMAP_WIDTH         256
#define STB_FONT_consolas_bold_26_usascii_BITMAP_HEIGHT        102
#define STB_FONT_consolas_bold_26_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_bold_26_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_bold_26_usascii_NUM_CHARS             95

#define STB_FONT_consolas_bold_26_usascii_LINE_SPACING          17

static unsigned int stb__consolas_bold_26_usascii_pixels[]={
    0x2b227dd3,0x054c0001,0x402ba980,0x3333221c,0x000e42cc,0x66540088,
    0x98804ccc,0x9db73000,0x17fe6017,0x9ff50000,0x08000010,0x10003000,
    0x00000001,0x805e77dc,0xff987ffc,0x05ffff34,0x01fff300,0x01ffff44,
    0x3fe21ffb,0x3f24ffff,0x3faa001f,0xffc80dff,0xfc807fff,0xffffb804,
    0xffd01fff,0x7f400001,0x33ffa60f,0x700ffb80,0x9fbdfffb,0x3f22bba6,
    0x32200dff,0xeeeeffff,0x203fe982,0x3ee02db9,0x640cffff,0x4ff986ff,
    0x03ffffd3,0x02fffb80,0x40bffffa,0xff10effd,0x7e49ffff,0xffd801ff,
    0x640effff,0x807fffff,0x7fe403fe,0x1fffffff,0x0003ffb8,0xfe8bff30,
    0x7fc44fff,0xffffd882,0xff34ffff,0xdfffffd9,0xfffff101,0xf07fffff,
    0x3f603fff,0x3ffee02f,0x7fe46fff,0xc84ff986,0x7cc005ff,0xdff501ff,
    0x0fffdc01,0xfe80bff1,0x67fe406f,0x406ffa88,0xf73107fe,0xff30139f,
    0x3ffe617f,0x007ff885,0x545ffb00,0xfe8ff37f,0x57fffb05,0x3e69ffd5,
    0xffccffff,0x8bffd83f,0x40adffd9,0xb02ffff8,0x366005ff,0x3fee4fff,
    0xf04ff986,0x393000df,0x300ffe40,0xff885fff,0x27ffc405,0xfa83ffa8,
    0x11ffa00f,0xfffffff9,0x309ffb0d,0xff903fff,0xff880005,0x3ff2fdc6,
    0x3ea03fee,0xa7fdc0ff,0x2e0efff9,0x46ff87ff,0x3f607ff8,0x5ffb00ff,
    0x27ffc800,0xff985ffb,0x000ffb04,0x803ff600,0xff884ffe,0x1fffa805,
    0x3fe05ff8,0xfd1ffa04,0xdfffffff,0xd01fff88,0xdff107ff,0x3ffb8000,
    0x9ff8b7d4,0xffb02ff8,0x269ff709,0x7fc41fff,0x217fe20f,0x05d407fe,
    0xdfffddd3,0x4c05dddd,0xbff70fff,0x3609ff30,0x3bbba07f,0xb00eeeee,
    0x37fcc0ff,0x9005ff88,0x1ffa89ff,0xfe81bf20,0x2efffee7,0x7cc3a8ef,
    0x13ff207f,0x0000ffec,0x9ff01fff,0x817f6dfb,0xffb82ffe,0x3e0dff34,
    0x07ffc1ff,0x3000dff1,0xffffffff,0x7cc05fff,0x0bff50ff,0x3f609ff3,
    0x3ffffe07,0xfb01ffff,0x81ffe40f,0xf3005ff8,0xd36fe8ff,0x0ff7dddf,
    0x9ffb3ff4,0xffa817ee,0x417ff206,0x50004ffa,0x3ff209ff,0x00ffaaff,
    0x3ee07ffe,0x20dff34f,0x7fe42ffe,0x03ffebbe,0xffccc880,0x01ccccdf,
    0x7d4dffd1,0x04ff985f,0x33203ff9,0x1fffcccc,0x7fc0ffd0,0x0bff102f,
    0xf897ffc0,0xfffff9bf,0x3fa07fad,0x7ed7ff67,0x817fee03,0x3fa05ffb,
    0xffe8000f,0x222ee201,0x7ffc02ff,0xf34ffb81,0x03ffe0df,0xfffffff5,
    0x3f600009,0x7ffd402f,0x3fea1fff,0x504ff984,0xff8007ff,0x06ff881f,
    0x2201fff3,0x3f6005ff,0xfb3ff34f,0xff59ff5f,0xfb9ffa01,0x202ffeff,
    0x3ee06ffb,0x0ffee05f,0x00bff300,0xfe805fd8,0x34ffd82f,0xfff30dff,
    0xccbdff88,0x0cc8800b,0x300bff60,0xa83dffff,0x4ff984ff,0x17dfff10,
    0x543fff00,0xf503fffc,0x2ffc40df,0x2ebff700,0xff4ff8ff,0x3a01ff39,
    0x3fffa27f,0xff502dff,0x027fe40d,0xc800fff1,0x3ea002ff,0x5ffc800f,
    0xf9a7ffe4,0x45ffd86f,0xb0002ffa,0x3f601fff,0x6ffcc02f,0x309ff301,
    0xffc809ff,0x1fff802f,0xb80bbffe,0x3fe204ff,0x5bfe6005,0x8aff9efc,
    0x00ffabff,0xffd88ffd,0x4c1effff,0xffb00fff,0x02ffc807,0x400dff10,
    0x01753ff8,0x3af3ffe6,0xff34ffff,0xfffb535f,0xbcfffa81,0x7fc00aaa,
    0x5ffb03ff,0x204ff980,0xff984ff9,0x3ffff604,0x21fff802,0x700dffff,
    0x7fc409ff,0x5bfe2005,0x99ffadfd,0x207faaff,0xffb307fe,0x7c43ffff,
    0xfff882ff,0x037fcc01,0x2003ffb8,0xfffe8dfd,0xfffffb05,0x3e69ffbf,
    0xffffffff,0xfffffb02,0x3201bfff,0xffb04fff,0x03ee8805,0x3e60bba2,
    0x1bff504f,0x20fffc00,0xf504ffc8,0x2ffc40df,0x3abff500,0xf98ffacf,
    0x3a07fb9f,0x37bee07f,0x7fec5fff,0x02ffec0e,0xe801ffd8,0xff5000ff,
    0x5ff7df91,0x2bbfff20,0xfff34ffb,0x401bffff,0xffeeeffc,0x3ffa06ff,
    0x005ffb04,0x3fe60000,0x001ff904,0xff01fff8,0x81ffe60d,0x32005ff8,
    0xf59fd4ff,0xf93ff51f,0x903ff40b,0x31fff29f,0xfd9bffff,0x3ea003ff,
    0x27fd404f,0xfd3ff880,0x33013ee5,0xff9a7fdc,0xfc80098e,0x1fff984f,
    0x3605ff90,0x6e4404ff,0x4c065c01,0x0ffb04ff,0x203fff00,0xfff107fd,
    0x017fe203,0xbfb3ffe8,0x3ffd3ff5,0x3ff407ff,0x3fea7fb0,0xfffffa87,
    0x74002fff,0x3ff600ff,0x7cdf9001,0x800df51f,0xdff34ffb,0x00fff800,
    0xfd103ffd,0x5fffdc0d,0x3ff21a99,0x0dff900f,0x3f609ff3,0x1fff8007,
    0x7f40ffb0,0x0bff103f,0xfd87ffc0,0xffffff8d,0x3fa00fff,0xb2fe86a7,
    0x3f660bff,0x8001dfff,0xff303ffb,0x87fea00d,0x00bf93fd,0xff34ffb8,
    0xdffe800d,0x913ffdc0,0x4403fffb,0x2fffffff,0x6c07fffa,0x7fcc0fff,
    0x000ffb04,0x3f603fff,0x417fee07,0xf3005ff8,0xfcb7e4bf,0x01fffadf,
    0xdffd3ff4,0x3ffffdff,0x004ffa80,0x641bfe20,0xfe8802ff,0x7ff7fd43,
    0xa7fdc001,0x5c006ff9,0xffefffff,0x3ffe21ff,0xffe9800c,0x3fea2fff,
    0x213fea05,0xffb04ff9,0x03fff000,0xff881ff6,0x05ff882f,0x2e2ffe88,
    0x14c330ff,0x3fa7fe80,0xffffffff,0x1fff9802,0xffc8002a,0x803ffc42,
    0xffd706fc,0x9ff70007,0x2001bfe6,0xffffffea,0x004d440c,0x880ccc40,
    0xf3018801,0x01ffa09f,0x640fff10,0x3fee00ff,0x02ffc41f,0x3e62ffec,
    0xfe80003f,0x3fff72a7,0x7f4003de,0x005ffeff,0xff717fe6,0x01800007,
    0x00000000,0x00013331,0x00000000,0xf109ff30,0xffb800df,0x00ffee06,
    0x7c41dffd,0x7ffdc05f,0x000efe80,0xfb83ff40,0x3fe20005,0x000effff,
    0xeed83bb6,0x00000000,0x00000000,0x00000000,0x3fe60000,0x7ffd7514,
    0x3266b6e0,0x3e603fff,0xf881acff,0x3bfe25ff,0x3fe61aaa,0x3dff503f,
    0xaa9835c4,0x9f907fea,0x9d970000,0x00000007,0x00000000,0x00000000,
    0x00000000,0x269ff300,0x2e06ffff,0x6fffffff,0x3ffffc80,0x223fff30,
    0x24ffffff,0x7e403ffe,0x07ffffff,0x0ffffff9,0x00000ff6,0x00000000,
    0x00000000,0x00000000,0x00000000,0xf9a7fcc0,0x7fd403ef,0x2003ffff,
    0x2603feda,0x3fffe23f,0x00fe64ff,0x77ffff5c,0xfffff903,0x0002620f,
    0x00000000,0x00000000,0x00000000,0x00000000,0x27fcc000,0x02666000,
    0x00200000,0x98800080,0x00000009,0x00000000,0x00000000,0x00000000,
    0x00000000,0x7cc00000,0x0000004f,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x000004cc,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x1e765c00,0x98054c00,0x800006ff,0xffb80009,
    0x540bdd54,0x7ffec5ee,0xff880fff,0x1bfe6007,0x676dcc00,0x00ccb80b,
    0x66541999,0x03cccccc,0x02665544,0x017bdd95,0xcdeeca88,0x37bb6e61,
    0xcccca81c,0xc981cccc,0x001cdeed,0x7fffff44,0xfff5000e,0x00dff301,
    0xffff9100,0x7fdc003f,0x203fff14,0x7fec3ffd,0xf880ffff,0x3fe6007f,
    0xfffc8006,0x7f41efff,0x41fff01f,0xfffffffd,0xfffb306f,0xffd10fff,
    0x207fffff,0xfffffffb,0x3fffff65,0x7ffec5ff,0x223fffff,0xfffffffd,
    0x6c1ff4c5,0x5ffeceff,0x03fff900,0x8000dff3,0xfffffff8,0x93fee002,
    0xff884ffd,0x7dd54c0f,0x7ff880ff,0x01bfe600,0xffffffb0,0x7ff43fff,
    0x6c1fff01,0xffffffff,0xfffffa86,0xeffd87ff,0x41fffecd,0xfffffffd,
    0x3bbbf65f,0x3f64ffff,0x3fffffff,0x3bbffff6,0x7fffc5ff,0xf89bfe21,
    0xfff5007f,0x00dff301,0x9beffd80,0x3ee001ba,0x21ffea4f,0xff805ffb,
    0x07ff880f,0x801bfe60,0xf30bfff9,0x0fff4bff,0x3f60fff8,0x2aaaaabf,
    0x0d77ffcc,0xd81fff10,0x3ffee3ff,0x098ee21d,0x4037fec4,0xfff53ffc,
    0x7fc43105,0x13fea2ff,0x65400ffd,0x08dff301,0x00fffc00,0x89ff7080,
    0x7ff42fff,0x80fff802,0x26007ff8,0xfb00c6ff,0x1fff309f,0x7fc07ffa,
    0x003ff60f,0xa8027fec,0x4ffa85ff,0x0009fff1,0xc807ff98,0x0dff73ff,
    0x307ffec0,0x37fccbff,0xbff30000,0x0037ffb2,0xa800fff1,0x4ffffffe,
    0xff32ffe4,0x03ffe00d,0x3b61ffe2,0x237fe65e,0x220dfffc,0xffd01fff,
    0x7c07ffa7,0x03ff60ff,0x003ffe20,0x360fffcc,0x1fff72ff,0x5ff98000,
    0xf73ffc80,0x5d4003ff,0xf9afff80,0x3bb201ff,0xf980eeee,0xfffffeef,
    0x1bfe600e,0x7ffff440,0x7c44ffff,0x07ff90ff,0x2203ffe0,0x7ffe47ff,
    0x3fbbfe60,0x3e65ffff,0x53ff207f,0xfff01ffe,0x4cd7fec1,0x26bff500,
    0x3ffa0099,0x26ffd8bf,0x40005ffc,0xc802ffe8,0xffff33ff,0xfa800019,
    0x402fffff,0x0ffffffd,0xcfffff98,0x2603fffc,0xffb006ff,0x9ffd557f,
    0x3fe7ffb0,0x1fff000f,0x7dcfff10,0x7ffcc1ff,0x1fffdcff,0x7e40dff5,
    0x203ffd5f,0x3ff60fff,0x642dffff,0xfffffeff,0xfffe881e,0x3f60dfff,
    0x7744004f,0x9002fffe,0x7ffec7ff,0x20002eff,0x801efffe,0x0fffccca,
    0x20efff98,0x7ffc7ffb,0xffffffff,0x207ffd47,0xffa84ffb,0x2005ffad,
    0xff880fff,0x305fff57,0x7f41dfff,0x40bff73f,0x3ffd5ffb,0xfd83ffe0,
    0x3fffffff,0x3ffffff2,0xe881ffff,0x742fffff,0x7cc003ff,0x003effff,
    0xffc87ff9,0x001effff,0x52ffffec,0xfff80199,0x41fff980,0x3fe0fff8,
    0xffffffff,0x427fe47f,0xfff04ffb,0x7c005ffb,0xfff880ff,0xf303fff8,
    0x3ffc83ff,0x7dc0dff7,0x203ffd5f,0x26620fff,0x1fffecb9,0x7359fffb,
    0xfd88dfff,0x24ffffff,0x44003ffe,0xefffedcc,0x41ffe400,0xffffffc9,
    0x7fe40c40,0xff93fffe,0x80fff801,0xfff06ff9,0x7fdd5543,0x742aaaaf,
    0x4ffb82ff,0x0fffff90,0x880fff80,0x04ffefff,0x3ee1bfe6,0x40dff54f,
    0x3ffd4ffc,0x2003ffe0,0xffb3fff8,0x41fff309,0xfd98dffe,0x09ffb2ff,
    0x9fff3000,0x403ffc80,0x2e4fffea,0x3ffe25ff,0xfdafffa8,0x80fff807,
    0xffd06ff9,0x01bfe605,0x3ee07ffe,0xffff304f,0x0fff8009,0xffffff88,
    0x21bfe603,0xfff34ffb,0x74bff601,0x1fff01ff,0x657ff600,0x3fff04ff,
    0x3f61bfea,0x00dff95f,0x01bfee00,0xd1007ffb,0x7fffcdff,0x7dc9ff72,
    0xf806ffff,0x6ff980ff,0x2601fff0,0xfff806ff,0x204ffb81,0x4000fffe,
    0xff880fff,0x302fff9f,0x9ff70dff,0x220bffe2,0x5ffb1fff,0x400fff10,
    0xdff74ffe,0x7e43ffe0,0x77ff983f,0x00005fff,0xfe80dff5,0xdff7002f,
    0xfc97fffc,0x7fffec3f,0x80fff803,0xff986ff9,0x01bfe607,0x3f60bffa,
    0x13ffa04f,0x203ffe00,0xfff97ff8,0x70dff303,0x77fe49ff,0xf92ffec0,
    0x0bff70bf,0x4cbffea0,0x7fd41fff,0x2617ff27,0x3fffa6ff,0xfd002881,
    0x3fe6069f,0x7f40131f,0xa97fee4f,0xfffe85ff,0x80fff800,0xffd86ff9,
    0x01bfe605,0xff917ff2,0x3ffee09f,0x0fff8000,0x3fa7ff88,0x37fcc0ef,
    0xff127fdc,0xfffd9bff,0x56fffcc3,0x641fffba,0xfffecaab,0x55fffec5,
    0x3ea3fffc,0xfea9acff,0x3fffea3f,0x915fecce,0xfff95555,0x2eafba3f,
    0x3bf66fff,0xffffcbcc,0x3fe20c41,0xfffb9adf,0x0fff804f,0xa9afff98,
    0x2600fffd,0xff9806ff,0xffffebcf,0xfff95514,0x75551005,0x25557fff,
    0x3fe27ff8,0x437fcc5f,0x7fd44ffb,0x83ffffff,0xfffffffc,0xfffff84f,
    0x7440efff,0x5fffffff,0xffffffd8,0xfffb85ff,0xf35fffff,0xffffffff,
    0x7fffff45,0x3fff61ff,0x03ffffff,0x3ffffee0,0x22ffffff,0xfffbaaa8,
    0xfff32aab,0x05ffffff,0xb006ff98,0xf9ffffff,0x3fffe69f,0xfff1004f,
    0xdfffffff,0xff51ffe2,0x437fcc9f,0xfd984ffb,0x2a01dfff,0x02efffff,
    0x5bffffff,0x7fffe440,0x3ffee02f,0x36603fff,0x32dffffe,0x7fffffff,
    0xffffeb81,0x7fff5c0d,0x8001dfff,0x9dffffea,0xff11fffa,0xffffffff,
    0x3fffb22d,0xf9800dff,0x3ff2006f,0x34ff8aef,0x4003dfff,0xfffffff8,
    0xfff16fff,0x265fff90,0x4ffb86ff,0x4c000cc0,0x01333001,0x40013100,
    0x44000998,0x13331009,0x20026200,0x00009998,0x22003310,0xffffffff,
    0x013306ff,0x006ff980,0x09a80198,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xdb980000,0x2ea003ce,
    0x2e1bdeec,0x332603cc,0x900b32e4,0x0332a199,0x33267970,0x1ccc880c,
    0x33333326,0x9913cccc,0x00157999,0x43ca8732,0xca80cccb,0x21332a0c,
    0x33263ccb,0x83cc9802,0x9931ccc9,0x20157999,0xcccccccc,0x9970cccc,
    0x99133203,0x99999999,0x20199303,0xeffffffb,0x3fff6200,0x3ea7ffff,
    0x9ffb00ff,0xf5037fe4,0x00ffdcff,0x4fff9bfa,0x2e0fffb8,0xffffffff,
    0xffff36ff,0x403bffff,0x17f62ff8,0xf907fffd,0x0fffe43f,0xffb9fffe,
    0x86ffa804,0x3fea5ffe,0x0dffffff,0x7ffffffc,0xfb1fffff,0x43ffe05f,
    0xfffffff8,0xffe82fff,0xdefffb86,0xf980ffff,0xffffffff,0x4c27ff47,
    0x3fea0fff,0x49ff900f,0x7f401ffb,0x883ffea5,0x7fdc3fff,0xffffffff,
    0xffffff36,0x2601ffff,0xd17f61ff,0xff90ffff,0x527ffec3,0x7fdcffff,
    0x46ffa804,0x3ea0fffc,0xffffffff,0x7fffffc5,0xb1ffffff,0x3ffe05ff,
    0xffffff10,0xf885ffff,0x3fe22fff,0x0fffa22f,0x882ffffa,0x07ffd45a,
    0xff113ff6,0x8bffa05f,0x7f401ffa,0xf72fff45,0x333310ff,0x27fff733,
    0x3ee26ff9,0x1ff505ff,0x3ffa27f4,0x0ffe42ff,0x7e4dfffb,0x13fee7ff,
    0xf99bfea0,0xaffd42ff,0x01fffda8,0xfd817fee,0x01fff02f,0x36017fee,
    0x3ff23fff,0x5c7ffa84,0x74001fff,0x3ffe63ff,0x885ffd80,0x0ffd47ff,
    0xff513fa0,0x05fff13f,0x265ffe80,0x7ffa86ff,0x667fee5c,0xfd3ceffc,
    0xffc8dfff,0x43ffbfa1,0xf70ffdff,0xdff5009f,0x7d427ff4,0x17ffc45f,
    0x6c0bff70,0x1fff02ff,0x2017fee0,0x3fe2fff8,0x1fffb81f,0x20013ffa,
    0x3ff67ffa,0x70fff703,0x2ff98bff,0x84ff832e,0x6ffcdffd,0x07ffe400,
    0xff10dff3,0x7ffff41f,0x5fffffff,0x45ffbffd,0x33fa1ffc,0xfbff9bff,
    0x009ff70f,0x3ff2dff5,0xd0bff506,0x7fdc05ff,0x40bff605,0xff700fff,
    0x87ff600b,0x7fec47ff,0x07ffe2ff,0x45fff400,0xff100fff,0x43ffd83f,
    0x7ff12ff9,0x7fcc27fc,0x2002ffff,0x7cc3fff9,0x0fff886f,0x3bbfffb2,
    0xfd4eeffe,0x7e4bff5f,0x3f2ffa1f,0x0ffadfcd,0xf5009ff7,0x03fff3df,
    0xff317fea,0x2ffdc03f,0x3e05ffb0,0xbff700ff,0x44bff300,0x3ffea6ff,
    0xfff13fff,0x666665c1,0xfceffa80,0x1fff403f,0xff303ffe,0xff9bfea5,
    0xbffff903,0x85ffe800,0xffb86ff9,0x7ccbfb06,0xfebff40f,0x7c3ff91f,
    0xafeffabf,0x9ff71ffa,0xfddff500,0x77fd407f,0x05fffbaa,0xfb02ffdc,
    0xffffffff,0x3fee01ff,0xdffb9305,0xfcb7fcc1,0x54ffbcff,0xfffd8fff,
    0xfffd00ff,0xffb801ff,0x221bfea5,0x1fffb3ff,0x7fcc0ffe,0x3f2002ff,
    0x6ff980ff,0xe81fffd4,0xd03fea4f,0x657feaff,0x22ffe1ff,0xff98ffff,
    0x5009ff71,0x01ffffff,0x7fffffd4,0xffb803ff,0x3ffff605,0x0fffffff,
    0x2a0bff70,0xff984fff,0xf91fffee,0xb1ffea7f,0x201fffff,0x803ffffa,
    0xff90fff9,0x3e7ff107,0x2ff8bfff,0x0dffffb0,0x40bffe60,0xfffffff9,
    0x93fa06ff,0x27fe87fb,0x1ffc8fff,0xafff4ffe,0x9ff72ff9,0xfddff500,
    0x7ffd40bf,0x7003ffff,0x7fec0bff,0xffeeeeee,0x0bff700f,0xff8806a2,
    0x3f20dfff,0x01fff12f,0xfe803ffe,0xfff000ff,0x7c07ffa5,0xdfdef9bf,
    0xff982ff8,0xe802ffff,0x3fe605ff,0x84ffffff,0xcceffcc9,0x3fa4cffe,
    0x3f33fee7,0x2e5ff11f,0x25ff32ff,0xfa804ffb,0x02fff9ef,0xff73dff5,
    0xbff7005f,0xf817fec0,0xbff700ff,0xffff8000,0x3e1ffe83,0x1fff01ff,
    0x002ffdc0,0xfff19ff9,0x67e67fc0,0x81ff9ffb,0x6ffcdffd,0x007ffe40,
    0x5799fff3,0x3fffee01,0x7fffffff,0xfff89ffa,0x5ff11ffd,0x7fcc3fe6,
    0x5009ff73,0x3fff2dff,0x2e5ffa80,0x7dc00fff,0x0bff605f,0xfb807ffc,
    0x3ffa605f,0x883ffe85,0x3ffa0fff,0x401fff05,0x2a005ffb,0x04ffaeff,
    0x227fb3fe,0x541ffcff,0xfff89fff,0x05fff304,0x2006ff98,0xccdffdc9,
    0x3fa4ceff,0x7ffffe47,0x4c05ff31,0x09ff73ff,0x3e2dff50,0x5ffa85ff,
    0x2e01fffc,0x3ff605ff,0x201fff02,0x6c405ffb,0x7ffdc5ff,0x2a27fe40,
    0xfff84fff,0x017fee00,0x5ffdfff0,0xd3ff7f40,0xfe81ffdf,0x03fff25f,
    0x26017ffa,0xfa8006ff,0x3a13fa0f,0x7fffcc7f,0x405ff31f,0x9ff73ff8,
    0x54dff500,0x7fd42fff,0x203ffdc5,0x3f605ffb,0x01fff02f,0x64017fee,
    0x77ff45ff,0x80fffdab,0xccdefffd,0x3ee00fff,0x7fec005f,0x7ff407ff,
    0x3fffee4f,0x883ffee0,0x7fdc5fff,0xeeeeeeef,0x000dff35,0x83ff8ff5,
    0xfffd87fe,0x403ff31f,0xdff74ff8,0x25999999,0x7fec6ffa,0x117fea0f,
    0x7dc07fff,0x0bff605f,0x99907ffc,0x3999dffb,0xf30554c0,0x5fffffff,
    0x3ffff620,0x200fffff,0x54005ffb,0x6c05ffff,0x3fe62fff,0x9fff10ff,
    0x643fff90,0xffffffff,0x0dff37ff,0x7c4ff700,0xa87fe82f,0xff51ffff,
    0xba7fc403,0xffffffff,0x88dff54f,0x3fea5fff,0x206ffc85,0x3f605ffb,
    0x21fff02f,0xfffffff8,0x10002fff,0x01bffffb,0xfffffd70,0x5ffb807b,
    0x7fffc400,0x43ffec02,0x3ff27ffe,0x6fff880f,0x3ffffff2,0xff37ffff,
    0x4df9000d,0x7fe81ff9,0x2a3fffd0,0x3fe201ff,0xffffff75,0x3fea9fff,
    0x53fffb86,0xfff30bff,0x817fee05,0xfff02ffd,0x3ffffe21,0x002fffff,
    0x20000980,0x00000199,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x66654000,0x50cccccc,
    0x99999999,0x33332e39,0xca8009ab,0xcca82ced,0xcccccccc,0x99999933,
    0x33220055,0x2e2001cc,0x322001cc,0x65400ccc,0x00002cee,0x00040000,
    0x00010000,0x00440033,0x88002020,0xfffffc80,0xff90ffff,0x5fffffff,
    0x3ffffffa,0xffd302ff,0xfc8bffff,0xffffffff,0xfffff56f,0xa803dfff,
    0x7004ffff,0x4005ffff,0x301ffffd,0xbffffffd,0x30f62001,0xfd90003d,
    0xb7005bff,0x501bffff,0x203bfffd,0xffffffc8,0x7fffe4c2,0x4774c2ef,
    0xefd89efd,0x3aa3bb22,0x3ff22fff,0x0fffffff,0xfffffff9,0x3fffa5ff,
    0x45ffffff,0xfffffff8,0x3fff24ff,0x6fffffff,0xffddfff5,0x7e401fff,
    0x7dc07fff,0x002fffff,0x03fffff3,0xfddfffd1,0xfd1009ff,0x0bffe67f,
    0x7ffff4c0,0xfd304fff,0x81ffffff,0xfffffffc,0x7ffffc43,0x7fe43fff,
    0x24ffffff,0xefffdff9,0x3f67fffc,0xffffffcf,0x9007ff92,0xffd007ff,
    0x3fffaa23,0xd885fdc2,0x2aaa67ff,0x5ffeaaaa,0xffa8bff5,0x3fffe03f,
    0xfff501ff,0x2005fffd,0x81ffeffe,0x3ea0effc,0x3fe601ff,0x3fff61ef,
    0xcfffe803,0xe82ffffd,0xfeccdfff,0x26fbfee0,0x3f61fffb,0x1b999aef,
    0x64cd5ee4,0xfff31fff,0xf9bfff9b,0x3ffff63f,0xf96ffebe,0x7ff9007f,
    0xb03ffd00,0xf1030dff,0xff3003ff,0x217fea3f,0xff304ffc,0x7c07ffbb,
    0x005ffd3f,0x3ffb9ff7,0xfb05ffd0,0x3ffee09f,0x5fffc80d,0x883ffee0,
    0x7fe46ffd,0x3fe2081f,0xf27fdc0f,0xb00005ff,0x5ffe65ff,0xff88fff9,
    0x449fffb3,0x07ff97ff,0xd007ff90,0xfff303ff,0x3fff1003,0x54bffb00,
    0x3ffd85ff,0xff57ff70,0xffd0540d,0xb6ff8805,0x3fff03ff,0xf90bff70,
    0xffa809ff,0x3ffd80ef,0x3e0fffa8,0xffa803ff,0x3a6ff985,0x40002eff,
    0x7ff33ffc,0x7fc53fe2,0xff0bffb3,0x007ff91f,0xfd007ff9,0x0bffe03f,
    0x003ffe60,0x7d43fff1,0x07ffcc5f,0xff88ffe8,0x5ffd000f,0xfb1ffd80,
    0x07fff03f,0x7ec4dff5,0xff3003ff,0x1ffe83df,0xf11fff88,0xff7001ff,
    0xffdddddd,0x7ffffdcf,0x7765401c,0xff33ffff,0x7c4ffe25,0x307ffb3f,
    0x2b7ff233,0x3f22aaaa,0x6eeeeeef,0x7f407ffa,0x5ffd803f,0x545ffc80,
    0xffeeefff,0x4dff102f,0xfd002ffe,0x27fd405f,0xffb03ffb,0xbffe443d,
    0x001fffe8,0xf17fff44,0x3ffa01ff,0x200fff32,0xfffffffc,0x7fdc7fff,
    0x4c0effff,0xffffffff,0x225ff33f,0x27ff13ff,0xfc803ffd,0x5fffffff,
    0x3ffffff2,0x07ffa7ff,0x2a027fec,0x7c401fff,0x7ffd41ff,0x02dfffff,
    0x7fe49ff5,0x05ffd005,0xffb07ff4,0xdffff503,0x26dffffd,0x8000efff,
    0x3fe3fffd,0x23fff02f,0xc800fff8,0xaaaaadff,0xfdb882aa,0x3fe26fff,
    0xffd99adf,0x3e25ff33,0x367ff13f,0xffc803ff,0x25ffffff,0xeeeeeffc,
    0x407ffa6e,0x3e603ffe,0xffc803ff,0xcceffa86,0xd83ffffe,0x1ffe62ff,
    0xc817ff40,0x0ffec2ff,0xffffffb8,0x3fa26fff,0xfd1001ff,0x4ffe85ff,
    0x7fc7ff88,0x4ffb803f,0x7fe44000,0x90dff51f,0x4bfe67ff,0x7ff13ff8,
    0x3200fff6,0x99999cff,0x200fff20,0xfff01ffe,0x13ffe605,0x20bffe20,
    0x7ec45ffa,0xf87ff87f,0xffe801ff,0x99eff982,0x09affe99,0xbacdcb88,
    0x7fec45ff,0x7ff4c03f,0x0fffc81e,0x3fa2ffe4,0x7fcc01ff,0x7c40000f,
    0x8bff92ff,0xff33fff9,0x7c4ffe25,0x007ffb3f,0xf9007ff9,0x3ffd007f,
    0x303fff10,0x32009fff,0xbff506ff,0x4c3fff30,0xfeeeefff,0xffe804ff,
    0xfffffb82,0x5fffffff,0x40fff600,0xf504fffc,0x3e201dff,0xffdbdfff,
    0x7fffcc1f,0x361fdcbd,0xa999bfff,0x2266fa1c,0xf50fffc9,0xfff737ff,
    0x44bfe67f,0x27ff13ff,0xfc803ffd,0x3ffc803f,0xc81ffe80,0xfff986ff,
    0x5fff1004,0x2217fea0,0x3ff21fff,0xffffffff,0x82ffe806,0xfffffffb,
    0x005fffff,0x5c01fff1,0x3ee0dfff,0xffb805ff,0x03ffffff,0xfffffff7,
    0x7fff443f,0x3e1fffff,0xffffffff,0x3ffffe23,0xf33ffdff,0x44ffe25f,
    0x07ffb3ff,0x9007ff90,0xffd007ff,0x41fffc83,0x2004fff9,0x3ea06ffc,
    0x47ffc85f,0xeeeeeffe,0x7400fffe,0xccc982ff,0xdfffcccc,0xffea803c,
    0x3fffa805,0x4009fff3,0x1effffe9,0x7fffecc0,0xfffc80df,0x3fa1efff,
    0x82efffff,0x8aefffe9,0x25ff33ff,0x7ff13ff8,0x3200fff6,0xffc803ff,
    0x1cccccce,0xffb9bffd,0xfff88bff,0x5eeeeeef,0x5017ffc4,0xfd999dff,
    0x37fc49ff,0xee87ffd0,0xeeefffee,0x03ffb005,0x3ffbb732,0x9d3000ef,
    0x20002fa8,0x13100019,0x00666200,0x10013333,0x00000033,0x01ffe400,
    0x7fffffe4,0xfffd2fff,0x507fffff,0xffffffff,0x6ffb8dff,0x7ffffd40,
    0x7dc5ffff,0x17ff204f,0xffffffff,0x3f600fff,0xffff881f,0x4000dfff,
    0x00000100,0x00000000,0x00000000,0xffc80000,0xffffc803,0xfd2fffff,
    0x0179dfff,0x3fffffea,0x3e26ffff,0x7fd403ff,0x81ceffff,0x3ea01ffd,
    0x7ffffc7f,0x007fffff,0xff103ffb,0x00037bdf,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x20300000,0xeeb84ee9,0x5004cc02,
    0x77540bdd,0x7003bb25,0x7776c1dd,0x21eeeeee,0xed884eed,0x07ff101e,
    0x88073220,0xcccccccc,0x4bff72cc,0x5ffd0fff,0x001deda8,0x4ccc3991,
    0x26619999,0x99999999,0x00009999,0x00000000,0x322bba60,0x3e60dfff,
    0x03ffc86f,0xf8813fe6,0x7ffb01ff,0x3600ffec,0x7ffffc7f,0x2a1fffff,
    0x7fec2fff,0x0117fc05,0xf3037fec,0xffffffff,0xf97fee9f,0x43ffd0ff,
    0x43fffffa,0x3fffa4ff,0xffffffb0,0x7fffffcf,0xffffffff,0x00000001,
    0x3e600000,0xfffffecf,0x321bfe65,0x3fe603ff,0x427fec04,0x3f20fff8,
    0x237f402f,0xffeeeeed,0x7ffe40ff,0xb81fff50,0xbb13ff1e,0x0ffffea0,
    0x7777774c,0xff53eeee,0xffb3ffcb,0x7ff7ff43,0x267ff13f,0xffb3ffff,
    0x7fcfffff,0xffffffff,0x0001ffff,0x00000000,0x3ffffe60,0xf31fffdc,
    0x07ff90df,0x2a027fcc,0x5ffb87ff,0x1551ffd4,0x7d402ffc,0xbffd02ff,
    0xf885fff1,0xfebfebff,0xfbbfe82f,0xf500000f,0xfb3ff49f,0x4cffe61f,
    0x1fffefff,0x2a5ffff3,0x23bbbbbb,0x99999999,0x00199999,0x00000000,
    0x77ffcc00,0x7ccfffa0,0x03ffc86f,0x3e013fe6,0x17ff42ff,0x7fcd3fe6,
    0x8809ff14,0x3e604fff,0x304ffeff,0xdffffffb,0x7f4ff705,0xff300005,
    0xff93ff49,0xf987fea1,0x7e45ffff,0x0000005f,0x00000000,0xff300000,
    0x33ffc83f,0x7ff90dff,0x7fd4cccc,0x6409999c,0x1bfe65ff,0x7fe57fe2,
    0xe805ff17,0xffb805ff,0xff9806ff,0x5ff104ff,0x32217fd4,0xcccccccc,
    0x6c7ff32c,0x003ff26f,0x440f7b22,0x00000001,0x00000000,0x3fe60000,
    0xf34ffb86,0x47ff90df,0xffffffff,0x7c42ffff,0x07ff90ff,0x7fff5bfe,
    0x3601ff9a,0xfd000fff,0x7e4405ff,0x42dfffff,0x46fe86fd,0xfffffff9,
    0x35514fff,0x0553154c,0x00000000,0x00000000,0x80000000,0xffb86ff9,
    0xf90dff34,0x7ffffc7f,0x2fffffff,0xfff3ffd8,0x3e7ffa01,0x0ffadfff,
    0x003fff70,0x03bfffee,0x3fb3ffe2,0xff32fffb,0x4c9ff303,0xeeeeeeee,
    0x000003ee,0x00000000,0x00000000,0x20000000,0xffb86ff9,0xfb0dff34,
    0x6555547f,0x0aaaadff,0xffadffa8,0x3f3ff605,0x07fcffce,0x2007fff3,
    0x5ffffff9,0x27fe5f70,0x80f2e6e8,0x000004cb,0x00000000,0x00000000,
    0x00000000,0x86ff9800,0xfff14ffb,0x01fffe41,0x7c009ff3,0x202ffdff,
    0xf9bffffc,0xff886fff,0xffd1005f,0x205fff37,0x0008bfe0,0x00000000,
    0x00000000,0x00000000,0x00000000,0x2e1bfe60,0x37ffe4ff,0x03ffffeb,
    0xc8013fe6,0x5407ffff,0xffd1ffff,0xdfffb0bf,0xd85ddddd,0x3fff26ff,
    0x00bfe200,0x00000000,0x00000000,0x00000000,0x00000000,0x437fcc00,
    0x3ff24ffb,0x3ffcffff,0x8013fe60,0x404ffff9,0x3f26fff9,0x7ffc44ff,
    0x2fffffff,0xfd07ffee,0x000000df,0x00000000,0x00000000,0x00000000,
    0x00000000,0xfb86ff98,0x77ffe44f,0x2603ff8a,0x7f4004ff,0x7fc401ff,
    0x0fffe64f,0xfffffff1,0x3fe65fff,0x3fff983f,0x00000000,0x00000000,
    0x00000000,0x00000000,0x26000000,0x4ffb86ff,0x88001988,0x000001aa,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_bold_26_usascii_x[95]={ 0,5,2,0,1,0,0,5,3,2,1,0,2,3,
4,0,0,1,1,1,0,1,1,1,1,0,4,2,1,1,2,3,0,0,1,1,1,2,2,0,1,1,2,1,
2,0,1,0,1,0,1,1,1,1,0,0,0,0,1,3,1,3,1,0,0,1,1,1,0,1,0,0,1,1,
1,1,1,0,1,0,1,0,2,1,0,1,0,0,0,0,1,1,5,2,0, };
static signed short stb__consolas_bold_26_usascii_y[95]={ 19,1,1,2,-1,0,1,1,0,0,1,5,14,10,
14,1,2,2,2,2,2,2,2,2,2,2,5,5,4,8,4,1,0,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,0,2,21,1,5,1,5,1,5,0,5,1,0,
0,1,1,5,5,5,5,5,5,5,1,6,6,6,6,6,6,0,-2,0,9, };
static unsigned short stb__consolas_bold_26_usascii_w[95]={ 0,5,10,14,13,15,15,4,9,9,12,14,8,9,
6,13,14,12,12,12,14,12,13,12,12,13,6,8,11,12,11,10,15,15,13,12,13,11,11,14,13,12,10,13,
11,14,13,14,13,15,13,12,13,13,15,14,15,15,12,8,13,8,13,15,9,12,13,12,13,12,14,14,12,12,
11,13,12,14,12,14,13,13,12,12,13,12,15,15,14,15,12,11,4,11,14, };
static unsigned short stb__consolas_bold_26_usascii_h[95]={ 0,19,7,17,24,20,19,7,25,25,12,14,10,4,
6,21,18,17,17,18,17,18,18,17,18,17,15,19,16,8,16,19,25,17,17,18,17,17,17,18,17,17,18,17,
17,17,17,18,17,22,17,18,17,18,17,17,17,17,17,25,21,25,9,4,6,15,19,15,19,15,19,20,18,19,
25,18,18,14,14,15,20,20,14,15,19,14,13,13,13,19,13,25,27,25,6, };
static unsigned short stb__consolas_bold_26_usascii_s[95]={ 253,247,147,121,96,154,1,142,42,61,102,
27,246,180,173,140,1,95,39,211,108,158,171,52,185,123,248,213,137,129,149,
236,71,79,65,198,25,13,1,16,219,233,224,177,165,150,136,129,107,110,191,
235,205,144,47,63,78,31,94,52,126,87,115,190,246,215,30,176,59,189,44,
198,116,17,18,102,89,228,1,161,184,170,243,202,222,14,42,58,87,73,74,
30,1,6,158, };
static unsigned short stb__consolas_bold_26_usascii_t[95]={ 1,1,86,49,1,1,29,86,1,1,86,
86,49,86,86,1,49,68,68,29,68,29,29,68,29,68,29,1,68,86,68,
1,1,68,68,29,68,68,68,49,49,49,29,49,49,49,49,29,49,1,49,
29,49,29,49,49,49,49,49,1,1,1,86,86,60,68,29,68,29,68,29,
1,29,29,1,29,29,68,86,68,1,1,68,68,1,86,86,86,86,29,86,
1,1,1,86, };
static unsigned short stb__consolas_bold_26_usascii_a[95]={ 229,229,229,229,229,229,229,229,
229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,
229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,
229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,
229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,
229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,
229,229,229,229,229,229,229, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_bold_26_usascii_BITMAP_HEIGHT or STB_FONT_consolas_bold_26_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_bold_26_usascii(stb_fontchar font[STB_FONT_consolas_bold_26_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_bold_26_usascii_BITMAP_HEIGHT][STB_FONT_consolas_bold_26_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_bold_26_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_bold_26_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_bold_26_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_bold_26_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_bold_26_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_bold_26_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_bold_26_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_bold_26_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_bold_26_usascii_s[i] + stb__consolas_bold_26_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_bold_26_usascii_t[i] + stb__consolas_bold_26_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_bold_26_usascii_x[i];
            font[i].y0 = stb__consolas_bold_26_usascii_y[i];
            font[i].x1 = stb__consolas_bold_26_usascii_x[i] + stb__consolas_bold_26_usascii_w[i];
            font[i].y1 = stb__consolas_bold_26_usascii_y[i] + stb__consolas_bold_26_usascii_h[i];
            font[i].advance_int = (stb__consolas_bold_26_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_bold_26_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_bold_26_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_bold_26_usascii_s[i] + stb__consolas_bold_26_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_bold_26_usascii_t[i] + stb__consolas_bold_26_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_bold_26_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_bold_26_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_bold_26_usascii_x[i] + stb__consolas_bold_26_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_bold_26_usascii_y[i] + stb__consolas_bold_26_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_bold_26_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_bold_26_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_bold_26_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_bold_26_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_bold_26_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_bold_26_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_bold_26_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_bold_26_usascii_LINE_SPACING
#endif

