// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_14_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_14_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_14_usascii_BITMAP_WIDTH         128
#define STB_FONT_courier_14_usascii_BITMAP_HEIGHT         54
#define STB_FONT_courier_14_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_14_usascii_FIRST_CHAR            32
#define STB_FONT_courier_14_usascii_NUM_CHARS             95

#define STB_FONT_courier_14_usascii_LINE_SPACING           7

static unsigned int stb__courier_14_usascii_pixels[]={
    0x00253010,0x460cc301,0x04070018,0x0009925c,0x26110c46,0x40620981,
    0x70001100,0x24221201,0x21c70320,0x8751122a,0x15ddc428,0x5407038e,
    0x3222ca9b,0x86e0ca9c,0x22ddd439,0xdaa83aac,0x8a60360a,0x20331998,
    0x438e5bac,0x07510d45,0x47054387,0x4099c983,0x88360643,0x219871c3,
    0x70198648,0x988701b0,0x08661249,0x9112238e,0x0a1c1ccc,0x3260e38a,
    0x170a2099,0x445c3848,0x0b8241c3,0x05109070,0x1570351c,0x41cc5538,
    0x419d9b55,0x1c70330c,0x10b80e07,0x02a2c81d,0x150702ee,0x90700e44,
    0x81c38070,0x3154e3a8,0x41c54b07,0x1c50710c,0xbb880e07,0x5dc5c0aa,
    0x90707701,0x20e1c188,0x50e01c40,0x8e38e0c1,0xadaa4448,0x15121c2d,
    0x800e071c,0x0b801c0a,0x20122198,0x401c0143,0x2a6f2383,0x2a2c38e3,
    0x221c1ce1,0x071c2bbc,0x4406eaea,0x9807222b,0x977500c9,0x3aba8db0,
    0x200e25f0,0x03210b83,0x448aa1c7,0xdb828873,0x4038e189,0x53155400,
    0x02aaa015,0x04022010,0x98805410,0x41c3883a,0x06230661,0x26a050a5,
    0x264970a9,0x00000000,0x00000000,0x00001aa8,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x40ee2010,
    0x20101118,0x40c8802a,0x201d43b8,0x33220bba,0x70bc882c,0x15cc9999,
    0x00773008,0x91037710,0x38a47755,0x106d4d54,0x44a57757,0x8a40a801,
    0x1c1301c3,0x2064c033,0x471389c1,0x4a25bac8,0x3265b138,0x511201c3,
    0x161c3866,0x33132989,0x13054a20,0x200c4e24,0x00580664,0x70e382a7,
    0x85438e14,0x28819ba8,0x510c8e20,0x3300a248,0x54dd4153,0xab870e0c,
    0x21ca84aa,0x2e21bcd9,0x6446603a,0x9c0662b9,0x2150e4ba,0x19819ba8,
    0xacbb8262,0x066688e1,0x4480aa98,0x0d870e0c,0x407510a2,0x41227263,
    0x1072f223,0x4739c377,0x40510543,0x6412aa38,0x88e6ee20,0x10d54203,
    0x870e0a85,0x20170384,0x40cc710a,0x2e0482e3,0x4392ee70,0x0b00a20a,
    0x43809107,0x24294184,0xb0a1a836,0x02380cc3,0x3302a487,0x2a247054,
    0x0b822190,0xd880510e,0x99511bab,0xb10aa620,0x2aa81977,0x065d564c,
    0x56d41959,0x2eb2a3ba,0x306ef6a1,0x77070577,0x1dd56437,0x57910473,
    0x01e6e543,0x55002022,0x80004401,0x10000400,0x00020040,0xbca80401,
    0x00000080,0x00000000,0x00000000,0x00000000,0x09000000,0x5c000000,
    0x4c000002,0x09910004,0x00000000,0x88181000,0x32a5b11d,0x8e54b511,
    0x880e0da8,0x913aadac,0x40705755,0x1c0bbada,0x53c98ecc,0xa886dc1d,
    0x45e440ad,0x447622d8,0x0ccfe22d,0x94453388,0x41a870e2,0x39441313,
    0xa9c1c38e,0x40e1c381,0x9dc42a4b,0x8e0383b8,0x0713881b,0x4c093115,
    0x5159384a,0x5ce0e0a8,0x3863840a,0x1cce5c24,0x1703870e,0xb9d442a7,
    0x22e03838,0x0126a00c,0x2e07601c,0x13818b99,0x38037705,0x70197570,
    0x065d6438,0x0a8b9c0e,0x20e75151,0x00af2e03,0x1c1b503b,0x27709350,
    0x0173819b,0x7038037b,0x90e1c0dc,0x2e381c03,0x1c6e510a,0x350b8a1c,
    0x1c3d81c0,0x3b871298,0x07330193,0x20700dce,0x70e1c243,0x5d470380,
    0x87070510,0x81c070e3,0x4333b2e6,0x5c9b12e9,0xa81d81a3,0xec887d14,
    0x4433661c,0x3a67b10d,0xcb859d72,0x49d30cce,0x3225b70d,0x999d910e,
    0x25433669,0x0020e764,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x0002aa00,0x40aea073,0x4a20000c,0x88106218,0x9013008a,
    0xc855b533,0x2aae3b33,0x5556d45a,0x39555914,0x2e1dd5e4,0x5d56c408,
    0x46a0ea62,0x5305dc38,0x10bb805b,0x27f124c9,0x5cc598b8,0x0717c3a9,
    0x0351c70e,0x4130e387,0x00b8a619,0x40838387,0x3502ae23,0x0a02ea07,
    0x21730a87,0x1e82a1c0,0x108e1c0e,0x89c14e07,0x751c1981,0x03828702,
    0x702a71c4,0x1407702a,0x8575100e,0x1c191443,0x485cccb8,0x32e17360,
    0x99c1982c,0x665c48aa,0x8e20383d,0x89c41529,0x0a80ba83,0x870a1512,
    0x20700543,0x04c6a1c3,0x8211c0ce,0x3b0a9c19,0x40e1c438,0x1e555c38,
    0x54095575,0x332f220b,0x2ab27f12,0x15d5c43b,0x88e1c0e0,0x1c0702a3,
    0x914c331c,0x43838997,0x05403983,0x0a201987,0x20040402,0x1e764c00,
    0x64ba69b1,0x36e0dccc,0x6666cc1c,0x0af3723c,0x33336602,0x479d930b,
    0x6cc5ccce,0x37225b73,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x54c00a80,0x00980600,0x18831026,0x4cc4198c,0x10c46209,
    0x88866213,0x10981889,0x45c41813,0x05036a2a,0x40ae22a0,0x0702a8a9,
    0x54393371,0x83222a9a,0x1cce6439,0x5c495335,0x239129ba,0x327661c8,
    0xd89dc29b,0x265e61c0,0x443a9899,0x1b88fe23,0x20e07110,0x0a870443,
    0x2a0cc64e,0x2a1208e0,0x941c3302,0x70eaa0e3,0x5de237b7,0x533883a3,
    0x1dc02288,0xbb895575,0x44071bbd,0x4e0bbbbd,0x41c283ab,0x33380503,
    0xd8838e50,0xaa40ca82,0x00c18711,0x38706e20,0x1c107070,0x20ee2ea0,
    0x20c2e1c2,0x281c5402,0x154e21c7,0x00000a51,0x2e057100,0x8382daaa,
    0x220baab8,0x5620baab,0xd89ec43a,0x54b77b52,0x05901bcc,0x886caeb7,
    0x0005b33e,0x00500000,0x00403001,0x00000022,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xbbb880a8,0x222222bb,
    0xbbbb9088,0x00000001,0x00000000,0x00000000,0x01737170,0x2aaaaa20,
    0x0000002a,0x00000000,0x00000000,0x88260000,0x002bbbbb,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__courier_14_usascii_x[95]={ 0,2,1,1,1,1,1,2,3,1,0,0,1,1,
2,1,1,1,1,1,1,1,1,1,1,1,2,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,
0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,2,0,0,1,0,0,1,0,0,1,
1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,3,0,1, };
static signed short stb__courier_14_usascii_y[95]={ 10,2,2,1,1,2,3,2,2,2,2,3,8,6,
8,1,2,2,2,2,2,2,2,2,2,2,4,4,3,5,3,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,12,1,4,2,4,2,4,2,4,2,2,
2,2,2,4,4,4,4,4,4,4,2,4,4,4,4,4,4,2,2,2,5, };
static unsigned short stb__courier_14_usascii_w[95]={ 0,3,5,6,6,6,6,3,3,3,5,7,4,6,
3,6,6,6,5,6,5,6,6,5,6,6,3,4,6,7,6,5,5,8,7,7,7,7,7,7,7,6,7,8,
7,8,7,7,6,7,8,6,7,7,8,8,7,7,6,3,5,3,6,8,3,7,7,6,8,7,6,7,7,6,
4,7,6,8,7,7,7,8,6,6,7,7,8,8,7,8,6,3,1,3,6, };
static unsigned short stb__courier_14_usascii_h[95]={ 0,9,4,10,11,9,8,5,10,10,5,7,4,1,
3,11,9,8,8,9,8,9,9,9,9,9,7,8,7,3,7,9,9,8,8,9,8,8,8,9,8,8,9,8,
8,8,8,9,8,10,8,9,8,9,8,8,8,8,8,10,11,10,4,2,3,7,9,7,9,7,8,9,8,8,
11,8,8,6,6,7,9,9,6,7,9,7,6,7,6,9,6,10,10,10,3, };
static unsigned short stb__courier_14_usascii_s[95]={ 127,123,102,40,19,32,47,124,32,36,96,
16,108,25,124,1,48,62,69,63,75,70,77,84,90,9,105,123,90,8,1,
109,104,81,54,24,39,31,23,1,8,1,115,106,98,89,81,101,67,51,50,
97,42,110,25,16,8,115,16,63,13,59,113,16,120,8,55,24,39,31,118,
16,59,1,8,34,74,79,48,116,84,75,63,109,67,97,70,39,88,92,56,
28,26,47,1, };
static unsigned short stb__courier_14_usascii_t[95]={ 1,1,41,1,1,13,32,32,1,1,41,
41,41,49,41,1,13,32,32,13,32,13,13,13,13,13,32,23,32,49,41,
1,13,32,32,13,32,32,32,13,32,32,1,23,23,23,23,1,23,1,23,
13,23,13,23,23,23,23,32,1,1,1,41,49,41,41,13,41,13,41,13,
13,23,23,1,23,23,41,41,32,1,1,41,32,1,32,41,41,41,1,41,
1,1,1,49, };
static unsigned short stb__courier_14_usascii_a[95]={ 119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_14_usascii_BITMAP_HEIGHT or STB_FONT_courier_14_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_14_usascii(stb_fontchar font[STB_FONT_courier_14_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_14_usascii_BITMAP_HEIGHT][STB_FONT_courier_14_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_14_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_14_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_14_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_14_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_14_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_14_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_14_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_14_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_14_usascii_s[i] + stb__courier_14_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_14_usascii_t[i] + stb__courier_14_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_14_usascii_x[i];
            font[i].y0 = stb__courier_14_usascii_y[i];
            font[i].x1 = stb__courier_14_usascii_x[i] + stb__courier_14_usascii_w[i];
            font[i].y1 = stb__courier_14_usascii_y[i] + stb__courier_14_usascii_h[i];
            font[i].advance_int = (stb__courier_14_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_14_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_14_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_14_usascii_s[i] + stb__courier_14_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_14_usascii_t[i] + stb__courier_14_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_14_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_14_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_14_usascii_x[i] + stb__courier_14_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_14_usascii_y[i] + stb__courier_14_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_14_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_14_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_14_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_14_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_14_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_14_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_14_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_14_usascii_LINE_SPACING
#endif

