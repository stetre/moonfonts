// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_bold_10_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_bold_10_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_bold_10_usascii_BITMAP_WIDTH         128
#define STB_FONT_arial_bold_10_usascii_BITMAP_HEIGHT         42
#define STB_FONT_arial_bold_10_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_arial_bold_10_usascii_FIRST_CHAR            32
#define STB_FONT_arial_bold_10_usascii_NUM_CHARS             95

#define STB_FONT_arial_bold_10_usascii_LINE_SPACING           6

static unsigned int stb__arial_bold_10_usascii_pixels[]={
    0x8e20d4a2,0x260a20b8,0xa95440ab,0x1550150a,0x35305400,0xaaa80a25,
    0x43503660,0x2a02a883,0x21981440,0xfb96c0a8,0x20dc9660,0x2eb3a259,
    0x7dcfea2e,0xfdfd8952,0x70fc1a64,0xf81aa597,0x1fdd32ee,0x6424db2a,
    0x1fde83cd,0x2390dbf3,0x8f10fcf8,0x42d9661e,0x7931d139,0x5d1aa1d5,
    0xf10fa87c,0x47e0ff21,0x5d55fefd,0x2a0fc419,0x23aae0cd,0x43ddc80d,
    0x75321169,0x47ab5341,0x4b31745a,0xbaab541e,0xd52bbf8c,0x35cb62e8,
    0x7c17dcfa,0x2a1f3f31,0x3bea5caf,0x447fd11f,0xdf7049bd,0x2e1ddd70,
    0xd1623f9d,0x3ea25cbf,0x2a1b2b30,0x27a1d196,0x22e8d51b,0x32f8f53d,
    0x67e47e0f,0x11e6d53f,0xb05db132,0x2baa3bb1,0x1e5ae5df,0x51d45d99,
    0xb16a5d1d,0x40f9acc9,0xf31f396a,0x8ba354d1,0x9ee2fe2d,0x43e73679,
    0x1f52dcdc,0x53da4cd5,0x9c985999,0x3eed73bd,0xb99ede63,0x5b8720f8,
    0x43d1a65b,0x2d50ba59,0x0bfcebba,0x0f45d1aa,0x7c43bfb3,0x5dc9fd36,
    0x0bfbaa2c,0x3fa219fb,0x1de86c0d,0x41d9ffb1,0x7fd10dfc,0x22ff4468,
    0x2cc1f10e,0x2f25c87b,0x87547660,0x000b12e8,0x00011100,0x004081c0,
    0x80020000,0x2488992a,0xa85d31ea,0x3a60bdec,0x006a3d94,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x02ae6000,
    0x0dcc02a2,0x014198a2,0x81c14c51,0x65dcc0a8,0x05cc0a20,0x56549395,
    0xa8555534,0x3514ca61,0x21514c2a,0x8db9f128,0x7e44fdfc,0x5b9ea5ec,
    0x5aa0dbf1,0x206c7df9,0x3ea3fdfc,0x221aa5ca,0x5b6be63f,0x9956daf9,
    0x447d41fd,0x1f33f32f,0x1f8fecf6,0x8547ea93,0x261f10f8,0x9ea1710f,
    0xa87ab35b,0x83e316bc,0x1d43e22b,0xaea9e2d5,0xa5c9f91d,0x31aab76a,
    0x8b99b05f,0x7d6e3eeb,0xd92679bd,0x7d1ae3ef,0xa85545ae,0x3dadd6e7,
    0x4f8db5f3,0x540d724c,0x2bea6a8f,0x7543f55c,0x9b2d56c8,0x1ff104e8,
    0xe9f98df0,0x45aa5bda,0x8f52fb88,0x3f26f53e,0x5bae4f52,0x23556e5d,
    0x4f5342e8,0x8bbbaa08,0x21e2d56a,0x37f66cec,0x09b01766,0xccf83ff5,
    0x55aa3cf8,0x2fe2e88e,0x17f11fdc,0x227e65f3,0x543ed34d,0x1752ad96,
    0x5d8af83a,0x6ab541aa,0x5b8c98f1,0x111f9698,0x77d11320,0x3fd2fd8d,
    0x8bff9354,0x262fffd9,0x3f20cffe,0xb13f20ef,0x17f62dbf,0x0dfda8b2,
    0x6ab54126,0x03bd90f1,0x3ffffa93,0xd3644c81,0x47c87e49,0x0530006a,
    0x00000000,0x00000011,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x882a0000,0x21555552,0x1aaa8828,0x0aaa8944,0x231144a2,
    0x144aa1a8,0xa98a6288,0x355510aa,0x144a6288,0x54455551,0x55510aaa,
    0xc8446601,0x6fe5d365,0x9f30d50c,0xf9b549fb,0x26d51fdc,0x57eab53f,
    0x260f35fa,0x775c5f37,0x7fb9f33f,0x3e2b73cc,0x4c999f30,0xbf51cccf,
    0x53f983fb,0x741f9ead,0xf31cb542,0x9e6d52dc,0x3fe6d53e,0x32fd55a8,
    0x3e60f35e,0x4cd303f8,0x2e799327,0x41e61f15,0x2dcd5079,0xf9227dd3,
    0x542e86aa,0x373e65de,0x5fcdaa2e,0x3a6d51fc,0x5bd55acd,0x4c1e6b9d,
    0x45b00fef,0x260feef9,0x99e5feef,0x3fe63eef,0x3d4d50ff,0x66e409ec,
    0x7fd42e84,0x513abe62,0xa86f3e6d,0x2b9f1d36,0x35afcbea,0x176fe60f,
    0x933f31a6,0x2e4cfccb,0x304cfccd,0x5354333f,0x3e607b0d,0x7542e81f,
    0x3e2f30f9,0xa83cdaa2,0x557eed36,0xf35adf9e,0xf8bcc111,0x23e62543,
    0x5b9e66b8,0x1f30798e,0x6c475411,0xe8113d84,0xb6a85d06,0x50fb9e69,
    0x9b541e6d,0xbfb557a6,0x1ffff35a,0x320fb9e6,0x177ffcc3,0x278adcf3,
    0xffff3079,0x037ffea7,0x000354f6,0x00000000,0x00000000,0x00000000,
    0x41c40000,0x46e48829,0x2206a23a,0x40f6e20a,0x36e01328,0x43c98283,
    0x05e541ca,0xc9d52693,0x32e39732,0x8dc910cc,0x03b5733a,0x883fd0f9,
    0xf896d6e4,0x3f3e24dc,0x44193b70,0x43bf54fc,0x07c1e9c9,0x3a65b5d3,
    0x9b5f30e9,0xbf16ab54,0xa985fd4d,0xb5b9226e,0x5172bea5,0x04df98fd,
    0x2513c7c4,0x89eca679,0x17f70cfe,0xb914eb88,0x537f6e5f,0x2edec85b,
    0x56a9e2b7,0x0d517dcd,0x4fc401f7,0xd1355aa7,0x879cc8f3,0x74426ec1,
    0x3330f983,0x82fba65d,0x3ab92eda,0x2a57f532,0x8556e576,0xbb54d56a,
    0x46a97ba6,0x360c09fa,0x9355aa4e,0x66fc5f7b,0x3f51e22f,0x45f307b0,
    0x6cc0dee9,0xde985d75,0x3f207c3e,0x41dd910e,0x3ba21efd,0x54fab96d,
    0x88ffff45,0x2d50fcc7,0x53f7726a,0x245dbbea,0x102e0d71,0x0800117f,
    0x00020001,0x00000000,0x9e200000,0x2083e23d,0xc85d02eb,0x00003fff,
    0x00000000,0x00000000,0x00000000,0x655cc000,0x322723c9,0x9505c498,
    0x98014999,0x3f253531,0x00000534,0x00000000,0x3f500000,0x2f23f3dd,
    0x3e64bafa,0x5caeee63,0x97bd50cd,0x9adf5d72,0xdddd1209,0x0000000d,
    0x00000000,0x97532b50,0x21ecdce9,0xbbb70fbd,0xa9a8fa29,0x2b26752c,
    0x00000004,0x00000000,0xcad40000,0x747fc5d3,0xa99eda67,0x003112aa,
    0x00000000,0x00000000,0xad400000,0xeb645d3c,0x00000004,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_bold_10_usascii_x[95]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, };
static signed short stb__arial_bold_10_usascii_y[95]={ 8,1,1,1,1,1,1,1,1,1,1,2,6,5,
6,1,1,1,1,1,1,1,1,1,1,1,3,3,2,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,1,3,3,3,3,3,3,1,1,1,3, };
static unsigned short stb__arial_bold_10_usascii_w[95]={ 0,3,4,5,5,8,7,2,3,3,4,5,2,3,
2,4,5,4,5,5,5,5,5,5,5,5,3,3,5,5,5,6,9,7,7,7,7,6,6,7,6,2,5,7,
6,7,6,7,6,7,7,6,6,6,7,9,6,7,6,3,4,3,5,7,3,5,6,5,5,5,4,5,5,2,
3,5,2,8,5,6,6,5,4,5,3,5,5,7,5,5,5,4,2,4,5, };
static unsigned short stb__arial_bold_10_usascii_h[95]={ 0,7,3,8,8,8,8,3,9,9,4,6,4,2,
2,8,8,7,7,8,7,8,8,7,8,8,5,7,6,4,6,7,9,7,7,8,7,7,7,8,7,7,8,7,
7,7,7,8,7,8,7,8,7,8,7,7,7,7,7,9,8,9,4,2,2,6,8,6,8,6,7,7,7,7,
9,7,7,5,5,6,7,7,5,6,8,6,5,5,5,7,5,9,9,9,3, };
static unsigned short stb__arial_bold_10_usascii_s[95]={ 127,94,81,62,81,87,96,78,1,40,67,
62,125,86,125,116,31,120,32,43,1,75,104,73,121,110,110,15,44,61,50,
25,22,7,79,54,112,105,98,16,87,40,56,65,58,50,43,44,33,8,22,
1,9,24,1,114,107,99,92,32,49,36,55,94,90,56,68,68,37,74,75,
80,69,124,18,16,30,38,120,80,62,86,99,38,52,87,114,47,93,19,104,
13,10,5,72, };
static unsigned short stb__arial_bold_10_usascii_t[95]={ 1,20,35,1,1,1,1,35,1,1,35,
28,20,35,25,1,11,20,28,11,28,1,1,20,1,1,28,28,28,35,28,
28,1,28,20,11,20,20,20,11,20,20,1,20,20,20,20,1,20,11,20,
11,20,11,20,11,11,11,11,1,11,1,35,35,35,28,1,28,11,28,11,
11,11,11,1,20,20,35,28,28,11,11,28,28,1,28,28,35,28,28,28,
1,1,1,35, };
static unsigned short stb__arial_bold_10_usascii_a[95]={ 40,48,68,80,80,127,103,34,
48,48,56,84,40,48,40,40,80,80,80,80,80,80,80,80,
80,80,48,48,84,84,84,87,140,103,103,103,103,96,87,111,
103,40,80,103,87,119,103,111,96,111,103,96,87,103,96,135,
96,96,87,48,40,48,84,80,48,80,87,80,87,80,48,87,
87,40,40,80,40,127,87,87,87,87,56,80,48,87,80,111,
80,80,72,56,40,56,84, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_bold_10_usascii_BITMAP_HEIGHT or STB_FONT_arial_bold_10_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_bold_10_usascii(stb_fontchar font[STB_FONT_arial_bold_10_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_bold_10_usascii_BITMAP_HEIGHT][STB_FONT_arial_bold_10_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_bold_10_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_bold_10_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_bold_10_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_bold_10_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_bold_10_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_bold_10_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_bold_10_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_bold_10_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_bold_10_usascii_s[i] + stb__arial_bold_10_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_bold_10_usascii_t[i] + stb__arial_bold_10_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_bold_10_usascii_x[i];
            font[i].y0 = stb__arial_bold_10_usascii_y[i];
            font[i].x1 = stb__arial_bold_10_usascii_x[i] + stb__arial_bold_10_usascii_w[i];
            font[i].y1 = stb__arial_bold_10_usascii_y[i] + stb__arial_bold_10_usascii_h[i];
            font[i].advance_int = (stb__arial_bold_10_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_bold_10_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_bold_10_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_bold_10_usascii_s[i] + stb__arial_bold_10_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_bold_10_usascii_t[i] + stb__arial_bold_10_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_bold_10_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_bold_10_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_bold_10_usascii_x[i] + stb__arial_bold_10_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_bold_10_usascii_y[i] + stb__arial_bold_10_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_bold_10_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_bold_10_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_bold_10_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_bold_10_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_bold_10_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_bold_10_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_bold_10_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_bold_10_usascii_LINE_SPACING
#endif

