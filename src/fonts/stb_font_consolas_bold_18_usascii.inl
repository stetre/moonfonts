// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_bold_18_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_bold_18_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_bold_18_usascii_BITMAP_WIDTH         128
#define STB_FONT_consolas_bold_18_usascii_BITMAP_HEIGHT        102
#define STB_FONT_consolas_bold_18_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_bold_18_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_bold_18_usascii_NUM_CHARS             95

#define STB_FONT_consolas_bold_18_usascii_LINE_SPACING          12

static unsigned int stb__consolas_bold_18_usascii_pixels[]={
    0x700000aa,0x4c0440bb,0x7d11eeee,0x02f2a003,0x260bddd7,0x02cca82d,
    0x05546a20,0x0002aa20,0x100b57f8,0x0bffb05d,0x77fd427c,0x07ffd11e,
    0x0fffff44,0x3a0ffdd7,0x3fff626f,0x3fc800ef,0xff9807f9,0x77ffecc0,
    0x09fb7f85,0x77c44fe8,0x83bf7300,0x1be204fa,0x0ff32fe8,0xb1fdc1fe,
    0x0bff95df,0xdf10ff88,0x260ff980,0x85fecdff,0x205fd17f,0x84fa86fc,
    0x1fffffe8,0x1fb013ea,0x2fa85f70,0xff3007f8,0x700ffcc1,0x202fd89f,
    0x8ffa0ff9,0x267f85fb,0x07fd41ff,0x6ff427d4,0x3ea0cbfd,0x7c0fe404,
    0x09f33316,0x3ffff2ff,0xff0bf55f,0x260ff405,0x89fe205f,0x217ee0ff,
    0x3627dc7f,0x887f502f,0xf507c9ff,0x4c2fc809,0xfbfffbbf,0xddd77f85,
    0x213eebfd,0x0bf503fe,0x3fc407fa,0x85fb8ff3,0xf137c47f,0x20bf201f,
    0xf506ddff,0x20cfa809,0xafcef9fb,0xf507f85f,0x3f613f2b,0x2e05fb03,
    0x4cff104f,0x7c2fdc7f,0xdf50ff87,0x2e0bff70,0xfa83ffff,0x9ffe4404,
    0x9fbbfafd,0xf507f85f,0x3fa1beab,0x7c06f882,0x7c4ff00f,0xf0bff11f,
    0x3ee5fb0f,0x204ffb84,0x21ffffda,0x7f4404fa,0x95f7dd3e,0x0ff0bf3f,
    0x43fcd7ea,0x03fc81ff,0x47f81fe4,0x5fffdffd,0x73fc87f8,0x00fec09f,
    0x54dffbf1,0x21fdc04f,0x8fc9fbee,0xf507f84f,0xfb867fcb,0x8801ff06,
    0xd885506f,0xf85fbdff,0xbf52fd87,0xf301fd40,0x27d4ff53,0x7dd07f20,
    0x05f7ff5f,0xc97ea0ff,0x82ffefff,0x5fb004fb,0x5c220550,0xff87f85f,
    0x7d40ff11,0xc8fb8c44,0x9013ea6f,0xff9fd83f,0x0ff06ffe,0xfff717ea,
    0x007fa05d,0x3fea2fd4,0x7c2fdc01,0x3fa37cc7,0xf989f501,0x21ffffff,
    0x0fe404fa,0x262ea3f2,0x2a0ff00b,0x00ff885f,0xfe800bf3,0x7003fe61,
    0xfd8ff0bf,0xf882fe43,0x77ff6c45,0x2027d41c,0x01fd40fd,0x27e41fe0,
    0x22ecefe8,0x7dc002fd,0x54400444,0x3fee7f81,0xe81ff440,0x204e81af,
    0x54c19dfa,0x4c3ff07f,0xbbfccc42,0x2605ff50,0xbd14fffe,0x00bb1000,
    0x3e6ff000,0x03ff302f,0x07f0fff5,0x88ffffd4,0xff302fff,0xffc89fff,
    0xbfffff7f,0x00013300,0xf0000000,0xf500ff6f,0x04c14c0b,0x41555510,
    0x65c400aa,0x2aaa982c,0x00039995,0x00000000,0x00a2ff00,0x00000014,
    0x00000000,0x00000000,0x13200000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x22000000,0x026a600a,
    0x00d40dcc,0x8d440000,0x200000aa,0x540aaaa8,0x0199000a,0x2fe40654,
    0xfffb27ec,0x13ffee0b,0x7dc9fdf3,0xfd877cc1,0x7004ffd9,0x400bf6bf,
    0x2fffffea,0xd83ffff5,0x2ff9802f,0xf301ff10,0xb87fc41f,0xa83feadf,
    0x5f25ffec,0xf909f16c,0x3bfff67f,0x5fb804ff,0xdf5005fb,0x2239ff97,
    0x7ec1fe99,0x00fe8802,0x3fa01ff1,0x1fe97ee3,0xffa809f5,0x76df2f91,
    0xfb1ff980,0x201fea1f,0x005fb5fb,0x80ff45f9,0x017ec1fe,0x3fffee00,
    0x9bee4fff,0x6cbf62fe,0x32ff802f,0x05f5bfbf,0xff117ec0,0xffffd981,
    0x9ffb5fb5,0x0fec5f90,0x57ec1fe8,0x3fea4ffd,0x7f7541ff,0x3e23eeef,
    0x7d47f89f,0xf9805fdf,0x3e336a1f,0x217ec004,0x37fe61ff,0xfffb5fec,
    0xffa89ffd,0x3fa06fcb,0x7f7ffec1,0x3ffdd52f,0xc803fe20,0xfe84fbcf,
    0x7ff6403f,0x1003f605,0xff117ec1,0xbf71ff41,0x3fd43ff6,0x037ffbea,
    0x7fec1fe8,0x3fd09f90,0x9803fe20,0x7ec1feef,0xd81fd4ff,0x4bea02df,
    0x363ff500,0xf89bf22f,0x7ed7ee0f,0xfe83fe22,0xb07fa000,0x742fdc5f,
    0x01ff101f,0x7d46ffe8,0x87fbff8d,0x37e201fd,0xffb85ffa,0xffb9bfb4,
    0x3ee3fcc3,0x1ff85fb5,0x0b33bbf6,0x17ec1fe8,0x03fd0bf7,0xf7003fe2,
    0xf33fc85f,0x01530bff,0x7d6fc7ec,0xffb4fe82,0x7f983dff,0x22fdafdc,
    0x3fea0ff8,0xfd06ffff,0x3ee2fd83,0x3e01fe85,0x437dc01f,0x0bfee4fc,
    0x57d4032a,0xf907f3f8,0x8806bf67,0x2bff11ff,0x89bf22fd,0x07fe20ff,
    0x45fb07fa,0x01fe85fb,0x44f33bfa,0xf981ffa9,0x86ffecdf,0x25e884ff,
    0x32a2fade,0x200bf66f,0x5fffdffd,0x3ffb9bfb,0xff307fcc,0x37ff32e1,
    0x7dc5fb3c,0x9bff9975,0x9fffd307,0xa80fffee,0x5fdbffff,0x07e41ff4,
    0x3ef8bfd5,0x6c4017ec,0xf95f9dff,0xfd03dfff,0x6c5ffddf,0xb6ffffff,
    0xfdafdc5f,0x206fffff,0x02f2a098,0x00800440,0x2aa00080,0x20022000,
    0xbccca801,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x0a980000,0x0bcba800,0xa882cca8,0x2aa22a82,0x5100aaaa,0x99710155,
    0x332a2017,0x3999711c,0x2aaaaa88,0x503ccca8,0x3f600599,0x7ffec003,
    0x3fffa21f,0x21fe60ef,0xffff50ff,0xffd883ff,0x7ffc41ff,0x7fcc1fff,
    0xfff76fff,0x7ffd4bff,0x3ffe27ff,0x3f620fff,0x3e60efff,0x4007fb0e,
    0x20999efa,0x5ffcaefd,0x43fe1fe6,0x0ccccefa,0x2aafbfa2,0x64467ec0,
    0x2bbfe24f,0x733534b9,0x266623ff,0x277f67fa,0x3bf20b99,0x3f24fe99,
    0x4007fb3f,0x1ff303fc,0x7f987fcc,0x09f50ff8,0xfe805fb8,0x5fd97ea2,
    0x980ffc00,0x880bfe7f,0x43fe60ff,0x47fb1ff9,0x07fb06fd,0x4bfe17ea,
    0x50ff87f9,0x97f4019f,0x227bf200,0x00bfe2fe,0x3e607f98,0x4c0bbfa7,
    0x07ffa66f,0x1df93fd8,0x66ff6644,0x3a13f24c,0xff0ff33f,0x3bfffea1,
    0x7fff7fc2,0x7ffec40d,0x003fe23f,0x403dfdd3,0x3ffea7f9,0x5d7ea0be,
    0x3602ffff,0x4c0ffabf,0x7fffffff,0x4ff613f2,0x30ff87f9,0x23fffb99,
    0xffddfff8,0x4ffffb85,0xd3003fe6,0x2601bfff,0x7ffecc7f,0xdfbbf70e,
    0x7ec05fb3,0x7ec01ffd,0xfd0df703,0x3fe1fe65,0x7c53fa00,0xb83fe61f,
    0x14ffb9ef,0x6c4003ff,0x20ff305f,0xff55ffc8,0xe88ff4bf,0x1dfffb0e,
    0xf503fd80,0x3e23ff0f,0x3203fc47,0xff07fe5f,0xdf50ffc1,0x2a001ffc,
    0x80ff306f,0x45ff36fc,0x7ff90ff8,0x017faff6,0x3fe207fb,0xff8df70c,
    0xf881bea1,0xfa93f64f,0xdf30ffc7,0x8060ffe4,0x5fc815fc,0xfe97f206,
    0xff997ee2,0x7ff17fb1,0xf901fec0,0xc85ffdff,0x22ffccff,0x0effecdb,
    0x3ff37fe6,0x7e677ec3,0x3fffe23f,0xd99b96fe,0x373ee3ff,0xddff12ff,
    0x7fdc5ffd,0x0441ffdd,0x0bfea7fb,0x3ee01fec,0xfc881eff,0x7fe42fff,
    0xffa80cff,0xffd883ff,0xffc883ff,0xffffb4ff,0x7fffd43b,0x3ffffa23,
    0xefffa82e,0x323fd801,0x03fd80ff,0x02200110,0x11000988,0x44002600,
    0x44009980,0x40066200,0x00000008,0x00000000,0x00000000,0x00000000,
    0x65440000,0x206a62bc,0x303551a9,0x2202a655,0xa885531a,0x2aaaaa0a,
    0x555552aa,0xa9854401,0x5506aa20,0x8aa61aa8,0x82aa02a8,0x3fee0aa8,
    0x1bea7fff,0x42fec7fe,0x303f94fd,0xc8bfe29f,0x7ffff46f,0xffffd6ff,
    0x25f501bf,0x1bfe20fc,0x97fe21fd,0x81fe67fe,0xb97fa2fe,0x45baacff,
    0xa97ee2fe,0xf91ff87f,0x7e47f303,0xaa85ff16,0xfd5ffaaa,0x70bff759,
    0xff11f23f,0xf887f45f,0x4cfff17f,0x5cbfa07f,0x07ff10ef,0x3fe2df50,
    0xf987fe21,0x3ea07ee7,0x3f2bfe23,0xd0ffb806,0xd13fd45f,0x5dffddfd,
    0xfe9bffe2,0xf75fdf10,0x81fe61fb,0x21ff9afe,0x3fa007f9,0x4fd85fba,
    0xd2fb97ee,0xdf70bead,0xff9803ff,0xff88bfa2,0xfddffd10,0x3b7e25df,
    0x3e61fd1f,0x0fcedcfb,0x57f40ff3,0x937dc3fe,0xddf50999,0x74df703f,
    0x3e2bee2f,0xfe82fa8f,0x45fe805f,0x21bee2fe,0xbf117e7d,0x4c3fabf5,
    0xfcbfedaf,0x7f40ff30,0x25fb86fe,0xfe80ffff,0x11ff105f,0x5d7d41ff,
    0xe81fabff,0x7fdc04ff,0x7e5e7f40,0x9f16e82f,0xd3ff5f88,0x3eebea1f,
    0xff31fc8f,0x437f7f40,0x3fe666fb,0x201ffa80,0x545faafe,0xfbdfddbf,
    0x0ffffd41,0xfe82ff88,0x6542ffff,0x24efccff,0xfd9f75f8,0x5be6bea1,
    0x40ff31fc,0x4c3ffafe,0x407fc0ff,0x6fe407f8,0x7dfcc3fc,0x740fcfdb,
    0xfd05fdbf,0x0273fa0b,0x7fffffe4,0x7c57e27f,0x25f70fef,0x3e65f72c,
    0x3eabfa07,0x3e2ff41f,0x407f880f,0x4c0ffff9,0xfefa8fef,0x7fcdfee0,
    0xe807fdc2,0x54f8802f,0x325f885f,0x03f70fff,0x81fe65f7,0xa8dfb2fe,
    0x0ffeefff,0xff807f88,0x16ff886f,0x3fe21fff,0xfff1bf63,0x3fafffff,
    0xf73f9802,0x3e25f883,0x703f70ff,0x3bbfe65f,0x225fd4ee,0x7ff4c3ff,
    0x0ff105ff,0xf109ff90,0xf93fec7f,0xf13ff98d,0x2fffffff,0x2fa802fe,
    0x45f881f9,0x03f90ffd,0x3ffe67f7,0x45fd5fff,0x01301ffb,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x2aaa0000,0xaaa881aa,0x510aaaaa,0x554c5505,0x5511aaaa,0x2a215555,
    0x511aaaaa,0x22013555,0x54402cca,0x5555542a,0x00d54c00,0xd088072e,
    0x98bfffff,0xffffffff,0x7f88ff11,0x3ffffff2,0xffffff54,0x3ffffea5,
    0xfffff33f,0xffffa87f,0x17ff605f,0x0dfffffd,0xea82fff4,0x1ff503ff,
    0x5ff959fd,0x57fdd544,0x88ff10aa,0x3fea627f,0x55df5099,0x2bbea155,
    0x5ff31aaa,0x7d47ffb5,0xa81ffc9b,0x57f45fff,0xf882ffa9,0xfffd87ff,
    0xd7ff903f,0x8827ec3f,0x88ff107f,0xa87f887f,0x81bea06f,0x23fdc6f9,
    0x3e21ff40,0x0ff45faf,0xd9f70bf7,0xfd8db85f,0xfd7fd103,0xf881fec3,
    0xf88ff107,0xfa87f887,0x981bea06,0x00ffc46f,0x9bfc85fd,0xfb0ff45f,
    0x9f95fb07,0xfb01fec0,0xdfb79fd5,0x441fe201,0x7feeeeff,0xefa87f88,
    0x3fea2aaa,0xdf31eeee,0x3e605ff0,0x7cdbe60f,0x7f777f45,0x1beaff04,
    0xfca83fd8,0x19ffffd5,0xf883fc40,0x87ffffff,0xfffa87f8,0xfff50fff,
    0x1be65fff,0x3fe20bfe,0x5f98ff43,0x7ffffff4,0xff8afd42,0xf887fb01,
    0x3eeffa3e,0x41fe201f,0x43fc47f8,0x9efa87f8,0x81bea199,0x0ffcc6f9,
    0xbf713fa2,0x213df533,0x8ff911fe,0x40ff63fc,0x3fd003fd,0x7f8817f2,
    0x7f88ff10,0x6fa87f88,0xf981bea0,0xd107fdc6,0xffff909f,0x3fa7ffff,
    0xfe83fe61,0xb05fffff,0x47fa007f,0xff101ff8,0xff11fe20,0xdf50ff10,
    0xf3037d40,0x893fae2d,0x999504fe,0x3a59dfb9,0xf99fee1f,0x0ffeeeef,
    0x6ee43fd8,0x361febdd,0x20ff105f,0x73fc47f8,0x27ddffdd,0x3fea06fa,
    0xff32eeee,0x6c1bfffd,0x07ffffff,0xddfd17e6,0x27dc7ffd,0xfffc97fc,
    0xfffb7fff,0x7cc3fd9f,0x107f881f,0x327f88ff,0x54ffffff,0x7ffd40df,
    0xfff33fff,0xfffd05bd,0x7cc0ffff,0x5effff45,0x7e417ec1,0xffffff94,
    0x0266662f,0x00000000,0x00000000,0x00000000,0x50000000,0x85555555,
    0x0002ccb8,0x014c0b80,0x00800000,0x00000008,0xf717ec00,0x3fffffe9,
    0x3fffe66f,0xeffe985f,0x226fc802,0x7f5c04ff,0x7fec42ff,0x7fff542e,
    0x7fffecc6,0x27febee3,0x2efea4fd,0x27f60eff,0x8bf64ffd,0x999994fb,
    0x4e7f4dfd,0x3fea2ffa,0xb102fffe,0x5ff983df,0x5fddffb0,0x7fe6ffc4,
    0xb979ff31,0xffcccea8,0xdffbff72,0x3ffea1fd,0x3ff65fee,0x5fb2ffef,
    0x5ff027dc,0x4bf91fe6,0x21ff23fe,0xd100dfe8,0x0ffd41df,0x3ea3fc82,
    0x9000df95,0x7fd7ee9f,0x7ff52fb9,0x0ffd9fe2,0xb8bf69f9,0x4cdf704f,
    0xf9b7d47f,0xf307fcc7,0xffb1009f,0xfd013f23,0x2aff7557,0x2600adff,
    0x5f74fdaa,0xfa97ddbe,0x45fb2646,0x5c5fb5fb,0x445ff04f,0x7fc99cff,
    0x43ff0df5,0xf5001ffd,0xf00ff69f,0x4fffffff,0x444ffffc,0x74fffffe,
    0x97ddbe5f,0x17ec05fa,0xb8bf6bf7,0xc86fb84f,0x36ffffff,0x07fc41ff,
    0xf700bff2,0x2027ec7f,0xda8800ff,0x433fa2ff,0x3e5f74fb,0x17ea5f76,
    0xafdc5fb0,0x09ff33fd,0x332607fd,0x7ff15fcb,0xffa837dc,0xb85ff904,
    0x7fd041ff,0x3e3fe800,0x7dd3f61f,0x54beedf2,0x717ec05f,0x3f7feebf,
    0x03fd44ff,0x7fe47f90,0x2602ffde,0x3bf625ff,0xfddffd01,0x666ffcc7,
    0xf979b93d,0x7677f43f,0x3e5f74ff,0x17ea5f76,0xafdc5fb0,0x4fadffd8,
    0xfb801ff4,0x77ffdc0f,0x643e8802,0x3ff2200e,0x7ff542ff,0xffff92ff,
    0xdffe985d,0x3e5f74fa,0x17ea5f76,0x2fdc5fb0,0x0ffa8022,0x5fffdd70,
    0x00000440,0x22004400,0x80133009,0x00000008,0x7fd00000,0x0677fe40,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xbf900000,0x05509fb0,0x2bf101fd,0x3ffffffc,0x7fcc5ff3,
    0x2aa05700,0x221aaaaa,0x54415540,0x2616ecc2,0x0aa22aa0,0x7cc1fe00,
    0x083fe20f,0x81fd82bd,0xffff94f9,0x87fdc7ff,0x3ff703fe,0xffffffd0,
    0xe887feab,0x887fc44f,0x5f54ffff,0x037d4ffc,0x7fd03fc0,0xb3d52fdc,
    0x4bf23f5b,0x3607f52a,0xfcdfd85f,0x0dd9f105,0x35555553,0x3b213ff6,
    0xbfb9fe23,0x20ffefe9,0x005f98fe,0x9bee07f8,0x3ffaa2fe,0x17f71eff,
    0x705f71ff,0xfff101ff,0x2a3f201f,0xffa8003f,0xb99fe001,0xe87ffb10,
    0x9805f98f,0xcccffccc,0x3e27fe20,0x0dffe887,0x2ffef3e6,0x0ffd41fc,
    0x2609ff70,0xfd83f63f,0x224fffff,0x4037c000,0x13e2fb00,0x3ffffea0,
    0x67e41fff,0x77fdc4fb,0xdbf12ffe,0xf88fbdfd,0x3ffe203f,0x7cc6e80f,
    0x3bbbbb25,0x0000004e,0xff000000,0x1feef980,0x6c6f46cc,0x3f2fffe0,
    0x202ff47f,0x886fdcfe,0x44000880,0x08888888,0x00000000,0x7f403fc0,
    0xe837406f,0x25ffa9ff,0x3eeeeffc,0x1ffc5bf2,0xfff00000,0x0dffffff,
    0x00000000,0x7fdc03fc,0xfd804c02,0xffc93fe6,0xff54ffff,0x000ffd43,
    0xccccc800,0x0003cccc,0x32000000,0x00000004,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_bold_18_usascii_x[95]={ 0,3,1,0,0,0,0,3,2,2,1,0,1,2,
3,0,0,1,1,1,0,1,0,0,0,0,3,1,0,1,1,2,0,0,1,0,0,1,1,0,0,1,1,1,
1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,2,1,2,0,0,0,0,1,1,0,0,0,0,1,1,
1,1,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,1,3,1,0, };
static signed short stb__consolas_bold_18_usascii_y[95]={ 13,0,0,1,-1,0,0,0,-1,-1,0,3,9,7,
9,0,1,1,1,1,1,1,1,1,1,1,3,3,3,5,3,0,0,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,14,0,3,0,3,0,3,0,3,0,0,
0,0,0,3,3,3,3,3,3,3,1,4,4,4,4,4,4,0,-2,0,6, };
static unsigned short stb__consolas_bold_18_usascii_w[95]={ 0,4,7,10,10,10,11,4,6,6,8,10,6,6,
4,9,10,8,8,8,10,8,10,9,9,9,4,6,9,8,8,7,10,10,9,9,10,8,8,10,10,8,7,9,
8,10,10,10,9,10,9,9,10,10,10,10,10,10,9,6,9,5,10,10,7,9,9,8,9,9,10,10,8,8,
7,9,8,10,8,10,9,9,9,8,9,8,10,10,10,10,8,7,3,8,10, };
static unsigned short stb__consolas_bold_18_usascii_h[95]={ 0,14,5,12,17,14,14,5,18,18,9,10,8,3,
5,15,13,12,12,13,12,13,13,12,13,12,11,14,11,6,11,14,17,12,12,13,12,12,12,13,12,12,13,12,
12,12,12,13,12,16,12,13,12,13,12,12,12,12,12,17,15,17,7,3,5,11,14,11,14,11,13,14,13,13,
17,13,13,10,10,11,14,14,10,11,13,10,9,9,9,13,9,17,19,17,5, };
static unsigned short stb__consolas_bold_18_usascii_s[95]={ 125,110,112,76,27,21,1,96,12,5,23,
1,121,121,83,90,111,112,71,84,80,44,53,1,64,11,122,32,32,74,42,
13,54,101,91,74,60,51,42,1,22,33,93,118,109,98,87,22,66,79,1,
101,11,33,23,34,45,12,56,38,100,65,63,83,88,79,59,51,49,60,11,
69,89,98,71,1,80,89,110,21,39,115,100,70,107,119,12,32,52,117,43,
19,1,45,101, };
static unsigned short stb__consolas_bold_18_usascii_t[95]={ 1,1,90,50,1,21,21,90,1,1,90,
90,64,73,90,1,36,64,64,36,64,36,36,77,36,77,36,21,77,90,77,
21,1,64,64,36,64,64,64,50,64,64,36,50,50,50,50,36,50,1,64,
36,64,36,50,50,50,50,50,1,1,1,90,96,90,77,21,77,21,77,36,
21,21,21,1,36,21,77,77,77,21,1,77,77,21,77,90,90,90,21,90,
1,1,1,90, };
static unsigned short stb__consolas_bold_18_usascii_a[95]={ 158,158,158,158,158,158,158,158,
158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,
158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,
158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,
158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,
158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,
158,158,158,158,158,158,158, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_bold_18_usascii_BITMAP_HEIGHT or STB_FONT_consolas_bold_18_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_bold_18_usascii(stb_fontchar font[STB_FONT_consolas_bold_18_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_bold_18_usascii_BITMAP_HEIGHT][STB_FONT_consolas_bold_18_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_bold_18_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_bold_18_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_bold_18_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_bold_18_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_bold_18_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_bold_18_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_bold_18_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_bold_18_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_bold_18_usascii_s[i] + stb__consolas_bold_18_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_bold_18_usascii_t[i] + stb__consolas_bold_18_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_bold_18_usascii_x[i];
            font[i].y0 = stb__consolas_bold_18_usascii_y[i];
            font[i].x1 = stb__consolas_bold_18_usascii_x[i] + stb__consolas_bold_18_usascii_w[i];
            font[i].y1 = stb__consolas_bold_18_usascii_y[i] + stb__consolas_bold_18_usascii_h[i];
            font[i].advance_int = (stb__consolas_bold_18_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_bold_18_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_bold_18_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_bold_18_usascii_s[i] + stb__consolas_bold_18_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_bold_18_usascii_t[i] + stb__consolas_bold_18_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_bold_18_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_bold_18_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_bold_18_usascii_x[i] + stb__consolas_bold_18_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_bold_18_usascii_y[i] + stb__consolas_bold_18_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_bold_18_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_bold_18_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_bold_18_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_bold_18_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_bold_18_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_bold_18_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_bold_18_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_bold_18_usascii_LINE_SPACING
#endif

