// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_9_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_9_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_9_latin1_BITMAP_WIDTH         256
#define STB_FONT_times_bold_9_latin1_BITMAP_HEIGHT         38
#define STB_FONT_times_bold_9_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_times_bold_9_latin1_FIRST_CHAR            32
#define STB_FONT_times_bold_9_latin1_NUM_CHARS            224

#define STB_FONT_times_bold_9_latin1_LINE_SPACING           6

static unsigned int stb__times_bold_9_latin1_pixels[]={
    0x01804008,0x44018022,0x85c09980,0x026a602a,0x40776011,0x37b00998,
    0x82aaa288,0x1880cc0a,0x10081813,0x850130cc,0x18022008,0x08811010,
    0x4c0c0406,0xd88260dc,0x202a140d,0x2218c0a9,0x54091022,0x37203702,
    0x2e405500,0x5a8a055c,0x9b0a65b0,0x30cc0660,0x6da03303,0x3d1622bf,
    0x150c83b1,0x8e1440c8,0x121a1ab9,0x7301b816,0x44887b10,0x0885b30c,
    0x546a6244,0x222e6151,0x4288f30a,0x239c59d9,0x8199320a,0x2a6352a9,
    0x04cc1a89,0x8aa98198,0xa64e991a,0x35459d53,0x23d01102,0x55dca21d,
    0xb41d8f42,0xa9622bff,0x2a3916e6,0x732c0440,0xb31a17c4,0x530d5d4c,
    0x73010357,0x98dcc375,0x6545531b,0x44663530,0xf885451f,0x26ea5855,
    0xdb8eb6a4,0x3a50aa4c,0x28fc43b1,0x47a147e2,0x21d8f41d,0x47c451f8,
    0x36a31f11,0x77017278,0x9296e6a8,0x735433b5,0x457f968b,0x47b9b258,
    0xb07702a4,0x2d9a8ee3,0x3e278832,0x227e2389,0x4fc43b83,0x7c47e238,
    0x2f263f11,0x442a5f11,0xf510450f,0x27662837,0xb89a36a6,0x423b950a,
    0x0f896e6a,0x2a287c45,0x2e6a96e6,0x36143e25,0x3eb526c4,0x46d80f50,
    0x1f29ee6c,0x1ee6c86f,0x4b11544d,0x23893279,0x8ec36c0a,0xb9232e3b,
    0x29f89e20,0x6d814fc4,0x3e214fc4,0x47e23f11,0x218eb86a,0x310450f8,
    0x366089f3,0x773d6a69,0x3640f25b,0x2287c4f7,0x736450f8,0x44f7364f,
    0x4c39850f,0x9716faa3,0x17c4c155,0xd31264f3,0x9e6113d5,0x88aa344c,
    0x20655dc5,0x7c4c151c,0xec8732c2,0x7c4f11a0,0x41dfc43b,0x2fe22f89,
    0x1f88fc43,0x82fe23f1,0x451f84f8,0x89ee310a,0xdb9afa26,0x7d31ce4c,
    0x4c9e6221,0x28fc28fc,0x9e64c9e6,0x2628fc4c,0x5a822608,0x2e4d41c0,
    0x0502e6aa,0x40b9aa83,0x10b11546,0x82a1b03f,0x70e25c9a,0x98d15d44,
    0x88627e27,0x64d4189f,0x88627e25,0x3e23f11f,0x21360311,0x542a1acc,
    0x08000123,0x3553b801,0x41acc817,0x4d541acc,0x05cd540b,0x41b86b32,
    0x31025c1b,0x005f52b8,0x40019988,0x40a15428,0x098c41a8,0x804bea57,
    0x10cc2aa0,0x2ddfcc57,0x95cb77f3,0xb77f32fa,0x32f997cc,0x6f44025f,
    0x00013000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x02600000,
    0x98113093,0x7126e1c1,0x504542a8,0x188330b5,0x2622981c,0xcb881981,
    0x45426c40,0x226a06e0,0x28830cc1,0x18861882,0x0e02a202,0x4198221c,
    0x14c0b82a,0x221106aa,0x330662aa,0x14c0aa88,0x826a6066,0x9a880aa8,
    0x83350ea0,0x82aa219b,0x1986a619,0x24a88554,0x1541aaa9,0x40cc7555,
    0x2a0aa269,0x20440101,0x88ea24a8,0x6e4c3d1e,0x88e48870,0x20e488e4,
    0x4c1983ac,0x457731c1,0x2a6140aa,0x5c59b11f,0x5d5376e1,0x2259773a,
    0x9550a9ab,0x2d82aa27,0x2a62a253,0xb524c760,0xba926ea5,0x4432a249,
    0x223f10ca,0x219510ca,0x11f10ca8,0xeb865447,0xd7911541,0x702b82a8,
    0x7510ae05,0x26f71541,0x41d7264c,0x3a441748,0x7c40ba44,0x42ea218a,
    0xbb8e0ba8,0x2a17514b,0x32a5849b,0x46a0ba62,0xb7791bfa,0xb066f22a,
    0x3542ea23,0x31994d42,0x2957708d,0x276669d9,0x554b6aa6,0x6d543e2d,
    0x2aa5b552,0x550a7e2d,0xca8fdc5b,0x54d3771d,0xd836c1dc,0xabb8db06,
    0x3723b954,0x4c447a98,0x4a626299,0x23733312,0x2e252998,0xa55dc75d,
    0x64514abb,0x295775bb,0x97d469d9,0x79792ec9,0x4c7f6248,0x157654cd,
    0xca55dc31,0xc9437505,0xa55e4665,0x276669d9,0x5c4b2e26,0x65c43e2c,
    0x2e259712,0x710efe2c,0x3cae4259,0x079345e4,0xf8983f13,0x790fc4c1,
    0x3d50f295,0x2be9c16e,0x389c4a9c,0xd1974a9c,0x794abc8b,0x95770a95,
    0x4ecd2af2,0xca442b86,0x959245ab,0x79331d89,0x2af20453,0x2e660f54,
    0xa6cd5288,0xd7d11cc9,0x99735f44,0x0f8f32e7,0x332e7997,0x47c79973,
    0x5cf32e18,0x217d32ba,0x2fa66bd9,0x351766a0,0x25d9a8bb,0x17d31bb8,
    0x1c064dec,0x5c45437b,0x22a2c8e5,0xd79f35b8,0x446ee21b,0xcc8871bb,
    0x3a237710,0xcb8af26b,0x4c37b109,0x5446ee61,0x32155541,0xcb86ee22,
    0x0aaaa0aa,0x0007b377,0x05f30000,0xb57f3000,0x00001100,0x572fa95c,
    0xfa95cbea,0x08004002,0x30410204,0x00002041,0x00000010,0x00000800,
    0x40000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x40cc0cc0,0x288aa8a9,0x98620d4c,
    0x54c0330a,0x830a8a61,0x4aa151a9,0x5c731622,0x5306a674,0x39893035,
    0x49b9844c,0x57951d5c,0x20540998,0x40298663,0x310aaaa8,0x1ddc414c,
    0x26088851,0xa8d4c1aa,0x31a88620,0x10982a85,0x2020d4c9,0x23d1aaa8,
    0x3e616a1d,0x3f050f98,0x21f32ae8,0x472a8e09,0x221c55f8,0x42adc50f,
    0x8f8855c1,0x7c413f11,0x82aae5a8,0xda84dc18,0xa9a72e59,0x2065478d,
    0x25a8a228,0x517b805a,0xbc85a8a6,0x44427a3b,0x991f1088,0x36229f44,
    0x2a0b8fc4,0x287a21fc,0xf05707e2,0x25b9aaa1,0x45742bea,0x21f809bf,
    0x219ec0f9,0x505d51eb,0x3e05437f,0x204fc430,0xf1361d42,0x2f87c3d3,
    0x3a831079,0x8bc9676a,0xca87d6a6,0x4751d43b,0x40e3665a,0x8ea18f9a,
    0x2f223be9,0x82041f50,0x1fd44c8f,0x80e7e25c,0x4087aa1d,0x47c36c0f,
    0xb5354b71,0xeb9eb8f1,0x1fd43f01,0x45a827ea,0x1fcc44fb,0xea861f0a,
    0x516a242d,0xf54c8f87,0x2fa67d17,0x54b50b10,0xd7b30ebe,0x3d32df54,
    0xa96a5a8d,0x5440f665,0x996a1bfb,0x42b2a69d,0xbf820468,0x4b86d82d,
    0x244076fc,0x3e3cc7a3,0x7f07e260,0x2a4b9e69,0xf8af88f5,0xb10fc5c1,
    0x25a89d02,0x7b841d12,0xb50c7e1c,0x96a3445b,0x0657c089,0x0cc3f11f,
    0x72d453b5,0x0b534401,0x25a8d1b3,0xee996a5a,0x422f3182,0xa9a3665a,
    0x408d15cc,0x131e63e0,0x47c4b87d,0xd908b85d,0xa83e149f,0x5047c5d9,
    0x56d41735,0x2b212483,0x2e1fedc6,0x9bb86cc1,0x21448ea3,0x22e419cc,
    0x83735c48,0x65fcc1f9,0x137104c3,0x4c01535c,0x5d50950d,0xb9ae6b8d,
    0xc83e7aa6,0x2e775f50,0xa99ebaa6,0x44c1f319,0x777f3088,0x321fba54,
    0xbf15f30d,0x3d0ffee1,0xa95cbe60,0x0005f32f,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x554c0000,0x8aaaa22a,0x2a6330a9,0x4c1aa981,0x26a61aaa,
    0x82aa62a8,0x4c2a60a9,0x655dc1aa,0x2a255328,0x4c19510b,0x99926ea4,
    0x2a8e9719,0x55e54418,0x40151980,0x5d408442,0x9a850911,0x2a33b51d,
    0x4184abbc,0x50c61bc9,0x54288a21,0x43182218,0x44779518,0x3e518801,
    0x5f113099,0x3e2297c4,0x25b8f881,0x8fc388f8,0x896cfc2e,0x8f89765d,
    0x27e7a66b,0x2aee1b70,0x2ae5b554,0x5cd3b30a,0x231f1399,0x2a041dca,
    0x2ea3bcca,0x0e06ee22,0x4bba8e72,0x8b710e0a,0x7de3663e,0x8e9832a0,
    0x22e35730,0xb32c4914,0x4c6aa6b3,0x3a6952bb,0x2e912269,0x80fc1953,
    0x418eb85c,0x3f0f880f,0xe87c14fc,0xf51ec7c2,0x98f8b731,0xb1265746,
    0x5c52af2b,0x9d98792c,0xc93638e6,0x88ddddc3,0x8065c4bb,0x37b771d9,
    0xb5b906cc,0x237b7704,0xb335c1f8,0x47483ef1,0xa86d5c59,0x054c913a,
    0x885e4717,0x3665149d,0x81892268,0x2607e0bb,0x1f09f00f,0xf8fe1f10,
    0x2eabf83b,0x336215fc,0x0fdfc5b9,0x49b8a62e,0x332e3771,0x3a217d33,
    0xa9332e6b,0x8502fa62,0x220ceadb,0x203750bb,0x32a39c43,0x0b88d11c,
    0x754cab72,0x3f1f3d53,0x70d50c22,0x2982608a,0x81ca1a80,0x00626aea,
    0x89f40fc0,0x087c1ec0,0xf87e23e2,0x2e87c188,0x47d4407c,0x026c7c5b,
    0x00000000,0x10000000,0x00003002,0x0005ddd4,0x00000000,0x00000000,
    0x5c3f8800,0x3620eaaf,0x32d5fcc5,0x5fcc597f,0x3e2be65a,0x2530be63,
    0x2be61d93,0x000002f8,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x8ddddc00,0x4311bbbb,0x0aaaa099,
    0x422b2615,0x5dc33089,0x0000003b,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x27000000,0x53909999,0x199986ea,0x9b8a611c,
    0x000000a1,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x54266621,0x0000000a,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_bold_9_latin1_x[224]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__times_bold_9_latin1_y[224]={ 7,1,1,1,1,1,1,1,1,1,1,2,5,4,
5,1,1,1,1,1,1,1,1,1,1,1,3,3,2,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,1,3,3,3,3,3,3,1,1,1,4,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,3,1,1,2,1,
1,1,1,1,1,3,3,4,1,0,1,2,1,1,1,3,1,3,6,1,1,3,1,1,1,3,-1,-1,-1,0,
0,0,1,1,-1,-1,-1,0,-1,-1,-1,0,1,0,-1,-1,-1,0,0,2,1,-1,-1,-1,0,-1,1,1,1,1,
1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,1,1,1,1,1,1,1,
 };
static unsigned short stb__times_bold_9_latin1_w[224]={ 0,3,4,4,4,8,7,2,3,3,4,5,2,3,
2,3,4,4,4,4,4,4,4,4,4,4,3,3,5,5,5,4,8,6,6,6,6,6,5,7,7,3,5,7,
6,8,6,7,5,7,6,5,6,6,6,9,6,6,6,3,3,2,5,6,2,4,5,4,5,4,4,4,5,3,
4,5,3,7,5,4,5,5,4,3,3,5,4,6,4,4,4,3,2,3,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,3,4,4,4,5,
2,4,3,6,3,4,5,3,6,6,3,5,3,3,3,5,5,2,2,3,3,4,6,6,6,4,6,6,6,6,
6,6,9,6,6,6,6,6,3,3,3,3,6,6,7,7,7,7,7,5,7,6,6,6,6,6,5,5,4,4,
4,4,4,4,6,4,4,4,4,4,4,3,4,4,4,5,4,4,4,4,4,5,4,5,5,5,5,4,5,4,
 };
static unsigned short stb__times_bold_9_latin1_h[224]={ 0,7,4,7,7,7,7,4,8,8,4,5,4,2,
3,7,7,6,6,7,6,7,7,7,7,7,5,6,5,3,5,7,8,6,6,7,6,6,6,7,6,6,7,6,
6,6,7,7,6,8,6,7,6,7,7,7,6,6,6,8,7,8,4,1,2,5,7,5,7,5,6,6,6,6,
8,6,6,4,4,5,6,6,4,5,7,5,5,5,4,6,4,8,8,8,2,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,8,7,5,6,
8,8,2,7,3,4,3,2,7,2,4,5,4,4,2,6,8,2,3,4,3,4,7,7,7,6,8,8,8,7,
7,7,6,8,8,8,8,7,8,8,8,7,6,8,9,9,9,8,8,5,7,9,9,9,8,8,6,7,7,7,
7,7,7,7,5,6,7,7,7,7,6,6,6,6,7,6,7,7,7,7,7,5,5,7,7,7,7,8,8,8,
 };
static unsigned short stb__times_bold_9_latin1_s[224]={ 227,227,218,243,59,119,149,233,140,136,223,
145,253,89,249,167,171,212,225,187,230,192,197,202,207,212,162,235,133,79,139,
224,84,243,198,234,29,36,250,248,43,239,25,217,22,57,53,1,51,114,66,
47,1,64,36,15,205,15,8,110,60,101,190,117,114,89,9,94,69,115,187,
182,176,172,153,156,152,182,236,84,131,125,196,80,43,99,110,73,177,86,172,
122,126,149,104,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,227,77,198,
31,105,71,217,144,110,241,252,201,73,89,217,93,206,166,214,210,100,119,104,
253,246,242,85,228,142,135,128,109,129,172,69,94,87,80,162,62,158,165,179,
47,186,190,194,28,97,220,31,1,23,76,93,151,111,16,9,39,210,203,91,
237,23,32,37,42,18,54,126,104,64,248,106,75,143,148,81,114,1,137,157,
162,176,101,229,120,157,231,181,6,12,51,56,46, };
static unsigned short stb__times_bold_9_latin1_t[224]={ 9,1,27,1,11,11,11,27,1,1,27,
27,1,33,27,11,11,19,19,11,19,11,11,11,11,11,27,19,27,33,27,
11,1,19,19,11,27,27,19,11,27,19,19,19,27,27,19,19,27,1,27,
19,27,19,19,19,19,27,27,1,19,1,27,33,33,27,19,27,11,27,19,
19,19,19,1,19,19,27,27,27,19,19,27,27,19,27,27,27,27,19,27,
1,1,1,33,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,9,19,1,
19,27,19,1,1,33,11,27,27,33,33,11,33,27,27,27,27,33,19,1,
6,27,27,33,27,11,11,11,19,1,1,1,11,11,11,19,1,1,1,1,
11,1,1,1,11,19,1,1,1,1,1,1,27,11,1,1,1,1,1,19,
1,11,11,11,11,11,11,27,19,11,1,11,11,19,19,19,19,11,19,11,
11,11,11,11,27,27,1,11,11,11,1,1,1, };
static unsigned short stb__times_bold_9_latin1_a[224]={ 33,43,72,65,65,130,108,36,
43,43,65,74,33,43,33,36,65,65,65,65,65,65,65,65,
65,65,43,43,74,74,74,65,121,94,87,94,94,87,79,101,
101,51,65,101,87,123,94,101,79,101,94,72,87,94,94,130,
94,94,87,43,36,43,76,65,43,65,72,58,72,58,43,65,
72,36,43,72,36,108,72,65,72,72,58,51,43,72,65,94,
65,65,58,51,29,51,68,101,101,101,101,101,101,101,101,101,
101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,
101,101,101,101,101,101,101,101,33,43,65,65,65,65,29,65,
43,97,39,65,74,43,97,65,52,71,39,39,43,75,70,33,
43,39,43,65,98,98,98,65,94,94,94,94,94,94,130,94,
87,87,87,87,51,51,51,51,94,94,101,101,101,101,101,74,
101,94,94,94,94,94,79,72,65,65,65,65,65,65,94,58,
58,58,58,58,36,36,36,36,65,72,65,65,65,65,65,71,
65,72,72,72,72,65,72,65, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_9_latin1_BITMAP_HEIGHT or STB_FONT_times_bold_9_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_9_latin1(stb_fontchar font[STB_FONT_times_bold_9_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_9_latin1_BITMAP_HEIGHT][STB_FONT_times_bold_9_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_9_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_9_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_9_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_9_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_9_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_9_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_9_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_9_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_9_latin1_s[i] + stb__times_bold_9_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_9_latin1_t[i] + stb__times_bold_9_latin1_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_9_latin1_x[i];
            font[i].y0 = stb__times_bold_9_latin1_y[i];
            font[i].x1 = stb__times_bold_9_latin1_x[i] + stb__times_bold_9_latin1_w[i];
            font[i].y1 = stb__times_bold_9_latin1_y[i] + stb__times_bold_9_latin1_h[i];
            font[i].advance_int = (stb__times_bold_9_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_9_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_9_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_9_latin1_s[i] + stb__times_bold_9_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_9_latin1_t[i] + stb__times_bold_9_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_9_latin1_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_9_latin1_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_9_latin1_x[i] + stb__times_bold_9_latin1_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_9_latin1_y[i] + stb__times_bold_9_latin1_h[i] + 0.5f;
            font[i].advance = stb__times_bold_9_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_9_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_9_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_9_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_9_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_9_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_9_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_9_latin1_LINE_SPACING
#endif

