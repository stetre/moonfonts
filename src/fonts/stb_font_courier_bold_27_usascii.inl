// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_27_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_27_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_27_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_bold_27_usascii_BITMAP_HEIGHT         88
#define STB_FONT_courier_bold_27_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_bold_27_usascii_FIRST_CHAR            32
#define STB_FONT_courier_bold_27_usascii_NUM_CHARS             95

#define STB_FONT_courier_bold_27_usascii_LINE_SPACING          13

static unsigned int stb__courier_bold_27_usascii_pixels[]={
    0x00000000,0x5b809830,0x0014c000,0x20000883,0x4000005b,0x26001aa8,
    0x0353000a,0x400000cc,0x000000a9,0x00001530,0x000014c0,0xd89ff300,
    0x203f604f,0x4fb80eea,0x07ff0df3,0x400ff400,0x003fe3fd,0xfc87fe60,
    0x3ffe2fff,0xffd880ef,0x3ea02eff,0xfb504fff,0xfb85dfff,0x3fffe64f,
    0xf702ffff,0xff30bfff,0xffffffff,0x3fff6a01,0xfff7003f,0x3fffea09,
    0x0fffe81d,0x13fe6000,0x3fe0bfff,0x407ffd42,0x90ff75fc,0x3e2000ff,
    0x17fd403f,0xfb000bff,0x2ffffe8d,0x303ffffe,0xffffffff,0xd79ff709,
    0xffff989f,0x3f61ffff,0x3fffe66f,0xfb83ffff,0x4c4fffff,0xffffffff,
    0xfffa80ff,0xf9005fff,0xfff509ff,0xff88dfff,0x220000ff,0x7fe441aa,
    0x7ec2ff80,0x2ebfb01d,0x03ff886f,0x3ffff220,0x47fe83ff,0x22002ffb,
    0x7d5443ff,0x02b3fe2f,0x2615fff1,0x07fc1ffe,0x17df91fa,0x7ecdfd51,
    0x2affe66f,0xdff01aaa,0x445ff913,0xdaaaaaff,0xaeffa87f,0xfe880030,
    0xf52efd84,0x0ffa889f,0x3e200000,0x7c2ff81f,0x653f602f,0x00dfb06f,
    0x7fffffec,0x21ffcc6f,0x32005ff8,0xf17fc07f,0x03ff605f,0x3fb87fec,
    0x40a21fb8,0x9bff27fa,0xf3000ff9,0x5c5fe81f,0xfa8bfb02,0xd80000ef,
    0x217fc44f,0x7fcc0ffc,0x332e2000,0x7c44cccc,0x7c2ff81f,0x653fa02f,
    0x05ff305f,0x2a39ff10,0x07fec5fd,0x4400ffe4,0x17fc03ff,0x7ff105ff,
    0xfc97fc40,0x7002fc81,0x32ffe4ff,0x401311ff,0x07fc86fb,0xfe85ff10,
    0xdecb8006,0x7d44fd8b,0x4c2ff887,0xcdeda8ff,0xfffffd80,0x0ffc47ff,
    0x0bfe17fc,0x3fbbff6a,0x6fd81dff,0xd887fb80,0x4413fe22,0xffb804ff,
    0xff17fc00,0x801ff305,0x644fd4fd,0x26202fff,0x3fee5ffb,0x3ffffe64,
    0x83fe81ef,0xfb800ff9,0x22ffe60f,0x3fa601ba,0x4fffffff,0x3e607fd4,
    0x7fffcc4f,0x543fffff,0x7feeeeed,0x7fc0ffc4,0x7fc17fc2,0xffffffff,
    0x402ff985,0x4c01cff8,0x17fe02ff,0x3e013fe0,0x2e0bfe2f,0xd5fc807f,
    0x17ef7f4d,0x0effffb8,0xff993fea,0x42ffffff,0x05ff02ff,0xffa8bfb0,
    0x40dffffc,0xfecffff8,0x7fcc4fff,0x262fff43,0xfecfffff,0x7fa802ff,
    0x2ff83ff8,0x32a07fe6,0xceffcdff,0xb00dfd01,0x503bffff,0x37ec03ff,
    0x2003fee0,0x20bfe2ff,0x5fc807fa,0x7d4fe6dd,0xdffff702,0x3e1ffcc1,
    0xfffb9bdf,0x7fc0bfe0,0x217fc402,0xfffffffb,0x217fec6f,0xfd84ffe9,
    0x6fffeacf,0x2617ffcc,0x7d400ffe,0x7c6ffe87,0x01fff92f,0x1ffc7fe2,
    0x2007fea0,0x1effffea,0xfc803ff2,0x802ff407,0x20bfe2ff,0x7f400ff8,
    0x543f2dd4,0x3f26202f,0x00bfe66f,0x5ff17fcc,0xf700bfe0,0xdfffa81f,
    0x3e2ffc88,0x09ff505f,0xfffffff1,0x05ff98bf,0xfa805ff5,0x20fffc87,
    0x0dffd2ff,0x2ff8ffc4,0x2005fe80,0x324ffdb9,0x07fdc07f,0xf001ffa8,
    0xe817fc5f,0x4bfe603f,0xf519f36e,0x4bfea005,0x3e001ff8,0x2613fa3f,
    0x2ff400ff,0x3a077fcc,0x405ff15f,0xffb104ff,0xf989fd7d,0x013fe02f,
    0x3bff0ff5,0xff912ff8,0xeffec883,0x5403effe,0x205301ff,0x1ff70ffa,
    0xfd03fec0,0xf17fc00b,0x07fee05f,0x27e9bfa2,0x003ffffe,0x003a93fa,
    0x0df927f4,0xff880df9,0xf905ff02,0xf80bfe2d,0xff90804f,0x202ff985,
    0x3fd404fe,0x3fe07fe2,0x3ee17fc2,0xffffffff,0x827fc01f,0x1ff981fe,
    0x7f403ff5,0x003ff506,0x05ff17fc,0x222fffa2,0x1f22ffea,0x2007fdd5,
    0x00403ff8,0x7fd45ff3,0x2e01ff41,0x0bfd00ff,0x82ffcbfb,0xf3004ffa,
    0x0bff30df,0xf500bfea,0xf81ff88f,0x2217fc2f,0xffdcffdb,0x0ffb803c,
    0xa88aeff8,0x0ffe26fe,0xdfb04ff8,0x3e2ff800,0x3ff6202f,0x5c3fffff,
    0x9cd8801f,0x01ffd530,0x988d77cc,0x3fe20ffe,0x01ffd9ae,0xff502ff4,
    0x47ff7137,0xc98adffc,0x4d41dfff,0x40fffeb8,0x8adfffb8,0x400effc9,
    0x0ffc47fa,0x0bfe17fc,0x0ff9bfdc,0xf09ff100,0xffffffff,0xf506fe87,
    0x05ff305f,0x3fe2ff80,0xffffc802,0x805f981d,0xfffffff9,0x47fa23ff,
    0xfffffff8,0xfff983ff,0x7c405fff,0x7ffec02f,0x7f40efff,0xffffffff,
    0xffff53ff,0xff883fff,0xffffffff,0x7fa801ff,0x7fc0ffc4,0xfb817fc2,
    0xc800ff56,0x7f7ec0ff,0xfb81dfff,0xb07fe81f,0x5ff000df,0x3a2017fc,
    0x3710bfff,0x8b5067e4,0xefffffeb,0xb317fc42,0x05dfffff,0x027fffd4,
    0xec8806e8,0xf700dfff,0xffdbffff,0x3fffa23d,0x3fff603f,0x0dfffffc,
    0xf88ff700,0x7c2ff81f,0x2abf902f,0x7fc4007f,0x80ffe603,0x7fcc5ff8,
    0x003ff883,0x0bfe2ff8,0xffffffd0,0xffe8bfff,0x53306ffe,0x31018803,
    0x0c400135,0x4cc00000,0x01353000,0x80002620,0x740009a9,0x41bfaa5f,
    0x27ff42ff,0x06fbafe4,0x7c07fc80,0x0ffe402f,0xff901ffb,0x7fe64c00,
    0x20f37fe2,0xffeffff8,0x6dc41eff,0x00000ace,0x00000000,0x00000000,
    0x00000000,0x7f5d5544,0x40bffe3f,0x7ffcc1ff,0x4fa9fdc1,0x01ff8800,
    0x3fa007fe,0x3e07ff13,0x3ffe003f,0x3fffe2ff,0x221a981f,0x000001b9,
    0x00000000,0x00000000,0x00000000,0x7ffff400,0x006544ff,0x40f26095,
    0x75000040,0x93006c80,0x09501dc1,0x1eeeda80,0x000f7bba,0x00000000,
    0x00000000,0x00000000,0x00000000,0x16ffffdc,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xa8800000,0x0000001a,0xbdb91000,0x00399937,0xc9800000,
    0xcdeda8cc,0xcdeca800,0x300bcca8,0x0bcca800,0x0005e654,0x002aa200,
    0x00033ae2,0x09aa9800,0x001aa980,0x98003551,0xfffd8800,0x7ffd41ef,
    0x7f540005,0x7d40cfff,0xffffffff,0x07fff47f,0x207fe800,0xfffffff8,
    0xd103ffff,0xffffffff,0x05f909ff,0x97fffea0,0x265ffffb,0x802fffff,
    0x2fffffd8,0x03fb3fe0,0x889ffd00,0x3fffffeb,0xfffffd30,0xffe881fb,
    0xb7101eff,0xffd005ff,0x5c3fffff,0x20005fff,0xfffffffa,0x33bffe23,
    0x43effffe,0x0000ffff,0xfec80ffd,0xffdcdfff,0x6fff443f,0xdfffffdc,
    0x1003fe81,0x6c45dffb,0x3fea2eff,0x7cc02fff,0x4fffffff,0x013a0fa8,
    0x644fffa8,0xffffffff,0x7ffffc43,0x3e62ffff,0x0fffffff,0x17ffffec,
    0x2233fee0,0x7ec46ffa,0x3bf60005,0x360ccaab,0x7ffd41ff,0x00ffa880,
    0x30055500,0xfe885fff,0x20bff20f,0x3fa04ffe,0x42ffc004,0x99881ffa,
    0x3fe202ff,0x5ffd30af,0x803646c8,0x644ffff8,0xffd30aef,0xd30affd8,
    0x5f7f45ff,0x745ffb88,0x402ffdff,0x87fc86fd,0xf10005fd,0x09ff003f,
    0x7c403ff6,0x8000000f,0xff104ff9,0xf8827fc5,0xeffca84f,0x2e03cccc,
    0x02ff41ff,0xffb017fc,0x983ff601,0x2007d11f,0x544feffc,0x21ff984f,
    0x1ff883ff,0xff905ff1,0x05ff0988,0x7fb85fd8,0xdedadfd8,0xffb7300b,
    0xf8859999,0x01ff501f,0x66543fe2,0xcccb80bc,0x0ffcc01c,0x3fe29fd0,
    0xf113fa02,0xffffffff,0x52ff407f,0x5ff003ff,0xf101ffc0,0xffefe85f,
    0xff301710,0x01509fb9,0x27f43ff3,0xa81e45b8,0x017fc07f,0xfe98bfee,
    0xfffffd86,0xffe81eff,0x1fffffff,0x7e40ffe2,0x11ff100f,0xb87fffff,
    0x402fffff,0xff304ff9,0xf982ffc5,0xeffec84f,0x200deeee,0x0bfd1ffb,
    0x7cc0bfe0,0x427ec00f,0xffeb9ada,0xfd8ffd82,0x8dfd3004,0x001bdffb,
    0xff01bfa0,0xdfffd005,0xffb03fff,0x0bffb9df,0xdddffdb5,0x06fe819d,
    0x3e201fff,0xdefff88f,0x7ff76c41,0x5fffcc02,0xd83ffa60,0x3f660bff,
    0x013fa04f,0x7fd6ff40,0x205ff001,0x5fc807fa,0xadffeb98,0xfb3ffa80,
    0xfffda809,0xfffffd82,0x3ff6002d,0x4017fc02,0x5ffffffa,0xfb87ffb0,
    0x003fe607,0x2e2bbfea,0xf100fffe,0x007fff7f,0x3e6017fc,0xffedffff,
    0x7fff443f,0x04ffffed,0x540013fa,0x2005ffff,0x0ff502ff,0x7f5cbf90,
    0x3a00aadf,0xf013f66f,0x6d405dff,0x404fffff,0xf803ffd8,0x7ffcc02f,
    0xd83fffde,0x00ff985f,0x36001ff3,0xffffffff,0xffff100f,0x2ff8005f,
    0x7ff7fcc0,0xb103efff,0xffffffff,0x0027f409,0x003fffd0,0xff9817fc,
    0xbd27ec00,0x213ffae5,0x13f61ffb,0x98007ff0,0xd102ffeb,0x3fe009ff,
    0x10ffec02,0x0bfb0ffd,0x3e601ff3,0x3fee000f,0x00ffcfff,0x01dffff1,
    0x4c02ff80,0x0bdc98ff,0x22f36a00,0x13fa04fd,0x05ffa800,0xff017fc0,
    0x817fcc07,0x22fb9cf8,0xfeeefff8,0x812a02ef,0x13f602d8,0x800fffe6,
    0x27f402ff,0x3f60ffcc,0x300ff985,0x530001ff,0x4403fe63,0x00effeff,
    0xf300bfe0,0xb000001f,0x027f409f,0x003ff700,0x3f202ff8,0x06fe881f,
    0x7ccd91ae,0xffffffff,0x1fee0007,0x7fd45fd8,0x17fc002f,0x3e613fa0,
    0x4c2fec1f,0x1ff300ff,0x0df90000,0x7fdc7fc4,0x05ff001f,0x0000ff98,
    0x3204fd80,0xbfb731ef,0x8005ff80,0x7ff402ff,0x1ffea88b,0x44bb1ee0,
    0xfecccccc,0x3ee0002e,0xfda88aef,0x07ffee4f,0x900bfe00,0xfd5137ff,
    0x21efe98f,0x220bffb8,0xaaabffba,0x6dd55400,0xff7104ff,0x06fffea1,
    0x59ff5553,0xbffb8835,0xa980000a,0xff101efe,0x8dffffff,0x0cffcaa9,
    0x7fd554c0,0xff981aac,0x03ffffff,0x17dce7c4,0x037faa20,0xfb81ffcc,
    0xffffffff,0x59fff90e,0xa8877555,0x0aacffaa,0xfffffe88,0x3ffe62ff,
    0xffffb1ff,0x3ffffe2b,0x3207ffff,0x05ffffff,0x221ffff1,0xf53fffff,
    0xffffffff,0x3fffe29f,0x20000fff,0x3ffffffc,0xdfffff70,0xfffffa87,
    0x3fea05ff,0xffffffff,0xffffc884,0xffd5001e,0xffff8809,0x0bff507f,
    0x3fff73a2,0x3ff60cff,0x7fffffff,0x7ffffff4,0xfd881fff,0x7441efff,
    0xff90efff,0x7ffec7ff,0x205fffff,0x03dfffea,0xfb07ffec,0x3fa65dff,
    0xffffffff,0x3fffff62,0x7f540005,0x2202efff,0xfd1009a9,0x407fffff,
    0xffffffe8,0x4cc02fff,0x40030000,0x205ffffd,0x2a620018,0xfffffb01,
    0x641fffff,0xffffffff,0x004cc00e,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x55300000,0x10333003,0x33100133,0x26003333,0x0ccc00aa,0x26203330,
    0x30333009,0x33333333,0x40330333,0x26666019,0x80660009,0x01333019,
    0x00220033,0x26666662,0x31033100,0x26666601,0x99999800,0x98199999,
    0xffd8800a,0x546eefff,0xfd1fffff,0x7f40bfff,0x2fffffff,0xfffffd88,
    0x3ffe65fd,0x3ffe63ff,0x3fffa3ff,0x3fffee5f,0x3ffffe1f,0x1fffffff,
    0x4c7ffff3,0x3ea3ffff,0xdfffffff,0x7ffff301,0xa9ffffcc,0xf55fffff,
    0x36607fff,0xfd80efff,0xefffffff,0x4bffff20,0xf30ffffe,0xbfffffff,
    0xfffffb83,0x47ffffff,0x74c06ff9,0xffffffff,0x3ffff20f,0xfffff8af,
    0xfffff106,0xe887ffff,0xffffffff,0xfffff50f,0x7ffffd4b,0xdfffff14,
    0x17ffffe4,0xffffffff,0x3ea3ffff,0x3fea5fff,0x3ffee4ff,0x3fffffff,
    0x23ffffa8,0xf74ffffa,0x3f2dffff,0xff885fff,0xfe80ffff,0xffffffff,
    0x4fffffa0,0xf51fffff,0xffffffff,0x7fffe47f,0x7fffffff,0xf1037fd4,
    0x7f4c15ff,0x04ffd40f,0x880bfd31,0x09dfe999,0x8857ff44,0x3a60fffb,
    0xffc881ef,0x40dffcc1,0x7fc3ff98,0x99bff99b,0x3ffa21ff,0x4417ff41,
    0xec999dfd,0xffe881ff,0x220fff40,0x3fee1dfd,0x53df701e,0x7cccc03b,
    0xfd8099bf,0x20ffd40d,0xc999efd8,0x3fa61ffe,0xfb99999c,0x3201ca87,
    0x0ff101ff,0x3f601ff3,0x827ec004,0xff501ffb,0xd01ffa81,0x44bfe0bf,
    0x85ff11cc,0xf87fe2ff,0x877fc41f,0x3f603ffc,0x103ff885,0x1ffd4bff,
    0x3ff24fd8,0x013fa00e,0x36017fc0,0x80ff984f,0x4ff885fc,0x7fa81ff4,
    0x809ff000,0x00ff982a,0xfd8009fb,0xe809fb04,0xf509ff05,0x5cffa03f,
    0x83ff35ff,0xf87fe2ff,0xbdff981f,0x2fec04ff,0x3ee03fe8,0x205ff8af,
    0x1bffb4fd,0x000ffc80,0x7ec02ff8,0xc80ff984,0xe8bfb05f,0x3e29d13f,
    0x2ff88004,0x01ff3000,0xfb0013f6,0x000bfe09,0x7ec0ffb8,0x7ed3f606,
    0x40ff98ff,0xd87fe0fd,0x3fffee07,0x445fd805,0x7ec01ffd,0x3600ffdf,
    0x004ffedf,0xf000bff3,0x9dfd805f,0x80ffa999,0x3ff985fc,0x3fdce7f4,
    0x07fcc000,0x00ff9800,0xfd8009fb,0x000ff984,0xf88ffe20,0x237f203f,
    0x7fabffff,0x8003ff00,0xd800effc,0xffffeeff,0xffff8804,0x7fffec02,
    0xffe8804f,0xf805bb2f,0x7ffec02f,0x80ffffff,0xfca99efc,0x7fff40ff,
    0x554c07ff,0xb81ff300,0x4c3deeed,0x89fb00ff,0x09fb00c9,0x80001ff3,
    0x03ff26fd,0xeffbefb8,0xf006fbdf,0x7f44003f,0xffd801ff,0x003fffff,
    0x36017fea,0x04ffffff,0x4fff7fec,0x17fc06ff,0x3fffff60,0xfc80ffff,
    0x2fffffff,0x7fffffe8,0xf102ffc0,0x7fffc43f,0x3fe60fff,0xfc89fb00,
    0xf109fb04,0xf980005f,0xa809ff1f,0xffadfdff,0x3ff005fd,0x7f7fec00,
    0x677ec00f,0x4004ffec,0xffd802ff,0x2207ff91,0xffff8aff,0x017fc02f,
    0x266677f6,0xffc80ffa,0xd00dffff,0x40ff739f,0x7fc01ff9,0x7fee6542,
    0xe80ffc43,0xd827ec3f,0x00dfd04f,0xff5bfd00,0xffff9803,0x04ffff8a,
    0x32003ff0,0x0eff8bff,0xfd897f60,0x0bfe004f,0xffb13f60,0x2a1ff301,
    0xff805fff,0x4c27ec02,0x9efc80ff,0x13fe8009,0x027e407b,0xff3037ec,
    0xf30bff01,0xf04fd85f,0x07fee05f,0x3ee00db8,0xf8805fef,0xfffb0fff,
    0x007fe007,0xff997fea,0x3617f605,0x5ff001ff,0xf889fb00,0x119ff04f,
    0xf8019ffd,0x427ec02f,0x5fc80ff9,0x001ff400,0x3fe600dd,0xffb511ae,
    0x139ff901,0xffb0dff5,0x1ffd3139,0x273ffa20,0x02ffd988,0x00bfffe2,
    0xff52fffc,0x7dd4405f,0xff501acf,0x0cffd81f,0x10577f4c,0x51015dfd,
    0x20359ff5,0x2e0adfe9,0x7fe41aff,0x46ffffff,0xacffaaa8,0x0eff4c0a,
    0x4c17ff71,0x401aaefd,0x01aadffa,0xfb800be2,0xffffffff,0xffffd00f,
    0xff903fff,0x05ffffff,0xfffffe88,0xfc805fff,0x3ffe007f,0x407ffe23,
    0xfffffff8,0x7fffe42f,0x9fffff27,0x47fffffb,0x7c44fff9,0x2fffffff,
    0x3fffffdc,0x443ffff1,0xffeffffd,0x7fffff44,0xff31ffff,0xfff17fff,
    0x3ffeabff,0xfb04ffff,0x05ffffff,0x366000a2,0x0cffffff,0x77fffe40,
    0x3fff6600,0xd91001ef,0x007dffff,0xe800ffe6,0x0ffec0ff,0xffffffb0,
    0xfffea81d,0x93fffaa5,0x85ffffea,0xffd82ffb,0x541effff,0x645ffffe,
    0x99880eff,0x7fffe400,0xd10effff,0x3f63dfff,0xffd33fff,0x2e05dfff,
    0x1effffff,0x26200000,0x09980009,0x0004cc00,0x00000660,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x26200000,0x98800999,0x19999999,0x00999988,0x4c403310,0x00002981,
    0x2000014c,0x4405d429,0x0a9ceedc,0x0b37b2a0,0x2f7bb2a0,0x7bb7301a,
    0x8f32e203,0x260cccb8,0x333302cc,0x01333333,0x40033333,0x13310198,
    0x06666660,0x7ffff440,0xfffd805f,0x20ffffff,0x6ffffffe,0x80ffff40,
    0x3fa2fffe,0xfd00002f,0xfd300003,0x717fea3f,0xffffffff,0xffffd30b,
    0x3f601dff,0x87ffffff,0xeffffffb,0x72fffdc0,0x7cc3ffff,0x7fffd43f,
    0x4fffffff,0x3fffffea,0x3ffa03ef,0x7ffff43f,0x3ffffea5,0x2202efff,
    0x0fffffff,0x7ffffec0,0xff10ffff,0x40ffffff,0x985ffff8,0x3f23ffff,
    0x40002eff,0x220002ff,0xf50efffd,0x77ffdcbf,0x447fffdc,0xfecceffe,
    0xceff986f,0x320fffdc,0xffdcdfff,0x97ff660e,0x221ffed9,0x7ffdc2ff,
    0xffffffff,0x3ffffee4,0xf80effff,0x3fe1ffff,0x3fee7fff,0xffffffff,
    0x3fea6203,0x6fec03ff,0x86ffa999,0x801affa9,0x6c0ffff8,0xfd983fff,
    0xf0001dff,0xf910005f,0x17505fff,0x3a077fe2,0x417fec6f,0x37e43ffb,
    0x9ff537c4,0xc85ffa81,0x41ff885f,0xdfd881ff,0x4fd99999,0x5ccd7fcc,
    0xff505ffd,0x85fd98df,0xb999dfd8,0xffc807fd,0x27ec06fd,0x7cc03ffa,
    0x3ffe000f,0x3fffe24f,0x3fffaa02,0x17fc000c,0x3fffee00,0x0bfea003,
    0x37fe27cc,0xfeaaaaaa,0x66fffcc6,0x07fe409b,0x5fc87fc8,0x7f41ff88,
    0x360bf900,0x40ffc44f,0xff982ffc,0x827ec3ff,0x07fd04fd,0x1ff9cff8,
    0xffd8ff20,0x003fe602,0x90fffff8,0x7005ffff,0x4007ffff,0xfd5002ff,
    0xc80019ff,0x7fc4006f,0xffffffff,0xffffc87f,0x13fa0dff,0x7e41ff98,
    0x6c1ff885,0x5d97f207,0x1ff885f5,0xff30dfb0,0x27ec1ffd,0xff884fd8,
    0x743fea03,0x5c2e205f,0x7fcc04ff,0x3effe000,0xffbff8bf,0xfff91002,
    0xffffc85f,0x0dffffff,0x077fffa6,0x0037e400,0x3fffffe2,0x80ffffff,
    0xffffdca8,0x7d40bfd0,0x442fe40f,0x903641ff,0x01ff53bf,0xfb80ffc4,
    0xffaff987,0x7ec13f65,0xfffca99d,0xfb97fa01,0x5ff9800f,0x000ff980,
    0x2fbf6bfe,0x002ff8ff,0x87bfff62,0xfffffffe,0x3f21ffff,0x20002fff,
    0x20c02ffa,0x5e8006fe,0x3ee5ff30,0x90dfd01f,0x83ff30bf,0x3fff2018,
    0x3e200fff,0x81ff301f,0x2ffb8ff9,0x3ff609fb,0x04ffffff,0x2666ffe6,
    0x7fc403ff,0x0ff9800e,0xf35ff010,0x0bfe9fff,0x3bfff220,0xfaaaa882,
    0x981aaacf,0x401dfffd,0xdff11cb8,0x17f54c15,0x2615bff5,0x3fe64dba,
    0x5ff7309d,0x2273ffe6,0xfb83ffeb,0x7fff931f,0xffffc800,0x3fe200ff,
    0x981ff301,0xb1ffd0ff,0x3fff609f,0x02ffffff,0xfffffff9,0x1ffd80df,
    0x3fe60326,0x7fc2fb80,0x3e3fffb2,0x7ffdc02f,0x17fc003f,0x9fffd500,
    0x99bfee01,0xffffffff,0x7ffec0ff,0x27ffffff,0xfffffff9,0x7ffcc6ff,
    0x304fffff,0xffffffff,0x7e4007ff,0x110ff99d,0xf501ff88,0x261ff30f,
    0xb04fdcff,0xd95333bf,0xffff01ff,0x03ffffff,0x7fb0fff2,0xfb01ff30,
    0xff52ff89,0xea817fcb,0x8000cfff,0xfa8002ff,0x7d40cfff,0x7ffecc5f,
    0xf501dfff,0x39ffffff,0xffffeed8,0xffd980cf,0x7d402eff,0xeffcffff,
    0xc97f2002,0x3ff11fe4,0x3e61bf20,0x3ffff20f,0x2609fb04,0x4ffd43ff,
    0x5fe99999,0xfd85ffa8,0xd80ff984,0x9917fc4f,0x3a617fc3,0x0000dfff,
    0xb8000bfe,0x0c42ffff,0x01355310,0x0026a620,0x8004d54c,0x54c00099,
    0x5fc80001,0x7c41ff30,0x84ffa81f,0x7ff40ff9,0x409fb04f,0x3bfa64fe,
    0x0affd982,0x5557fff1,0x5d449fd5,0xeaaaabff,0x2b3fe64f,0x067fd4c0,
    0x0003dfff,0x80003ff0,0x001fffc8,0x00000000,0x00000000,0x5dfd3000,
    0x1ff75555,0x5d55ffd4,0xff706ffd,0x27ffd437,0x5556ff4c,0xf52ffdba,
    0x7d4bffff,0xff34ffff,0xffffffff,0x3ffffe29,0x4fffffff,0x4bfffff3,
    0x25fffffa,0x200002eb,0x2600006c,0x0000006d,0x00000000,0x70000000,
    0xffffffff,0x3ee1ffff,0xffffffff,0xffffb81e,0x713ff63f,0xffffffff,
    0x7f4cdfff,0x3fa63fff,0xfff33fff,0x9fffffff,0x7fffffec,0xd14fffff,
    0x7447ffff,0x0003ffff,0x00000000,0x00000000,0x00000000,0x74c00000,
    0xffffffff,0xffd50fff,0x407bdfff,0x21efffea,0x7f544ff8,0xefffffff,
    0x00000003,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x5ef6dd40,0x4b332600,0x5cc0cec9,0x332e62cc,
    0x333332a2,0x32a0cccc,0xda8cecac,0x665cc0bd,0x3332e62c,0xcc980002,
    0x00cdec9b,0x73059973,0x02880599,0x42aa8aaa,0x99999998,0x99880999,
    0x0b600100,0x4cccccc4,0x81999999,0xdddd91cb,0x001ddddd,0xfffc8000,
    0xf885ffff,0xfffcdfff,0x3fffe1ff,0x3fffff1f,0x3ffffff6,0xfff30fff,
    0xffffffff,0xffffe89f,0xffffff1f,0x3e036c03,0xffffffff,0xfffff81f,
    0x0fffffc1,0xfb01fe88,0xff53ff4f,0xffffffff,0x2ffc89ff,0x2a06ffdc,
    0xffb13f20,0xffffffff,0x2e1fffff,0xffffb6ff,0x001fffff,0xdefb8000,
    0xb82ffecc,0xcffffffe,0x3ffee3fe,0xd93fff26,0xfffeeeff,0x3bfff20e,
    0xffcdfffc,0x93fff6a0,0x404effeb,0x3fee01ff,0x4ffdceff,0x334fffb8,
    0xd813ffae,0x6fc80eff,0xfff99bf6,0xffffffff,0x3637f44f,0xfb1effff,
    0x3f25fb8b,0xffffffff,0x30ffffff,0x2aaa69ff,0x002aaaaa,0x7f400000,
    0x13fff604,0x59ffd103,0x4fc85fff,0x3a03bfea,0xff97fe5f,0xfc86fd82,
    0x02ff800f,0x3ea1ffe4,0x3e6df907,0x640df73f,0xfb86ffff,0x26617ee5,
    0x99999999,0xf517fc40,0xfdfff77f,0x443f507f,0x88888888,0x18808888,
    0x00000000,0xfdddd910,0x17fec09f,0xffffb100,0x2a17103d,0x7fd00eff,
    0x07ff1ff4,0x7fc45ff3,0xff7bfd04,0xfc81ffb9,0xa81ff885,0xb6ffc8ff,
    0x37fea0bf,0x27d44ffb,0x400009f5,0x31f446fb,0x0009fffd,0x00000000,
    0x7dc00000,0x4fffffff,0x40013f60,0xa801fffe,0x3fa00eff,0x3ff8ffa3,
    0x7fe4dfb0,0xfffffd00,0xfc81ffff,0x881ff885,0x9ffffaff,0x6ff983ff,
    0x3f98fff2,0xeec88fe6,0xeeeeeeee,0x4007f61d,0x00001cb8,0x00000000,
    0x3fea0000,0x4ffccbdf,0x20013f60,0x01effffd,0xd003bfea,0xff1ff47f,
    0x22bfe607,0x7ed404ff,0xc80befff,0x01ff885f,0xdffffdfd,0x1ffd03ff,
    0x87e1ffd8,0x3ffea1f8,0xffffffff,0x00017e5f,0x00000000,0x00000000,
    0x3f603bf6,0x8013f604,0xffacffe8,0x0effa81f,0xe8ffa12a,0xe80ffe3f,
    0x800ffbef,0x203ffff9,0x1ff885fc,0xf7dfff90,0x07f60fff,0x10003fa2,
    0x99999997,0x06c39999,0x00000000,0x00000000,0x8efec000,0x41effea9,
    0xaaadfea9,0x4bffd301,0x3ea3fffa,0xfeaaabff,0x7433fe62,0x019ff0cf,
    0x013fffea,0x07fefff4,0x2a0f7ecc,0xfff502ff,0x00bfff17,0x00000000,
    0x00000000,0x00000000,0x3e600000,0xffffffff,0xffff93ff,0xa87fffff,
    0xfd1fffff,0x3ffebfff,0x3fffffff,0x3abffff3,0x0bfff5ff,0x4007fff4,
    0x4ff89ffa,0x8fffffcc,0x883ffffb,0x7ff90fff,0x00000000,0x00000000,
    0x00000000,0x40000000,0xedffffda,0xffd52eff,0x83dfffff,0x90efffe8,
    0x3fe7ffff,0xffffffff,0x27fffd13,0x7fff3ffe,0x802ffd40,0x10ba63e9,
    0x2a1dfffd,0xfd02effe,0x000ffccb,0x00000000,0x00000000,0x00000000,
    0x54400000,0x00000009,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_bold_27_usascii_x[95]={ 0,5,3,1,1,1,2,5,6,2,1,0,4,2,
5,1,1,1,1,1,1,1,2,1,1,2,5,4,-1,0,0,2,2,-1,0,0,0,0,1,0,0,1,1,0,
0,-1,-1,0,1,0,0,1,0,0,-1,-1,0,0,1,5,1,2,1,-1,4,1,-1,1,0,0,1,0,0,1,
2,0,1,-1,0,1,-1,0,1,1,1,0,0,-1,0,0,2,4,5,3,1, };
static signed short stb__courier_bold_27_usascii_y[95]={ 19,3,4,2,2,4,5,4,3,3,3,5,15,11,
16,2,3,3,3,3,3,3,3,3,3,3,8,8,5,8,5,4,3,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,2,3,3,23,3,8,3,8,3,8,3,8,3,3,
3,3,3,8,8,8,8,8,8,8,4,8,8,8,8,8,8,3,3,3,9, };
static unsigned short stb__courier_bold_27_usascii_w[95]={ 0,4,9,12,12,12,12,4,6,7,12,14,6,11,
4,12,12,12,12,12,12,12,11,12,12,11,4,7,15,14,15,11,10,16,14,14,14,14,13,15,14,12,14,15,
14,16,16,14,13,14,15,12,14,15,16,16,15,14,12,7,12,7,12,17,6,13,15,13,15,14,13,15,14,12,
9,14,12,16,14,13,15,15,13,12,14,14,15,16,14,14,11,7,4,8,12, };
static unsigned short stb__courier_bold_27_usascii_h[95]={ 0,17,8,20,20,16,15,8,20,20,11,14,8,3,
4,20,17,16,16,17,16,17,17,17,17,17,12,14,14,8,14,16,18,15,15,16,15,15,15,16,15,15,16,15,
15,15,15,16,15,19,15,16,15,16,15,15,15,15,15,20,20,20,9,4,5,12,17,12,17,12,16,16,16,16,
21,16,16,11,11,12,16,16,11,12,16,12,11,11,11,16,11,20,20,20,6, };
static unsigned short stb__courier_bold_27_usascii_s[95]={ 255,155,147,33,59,177,175,248,72,79,89,
141,172,222,217,87,173,241,228,142,190,160,199,186,1,227,172,244,156,157,125,
203,131,63,48,48,16,1,230,1,201,188,33,159,93,108,31,162,216,116,128,
215,97,17,63,80,112,144,80,108,46,100,134,199,192,1,239,177,211,191,29,
43,14,74,1,59,149,56,102,219,87,103,15,206,119,233,73,117,29,134,44,
25,20,11,179, };
static unsigned short stb__courier_bold_27_usascii_t[95]={ 1,1,74,1,1,23,41,57,1,1,74,
57,74,74,74,1,1,23,23,1,23,1,1,1,23,1,57,41,57,74,57,
23,1,57,58,41,58,58,41,41,41,41,41,41,57,57,58,23,41,1,41,
23,41,41,41,41,41,41,57,1,1,1,74,74,74,74,1,57,1,57,23,
23,23,23,1,23,23,74,74,57,23,23,74,57,23,57,74,74,74,23,74,
1,1,1,74, };
static unsigned short stb__courier_bold_27_usascii_a[95]={ 229,229,229,229,229,229,229,229,
229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,
229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,
229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,
229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,
229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,
229,229,229,229,229,229,229, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_27_usascii_BITMAP_HEIGHT or STB_FONT_courier_bold_27_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_27_usascii(stb_fontchar font[STB_FONT_courier_bold_27_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_27_usascii_BITMAP_HEIGHT][STB_FONT_courier_bold_27_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_27_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_27_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_27_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_27_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_27_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_27_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_27_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_27_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_27_usascii_s[i] + stb__courier_bold_27_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_27_usascii_t[i] + stb__courier_bold_27_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_27_usascii_x[i];
            font[i].y0 = stb__courier_bold_27_usascii_y[i];
            font[i].x1 = stb__courier_bold_27_usascii_x[i] + stb__courier_bold_27_usascii_w[i];
            font[i].y1 = stb__courier_bold_27_usascii_y[i] + stb__courier_bold_27_usascii_h[i];
            font[i].advance_int = (stb__courier_bold_27_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_27_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_27_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_27_usascii_s[i] + stb__courier_bold_27_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_27_usascii_t[i] + stb__courier_bold_27_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_27_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_27_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_27_usascii_x[i] + stb__courier_bold_27_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_27_usascii_y[i] + stb__courier_bold_27_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_27_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_27_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_27_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_27_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_27_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_27_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_27_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_27_usascii_LINE_SPACING
#endif

