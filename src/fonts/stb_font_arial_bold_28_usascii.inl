// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_bold_28_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_bold_28_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_bold_28_usascii_BITMAP_WIDTH         256
#define STB_FONT_arial_bold_28_usascii_BITMAP_HEIGHT        104
#define STB_FONT_arial_bold_28_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_bold_28_usascii_FIRST_CHAR            32
#define STB_FONT_arial_bold_28_usascii_NUM_CHARS             95

#define STB_FONT_arial_bold_28_usascii_LINE_SPACING          18

static unsigned int stb__arial_bold_28_usascii_pixels[]={
    0x98000066,0x00988001,0x0cc004c4,0xff301310,0x3fffee1f,0xfffff34f,
    0x0001a80d,0x98000026,0x13310000,0x800004cc,0x00880099,0x88001988,
    0x13000009,0x3fa00000,0xffb50003,0x0159bfff,0xd03fffb8,0x3ff620df,
    0x81ff980f,0xff70fff9,0x3fe69fff,0x2fc06fff,0xfffdb100,0xc98007df,
    0x03dffffe,0xff87fee0,0x5bfb9105,0x93027f40,0x7ec05fff,0xfff91005,
    0xd88005df,0x01dffffe,0x0677f644,0x70007fdc,0xffffffff,0x5c07ffff,
    0xfe83ffff,0x1ffffd06,0x3e60dfb0,0xffdd50ff,0x3bffe69f,0xfffd985e,
    0x7ffdc02e,0x1effffff,0xfffffc80,0x801effff,0x9ff30ffc,0xffffff50,
    0x20df903f,0x1ffeeff8,0x9001ff98,0x5fffffff,0x3fffee00,0x504fffff,
    0x5fffffff,0x8804ff88,0x219cfffd,0x0effeba9,0x87fffe98,0xfffa86fe,
    0x02ff985e,0x7fec0666,0x540fff34,0xffffffff,0xfffffd80,0x1ffffffe,
    0x3fffff60,0x1ffffffe,0xff737f40,0xfffff985,0x7d40ffff,0x88ffc80f,
    0x05fd85ff,0x937fff10,0xff900fff,0xffffffff,0xffff885f,0x641fffff,
    0x3fa200ff,0x3fee003f,0x03ffe205,0xbff70dfd,0x0003fec0,0x7fcd3ff6,
    0xfdfff107,0xfa87ffff,0x3660bfff,0xff506fff,0x7ecc17ff,0x3fe206ff,
    0xfb03ff24,0x3ffe63df,0x6c17fc42,0xf31bfa7f,0x3fee003f,0x300fff46,
    0x64c5ffff,0x7fec6fff,0x8bfff51e,0x3f604ffa,0x2a00881f,0x3ffe02ff,
    0x7dc37f40,0x0bff304f,0x6c07ffcc,0x0fff34ff,0x5efdbfea,0x3ffa0fff,
    0x3fff201f,0x01ffff83,0xaa8ffff2,0xeaadffba,0xfff31aff,0xe81cdc83,
    0x366fe84f,0x002fec7f,0x3e63fff7,0x3ffa00ff,0x7fff900f,0x3f227ffc,
    0x1ffe20ff,0x3b20ffdc,0x4ffc9fff,0x7ffc0bf9,0x7e437f41,0x05ff904f,
    0x6c07ffcc,0x0fff34ff,0xaafcfff2,0x13ffea1a,0x98ffff10,0x7c404fff,
    0x3fff67ff,0xffffffff,0x00fff74f,0xffb0df90,0x3ff337f4,0x77ffc400,
    0x2605ffe8,0x36204fff,0x5fff109b,0x742fffa8,0x24ff81ff,0xffffffe8,
    0x81fe2fff,0x37f41ffe,0xfd81ffe4,0x3ffe600f,0xf34ffd80,0x57fea0ff,
    0x3ffee05f,0x0fffc800,0x2003ffee,0xffb0fffc,0xffffffff,0x5bff29ff,
    0x7d401bca,0x447fe40f,0x017f65ff,0x3ffffee0,0x3fea00ef,0xff88001f,
    0x1fffc41f,0xff50bff6,0x44efff41,0x3a1ffffb,0x85ffd01f,0x3ffc86fe,
    0xf980fff0,0x4ffd80ff,0x3e20fff3,0x3205fcff,0xff7007ff,0x03ffe43f,
    0x311fffb8,0xf933dff3,0x3ff6137f,0x0dffffdd,0xf885ff10,0xf31fffff,
    0xff10003f,0xf900bfff,0x3e0001ff,0x7ffd43ff,0x3627fe44,0x21bfee6f,
    0x1fe47ffe,0x7f44ffc8,0x881fff86,0x7fcc07ff,0x34ffd80f,0x7fec0fff,
    0xfe80aeff,0xfff5006f,0x8037fec5,0x7c42fffa,0xd03ff24f,0xffffffff,
    0x427fc0df,0x361cfffa,0xfe88005f,0xd802ffff,0x360007ff,0xffb10eff,
    0x45ffb8bf,0x07ffa4ff,0x9f917ff2,0x42bffe60,0x3ff226fe,0x06ffa80f,
    0x6c07ffcc,0x0fff34ff,0x7fffff4c,0x037ff43f,0x3a2fffa8,0xff5006ff,
    0x23ff985f,0xfffe87fe,0x05fff71e,0x40881bf6,0x36e21ff9,0xffff980b,
    0x1570ffff,0x0007ffd8,0x3f7fffe2,0x7d45ffff,0xf997fc6f,0x89ff906f,
    0x3ff603fe,0x3e6dfd6f,0xff703fff,0x0fff980b,0xff34ffd8,0xfffc880f,
    0x3ff65fff,0x3fff7007,0xb803ffec,0xf9311fff,0x3dff335f,0x0bfffa13,
    0x3ee0bffb,0x97f6000f,0x40effffc,0xffb9efff,0x21fff8ef,0x0000fffc,
    0x3bffffea,0x7fcc4ffe,0x7dc3fe27,0x45ffb05f,0x7f402ff8,0x3e6dfd6f,
    0x3ff204ff,0x07ffcc04,0xff9a7fec,0x3fffe007,0x1fff70ff,0x41fff900,
    0xc800fffb,0xfffb0fff,0xffffffff,0x03fff69f,0x3e60fff7,0x3ff3001f,
    0x3feb3fea,0xc83ffea4,0x47ffefff,0x5c01fffb,0x33bb2601,0x7cc3ffe8,
    0xfc9fe66f,0x41fff04f,0x3f600ffb,0x26dfd6ff,0xf702ffff,0xfff980bf,
    0xf34ffd80,0x46fc00ff,0xfff53ffe,0xff12ea87,0x4fffa8ff,0xb3fffc40,
    0xffffffff,0x3f29ffff,0x3ffd40ff,0x36007ff0,0x743ff25f,0x217ff66f,
    0x44fffffd,0x2603fff9,0x3e003eff,0x2ffd42ff,0x3fee3ff1,0x267ffb85,
    0x3fea03ff,0x4cdfd0af,0xff507ffd,0x0fff980b,0xff34ffd8,0x5f8a620f,
    0x3fe2bff5,0x37ffa0ff,0x7c44fffc,0x3f201fff,0x3ff2e4ff,0xccffecce,
    0x85fff52c,0x3f606ffc,0x21ff9805,0xd9ff67fd,0xffe886ff,0xfffe80ff,
    0x45fffb00,0x7fd41a98,0x227fdc1f,0x8fff54ff,0xff15fff8,0x44ffc80d,
    0x7ffc46fe,0x406ff981,0xfd80fff9,0x20fff34f,0x2abf2fff,0x3ffea5ff,
    0xffffb31f,0xfff501ff,0xfffd887f,0x3a3ff986,0x37ffe07f,0x409ffd10,
    0x5fd807fb,0x4ffb3fec,0x74c1fffa,0xfa85ffff,0x3f261eff,0x37fe47ff,
    0xf90bffb1,0xf16fd87f,0xffd75dff,0x01dff9ff,0x7f42ffd8,0xf03ffd86,
    0xfff980ff,0xf34ffd80,0x3bff60ff,0x87ffb5f8,0xeefffffd,0x203fffff,
    0xfefffffd,0xb82fffff,0x817fe1ff,0xffdffffb,0x3fe600ff,0x907fe601,
    0xf1ffa1ff,0xffb9dfff,0x83dfffff,0xfefffffd,0x7d42ffff,0xffffceff,
    0x541ffe81,0xffff50ff,0xfffffdff,0x3ffd001b,0xffc86fe8,0x401ffd03,
    0xfd80fff9,0x20fff34f,0xeefffff9,0xffc80fff,0xffffffff,0xff900cff,
    0xdfffffff,0xf99ff603,0x7ffec03f,0xf803ffff,0x217f603f,0x4ffbcffa,
    0x7fffffd4,0xfffecfff,0xfffffc80,0xfb03ffff,0x07ffffff,0x2ffc1bfe,
    0xb13bddb1,0x0cc459bf,0x7f41ffe8,0x904ffc86,0x7fd405ff,0x34ffd80f,
    0x7fdc0fff,0x01ffffff,0x3ffffb66,0x07fffece,0x3fffff66,0x537f404e,
    0xff7005ff,0x36003dff,0x03ff305f,0x037ffff6,0x3fffff62,0x405fb10d,
    0xdfffffd9,0x7ffedc01,0x07ff301e,0x80013fea,0xfff06ffa,0xfb86fe83,
    0x0bff104f,0x6c07ffe4,0x0fff34ff,0xdffffc88,0x10662000,0x22007ff9,
    0x86aa0019,0x22000aa9,0x154c0009,0x65403ca8,0x0131001c,0x0131000c,
    0xf9003100,0x1effc80f,0x07ffe400,0x3a07ffc4,0x05ffb86f,0x3ff21ff6,
    0x3b32a7ff,0x9fff34ff,0x037c4079,0x00498000,0x00000000,0x00000000,
    0x00000000,0xf8000000,0xfffc803f,0x75109bce,0x983dffd9,0xfe87fffe,
    0x5efffa86,0x7f42ff98,0x3fee3fff,0xfff34fff,0x05f80dff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x3ea00000,0xffd3000f,0xffffffff,
    0xf7019fff,0xdfd09fff,0x03ffffa0,0xffff17f6,0xfffffb89,0xdfffff34,
    0x00003c80,0x00000000,0x00000000,0x00000000,0x00000000,0x0013fa00,
    0x3ffffae6,0x200bdfff,0xfd04fffb,0x3fff620d,0x4c0ff980,0x00000001,
    0x00000000,0x00000000,0x00000000,0x00000000,0x4c000000,0x98800009,
    0x0cc40019,0x26002620,0x00026601,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x88000988,
    0x00188019,0x00310000,0x00c40000,0xf55ffd80,0x000001ff,0x01880000,
    0x99970000,0x80399999,0x02200009,0xf107ffc8,0x3ffe65ff,0x3ffb2201,
    0xedb8803e,0x001dffff,0x3fae0dfb,0x400cffff,0x201defdb,0xb8dfffe9,
    0xfdb885ff,0x17dc01de,0x55ffd800,0x80001fff,0xec886ff9,0x75403eff,
    0xf1006fff,0x3ffe01ff,0x82ffffff,0xb9efffe8,0x2dff35ff,0x983fffeb,
    0xffb82fff,0x407ffe67,0xfffffff9,0xffff500e,0x09ffffff,0xfd889ff0,
    0xffffffff,0xfffffb02,0xffff507f,0x8bffbdff,0xffffffe9,0x005ffd03,
    0x7d57ff60,0x220000ff,0x7fcc6fff,0x81efffff,0x06fffff9,0x101fffb0,
    0xffffffff,0xffff985f,0x35ffcfff,0xffff9fff,0x9ffd0bff,0x7cc9ffd0,
    0xffe881ff,0x84ffffef,0xfffffffb,0x203fffff,0x7fec2ff9,0xffffeeff,
    0x7fffdc0f,0x7fc1ffff,0xfffebdff,0x77fffc5f,0xff80ffff,0xffb0002f,
    0x003ffeab,0x26fffd80,0xfffffff8,0xfffc86ff,0xffb802ac,0xfff980ff,
    0x41cccccc,0xfebefffe,0xfff35fff,0xffff99ff,0x447ffb85,0x3fe61fff,
    0x2fffa81f,0xff31fff2,0x7e4c17ff,0xff700fff,0x067ffc41,0xe89fff91,
    0xbffd14ff,0x2e17ffdc,0x3fea5fff,0x09ffd11f,0x31005fff,0xfaaffec1,
    0x200260ff,0x26ffffea,0xf712fffb,0x5ffd85ff,0x3fffe200,0x05ffb80f,
    0xb87fff50,0xfff35fff,0x37ffc41d,0xfb8bffe2,0x0fffcc6f,0x3e237fdc,
    0x3fff60ff,0x0ffff201,0x3fea37ec,0x6fff880f,0xfa83ffea,0x0fffb0ff,
    0x75cbfff1,0x93ffdc4f,0x0bffffff,0xb1bfffd3,0x3ffeabff,0x03ffffc8,
    0xdffffffb,0x7fc37fec,0x027fec4f,0x1fffffb0,0x2007ff90,0xff886ffc,
    0x09fff35f,0xfd81fff9,0x30fffa4f,0xff303fff,0x7c7ff98f,0x5e4405ff,
    0x989ff009,0x33304fff,0x2237fe43,0xbffd2fff,0x0417ffa0,0xffc97ff6,
    0x7d45ffff,0xfeffffff,0xfdfff55f,0xf0bfffff,0x4dff99ff,0xffe82caa,
    0xffffffb4,0x6ffdc03f,0xffe80fff,0xd80cefdd,0xbffd05ff,0x2a0bffe6,
    0x7fd41fff,0x981fff17,0xfff01fff,0x4bffb317,0x0001fff9,0x7c42ff98,
    0x801cefff,0xfff85ffc,0x3609fff3,0x7d4405ff,0x3ffae3ff,0x3fe24eef,
    0xfffebdff,0xfffff55f,0x85ffff99,0x0dff90df,0x6cbffe60,0x1fffffff,
    0xff3dff10,0xfffff01f,0xfe85ffff,0x2bff904f,0xf880fff9,0xafff82ff,
    0xff985ffb,0xfffd101f,0xffb8bfff,0xfb80000f,0xffffb80f,0xfb02dfff,
    0x27fff0bf,0xfff06ffe,0x7fffcc0b,0x705fff03,0xffb85fff,0x1dfff55f,
    0x0a37ff44,0x3200dff9,0xffd90fff,0x3a01ddff,0x0fff89ff,0x7fffffcc,
    0x3f60ffff,0x2bffd05f,0xf981fff9,0xcffc81ff,0xff982ffe,0x3ffea01f,
    0x7fec0fff,0x99999707,0x40dfb099,0xfffffffb,0x2fff41ff,0xffda7ff4,
    0x2fffcc0f,0x01dfff70,0x3f60bffe,0x2bfff07f,0xfb83fffa,0x3ff200ff,
    0x3fffb806,0x5c04ffd8,0x1fff14ff,0x2a3ffe98,0x3ff25fff,0x35fff986,
    0xff507fff,0xffff301f,0xfff301ff,0x3fffea03,0x3f62ffff,0xffffd07f,
    0x09ff0fff,0xffffec88,0x3ffa2fff,0xf54ffe84,0x3faa1bff,0x3b6e05ff,
    0xfff82fff,0xd05ffe82,0x3ffeabff,0x01fff981,0xf701bff2,0x3ff60dff,
    0x89bfe604,0x74000fff,0x3ffea7ff,0x9afffe43,0x3a21efff,0x3ffa06ff,
    0xfff305ff,0x27fff503,0xf70fffc8,0xfffd01ff,0xff88ffff,0x3f6e2002,
    0x3ffa6fff,0x3a4fff85,0xfffeffff,0xff7005ff,0x82fff81f,0xffb04fff,
    0x203ffeab,0x3201fff9,0x3ff206ff,0x9ffb00ef,0xf10fff40,0xfb8001ff,
    0x3fffa0ff,0x5fffffbe,0x9bfffff3,0x5c05ffff,0xf302ffff,0xbff903ff,
    0x3e67fff0,0xaaaa81ff,0x7fd47ffe,0x6c402200,0xbffb0fff,0x7447fff0,
    0xfdcfffff,0x3ffe005f,0x7417ffc3,0xbfff05ff,0x2a0bffea,0x3f201fff,
    0xdfff906f,0x827fec01,0xdcccfffb,0x001ccfff,0xff98fff7,0xffefffff,
    0xffbfff35,0x880bffff,0x3e607fff,0x3ffe81ff,0x3fe5ffd8,0x7ffc805f,
    0xffe83fe4,0x4bffe605,0x7fc46ffc,0x6fedc42f,0x4009ffb2,0x7ffc5ffd,
    0x987ffd82,0xfff55fff,0x80fffb07,0xffb86ffc,0x7fec00ef,0xfffff704,
    0x5fffffff,0x3f617bae,0xfffe985f,0xf35ffd8d,0xffff71ff,0x9fff1007,
    0x40fffcc0,0xffe85ffe,0x00bfff64,0x5fe8fffb,0x203fffb0,0xff71fffb,
    0x11fff98f,0x6c7ffb00,0x5fff84ff,0x7dc1fffc,0x7ffe42ff,0x41dfff55,
    0x6406fff8,0x7ffd46ff,0x4ffd800e,0xffffff70,0x25ffffff,0x3e21fffb,
    0xb06202ff,0x3ffe6bff,0xfc800260,0x3fe601ff,0x0fffc81f,0xf98fffe6,
    0x2a20bfff,0x3e27fffe,0xdfff703f,0x3fffd445,0x7ec7fff1,0x0bbbee6f,
    0x7ec5fff1,0x3ffee0ff,0x2677ffc3,0x3ef3fffa,0xff55ffff,0xfff99fff,
    0x6ffc803f,0x26bfffe2,0x7ec09999,0x5555304f,0x57fff755,0x37fffe21,
    0x8007fffc,0xfff35ffd,0xfebc8001,0x7fcc05ff,0xffff981f,0x40ffffdc,
    0xeefffffb,0x25ffffff,0x3fa01ffa,0xfffeffff,0x7ffec4ff,0x262fffdd,
    0xecacffff,0x3fe60fff,0x6fffedff,0x46ffffd8,0xeffffffa,0xdff55ffc,
    0x9ffffff9,0x5cdff900,0xffffffff,0x27fec4ff,0x07ffc400,0x7fffffd4,
    0xfd8001ff,0x01fff35f,0xfffffe80,0x0fffcc01,0xffffffb8,0xfff502ff,
    0xffffffff,0x4407fc85,0xffffffff,0xffe884ff,0xfc85ffff,0xffffffff,
    0xfffffb83,0xfe881fff,0xffe986ff,0x55ffb8df,0x3ffeedff,0xdff9003f,
    0x7ffffff4,0x7ec4ffff,0xff88004f,0xfffd300f,0x360001bf,0x1fff35ff,
    0xefffd800,0x1fff9801,0x3ffffaa0,0x7654401e,0xd03defff,0x3fee00bf,
    0x202effff,0x04ffffd8,0x3fffffae,0x3ffaa02e,0x4c400dff,0x0000c400,
    0xff900022,0x3ffffe6d,0x44ffffff,0x88004ffd,0x4c400fff,0xffd80001,
    0x001fff35,0x00009988,0x004cc400,0xa8009880,0x4cc4001a,0x00098000,
    0x220004cc,0x00000019,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x26002000,0x3ee02fff,0xffb000ff,0x01fffecd,
    0xfe8ffff6,0x7fcc00ff,0x1ffff13f,0xb9bffea0,0xffffffff,0xfd5fffff,
    0x3ffea0df,0x3fff881f,0x2003fff3,0xfffffff8,0xff881dee,0x3ffe604f,
    0x3fffff30,0x3ffffee0,0x005ddd10,0x901fffc4,0x7cc3ffff,0x5fff31ff,
    0xcefffda8,0x02fff980,0x4003ffee,0x3fe26ffd,0xfff300ff,0x02fffb8d,
    0xf707ffe4,0x3ffa0bff,0x3fffee1f,0xffffffff,0x01fff95f,0x507ffff9,
    0x3fe63fff,0xfff1001f,0xffffffff,0x1ffff889,0x261fff30,0xb04fffff,
    0x221fffff,0x22003fff,0xff703fff,0xfff985ff,0x6c5fff31,0xffffffff,
    0x017ffcc2,0x2001fff7,0x7fdc6ffd,0x3fffd04f,0x405fff88,0xffe86fff,
    0x27ffe42f,0x3fffffee,0x5fffffff,0xfd05fff5,0xff70bfff,0x00fffccf,
    0xffffff88,0x24ffffff,0x306ffff8,0x3fe61fff,0xfff06fff,0x3fe21fff,
    0x3fe2003f,0xffffa83f,0x31fff982,0x3ff65fff,0xffffdcff,0x80bffe61,
    0xb000fffb,0xfffd0dff,0x04fffa83,0x2601fffb,0xff983fff,0x1bffe26f,
    0x01fffc40,0xf887fff1,0xfd87ffff,0x07ffe66f,0x89fffc40,0x27fffc99,
    0x83fffff8,0xff30fff9,0xf981ffff,0xf10fffff,0x7c4007ff,0x7ffd43ff,
    0x9866602f,0xfff9afff,0x337ff444,0x7dc05fff,0xffb000ff,0x4dfff30d,
    0x2a06fff8,0xff903fff,0x3fff201f,0x003fffb4,0xd00fffe2,0xfffa8bff,
    0x7ffc0fff,0x887ffe64,0x07fff101,0x7c47fff2,0x4c0fffff,0xfff30fff,
    0xffb85ffd,0xff10fffe,0x7fc4007f,0x3fffe63f,0xfff98002,0xf507ffba,
    0x17ffccff,0x001fff70,0x7e41bff6,0x3fff92ff,0x82fffc40,0x7f405ffe,
    0x04fffcff,0x00fffe20,0xffc8fff9,0x3e63ffec,0x3ffe62ff,0x0dfffea9,
    0x4c0fffe2,0xfff13fff,0xff98bfff,0xf9fff30f,0xfcffd89f,0x7fff10ff,
    0x9fffc400,0x403ffff9,0xff31fff9,0x2035315f,0x3fe67ffa,0x3ffee02f,
    0x0dffb000,0x3e7fffa2,0xffd805ff,0x17ffcc0f,0x3ffffe60,0x3e2000ff,
    0x7fd403ff,0x32bffa0f,0x3ffea5ff,0x3f7ffe60,0x226fffff,0xff503fff,
    0x3bffe25f,0x3fe62fff,0xf5fff30f,0xfafff8df,0x7fff10ff,0x5fffc400,
    0x803ffff8,0xff31fff9,0xffd1005f,0x017ffccb,0x2001fff7,0x3ea06ffd,
    0x00ffffff,0x643fffa8,0xfc800fff,0x4002ffff,0x4403fff8,0xfff12fff,
    0x7e4fff51,0x7fffcc6f,0x1fffebbe,0xf307fff1,0x3fe21fff,0x266fffaf,
    0xfff30fff,0x3e61fff1,0x10fff9ef,0x44007fff,0xfffecfff,0xfff9801f,
    0x805fff31,0x261fffe8,0x3ee02fff,0xffb000ff,0xffffd80d,0x3ffe002f,
    0x802fff45,0x005ffff8,0x803fff88,0xdff74fff,0x7f43ffe2,0x77ffcc4f,
    0x44fffe20,0xfeeeefff,0x3e26ffff,0x3fffa9ff,0x3e61fff3,0x72ffd8ff,
    0x1fff39ff,0x800fffe2,0xfffffff8,0xff9806ff,0x05fff31f,0x217fff44,
    0x2e02fff9,0xfb000fff,0xfff880df,0x7fe4005f,0x05fff30f,0x3ffffea0,
    0x7ffc4000,0xb6ffd803,0x5fff49ff,0x7cc2fff8,0x3ffe83ff,0xfffffff1,
    0x441dffff,0xfffb1fff,0x261fff31,0x5ffb8fff,0xfff35ffb,0x00fffe21,
    0xffffff88,0x4c03fffe,0xfff31fff,0x3fffa205,0x02fff881,0x4003ffee,
    0xfb806ffd,0x7cc001ff,0x0fff93ff,0x3ffffe20,0x7fc4005f,0xfffb803f,
    0x3f21fff8,0x40fff9df,0xfe82fff9,0xfffff14f,0x819fffff,0xff31fff8,
    0x21fff3bf,0xff98fff9,0xff31fff7,0x0fffe21f,0xfffff880,0x00ffff8b,
    0x7cc7ffe6,0xfff702ff,0x0fffe203,0x2007ffc8,0xfb806ffd,0xff8000ff,
    0x009ffd6f,0x3ffffff6,0x3fe2002f,0xfff9803f,0x7fd47ffb,0xf986ffbf,
    0x4ffe81ff,0x3337fff1,0x1fff8801,0x3ff3fff2,0x21fff30f,0x36ffbfff,
    0x3fe21fff,0x3fe2003f,0x3ffee4ff,0x47ffe606,0xfb02fff9,0x7ffc407f,
    0xa9fff203,0x5ffd86ec,0x00fffb80,0xfafffc80,0xffa801ff,0x0ffff9ef,
    0x07fff100,0x3fffffe0,0xffefff85,0x81fff984,0xfff14ffe,0xfff88007,
    0x7fffff41,0x21fff30f,0x34fffffd,0x3fe21fff,0x3fe2003f,0x3fffe84f,
    0x263fff30,0xffd02fff,0x0ffff803,0x7d4dffd0,0x27ff40ff,0x007ffdc0,
    0x7ffffcc0,0xfff8806f,0x0bfff91f,0x00fffe20,0x1fffffec,0x17ffffec,
    0x740fffcc,0x7fff14ff,0x1fff8800,0x7fffffd4,0x2e1fff30,0xf32fffff,
    0x3ffe21ff,0x3ffe2003,0x0ffff983,0xf31fff98,0x2aaa05ff,0x6fffec00,
    0x93fff221,0xf50dfff9,0xff7007ff,0x3fa0001f,0xd803ffff,0x7ff44fff,
    0xfff8802f,0xffff7003,0xffff703f,0x3fff301f,0x3e29ffd0,0x7c4003ff,
    0xfffd81ff,0x1fff30ff,0x43ffffe6,0xff10fff9,0x7fc4007f,0xbfffb03f,
    0x263fff30,0x55502fff,0xffff8803,0xfffffeff,0x7fffff40,0xb800ffff,
    0x70000fff,0x801fffff,0xf986fffa,0x7c400fff,0xff3003ff,0x3fe60fff,
    0xfff307ff,0x229ffd03,0x44003fff,0xff881fff,0xfff30fff,0x337fffc1,
    0x3fe21fff,0xffffffff,0x7fff14ff,0x0bfffe20,0x3e63fff3,0x7fff02ff,
    0xfffff500,0x305fffff,0xffffffff,0x3ffee003,0xfff10000,0xfff880df,
    0xbfff902f,0x03fff880,0x817fffe0,0xf305ffff,0x9ffd03ff,0x000fffe2,
    0x2e03fff1,0xff30ffff,0x27ffec1f,0x3e21fff3,0xffffffff,0xfff14fff,
    0x7fffdc07,0x4c7ffe60,0xfff02fff,0x3fb62007,0x200dffff,0x1cefffe9,
    0x03ffee00,0x3fffd800,0x02fffe40,0x405ffff1,0x2003fff8,0x3603fffe,
    0xff303fff,0x29ffd03f,0x4003fff8,0x3a01fff8,0xfff30fff,0x317ffdc1,
    0x3fe21fff,0xffffffff,0x7fff14ff,0x25fffe80,0xff31fff9,0x0fffe05f,
    0x0004cc00,0x00000262,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x7fffffc4,0x103deeff,
    0x7dc07fff,0x1fff50ff,0x3fffe200,0xffffffff,0xffffff10,0x1fffffff,
    0x3fffffe2,0x3201cdef,0xffffffff,0xff13ffff,0xddffffff,0x7fc40039,
    0xbff9007f,0x33333332,0xffb3cccc,0x004ccc0f,0x30001310,0x00260001,
    0xf7006660,0xffff10df,0xffffffff,0x07fff10b,0xfa87ffdc,0xff1000ff,
    0xffffffff,0x3ffe21ff,0xffffffff,0xffff10ff,0x9fffffff,0x3fffff20,
    0x3fffffff,0xfffffff1,0x007fffff,0x00bffff2,0x7ffd7ff2,0xffffffff,
    0xd88fffb6,0x02efffff,0x9fffff91,0xffffe980,0x7fedc00c,0x7e400dff,
    0xb83effff,0xfff886ff,0xffffffff,0x7ffc45ff,0x43ffee03,0x1000fffa,
    0xffffffff,0x3e21ffff,0xffffffff,0xff10ffff,0xffffffff,0xfff90dff,
    0xffffffff,0x3fffe27f,0xffffffff,0xffff802f,0x5ffc805f,0xffffffff,
    0x3ff6dfff,0x3ffffe27,0x7cc0ffff,0x4fffffff,0xffffff50,0x3ff203df,
    0x02ffffff,0xfffffff7,0x86ffb89f,0x4cc3fff8,0x220ffffb,0x3ee03fff,
    0x1fff50ff,0x0fffe200,0x03fff880,0x89fffc40,0x2ffffb99,0x77ffe400,
    0x107fff10,0xa80bfff7,0x01ffffff,0xaaa9554c,0xfffbaaaa,0x7e4fffb2,
    0xffea9aef,0x5f7fff46,0x7c41fffd,0xfffcbfff,0xcffffc85,0x440ffffe,
    0xfebacfff,0x0aaa60ff,0xb80fffe2,0x3fe22fff,0x3ffee03f,0x001fff50,
    0x800fffe2,0x4003fff8,0xf103fff8,0x2e001fff,0x3e20ffff,0x3ff603ff,
    0x7f7fec06,0x400004ff,0x3ff64ffc,0x910bffa7,0x17ffd437,0xff91bff6,
    0x21fff88f,0x2a0cfff9,0x764c5fff,0x00fffcc5,0x407fff10,0x3e22fff9,
    0x3fee03ff,0x41fff50f,0xf10efff9,0x7c4007ff,0x7c4003ff,0x3fee03ff,
    0xfff9802f,0x1fffc42f,0x440bffb0,0x7ffcafff,0x3fe60000,0xfb37fe46,
    0x64037bff,0x80a886ff,0xffd84ffe,0x203ffee4,0x5000fffd,0x44005fff,
    0x3f203fff,0x1fffc47f,0x2a1fff70,0xfff30fff,0x1fffc41d,0x07fff100,
    0x03fff880,0x100fffe2,0xf107ffff,0x3fea07ff,0x3ffee02f,0x002fff98,
    0xb83ffb00,0x3ffea5ff,0x741cffff,0x7fc004ff,0xfeccccdf,0x41bff65f,
    0x9301fffa,0x05fffffd,0x56fffc40,0xfffdaaaa,0x777ffc44,0xffeeeeee,
    0x11fff50f,0xf881dffd,0xcccccdff,0x7fffc44c,0xffffffff,0x80fffe23,
    0x7404fff8,0xff105fff,0xfddddddf,0xffe809ff,0x0017ffa5,0x2e13fea0,
    0x7ffdc4ff,0x3e4fffff,0x3e2004ff,0xffffffff,0x13ffe6ff,0x2e17ffcc,
    0xffefffff,0x3fe2002f,0xffffffff,0x7fc41fff,0xffffffff,0xff50ffff,
    0x01fffd1f,0xfffffff1,0xff88ffff,0xffffffff,0x3ffe23ff,0x02fffc03,
    0x440dfff9,0xffffffff,0x7cc05fff,0x3fff22ff,0x7ff40001,0x504ffa81,
    0x1ffffffb,0x88017ffa,0xaaaacfff,0x3ff62aaa,0x43fff506,0xf0adfffb,
    0x7c4005ff,0xffffffff,0xff880cef,0xffffffff,0xff50ffff,0x203fffdf,
    0xfffffff8,0x7fc47fff,0xffffffff,0x3ffe23ff,0x837ffc03,0x200ffffb,
    0xfffffff8,0x01efffff,0xff88fff9,0x0555304f,0x7cc1bfee,0x7dcc083f,
    0x0dff93ff,0x7fc19bd3,0x3fee004f,0x47ffd80f,0x7fc44ffe,0x20aaa62f,
    0xfccdfff8,0x3e202fff,0x99999cff,0xf50fffb9,0x05ffffff,0x2ab7ffe2,
    0x7c42aaaa,0x7c4003ff,0x7ffc03ff,0x1ffff984,0x4e7ffc40,0xfffb9999,
    0x27ffc40f,0xfc83fff4,0x05fff05f,0x7f44bfe2,0x54ffe83f,0xffd87fff,
    0x223ffe47,0x3fe62dff,0x3ffea0cf,0x2e1fffc5,0x3fee2fff,0x23fff886,
    0x103fffe8,0x7dc07fff,0xffff50ff,0x3e20dfff,0x3e2003ff,0x7c4003ff,
    0x3fe203ff,0x7fffc43f,0x3fff8803,0x50bffe60,0xffffffff,0xf905ffff,
    0x0fff30bf,0x3ff21ff8,0xfffca9bf,0x33ffffa2,0x7cc3fffe,0xffdabfff,
    0x7fffec0e,0x40ffffec,0xfc9afffc,0x3fee2fff,0x43fff886,0x882ffff8,
    0x3ee03fff,0xffff50ff,0xf107fff7,0x7c4007ff,0x7c4003ff,0x3fea03ff,
    0x27fff42f,0x03fff880,0x3fa2fffc,0xffffffff,0xffc85fff,0x404ffa85,
    0x7fff41ff,0x4c4fffff,0xffffffff,0xfffff505,0x3f603fff,0x1fffffff,
    0xffffff98,0x3ee4ffef,0x3fff886f,0x40ffffa8,0x2e03fff8,0xfff50fff,
    0x103ffee7,0x44007fff,0x44003fff,0x3fa03fff,0x3fff60ff,0x3ffe2006,
    0x97ffe203,0xfffffff9,0x1fffffff,0xffc84f88,0x64415403,0x02efffff,
    0x7fffff91,0xefffd980,0x7fedc01c,0x36a00dff,0xffb8dfff,0x3ffe2006,
    0x8bfffb03,0x2e03fff8,0xfff50fff,0x2227ffc1,0x22003fff,0x44003fff,
    0x74c43fff,0x3fee2fff,0x3e2000ff,0xffd303ff,0x07ffe47f,0x709fff30,
    0x03ffd05f,0x3101554c,0x04c40013,0x80004c00,0x00c40009,0x3fff8800,
    0x45ffff10,0x2e03fff8,0xfff50fff,0x10fffd41,0x44007fff,0xffffffff,
    0xf13fffff,0xffffffff,0xffd8bfff,0xffffffff,0xfff16fff,0xffffffff,
    0x7ffc1dff,0x47ffe805,0x1fff06fc,0x0037fe40,0x00000000,0x00000000,
    0x07fff100,0x887fffd4,0x3ee03fff,0x1fff50ff,0x3e26ffe8,0x3e2003ff,
    0xffffffff,0xff13ffff,0xffffffff,0xfffd81bf,0xffffffff,0xffff16ff,
    0xffffffff,0x17ffd43f,0x717ffdc0,0x01ffe609,0x0000dff9,0x00000000,
    0x00000000,0x201fffc4,0xff14fffd,0x7ffdc07f,0x981fff50,0xfff12fff,
    0x7ffc4007,0xffffffff,0xffff13ff,0x039ddfff,0x3ffffff6,0x6fffffff,
    0xfffffff1,0xd817bfff,0xff1007ff,0x3fea00bf,0x037fe406,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00005400,0x80c40260,0xfe80fff9,
    0x0004403f,0x04cc0330,0xf9018800,0x3ffe20df,0xff09ffb3,0x25fff09f,
    0x7c46fff9,0x3ffe26ff,0x4fffffff,0x33004cc0,0x33333333,0x01310133,
    0xffc8aaa2,0x7ed3ffe7,0x2001105f,0x3a009998,0x3ee001cf,0x3dfff95f,
    0x837fffa2,0xfe80fff9,0xd1dff53f,0xea800bff,0x0dff303f,0xfeabffcc,
    0x3fe60dff,0x0fffb81f,0xff98dff5,0x23ffd46f,0x3f63fffc,0x3ffe21ff,
    0x4fffffff,0x403ffea0,0xffffffff,0xf984ffff,0x21fff305,0x3ffe7ffc,
    0x6c4dffd4,0x4c0befff,0xe817ff65,0xb802dfff,0xffffeeff,0xfffffbff,
    0x03ffe66f,0x7fd4fffa,0x804fffee,0x03ffffb8,0x7cc0dff3,0xfffffbff,
    0x427ff46f,0x3fe24ffe,0x3fffee0f,0x3a17ff20,0xfffa8fff,0x77777443,
    0x203ffffe,0xff03fffe,0xffffffff,0x4f98c9ff,0x90fff982,0xa7ffcfff,
    0xffd16ffe,0xd9dfffff,0x00ffd8bf,0x7dfffffb,0x3fffee01,0xfffffcad,
    0x32fffebc,0xffd01fff,0x3ffffea7,0x3f2602fe,0x302fffff,0x7fcc0dff,
    0xffebbeff,0x31ffee2f,0xffd83fff,0x8bffff63,0xff982ffe,0x005fffef,
    0x9817fff2,0xff07ffff,0xffffffff,0x2b7e69ff,0x3e65eacf,0x4fff70ff,
    0xbffb3fff,0x3fffffe2,0x45ffffff,0x36604fe8,0x0cffffff,0x3a27ffdc,
    0x7ffc3fff,0xd01fff33,0x3ffea7ff,0x3faa010f,0x00cfffff,0xf981bfe6,
    0x3fe20eff,0x8bffe23f,0xffb86ffc,0x53ffffe5,0xf700fff9,0x001fffff,
    0xb01bffee,0x007ffdff,0x7fffdc00,0x3ec0ffff,0x7ff4dff5,0x3e29ff92,
    0xfffd950a,0x055103df,0xffffd710,0x3ffee3bf,0x743ffec1,0x1fff34ff,
    0x3ea7ffd0,0x3fee03ff,0x502dffff,0x5fff9555,0x3fe63555,0x44ffe83f,
    0x3ffe5ffc,0xf37ff883,0x3eedff9f,0x7ffec05f,0xfff5002f,0x77fcc01d,
    0x00006ffa,0x0e7ff4c4,0xbff12fc4,0xffa8ffe4,0x5dcc0113,0xc9800001,
    0xff73ffff,0x87ffc81f,0xfff34ffd,0x2a7ffd01,0x3fa01fff,0x7c00beff,
    0xffffffff,0xfff34fff,0x989ffd05,0xfffa8fff,0xf93ffd00,0xfb1ffb3f,
    0xfffa805f,0xfff9800f,0x9ffec00f,0x776c2ffe,0xeeeeeeee,0x77f7dc3e,
    0x2e0ffcc0,0xb88ee61b,0x0000000b,0x3fffaa00,0xf90fff73,0x29ffb0df,
    0xff81fff9,0x01fff53f,0x00e7fff4,0x7ffffffc,0xf34fffff,0x9ffd03ff,
    0xff97ffd0,0x767fdc09,0xff5ff77f,0x7ff4401f,0x7fc406ff,0x7fc401ff,
    0xf8dff70f,0xffffffff,0x3fee4fff,0x06c45fd8,0x00000000,0xffc98000,
    0xff72ffff,0xb0dff90f,0x3ffe69ff,0xf53fff81,0x7fe401ff,0xb00befff,
    0xdfffdddd,0x3fe67ddd,0x84ffe81f,0x1fffeffb,0x3ffbfe60,0xbffdff35,
    0xfffffd80,0xfffd103f,0x4bff9005,0x3fe1fff8,0xffffffff,0x44fa24ff,
    0x2666003f,0x77710999,0x4cccccc1,0x19999999,0x3ffaa000,0x2e0befff,
    0x6ffc87ff,0x3fe4ffd8,0x9fffdc3f,0x4c00fffa,0xdffffffc,0x037fcc01,
    0xfd03fff3,0xffff109f,0xfffd00df,0x7ffffc7f,0x2fffea03,0xfe81fffe,
    0xff8803ff,0x52ffec2f,0x55555555,0x00003555,0x7fffffc4,0x223fff13,
    0xffffffff,0x007fffff,0xffffffc8,0x0fff702d,0xffb0dff9,0x55ffff49,
    0xf53ffffd,0x2e2001ff,0x1effffff,0x4c0dff30,0xffe81fff,0x7ffff904,
    0x3ffff900,0x807fffec,0xff16fff8,0xffffb8df,0x27ffffff,0xcc984cc9,
    0x00000004,0xffffff10,0x447ffe27,0xffffffff,0x007fffff,0x1cffffe8,
    0x643ffdc0,0x4ffd86ff,0x3fffffee,0xff53ffdd,0xfd50001f,0x3e607fff,
    0x3ffe606f,0x304ffe81,0x3001ffff,0xffa8ffff,0x3fff606f,0xc93ffee1,
    0xffffffff,0x000007ff,0x44000000,0x13ffffff,0x00003fff,0x17ffd000,
    0x21ffee00,0xffd86ffc,0xa7fff5c4,0xfff53ffc,0x7e4c0001,0x0dff303f,
    0x740fffcc,0x3ffa04ff,0x17ffe005,0x2e07fff1,0xffe83fff,0xfffff92f,
    0x00ffffff,0x00000000,0x33333300,0x00000001,0x5c001640,0x6ffc87ff,
    0x1104ffd8,0x01fff500,0x20591000,0x3e602aa8,0x4ffe81ff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__arial_bold_28_usascii_x[95]={ 0,2,1,0,0,1,1,1,1,0,0,1,1,0,
1,-1,1,1,0,0,0,1,1,1,1,0,2,2,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,
1,1,1,1,1,1,1,0,0,1,-1,0,0,-1,0,1,-1,0,1,-1,0,0,1,1,1,0,0,1,1,1,
-2,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,2,0,0, };
static signed short stb__arial_bold_28_usascii_y[95]={ 22,4,4,3,2,3,3,4,3,3,3,6,18,13,
18,3,3,3,3,3,3,4,3,4,3,3,9,9,6,8,6,3,3,4,4,3,4,4,4,3,4,4,4,4,
4,4,4,3,4,3,4,3,4,4,4,4,4,4,4,4,3,4,3,24,3,8,4,8,4,8,3,8,4,4,
4,4,4,8,8,8,8,8,8,8,4,9,9,9,9,9,9,3,3,3,10, };
static unsigned short stb__arial_bold_28_usascii_w[95]={ 0,4,10,14,13,21,17,4,7,8,10,13,5,8,
5,8,12,9,13,13,14,13,13,12,12,13,4,4,13,13,13,14,25,19,16,16,16,15,14,17,16,5,12,18,
14,19,16,18,15,19,17,16,15,16,18,24,17,18,15,7,8,7,13,16,7,14,14,13,13,14,10,13,13,5,
8,13,5,20,13,14,14,13,10,13,9,13,14,20,14,14,13,10,3,9,14, };
static unsigned short stb__arial_bold_28_usascii_h[95]={ 0,18,7,20,23,20,20,7,25,25,10,14,9,5,
4,20,20,19,19,20,19,19,20,18,20,20,13,18,14,10,14,19,25,18,18,20,18,18,18,20,18,18,19,18,
18,18,18,20,18,21,18,20,18,19,18,18,18,18,18,24,20,24,11,3,5,15,19,15,19,15,19,20,18,18,
24,18,18,14,14,15,19,19,14,15,19,14,13,13,13,19,13,25,25,25,6, };
static unsigned short stb__arial_bold_28_usascii_s[95]={ 128,169,213,147,94,185,207,224,61,1,196,
75,207,213,222,32,58,138,148,85,173,188,162,156,1,242,247,151,61,182,1,
1,10,131,114,225,81,65,50,14,19,250,33,225,210,190,173,128,157,108,1,
41,102,16,65,118,84,46,98,86,176,78,168,228,244,232,123,188,109,202,162,
71,143,244,69,36,246,15,89,217,216,202,50,174,99,36,103,118,139,231,154,
50,46,36,229, };
static unsigned short stb__arial_bold_28_usascii_t[95]={ 22,68,87,1,1,1,1,87,1,1,87,
87,87,95,95,27,27,27,27,27,27,27,1,68,27,1,68,68,87,87,87,
48,1,68,68,1,68,68,68,27,68,48,48,48,48,48,48,1,48,1,68,
27,48,48,48,48,48,48,68,1,1,1,87,95,87,68,27,68,27,68,27,
27,48,48,1,68,27,87,87,68,27,27,87,68,27,87,87,87,87,27,87,
1,1,1,87, };
static unsigned short stb__arial_bold_28_usascii_a[95]={ 111,134,190,223,223,357,290,95,
134,134,156,234,111,134,111,111,223,223,223,223,223,223,223,223,
223,223,134,134,234,234,234,245,391,290,290,290,290,267,245,312,
290,111,223,290,245,334,290,312,267,312,290,267,245,290,267,378,
267,267,245,134,111,134,234,223,134,223,245,223,245,223,134,245,
245,111,111,223,111,357,245,245,245,245,156,223,134,245,223,312,
223,223,201,156,112,156,234, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_bold_28_usascii_BITMAP_HEIGHT or STB_FONT_arial_bold_28_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_bold_28_usascii(stb_fontchar font[STB_FONT_arial_bold_28_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_bold_28_usascii_BITMAP_HEIGHT][STB_FONT_arial_bold_28_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_bold_28_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_bold_28_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_bold_28_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_bold_28_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_bold_28_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_bold_28_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_bold_28_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_bold_28_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_bold_28_usascii_s[i] + stb__arial_bold_28_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_bold_28_usascii_t[i] + stb__arial_bold_28_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_bold_28_usascii_x[i];
            font[i].y0 = stb__arial_bold_28_usascii_y[i];
            font[i].x1 = stb__arial_bold_28_usascii_x[i] + stb__arial_bold_28_usascii_w[i];
            font[i].y1 = stb__arial_bold_28_usascii_y[i] + stb__arial_bold_28_usascii_h[i];
            font[i].advance_int = (stb__arial_bold_28_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_bold_28_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_bold_28_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_bold_28_usascii_s[i] + stb__arial_bold_28_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_bold_28_usascii_t[i] + stb__arial_bold_28_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_bold_28_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_bold_28_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_bold_28_usascii_x[i] + stb__arial_bold_28_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_bold_28_usascii_y[i] + stb__arial_bold_28_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_bold_28_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_bold_28_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_bold_28_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_bold_28_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_bold_28_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_bold_28_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_bold_28_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_bold_28_usascii_LINE_SPACING
#endif

