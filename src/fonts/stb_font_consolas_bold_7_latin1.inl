// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_bold_7_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_bold_7_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_bold_7_latin1_BITMAP_WIDTH         256
#define STB_FONT_consolas_bold_7_latin1_BITMAP_HEIGHT         28
#define STB_FONT_consolas_bold_7_latin1_BITMAP_HEIGHT_POW2    32

#define STB_FONT_consolas_bold_7_latin1_FIRST_CHAR            32
#define STB_FONT_consolas_bold_7_latin1_NUM_CHARS            224

#define STB_FONT_consolas_bold_7_latin1_LINE_SPACING           5

static unsigned int stb__consolas_bold_7_latin1_pixels[]={
    0x8804c013,0x1a86444b,0x88e20644,0x41c42444,0x89a0f220,0x24ea6c3a,
    0x0ae2cc1b,0x44570202,0x730e643a,0x88910441,0x488910cd,0x1bb10c88,
    0xb82ea1c4,0x49711dc3,0x886444b8,0x32226444,0x24b88ee0,0x893223c8,
    0x8e215c3a,0x10dcd448,0x894b0dcb,0x1ddca252,0x318898aa,0x2e15c311,
    0x7315c482,0x4b482b87,0x702e2cbc,0x52dc5a85,0x4622a311,0x1395499b,
    0xc88ee1e4,0x13131dc6,0x21b571dc,0x4272a512,0x2e1dc3b8,0x47711d43,
    0x2e1dc3b8,0x47711dc3,0x4771189a,0x17730bb9,0x5dcc2ee6,0x0e437570,
    0xaab9d437,0x32e55572,0x4643223b,0x32731939,0x259792cb,0x59790ed8,
    0x2cbc9a62,0x8a4da5a4,0x64b2f20d,0x25d790bc,0x7319398c,0x20e53772,
    0x4b2ae3c8,0x59772bbb,0x65dcaa6e,0x5d5cb772,0x2c888571,0x32ae5977,
    0x22259772,0x2e59112c,0x259572ca,0x59112cab,0x6444e372,0x1e447912,
    0x71e44791,0x20234373,0x2ec4bb15,0x86447337,0x7319398c,0x2936a4da,
    0x224da3ab,0x2d224da6,0xd162931b,0x3d27d526,0x64e63297,0x29999398,
    0xd964442c,0x2751b398,0x57371bcc,0x64dc6f32,0x0dd89763,0x2f325b95,
    0x332731b1,0x2a5b951b,0x2731b2dc,0x731b398d,0x5664b72a,0x0dc5b953,
    0x1b83706e,0x4c686e26,0x4d89b340,0x2298376e,0x7319398c,0x4c652632,
    0x4c649b54,0x89319344,0x706f4cb4,0x9724c641,0x46527367,0x32731939,
    0x25bd12cc,0x1bd52dca,0x66cc3baa,0x3665bd51,0x5c5b771c,0x5bb70d42,
    0x6f547366,0x36e39b30,0x2a5bb72d,0x21bd50de,0x5bb70dea,0x6edcfa72,
    0xb83706e2,0x37570dc1,0xa4c3706c,0xb83660d9,0xbb50e442,0x6cc376a1,
    0x5c1bb30d,0x4cc37663,0x4a837666,0x7516543d,0xdeb86ecc,0x36a1bf50,
    0x321bb50d,0xbb70d419,0x00000005,0x00000370,0x00000000,0xd501ed20,
    0x5477aa3b,0x83bd51de,0x21b9661b,0x40a8150d,0x0000c408,0x26005400,
    0x351a800a,0x1c00c098,0x1a8000a2,0x00000000,0x00000000,0x00000000,
    0x00000000,0x04410220,0x00000001,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x41910910,0x7511dc3b,
    0x2215c350,0x10a21223,0x517725c4,0x23c88f22,0xb11a83b8,0xa826265b,
    0xbb88ae22,0x417306e0,0x87b04c3b,0xb82e61bb,0x1990dd42,0x7503506a,
    0x8770c461,0x239984c2,0x306e6512,0x641b9817,0x188a8430,0x3a8898ee,
    0xb88e215c,0x2613130b,0x550f2098,0x506a2da8,0x71441a83,0xdc84c4cb,
    0x2a8b370c,0xfc961662,0x2e37373b,0x21b312ca,0x4b2f22ca,0x8aeae1c9,
    0xcab8ec1a,0x26e13951,0x2233973b,0x8b0eee1e,0x73192bbb,0x0bea86ee,
    0x5cef2e13,0x25b592aa,0x86ec09d8,0x47b6e1b8,0x43710cc9,0x710bb89a,
    0x542ee217,0x2553709c,0xb1762a9b,0xbb15ddcb,0x2e2ec5d8,0x26e5d773,
    0x9fa8aa2a,0x75161760,0xb9b9dfdc,0x3649b5b1,0x949b49d5,0x11ba21bb,
    0x49b52dc1,0xd9c6dc1c,0x23d792c8,0xd8323bcb,0x273192b8,0xa87a23e9,
    0x36273371,0x75d277a5,0xb8975c43,0x4d872aa2,0x272a0ae2,0x32a13950,
    0x2e19d509,0x257372b9,0x1b730db9,0x6dccae36,0x2e61b730,0x2f61950d,
    0x6457373a,0x265d3b3d,0x2162c0db,0x27bb73a8,0x215c39bd,0x2e93192c,
    0x459573a9,0x19b70a3b,0x275990b2,0x79d53a8d,0x2488e66e,0x73192eda,
    0x2371a2c8,0xc9360ddb,0xb81933a9,0xbb31545c,0x2a837661,0x5433aab2,
    0x219d50ce,0x4b7aa0ba,0x5db72dea,0x6ed4bb6e,0x36e5db72,0x265db72e,
    0x2a1bf32e,0x279172de,0x5db73ecc,0x5048976a,0x1bb306e7,0x6ecc372a,
    0x3661bb30,0x223bb51d,0xbac8361c,0x32a5bd13,0x447bd30c,0x1b0376e6,
    0x21bb52a8,0x47320edb,0x0d98572b,0x6f643772,0x6d4fa361,0x2655371e,
    0x83db50dd,0xa82ea0ba,0x0077aa0b,0x236931b0,0x52636049,0x931b498d,
    0x000288c4,0xa8126360,0x0110dc80,0x40000000,0x00154400,0x3004ca80,
    0x00400883,0x05408844,0x00000000,0xd51dea80,0x0077aa3b,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x02000000,0x22ae5175,0x24b88ae2,0x45b328ab,0x2e26441a,0x309106a2,
    0x0131545b,0x46eea175,0x260d43b8,0x89986609,0x06233131,0x944a3773,
    0x2945198a,0x710ddd4a,0x177315cc,0x82b88ae6,0x4388ae23,0x46231989,
    0x43750bb8,0x46ee62b9,0x17730bb8,0x32b86226,0x82eea131,0x9970d43b,
    0x55c32a61,0x54c3712c,0x99b8aa0c,0x0dc47330,0x20dc4777,0x5cb2ee0d,
    0x213950de,0x59113abb,0x25bb32ec,0x4e3723da,0x88733dcc,0x237571e9,
    0xda4b0dca,0x41793399,0x4476ee6c,0x4cb2ee3c,0x643b11d9,0xab92a1ca,
    0x654e6325,0x2e5b5b09,0x23b531ca,0x1d5109ca,0x75b83762,0x52ee2553,
    0x4b7aa0ca,0x1b1542a8,0x550ae273,0xb96ee2a8,0x5c5712cc,0x5c5712cc,
    0x237992de,0xb8573a9b,0x25b953b9,0x1b930db9,0x275991cc,0x50733ccc,
    0xb2745d89,0x872ea957,0xcb96e62b,0xbab86e0d,0x20d986c2,0x43623ccc,
    0x4f7722eb,0x931b0cea,0x26883b6e,0xb0760bda,0xb9ba644b,0x75c59992,
    0x459906a0,0x41bd52cc,0x551d642a,0x55371edc,0x45537154,0x9b306c2a,
    0x744776e3,0x6dce570d,0x325db72d,0x9c8e62ee,0x2693593e,0x115c2c43,
    0x8a666cdb,0xfbb15c6d,0x4371aae7,0x221642db,0x0d8964c5,0x3a8c932e,
    0x9d46c175,0xa8ae3b9b,0x5c77ea1c,0x2a9912cb,0x25b9b2de,0x39950dc9,
    0x64dcf26e,0x5c7b6a03,0x23db53d8,0x55371d9b,0x54dc7b6a,0x06c3db52,
    0x37200ae0,0x5263603b,0x4bbaa4a9,0xd34927b4,0xb8b7ae3b,0x5ecee721,
    0x85713a3c,0x54ae6e58,0xfb8371de,0x0136a02e,0x26325937,0x3763bd53,
    0x341bb70d,0x000000ea,0x00000020,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x2e651400,0x8947330a,
    0x20417512,0x2a040bc8,0x88210d42,0x88204c1a,0x98991099,0x49913220,
    0x2d811cca,0x950c886a,0x4c488dc6,0x33c89711,0xa92e2333,0x00000001,
    0x00000000,0x00000000,0x6d267600,0x259974bb,0x55b52aab,0x5ddc3322,
    0x2e61b733,0x2613510c,0x21dd10dd,0x4cee0bb8,0x9916e2cb,0x493065cc,
    0x54791bb9,0xd9b80aa2,0x003b8802,0x25c4aaaa,0x00000035,0x00000000,
    0x00000000,0x9ee6c000,0x553749ad,0x542a9762,0x44aeae5b,0x549b11cc,
    0x4cbb11bb,0x239b50bb,0xc88441c8,0x2a8662a3,0x008897a2,0x00000bb1,
    0x00000000,0x00000000,0x00000000,0x00000000,0x4d6cb732,0x26c55374,
    0x54135055,0x4c88a222,0x013130dc,0x000041a8,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_bold_7_latin1_x[224]={ 0,1,0,0,0,0,0,1,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__consolas_bold_7_latin1_y[224]={ 5,0,0,0,-1,0,0,0,-1,-1,0,1,3,2,
3,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,1,0,1,0,1,0,1,0,0,
0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,-1,0,2,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,-1,0,0,0,
-1,0,0,0,0,1,2,2,0,0,0,0,0,0,0,1,0,2,5,0,0,1,0,0,0,1,-1,-1,-1,-1,
-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,0,0,0,0,
0,0,0,-1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
 };
static unsigned short stb__consolas_bold_7_latin1_w[224]={ 0,2,4,4,4,4,4,2,4,3,4,4,3,3,
2,4,4,4,4,4,4,4,4,4,4,4,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,4,3,4,4,3,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,2,4,4,4,4,
2,4,4,4,4,4,4,3,4,3,4,4,4,4,4,4,4,2,2,4,4,4,4,4,4,3,4,4,4,4,
4,4,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
 };
static unsigned short stb__consolas_bold_7_latin1_h[224]={ 0,6,2,5,7,6,6,2,8,8,4,4,4,2,
3,6,6,5,5,6,5,6,6,5,6,5,5,6,5,3,5,6,7,5,5,6,5,5,5,6,5,5,6,5,
5,5,5,6,5,7,5,6,5,6,5,5,5,5,5,7,6,7,3,2,2,5,6,5,6,5,5,6,5,5,
7,5,5,4,4,5,6,6,4,5,6,5,4,4,4,6,4,7,8,7,2,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,7,5,5,5,
8,6,2,6,4,4,3,2,4,2,3,5,3,3,2,6,6,2,2,3,4,4,5,5,5,6,6,6,6,6,
6,6,5,7,6,6,6,6,6,6,6,6,5,6,7,7,7,7,7,4,7,7,7,7,7,6,5,6,6,6,
6,6,6,7,5,6,6,6,6,6,5,5,5,5,6,5,6,6,6,6,6,4,6,6,6,6,6,7,7,7,
 };
static unsigned short stb__consolas_bold_7_latin1_s[224]={ 133,253,161,111,98,75,80,166,4,12,71,
76,81,143,115,95,110,116,186,115,166,120,130,231,135,196,253,140,191,110,201,
144,118,106,226,154,221,216,236,164,211,176,90,206,131,126,121,125,181,83,171,
194,161,189,156,151,146,141,136,80,179,76,95,156,139,101,174,91,41,81,76,
149,66,61,66,51,46,21,26,31,207,184,36,11,199,1,31,16,246,212,241,
88,1,31,131,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,133,204,56,
222,238,243,9,169,147,159,251,41,85,143,46,152,100,16,105,90,126,105,100,
123,136,118,56,51,26,41,21,61,56,51,46,85,36,31,227,123,16,11,6,
1,248,243,238,233,217,223,46,51,93,61,71,66,103,41,36,108,113,163,86,
158,198,193,173,228,218,128,6,168,143,153,178,188,71,233,248,36,138,56,133,
208,213,203,183,61,65,148,21,26,70,21,26,16, };
static unsigned short stb__consolas_bold_7_latin1_t[224]={ 8,1,22,16,1,9,9,22,1,1,22,
22,22,22,22,9,9,16,16,9,16,9,9,16,9,16,9,9,16,22,16,
9,1,16,16,9,16,16,16,9,16,16,9,16,16,16,16,9,16,1,16,
9,16,9,16,16,16,16,16,1,9,1,22,22,22,16,9,16,9,16,16,
9,16,16,1,16,16,22,22,16,9,9,22,17,9,17,22,22,16,9,16,
1,1,1,22,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,8,9,1,
9,9,9,1,9,22,9,16,22,22,22,22,22,22,16,22,22,22,9,9,
22,22,22,22,22,16,16,16,9,9,9,9,9,9,9,9,1,9,10,10,
10,1,1,1,1,9,1,1,1,1,1,1,22,1,1,1,1,1,1,16,
1,1,1,1,1,1,1,17,1,1,1,1,1,16,9,9,16,1,16,1,
1,1,1,1,22,9,1,9,9,9,1,1,1, };
static unsigned short stb__consolas_bold_7_latin1_a[224]={ 62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_bold_7_latin1_BITMAP_HEIGHT or STB_FONT_consolas_bold_7_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_bold_7_latin1(stb_fontchar font[STB_FONT_consolas_bold_7_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_bold_7_latin1_BITMAP_HEIGHT][STB_FONT_consolas_bold_7_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_bold_7_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_bold_7_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_bold_7_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_bold_7_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_bold_7_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_bold_7_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_bold_7_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_bold_7_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_bold_7_latin1_s[i] + stb__consolas_bold_7_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_bold_7_latin1_t[i] + stb__consolas_bold_7_latin1_h[i]) * recip_height;
            font[i].x0 = stb__consolas_bold_7_latin1_x[i];
            font[i].y0 = stb__consolas_bold_7_latin1_y[i];
            font[i].x1 = stb__consolas_bold_7_latin1_x[i] + stb__consolas_bold_7_latin1_w[i];
            font[i].y1 = stb__consolas_bold_7_latin1_y[i] + stb__consolas_bold_7_latin1_h[i];
            font[i].advance_int = (stb__consolas_bold_7_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_bold_7_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_bold_7_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_bold_7_latin1_s[i] + stb__consolas_bold_7_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_bold_7_latin1_t[i] + stb__consolas_bold_7_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_bold_7_latin1_x[i] - 0.5f;
            font[i].y0f = stb__consolas_bold_7_latin1_y[i] - 0.5f;
            font[i].x1f = stb__consolas_bold_7_latin1_x[i] + stb__consolas_bold_7_latin1_w[i] + 0.5f;
            font[i].y1f = stb__consolas_bold_7_latin1_y[i] + stb__consolas_bold_7_latin1_h[i] + 0.5f;
            font[i].advance = stb__consolas_bold_7_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_bold_7_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_bold_7_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_bold_7_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_bold_7_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_bold_7_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_bold_7_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_bold_7_latin1_LINE_SPACING
#endif

