// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_15_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_15_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_15_usascii_BITMAP_WIDTH         128
#define STB_FONT_times_bold_15_usascii_BITMAP_HEIGHT         72
#define STB_FONT_times_bold_15_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_bold_15_usascii_FIRST_CHAR            32
#define STB_FONT_times_bold_15_usascii_NUM_CHARS             95

#define STB_FONT_times_bold_15_usascii_LINE_SPACING          10

static unsigned int stb__times_bold_15_usascii_pixels[]={
    0x80808040,0x08001000,0xb117e400,0x4040001f,0x00400108,0x02201002,
    0xd0f22150,0x07ee0ecc,0x0f2aaee2,0x0cfbee98,0x2a1b204c,0x6df6cc0f,
    0x8e40fc84,0x06c57506,0x26166d4c,0x6c0583bd,0x74d0fc40,0x24c0d983,
    0x24fa8388,0x321c86e8,0x3ea0fa86,0x3fb1ba24,0x21721a68,0x6a47c42b,
    0x3907d66c,0x0fcc2dc0,0x20cc274d,0x544c4c59,0xf907fe22,0x21b27989,
    0x83ff10fa,0x443f24fc,0x2e0da9e9,0x7d45880f,0xf9cf834b,0x83d80931,
    0x85d9a0fa,0xae8961fd,0x7fcc71fd,0x8fc37dc0,0xf30fa86c,0x2a6fb81f,
    0x37b3b6e6,0xb02f3be1,0xc80eff88,0xf10166ad,0xb341f107,0xb2c3f907,
    0x3ea29fab,0x4f87fa87,0x2a1f50d9,0x227fa87f,0x261c95c4,0x0dc6f8cf,
    0x2a07bfa6,0x20a2390a,0x219302fa,0x47f20576,0x9f15f539,0xf70ff114,
    0x21b2dd0b,0x70ff10fa,0x336638bf,0x27f71aea,0x741260fd,0xf9a4c07f,
    0x40be60f9,0x406c5a3c,0x3f2551fc,0xe8312fb8,0x7417ec0f,0x41f50d95,
    0x017e40fd,0x235d75f3,0x683f94f9,0x201fcc82,0x87f1d90d,0x9347983f,
    0x4e23f909,0x050fcafd,0xf06f87f5,0x83ea1b27,0x71ba23fa,0x424da21d,
    0x2390f95e,0x640f391a,0x90be3b21,0xb341f509,0xaa43f90b,0x052ae9af,
    0x407d7bb1,0x1f50d90f,0x0cdade98,0x574987e4,0x303b5d30,0x0b36fa69,
    0x1a7a624c,0x687e61a6,0x987ee13a,0xf7004c02,0x0d92d40b,0x200401f5,
    0x02004220,0x4c048810,0x214c0300,0x24c9a0e9,0x1540fbc9,0x7e400d44,
    0x2a61c09c,0x0000aa21,0x00000000,0x88440000,0x44ae340b,0x557102cc,
    0xaa880055,0xe8800060,0x005eeeee,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x08004000,0x20040000,0x10011000,0x44000200,
    0x30009889,0x362000df,0x7664c03f,0xbd892600,0x4c5fe985,0x2aa2ccac,
    0xbdd881ec,0x66d42cdc,0xcbed880d,0x16d6545d,0x81fbbdf3,0x81be1fbd,
    0x00fea06e,0x1b80fa7b,0x39127536,0x570f45fb,0x2637c57c,0x3e22e85f,
    0x46e88bf2,0x35cfe278,0xf52fcdbe,0x09b7c171,0x7d4c41e4,0x0746fc03,
    0x7d9fc4d0,0x37e63f50,0x8df1c860,0x2e2981fe,0x7f41fd2f,0x23be6381,
    0x6f8b7c7b,0x7ff05fb1,0x902623fb,0xe807fd7d,0x4415514f,0x07ecfea4,
    0x0fffe2e4,0x3fe61fa8,0xfb4fa800,0x2003fe23,0xb7c1defe,0x07fb36f8,
    0x7c57e6df,0x1fd53e26,0x321df970,0x27f715c3,0x1ffec1fd,0xb01bffd3,
    0x1007fa81,0x7fa9fadf,0x83fff100,0x7e49f36f,0xf9be6f80,0x1fd4fea6,
    0xb1bfb3e8,0xfb3fa8b0,0xf70df501,0xff30509f,0x260ceda8,0x1fe65fcc,
    0x23fe5ec0,0x320eddef,0x97e6f80f,0x7d4fea6f,0xfd14f983,0x7cc5881d,
    0x9aec0fb3,0xf801ba21,0x9817f41f,0x200ffc2f,0x7c3fd1fa,0xf01f9016,
    0x26f8fe2d,0x307f75f8,0x37fea5ff,0x29d05529,0x31c8aa4e,0x835c3c8b,
    0x417f45fa,0x85fa82e8,0x23647e64,0x203f206f,0x37c4cbde,0x033f77aa,
    0x3ab3bfee,0x3660365f,0x277ee0ea,0x32eb7a62,0xe9807ec0,0x220deaad,
    0x3b6601ba,0x56640ccb,0x2037a61c,0x01083fe8,0x00203ff3,0x1002040c,
    0x10060040,0x00402600,0x000400c0,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x4c4042a2,0x6ffd4099,0x5fea8081,0x20c43766,
    0xf71fffff,0xa93fee9f,0x219ff70e,0xdfb31fb8,0x04037663,0x08000110,
    0x87db3d50,0xd81df9dd,0x42ff543f,0xd8a63ffb,0xfdddf31f,0x8ff63fe8,
    0x2627ec28,0x06627dc2,0x02e80baa,0x8868806a,0x7cc7f75f,0x8bf60dd3,
    0x5c3ffbe8,0x54332ffa,0x544a8265,0x839bea6f,0x7dc1c7f9,0x3f6a0cc4,
    0x7405f902,0x413fd105,0x4c7f53fa,0x3f60bf3f,0x9c4fa822,0x00198ffc,
    0x5c7fe076,0x3fa071ff,0x89f70512,0xa82fb819,0x1ff302fd,0x5415ff30,
    0xdb87f53f,0x05fb00eb,0x7ec707ea,0x0f10019e,0x67e5d3f2,0x0edf5019,
    0x206627dc,0x7d5c42fb,0x209f9702,0xf55f886f,0x6c009c87,0x470b902f,
    0x3b21efe8,0xff304a80,0x809ff317,0x9f7039ff,0x42fb8198,0x35105f54,
    0x20df01ff,0x223fdcea,0x52a2cddf,0x80e882fd,0xfb0ffc43,0x7f405b05,
    0xf700ffa5,0x517ea01d,0x5dc5f701,0xb1c0cfca,0x500df07f,0xffffd87f,
    0x207f6fb1,0xfa83810c,0x203c0d41,0x003ee1fa,0x37cc09f1,0xf917dc12,
    0x6443ffff,0x7e86fcaa,0xb51fd401,0x7f5b32d8,0x4cdddd90,0x710dc0ce,
    0x88d00950,0xa8019005,0xf701bbdf,0x190bea05,0x27dc2fe8,0xbc893ae0,
    0xf50082bb,0x2000bfff,0x01001100,0x08002001,0x40eff4c0,0x98bea2fa,
    0x00001ffe,0x00000000,0x00000000,0x00000000,0x7c400000,0x13310fff,
    0x3bf66131,0x3ffe62cc,0x3ee19f51,0x33ecefec,0x83bb9dfb,0xf911ffd9,
    0x47bf6617,0xfc8aefd9,0x7fd4003f,0x6cc7ae0d,0x2a5fccef,0xdd70626f,
    0x1b37d49d,0x22fca7d4,0xb8931ffa,0xb8e29f91,0xf703fe4f,0x5fb81d8b,
    0x0ff12fdc,0x46fb80e4,0x162fdc1b,0x3b0fecdf,0x21c3f601,0xc8bf54fa,
    0x320848ef,0x24fb824f,0x8afdc2fd,0xb8bf700c,0xc81fe25f,0x838bfa01,
    0xdf0655fb,0xfff886d4,0x04e7d40c,0x21fe53ea,0x6400efe8,0x749f704f,
    0x34efdc0f,0xbf717ee0,0x03903fc4,0xb80bb7d4,0x0df058df,0x427ffecc,
    0xcefa83fe,0x03ff302e,0xdf704fc8,0xdf703dd9,0x2fdc07ff,0x3eeabbee,
    0x7ffffec7,0x02cfe83f,0x3e0dddf7,0x81fd1006,0x04fa82fb,0x6406fda8,
    0xf59f704f,0xf5bf701f,0x717ee03f,0x903fc4bf,0x207fa803,0x9be095fb,
    0x81f500fb,0x04fa80f8,0x204fe94c,0x29f704fc,0x95fb85fd,0x8bf701ff,
    0x81fe25fb,0x03fcc01c,0xf0c46bf7,0x0b887e4d,0x7d40e0b1,0xff992204,
    0x2e09f901,0xb87fd14f,0x703bf65f,0x225fb8bf,0x3007207f,0x22fdc0ff,
    0x4c11be1c,0x4edc3cff,0x81efd880,0xfff30cea,0x41efe983,0xff31efd9,
    0x647bf625,0xdfb11eff,0x227bf623,0x80103ffb,0x440affc8,0x0fecbffd,
    0x00803ff3,0x000005d3,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x20000000,0x84dbefe9,0x0ddcefd9,0x77f66774,
    0x205dfb30,0x7cc0ffd9,0x9dfb30cf,0x81fe6dd9,0x0a8807f9,0x4c418060,
    0x09809889,0xa7e41130,0xa7dc0ee8,0xff1246f9,0x5c05fb85,0x0ff5c4fd,
    0x3f4917ee,0x55b01fa0,0x0fbca85f,0x7fa9a72a,0x1e9da836,0xfc8b27a2,
    0x9f717f24,0x7ec31fe2,0x5c04fb85,0x3faa27f9,0x188afdc1,0xbf404dfa,
    0x22fe2198,0x17457c4f,0x0fd87e5f,0x54fb3f87,0x527e433f,0xf94fb8ff,
    0x203fea07,0xfe9c04fb,0xf707fa72,0xd9fd02eb,0x3d17e81f,0x2a5fc988,
    0xcacf982f,0xa82b3ea2,0x3e23f93f,0xf327e45f,0x7ef7dc1f,0x207fd00c,
    0xfa9c04fb,0xf707fa76,0x57e81fbd,0x0177e85f,0x7d4bf1b9,0x3a04fa84,
    0xfd9fd43f,0xfc93fa20,0x9f71fea4,0xdf903fe2,0x8e027dc0,0x83fd0cff,
    0x7e8195fb,0xecfe87f5,0x2fce7cc0,0xef88c3fe,0xf81fb830,0x744d4db3,
    0x5fc93f25,0x47fd27dc,0xf71c1ff9,0xbf71c509,0x57ee0ff4,0x3fabf409,
    0x2227dff4,0x2a0ee9df,0x27f545fe,0xcac98344,0xc87afa60,0xf703fa4f,
    0xfe83fe29,0x8bf72544,0x22f88e2b,0x02fdc1fe,0xfd0feafd,0x04000bf6,
    0x02004010,0x677f4c08,0x77ecc0ce,0x3fee1bdc,0xb33fdccd,0x23fb99ff,
    0x7d490ce9,0x3dfb10cf,0xbf93ff30,0x7fd4ffcc,0x00000001,0x00000000,
    0x00000000,0x00000000,0x00000000,0x44cc4000,0x26213199,0x33001331,
    0xa8622662,0x4cccc400,0x10263310,0x04c46633,0x00022331,0xd9000004,
    0x405ddddd,0x327f96fa,0x0bf2ff10,0xe88675c4,0x37662b9f,0x7fb37502,
    0x83fb3fe2,0xbbfdbfe8,0x2fd7f46e,0x7ddf2264,0x07885f30,0x1f4400bd,
    0x1d7ee3fa,0x2617d5fa,0xdfa80bec,0x417d9103,0x8fe8df31,0xf9bf42fa,
    0x57ec1f94,0xb076cc19,0xb7d43eef,0x7c39d8c8,0xdddddd95,0x5f713e65,
    0x7e833fb7,0x01fe45f5,0x7ec00fec,0x5fa0ff42,0xf8bf42fa,0x07ec3f74,
    0x56e5a8d8,0x33324869,0x1111ec3c,0xff100111,0x2fd0df53,0x16ed42fa,
    0x2e20bf50,0x427d41ce,0x7e85f57e,0xd87ee9f1,0x98ec9507,0x6c415123,
    0x0001b84a,0x213e2db0,0x2205f77e,0x36a20beb,0x40fb262f,0xbf470ff8,
    0xf8bf43fa,0x83ec3f94,0x8208a20b,0x401d4980,0x20e5c098,0x70391d41,
    0x500bf9bf,0x3bee7a65,0xdfc80370,0x93ff34dc,0x5cffc4bf,0xf13fe8ef,
    0x0000003f,0x551f4400,0x100b9db7,0x00000040,0x00000000,0x00000000,
    0x40962000,0x000000a8,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x0001ddd7,0x00000000,0x00000000,
    0x00000000,0x3332a000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__times_bold_15_usascii_x[95]={ 0,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0, };
static signed short stb__times_bold_15_usascii_y[95]={ 12,2,2,2,2,2,2,2,2,2,2,3,9,8,
9,2,2,2,2,2,2,3,2,3,2,2,5,5,4,6,4,2,2,2,3,2,3,3,3,2,3,3,3,3,
3,3,3,2,3,2,3,2,3,3,3,3,3,3,3,3,2,3,2,14,2,5,3,5,3,5,2,5,3,2,
2,3,3,5,5,5,5,5,5,5,3,5,5,5,5,5,5,2,2,2,7, };
static unsigned short stb__times_bold_15_usascii_w[95]={ 0,3,6,7,7,13,11,3,5,4,7,8,3,5,
3,4,7,6,7,6,7,7,7,7,7,7,3,3,8,8,8,7,13,10,9,10,10,9,8,11,11,5,7,11,
9,13,10,11,8,11,10,7,9,10,10,14,10,10,9,4,4,4,7,8,4,7,7,6,8,6,6,7,8,4,
5,8,4,11,8,7,7,8,6,5,5,8,7,10,7,7,6,4,1,5,8, };
static unsigned short stb__times_bold_15_usascii_h[95]={ 0,11,6,11,11,11,11,6,13,13,6,9,6,2,
4,11,11,10,10,11,10,10,11,10,11,11,8,10,7,4,7,11,13,10,9,11,9,9,9,11,9,9,10,9,
9,9,10,11,9,13,9,11,9,10,10,10,9,9,9,12,11,12,6,1,4,8,10,8,10,8,10,10,9,10,
13,9,9,7,7,8,10,10,7,8,10,8,8,8,7,10,7,13,13,13,3, };
static unsigned short stb__times_bold_15_usascii_s[95]={ 126,79,90,83,104,112,1,109,1,52,101,
88,97,118,122,13,18,94,26,26,101,1,91,49,80,61,123,45,21,113,38,
41,26,109,12,69,1,108,56,49,76,70,18,58,32,42,34,67,17,40,47,
33,37,83,72,57,26,97,22,57,99,62,82,67,113,83,103,91,116,98,96,
10,65,111,20,74,118,63,54,113,88,1,75,121,120,12,105,1,30,9,47,
15,13,7,118, };
static unsigned short stb__times_bold_15_usascii_t[95]={ 1,1,59,1,1,1,15,59,1,1,59,
38,59,68,59,15,15,27,27,15,27,38,1,27,15,15,38,27,59,59,59,
15,1,27,49,15,49,38,49,15,38,38,27,38,49,49,27,1,38,1,38,
15,38,27,27,27,38,38,49,1,1,1,59,13,64,49,15,49,15,49,15,
27,49,15,1,49,38,59,59,49,15,27,59,49,27,59,49,59,59,38,59,
1,1,1,64, };
static unsigned short stb__times_bold_15_usascii_a[95]={ 54,72,120,108,108,217,181,60,
72,72,108,123,54,72,54,60,108,108,108,108,108,108,108,108,
108,108,72,72,123,123,123,108,202,157,145,157,157,145,132,169,
169,84,108,169,145,205,157,169,132,169,157,121,145,157,157,217,
157,157,145,72,60,72,126,108,72,108,121,96,121,96,72,108,
121,60,72,121,60,181,121,108,121,121,96,84,72,121,108,157,
108,108,96,85,48,85,113, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_15_usascii_BITMAP_HEIGHT or STB_FONT_times_bold_15_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_15_usascii(stb_fontchar font[STB_FONT_times_bold_15_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_15_usascii_BITMAP_HEIGHT][STB_FONT_times_bold_15_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_15_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_15_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_15_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_15_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_15_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_15_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_15_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_15_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_15_usascii_s[i] + stb__times_bold_15_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_15_usascii_t[i] + stb__times_bold_15_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_15_usascii_x[i];
            font[i].y0 = stb__times_bold_15_usascii_y[i];
            font[i].x1 = stb__times_bold_15_usascii_x[i] + stb__times_bold_15_usascii_w[i];
            font[i].y1 = stb__times_bold_15_usascii_y[i] + stb__times_bold_15_usascii_h[i];
            font[i].advance_int = (stb__times_bold_15_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_15_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_15_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_15_usascii_s[i] + stb__times_bold_15_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_15_usascii_t[i] + stb__times_bold_15_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_15_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_15_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_15_usascii_x[i] + stb__times_bold_15_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_15_usascii_y[i] + stb__times_bold_15_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_bold_15_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_15_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_15_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_15_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_15_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_15_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_15_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_15_usascii_LINE_SPACING
#endif

