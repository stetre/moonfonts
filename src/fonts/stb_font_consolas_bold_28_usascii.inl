// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_bold_28_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_bold_28_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_bold_28_usascii_BITMAP_WIDTH         256
#define STB_FONT_consolas_bold_28_usascii_BITMAP_HEIGHT        110
#define STB_FONT_consolas_bold_28_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_bold_28_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_bold_28_usascii_NUM_CHARS             95

#define STB_FONT_consolas_bold_28_usascii_LINE_SPACING          18

static unsigned int stb__consolas_bold_28_usascii_pixels[]={
    0x00081555,0xed880020,0x2feca802,0x5ffffffd,0x3fffffea,0x00337be5,
    0x00de5440,0x8001cc80,0x54c00000,0x0055511a,0x00009a88,0x02aaa004,
    0x00022000,0x54401771,0x0355510a,0xd87ffa00,0x2fb8000e,0x01fffd00,
    0x4bffffa2,0x2ffffffe,0xbffffff5,0x017ffffc,0x3ffffee0,0x3fe2001f,
    0xffdb3001,0xe800019d,0x07ffe2ff,0xdffff880,0xffec9801,0xff13fdef,
    0x3220003f,0x400cffff,0xd05ffffa,0x27ffccdf,0xfe80f7e4,0x01dff91f,
    0x007ffdc0,0xc80ffffc,0xfd1cefff,0x263999bf,0x25ffdccc,0x00ffffdc,
    0xffdfffb0,0x3e6003ff,0xfffb800f,0x002fffff,0xfc8fff30,0x3fe2004f,
    0x700dffff,0xffffffff,0x07ffe27f,0x3fffa200,0xf100efff,0xb87ffbdf,
    0x3ffe21ff,0x837ffdc4,0xffd11ffe,0xfff5001d,0x1bff2009,0xfe82fff8,
    0xbff3001f,0x005ffd10,0x7d41bff7,0x3b2e606f,0xf901bcff,0xffffffff,
    0xff90003f,0x00fff889,0xffffdd10,0xdfff70df,0x27fff999,0x8001fff8,
    0xffbbeffd,0x21ff504f,0x0ffe25fd,0xfd87fff1,0xffe80fff,0x013ffe21,
    0x800bfff1,0xdff100aa,0x4007ffa0,0xff705ff9,0x05ff9809,0xfc883ff7,
    0x5fffffff,0x20efff88,0x4005fffa,0xfd80fff8,0xfd50003f,0x7ffc49ff,
    0xf13ffe85,0xff0003ff,0x837fd41f,0xe9bf27fb,0x3fff886f,0xe837ffdc,
    0x7ffcc1ff,0x03fff602,0xbff30000,0x4007ffa0,0xff305ff9,0x00ffe80b,
    0xffd89ff1,0x5fffffff,0xb80effc8,0x2e001fff,0xdff505ff,0x7ff44000,
    0x203ffee7,0xfff13ffe,0x7fcc0083,0x9837fcc7,0x2ebfb0ff,0x7fff01ff,
    0x3a01bd70,0x6ffc81ff,0x203fff70,0xeeeeeeed,0x09ff506e,0x4c007ffa,
    0xbff305ff,0x201ffcc0,0x3ffea6fe,0x2a8bfe9c,0xf104fff8,0x7f4007ff,
    0x0bffa01f,0x0fffc800,0x3fa0bffb,0x31fff13f,0x2209dffb,0x3ff20fff,
    0x3ef7fe04,0x204ff8bf,0xd0003fff,0xfff103ff,0x407ffd05,0xffffffff,
    0x09ff507f,0x4c007ffa,0xbff305ff,0xeb87fe40,0x27fcdedf,0x0bfe7ffc,
    0x201fff88,0xf5004ffe,0x5ffb80df,0x9fff2000,0xffd04ffe,0x3efffe27,
    0xd05fffff,0x3ffee9ff,0x3ffff200,0xff80dfb6,0xffd0002f,0x317ff603,
    0x76c01fff,0x7ffeeeee,0x3a09ff50,0xff3001ff,0x81bfe20b,0xffffb5ff,
    0x321ff79f,0x1ff98fff,0x803ffe60,0xfb005ffd,0xfff8807f,0xfff88000,
    0x7413ffe6,0xffff13ff,0x5fffdbff,0xffdfff50,0x7b71005f,0xff007fea,
    0x3fa0005f,0x1fff701f,0x8003ffe4,0xff907ffa,0x007ffa07,0xff02ffcc,
    0x37ff101f,0x77ffbdff,0x3ffee1ff,0x2a00ffcf,0x3f600fff,0xfff9806f,
    0x04ffc800,0xffffd990,0xe827ff45,0xffff13ff,0x1bffa21b,0x0f7fffec,
    0x04ff8800,0x0002fff8,0x3e603ffd,0x17ffa2ff,0x33ffd400,0x203fff73,
    0xf3001ffe,0x77fec0bf,0x93ff509b,0x55ff53ff,0x3ffa23ff,0x2e02ffff,
    0x3f600fff,0x4ffc806f,0x01fff300,0x7ffffff0,0xfa86ffd8,0xdfff13ff,
    0x981fff70,0x2a0ffffe,0xefd800aa,0x41ffe800,0xfd01efd8,0x1fffc03f,
    0x20007fff,0x3ffe7ffa,0x3ffa03ff,0x0bff3001,0x97fffe44,0x77fe8ffc,
    0x41ff55ff,0xffffffe9,0x0fffa82e,0x1017ff60,0x6c001fff,0xffe803ff,
    0xfffb80be,0x4ffffe61,0xf981fff8,0x3ffe61ff,0x3ffa5fff,0x017fd400,
    0x7dc1ffe8,0x3ffd06ff,0xf8a7ff40,0xf50001ff,0x1ffffcff,0x4007ffa0,
    0x75c05ff9,0x2ff92fff,0x73ff75ff,0xffd701ff,0xf98bffff,0x3ffa01ff,
    0x02ffdc04,0x201bfea0,0x3e201ffe,0xfffdcfff,0x3fff13ff,0x745fff10,
    0x4fff9dff,0x7c401fff,0x039ff94f,0xffc83ffd,0x1ffe81ff,0x7cd7ff20,
    0x3ea0007f,0x3fff2a7f,0x007ffa06,0xf902ffcc,0x3f6159ff,0xff94ff8e,
    0xff80ff71,0x223fffff,0xff103fff,0x2ffe807f,0x01ffe800,0x2e007ff4,
    0xdeffffff,0x3fff13ff,0x263fff10,0xfff70fff,0xfd80fff7,0xfffffd8f,
    0x220ffec1,0xfe82ffff,0x53ff201f,0x0001fff9,0x3fa0fff5,0x03ffd01f,
    0x4417fe60,0xefe80fff,0x2ffb4ff8,0x3fe207fc,0x746fffba,0xfff706ff,
    0x037fd401,0x405ffb80,0xff5002aa,0x7ffb1bff,0x2607ffe2,0xdff70fff,
    0x4fffffc8,0x3e6bfea0,0x545fe8bf,0xfffa80aa,0x201ffe81,0xfff13ffe,
    0x3fea0005,0x207ff907,0xf3001ffe,0x1bfe60bf,0xa7fc77f4,0x40bfd7fe,
    0xfffb0ff9,0x544fffb8,0x7ec04fff,0xff10003f,0x1000001f,0x89ffec13,
    0xffc81fff,0x3a1bfee7,0xf101ffff,0xfc9feabf,0x7ffc4006,0x101ffe80,
    0x7ffc5fff,0xfff50004,0x7413fea0,0xff3001ff,0x417fe60b,0xf7dff6fd,
    0x405ff5ff,0x1bff27fa,0xddffffd1,0x4c01ffff,0x20000fff,0x3f204ffc,
    0x7f40001e,0x83fff13f,0x3ea4fff9,0x7ffc41ff,0x543ff207,0xd71bf27f,
    0x0bff701b,0x7d407ffa,0x1bffa1ff,0x83ffd400,0xffd04ffa,0x17fe6003,
    0xfc82ffcc,0xffffffb7,0x8de41dff,0x9fff56fb,0xffffff10,0xfc801fff,
    0x7cc0004f,0xbfff507f,0x3ffe8000,0x955bfff1,0xff88dfff,0xffebacff,
    0x2ffa85ff,0x2ff4bfe2,0x2ea9fff3,0xfd00effd,0x1bff203f,0x0001fff7,
    0x3ea0fff5,0x03ffd04f,0x4c17fe60,0x1ff905ff,0xff93fff3,0xffffd81f,
    0x0effffff,0xfffff910,0xfff88019,0xffe80001,0x06fffb82,0x89fff400,
    0xffffffff,0xfffa81ef,0xffffffff,0x217fa23f,0x21fffffd,0xfff5fffa,
    0x7ff4019f,0x887ffd01,0xa8002fff,0xbff507ff,0x4007ffa0,0xff305ff9,
    0x44bfee0b,0x7ec06609,0xffffffff,0x3fff001e,0x017fee00,0x437fd400,
    0x0002ffe8,0xfd71fff4,0x809dffff,0xcfffffd9,0xf92fffc8,0xfff9101f,
    0x365ffd05,0xffe801bc,0x80fffb81,0xc8006ffd,0xbff307ff,0x4007ffa0,
    0xff505ff9,0x017fe209,0x7ff6dd40,0x6c001cef,0x740545ff,0x200002ff,
    0x01301fff,0x03555000,0x4c000662,0x08000009,0xd00004c0,0xfff983ff,
    0x09fff103,0x105ffe80,0xffd01fff,0x17fe6003,0xfb01ffe4,0xf880003f,
    0x3ee0001f,0x45fedfff,0x00006ffa,0x0002ffdc,0x00000000,0x00000000,
    0x3ffa0000,0x01bffe21,0xca83fff5,0x0ffff261,0x099effe8,0x13335ffd,
    0x3fee6662,0x3fff2665,0x07ffea01,0x3fe6016a,0x7fec0000,0x361fffff,
    0x400003ff,0xff70fff8,0x00dfffff,0x00000000,0x00000000,0x43ffd000,
    0xd800fffd,0x3fea1fff,0x05ffffff,0x97ffffcc,0x2ffffffe,0xbffffff5,
    0x02fffffc,0x7677ffe4,0x7fa806ff,0xfff70000,0x000003bf,0xffff7000,
    0x3ffeffff,0xffffffff,0x0002ffff,0x00000000,0x7f400000,0x05fff91f,
    0x43fffa20,0xfffffffa,0xffea800d,0xfffffd2f,0x3fffea5f,0x3fffe5ff,
    0x3fff2004,0x9804ffff,0x1800002a,0x00000000,0x7fffffdc,0xffffff7f,
    0xffffffff,0x0000005f,0x00000000,0x31ffe800,0xe88005ff,0x66e64c4f,
    0xaa98001b,0x55555550,0x2aaaaa21,0x0026aa2a,0x2f372a20,0x00000000,
    0x00000000,0x11111100,0x33333211,0xcccccccc,0x000001cc,0x00000000,
    0x0fff4000,0x0e200053,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x0003ffd0,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x0665c000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x20000000,0x55400008,0x4004c01a,
    0x2aaaaaa9,0x0002aaa0,0x5500dea8,0x06000015,0x401ddd50,0x22005eeb,
    0x800abcba,0x00988000,0x04000400,0x80018000,0x01300008,0xfd54ee88,
    0x3a0009df,0xffea83ff,0x22eeeeff,0x5ffffffb,0x003fff10,0x41bffe20,
    0x20002fff,0x7c407fd9,0x3ffe03ff,0xfffc8804,0xfb302fff,0x2a019dff,
    0x2efffffd,0xfffdc880,0xfdb302df,0x2a0019df,0x3dffffed,0xbffffd70,
    0x7ffed403,0xff882eff,0xffffffbe,0x3ffe8005,0x7fffffec,0x3ee3ffff,
    0x105fffff,0x20003fff,0xff07fff9,0x7dc0005f,0x6ffd807f,0x001fff50,
    0xfffffffb,0xfffff905,0xff905fff,0x0bffffff,0x7fffffdc,0xfffa85ff,
    0x201effff,0xffffffd8,0x3fa20fff,0x4fffffff,0x7fffff44,0xff884fff,
    0xffedffff,0x7ff4002f,0x26bffee3,0x21cdfffb,0x5ffd9998,0x003fff10,
    0xf827ff40,0x2e0002ff,0xffa807ff,0x05ffd81f,0x31cfffa8,0xffffc815,
    0x41ffffff,0xffecdefc,0xfffc83ff,0x45fffeff,0xfecefffb,0xfff107ff,
    0xffffdfff,0x5efffec1,0x361fffec,0xfeeeffff,0xffff884f,0x0dffd10d,
    0x3a3ffe80,0x2ffdc1ff,0x882ffe40,0x40001fff,0x0bffe02a,0x07ffb800,
    0xf889fff0,0xffc802ff,0xdfff8805,0x317ffee0,0x8dfff101,0x20affff9,
    0x2fffc3b8,0x360fffea,0x5441dfff,0x20bffe0d,0xfff13fff,0xf1031019,
    0xfff70dff,0x3ffa1001,0xf103ffe3,0xbff900ff,0x887ffe20,0x7fc00000,
    0x3ba2002f,0xeeefffee,0x3ffe41ee,0x6c01ffea,0xffd803ff,0x01fff706,
    0xfd1bff20,0x3ee001ff,0x8fff907f,0x2004fff9,0xfc80fff8,0x03fff53f,
    0x81fff880,0xd881fff9,0x3ffffffe,0xff307ffe,0x0bff900d,0x3aa3ffe2,
    0xeea83fff,0xff04eeee,0x5eed885f,0x3fffffe2,0x42ffffff,0x3f62fff8,
    0x7ffd004f,0x209fff00,0x9003fff8,0x7ffcc9ff,0x13ffa003,0xfb0fffe4,
    0x7c4001ff,0x7ffc43ff,0x007fff52,0x881fff88,0x7fe42fff,0x3fffffff,
    0x74477ff6,0xffc804ff,0xf9fff105,0xb89fffff,0x05ffffff,0x7f445fff,
    0x3bba21ff,0xeeeefffe,0x15ffd81e,0x3a003fff,0x7fc403ff,0x13ffa01f,
    0xb8bffe20,0x3e000fff,0x7ff442ff,0x13ffe2ff,0x33fff600,0x266ffd88,
    0x001cffff,0xf103fff1,0x7ffdc3ff,0x3fffccce,0x3fffffe2,0xfc800eff,
    0xffff105f,0x1ffffbff,0x7fff7754,0x6c5fff05,0x7dc01fff,0x3fea007f,
    0x206ffb8f,0xefffeeed,0x3e65eeee,0x3ff600ff,0xffdccc85,0x03ffe43f,
    0xfa87ffe0,0xf13fffff,0x555445ff,0x7ff442aa,0x40efffff,0x2dfffffd,
    0x40fffc40,0xff10fff9,0x47ffd0bf,0xfffffffb,0xbff9000c,0x37fffe20,
    0x405fff30,0xfff05ffc,0x00bfff25,0xf001ffee,0x07ffd5ff,0x7ffffff4,
    0x2a7fffff,0x3f600fff,0xfffff86f,0x37fec0cf,0x21fff100,0xffddfffd,
    0x4c3fff34,0x40ffffff,0xffffffd8,0xffffd880,0xff103fff,0x4fff903f,
    0xfe80fffb,0x26dff13f,0x7e40009a,0xdfff105f,0x6407fff0,0x5fff05ff,
    0x2007fff5,0x64007ffb,0x00fffeff,0x3fffbbb6,0x2e5eeeee,0x3f600fff,
    0xfffff86f,0x3ffa3fff,0x3ffe6006,0xfb3fffea,0x87ffea9f,0x0ffffff9,
    0x7fffff4c,0xffd700ef,0xf109ffff,0xfff983ff,0x7417ff24,0x0dff33ff,
    0x0bff9000,0x3a07ffe2,0x3ff203ff,0xff9fff05,0x7fdc009f,0x7ffc4007,
    0x7f4004ff,0x7ffd403f,0x817ff600,0x2fffea98,0x4400fffb,0x1effffff,
    0x7fccfffa,0x3eeaa22f,0x3ffe60ff,0x0ffffead,0x3ffff660,0x6fffc42f,
    0x46fffcaa,0xffd04ffe,0x37bffe27,0x9002bccc,0x3fe20bff,0x03ffe81f,
    0x7fc17ff2,0x4007ffff,0xd8007ffb,0x4001ffff,0x7cc03ffe,0x3ffa01ff,
    0xbffd1003,0x8003fff2,0xe84fffff,0x0fffe2ff,0xfd07ffc4,0x4fffc89f,
    0x5fffd880,0x7fffffc4,0x7fc1efff,0x47ffd04f,0xfffffffb,0x7e401eff,
    0x3fff105f,0x6407ffd0,0x9fff05ff,0x5c009fff,0xfa8007ff,0xfe8005ff,
    0x7ffc403f,0x05fff103,0xfbb7fe40,0x3fa003ff,0xfff882ff,0x441bffe1,
    0xfff50fff,0x801bff60,0x7fc46fff,0x04efffff,0x3fa09ffd,0x3bfff23f,
    0x06ffffee,0xf882ffe4,0x3ffe81ff,0x7c17ff20,0x2fffcaff,0x00fff700,
    0x003fff50,0xd007ffd0,0x3fee0dff,0x3ff6000f,0x01dfff35,0x5c1bff20,
    0x7ffe46ff,0x70fff881,0x3fea0dff,0x17ffa007,0x0333fff1,0xf50dffb0,
    0x3bfee7ff,0x01fffb80,0x7c417ff2,0x3ffe81ff,0x7c17ff20,0x3fffd2ff,
    0x05fff500,0x037ffc40,0x803ffe80,0x7d44fffa,0x3ee004ff,0x3fff23ff,
    0x3e23a81e,0x7ffcc4ff,0x17fffc43,0x7dc3ffe2,0x5ffc81ff,0x3fea0155,
    0x0fffc43f,0x43fff700,0xfd3ffff9,0x3ffe207f,0x417ff202,0xfe81fff8,
    0x17ff203f,0xff897ffc,0x7fc400ff,0x21caacff,0x0fffe988,0x07ffd000,
    0x3bffffa0,0x220ffffe,0xfeccccce,0x3fe20eff,0xffeeffff,0x5f7ffec5,
    0xf706fffc,0xfdbdffff,0x3ffe61ff,0xfffdaace,0xb9ddff92,0x881ffffd,
    0x22001fff,0xffdcffff,0xdffd3fff,0xc83fff20,0xcfffeccc,0x3fff13cc,
    0x6647ffd0,0xccfffecc,0x545fff3c,0xfc806fff,0x32ffffff,0x05ffffff,
    0x01fff400,0xfffffe88,0x7fc41eff,0xefffffff,0xffffe980,0x7445ffff,
    0xefffffff,0x3fffee00,0x20ffffff,0xfffffffb,0x3fff24ff,0x1fffffff,
    0x001fff88,0x7fffffdc,0xff73ffce,0xffdb9bff,0xfffff87f,0x16ffffff,
    0xffd03fff,0x7fffffc7,0xff6fffff,0x4fffc85f,0xfffffb80,0xdffff32f,
    0xffe80003,0x3ff22003,0xf880cfff,0x2dffffff,0xffffeb80,0xfff902df,
    0x366009df,0x2dffffff,0xfffffea8,0x7fff5c2e,0x100cffff,0x50003fff,
    0xf51bffff,0x7fffe47f,0xf82effff,0xffffffff,0x3fff16ff,0x7fc7ffd0,
    0xffffffff,0xd05fff6f,0x26007fff,0x5eec4199,0xffd00002,0x02620007,
    0x02666620,0x00098800,0x88000262,0x26600199,0x13333001,0x002aaa00,
    0x10009880,0x0579b997,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00800000,0xdd500200,
    0x9ddddddd,0xeedcb880,0x77777545,0xdd91eeee,0x43bba207,0x74c05eed,
    0x7ddd31ee,0x98bbbaa0,0xcdeeeeee,0x01bdd701,0xddb2f75c,0xdddddddd,
    0x3bbb23dd,0x541ddb03,0x77442eee,0x3bbbae5e,0x5eeeeeee,0xdb005dd5,
    0x3bbbba6b,0xb5eeeeee,0xdddddddd,0xfb7103dd,0xd7007dff,0xf707dfff,
    0xffffffff,0x3fff620b,0x7fdc6fff,0x2fffffff,0x3e209ffd,0x3fff91ff,
    0x363ffe40,0xffe80fff,0x7ffffcc7,0x440effff,0xff103fff,0x7ffff47f,
    0xffffffff,0x01ffffb2,0x7fe43ffd,0x3fffd45f,0xfffffff9,0x3eedffff,
    0x56ff803f,0xffffffff,0x3ffedfff,0xffffffff,0x7ffff542,0xfd306fff,
    0x1dffffff,0x7fffffdc,0xff985fff,0x46ffffff,0xfffffffb,0x09ffd2ff,
    0x7cc7ffe2,0x3ffa03ff,0x227ffcc4,0x7cc2fffa,0xffffffff,0x07ffc85f,
    0x7f41fff7,0xffffffff,0xfffb2fff,0x43ffd07f,0x7ec7fffc,0x3fff27ff,
    0xffffffff,0xf007ff56,0x3fffeadf,0x6fffffff,0xdfffdddb,0x7fc43ddd,
    0xffffefff,0xdefffe84,0x3ee4fffe,0x999999cf,0x5ffffc40,0xfff00009,
    0x4413ffa5,0x3ffe1fff,0x05fff105,0x7f41fffb,0x0fff986f,0x81fffd51,
    0x7c43fff8,0xfff803ff,0x3ffff602,0x321ffe86,0x3fe2ffff,0x2aaa67ff,
    0xfffbaaaa,0xf007ff54,0x266662bf,0x2fffd999,0xa805fff0,0x3ffe61df,
    0x217ffdc7,0xff70fffc,0x7ffe4009,0xfff80000,0x2209ffd2,0x3ff21fff,
    0x01fff507,0x3ea9fff1,0xfff982ff,0x417ffdc0,0x7fdc6ffd,0x05fff007,
    0x17ffffec,0xefd87ffa,0xfbff54ff,0x3fee001f,0x009ff50f,0xff300bff,
    0x17ffc0bf,0xfffb80c0,0x2217ff60,0x9ff73fff,0x01fffc00,0xd2fff800,
    0x3fe209ff,0x07ffea1f,0xfc817ff6,0x05ffe9ff,0xf881fff3,0xfff882ff,
    0x007fff12,0xfd80bffe,0x7f46ffdf,0x3f7bf61f,0x1ff9df97,0x997ffe00,
    0x88aa24ff,0xffe804ff,0x0bffe00f,0x0fffa800,0x7ec0fffe,0x009ff74f,
    0x0087ffe6,0x74bffe00,0xfff104ff,0x427ffc43,0x3e203fff,0x01ffffff,
    0xfa81fff3,0xdffb01ff,0xf801ffee,0x3ff602ff,0x3fa1fffa,0x3ebbfa1f,
    0xffcbff9f,0x1fffb801,0xffc93fe6,0xc809ff10,0x7fc02fff,0x3ee0002f,
    0x82fff47f,0xfff75ffc,0xb817bfff,0xfffebfff,0x7ffc003e,0x2209ffd2,
    0x7fec1fff,0x007ffcc6,0x17ffffee,0x710fff98,0x7c40bfff,0x03ffeaff,
    0xd80bffe0,0x25ffcaff,0x37fa1ffe,0xb9ffcff8,0xfff801ff,0xfd27fc45,
    0x813fe27f,0xf805fff9,0x3a0002ff,0x7ffec5ff,0xf76ffd80,0xffffffff,
    0x7ffffdc1,0x00efffff,0x3fa5fff0,0x3fff104f,0x320fffb8,0xffd006ff,
    0x7fcc01ff,0xdfffffff,0x7fffec00,0x7ffc007f,0x22bff602,0x3ffd1fff,
    0xfffeaff4,0xb803ff76,0x7fc41fff,0x22bfff15,0x3ffa03ff,0x2fff800f,
    0x3fff9000,0xcdffffb8,0x957ffffc,0xffffd999,0x3ffff21d,0x4ffffdce,
    0x3a5fff00,0xfff104ff,0x22fff883,0xf8804ffe,0x2602ffff,0xefffffff,
    0xffff3001,0xfff8007f,0x6cbff602,0x43ffd4ff,0x9fff75ff,0xfd00bfee,
    0x5d7fe0bf,0xff98ffff,0x05fff903,0x000bffe0,0x6c13ffea,0xffffffff,
    0x7ec406ff,0x3fff92ff,0x007ffe88,0x3ffa5fff,0x03fff104,0x3fe2bffd,
    0xfffc801f,0x3fe606ff,0x06fffecf,0x01bfff60,0xd80bffe0,0x1fff32ff,
    0xaffc3ffd,0xff71fff9,0x0fffd405,0xfdfb5ff8,0x305ff35f,0x7c009fff,
    0x7cc002ff,0x7fdc06ff,0x5ffedfff,0x74fff980,0x3fe60fff,0x2fff801f,
    0x3e209ffd,0x7ffc80ff,0xf300fff5,0x07fffdff,0x7d43ffe6,0xff3003ff,
    0xfff0007f,0xd17fec05,0x43ffd7ff,0xa9bfe4ff,0x3ffa03ff,0x3e3bfe06,
    0xff9cffaf,0x00fffe82,0x800bffe0,0x000efff9,0x27ff4331,0xf55fff80,
    0x3ffe20ff,0x97ffc401,0xff304ffd,0x27ffe60f,0xfd804ffc,0x0fffe8ff,
    0x320fff98,0xff000fff,0xfff0005f,0x517fec05,0x23ffdfff,0x8b2a4ff8,
    0xff503ffa,0x577f405f,0xff5ffb7f,0x02fffc83,0x8017ffc0,0x000efff9,
    0x007ffe20,0x7ccfffe6,0xfff982ff,0x8fffcc00,0xff505ffc,0x7dfffc0d,
    0x7fd402ff,0x09fff53f,0x7cc1fff3,0xfff004ff,0x5fff0005,0x3a17fec0,
    0xf11fffff,0x3ffa809f,0xe80dffd0,0xff74fdef,0x7fcc3ff9,0xfff8004f,
    0xdfff9802,0x7fec0000,0xfffe8806,0x3a1bffa1,0x3606e6ff,0x3ffee7ff,
    0x204ffe81,0x07fffffc,0x7f47ffe8,0x7ffcc1ff,0x007ffec0,0x40017ffc,
    0x3f602fff,0x7fffdc2f,0x809ff31f,0xffa84ffa,0x7ffec02f,0xfffff12f,
    0x0077ff41,0x2017ffc0,0x0005fff9,0xb1fffed4,0xffffb99b,0xefffa89f,
    0x22fffecc,0xffeccefc,0x67fffc4f,0x00fffecb,0x17ffffea,0x987fff70,
    0x7fcc6fff,0x1fffd40f,0x0017ffc0,0xfb017ffc,0xffff885f,0x807ff31f,
    0xffe84ff9,0x7fffd806,0xb87ffff4,0xffffffff,0xdddb7fff,0x3ddddfff,
    0x7fffffc4,0x6c6fffff,0xffffffee,0x7fffff44,0xffb04fff,0x89ffffff,
    0xfffffffc,0x7fffd40e,0x802fffff,0x203fffff,0xfb06fff8,0x7ffcc5ff,
    0x807ffe80,0xf8002fff,0x3ff602ff,0x1ffffc82,0xf9807ff3,0x17ffd45f,
    0x22fffe40,0xf90ffffb,0xffffffff,0x3fffefff,0x2fffffff,0x3fffffe6,
    0x7c6fffff,0x3fffffff,0xffffffe8,0x7ff5c00c,0xfda81eff,0x2203ffff,
    0x0dfffffd,0x1ffffb00,0x81fffe40,0x3e66fff9,0xfffb80ff,0x017ffc03,
    0xb017ffc0,0xfff105ff,0x00ffea3f,0xffe8bff3,0x5fff9006,0x327fff88,
    0xffffffff,0xffff7fff,0x5fffffff,0x7fffffcc,0x7c6fffff,0x00bcefff,
    0x40006662,0x26600198,0x00cc4000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x40fbb200,0x9100eee9,
    0x3baa0fff,0x6eeeeeee,0x3bbbbbaa,0xdd91eeee,0x0159bddd,0x9db17b20,
    0xeeeeee98,0xd9000bce,0x74c01ddd,0xeeec80ee,0xdddddd11,0xd900039b,
    0xee981ddd,0x0000000e,0x004c4000,0x00022000,0x04ffd800,0xf701fff3,
    0x3ee0ffff,0xffffffff,0x3ffffee7,0xfd1fffff,0xffffffff,0xf8dfd007,
    0x7fffcc4f,0x02ffffff,0x03fffff8,0xf503ffe6,0x7ffc49ff,0x1effffff,
    0xfffff500,0x00fff981,0x00009d10,0xfd710be6,0x903bffff,0x3b6203df,
    0x4c00deff,0x85ffffec,0xff304ffd,0x7fffdc1f,0xfff707ff,0x4fffffff,
    0xfffffffb,0xfffd1fff,0xbfffffff,0x3e25ff80,0x77ffcc4f,0x0fffffee,
    0x3ffffea0,0x83ffe605,0x7c46fff8,0xffffffff,0xffe800ff,0x7fcc0fff,
    0xffe8800f,0x3ea0000d,0x3ffea1ff,0x22ffffff,0xfa86fffb,0x2fffffff,
    0xffffff70,0x09ffb0ff,0x7cc3ffe6,0x07ffefff,0x2e00fff7,0xffd007ff,
    0x7fffd447,0xf993fe02,0x07ffcc3f,0xc80ffff2,0x207ffeff,0x3f20fff9,
    0x7ffc41ff,0x17fff221,0xfffdff70,0x00fff981,0x01dfff90,0x3dfff900,
    0x5d566fd4,0xffb0ffff,0x7ffc41ff,0x0fffeabe,0x777fffe4,0x4ffd87fe,
    0x741fff30,0x07ffa8df,0x2e00fff7,0xffd007ff,0x8dfff107,0xcceffcca,
    0xf33cdffd,0x9fff01ff,0x7fd7ffc0,0x1fff302f,0x220fffea,0xffd81fff,
    0x27ffe207,0x7fcc0fff,0x3fee000f,0x3f6001ff,0x80440dff,0xff71fff8,
    0x84ffd8df,0x3fe63ffe,0x6c1c41ef,0xfff304ff,0xfff50d41,0x401ffee0,
    0xfd007ffb,0x3fff207f,0x3fffff61,0x6fffffff,0xff01fff3,0x5ffe607f,
    0xff304ffe,0x0bffd11f,0x2a07ffe2,0xffb00fff,0x981fff17,0x54000fff,
    0x4402ffff,0x0004fffe,0x6f5c7ffd,0x207ffe20,0x3ff65ffb,0x3ff6000f,
    0x01fff304,0xfb83ffd4,0xfff7007f,0x40fffa00,0x3f62fff9,0xffffffff,
    0xfff36fff,0x00fffa81,0x3ff2bff7,0x91fff306,0x3e201fff,0xfffa81ff,
    0xf16ffa80,0xfff981ff,0xffe98000,0xffff303f,0x32aa2007,0xa803fffc,
    0xaaaaafff,0x3ffa6ffc,0x77fec004,0xffdccccc,0x1ffea00f,0xb803ffdc,
    0xcccccfff,0x40fffa4c,0xfb83fff8,0x261ff21f,0xfdbabfff,0x3ffa03ff,
    0x303fff32,0x5fff7fff,0x40fffc40,0xff887ffc,0x81fff11f,0x0000fff9,
    0xa8bfffb1,0xa801ffff,0xfffffffe,0xfffb803f,0xffffffff,0x000fffe7,
    0xfffffffb,0x401fffff,0xff707ffa,0xbfffffff,0x7fffffdc,0x3ffa7fff,
    0x213ffe03,0x1ff60ffb,0x3fffffe6,0x3e203fff,0x0fffe0ff,0x3fffffe6,
    0x0fffc405,0x3217ffea,0x3ffe24ff,0x007ffcc0,0x57fffa00,0x801ffff9,
    0xeefffffb,0xfc803fff,0xffffffff,0x7fff17ff,0xffffd800,0xffffffff,
    0x41ffea00,0xfffffffb,0x3ffee5ff,0x27ffffff,0x3fe03ffe,0x747fc84f,
    0xffff986f,0x0effffff,0x7ec6ffa8,0xefff985f,0x3e200fff,0xffdccdff,
    0x7ffcc0ff,0x303ffe20,0x40001fff,0x2e0dfffc,0x2201efff,0x7f40dfff,
    0x6ffa803f,0x027ffc00,0x2677ff60,0x0fffa999,0x5c1ffea0,0xcccccfff,
    0x27ffee2c,0x3a199999,0xfff103ff,0x3ff66627,0x19eff999,0x5c43ffe6,
    0xfd85fffd,0x07ffdc4f,0x3febffe6,0x3ffe205f,0x1effffff,0x7c42ffe8,
    0x7ffcc0ff,0xffd88000,0xffff504f,0x03ffea05,0x2c98fffa,0x0007ffcc,
    0x4001fffd,0xff304ffd,0x3ffd401f,0x7007ffb8,0x3fa00fff,0x3fff303f,
    0x3fffffee,0x0fffffff,0xfb01fff3,0xbfff81ff,0x2fffa999,0x7dc7ffcc,
    0xfff103ff,0x209dffff,0xccccfffa,0x33ccfffc,0x98001fff,0x4c03fffe,
    0xfb83fffe,0x7ffec1ff,0x44bfff53,0x2e005fff,0x8180efff,0xff304ffd,
    0x3ffd401f,0x7007ffb8,0x3fa00fff,0x1fff903f,0x3fffffee,0x0fffffff,
    0xf501fff3,0x7ffcc3ff,0xffffffff,0xe87ffcc4,0xff880fff,0xfb8019af,
    0xffffffff,0xff36ffff,0x7fd4001f,0xfd1002ff,0xfff98bff,0xffffebbe,
    0x41ffffb3,0xaabefffb,0x7ff41ecb,0x0ffeceff,0xf9827fec,0x3fea00ff,
    0x00fff707,0x7401ffee,0xfff883ff,0x37feea24,0x2acffbaa,0x2e03ffe6,
    0x3ff20fff,0xffffffff,0x87ffcc7f,0xf885fff9,0x3ee001ff,0xffffffff,
    0xff36ffff,0x3fee001f,0xfd8001ef,0x3ff60eff,0xffcfffff,0xb0ffff93,
    0xffffffff,0xfffe983f,0x6c0fffff,0xfff304ff,0x83ffd401,0xf7007ffb,
    0x3ffa00ff,0x07fffd43,0xff31ffc4,0x81fff305,0x7f47fff9,0xcaaaaacf,
    0x3fe61fff,0x0ffff20f,0x4003fff1,0xaaaaaaa8,0x32abfffb,0xd1001fff,
    0x40001dff,0x3622fffb,0xfa8dffff,0x07ffd13f,0x3fffffaa,0xffd700ef,
    0xffb09fff,0x83ffe609,0xffffffff,0xfff77fff,0x3bffee00,0xd1eeeeee,
    0xfffdddff,0x3fe607ff,0x2607fea2,0xfeeeefff,0x3fe22fff,0x9fff100f,
    0xf107ffcc,0x7fc41fff,0x2200001f,0x7fcc0fff,0xeeeeeeef,0x00017a23,
    0x998817d4,0x20013000,0x4c0019a9,0x13ff6009,0xff07ffcc,0xffffffff,
    0x01ffeeff,0x7fffffdc,0xffd1ffff,0x3dffffff,0xf717fd40,0xffff301f,
    0x87ffffff,0x7ec06ffb,0x03ffe66f,0x7c4dfff5,0x200001ff,0x7cc0fff8,
    0xffffffff,0x0000044f,0x00000002,0xd8000000,0xfff304ff,0x7fffffc1,
    0xf77fffff,0x3fee00ff,0xffffffff,0xbdffffd1,0x3ff70059,0xff983fe4,
    0x0bdeffff,0x5c03ffd8,0xfff30fff,0x27fffb01,0x0001fff8,0x303ffe20,
    0xffffffff,0x000009ff,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x80000000,
    0x09880008,0x80008800,0x04040008,0x44019880,0xeec80eee,0x401ddd52,
    0x3bb25eeb,0x90eec801,0xdddddddd,0x6f76c3dd,0x01eee980,0x00000aa6,
    0x5100776c,0x55555555,0x2aaa2355,0x2a235551,0x5e5440aa,0xfda80001,
    0x2a00dfff,0x1efffffd,0x7fe4bbaa,0xa77441ef,0x443fffea,0x35ffb9ee,
    0xfe803bfd,0x3ffe201f,0xf13ffe81,0x7ffc07ff,0x200fff64,0x3fff67fe,
    0x1fffffff,0x3a17ffe6,0x3fe405ff,0x00dfe880,0x8817ffee,0xffffffff,
    0xfff14fff,0x7cd3ffa7,0x3ffa21ff,0x03cc84ff,0x7fffffe4,0xfffd83ff,
    0x2e2fffff,0xffffecff,0x3bfe21ff,0x4ffffffb,0x3fff3fe2,0x07fffebf,
    0xf100fff4,0x7ffd03ff,0xfa837fec,0x13fee0ff,0xffd9ffe0,0xffffffff,
    0x917ffe40,0x64301fff,0x7e40227f,0xdff105ff,0x3fe205ff,0xffffffff,
    0x6cfffe4f,0x1fff14ff,0x7fffffe4,0xc813fe65,0xfffdffff,0x3ffee0ff,
    0x22dbaaad,0xdefffffb,0x3fe25fff,0xfffdffff,0x9ffff10f,0xffdbffff,
    0x00fff403,0xfd03fff1,0x0fffd47f,0x3ea2ffec,0x2ffc405f,0x81fffe40,
    0xff98fffe,0xf74fa82f,0x7ec17ead,0xffc80fff,0x26606fe8,0x99999999,
    0x6cbffe09,0x1fff13ff,0x7fdd77fc,0x02ffdadf,0x5c4bfff1,0x3ff65fff,
    0xffff7006,0xf13ffdc5,0x3e61bfff,0x7fff12ff,0x7fd5bff6,0x807ffa03,
    0xfe81fff8,0x227ffc3f,0x7cc2fff8,0x4c7ff66f,0x7fd404ff,0x3ffe204f,
    0xfd04ffed,0xff9df9df,0xffff305f,0xf53ff983,0xf800007f,0x47ff92ff,
    0x93fe67ff,0xfffffff9,0x20fff900,0x3ff67ffd,0xfffb801f,0x887ffcc3,
    0xfff86fff,0x7ecdff13,0x409ff32f,0x3e201ffe,0x3ffe81ff,0x3ea3ffe4,
    0x27ff887f,0x7ff53fff,0x037ffc40,0x77ffffd4,0xffff9100,0x5c05bfff,
    0x37f40fff,0x00003ff6,0xff91ffe8,0x9913ffc5,0xfffff983,0x413ff602,
    0xff91fffb,0x2e017bff,0xccc886ff,0xd03fff10,0x97fe27ff,0x9ff30ffd,
    0x3ffbbbb6,0x11eeeeef,0xffd03fff,0x22fff887,0xfff04ffd,0x2adfff51,
    0x3ffa02ff,0xfffb000f,0xffb1003f,0xff3003ff,0x4c2ffa8f,0x7ffc45ff,
    0xffffffff,0x7dc7ffa4,0x001bfe2f,0xfe801595,0x5fff303f,0x7ffffff4,
    0x037fdc1d,0xd03fff10,0x97fe27ff,0x9ff30ffd,0x3ffffffe,0x12ffffff,
    0xffd03fff,0x22bffb07,0xffd01fff,0x73ffffb3,0x3ff203ff,0x3ff6002f,
    0x7f5402ff,0x00cfffff,0xff88fff2,0x445ff905,0xffffffff,0x8aa64fff,
    0x0aaa0aa9,0xfff80000,0x85fff104,0xffffffeb,0x801bfee3,0xfe81fff8,
    0x6cbff13f,0x29ff30ff,0xffffffff,0xf12fffff,0x7ffd03ff,0xf71fff50,
    0x57fec0df,0xfccffdff,0x4fffb80f,0x3fffee00,0xfffd00ff,0x3fffddfb,
    0x22fff5d4,0xdd101eea,0x6666644b,0x02cccccc,0x55544000,0x3ffa0001,
    0x01fff306,0x3ffffae6,0x400dff70,0xfe81fff8,0x6cbff13f,0x09ff30ff,
    0xf100fff4,0xfffa83ff,0xfd5fff03,0x6ffe407f,0xfdffe9ff,0x05fff987,
    0x3f7ffe60,0x1df705ff,0x89beedf7,0x0003ffff,0x00000000,0x04fffc80,
    0xfd83dfb1,0x7ffb80ff,0x23fff900,0x22006ffb,0xffe81fff,0x7ecbff13,
    0x409ff30f,0x7fc01ffe,0x3fffe63f,0xffdff903,0x7ffd401f,0xdffff97f,
    0x00fffe88,0x2edffd10,0x5c703fff,0xcd88667f,0x0000000a,0x20000000,
    0xfd84fffa,0x7ffd47ff,0x93ffe60c,0x47ffee00,0x22006ffb,0xffe81fff,
    0x7ecbff13,0x409ff30f,0x7f401ffe,0xffffddff,0xffff103f,0xfff9809f,
    0xbffff34f,0xffffffd8,0x7ec2ffff,0x3fffa1ff,0x003fe401,0x00000000,
    0xd1000000,0xffff89ff,0x7ffff41f,0x20ffffdd,0xfba9abee,0x1bfee7ff,
    0x81fff880,0xbff13ffe,0xff987fec,0x007ffa04,0xdffffff5,0x7ec07ff9,
    0x7c401fff,0x3ffa1fff,0x7ffffc4f,0x22ffffff,0x7cc3fffa,0x154c06ff,
    0x00000000,0x00000000,0x3ffa0ccc,0x7ffcc0ff,0x42ffffff,0xfffffffe,
    0x1bfee1ff,0x81fff880,0xbff13ffe,0xff987fec,0x007ffa04,0x237fffea,
    0x3ea03ffa,0xfff006ff,0x42fffc8f,0xffffffff,0xfff12fff,0x13ffee0d,
    0x00000000,0x00000000,0xfff30000,0x3fff2207,0xffd80dff,0x41dfffff,
    0x22006ffb,0xffe81fff,0x7ecbff13,0x409ff30f,0x4cc00198,0x00000000,
    0x00000000,0x00000000,0x00000000,0x10000000,0x02620013,0x00ccccc0,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_bold_28_usascii_x[95]={ 0,5,3,0,1,0,0,5,3,3,1,1,2,3,
4,0,0,1,1,1,0,2,1,1,1,0,5,3,1,1,2,3,0,0,1,1,1,2,2,0,1,2,2,1,
2,0,1,0,1,0,1,1,1,1,0,0,0,0,1,4,1,3,1,0,0,1,1,1,1,1,0,1,1,1,
1,2,1,0,1,0,1,1,2,2,0,1,0,0,0,0,2,2,6,2,0, };
static signed short stb__consolas_bold_28_usascii_y[95]={ 20,0,0,2,-1,0,0,0,-1,-1,0,5,14,11,
14,0,1,2,1,1,2,2,2,2,1,1,5,5,4,8,4,0,0,2,2,1,2,2,2,1,2,2,2,2,
2,2,2,1,2,1,2,1,2,2,2,2,2,2,2,0,0,0,2,22,0,5,0,5,0,5,0,5,0,0,
0,0,0,5,5,5,5,5,5,5,1,6,6,6,6,6,6,0,-3,0,9, };
static unsigned short stb__consolas_bold_28_usascii_w[95]={ 0,5,10,15,14,16,16,5,10,9,13,14,9,9,
7,14,15,13,13,13,15,12,14,13,13,14,6,8,12,13,12,11,16,16,14,13,14,12,12,15,14,12,11,14,
12,15,14,15,14,16,14,13,14,14,16,15,16,16,13,8,14,8,14,16,10,13,14,13,13,13,15,14,13,13,
12,13,13,15,13,15,14,13,13,12,14,13,16,16,15,16,12,11,4,12,15, };
static unsigned short stb__consolas_bold_28_usascii_h[95]={ 0,21,8,18,25,21,21,8,27,27,13,15,11,4,
7,23,20,18,19,20,18,19,19,18,20,19,16,20,17,9,17,21,26,18,18,20,18,18,18,20,18,18,19,18,
18,18,18,20,18,25,18,20,18,19,18,18,18,18,18,26,23,26,9,4,7,16,21,16,21,16,20,21,20,20,
26,20,20,15,15,16,21,21,15,16,20,15,14,14,14,20,14,26,29,26,7, };
static unsigned short stb__consolas_bold_28_usascii_s[95]={ 252,237,225,71,100,220,203,219,16,6,166,
74,180,162,247,132,193,16,1,165,149,30,43,197,225,15,218,243,191,205,178,
162,83,102,87,179,56,43,30,209,1,241,58,119,165,181,166,149,134,115,119,
239,151,70,85,211,102,134,227,52,147,61,190,172,236,204,188,239,16,225,133,
30,59,73,27,87,45,58,44,1,1,174,30,17,101,89,103,120,150,116,137,
40,1,70,236, };
static unsigned short stb__consolas_bold_28_usascii_t[95]={ 1,1,92,73,1,1,1,92,1,1,92,
92,92,23,100,1,31,73,53,31,73,53,53,53,31,53,73,1,73,92,73,
1,1,73,73,31,73,73,73,31,73,53,53,73,73,53,53,31,73,1,53,
31,53,53,53,53,53,53,53,1,1,1,92,23,100,73,1,73,31,73,31,
31,31,31,1,31,31,92,92,92,31,1,92,92,31,92,92,92,92,31,92,
1,1,1,92, };
static unsigned short stb__consolas_bold_28_usascii_a[95]={ 246,246,246,246,246,246,246,246,
246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
246,246,246,246,246,246,246, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_bold_28_usascii_BITMAP_HEIGHT or STB_FONT_consolas_bold_28_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_bold_28_usascii(stb_fontchar font[STB_FONT_consolas_bold_28_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_bold_28_usascii_BITMAP_HEIGHT][STB_FONT_consolas_bold_28_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_bold_28_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_bold_28_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_bold_28_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_bold_28_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_bold_28_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_bold_28_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_bold_28_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_bold_28_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_bold_28_usascii_s[i] + stb__consolas_bold_28_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_bold_28_usascii_t[i] + stb__consolas_bold_28_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_bold_28_usascii_x[i];
            font[i].y0 = stb__consolas_bold_28_usascii_y[i];
            font[i].x1 = stb__consolas_bold_28_usascii_x[i] + stb__consolas_bold_28_usascii_w[i];
            font[i].y1 = stb__consolas_bold_28_usascii_y[i] + stb__consolas_bold_28_usascii_h[i];
            font[i].advance_int = (stb__consolas_bold_28_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_bold_28_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_bold_28_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_bold_28_usascii_s[i] + stb__consolas_bold_28_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_bold_28_usascii_t[i] + stb__consolas_bold_28_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_bold_28_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_bold_28_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_bold_28_usascii_x[i] + stb__consolas_bold_28_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_bold_28_usascii_y[i] + stb__consolas_bold_28_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_bold_28_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_bold_28_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_bold_28_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_bold_28_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_bold_28_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_bold_28_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_bold_28_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_bold_28_usascii_LINE_SPACING
#endif

