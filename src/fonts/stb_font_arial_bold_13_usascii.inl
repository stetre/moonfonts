// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_bold_13_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_bold_13_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_bold_13_usascii_BITMAP_WIDTH         128
#define STB_FONT_arial_bold_13_usascii_BITMAP_HEIGHT         64
#define STB_FONT_arial_bold_13_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_arial_bold_13_usascii_FIRST_CHAR            32
#define STB_FONT_arial_bold_13_usascii_NUM_CHARS             95

#define STB_FONT_arial_bold_13_usascii_LINE_SPACING           8

static unsigned int stb__arial_bold_13_usascii_pixels[]={
    0x40a82980,0x885550a9,0xa880330a,0x8355100a,0x98800009,0x0000400a,
    0x42885115,0xda806028,0x43f13f60,0x8ffb1ff8,0x220d32f9,0x41ffddfe,
    0x83e24ff8,0x0fb9f63c,0x077fffa6,0x265f9fd5,0x9f83ffcf,0xd9b3e26b,
    0x41ffea83,0x1b21fffd,0x2e07d43f,0x10fa0987,0x21fa825d,0xf12e42f8,
    0x45e8fd47,0x0eea8afe,0x4cbf677e,0x511fc9ef,0x36a1bb3f,0xf88798f8,
    0x657cc9b4,0x43f1ee2c,0x7cc7b87a,0xd15d1b22,0x44999f9f,0xffd1fc2f,
    0x317ce7c9,0xf52fb89f,0x9fccbe63,0xffffd3f8,0x6de7a65f,0x409afa83,
    0x0fb84cf8,0x7b87c87e,0x4cf717cc,0x22bee9d6,0x1f88be26,0xbfc833e6,
    0x3e617d47,0x4bea3f33,0x647f13f9,0x57640f8c,0xfdff7079,0x443ffc85,
    0x3ee3f0ee,0x17cc7b83,0x3e32e3f5,0x44d11f50,0xf887e62f,0x2627fcc3,
    0xbf1fd43f,0x3be65fb3,0x7bd50fc9,0x26f6015f,0x367f71ee,0x224fea85,
    0x3ee3f0ee,0x17cc7b83,0x9eaf21f3,0x17c4777b,0x41fc41f3,0x645f81fe,
    0x3f3faa1f,0x47ffbf32,0x82fffffe,0x2a997b79,0x4d4cf92f,0x3f1ee6bc,
    0x263dc3e4,0x9da9ea2f,0x0ebef9af,0x41f88be2,0xc83740cf,0x205fdadf,
    0x205f32f9,0x9ec09b79,0x27be5bbd,0x3b77e64e,0x5c3f1ae4,0x17cc7b87,
    0x75c7c4d9,0x2208dfdc,0x3f61fc2f,0x5405ff55,0x7cc02dfd,0x5ae05f32,
    0x754f302e,0x037f662e,0x36419ff7,0x5c0fa87e,0x85d17d47,0x25d881ea,
    0x042e42f8,0x00000351,0x08804c13,0x0220cc03,0x9fb12600,0x47fe21f8,
    0x43fea7fd,0x9bdd5069,0x4ff889fd,0x000003e2,0x00000000,0x4c080000,
    0x854c0a82,0x982a62aa,0x8054c401,0x004c1aa8,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x20000000,0x0a8801a8,0x401102a0,
    0x260000a8,0x1006201a,0x54419815,0x02666200,0x83100d4c,0x446a21a8,
    0x0bddf10a,0x217fff62,0x067fec78,0x83bfffb3,0x322fbefb,0x7dc1ffff,
    0x45f300df,0x5f30effd,0x22fffe40,0x41ffffe8,0x7f10fffd,0x53f89fcc,
    0xfd01f53f,0x4b50fee5,0x3a3f99f9,0x10fea8af,0x225fb19f,0x7c4bf13f,
    0x5f303f8b,0x4cfe6be6,0x2677602f,0x74c5ff40,0x4fe2be26,0x98fe63f8,
    0x30bfdf10,0x23c8189f,0x27cd7e7b,0xa8fd4bf2,0x022bbe2f,0xfb97a3f5,
    0x0fa82fcf,0xf89fd9f3,0x227c40bd,0x3e6fe208,0x9fcc7f13,0x0dfd13f8,
    0x87a00bea,0xf56f9af9,0x3f53f985,0xfffa8bea,0xb743ee0d,0x42fd8cf8,
    0x27be64fa,0xfdff11fb,0xaa897d47,0x89bfee0a,0x7c4fe63f,0xebfcdf8b,
    0xf100fe62,0x2adddf90,0xf89fcc2f,0xca82fead,0xb747ee6f,0x885f51fa,
    0x227f34f9,0x336c263f,0x4bffe67f,0xf14facf8,0xbf89fcc7,0x83ffb1fa,
    0x6a8fe25e,0xafcd7e10,0x3661fbab,0x43d52fad,0x3a3f50fc,0x4bea3f55,
    0x9fcdb628,0x3e4313f8,0x72fa8df1,0x24f9b61f,0xf17f12f9,0xc87ff939,
    0x320feacf,0x17ddfcc4,0x4dff9bfb,0x7c3f51b8,0x3e26fbae,0x277e3fac,
    0xf57f32fd,0x3f2bbe67,0x8bd39f10,0x2febaefb,0x749f39f1,0xf10feabf,
    0x36fff6a7,0x42efda85,0x82efc82e,0x23fefffc,0x6d46fefe,0x7f541eff,
    0x17dff544,0x3e619fd7,0x7f5c3ffc,0xdffeb80b,0x306ff5c2,0x7c45fffd,
    0x0c000043,0x42b82000,0x000002a9,0x00000000,0x00200002,0x00000000,
    0x00000000,0x00000000,0x00000000,0x510150d4,0x55555445,0x23510aa1,
    0x542a60a9,0x22986a62,0x1511a82a,0x2aaaaa60,0x026aaaa2,0x55540151,
    0x35054409,0xf88551a8,0x3bf60b63,0xbfffff50,0x23f91fdc,0x7d9ba5f9,
    0x365e97f6,0x7c4fe60f,0xfffffb02,0x3ffffe2d,0x440be60e,0x223fffff,
    0x221ff13f,0x3f88bf3f,0xd013e12e,0xf98fe83f,0x17e57dc4,0x45ffe1f7,
    0xfc8fea3f,0x4c025f10,0xf71fc42f,0xf8817cc7,0x9fc4fd33,0x27f14ff8,
    0xd31fc45f,0xf906ffe8,0x1fd9f307,0xf98bffd0,0xfa9fcf9a,0x44bf2fc1,
    0xf985fecf,0x7f31fc42,0x12fcd7cc,0xf887e47f,0xf13fff13,0x47f117a7,
    0x037e20f8,0xffc813ee,0x881ff502,0xbbf8fbcf,0x2f98fc87,0x07f23be2,
    0xeef885f3,0x2fe60efe,0x6677c45f,0x7c4fe26f,0x9b3f8efb,0x21743f88,
    0x406f984f,0x3ff606f8,0xbb5dde82,0xf97f30db,0x85f33f88,0x677c42f9,
    0x2fff986f,0x067777c4,0x2abe27f1,0x95793fbf,0xf8990fe6,0x4007fc44,
    0xfd9f505f,0xf73ffc81,0x13fba09f,0x30be65f1,0xf53f885f,0x46def98b,
    0x4fe203f8,0x27ffb2f8,0x1fcbfbab,0xfb13e354,0x3e055559,0xf98ef885,
    0xf98ffd45,0x85ff902f,0x985f32f8,0xf91fc42f,0x1fcd7cc5,0x9fc407f1,
    0x27ff12f8,0x83ffd8ab,0xfd13e0f8,0x3e0dffff,0x3f22fc85,0x1ff1fe22,
    0x3e21fe60,0x2f985f32,0x1ff11fc4,0x887e4be6,0x44fe203f,0x2f4fee2f,
    0x00000300,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x20000000,0x8aa60aa8,0xa886a009,0x21a86a22,0x2a1a81a8,
    0x2aa1aaaa,0x2aa22aaa,0xaaaa809a,0x4cccc401,0x0c402a81,0x2a200a88,
    0xfe93fe20,0x3e209f16,0x3f98bf64,0x21fc47f1,0xffff14fa,0x3fffe29f,
    0x3fffe27f,0x3fffe23f,0xffbaf46f,0x17fc47ff,0x2e1fffd8,0x1fb05fef,
    0xff8b7fc4,0x3e209f16,0x3f987fb4,0x91fc47f1,0x40fe29ff,0x2fe203f8,
    0x7f11fd98,0x225717dc,0x7dc3f999,0xe8af985f,0x0be67f15,0x6fc41ff7,
    0xf16dfa8f,0x3f33e209,0x7f13f983,0xf9e89fc4,0x3e207f14,0xf88fe203,
    0x0fdc7f14,0x66f43640,0x4bd0c40f,0xdf88be60,0x2befe20f,0x09f16ddc,
    0x20ffffe2,0xffff13f9,0x229f07ff,0x3e27ffff,0x3e25ffff,0xfff8afc3,
    0x2f8804ff,0x027c57cc,0x8bf305f7,0x3e20facd,0x16dbecea,0x2ffe209f,
    0x89fcc0fe,0x83fbaadf,0x555bf14f,0x0d556fc4,0xf15f87f1,0x5c5f955b,
    0x4fe43642,0x09f707e9,0xf51f717e,0x7fe57c41,0x209f16d9,0x98bf34f8,
    0x7c47f13f,0x07f14f83,0x3f880fe2,0x21fc53e2,0x07d17a5f,0x85ffffff,
    0x83d104fa,0x11fffffd,0x5b6ff55f,0x11aaadf8,0xf317ec9f,0x3f88fe27,
    0x207f14f8,0x0aaaadf8,0x1fd75bf1,0x3f2ab7e2,0x42f89264,0x5f999bfa,
    0x10aabfe2,0xfcaaa839,0xbf15f10b,0x7fffc5b6,0x7c49f15f,0x3e27f30f,
    0x53e0fe23,0xfff103f8,0x3fe21fff,0x3fe21dff,0x30644fff,0xfc87d83f,
    0x8dffff70,0x03ea02f8,0x00000000,0x00000000,0x00000000,0x00000000,
    0x08002000,0x00010040,0x41021008,0x40810200,0x00020040,0x2f981041,
    0x3f7103f3,0xffc80bae,0x077fec1f,0xeb83dfd5,0x77f540cf,0x44ff7e22,
    0x57a5fdbf,0x9b25f55d,0x365f8afb,0x1f303ee6,0xdbfebf98,0x265f30ef,
    0x33ff261f,0x419ffb30,0x2a4f8ad8,0x33e1c89f,0x26fe25d8,0x3277e23e,
    0x215df10f,0x71fb8df8,0xfa7e5ee5,0x307efec4,0x3e617a3f,0x7f46fcc0,
    0x25f33f9a,0x05df51fa,0x730ff5c4,0x77fc4bfb,0x2e03f50b,0x3ea5eccf,
    0x0fe27f11,0x207e67f1,0xf9fde9f8,0x7417fc41,0x3baa1f9c,0x25f31eef,
    0x9fcd3e7c,0x39ff31fa,0x4c3bf6a0,0x5c45e9cf,0x223f54fd,0x8aaafee0,
    0x227f11fa,0xf997c42f,0x9f3f9d01,0x709ff10f,0xfdca8d9f,0x323f31cd,
    0x467c53e7,0x77f541fd,0xb85bfd30,0x3aa5f99f,0x277e5e89,0x362fe66e,
    0x3f277e23,0x2f885f10,0xfb8ae3f3,0x9dd09fd6,0x03ff883f,0x91f981f3,
    0x7ff927cf,0x5c76603f,0xbdfd101c,0x21dffd8d,0x6d41efda,0x6ff4c0ef,
    0x5f10be22,0xf32f47e6,0x3f70bee9,0x403f61ba,0xc8fcc0e9,0x000013e7,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x80888800,0x444440b8,0x3220c408,0x22331511,0x2398040a,
    0x37762eeb,0x03912ddd,0x00000000,0x7fdc0000,0x21fe42ff,0x31fffffb,
    0xa97c4595,0x23f76daf,0x22cbefea,0x545dd73d,0xf10aaaaa,0x00000005,
    0x44000000,0x3e20efa9,0x5555446d,0x419fd50a,0x2db3f31c,0xfb5770fa,
    0x0000081d,0x00000000,0x36000000,0x17c7641f,0x21999993,0x88e23ce8,
    0x00913a8c,0x00000000,0x00000000,0x217ec000,0x754db3f8,0x2261eeee,
    0x00000000,0x00000000,0x00000000,0x0d56fdc0,0x00000081,0x00000000,
    0x00000000,0xb0000000,0x0007ffff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_bold_13_usascii_x[95]={ 0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,-1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0, };
static signed short stb__arial_bold_13_usascii_y[95]={ 10,1,1,1,0,1,1,1,1,1,1,2,8,6,
8,1,1,1,1,1,1,1,1,1,1,1,3,3,2,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,1,3,3,3,3,3,3,1,1,1,4, };
static unsigned short stb__arial_bold_13_usascii_w[95]={ 0,2,5,7,6,10,9,3,4,4,5,7,3,4,
3,5,6,5,6,6,7,7,7,6,6,6,2,3,7,7,7,7,12,9,8,8,8,8,7,9,8,3,6,9,
7,9,8,9,8,9,9,8,7,8,9,11,8,9,7,4,5,4,7,8,3,7,7,7,7,7,5,7,7,3,
4,7,3,10,7,7,7,7,5,6,4,7,7,10,7,7,6,5,2,5,7, };
static unsigned short stb__arial_bold_13_usascii_h[95]={ 0,9,4,10,12,10,10,4,12,12,5,7,4,2,
2,10,10,9,9,10,9,10,10,9,10,10,7,9,8,5,8,9,12,9,9,10,9,9,9,10,9,9,10,9,
9,9,9,10,9,10,9,10,9,10,9,9,9,9,9,12,10,12,6,2,3,8,10,8,10,8,9,10,9,9,
12,9,9,7,7,8,10,10,7,8,10,8,7,7,7,10,7,12,12,12,4, };
static unsigned short stb__arial_bold_13_usascii_s[95]={ 127,125,34,100,1,108,1,40,56,33,24,
108,30,56,70,20,60,42,104,75,119,90,119,87,108,26,78,83,9,16,17,
111,38,94,74,11,65,56,48,98,33,29,1,19,11,1,116,74,103,33,85,
51,77,115,59,47,38,28,20,51,8,23,8,61,52,25,82,40,67,48,14,
43,69,124,28,95,112,116,70,56,92,84,64,33,61,1,100,81,92,66,1,
17,14,8,44, };
static unsigned short stb__arial_bold_13_usascii_t[95]={ 1,25,55,1,1,1,14,55,1,1,55,
46,55,55,55,14,14,36,36,14,36,14,1,36,14,14,46,36,46,55,46,
36,1,36,36,14,36,36,36,14,36,36,25,36,36,36,25,1,25,14,25,
14,25,14,25,25,25,25,25,1,25,1,55,55,55,46,14,46,14,46,25,
14,25,14,1,25,25,46,46,46,1,1,46,46,1,46,46,46,46,1,55,
1,1,1,55, };
static unsigned short stb__arial_bold_13_usascii_a[95]={ 52,62,88,104,104,166,134,44,
62,62,72,109,52,62,52,52,104,104,104,104,104,104,104,104,
104,104,62,62,109,109,109,114,182,134,134,134,134,124,114,145,
134,52,104,134,114,155,134,145,124,145,134,124,114,134,124,176,
124,124,114,62,52,62,109,104,62,104,114,104,114,104,62,114,
114,52,52,104,52,166,114,114,114,114,72,104,62,114,104,145,
104,104,93,72,52,72,109, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_bold_13_usascii_BITMAP_HEIGHT or STB_FONT_arial_bold_13_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_bold_13_usascii(stb_fontchar font[STB_FONT_arial_bold_13_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_bold_13_usascii_BITMAP_HEIGHT][STB_FONT_arial_bold_13_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_bold_13_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_bold_13_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_bold_13_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_bold_13_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_bold_13_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_bold_13_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_bold_13_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_bold_13_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_bold_13_usascii_s[i] + stb__arial_bold_13_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_bold_13_usascii_t[i] + stb__arial_bold_13_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_bold_13_usascii_x[i];
            font[i].y0 = stb__arial_bold_13_usascii_y[i];
            font[i].x1 = stb__arial_bold_13_usascii_x[i] + stb__arial_bold_13_usascii_w[i];
            font[i].y1 = stb__arial_bold_13_usascii_y[i] + stb__arial_bold_13_usascii_h[i];
            font[i].advance_int = (stb__arial_bold_13_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_bold_13_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_bold_13_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_bold_13_usascii_s[i] + stb__arial_bold_13_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_bold_13_usascii_t[i] + stb__arial_bold_13_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_bold_13_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_bold_13_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_bold_13_usascii_x[i] + stb__arial_bold_13_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_bold_13_usascii_y[i] + stb__arial_bold_13_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_bold_13_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_bold_13_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_bold_13_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_bold_13_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_bold_13_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_bold_13_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_bold_13_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_bold_13_usascii_LINE_SPACING
#endif

