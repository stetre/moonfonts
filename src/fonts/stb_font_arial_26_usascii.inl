// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_26_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_26_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_26_usascii_BITMAP_WIDTH         256
#define STB_FONT_arial_26_usascii_BITMAP_HEIGHT         90
#define STB_FONT_arial_26_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_26_usascii_FIRST_CHAR            32
#define STB_FONT_arial_26_usascii_NUM_CHARS             95

#define STB_FONT_arial_26_usascii_LINE_SPACING          17

static unsigned int stb__arial_26_usascii_pixels[]={
    0x3bd700c0,0x7f5c1ba0,0x03ea9b01,0x2613332a,0xedc9802c,0xc9801bdf,
    0x32a204cc,0x00001bee,0x00330000,0x2e200098,0x000aceec,0x166f6dcc,
    0x66f6e4c0,0xdd951002,0xc980017b,0x7c43f503,0x4c0be604,0x03ffea07,
    0x3ffea1ba,0x1360fa80,0x2e1ffff2,0x3ffaa04f,0xdffffdff,0x1ffff500,
    0xffffff70,0x17ea07ff,0x03541fe8,0x32bffff2,0xff75f71f,0xffa807df,
    0x03ffffff,0xffffffa8,0xff901eff,0x01bfffff,0x7fffffdc,0x3ea002ff,
    0x7d41f906,0xb503f202,0x32039fff,0xfd86e83f,0x3f313a02,0x3aa1fe20,
    0x17bff903,0x82ffda88,0x3fee04fa,0x5ff9511c,0x3e203fe0,0xf903fc46,
    0x3fdff79f,0x32bbfbee,0x9ff903ff,0x0fff2a23,0x10adffb8,0xfc83ffd5,
    0xdfd731be,0x22b3fea0,0x002ffda8,0x71ba0df5,0x362f401f,0x0ffdfdff,
    0x86e84f98,0x01f700ff,0x01fe20bb,0x2001bfb0,0x27d41ffa,0x2a01ffa8,
    0x83fc81ff,0x83fc43fb,0x3f220efa,0x887ff71f,0x0ffcc1ff,0xf305ff50,
    0x45fc805f,0x5ff102ff,0x3601ffa8,0x0df5007f,0x440fb17e,0x263bea3f,
    0xbf10bf77,0x40df0dd0,0x103f505f,0x27dc00ff,0x83fea018,0x2ff884fa,
    0xf987fc80,0x7c40fe86,0xf105fb07,0x5c1bee3f,0x401ff44f,0x27f40ffb,
    0xf987fc40,0x3e27e407,0x17fc404f,0x7cc37d40,0x3f502fc3,0x3e799fe4,
    0x742fc41f,0x5f706f86,0x3e21be20,0x3e24fb87,0xa7ffe446,0x545f51fd,
    0x006f984f,0x87fa07fe,0x7ffe45f9,0xd807f47f,0x2609f71f,0x801bea5f,
    0x007fc2fe,0x07fe21a8,0x03fc4188,0xdf500098,0x3ffffff6,0xd84fffff,
    0x27997ec7,0xdd0df100,0x03fa0df0,0x3fc40fd8,0x43f927dc,0xcfdbdfe8,
    0xfa93e27f,0x2004fb84,0x24fb83fd,0x7fe542fc,0xc81fe24c,0x2207f71f,
    0x8017ee7f,0x01be64fc,0x017ffb00,0x00017ea0,0x665dbea0,0xdfdcccfe,
    0x7e44f82c,0x1be00f34,0x20df11ba,0x217e406f,0x24fb87f8,0x2e1fec6e,
    0xf53746ff,0x4007fb09,0x26f884fc,0x10ff107f,0xb8fe40ff,0x64df103f,
    0x97ee004f,0x440005fb,0x0acefffd,0x00009f90,0x8dd0df50,0x85f300fc,
    0x0079cff9,0x4c6e81fd,0x405f884f,0x43fc43fb,0xfb93e4fb,0x644ff885,
    0xff09f50f,0x837d4005,0x104fa9fd,0x403fe0ff,0x207f71fd,0x00ffa5f9,
    0x13f67f98,0x55555544,0xffffda81,0x01fec0df,0x437d4000,0xf703ec4f,
    0x7ffff501,0x20dfa801,0x207fa66e,0x27d405fa,0x53ee1fe2,0x407f62f9,
    0xa87e42fe,0x002fe84f,0x67d417ee,0x0ff101fc,0x8ffc0bf6,0x47f906fb,
    0x3ea003fd,0x7d417f26,0x204fffff,0x1effeca8,0x000013f2,0x87f31bea,
    0x981b605f,0x00dffffc,0xab743fea,0x09f701ef,0x3fc46f98,0x20fba7dc,
    0xd03fa07f,0x7e427d4f,0x813f2003,0x3e206fef,0x443df307,0x7ff71ffc,
    0x3ee0ffa8,0xa93ee004,0x5555106f,0x754009fb,0x0017ee5f,0x4c5bea00,
    0xcfa99afb,0x013e2099,0x81bff3e6,0x2add0ffb,0x09f701ff,0x3fc45f98,
    0x267da7dc,0xf11fe05f,0x7d427d4b,0x80ff6005,0x3e203ffc,0x337ff207,
    0xff71ffff,0x83ffd7ff,0x3f2006f9,0x4003fe22,0x801754fb,0x0df30ff8,
    0x2a00b2e0,0xfffffb6f,0x49ffffff,0x379801fa,0x1bf707fd,0x03fd1374,
    0x4fa80bf3,0xa7dc3fc4,0x5c1be67c,0xf517e45f,0x303ff109,0x300ffcc1,
    0x3fc401ff,0x2bfffea0,0xf79f71fd,0x3fe05bff,0x41ff8802,0x9f7003fe,
    0x3fa00ff6,0x8803ff11,0x70bd34ff,0x2bbea6bf,0x1aabfdaa,0x73cc01f2,
    0xe81fd0bf,0x7c427cc6,0x2217e406,0xf54fb87f,0xf103fe21,0x2a2fdc7f,
    0xb0bf904f,0x807fd39f,0x3fc405f9,0x47f60880,0x700264fb,0x5fd801df,
    0xc802ffa8,0x401df54f,0x07fe47f8,0x3e21ff90,0x3e1fe40f,0x0bd03ec4,
    0xf53cc3f6,0x6e86f88b,0x07e837c4,0x1fe20fec,0xd17c53ee,0x9fff449f,
    0x27d40ffb,0x64c3dfb0,0xfc806fff,0x0007f801,0x013ee3fb,0x2207bf20,
    0x3fee05fe,0x7ff5441b,0x303dff14,0x3dfb09fd,0x7c4ffb88,0x98bfe23f,
    0xf882fc3f,0x9e65fd03,0x437c44fc,0xd837c46e,0x221fa01f,0x3e4fb87f,
    0x3f7ffe26,0x0effffdd,0x7ec04fa8,0xfffeddef,0x6fa8881e,0x00ddfd00,
    0x09f71fd8,0x37bff600,0xb806ffed,0xffeeffff,0x7ff442ef,0x05fffdef,
    0xfdbfffd1,0xfff70bff,0x1fb8bffb,0x07dc0fe2,0x1798efb8,0x85f885ff,
    0xf707f86e,0x221be205,0x324fb87f,0x4fbf662f,0x2623dfe9,0x95009f50,
    0xf759dffd,0x1fffd89f,0x03ffd300,0x4fb8fec0,0x3fb2a000,0x26003dff,
    0x3dffffdb,0x3fffb220,0x7e4403ef,0x202effff,0xc85ffffb,0x6d817d47,
    0x3f7ffa20,0x5f884ffc,0x107f86e8,0x20bee0df,0x44fb87f8,0xd30001fe,
    0x0013ea3f,0xa8d91011,0x008001de,0x5930cb80,0x00220000,0x80004c00,
    0x33100018,0x22019800,0x01100c41,0xfffffd88,0xdd0bf303,0x17dc0fd0,
    0x87f8837c,0x1ffc43fc,0xa8bfea00,0x0400004f,0x00000000,0x00000000,
    0x00000000,0x00000000,0x7d400000,0x20ff2201,0x202fd86e,0x880fdc5e,
    0x982fd87f,0x441acefe,0x542ffdba,0x0000004f,0x00000000,0x00000000,
    0x00000000,0x00000000,0x07980000,0x3a03ffea,0x80fffa86,0x3217a1fa,
    0x3ffa7fff,0x3ffaa00f,0xfffffeff,0x1ffff504,0x3bbbbba6,0x0eeeeeee,
    0x00000000,0x00000000,0x00000000,0x00000000,0x51000000,0xd80ef540,
    0x201dd505,0x9501d33d,0x0ef6c999,0xeedcaa80,0x32600abc,0x333224cc,
    0xcccccccc,0x000000cc,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x4002f2e2,0x8017a019,0x0000acca,0x32e60197,
    0x002c980b,0x40399950,0x3e601cec,0x17db3003,0x0de5c400,0x64402644,
    0xaaaaaa84,0xdfb700aa,0x5400b261,0x8993004c,0x2cb803cb,0xcc980b2a,
    0x220b2a01,0x02fffffe,0x2efffff2,0xd300f92f,0x005fffff,0xff703fb0,
    0x7dc1dfff,0x7ff44004,0xdfd85fff,0x00db04fd,0x03ffbffa,0x3fffff60,
    0x4c03fc43,0x7fffcc7f,0xfb81ffff,0x013ee7ff,0x2201ffc4,0x0ffd43fe,
    0x7d41ff50,0x817ff206,0x9cfd82fd,0xfc82fea8,0x2feffbcf,0xefe805f5,
    0x001feb8a,0x3fee0fec,0x7dc9fb32,0x8efec004,0x93e24fea,0x01fcc0fd,
    0x09f72fd4,0xfd32ffa8,0x4c03fc45,0x6677d47f,0xfe80cccc,0x2004fb83,
    0x3f200ffb,0x101ff906,0x07f885ff,0xff81fffa,0x7dc37cc0,0x32077d45,
    0xc813e2ff,0x00ff887f,0x3ff07f60,0x13ee1fd0,0x540ff880,0xfb8bea7f,
    0xfd8036c2,0xf881fe21,0x3e26f987,0x647f9807,0x07fc002f,0x3a0027dc,
    0x01ff305f,0x27f42ff4,0xdf881fe8,0x86f981fd,0x47f882ea,0x45ff01fd,
    0x413fa06d,0xd86603fd,0x5413ea1f,0x0cc9f71b,0x3fe0bf50,0x1fd41f90,
    0x3f6005f3,0xfb817e63,0x3e23fd04,0x6c7f9807,0x83fc000f,0x7c4004fb,
    0x403fe83f,0x1bf22ff9,0xbfb83fc8,0x04fb83fb,0x1fe37dc0,0x03ee2fd8,
    0x5fb80ffc,0xdaffffc8,0x400bf61f,0xffffbcfb,0x4c0ff883,0xfb8bee7f,
    0xfa801b62,0x202fe89f,0x27f702fc,0x7f9807f8,0xffb003fc,0x27dc5fff,
    0x7dc0ffe6,0x4017f20f,0x0ffa8ffb,0x3f617ea0,0x1fd85f88,0x88bfe600,
    0x98bf206f,0x203ff03f,0x67fe46fc,0x3a1ffffc,0x0bddb89f,0x6df7ffdc,
    0x0cfd84ff,0x27cc9fb3,0x00be61fb,0x07ffdfb0,0x9f501fd8,0x3e601fe2,
    0x3f277e27,0xffcb81df,0x893ee1cc,0xaff403ff,0x36000ff9,0x4402ffdf,
    0x3fa6f87f,0xfb803fc0,0x03fc42ff,0xb05f85f9,0xa9bfa09f,0x3ff620ef,
    0x3ffa7fe1,0x3fee1eff,0x5c0ffcc3,0xd83ffeff,0x1ba3fedf,0x07ffea00,
    0x7d403fa0,0xf300ff15,0x77fffd4f,0x0ff03fff,0x1ffc53ee,0x7f57fcc0,
    0x7ffc4002,0x4c1fd004,0xf98bf24f,0x9fffd005,0x17ec0ff0,0x0ffdc1f2,
    0x2fd9bfee,0x3fe1ff88,0x6fea8bef,0x27dc1bee,0x3fffff22,0x5419b303,
    0x3ee0042f,0xff804fff,0x3e2bf300,0x2e7f9807,0x3ff261ff,0x9f707f81,
    0x5c005fd1,0x90005fff,0x3f2005ff,0x4fa8bf22,0xb3000fee,0x41fec1df,
    0x0fd42ff8,0xfeceffe8,0xd81fe6fc,0x20fff11f,0x209f73ff,0x33fe25f9,
    0x001dfb31,0x2effa9ba,0xffa9efd8,0x0ff85b52,0x1fe2bf50,0x0989fe60,
    0x0ff0bfd0,0x013fb7ee,0x0003ffa0,0x003bffea,0x447e93e6,0x0007f66f,
    0x7ff317f4,0x2217ff4c,0x3fff203f,0xff15f9bf,0x9ff0fe40,0x1fdd7f20,
    0x17ee7f88,0x7d4017f4,0x7f95df12,0xff9077d4,0x0fe87fb3,0x3fe29f50,
    0x0037d400,0x20ff0df7,0x01fffffb,0x4002fdc0,0x05feaff8,0x217e2df0,
    0x000ff0fe,0x3fee2fdc,0x82feffef,0x50cc406e,0xc81fe29f,0x5407fa1f,
    0x2207f76f,0x5c0bfa6f,0x2a6e805f,0x3fc9fa1f,0x40ffefd8,0x47f701fd,
    0x2fd401ff,0xff0ff300,0x3eebfee0,0x02fdc006,0xff9afec0,0xfa8fd802,
    0x4f9afb83,0x7dc032e0,0x8ceeda85,0x00fb82fd,0x1fd1fe40,0x2fd87f60,
    0x17ee9f70,0x01ff2fcc,0x3f501be6,0x21f907ec,0xffe881fe,0xf902fc84,
    0x2e017ec5,0x5c02ea4f,0xf707f86f,0x7001ff49,0xefb800bf,0x7003fee0,
    0xf303fb5f,0x7ec05f77,0x4009fd04,0x42f981fe,0x41ff03fb,0x1ff882fd,
    0x97f417ee,0x49f906fb,0x09f902fe,0x323f46e8,0x2e09f91f,0x05fa85ff,
    0x02fe41ff,0x04fe8bfe,0x20ff09fd,0x07fe64fb,0x3002fdc0,0x0dfd03ff,
    0x207fbf98,0x2e00fcdf,0x0ffd40ff,0x0ff103db,0x21fe227c,0x0f7d43fc,
    0xfe83ff91,0xfb87fcc2,0x707fd43f,0x2ff981df,0x1fb07ee0,0x2ff887f4,
    0x42ffffd4,0x227dc2fe,0x6c40cff9,0x207fdc6f,0x07f80ffa,0x06fc89f7,
    0x2200bf70,0x9ff104ff,0x204fef80,0xfd806efd,0x43ffebdf,0x3fa60dfc,
    0x3f21f604,0x705febce,0xfdff9bff,0xebdffa83,0x3fbee2ff,0xd82ffebd,
    0x4ffebcff,0xa7d42f40,0x77fec5f9,0xffbbffec,0x6de7fd44,0xdfff506f,
    0xb01fffdd,0x5ffd7bff,0x27dc1fe0,0x7dc01ff4,0x80dfb005,0x3f601ffa,
    0x13fee02f,0x77fffdc0,0xffdffd01,0x81fa80bf,0x00beffdb,0x32bfffae,
    0xfffe981f,0x7dd7dc2d,0x3ee01eff,0x5c02ffff,0xdfff901f,0xbffff701,
    0x74c17d43,0x2a01cfff,0x0bdfffec,0x3bfffee0,0x7dc1fe01,0x401ff984,
    0xffb805fb,0x00efd800,0x7c401ff7,0x04cc001f,0x15eedcc0,0x02200980,
    0x30001100,0x0004c001,0x0ee00131,0x31003710,0x00620040,0x22000620,
    0x00000001,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x59b95000,0x33333320,0x910ccccc,0x99999999,
    0x66644799,0x202bcccc,0xccccccc8,0x97000abc,0x98664005,0x9999932c,
    0x79999999,0x66400b26,0x33225952,0x0bcccccc,0x33227b00,0xc89e4400,
    0xcc9800cc,0x44007912,0x1e64403c,0x3333332a,0x971ccccc,0x22013223,
    0x7fff4c4c,0x3fe21eff,0xffffffff,0xfffff10f,0x4dffffff,0xfffffff9,
    0xff883eff,0xffffffff,0xf75ff02f,0xb9bea00d,0xfffff74f,0xbfffffff,
    0x7fc013ee,0x3fe67f73,0xffffffff,0xf9a7e405,0x9b7cc05f,0xfd802fff,
    0x400df34f,0x3fa206f9,0x7fffe40e,0x2fffffff,0x01fe25fd,0xdff89fe6,
    0x7c4dfb52,0xaaaaaabf,0x2abfe22a,0x2aaaaaaa,0x2aaabfe6,0x443ffdca,
    0x999999ff,0xff82ffeb,0xd801ff8a,0x544b263f,0xabffaaaa,0x09f71aaa,
    0x9fdcffe0,0xaaaaaff9,0xf704ffca,0x0fffe69f,0xfff36f98,0x4fff880b,
    0x7cc00df3,0x01dfd106,0x55555553,0x3fa3ffb5,0xf300ff12,0xff837dcf,
    0x4001ff12,0xf98007f8,0x107fec07,0x0bfb00ff,0x013f2133,0xf0001ff1,
    0x027dc03f,0x27f73ff8,0x7fd407f9,0x53fffa20,0x300ffff9,0x3fbbe6df,
    0x53fbea00,0x3e6006f9,0x00efe886,0x745ff500,0x300ff12f,0xc81fecff,
    0x001ff14f,0x4c003fc4,0x25fc807f,0x7f9807f8,0x5c07f980,0x3ff0005f,
    0x03327dc0,0x99fdcffe,0x52ff807f,0x269f7bff,0xf305fdef,0x0bf3be6d,
    0xf34fbfd8,0x237cc00d,0x0000dfe8,0x2fe89ff3,0xff300ff1,0x4fc804c4,
    0x44001ff1,0x7f98007f,0x3e27f980,0x006f9807,0x17f405fd,0x3ff013ee,
    0x7fd67dc0,0xb9ff45ff,0xd00ff33f,0x7d4fee7f,0x7ff1df34,0x3be6df30,
    0x79f105f9,0x801be69f,0x17fa26f9,0x85fe8800,0x00ff12fe,0x3e200ff3,
    0x001ff12f,0x4c003fc4,0x23fd007f,0x3fd807f8,0x260bf700,0x404fb86f,
    0x3fee01ff,0x25ffdbdf,0x267f72fe,0x8ffcc07f,0x6f9a7d40,0x6f981ff5,
    0x203fadf3,0xf34fb9fb,0x8b7cc00d,0x6c0005fe,0x12fe80ef,0x0ff300ff,
    0xff89bf20,0x4ccccccc,0x66667fc4,0x260ccccc,0x25fd007f,0xaaaaaff8,
    0x000ffeba,0x7f901ff1,0xff809f70,0x30ffee01,0xfb8fecff,0x6c40ff33,
    0x4d3ea06f,0xf31bf66f,0x17e5be6d,0xf34fbbec,0x477cc00d,0x20003ffe,
    0x5fd01ffc,0x3bbbbfe2,0x07feeeee,0x3e21ffb8,0xffffffff,0x7ffffc47,
    0x21ffffff,0x7fb007f9,0x3fffffe2,0x001effff,0x07fc17ec,0x3fe027dc,
    0x7c1bee01,0x3ee3fb1f,0xddddff33,0x403fffdd,0x44df34fa,0x4dbe63ff,
    0xf88bf36f,0x1be69f74,0xefeff980,0xfa8001ff,0x44bfa02f,0xffffffff,
    0x5c07ffff,0x5ffc42ff,0x42aaaaaa,0xaaaaaff8,0x3e60aaaa,0x227fd007,
    0xffccccff,0xbf50000e,0x9f705f98,0x2e01ff80,0x325fb05f,0x3e67f70f,
    0xffffffff,0x9a7d400d,0x987fd46f,0x7f4df36f,0xa7dc7ee0,0x3e6006f9,
    0x01dfb4ff,0x2027fc40,0x33ff12fe,0xf5333333,0x417fe40f,0x22000ff8,
    0x7f98007f,0x3e25ff00,0x401dfb07,0x20ff80aa,0x09f702fd,0x3ee01ff8,
    0x3f25f904,0x3fe67f70,0x40019999,0xb0df34fa,0x7cdbe6df,0x26e8bf26,
    0x00df34fb,0xff127fcc,0x17fa200b,0x3fc4bfa0,0xfd83fcc0,0x01ff101f,
    0x4003fc40,0xff8807f9,0x7f40ff11,0x320bfe05,0x5c0ff13f,0x00ffc04f,
    0x4bf209f7,0x7ccfee7b,0x4fa80007,0x7ff10df3,0x99be6df3,0x7dc9f15f,
    0x4c00df34,0x02ff987f,0xe800efd8,0x300ff12f,0x01dfb0ff,0x10007fc4,
    0xff3000ff,0x7c4df900,0x413fe607,0x56f982ff,0x027dc09f,0x4fb807fe,
    0xb9aa5f90,0x000ff33f,0x1be69f50,0x9b7d7fd4,0x7dc7f46f,0x37cd3ee1,
    0x320df300,0x3fee00ff,0x225fd000,0x47f9807f,0x7c400dfd,0x1fe2000f,
    0x101fe600,0x03fc45ff,0x0f407fee,0x01fd8fe8,0x3ff013ee,0xfc827dc0,
    0x3e67f702,0x4fa80007,0x7fec0df3,0xfb8df36f,0x9a7dc6ea,0x1be6006f,
    0xff506fe8,0x897f4005,0x27f9807f,0xf8800efa,0x1fe2000f,0x221fe600,
    0x7c45ffb9,0x886fe807,0xdf7f700f,0x7c04fb80,0x413ee01f,0x2e1552fc,
    0x000ff33f,0x1be69f50,0xf36fff88,0x43fef98d,0x00df34fb,0xff3037cc,
    0x003ff889,0x07f897f4,0x3ffe7f98,0x5fffffff,0x44001ff1,0xffffffff,
    0xff31ffff,0xffffffff,0x300ff10b,0x203e87ff,0x5c02fff8,0x00ffc04f,
    0x4bf209f7,0x267f73fe,0xfa80007f,0xfa80df34,0xfd0df36f,0xf34fb81f,
    0xffffffff,0x701be61f,0x7ffdc5ff,0xffffffff,0x3e25fd4f,0xf37f9807,
    0xffffffff,0x003fe2bf,0xffffff88,0x31ffffff,0xdfffffff,0x01fe203b,
    0x00107fe4,0x9f700ff9,0x2e01ff80,0x3a5f904f,0x3e67f73f,0x4fa80007,
    0xdfb00df3,0x1bee1be6,0x7ffcd3ee,0x0fffffff,0xffb00df3,0x3ffffee1,
    0x4fffffff,0x01fe25fd,0x00001fe6,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x88000000,0xaccccccc,0x03cb8001,0x88164c00,0x540cefec,0xaaaaaaaa,
    0x0035302a,0x000000c4,0xa8800262,0x00266001,0x26001310,0x13003101,
    0x00000000,0x00000000,0x262a6399,0xffffffff,0x3fe2005f,0x3fa0001f,
    0xfefffa84,0x3fffa2ff,0x46ffffff,0x04fffffb,0x077fffae,0x07f607f7,
    0x0bffffea,0xdfffffc8,0xfffff700,0xff55f705,0x57dc1bff,0xf32ffffb,
    0x57dc7dff,0x3fe26ffd,0x3f65fd82,0xfb84fd82,0x3fe27fd3,0x5fffffff,
    0x0ff813ee,0x26bfa3ff,0xbaaaaaff,0xbf7005ff,0x3f20009f,0x85ffcc4f,
    0x9970ffc8,0x9ff99999,0x76567fd4,0xbdffb85f,0x0fee0ffd,0x3ff20fec,
    0xe83ffebd,0x6ffdbbef,0xfebdffd8,0x77efdc4f,0x3ee5ffcb,0xbffebdfd,
    0x72ffcbef,0xa89fdfbf,0x83bea0ff,0x86ff84fb,0x647fd0fe,0xffcccccc,
    0x7cc1fe24,0x57f47fe5,0x3fe206f9,0x7f8fe800,0x4fffa800,0x3fe837e4,
    0x7ec6fa80,0xf307fc41,0x2e4fb83d,0x4c3fb03f,0x07fcc0ff,0x1ff10df5,
    0x3e60f7d4,0x30ffee1f,0x0ffee1ff,0x5fb89ffb,0x6c047ff7,0x883ff15f,
    0x07ffd46f,0x004c4df1,0x17ec2fec,0x03fd17e4,0x2fd80df3,0x2fdb7cc0,
    0x3efbe200,0xfb817f44,0x20ffc405,0x640982fe,0x7dc9b03f,0x7ec3fb03,
    0x64c9f904,0x7f43fd01,0x7dcbf702,0x3ee3fd06,0x4c1ffb86,0x100df76f,
    0x207fd5fd,0x3f3f20fe,0x2000fea2,0x0bf506fc,0x980fd8ff,0x00ff406f,
    0x037d4ff2,0x09f73fb0,0x6c03fb80,0xbdffb83f,0x4003f600,0x43fb03fb,
    0x99999afe,0x5d4405fb,0x981fe1fe,0x6c17ee6f,0xf30bf72f,0x3eedf10d,
    0xbfff3005,0x3dd17dc0,0x000fec9f,0xff803bee,0x0f913ea0,0x6fb81be6,
    0x3fe0ff80,0xf73fa801,0x0ffcc009,0x7e40df50,0x7f83efff,0x6c0fee00,
    0x3ffffe1f,0x446fffff,0xffffffdb,0x7c40ff11,0x7ec13ee7,0xbf309f72,
    0x13eedf10,0x200ffc80,0x3e9f15f9,0xf5001be6,0x23fc803f,0x980c41fd,
    0xeeccccff,0x2fd400df,0xdf1013f2,0xf88027dc,0x017f403f,0x3bfff6e2,
    0xfb801fe0,0x3e23fd03,0xaaaaaabf,0x3bffe22a,0xf11fd8ac,0xf73fc40f,
    0x7dcbf609,0xf885f984,0x22009f76,0xbfc04ffe,0xf31fb2fa,0x17fcc009,
    0x6f8afcc0,0x7fffcc00,0x00cfffff,0x3fe617ec,0xfb83fa00,0x04ff9804,
    0x22003fcc,0x03fa3ffa,0x04fb84cc,0x017fc3ff,0x3fa09fd0,0x5f981fe1,
    0x97ec13ee,0x85f984fb,0x009f76f8,0x807ff7f2,0xf70fd9fc,0x22003f95,
    0x3fa003ff,0x4db83fb8,0xaaaaff98,0x101efeba,0x40ffa0ff,0x027dc3fb,
    0x7ec027f4,0x2e0bb103,0x7c0ff64f,0xf109f70f,0xa82fec3f,0x101ff13e,
    0x817f45ff,0x413ee4fb,0x309f72fd,0x2edf10bf,0x8efa804f,0x7f500efa,
    0x3f67ccdf,0x004fe880,0x407f5fdc,0x37cc2fe8,0x7dc17f20,0xffeeeeef,
    0xfb85f986,0x402fd404,0x3f600ff8,0x3e62fd83,0xf327dc1e,0x21ffd81f,
    0x7fc41ff9,0x3f60bfa1,0x507bea2f,0x827dc3ff,0x309f72fd,0x2edf10bf,
    0x17fc404f,0x7ffc0bfb,0x5427ffc4,0x0017f60a,0x8817fbe2,0x2037cc5f,
    0xffe80ff9,0xffffffff,0x77777ec1,0x704eefee,0x0bf7007f,0xecbeff88,
    0x77fe40ef,0x7f40ffeb,0x1fdfeccf,0x7edf7fe4,0x567fdc3f,0x6c3fefec,
    0x2ffebeff,0x2fd827dc,0x0bf309f7,0x013eedf1,0x2ff889fb,0xfd85ffb0,
    0xf73fe82f,0xdddddd9f,0x0bff601d,0x06f98530,0x3e60ffc4,0x3627ec07,
    0xffffffff,0x03d706ff,0xd5005fd0,0x5409ffff,0x880befff,0xfc8efffd,
    0xdffffa81,0xbfffd702,0xff70bf51,0x9f705bff,0x27dcbf60,0xb7c42fcc,
    0x3bee04fb,0xa80ffa80,0x83fd40ff,0xffff73fe,0x01ffffff,0x4c001fea,
    0x43fd406f,0x7fcc04fc,0x009f7000,0x0007fc00,0x04400131,0x88001300,
    0x00062001,0x00000062,0x00000000,0x00000000,0x98000000,0x13fea06f,
    0x3fa007fe,0x809f7003,0x3fc401a9,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x20000000,0xfffffff9,0x6fa86fff,0x200df700,
    0x27ec04fb,0x57017ea0,0x37100000,0xc8013a20,0xdddd903f,0x03dddddd,
    0x42a603f5,0x00cc89cc,0x88888800,0x00000000,0x00000000,0xfff98000,
    0x02deffff,0x3e2007fb,0x04fb801f,0x3ee027ec,0x05f7ec04,0x3ff26000,
    0x400bf101,0xfffb06ff,0x3fffffff,0xfd021f30,0x3fe2bfa5,0x2fbfb220,
    0xfff99cc0,0x000007ff,0x00000000,0x00000000,0x00000000,0x20000000,
    0x01cfffd9,0x1f7ff540,0x2e00bf10,0x99882fef,0x19999999,0x3ed7d6fc,
    0x457f4bfa,0x3fffa0ff,0x4fdbdfff,0x0ffffff3,0x00000000,0x00000000,
    0x00000000,0x00000000,0xfd710000,0x7e4405df,0xf8802dff,0xbf1fd005,
    0x3b220000,0x740cdfff,0x83fe3fd1,0xffeb99bf,0x00002fff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x7fed4000,0xfffb30bf,0x4ccc4019,
    0x81999efa,0x003fb4fa,0x105fe800,0x3743f21f,0x05e5cc06,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x3f63ff91,0xfffb002f,
    0x3fffffff,0x89f30fd8,0xccccccca,0x476c0ccc,0x9ee2e85f,0x0000005d,
    0x00000000,0x00000000,0x00000000,0x00000000,0x64400000,0xdff91fff,
    0xdddd9005,0x43ddddff,0xb07f45f9,0xffffffff,0xa96c43ff,0x8862040d,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xffb50000,
    0xffc9817d,0xbf1000cf,0x7dc2fc80,0x26666623,0x00019999,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xf7100000,0x71005bff,
    0x8805bfff,0x21fe205f,0x000007f8,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xf7000000,0x200039ff,0x101fffea,0x804c40bf,
    0x00000018,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x7db00000,0x32600001,0x00bf101f,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00600000,0x10088000,0x00000035,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_26_usascii_x[95]={ 0,2,1,0,0,1,1,1,1,1,0,1,1,0,
2,0,0,2,0,0,0,0,0,1,0,0,2,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,2,0,1,
1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,-1,1,0,1,0,0,0,0,0,1,1,
-2,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0, };
static signed short stb__arial_26_usascii_y[95]={ 21,4,4,4,2,4,4,4,4,4,4,7,18,13,
18,4,4,4,4,4,4,4,4,4,4,4,8,8,7,9,7,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,24,4,8,4,8,4,8,4,8,4,4,
4,4,4,8,8,8,8,8,8,8,4,8,8,8,8,8,8,4,4,4,10, };
static unsigned short stb__arial_26_usascii_w[95]={ 0,3,7,13,12,19,14,3,6,6,9,12,4,8,
3,7,12,7,12,12,12,13,12,11,12,12,3,4,12,12,12,11,22,17,14,15,15,14,13,16,14,3,10,15,
12,17,14,17,14,17,16,14,14,14,16,22,16,16,14,6,7,5,11,15,5,12,11,12,12,12,8,12,11,3,
6,11,3,17,11,13,12,12,8,11,7,11,12,17,12,12,12,8,2,8,13, };
static unsigned short stb__arial_26_usascii_h[95]={ 0,17,7,18,22,18,18,7,22,22,8,12,7,3,
3,18,18,17,17,18,17,18,18,17,18,18,13,17,12,8,12,17,22,17,17,18,17,17,17,18,17,17,18,17,
17,17,17,18,17,19,17,18,17,18,17,17,17,17,17,22,18,22,10,2,4,14,18,14,18,14,17,18,17,17,
22,17,17,13,13,14,18,18,13,14,18,14,13,13,13,18,13,22,22,22,5, };
static unsigned short stb__arial_26_usascii_s[95]={ 110,49,150,234,1,99,119,248,35,42,135,
97,145,172,252,248,134,72,176,1,34,162,61,59,86,35,218,251,84,122,71,
47,62,16,1,207,218,203,189,175,161,157,223,126,113,95,80,157,57,92,234,
192,22,147,1,231,214,197,142,85,27,49,110,92,248,121,74,83,48,108,176,
14,37,18,55,185,53,160,148,134,144,131,178,71,123,96,235,200,187,110,222,
26,23,14,158, };
static unsigned short stb__arial_26_usascii_t[95]={ 20,43,76,1,1,24,24,61,1,1,76,
76,76,76,61,1,24,43,42,24,61,24,24,61,24,24,61,42,76,76,76,
61,1,61,61,1,42,42,42,1,43,43,1,43,43,43,43,1,43,1,42,
1,43,24,43,24,24,24,43,1,24,1,76,21,69,61,24,61,24,61,24,
24,43,43,1,24,43,61,61,61,1,1,61,61,1,61,61,61,61,1,61,
1,1,1,76, };
static unsigned short stb__arial_26_usascii_a[95]={ 103,103,132,207,207,331,248,71,
124,124,145,217,103,124,103,103,207,207,207,207,207,207,207,207,
207,207,103,103,217,217,217,207,378,248,248,269,269,248,227,290,
269,103,186,248,207,310,269,290,248,290,269,248,227,269,248,351,
248,248,227,103,103,103,175,207,124,207,207,186,207,207,103,207,
207,83,83,186,83,310,207,207,207,207,124,186,103,207,186,269,
186,186,186,124,97,124,217, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_26_usascii_BITMAP_HEIGHT or STB_FONT_arial_26_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_26_usascii(stb_fontchar font[STB_FONT_arial_26_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_26_usascii_BITMAP_HEIGHT][STB_FONT_arial_26_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_26_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_26_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_26_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_26_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_26_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_26_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_26_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_26_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_26_usascii_s[i] + stb__arial_26_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_26_usascii_t[i] + stb__arial_26_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_26_usascii_x[i];
            font[i].y0 = stb__arial_26_usascii_y[i];
            font[i].x1 = stb__arial_26_usascii_x[i] + stb__arial_26_usascii_w[i];
            font[i].y1 = stb__arial_26_usascii_y[i] + stb__arial_26_usascii_h[i];
            font[i].advance_int = (stb__arial_26_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_26_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_26_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_26_usascii_s[i] + stb__arial_26_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_26_usascii_t[i] + stb__arial_26_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_26_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_26_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_26_usascii_x[i] + stb__arial_26_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_26_usascii_y[i] + stb__arial_26_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_26_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_26_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_26_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_26_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_26_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_26_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_26_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_26_usascii_LINE_SPACING
#endif

