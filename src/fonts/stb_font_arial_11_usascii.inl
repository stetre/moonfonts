// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_11_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_11_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_11_usascii_BITMAP_WIDTH         128
#define STB_FONT_arial_11_usascii_BITMAP_HEIGHT         48
#define STB_FONT_arial_11_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_arial_11_usascii_FIRST_CHAR            32
#define STB_FONT_arial_11_usascii_NUM_CHARS             95

#define STB_FONT_arial_11_usascii_LINE_SPACING           7

static unsigned int stb__arial_11_usascii_pixels[]={
    0x00810084,0x50008040,0x04040801,0x00000420,0x00200010,0xb7388010,
    0x7516e488,0x44dccc98,0xde83ae38,0x8e4baa1d,0x17772249,0x40752d22,
    0x33621dca,0x3bb30350,0x06ee4710,0x3a9377a6,0xd9223419,0x82b10440,
    0x21b05c4a,0x8ea28bba,0x70f43949,0x86cddc49,0x8a4408ba,0x82ce6aa3,
    0x11a8399c,0x20e8926b,0x58b1112d,0x4750b244,0x193bbb75,0x3661b24c,
    0x34743a84,0x675cd0b1,0x5d9d51dd,0x32215d54,0x9d301baa,0x3c9d8920,
    0x49ba8126,0x42c910e4,0x2293733a,0x1b2c4557,0x8750f74c,0x3a0ee3cb,
    0x2b505d60,0x132bb268,0x32055255,0x3624815d,0xa80ee1ec,0x913c43ab,
    0x4d4ea0b6,0x9a0eb12b,0x75345c0d,0x11660f88,0x8e7675cf,0x1a3a9a3a,
    0x952ce4dc,0x2e399372,0x2224cd13,0x0c893751,0x33a85922,0x1232e577,
    0x3bb86cb1,0x21621d4b,0xb3892e1e,0xa44b15a8,0x52569068,0x20b8fe27,
    0x0744b13a,0x162cea3b,0x89d42c91,0x0bebdd8d,0x3a21b1cc,0xea8ea1de,
    0x44eed881,0x66d448aa,0x40f65c1d,0xdc89771b,0x990b0eae,0x3edd983b,
    0x88d064ea,0x5c750364,0x8321d884,0x01d41c0d,0x00020800,0x40008100,
    0x91000000,0x35491132,0xddd983b3,0xfc8e20cd,0x003ea800,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x08000200,0x00000101,0x00400020,
    0x01111001,0x00000042,0xd9037720,0x322cc3db,0x4cd99d12,0xedc84ede,
    0x6ee4b100,0x220d8160,0x2740eddd,0x5b9d5075,0xeaae6744,0xe8794eee,
    0x75344d30,0x25896293,0x25916659,0x83a2d33b,0x42cd664b,0x92a73589,
    0x0741b00b,0x7506ccb3,0x3b9a5a82,0x741d10b3,0x1d4b8590,0x44d15dd4,
    0x645980be,0x85ab4392,0xd1344ee6,0x22c88bb9,0x1261b039,0x67545d90,
    0x3934753e,0xd307a162,0x50b7a0b3,0x88f93d17,0x91661eec,0x3bb54ea5,
    0x734570e8,0x83d71667,0xc8ea1b04,0x2951624c,0x99a2b558,0x903d8b33,
    0x503ee01d,0x08966e27,0x0ec589a6,0x116ab9b7,0x8e4d1d4f,0x82468858,
    0x34ccb30d,0x55a3a8b1,0x6ee41ede,0x049812e5,0x8ba8b7d1,0xd12d4932,
    0x261f10e8,0x647a2930,0x72cd224c,0x589d5667,0xe8d1c8d4,0x54589e21,
    0x4401d5a3,0x04980d35,0xb3a8b63d,0xeeeb81b9,0x11777541,0x76c41bbb,
    0x076dc4ee,0xddc97376,0x4ee99c41,0x117776c4,0x1d5a3a8b,0xeeedac40,
    0x1e424c4e,0x000ea1d1,0x13000000,0x00800000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x000e2000,0x00000000,
    0x00000000,0x04000000,0x4d17c3b1,0x0da8e41d,0x2a9dddd9,0x4eeef983,
    0x88fbbbe6,0x98e41f36,0x0499fc2f,0x2d12d493,0x265eeef9,0xeef99645,
    0x3bbbe20d,0xa95ecb13,0x2254b14c,0x8770bb26,0xb166113a,0xb44f1663,
    0x74c725e9,0x824cfaa4,0x3688b549,0x4b22cc0b,0x05892a49,0xab4e5260,
    0x24475343,0x362ea1dc,0xb30e8b30,0x664da268,0xc9b26392,0x3260933b,
    0x0b36885a,0x96cccecc,0x2c459149,0xc9cada00,0x220d9641,0x76543b84,
    0x8bbfbe60,0x222ddce9,0x391d1936,0x9dec6f26,0x1dbd3049,0x3bbbe6b0,
    0x3b333a63,0x43dddf32,0xd806eef8,0x930b7549,0x3b8588b1,0x2b30ef54,
    0x027661e8,0xcdaa4da2,0x75591931,0xbacc1267,0x4c0b3485,0x22499645,
    0xd3441626,0x826c4b6a,0x5c3e82bd,0xb3345d43,0x20598744,0x8fe49368,
    0x4ceebd49,0x21ec9304,0x22cc0b30,0x1344932c,0x07c41c0b,0x801aa05d,
    0x33b9d43b,0x40b34b8b,0x8fc49368,0x4ceeb749,0x4930eeef,0x3e6d10e8,
    0x91666eee,0x87bbbe65,0x00682058,0x00000000,0x00000000,0x00000000,
    0x00000000,0x04eee800,0x01101000,0x6eeea841,0x02011008,0x22040808,
    0x80808100,0x17777cc0,0x2c1ae12a,0x37721e20,0x6ccb7361,0x42c750ec,
    0x88ee6c3b,0x6e6c3dcd,0x390ee641,0x5f66cd26,0x476951eb,0xbb53dbd9,
    0x21d12cc3,0x42ce84ec,0x8db02bd9,0x44eab13a,0x2a111976,0x3a8b1163,
    0x32cc6231,0xb11732c7,0x2931ca4c,0x1e64735a,0x425562b3,0x49996459,
    0x3262ce4c,0x0355c4b9,0x75cb30b1,0x9162750d,0xdd882b83,0x2e68725c,
    0x25b44ccd,0x98e67339,0x7558e60f,0x263a8b30,0x200e8e44,0xe8835226,
    0x71a874c1,0x1a2ccea7,0x32b9c4e6,0x26689d4b,0x4c7970e3,0xad8e6733,
    0x07558e65,0x9263b8b3,0x263dccf8,0x755ecb13,0x0e40f442,0x3a21b9b1,
    0x641265ac,0xd99b30dc,0x6e41edc8,0x7307c42d,0x73b9cce6,0x07558e67,
    0x930744b3,0xdc8d11d4,0x8baaaa1c,0x000101e8,0x00000570,0x00000000,
    0xdddf3000,0x903a4983,0x76468005,0x000ec5ee,0x00000000,0x00000000,
    0x00000000,0x10400000,0x81111104,0x3502e200,0x040203a8,0xddd56880,
    0x7640441d,0x00000006,0xf86c0000,0x176654b0,0x03bb30d5,0x419b5037,
    0x4f5709b8,0x8038b12b,0x001ddeda,0x00000000,0x56cd5c00,0x5ec4a839,
    0x3aa07aa2,0x0fa80eee,0x9aae1bb3,0x3aa1022b,0x01980eee,0x00000000,
    0x9bc88000,0x262cc1cc,0x81cda8b4,0x21cda81b,0x886223a8,0x00000000,
    0x00000000,0x176bb000,0x151a81b1,0x41b81910,0x100000ba,0x00599999,
    0x00000000,0x32000000,0xdded8994,0x00000003,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_11_usascii_x[95]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, };
static signed short stb__arial_11_usascii_y[95]={ 8,0,0,0,0,0,0,0,0,0,0,2,7,5,
7,0,0,0,0,0,0,1,0,1,0,0,2,2,2,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,2,0,2,0,2,0,2,0,0,
0,0,0,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,0,0,3, };
static unsigned short stb__arial_11_usascii_w[95]={ 0,2,4,6,6,9,7,2,3,3,4,6,2,3,
2,3,6,3,5,6,6,6,6,6,6,6,2,2,6,6,6,5,10,8,7,7,7,7,6,8,7,2,5,7,
6,8,7,8,7,8,7,7,6,7,7,10,7,7,6,3,3,3,5,7,3,6,6,5,5,6,4,5,5,2,
3,5,2,8,5,6,6,5,4,5,3,5,5,8,5,5,5,4,2,4,6, };
static unsigned short stb__arial_11_usascii_h[95]={ 0,8,4,9,10,9,9,4,11,11,4,5,3,1,
1,9,9,8,8,9,8,8,9,7,9,9,6,8,5,3,5,8,11,8,8,9,8,8,8,9,8,8,9,8,
8,8,8,9,8,9,8,9,8,9,8,8,8,8,8,10,9,10,5,1,3,7,9,7,9,7,8,9,8,8,
11,8,8,6,6,7,8,8,6,7,8,7,6,6,6,9,6,11,11,11,3, };
static unsigned short stb__arial_11_usascii_s[95]={ 125,88,95,67,41,88,98,100,1,33,90,
76,107,124,125,106,39,9,36,52,29,22,81,60,110,1,125,122,69,110,83,
42,22,13,107,117,1,91,115,69,99,53,63,80,73,64,56,58,45,30,37,
8,24,16,12,1,117,109,102,48,59,37,63,103,103,73,74,67,46,87,78,
24,83,125,18,31,125,100,115,80,89,96,121,48,20,54,94,48,109,52,57,
13,10,5,117, };
static unsigned short stb__arial_11_usascii_t[95]={ 10,23,40,1,1,1,1,40,1,1,40,
40,40,40,30,1,13,32,32,13,32,32,1,32,1,13,23,23,40,40,40,
32,1,32,23,1,32,23,23,13,23,23,13,23,23,23,23,1,23,13,23,
13,23,13,23,23,13,13,13,1,13,1,40,44,40,32,1,32,13,32,13,
13,13,1,1,23,13,32,32,32,13,13,32,32,23,32,32,40,32,1,40,
1,1,1,40, };
static unsigned short stb__arial_11_usascii_a[95]={ 44,44,56,88,88,140,105,30,
52,52,61,92,44,52,44,44,88,88,88,88,88,88,88,88,
88,88,44,44,92,92,92,88,160,105,105,114,114,105,96,123,
114,44,79,105,88,131,114,123,105,123,114,105,96,114,105,149,
105,105,96,44,44,44,74,88,52,88,88,79,88,88,44,88,
88,35,35,79,35,131,88,88,88,88,52,79,44,88,79,114,
79,79,79,53,41,53,92, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_11_usascii_BITMAP_HEIGHT or STB_FONT_arial_11_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_11_usascii(stb_fontchar font[STB_FONT_arial_11_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_11_usascii_BITMAP_HEIGHT][STB_FONT_arial_11_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_11_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_11_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_11_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_11_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_11_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_11_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_11_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_11_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_11_usascii_s[i] + stb__arial_11_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_11_usascii_t[i] + stb__arial_11_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_11_usascii_x[i];
            font[i].y0 = stb__arial_11_usascii_y[i];
            font[i].x1 = stb__arial_11_usascii_x[i] + stb__arial_11_usascii_w[i];
            font[i].y1 = stb__arial_11_usascii_y[i] + stb__arial_11_usascii_h[i];
            font[i].advance_int = (stb__arial_11_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_11_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_11_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_11_usascii_s[i] + stb__arial_11_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_11_usascii_t[i] + stb__arial_11_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_11_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_11_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_11_usascii_x[i] + stb__arial_11_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_11_usascii_y[i] + stb__arial_11_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_11_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_11_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_11_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_11_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_11_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_11_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_11_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_11_usascii_LINE_SPACING
#endif

