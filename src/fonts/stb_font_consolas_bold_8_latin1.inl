// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_bold_8_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_bold_8_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_bold_8_latin1_BITMAP_WIDTH         256
#define STB_FONT_consolas_bold_8_latin1_BITMAP_HEIGHT         34
#define STB_FONT_consolas_bold_8_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_consolas_bold_8_latin1_FIRST_CHAR            32
#define STB_FONT_consolas_bold_8_latin1_NUM_CHARS            224

#define STB_FONT_consolas_bold_8_latin1_LINE_SPACING           5

static unsigned int stb__consolas_bold_8_latin1_pixels[]={
    0x19b86231,0x88066398,0x46a13200,0x730aa038,0x5c383590,0x7033710c,
    0x20203225,0x222a81c9,0x730d419b,0x80530388,0x29853038,0x2a0e2298,
    0x540d540c,0x3370cdc1,0xa82980e2,0xb8298483,0x510cdc19,0x306ae0e2,
    0x418a9269,0x7441dc38,0x50b12e5d,0x41c40cc3,0x205cc09a,0x066a1a3b,
    0x3a649895,0x4363623e,0x22a20a88,0x29a89a62,0x15502662,0x7035276c,
    0xa8381550,0xc896b6a1,0x2a04c21f,0x1a82e619,0x24ee9870,0x05543ee9,
    0x433502e6,0xa9886a59,0x5b49a4c1,0x70e96c3a,0x5425c9dd,0x27dd52c3,
    0x3ba63ee9,0xe98fba63,0xd31a683e,0x2683a87d,0x6e564d1d,0xd1c9a391,
    0xc9a39164,0xa9eec4d1,0xd89eec44,0x44f7623d,0x4f7623dd,0x3ba21dba,
    0xd8874b24,0x227bb13d,0x8fba23ee,0x9990ed9d,0x3a23ee88,0x98fba23e,
    0x5ae5a754,0x3b5499cc,0x972ced4b,0x6ecc2c9e,0x8ecee163,0x23b34766,
    0x8e434766,0x3a668ec6,0x363d3d81,0x32599bb1,0x3a68e4d1,0x23934720,
    0x255eb6e6,0x56ddeb6e,0xd7335cc7,0x3d756b98,0x2fa27964,0xb99eb6e3,
    0xf2c9e596,0xd88ee4ec,0x593cb23f,0xa4cf2c9e,0x167b2d3a,0xd0b3a498,
    0x2e79dc59,0x2166ba84,0x74763d3b,0x8ec7a3b1,0xd1d83b1e,0x3223b1e8,
    0x3a590e82,0x32399bb0,0x3a68e4d1,0x23934720,0xed8672e6,0x32e33974,
    0x5dab2e19,0x5ab2e6ac,0x2590e8ba,0x39707647,0x965ab2e3,0x3b934b26,
    0x593d541d,0x964d2c9a,0xb45d4626,0x99cc5dbc,0x71ee1ee4,0xaf7447dd,
    0x2e166acb,0x9643a593,0x643a590e,0x91a681d2,0x583a83a5,0xccd8fba6,
    0x2593cb24,0x4f2c8b27,0x26f44f2c,0x8a6f4491,0x5b7aa4de,0x37aa6dea,
    0x74cdb756,0x3a224c3e,0x26dbd54d,0x8fba63ee,0x3bae3ef9,0xe98fba63,
    0x98fba63e,0x272dbd35,0x149a4c6d,0x5c3c8879,0x6f549103,0x96cc4d36,
    0x3b663ed9,0xd98fb663,0x43d1e43e,0x06cc3ed9,0x90be88b5,0x1f74c115,
    0x87447dd3,0x3ba63ee9,0x10100083,0x00000000,0x00002093,0x00120710,
    0xa9c80000,0x7749a4c7,0x40330770,0x79326400,0x28000000,0x2a80065c,
    0x41530171,0x4c0000cb,0x00000000,0x00000000,0x00000000,0x00000000,
    0x02894400,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x19b80000,0xa839866a,
    0x43350711,0x0711a839,0x0ea0cd40,0x306ae14c,0x03886a07,0x3814c040,
    0x02a82673,0x1dd45000,0x04404033,0x11020222,0x0b260dc0,0x10011022,
    0x20820811,0x26e02019,0x26a02a01,0x55453711,0x09a82a21,0x0d545371,
    0x884d4151,0x066a0edd,0x2e60e095,0x0a204d40,0x7933c066,0xb4409a87,
    0x332a49bd,0xd893b6a2,0xdfb9d46d,0x37a60ea6,0x7ccfb264,0xe98f763e,
    0x1ed56a4c,0xaef4411f,0x10e46de8,0x4f3a67d9,0x4c2c4d1c,0x98c543ee,
    0x46d4b665,0x27db33dd,0x7db33ed9,0x6f4cfb66,0x3a69bd34,0x2a9bd34d,
    0x643e449b,0x3e469d47,0x643e43e4,0x5e564707,0x6ec5a750,0x6cc19956,
    0x593d2a0d,0x33f21d1a,0x9c93baa6,0x1934a879,0x272a0654,0xd34a8625,
    0x0b21dc3d,0x27513bf2,0x234720db,0x2a68ec1c,0x6f4c62d3,0x99ae6311,
    0x312624c4,0x312624c9,0x66d44989,0x33a16740,0x33a34ea2,0x33a16742,
    0x9ae16742,0x2751a8dc,0x1b99a596,0xf3a8efaa,0x49334564,0x3d2a6ce9,
    0x7641db9b,0x3b29d912,0x88bfa25d,0x26f21b71,0xf93b0b27,0x913a81c8,
    0x2634727f,0x750d86c4,0x24bba4da,0x266acb88,0x312624c4,0xf99f7cc9,
    0x267df33e,0x47bd53ef,0x2b264ac9,0xc99a2ea4,0x992b264a,0x92b264ac,
    0x2f2b20d9,0x2b2d1750,0x74337668,0x8f7aa6d8,0x40726de9,0x2993cea6,
    0xab4c6886,0x3345dcd3,0x6de8826d,0x91a5912e,0x96887703,0x2c8361a5,
    0x4da2ea1d,0x36a5dd34,0x31266dea,0x324c4989,0x224c4989,0x73c56449,
    0x3775cddd,0x775cdbd3,0xeb9bbae6,0x89bbae6e,0x479b30ae,0xdbd36de9,
    0x75c37232,0x440750ed,0xd5340b16,0x51ef447b,0x4bb667db,0x37a64dd8,
    0x641e52a4,0x7457b623,0xd9a7546e,0x267dd70e,0x263a83de,0x5b7a63ed,
    0x20036249,0x9fd54fea,0x7f553faa,0x3e69df34,0x269df34e,0x439914ef,
    0x6c363b0d,0xb1d86c01,0x1d86c761,0x0b88761b,0x30000000,0xb0553803,
    0x8080007d,0x500c0000,0x000001bb,0x00160000,0x00053144,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x04400000,0x22298530,0x17718b83,0x530e8ecb,0x0019b826,0x20004453,
    0x000994c0,0x10426550,0x803315c4,0x8331c408,0x04b80888,0x84400844,
    0x41080800,0x88810108,0x22211110,0x04104108,0x22041041,0x08822220,
    0x8383eeb8,0x1506609a,0xc9962ee3,0x31232659,0x43776e17,0x0b6e3fe8,
    0x266c5bd1,0x4d5c9193,0xd98fba25,0x31a2ee48,0xbf501d4b,0xc8751441,
    0x10e545cc,0x22d727bb,0x4f3994ed,0xb0b13dd8,0x32d5dc91,0xa9f6ccdb,
    0x2ddb57ee,0x26ee1d2c,0x23b1b9a6,0x2e7bd51d,0x8fbae4ed,0x22f4cf2b,
    0x997a65e9,0xd166ee5e,0x5065c459,0x376e29db,0x6dcdb591,0x0d0ba66c,
    0x6f441971,0x9773cb24,0x2c42de81,0x1bb09775,0x9dd52f4c,0xcd99322e,
    0x765eb6e2,0x9b912a59,0x8b16b98b,0xd970eefb,0x12634441,0x3a25b12e,
    0x1b16f43b,0x934ee195,0x55c499a5,0x83a7ba59,0x2c458858,0x0eceb962,
    0xa86e61ae,0x4395b68c,0x3cee6acc,0x0e7dd726,0x58b986e6,0x86e634b2,
    0x52c41ec8,0x1b9910bb,0x2d1952c4,0x33663cab,0x5e4672e2,0xb7912a5d,
    0x58b565cb,0x13ae2ad8,0x83a12634,0x3207645a,0x986756c7,0x9f7aa4ad,
    0x70ff5c49,0x88588f15,0xb9622c45,0xbd82c883,0xddcb4ea5,0x5c7df30c,
    0x8f7663ee,0x261b1b06,0x0fba64ef,0x1764cb7b,0x40eca962,0x52c40eec,
    0x21c55da7,0xca6f442b,0xda76c6d9,0xdbd50c98,0x4bdd9162,0x4c681ebb,
    0x81d12544,0xb1e74449,0x16f41b9b,0xab8932cc,0x987bae3c,0x57f665fd,
    0xbfb35fd9,0x320ae066,0x1a750eb8,0x400ee120,0x2e325efb,0x0091370e,
    0x3261d719,0x557f662e,0x1ecb45ab,0xb4eabfb3,0x815c5ccc,0xb01ea720,
    0xbdf10064,0x9bb82ee6,0x755bfaa6,0xefc83a4f,0xf1591266,0xf91e7321,
    0x1260dea8,0x0000d157,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x11040000,0x20404400,0x22111020,
    0x42220200,0x01102008,0x44001000,0x2a005d43,0x6c6662d3,0x754081d1,
    0xa8d1975f,0x770dcd0c,0x10ee28b8,0x31054c43,0x8715314c,0x19b86229,
    0x7519b871,0x2a00a277,0xad46ee0a,0x99260888,0x89dd73ee,0x361f21e8,
    0xbd334722,0xf30fb727,0xeba6f4c5,0xb5166c3d,0x377624c3,0x3ba624c6,
    0x5dcb6e65,0x553b6a4b,0x4caee6d3,0x442dc59c,0xc887b61e,0x41995b4a,
    0x439931d9,0x47b930ea,0x5b9aa59d,0xd70e0f6c,0x74350c54,0x26d3312a,
    0x4c175d74,0x94426609,0x4c01cccc,0x1e99e775,0xc9ec1674,0x3912668a,
    0x24c57b1e,0xad8966ae,0x76547763,0x54332763,0x31d663bb,0x8f2ee5b7,
    0xd17568ca,0x2ce9376a,0x85b0eb22,0x4b7a21ed,0x86e46ddc,0x47663bd8,
    0x75b12ed8,0x221b3254,0x800002dd,0x2311808a,0x00000992,0xb9b72d80,
    0x95931ec4,0xfdd91e88,0xd1c9f7cc,0xf98aaea1,0xa89dd73e,0x5c42ee0b,
    0x4332361d,0x41261a98,0xa8ef2638,0x01b7a6d3,0x545098f7,0x0d3974ef,
    0x2e3575c1,0x8790c61b,0x183110b8,0x05188ddc,0x00000000,0x64000000,
    0x964072e3,0x906c6eeb,0x4e4499a3,0x43bbb678,0x22795c49,0x459912cc,
    0x06646c39,0xda849893,0x2750624d,0x00000006,0x00000000,0x00000000,
    0x00000000,0xefb80000,0x43600776,0x3347201d,0xb81eec89,0x75d3be62,
    0x0000003d,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_bold_8_latin1_x[224]={ 0,1,0,0,0,0,0,1,1,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__consolas_bold_8_latin1_y[224]={ 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,3,2,
3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,0,-1,0,-1,0,-1,0,-1,-1,
-1,-1,-1,0,0,0,0,0,0,0,-1,1,1,1,1,1,1,-1,-2,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,0,-1,-1,-1,-1,
-2,-1,-1,-1,-1,1,2,2,-1,-1,-1,0,-1,-1,-1,1,-1,2,5,-1,-1,1,-1,-1,-1,0,-2,-2,-2,-2,
-2,-2,-1,-1,-2,-2,-2,-2,-2,-2,-2,-2,-1,-2,-2,-2,-2,-2,-2,1,-1,-2,-2,-2,-2,-2,-1,-1,-1,-1,
-1,-1,-1,-2,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,
 };
static unsigned short stb__consolas_bold_8_latin1_w[224]={ 0,2,4,5,5,5,5,2,3,4,4,5,3,4,
2,4,5,4,4,4,5,4,5,4,4,4,2,3,4,4,4,3,5,5,5,4,5,4,4,5,5,4,4,5,
4,5,5,5,5,5,5,4,5,5,5,5,5,5,4,3,5,3,5,5,3,4,5,4,4,4,5,5,4,4,
4,5,4,5,4,5,5,4,5,4,4,4,5,5,5,5,4,4,2,4,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,2,4,5,5,5,
2,5,4,5,4,4,4,4,5,4,4,4,4,4,5,5,5,2,2,4,4,4,5,5,5,4,5,5,5,5,
5,5,6,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,4,5,
4,4,4,4,5,4,4,5,4,4,4,5,4,4,5,4,5,5,5,5,5,5,5,4,5,4,4,5,5,5,
 };
static unsigned short stb__consolas_bold_8_latin1_h[224]={ 0,7,3,6,7,7,7,3,8,8,4,5,4,2,
3,7,7,6,6,7,6,7,7,6,7,6,6,7,6,4,6,7,8,6,6,7,6,6,6,7,6,6,7,6,
6,6,6,7,6,8,6,7,6,7,6,6,6,6,6,8,7,8,4,2,3,6,7,6,7,6,6,7,6,6,
8,6,6,5,5,6,7,7,5,6,7,5,4,4,4,6,4,8,9,8,3,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,7,7,6,6,6,
9,7,3,7,5,4,3,2,5,3,4,5,4,4,3,6,7,2,2,4,5,4,6,6,6,7,7,7,7,7,
7,7,6,8,7,7,7,7,7,7,7,7,6,7,8,8,8,8,8,4,7,8,8,8,8,7,6,7,7,7,
7,7,7,8,6,7,7,7,7,7,6,6,6,6,7,6,7,7,7,7,7,5,6,7,7,7,7,8,8,8,
 };
static unsigned short stb__consolas_bold_8_latin1_s[224]={ 254,240,213,182,216,115,121,223,117,68,171,
72,181,237,201,138,155,194,1,161,45,166,171,204,177,238,253,182,12,117,23,
186,99,17,56,196,39,51,34,201,28,199,212,188,177,166,155,234,6,93,249,
217,243,222,232,226,220,214,209,73,228,35,128,245,209,172,149,161,110,150,144,
46,133,128,39,115,110,78,107,92,127,133,90,69,207,112,122,150,139,34,134,
83,4,88,226,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,
138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,254,245,248,
74,86,104,1,190,204,99,67,161,218,237,101,232,145,96,156,166,195,28,143,
242,251,185,62,176,40,80,98,94,88,82,76,70,52,58,121,25,41,36,31,
26,21,16,11,6,1,248,44,50,56,62,77,190,210,127,105,121,111,182,63,
170,165,159,154,193,1,30,51,138,143,148,133,188,18,7,13,23,176,46,198,
204,222,228,234,84,57,243,64,105,240,13,19,7, };
static unsigned short stb__consolas_bold_8_latin1_t[224]={ 1,1,26,19,1,11,11,26,1,1,26,
26,26,26,26,11,11,19,26,11,26,11,11,19,11,19,11,11,26,26,26,
11,1,26,26,11,26,26,26,11,26,19,11,19,19,19,19,11,26,1,19,
11,19,11,19,19,19,19,19,1,11,1,26,26,26,19,11,19,11,19,19,
11,19,19,1,19,19,26,26,19,11,11,26,19,11,26,26,26,26,19,26,
1,1,1,26,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,1,11,11,
19,19,19,1,11,26,11,26,26,26,26,26,26,26,26,26,26,26,19,11,
26,26,26,26,26,19,19,19,11,11,11,11,11,11,11,19,1,11,11,11,
11,11,11,11,11,19,1,1,1,1,1,1,26,1,1,1,1,1,1,19,
1,1,1,1,1,11,1,19,1,1,1,1,1,19,19,19,19,1,19,1,
1,1,1,1,26,19,1,11,11,11,1,1,1, };
static unsigned short stb__consolas_bold_8_latin1_a[224]={ 70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_bold_8_latin1_BITMAP_HEIGHT or STB_FONT_consolas_bold_8_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_bold_8_latin1(stb_fontchar font[STB_FONT_consolas_bold_8_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_bold_8_latin1_BITMAP_HEIGHT][STB_FONT_consolas_bold_8_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_bold_8_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_bold_8_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_bold_8_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_bold_8_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_bold_8_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_bold_8_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_bold_8_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_bold_8_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_bold_8_latin1_s[i] + stb__consolas_bold_8_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_bold_8_latin1_t[i] + stb__consolas_bold_8_latin1_h[i]) * recip_height;
            font[i].x0 = stb__consolas_bold_8_latin1_x[i];
            font[i].y0 = stb__consolas_bold_8_latin1_y[i];
            font[i].x1 = stb__consolas_bold_8_latin1_x[i] + stb__consolas_bold_8_latin1_w[i];
            font[i].y1 = stb__consolas_bold_8_latin1_y[i] + stb__consolas_bold_8_latin1_h[i];
            font[i].advance_int = (stb__consolas_bold_8_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_bold_8_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_bold_8_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_bold_8_latin1_s[i] + stb__consolas_bold_8_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_bold_8_latin1_t[i] + stb__consolas_bold_8_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_bold_8_latin1_x[i] - 0.5f;
            font[i].y0f = stb__consolas_bold_8_latin1_y[i] - 0.5f;
            font[i].x1f = stb__consolas_bold_8_latin1_x[i] + stb__consolas_bold_8_latin1_w[i] + 0.5f;
            font[i].y1f = stb__consolas_bold_8_latin1_y[i] + stb__consolas_bold_8_latin1_h[i] + 0.5f;
            font[i].advance = stb__consolas_bold_8_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_bold_8_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_bold_8_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_bold_8_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_bold_8_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_bold_8_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_bold_8_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_bold_8_latin1_LINE_SPACING
#endif

