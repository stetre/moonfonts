// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_bold_24_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_bold_24_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_bold_24_usascii_BITMAP_WIDTH         256
#define STB_FONT_arial_bold_24_usascii_BITMAP_HEIGHT         86
#define STB_FONT_arial_bold_24_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_bold_24_usascii_FIRST_CHAR            32
#define STB_FONT_arial_bold_24_usascii_NUM_CHARS             95

#define STB_FONT_arial_bold_24_usascii_LINE_SPACING          16

static unsigned int stb__arial_bold_24_usascii_pixels[]={
    0x2f2a0791,0x20199101,0x1cb83cb8,0xaa98554c,0x555511aa,0x332aa003,
    0x0570000a,0x4de5d440,0x44066200,0x51000099,0x19884cc1,0x988006a2,
    0x20009bcb,0x201acca9,0xba8800cc,0x791001ac,0x264c3320,0x51015510,
    0x703fd035,0xff107fff,0x8bfff301,0x7fdc0ff8,0x29ffff92,0x205ffffb,
    0xffffffc8,0xf3001dff,0xfff9003d,0x3207ffff,0x2ffc83ff,0xffb104a8,
    0x2ebff1df,0xefffd9ff,0x7fffe401,0x7d402fff,0x0dffffff,0x7dc02fd8,
    0x00dfffff,0x7fcc2fdc,0x3f60df90,0x7fdc3fff,0xfb86fb83,0x7fc40fff,
    0x45fffd80,0x2ffb85fd,0x2e9ffff9,0xf505ffff,0x97557bff,0x75405ffd,
    0x881dffff,0xfffffffe,0x6ff985ff,0x7f447ff8,0xfffffd04,0x3feebffd,
    0x0ffffffe,0xfffffe88,0xf505ffff,0xffffffff,0x104fb81d,0xfffffffd,
    0x1fec01ff,0x09fb3fd4,0x7ffffffb,0x7c41ffdc,0x83ff902f,0x6ff80ff8,
    0xa981ff98,0xba7fc40a,0x3fee02ff,0x17fd400b,0xfffffff8,0x1bfffc85,
    0xd07fff93,0x27fd41ff,0x3ee13fea,0xbfff52ef,0x2633ffee,0xffd85ffd,
    0xfff931bf,0x1cfffb85,0x989fff93,0xbfff906f,0x09fff713,0x2fe40ffc,
    0xeff987ff,0x2a27ff98,0x20dfd01a,0x7fc41ffa,0xfd84ff80,0x88133107,
    0x05ff74ff,0x15113fe6,0x07fe2662,0xfb9d3ff5,0x0fffcc3f,0x5c0fffb8,
    0x87ff23ff,0x209dffb8,0x7fe43ffd,0xf88dff75,0x0fffcc7f,0xf10fffb8,
    0x3fee05ff,0x7c40ff87,0xfffa81ff,0x32e7f980,0xffccefec,0xc8bff22d,
    0x013312ff,0x3ea07fee,0x407fc42f,0x04ff84ff,0xff885ff7,0x3a05ff74,
    0x3fffaa4f,0x87f57feb,0x3519d6fd,0x202ffe41,0x7fc42ffe,0xff91bfe6,
    0x7ffc9fff,0xfbaffcc1,0x21ffe84f,0x7f405ffb,0x80bff52f,0xb85fd01a,
    0x026e04ff,0xfffd2fdc,0xbfffffff,0xff507fec,0x4c0ffee9,0x2ffa82ff,
    0x3e207fc4,0x817fc44f,0x7fc42ffb,0xf505ff74,0x7e7ffd4b,0x91be5fff,
    0x6c09d1ff,0x7fe402ff,0xf98ffd84,0x7fffe43f,0x221ffe4f,0x07ff75ff,
    0x7fec3ffb,0xba7fe402,0x320003ff,0x017fec4f,0x7647fb00,0xfffeeffe,
    0xf31ffa4e,0x40ffeebf,0xff984ff8,0x2607fc43,0x0ffd43ff,0x7c42ffb8,
    0xb05ff74f,0xf17fe65f,0x307ec7ff,0x7c0bffff,0x7fdc01ff,0xfcbffa85,
    0x6ffdc40f,0x507ffa09,0x17feebff,0xffe83ffe,0xdaffdc01,0x999982ff,
    0x237d4099,0x20001ffe,0x27fb81ff,0x47ff84fd,0x7ff75ff9,0xfe82ffc0,
    0xb03fe20f,0x0ffb83ff,0xf885ff70,0xf05ff74f,0xb03ff61f,0x20fe43ff,
    0x83effffd,0x7d400fff,0xffdff05f,0x213fea0d,0x7fec3ffd,0xf98fff75,
    0x007ffc7f,0x7ff5bfea,0x7ffffcc1,0xf07fc42f,0x220003ff,0x7cbf907f,
    0x4c7ff82f,0x07ff76ff,0xffa837f4,0x261ff14f,0x7fd85fff,0xf10bfee0,
    0x10bfee9f,0x213fe2df,0x03fa0ffc,0x1bffffaa,0xfb803ffd,0xffff904f,
    0x213fea05,0xfc9bfffa,0xbfff75ff,0xe89ffd53,0x7fdc01ff,0xf985ffb4,
    0xe82fffff,0x00bffa2f,0x26237d40,0xaff99cfe,0xf31ffe09,0x80ffeebf,
    0x3ff607fe,0x3ea1ff14,0x07fe80ff,0xff10bfee,0xf30bfee9,0x3a0ffe6b,
    0xd01fe26f,0x7ec5ffff,0x3ff6042f,0x1ffff303,0x6c13fea0,0xffffffff,
    0xfffdff75,0xffd81fff,0xb9ffe403,0x555444ff,0x4fc82ffe,0x1b80fff2,
    0xffe89f90,0xffffffff,0xff31ffa5,0xe80ffee9,0x7fff706f,0x7fcc3fe2,
    0x207fd85f,0x7fc42ffb,0xf985ff74,0xf885ff54,0xd013ee4f,0x7e4bff39,
    0x7c4ef46f,0x3ffa02ff,0x813fea05,0xff9cfffc,0xff75ff75,0xdff901bf,
    0x997ffc40,0x3f600fff,0x2e6fa82f,0xfff306ff,0x7f42fe83,0xffffffff,
    0xa83ffa5f,0x07ff74ff,0xeff82ff4,0xfb03fe20,0x00ffb83f,0xff885ff7,
    0xff05ff74,0xff913fe2,0xa883fea7,0x9bf69d2b,0xfd13fff8,0xe80dffdf,
    0x3fe602ff,0x3fe21804,0x04c5ff75,0x109fff10,0xffe8dffb,0x2ffe980d,
    0x3fe27f88,0x37fec0cf,0xf9103fe2,0x339fd33d,0xf91ffe41,0x80ffee5f,
    0x3ff984ff,0x3e607fc4,0x80ffd43f,0x7fc42ffb,0xfb05ff74,0x7d47bf63,
    0x82ffbbff,0x3fa9d7fe,0x5efffdc4,0x01ffffeb,0xf301ffee,0x220033df,
    0x05ff75ff,0xcefffb80,0x41ffffca,0xcacfffe8,0xd02ffffd,0x7fffd43f,
    0x42ffffcc,0x4bf906fa,0xdff102ff,0x7dcdff55,0x05ff303f,0xff885ff3,
    0x2627fc40,0x5ff702ff,0xff74ff88,0x3ea7f705,0xffffffff,0xbff701ff,
    0x703ff9bd,0xffffffff,0x7f4419ff,0x7c403fff,0xf1005fff,0x00bfeebf,
    0x3ffffee0,0xf102ffff,0xffffffff,0x21fe405f,0xfffffffb,0xd04fc84f,
    0x807fe27f,0x2ffffffc,0x7d40ffee,0x42ffa80f,0x7fc40ff8,0xf704ff84,
    0x74ff885f,0x3df305ff,0x36273ae2,0x81310bdf,0x5fffffff,0x3ffff660,
    0x21ffffce,0x7005ffff,0x2200bfff,0x05ff75ff,0x3fff6600,0x5c400cef,
    0x0bdffffd,0x6cc2fd40,0xd02effff,0x54bfe05f,0xfffb807f,0x81ffdc2f,
    0x3ff504fd,0xff80ff88,0xf906fb84,0x74ff885f,0x3ff205ff,0x17fd4002,
    0x077ffee2,0x36209880,0x00d5d46f,0x260004c0,0x00133109,0x00013100,
    0x04c00044,0x06600620,0x00262198,0x3e000088,0x1ffd880f,0x7fc07fc4,
    0x107fc40e,0xf883ffd3,0x405ff74f,0xc800bffe,0x02f404ff,0x00066000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xfb85fa80,0x7fc40fff,
    0x45fffd80,0x3fff24fc,0x9ffff90f,0x417fffee,0xacdffffc,0x03fffedc,
    0x000004e8,0x00000000,0x00000000,0x00000000,0x00000000,0x0ff40000,
    0x4417ffdc,0xffe980ff,0xffd3fc45,0x7fffe47f,0x0bffff74,0x7ffffe4c,
    0x000cffff,0x00000011,0x00000000,0x00000000,0x00000000,0x00000000,
    0x81e44000,0x99100aba,0x541d5401,0x9815731c,0x5511aaaa,0x2a600355,
    0x0001aaba,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x002aa200,0x01330544,0x26015550,0xa88001aa,
    0x2035301a,0x98000aa9,0x00999999,0x0e540175,0x00377100,0x54402a60,
    0x0555101a,0x006b32a6,0xaa86f2e6,0xaaaaaaaa,0x0015530a,0x55301555,
    0xa82aaa05,0x555400aa,0x7ffff4c0,0x3fffa204,0xe805ff8e,0x7ff4c1ff,
    0x22000dff,0x7ff4c5ff,0x17fe42ff,0x3fffe600,0x7f444fff,0x0ff885ff,
    0xffffe880,0xfff5001e,0x4ffb83bf,0xd88bff30,0x0dffffff,0x49ffff50,
    0xfffffffe,0x5ff92fff,0xd07ffb00,0xfff03fff,0x2604ffd8,0x7ffc47ff,
    0xf883ffff,0xffefffff,0x41ffe805,0x4ffffffe,0x997fe200,0x3fffffff,
    0x7000bff2,0x9fffffff,0x2ff8cfb8,0xfc8027dc,0x805febdf,0x6ffffffb,
    0xf9827fdc,0x7ffff45f,0xe80effff,0x3fa2deff,0xffffffff,0x005ff92f,
    0xff889ff7,0x37fcc3ff,0xfc81ffea,0x467fe44f,0xffc86ffa,0x0bfff51e,
    0x7cc3ffd0,0x0ffe88cf,0x74bff100,0x7ffb8bff,0x9000bff2,0x599999ff,
    0x49fb2fd8,0xff000ff8,0x100ffd4d,0xff915fff,0x9827fdc5,0x3bfea5ff,
    0x07fff511,0x26620fff,0xefff9999,0x3005ff90,0xfffa8dff,0x427fdc5f,
    0xffd02fff,0x7ec7ec83,0x217ff41f,0xfe805ffc,0xa83ff21f,0x215102ff,
    0xdff15ff8,0xff93ffd8,0xfd006a25,0x647fe00d,0x8013ee5f,0x3ff91fff,
    0x911ffdc0,0x827fdc59,0x3ff25ff9,0x225ffc82,0x0019eff9,0x7e43fffb,
    0xf04ccc2f,0x7ffe41ff,0x417fec7f,0xff985ffc,0x21ffe006,0x7fd40fff,
    0x21ffe805,0x3ff22ffb,0x77fff441,0x9ff35ffa,0xff94ffb8,0x03dfffb5,
    0xf004d7fe,0x7c53fa5f,0x3ff2000f,0x6c06ffbe,0xffb801ff,0x5cbff304,
    0xd8181eff,0x807fffff,0x7e42fffb,0xb1bff62f,0x677f43ff,0x03ffa1ff,
    0x3f21ffe6,0xffeb804f,0xf987ff83,0x1ffe805f,0x3f2fbfa2,0x7fffc45f,
    0xf35fffff,0x95ffb8bf,0xffffffff,0xffff983f,0xdfd81eff,0x09f72ffa,
    0xbffffd00,0xd9ffe801,0x4ffb83ef,0x7c4bff30,0x201cefff,0x07fffffd,
    0x6427ffd4,0x1dff92ff,0xff13ffb8,0x3e27ff39,0x0bffa06f,0xf9803ffd,
    0x3ffd03ff,0xe805ffb8,0x7ff441ff,0xeffc85ff,0x7cbfff51,0xcb7fec7f,
    0xffb33fff,0xfffffa8b,0x7ec40fff,0x01ff14ff,0x6fffe980,0xffffff00,
    0x4ffb8dff,0xfa8bff30,0x0cffffff,0x0cf7fcc4,0x20bfff10,0xeffbaffc,
    0xf55ffa80,0x7d57fe5f,0x97ff204f,0xfa806ff9,0xffb82fff,0x402fff43,
    0x7fdc1ffe,0x7f42ffff,0x92ffe42f,0xfffb7dff,0xf31bff2d,0x9dffb8ff,
    0x5105ffd9,0x06a24fb8,0xffffffa8,0x3ffe0132,0x23ffdabf,0xff304ffb,
    0xffffb30b,0xff881dff,0x77ff4406,0xffbff900,0x5ffe201f,0x2ffb0ffd,
    0x3e602ffc,0x07ff90ff,0x217fec40,0xffbdfff9,0xffe805ff,0x2633fee1,
    0x3ffe2ffd,0x362ffd40,0x6ffeffff,0xfff07ff9,0xfff88101,0x90ff8800,
    0xf981bfff,0x8fffcaff,0x4fff86fe,0xffa9ffe2,0x80bff504,0x45fffeca,
    0x7ec06ff8,0x3ff201ff,0x3a00ffff,0x2e6ff8ff,0x00ffd9ff,0xffe97ff4,
    0x2ffcc000,0x67ffffe4,0xffe805ff,0xff31ffa0,0x261ffe2b,0xbddb85ff,
    0x5ff95ff9,0x2003ffb0,0xfb801ffe,0xbfb3ff14,0x3f62ffc8,0xfe84ffff,
    0xa87ff42f,0xbff505ff,0xfff50098,0x2e06ff88,0x7e402fff,0x204fffff,
    0x24ffcffc,0x06ffbff9,0xff9dffb8,0xf1066605,0x37f6e0ff,0xfd74ff9a,
    0x3e0fff85,0x3e7ff86f,0x2ffdc0ff,0xfca7fd40,0x40fff84f,0x00ffe818,
    0x5fa87fc4,0x47ff8ff5,0x81ffffe8,0x7ff42ffd,0x2e0dff30,0x1fff15ff,
    0xf887ffe0,0x7fff506f,0xd5fff900,0x3fea01ff,0x7ffc2fff,0xff8804ff,
    0x3a02ffcf,0x1bfea0ff,0x53fe6011,0x3fe64ffb,0xf307ffc7,0x217ff4df,
    0x176e5ffd,0x3ff23ffb,0x3a3ffcc6,0x17fe21ff,0x4fc93ee0,0x1ffd8ff3,
    0x407fffcc,0x3fe25ffb,0x20bffe27,0x3ffa3ffe,0x447ffa84,0xfff986ff,
    0x27ff9005,0xff105ffa,0xfffb0fff,0x3ff6005f,0x3ea00fff,0x3fffbadf,
    0x3f22ffdc,0x7bfff33f,0xffd8bffd,0x23ffea9d,0xfc9cfffa,0x33fee5ff,
    0x3f26ffd9,0xffeaaeff,0x5577fcc4,0x7c403ffe,0x7d57f20f,0x4df7fd47,
    0x1efffffb,0x6ce7ffc4,0x7ffec4ff,0x0fffecbd,0x2efbffea,0x7c45fffd,
    0xcfffd86f,0x2ccccccc,0x7ff45ff9,0x0bfffd01,0x001ffff7,0x017fffea,
    0x3ffffffa,0xeffff885,0x3f60ffff,0x40efffff,0xffffffe8,0xfffffe86,
    0x7ffc5ffd,0x3f21ffff,0xffffffdf,0xfffffd80,0x27e400df,0x17f67fea,
    0x3ffffffa,0xb86fffef,0x0fffffff,0x7fffffcc,0xffd83fff,0x0effffff,
    0x7ec37fc4,0xffffffff,0x45ff95ff,0xff906ff9,0xffff307f,0x7fffc400,
    0xffdb8802,0x3ffee03f,0xfc81efff,0x7100ceff,0x2019fffd,0xbff4fffc,
    0x0dfffd98,0x7fdc7fe4,0xfb7100df,0xff1009ff,0x3dfffb01,0x3fffff20,
    0x2a01fb13,0x100dfffe,0x5dffffdb,0x7ffff540,0x0dff104e,0xfffffffb,
    0x3f2bffff,0x41ffec2f,0xff01fffb,0xffd800bf,0x00088007,0x00357551,
    0x01880013,0x00600060,0x08800260,0x880f2600,0x0131002b,0x00062002,
    0x06600026,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x06aaa000,
    0x530aaa88,0x55555555,0x2aaa2355,0x44355500,0xaa8801aa,0x55555511,
    0x85540035,0x2aa01aa8,0x01555532,0x22155551,0x55100099,0x0aaaa203,
    0x8d54c555,0x55101aa8,0x440d4c05,0xaaaaaaaa,0x2aaaa22a,0x22aaaaaa,
    0x9aaaaaa8,0x2aaaa201,0x0001aaaa,0xfffb8355,0x5cbffb00,0xffffffff,
    0x3ffa4fff,0x21fff984,0xfb803ffb,0xfffff73f,0xc803dfff,0x1fff53ff,
    0x3eebff10,0xffb82fff,0x0bff52ff,0x6c17fea0,0x7ffc2fff,0x3ea9ff70,
    0x8dff304f,0x1effffd9,0x3fffffea,0xff70ffff,0xffffffff,0x7ffffdcf,
    0xfa81efff,0xffffffff,0x3ff2001f,0xa85ffe83,0x3fee0fff,0xffffffff,
    0x07ffe64f,0xffb89ffd,0x73ffb803,0xffffffff,0x3fea05ff,0x0bfff53f,
    0x3feebff1,0xfffd84ff,0x00bff52f,0x3f617fea,0x0fff82ff,0x3fea9ff7,
    0x4cdff304,0xffffffff,0xffffff50,0x3ee1ffff,0xffffffff,0x3fffee7f,
    0x43ffffff,0xfffffffa,0x9802ffff,0xff983fff,0x21fff41f,0xfff99998,
    0x7e409999,0x03bfee6f,0xf7007ff7,0x277fee7f,0x45ffeb99,0x53ffffc8,
    0xf885ffff,0xdffff75f,0x25fffff0,0xf5005ffa,0x2fffc8bf,0x3ee1fff0,
    0x209ff54f,0x3ff66ff9,0x54ffd98c,0x33333bff,0x4effdc33,0x21999999,
    0xba99dffb,0x3ea0fffe,0xea9999df,0xffe805ff,0x4dff903f,0xff006ffb,
    0xfff8801f,0xb82fff8b,0x703313ff,0x13fee7ff,0x7c43ffe2,0xf53fffff,
    0x7c41dfff,0xffdff75f,0x7ff7fcc3,0x200bff52,0x3ff25ffa,0x43ffe02f,
    0x9ff54ffb,0xff9bfe60,0x557fe60f,0xff7005ff,0x27fdc009,0x3ea5ffd8,
    0x0fff304f,0x03ffffc8,0x3fe2fffa,0x1fff001f,0xfdfff500,0x2ffee0bf,
    0x2e2ffffb,0x09ff73ff,0x7fcc7ffe,0xff53ffbb,0x7fc49fff,0x7ff9ff75,
    0x97fe7fdc,0xf5005ffa,0x0fffeebf,0x7fdcfff0,0x2609ff54,0x30a666ff,
    0x17feabff,0x0027fdc0,0x3e209ff7,0x413fea7f,0x3e607ff8,0x2a03ffdf,
    0x04ffdfff,0x4003ffe0,0x00fffffd,0xfffffff7,0x4ffee1ff,0xff984ffb,
    0x3ee1930f,0xffbff53f,0x5d7fe23f,0x3a5ffaff,0xf52ffbef,0x3fea00bf,
    0x804fffad,0x53fee6fe,0xaaaaeffa,0xc806ffba,0x3bff53ff,0xfb833333,
    0xaaaaaaef,0x813fee0a,0x9ff50fff,0x4413ff20,0x03ff9dfe,0x07ffffec,
    0x001fff00,0x80bfffe2,0x3f62fffb,0x2e7ff73f,0xfcbaaeff,0x3fee06ff,
    0xff97ff53,0x7dd7fe2d,0xff17fdaf,0x3ea5ff79,0xdff5005f,0xb00dffff,
    0xaa7fdcdf,0xffffffff,0x7cc06fff,0xffff50ff,0x5c1fffff,0xffffffff,
    0x13fee2ff,0xff51ffe8,0xffffdddf,0x23ff203f,0x7c403ff9,0x7c002fff,
    0xff1000ff,0x7fdc03ff,0xfba7fd45,0xfffff73f,0x403fffff,0x7ff53ffb,
    0x3fe2bffa,0xff75ff75,0xff75ff53,0x4017fea5,0xfffffffa,0x72fe404f,
    0x3ffea9ff,0xffffffff,0x8fffe606,0xfffffffa,0x3ffee0ff,0x2fffffff,
    0xfe813fee,0xfffff52f,0x2019ffff,0x7ff32ffa,0x00dff700,0x2001fff0,
    0x00effffd,0xffa89ff7,0x3ee7ff74,0xdfffffff,0xa9ffdc01,0x1fff53ff,
    0x2bfeebff,0x8ffcbff9,0xbff52ffb,0x3fffea00,0x201fffab,0x53fee4fc,
    0x9999dffa,0xf306ffa9,0xeffa89ff,0x5c2aaaaa,0x99999dff,0x13fee099,
    0xff51ffe8,0x07fffb9d,0xff32ffc4,0x0bff5007,0x001fff00,0x9ffffff5,
    0xf30ffee0,0x5cffee9f,0x00199dff,0xffa9ffdc,0x3ff7ff63,0x3fe5ff75,
    0x5ff76fed,0x54017fea,0x3ff63fff,0xfb8fee06,0x209ff54f,0xff986ff9,
    0x05ffa84f,0x4009ff70,0x3fe04ffb,0x4c9ff50f,0xff704fff,0x9dffb99b,
    0x02ffd403,0x2007ffc0,0xffacfff8,0x43ffb81f,0x7ff74ff9,0x80013fee,
    0x7ff53ffb,0xafffffc4,0xfffb2ffb,0x54bfee9f,0xff5005ff,0x03fff98b,
    0xa7fdc7f5,0xff304ffa,0x04fff98d,0x2e00bff5,0x3ee004ff,0x4fff304f,
    0x7fd44ffa,0xffffc83f,0x03ffffff,0x20017fea,0x7ec00fff,0x1dffb0ef,
    0x7cc3ffb8,0x2e7ff74f,0x2e0004ff,0x87ff53ff,0xf75ffffb,0x3fffee5f,
    0x3ea5ff72,0xbff5005f,0x003fff90,0x7fd53fee,0x44dff304,0x3ea04fff,
    0x9ff7005f,0x427fdc00,0x3ea3ffe8,0x0fffc84f,0x7fffffe4,0x2a03ffff,
    0xff8005ff,0x3ffea00f,0x713ffe22,0x4ff987ff,0x3fee7ff7,0x3fee0004,
    0xfd07ff53,0x4bfeebff,0xf70ffff9,0x33bfea5f,0x51cccccc,0xfff10bff,
    0x7dcfff0d,0x209ff54f,0x3ff26ff9,0x55eeeeef,0x3ee00bff,0xccccccef,
    0x9dff70cc,0x8dfffb99,0xfe884ffa,0x7ff3006f,0x00bff500,0x2201fff0,
    0xffa85fff,0x30ffee1f,0x4ffee9ff,0x20004ffb,0x7ff53ffb,0x2ebfff30,
    0x9bffe2ff,0xfff52ffb,0x7fffffff,0x7dc17fea,0x73ffc3ff,0x13fea9ff,
    0xfff37fcc,0x2dffffff,0xf7005ffa,0xffffffff,0x3ffee3ff,0x1effffff,
    0xfa827fd4,0xff9803ff,0x05ffa803,0x900fff80,0x3f601fff,0x30ffee6f,
    0x4ffee9ff,0x20004ffb,0x7ff53ffb,0x7dd7ff20,0xb93ff62f,0xffff52ff,
    0x27ffffff,0x3fa05ffa,0xb9ffe0ff,0x09ff54ff,0x7fcdbfe6,0x6fffffff,
    0x2e00bff5,0xffffffff,0xfff71fff,0x207bdfff,0x3f204ffa,0x7fcc00ff,
    0x00000003,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xaaaaaa88,0x5540009a,0x2ea2000a,0x9866601a,
    0x99999999,0x33100061,0x88099881,0x331001a9,0x02a62001,0x0004d440,
    0x03510040,0x99880cc4,0x13303310,0x86621330,0x0cc40998,0x10330151,
    0x404cc433,0x23310999,0x7ffd40a8,0x0effffff,0x04fffa80,0xfffffd88,
    0xf17ff81e,0xffffffff,0xb8016fcf,0x27fd42ff,0x37fffff2,0xffffea80,
    0x3fff202f,0xffb102df,0x910009ff,0xfffd707f,0x07ff909f,0x3ff65ff9,
    0xf51ffe60,0x327fee7f,0x3f23ffff,0x55fffe8f,0x7f47ffff,0xb87ffe67,
    0x27ff26ff,0x3fea3ffe,0xffffffff,0x7ffec00e,0xefffe807,0x7fc1ffff,
    0xffffff17,0x7ffcffff,0x3fee00be,0xf527fd42,0x8bfffdff,0xfffffff8,
    0xffffe80f,0x7fc41fff,0x006fffff,0xb87fffb3,0x6fffffff,0x7fc37fcc,
    0xfb8bfea7,0x43ff21ff,0xffffeffb,0xfdff91ff,0xfffdffff,0x1ffa3fff,
    0x3fe2dff7,0x3fbff21f,0x37fea0ff,0xffea9999,0x3fffe202,0x3bfee02f,
    0xdb1bfee0,0x6666664b,0x3ff64ffe,0xfb80cfff,0xd27fd42f,0x21dfc8df,
    0x3ff61ffc,0xa8f7fdc2,0x67fe46ff,0x202ffd88,0x2fffffea,0x2a2fffea,
    0x7ff43ffe,0xf893fea0,0x8ffff65f,0x3ffee6ff,0x7e4fffa2,0xdfff51ff,
    0x367ffb11,0xecffe86e,0x7ffe43ff,0x27fd43ac,0x2e04ffb8,0x206ffdff,
    0x7fe81ffd,0x21bfa000,0xdffffeb8,0xf50bfee1,0x0e7ffc9f,0x1ffdc080,
    0x3770bffa,0x3e20fff8,0x7ffdc45f,0xffd82dff,0x2a3ffcc3,0x07ff63ff,
    0x7fffcffb,0x7dc7ff35,0xca7fd45f,0x0fffc3ff,0xf1009ff5,0xf90bffff,
    0x27fd40bf,0x3a02ffb8,0x01ffe8ff,0x03ffc062,0x401ffb80,0x73ffffd9,
    0x4ffa85ff,0x37fffff2,0x3ff6e203,0x07ffc4ff,0x667ffc40,0x7fc6ffcc,
    0x3e00beff,0x1fff80ff,0x6ff8b7fc,0xff99ffb8,0x43ff77fc,0x7fd44ffb,
    0xff85ff94,0x017fe60f,0x407fffd4,0x3ea03ffc,0xfba999df,0xbff300ef,
    0x20013fee,0x88004ffd,0x3ea003ff,0x87ff73ff,0x7fe44ffa,0x220effff,
    0xffeffffd,0x401ffe24,0xfffffff9,0x6fffc7ff,0x83ffc400,0x7fe41ffd,
    0xf883ffb9,0xff9ffbcf,0x7fdc6fe9,0xfca7fcc3,0x263ffc1f,0xff1005ff,
    0x0bff20df,0xffffffa8,0x3200efff,0x0fff12ff,0x00effd80,0x400ffc80,
    0x2ffffeb8,0xffa87ff7,0xffeca884,0x473ffa3f,0x7ffc4ffa,0x77fc0441,
    0x41999999,0x02dffffe,0x3fe07ffa,0x6e7fcc0f,0xbdfd00ff,0x3ff3fabf,
    0x261ffdc4,0x83ff94ff,0x2ffcc7ff,0x4ffffd80,0x2a02ffc8,0xffffffff,
    0xfff103ff,0x8017ff41,0x8000effd,0x36604ff8,0x20cfffff,0x7fe43ffa,
    0xfa857514,0xb8dff15f,0x1fff44ff,0xffd83ffa,0x2a026e20,0x0beffffd,
    0x3e61ffe4,0xffffd07f,0x7fffdc09,0x83ffff92,0x7fcc3ffb,0xff83ff94,
    0x402ffcc7,0x1fffeffa,0xf5017fe4,0xd75533bf,0xbff70bff,0xa806ffb8,
    0x1ffe06ff,0xfe80ffe4,0xf302efff,0xfff713ff,0xb87ffe29,0x43ffe3ff,
    0x7d44fff9,0x4ffc9cff,0x644effdc,0x3f2603ff,0x3ea3ffff,0xfffc9cff,
    0x3ffff502,0x87fffcc0,0xfb87fffa,0xca7fcc3f,0x23ffc1ff,0x8ffd5ff9,
    0xffb9fff8,0x80bff20e,0xff104ffa,0xffffe81f,0x01ffffff,0xff007fe4,
    0xf81bfa0f,0xfe801dff,0x4ffdffff,0x3fffffea,0x7fffe46f,0xfd85ffff,
    0x40ffffff,0xffffffe8,0xfff71005,0xfffffa87,0x7ffc05ff,0x26ffe806,
    0xfb84fff8,0xca7fcc3f,0x23ffc1ff,0x8ffd5ff9,0x3ffa4ffd,0xa80bff24,
    0x3ffa04ff,0x3ffffe62,0x04ffffff,0x3fe03fec,0x203ff887,0x3a2000cf,
    0x4ff8bfff,0x6ffff654,0x6fff6441,0xfb80ffe8,0x9101ceff,0x0019dfff,
    0xfb507d50,0xf9005dff,0x9ff9007f,0xfb82ffe8,0xca7fcc3f,0x23ffc1ff,
    0x4ffd5ff9,0x7fcc6ffb,0x405ff92f,0xff104ffa,0x66ffe43f,0x7ffdcccc,
    0x21b60000,0x00202ff9,0x88000880,0x20003001,0x00440008,0x04c00800,
    0x00000000,0x00000000,0x20000000,0xcccceffa,0x7fc6fffc,0x0bffa01f,
    0x2600ffd8,0x00ffb83f,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xfffffff5,0x7d43ffff,0x37fdc06f,0x7c01ffb0,
    0x980ffb05,0x19999999,0x9813fe20,0x99999999,0x00599009,0x25ff7097,
    0x85550aaa,0x1bba82aa,0x21332230,0x32208888,0xcccccccc,0x0ffea4cc,
    0x00000000,0x40000000,0xfffffffa,0x7fec1cef,0x0fffc403,0x0600ffd8,
    0x3e606fe8,0x7fffffff,0x4413fe20,0xffffffff,0x7ffa84ff,0xffb86d80,
    0x3fe5ffd2,0xd887ffc7,0xaacfffff,0x987fee6d,0xf13fffff,0xffffffff,
    0x1ffd4fff,0x00000000,0x00000000,0x00000000,0x20000000,0xfffffff9,
    0x13fe207f,0x7fffffc4,0xfe84ffff,0xd9d983ff,0x5ff73c9d,0x3ffcbffa,
    0x7fcc3ffe,0xffffffff,0xff32fe46,0x4ccc7fff,0x99999999,0x000ffea1,
    0x00000000,0x00000000,0x00000000,0x35100000,0x07fff533,0x55027fc4,
    0x55555555,0x6ffffa83,0xffffffb8,0x7fec7e65,0xfff8fff2,0xf9515d30,
    0x7505ffff,0x1777774c,0x00000000,0x00000000,0x00000000,0x00000000,
    0x3e200000,0x7ffc44ff,0x4fffffff,0xaefd8000,0xffb882ff,0xff936c1c,
    0xffb1bfa1,0x01573004,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x442fff44,0xffffffff,0x333324ff,0x22cccccc,0x0dff3ff9,
    0x643fddf1,0xfc9fea1f,0x0002fe45,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x441bffa0,0xefffeeee,0xffff13ee,0x49ffffff,
    0x3ff90ffd,0x25f99fd8,0x10080808,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xffd80000,0x9ff1000e,0x3ffffe20,0xf34fffff,
    0x42ffc4bf,0x000000a2,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xfff90000,0x27fc4001,0x3dd70000,0x0000eec8,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x999bfff5,
    0x3fe20199,0x00000004,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x3fff2000,0x01ffffff,0x00007dd1,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x64000000,
    0xffffffff,0x0000001f,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_bold_24_usascii_x[95]={ 0,1,1,0,0,0,0,0,1,0,0,0,1,0,
1,-1,0,1,0,0,0,0,0,0,0,0,2,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,0,1,
1,1,1,0,1,0,1,0,0,1,-1,0,0,-1,0,1,-1,0,1,-1,0,0,1,0,0,0,0,0,1,1,
-1,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0, };
static signed short stb__arial_bold_24_usascii_y[95]={ 19,3,3,3,2,3,3,3,3,3,3,6,16,11,
16,3,3,3,3,3,3,3,3,3,3,3,7,7,5,7,5,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21,3,7,3,7,3,7,3,7,3,3,
3,3,3,7,7,7,7,7,7,7,3,7,7,7,7,7,7,3,3,3,9, };
static unsigned short stb__arial_bold_24_usascii_w[95]={ 0,5,9,12,11,19,16,5,6,7,8,12,4,7,
4,7,11,8,11,12,12,12,12,11,11,11,4,4,12,12,12,12,21,16,14,14,14,13,12,15,13,4,11,15,
12,16,13,16,13,17,15,14,13,13,16,21,15,16,13,6,7,6,11,14,6,12,12,12,12,12,8,12,11,4,
6,11,4,17,11,13,12,12,8,11,7,11,12,17,12,12,11,8,4,8,12, };
static unsigned short stb__arial_bold_24_usascii_h[95]={ 0,16,7,17,20,17,17,7,21,21,8,11,7,4,
3,17,17,16,16,17,16,17,17,16,17,17,12,16,13,9,13,16,21,16,16,17,16,16,16,17,16,16,17,16,
16,16,16,17,16,18,16,17,16,17,16,16,16,16,16,21,17,21,9,3,4,13,17,13,17,13,16,17,16,16,
21,16,16,12,12,13,17,17,12,13,17,13,12,12,12,17,12,21,21,21,5, };
static unsigned short stb__arial_bold_24_usascii_s[95]={ 253,148,127,223,82,102,122,137,32,1,113,
75,122,163,186,215,236,79,173,1,243,89,139,51,39,64,227,46,139,88,63,
33,60,16,1,200,212,198,185,176,159,154,27,132,119,102,88,159,65,94,227,
166,18,152,238,216,32,1,190,53,192,46,101,171,156,100,76,113,51,126,181,
14,48,248,39,204,60,209,197,152,146,133,245,88,125,76,166,179,232,112,63,
23,18,9,143, };
static unsigned short stb__arial_bold_24_usascii_t[95]={ 1,41,72,1,1,23,23,72,1,1,72,
72,72,72,72,1,1,41,41,23,41,23,23,58,23,23,58,58,58,72,58,
58,1,58,58,1,41,41,41,1,41,41,23,41,41,41,41,1,41,1,41,
23,41,23,23,23,41,41,23,1,1,1,72,72,72,58,23,58,23,58,23,
23,41,1,1,23,41,58,58,58,1,1,58,58,1,58,58,58,58,1,72,
1,1,1,72, };
static unsigned short stb__arial_bold_24_usascii_a[95]={ 95,114,163,191,191,306,248,82,
114,114,134,201,95,114,95,95,191,191,191,191,191,191,191,191,
191,191,114,114,201,201,201,210,335,248,248,248,248,229,210,267,
248,95,191,248,210,286,248,267,229,267,248,229,210,248,229,324,
229,229,210,114,95,114,201,191,114,191,210,191,210,191,114,210,
210,95,95,191,95,306,210,210,210,210,134,191,114,210,191,267,
191,191,172,134,96,134,201, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_bold_24_usascii_BITMAP_HEIGHT or STB_FONT_arial_bold_24_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_bold_24_usascii(stb_fontchar font[STB_FONT_arial_bold_24_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_bold_24_usascii_BITMAP_HEIGHT][STB_FONT_arial_bold_24_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_bold_24_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_bold_24_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_bold_24_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_bold_24_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_bold_24_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_bold_24_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_bold_24_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_bold_24_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_bold_24_usascii_s[i] + stb__arial_bold_24_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_bold_24_usascii_t[i] + stb__arial_bold_24_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_bold_24_usascii_x[i];
            font[i].y0 = stb__arial_bold_24_usascii_y[i];
            font[i].x1 = stb__arial_bold_24_usascii_x[i] + stb__arial_bold_24_usascii_w[i];
            font[i].y1 = stb__arial_bold_24_usascii_y[i] + stb__arial_bold_24_usascii_h[i];
            font[i].advance_int = (stb__arial_bold_24_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_bold_24_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_bold_24_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_bold_24_usascii_s[i] + stb__arial_bold_24_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_bold_24_usascii_t[i] + stb__arial_bold_24_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_bold_24_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_bold_24_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_bold_24_usascii_x[i] + stb__arial_bold_24_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_bold_24_usascii_y[i] + stb__arial_bold_24_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_bold_24_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_bold_24_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_bold_24_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_bold_24_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_bold_24_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_bold_24_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_bold_24_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_bold_24_usascii_LINE_SPACING
#endif

