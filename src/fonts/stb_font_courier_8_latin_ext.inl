// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_8_latin_ext_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_8_latin_ext'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_8_latin_ext_BITMAP_WIDTH         256
#define STB_FONT_courier_8_latin_ext_BITMAP_HEIGHT         52
#define STB_FONT_courier_8_latin_ext_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_8_latin_ext_FIRST_CHAR            32
#define STB_FONT_courier_8_latin_ext_NUM_CHARS            560

#define STB_FONT_courier_8_latin_ext_LINE_SPACING           4

static unsigned int stb__courier_8_latin_ext_pixels[]={
    0x00202022,0x04040c0c,0x02022044,0x00330202,0x22208811,0x80809800,
    0x20400080,0x44040808,0x88009800,0x22084040,0x43010180,0x01000810,
    0x00440811,0x4c080804,0x882222b9,0x260440c0,0x044c0980,0x10c44433,
    0x02208983,0x314d4113,0x10541883,0x04044533,0xa98220cc,0x05cc0c29,
    0x2605c433,0x10606a21,0x44181981,0x022204c2,0x21441033,0x98a22a08,
    0x83026608,0x98a26a08,0x420d4081,0x22533109,0x41571399,0x04404c08,
    0x50445115,0x15044511,0x54e66251,0x8a826288,0x4cca6a28,0x8a6a6062,
    0x331cc41a,0x14cc1a85,0x418a6a0c,0x20a66299,0x9988a661,0x2a251153,
    0x22733129,0x894d4472,0x2a53313a,0x988c3288,0x22511529,0x25115299,
    0x51151899,0x14cca662,0x218d4618,0xb8266062,0x218c44c2,0x18631131,
    0x31863113,0x23106194,0x28609861,0x4060c605,0x30a62861,0x18130614,
    0x21432861,0x19432861,0x4c50c0c6,0x03180608,0x40c618c3,0x230c0c61,
    0x03186331,0x198e6143,0x99866623,0x0cc33311,0x210c3184,0x0c610c31,
    0x30c66623,0x830c6666,0x9a894318,0x5cc31731,0x99430c10,0x5cc50c52,
    0x29b88c40,0x4c4a1943,0x9989430b,0x25328c31,0x50a21998,0x860a30a6,
    0x0c1426a1,0x351860a3,0x30518651,0x13530414,0x3330c188,0x5506ae25,
    0x55504d45,0x455504d4,0x350c409a,0x426a0c41,0x85331999,0x10c43018,
    0x08299833,0x986214cc,0x53304199,0x330414cc,0x84d43105,0x10c429a8,
    0x9429a881,0x826a19a8,0xa866a218,0x54335109,0x426a0409,0x053319a8,
    0x10330082,0x00070a80,0x06600000,0x40000000,0x00000018,0x00000000,
    0x02003300,0x0804c433,0x00000262,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x01010220,0x00881822,0x04400202,0x08810040,0x02022044,0x00100022,
    0x81550101,0x22044008,0x000d4008,0x00880088,0x10088088,0x02020600,
    0x11022011,0x30418044,0x0420a981,0x0180c266,0x53510206,0x4c226044,
    0x0cc0809a,0x98831022,0x0d5c0cc0,0x80881863,0x88a22a19,0x10620cc0,
    0x8a661981,0x337109b8,0x1999844c,0x219b9862,0x44044089,0x811044c0,
    0x8660c418,0x4c18288a,0x4ca20a81,0x44a22a29,0x99445472,0x886a619a,
    0x18e5129a,0x222a3a88,0x53506622,0x444cae66,0x5dc31131,0x83026a63,
    0x98ae22b8,0x4622609a,0x984cc461,0x21331188,0x13311889,0x210c2286,
    0x26651331,0x84513529,0x45471151,0x4ca26a38,0x4466a289,0x235511aa,
    0x20c31aa8,0x41815c39,0x98619431,0x21318608,0x260306a1,0x8614ca08,
    0x4c0a9861,0x86104c20,0x220d4c30,0x8306e219,0x20cc40b8,0x0c318630,
    0x18430c61,0x8c4a18c3,0x4c530c21,0x23133288,0x35332899,0x1330d4c4,
    0x026614c3,0x30c30303,0x83019830,0x88619430,0x266630c2,0x99453510,
    0x53510a22,0x25318618,0x2a0c1882,0x544aaa2a,0x22054c0a,0x13304cc0,
    0x8aaa054c,0x4133109a,0x413312aa,0x213312aa,0x31188299,0x26621831,
    0x4c106630,0x30cdc199,0x4ccc3066,0x18230461,0x10c054c1,0x8c430357,
    0x104d4299,0x80613501,0x1114d440,0x13506060,0x30cccc08,0x57150007,
    0x00014a61,0x00005298,0x88000000,0x54039801,0x26a60289,0x2289a802,
    0x8cd44039,0x335119a8,0x38541880,0x80002e62,0x01980098,0x00131040,
    0x00000031,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00100000,0x08811022,0x10110200,0x220442a8,
    0x81818041,0x10008008,0x00110103,0x830c0003,0x01104441,0x02020110,
    0x40800011,0x2204c008,0x08104440,0x06003102,0x26620980,0x8330220a,
    0x8a8cd418,0x0620cc39,0x04408811,0x081110a6,0x30554188,0x989ccc45,
    0x10c04cc0,0x5540c733,0x20c20619,0x88a60c41,0x05353099,0x20c41881,
    0x9886629a,0x3051d429,0x0c181981,0x88444186,0x23104099,0x0c171299,
    0x2e609985,0x4cc13310,0x82ee0c30,0x231130b9,0x866a1889,0x255310b9,
    0x0cd42b98,0x4a6a6173,0x2a2044a1,0x0c535128,0x098cccc5,0x1082ae23,
    0x213310c3,0x355529a9,0x426620d4,0x133129a9,0x2133104c,0x8a6a2351,
    0x3710e622,0x54314d43,0x329a8329,0x1845350c,0x222860ca,0x8c30c199,
    0x86131999,0x420c0bb8,0x81330c21,0x4cc66261,0x0604cc2b,0x88ccc435,
    0x0c66a09a,0x1314cc45,0x0304ccc6,0x555430c1,0x199886a1,0x1aaa8222,
    0x41aaa86a,0x26355518,0x18a28631,0x180c6305,0x86061303,0x250c6031,
    0x986a6211,0x3310c299,0x33350c41,0x55418198,0x4cccaaa2,0x213730c1,
    0x26661b9a,0x102220c1,0x3130c223,0x50c0e6a2,0x4cc06333,0x44308821,
    0x88222199,0x988a6a61,0x4c422219,0x22333319,0x21353199,0x988a39a8,
    0x26a18c0b,0x8319a861,0x4135119a,0x2665119a,0x00053712,0x800002e6,
    0x0005cc08,0x0010b980,0x2a617300,0x89986629,0x20051532,0x400cc018,
    0x4c028409,0x8030029a,0x800029a9,0x10022000,0x20180337,0x401ab801,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x01010080,0x10000040,0x04180881,0x0220c0c4,
    0x08301101,0x00822200,0x10100310,0x10008301,0x20440883,0x04180880,
    0x02022044,0x40408801,0x4c408819,0x00310620,0x20c415c6,0x88c19819,
    0x4a6a2199,0x10222998,0x88810081,0x408866a0,0x40204429,0x53066a20,
    0x15302221,0x88330c54,0x04020440,0x21898a6a,0x0a604408,0x98300813,
    0x18220cc1,0x4198a22a,0x1cc40c18,0x89861046,0x26183351,0x0ae09981,
    0x11108266,0x44c0c0c1,0x26311318,0x23113188,0x88661989,0x21331099,
    0x13310998,0x4c442662,0x998aa620,0x45451350,0x4cc42e62,0x26213310,
    0x06133109,0x413305dc,0x98266099,0x99826609,0x21730a60,0x30c32899,
    0x4d4ca6a6,0x986026a2,0x2110b818,0x2e230621,0x9866621a,0x440ccc41,
    0x294ca089,0x84308610,0x19898c21,0x30c618c1,0x218c3186,0x30c13311,
    0x189984c4,0x55430a62,0x2a35551a,0x435551aa,0x2313119a,0x33311998,
    0x4cc46662,0x26233311,0x3060c219,0x350c3145,0x182301a8,0x088c0c4c,
    0x854260c3,0x5c4a6663,0x18a6661a,0x4d441331,0x55433512,0x2aa8aaa2,
    0x220c4aaa,0x44266229,0x21331099,0x13310998,0x998866a2,0x198c2220,
    0x4c4302a6,0x22333119,0x43331199,0x9984d418,0x26533329,0x25333299,
    0x53332999,0x30306a66,0x88826a0c,0x4d442220,0x13083310,0x22a826a2,
    0x00980c28,0x00c01c2a,0x00000008,0x00008198,0x40000000,0x5cc0289a,
    0x00000000,0x00000000,0x47305cc0,0x4a6a6008,0x880029a9,0x01000019,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x20000000,0x9884c098,0x02040409,0x22010000,0x04408100,
    0x10000100,0x03018088,0x44041810,0x82204c08,0x30261889,0x20100110,
    0x81100000,0x1980881a,0x00600040,0x0c4c2604,0x0986082a,0x3306204c,
    0x103511c1,0x81103301,0x20c404c2,0x8ae622b8,0x82e229a9,0x0c10c118,
    0x81154c41,0x41ddc198,0x10c20441,0x83008101,0x884cd429,0x8e226399,
    0x415c3b99,0x26604c18,0x8a266060,0x2a60d408,0x5c1988c0,0x53530c09,
    0x217305cc,0x570229a9,0x70570570,0x20ae0a85,0x3318982b,0x215c4c57,
    0xa8a6660a,0x8a62a2a8,0x86ae1989,0x540d4c1a,0x455506a0,0x86a0d41a,
    0x33730b98,0x20c318d4,0x4c1a8c30,0x870cdcc1,0x26e61998,0x19b98a61,
    0x40844171,0x060ca0c3,0xa8303035,0x30330261,0x83303303,0x06606609,
    0x0dcd4a2a,0x094c3553,0x45445151,0x4c515108,0x10c0609b,0x83030155,
    0x03030301,0x184c3083,0x2aa81331,0x357104c6,0x2660c308,0x32e18429,
    0x35030c20,0x33060cc1,0x20444183,0x28444181,0xb886ae21,0x886ae21a,
    0xab88a1ab,0xb886ae21,0x26e20002,0x05441c42,0x1b8808e2,0x5c542e62,
    0x2217310a,0x2e6200b9,0x26217310,0x2635310b,0x0266a289,0x855cc400,
    0x144cc70a,0x89986037,0x28998e62,0x22183371,0x001310b9,0x2e629a98,
    0x4d4c2e60,0x23854312,0x2385470a,0x2150c70a,0x0001c2a3,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x444c0000,0x40880401,0x81802209,0x19808020,0x00020000,0x04198310,
    0x22044088,0x81000000,0x08081100,0x82044088,0x08808088,0x82204154,
    0x89808728,0x55022020,0x21840000,0x41530998,0x060c2b99,0x20220808,
    0x33104c08,0x26a1c6a1,0x09981712,0x44185353,0x81353188,0x44a6a618,
    0x251331aa,0x71152899,0x215c385c,0x13532b99,0x4dc466e2,0x054c2e62,
    0x188266a0,0x8810a6a6,0x171044c1,0x862e2130,0x3505cc09,0x53530cc3,
    0x88c31554,0x8151109a,0x7510d4c1,0x13510d41,0x542ae0d4,0x433331aa,
    0x19988301,0x3066a06a,0x20c0cc41,0x214c181a,0x306a6629,0x13083306,
    0x43182aa2,0x00e2181a,0x0ba88c6a,0x20ba886a,0x260a21ab,0x0d40c181,
    0x1a82660c,0x88a0aae2,0x88611099,0x440d4182,0x20c22181,0x466620c1,
    0x0cd41989,0x314ccc23,0x04c17505,0x110602a6,0x2a0c08c1,0x33066662,
    0x2181ab88,0x30c62888,0x13000301,0x04441886,0x80881831,0x408c1811,
    0x06666181,0x80018983,0x88e62899,0x853510b9,0x2173119b,0x17312899,
    0x215004dc,0x014dc403,0x35300a53,0x2e614a61,0x2a253530,0x8998e619,
    0x29853533,0x31cc3854,0x466e2335,0x405cc0b8,0x26a08888,0x54c66e09,
    0x5c466e29,0x37102621,0x5c42e625,0x4c173129,0x42e6200b,0x00002898,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x80000000,0x110c0000,0x45410011,0x0c44c038,0x4e613000,0x40982039,
    0x442ea219,0x22110088,0x41071350,0x9a8829a8,0x88445330,0x8982ee21,
    0x310d4110,0x22982213,0x4a233311,0x2aaa08c0,0x0133310a,0x00000000,
    0x119b8800,0x8a26a515,0x5704d428,0x4c422223,0x0866e61a,0x35371543,
    0x20c8014c,0x298a60a8,0x231110c4,0x4cc50c3a,0x88a61540,0x38b87191,
    0x857044c6,0x218731bd,0x20110998,0x2086aa60,0x00002610,0x00000000,
    0x2a28c000,0x4c313319,0x103055c1,0x420cdc11,0x22a8aaa1,0x3214c331,
    0x1510e530,0x9b83314c,0x8d453081,0x8420a618,0x9a8829a9,0x89445330,
    0x1986aa21,0x000b988c,0x00000000,0x00000000,0x41a80000,0x44663189,
    0xb88410ba,0x89980081,0x82a94002,0x30400509,0x00000001,0x00000000,
    0x00000000,0x00000000,0x00000000,0x20b88000,0x513528a9,0x000000b8,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_8_latin_ext_x[560]={ 0,1,0,0,0,0,0,1,2,1,0,0,1,0,
1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
1,0,1,0,0,0,0,0,0,-1,1,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0, };
static signed short stb__courier_8_latin_ext_y[560]={ 5,0,0,0,0,0,1,0,0,0,0,1,3,2,
4,0,0,0,0,0,0,0,0,0,0,0,2,2,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,1,0,1,0,1,0,1,0,0,
0,0,0,1,1,1,1,1,1,1,0,2,2,2,2,2,2,0,0,0,2,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,0,0,1,0,
0,0,0,0,0,2,2,2,0,0,-1,0,0,0,0,2,0,2,4,0,0,2,0,0,0,1,-1,-1,-1,-1,
-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,1,0,-1,-1,-1,-1,-1,0,0,0,0,
0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,
0,0,-1,0,0,1,-1,0,-1,0,-1,0,-1,0,-1,0,0,0,0,0,-1,0,-1,0,0,1,-1,0,-1,0,
-1,0,-1,0,0,0,-1,-1,0,0,-1,0,0,0,-1,0,0,0,-1,2,0,0,-1,0,0,0,2,-1,-1,0,
0,0,0,0,0,0,0,-1,0,0,1,-1,0,0,0,1,0,0,-1,0,-1,0,0,1,-1,0,0,1,-1,0,
-1,0,-1,0,0,1,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,-1,0,-1,0,0,2,-1,0,-1,0,
-1,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,
0,-1,0,-1,0,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-2,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0, };
static unsigned short stb__courier_8_latin_ext_w[560]={ 0,2,4,4,4,4,4,2,2,2,3,4,2,4,
2,4,4,4,4,4,4,4,4,4,4,4,2,2,4,4,4,3,4,5,4,4,4,4,4,4,4,4,5,5,
4,5,4,4,4,4,5,4,4,4,5,5,4,4,4,2,3,2,4,5,2,4,4,4,5,4,4,4,4,4,
3,5,4,5,4,4,4,5,4,4,4,4,5,5,4,5,4,2,2,2,4,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,2,4,4,4,4,
2,4,3,5,3,4,4,4,5,6,3,4,2,2,2,4,4,2,2,2,3,4,5,5,5,3,5,5,5,5,
5,5,5,4,4,4,4,4,4,4,4,4,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,4,5,
5,4,5,4,5,5,4,4,4,4,4,4,4,4,4,5,5,5,4,4,4,4,4,4,5,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,4,5,4,5,5,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,4,5,4,5,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,4,5,
4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,4,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,4,5,5,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5, };
static unsigned short stb__courier_8_latin_ext_h[560]={ 0,6,3,6,6,6,5,3,6,6,4,4,4,2,
2,6,6,5,5,6,5,6,6,6,6,6,4,4,4,2,4,6,6,5,5,6,5,5,5,6,5,5,6,5,
5,5,5,6,5,6,5,6,5,6,5,5,5,5,5,6,6,6,3,1,2,5,6,5,6,5,5,6,5,5,
7,5,5,4,4,5,6,6,4,5,6,4,3,4,3,5,3,6,6,6,2,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,5,5,4,5,
6,6,2,6,3,3,3,2,6,1,3,5,3,3,2,5,6,2,3,3,3,3,5,5,5,6,6,6,6,6,
6,6,5,7,6,6,6,6,6,6,6,6,5,6,7,7,7,7,7,4,6,7,7,7,7,6,5,6,6,6,
6,6,6,6,5,6,6,6,6,6,5,5,5,5,6,5,6,6,6,6,6,4,5,6,6,6,6,7,7,7,
5,6,6,6,6,5,7,6,7,6,7,6,7,6,6,6,5,6,5,6,6,6,6,6,6,6,6,6,7,7,
7,7,7,7,7,7,6,6,5,5,6,5,5,5,6,5,7,7,6,3,6,7,7,7,7,7,3,6,6,7,
7,5,5,5,5,5,5,6,5,7,6,6,5,5,6,6,6,6,7,6,7,6,5,5,6,5,7,6,6,5,
7,6,7,6,7,6,7,6,7,7,6,6,5,6,7,6,6,6,7,6,7,6,7,6,7,5,6,6,6,7,
6,6,5,6,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,6,5,5,5,
5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,5,7,
6,7,6,7,6,7,7,7,7,7,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,7,7,6,6,7,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5, };
static unsigned short stb__courier_8_latin_ext_s[560]={ 254,252,152,38,67,108,168,157,203,64,252,
77,74,165,174,251,242,184,173,237,16,221,6,11,153,118,71,68,63,180,82,
247,62,221,232,37,237,189,242,32,6,247,226,162,152,141,11,251,1,238,178,
182,227,206,215,209,204,199,194,143,139,136,117,203,188,157,121,147,109,136,131,
94,121,116,195,105,100,57,42,85,126,115,26,64,131,47,111,36,122,33,91,
203,222,230,191,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,254,248,246,
241,21,231,23,232,170,26,87,130,96,165,97,196,101,170,105,108,177,150,1,
185,127,140,143,135,113,107,101,36,46,58,52,40,73,67,134,92,216,16,211,
31,26,21,193,123,180,113,113,124,144,149,159,52,192,169,204,17,54,198,79,
188,183,178,173,168,163,158,84,148,143,138,133,128,160,165,155,126,103,175,92,
87,82,77,72,31,119,57,52,47,42,38,22,11,204,18,12,7,1,220,244,
243,214,233,224,225,199,217,212,206,7,197,18,187,89,177,172,167,161,156,151,
146,190,179,174,164,33,62,44,11,104,99,74,90,84,129,59,69,63,54,129,
102,43,160,32,97,107,49,118,27,147,1,247,139,154,49,44,39,140,96,251,
200,236,234,183,178,210,226,163,158,153,148,249,138,1,128,198,90,112,124,59,
97,91,28,65,210,134,58,72,27,82,79,1,16,70,102,95,107,6,118,123,
133,239,80,229,75,219,143,209,79,188,194,168,184,205,215,111,220,23,225,13,
215,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,173,1,1,236,
1,1,1,1,1,1,1,1,1,1,1,1,1,6,186,1,1,1,1,1,
1,1,1,1,1,1,1,1,230,192,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,241,12,
17,145,87,22,77,53,67,48,57,52,47,42,37,32,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,26,21,85,73,6,68,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1, };
static unsigned short stb__courier_8_latin_ext_t[560]={ 1,9,44,17,24,24,37,44,17,31,37,
44,44,44,44,24,24,37,37,24,44,24,31,31,24,24,44,44,44,44,44,
24,24,37,37,24,37,37,37,24,44,37,24,37,37,37,44,17,44,17,37,
17,37,24,37,37,37,37,37,17,17,17,44,44,44,37,17,37,17,37,37,
17,37,37,1,37,37,44,44,37,17,17,44,38,17,44,44,44,44,38,44,
24,17,17,44,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,1,17,31,
31,44,31,24,24,44,24,44,44,44,44,24,44,44,31,44,44,44,31,31,
44,44,44,44,44,31,31,31,31,31,31,31,31,31,31,31,1,24,31,24,
31,31,31,24,24,31,24,1,1,1,1,1,44,17,1,1,9,9,24,31,
24,24,24,24,24,24,24,31,24,24,24,24,24,31,31,31,37,24,31,24,
24,24,24,24,44,31,24,24,24,24,9,9,9,31,24,24,24,24,31,1,
17,1,17,1,17,1,17,17,17,38,17,38,17,17,17,17,17,17,17,17,
17,1,1,1,1,9,1,9,1,17,17,38,37,17,31,38,38,17,38,1,
1,17,44,17,1,1,9,1,9,44,17,9,1,1,38,38,38,31,31,31,
9,31,1,9,9,31,31,9,9,9,9,1,9,9,9,31,31,9,31,9,
9,9,38,9,9,1,17,1,17,1,17,1,1,9,9,37,9,9,9,9,
9,1,9,1,9,1,9,1,37,9,9,9,1,9,9,37,9,38,9,38,
31,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,9,38,38,9,
38,38,38,38,38,38,38,38,38,38,38,38,38,17,31,38,38,38,38,38,
38,38,38,38,38,38,38,38,9,31,38,38,38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,9,17,
17,31,1,17,1,17,1,17,1,1,1,1,1,1,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,
38,38,38,1,1,9,17,1,17,38,38,38,38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,38, };
static unsigned short stb__courier_8_latin_ext_a[560]={ 68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_8_latin_ext_BITMAP_HEIGHT or STB_FONT_courier_8_latin_ext_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_8_latin_ext(stb_fontchar font[STB_FONT_courier_8_latin_ext_NUM_CHARS],
                unsigned char data[STB_FONT_courier_8_latin_ext_BITMAP_HEIGHT][STB_FONT_courier_8_latin_ext_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_8_latin_ext_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_8_latin_ext_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_8_latin_ext_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_8_latin_ext_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_8_latin_ext_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_8_latin_ext_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_8_latin_ext_s[i]) * recip_width;
            font[i].t0 = (stb__courier_8_latin_ext_t[i]) * recip_height;
            font[i].s1 = (stb__courier_8_latin_ext_s[i] + stb__courier_8_latin_ext_w[i]) * recip_width;
            font[i].t1 = (stb__courier_8_latin_ext_t[i] + stb__courier_8_latin_ext_h[i]) * recip_height;
            font[i].x0 = stb__courier_8_latin_ext_x[i];
            font[i].y0 = stb__courier_8_latin_ext_y[i];
            font[i].x1 = stb__courier_8_latin_ext_x[i] + stb__courier_8_latin_ext_w[i];
            font[i].y1 = stb__courier_8_latin_ext_y[i] + stb__courier_8_latin_ext_h[i];
            font[i].advance_int = (stb__courier_8_latin_ext_a[i]+8)>>4;
            font[i].s0f = (stb__courier_8_latin_ext_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_8_latin_ext_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_8_latin_ext_s[i] + stb__courier_8_latin_ext_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_8_latin_ext_t[i] + stb__courier_8_latin_ext_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_8_latin_ext_x[i] - 0.5f;
            font[i].y0f = stb__courier_8_latin_ext_y[i] - 0.5f;
            font[i].x1f = stb__courier_8_latin_ext_x[i] + stb__courier_8_latin_ext_w[i] + 0.5f;
            font[i].y1f = stb__courier_8_latin_ext_y[i] + stb__courier_8_latin_ext_h[i] + 0.5f;
            font[i].advance = stb__courier_8_latin_ext_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_8_latin_ext
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_8_latin_ext_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_8_latin_ext_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_8_latin_ext_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_8_latin_ext_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_8_latin_ext_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_8_latin_ext_LINE_SPACING
#endif

