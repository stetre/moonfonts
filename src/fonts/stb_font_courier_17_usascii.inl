// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_17_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_17_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_17_usascii_BITMAP_WIDTH         128
#define STB_FONT_courier_17_usascii_BITMAP_HEIGHT         68
#define STB_FONT_courier_17_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_17_usascii_FIRST_CHAR            32
#define STB_FONT_courier_17_usascii_NUM_CHARS             95

#define STB_FONT_courier_17_usascii_LINE_SPACING           8

static unsigned int stb__courier_17_usascii_pixels[]={
    0x100001a8,0x02621040,0x2102660e,0x28151500,0x10060150,0x13331015,
    0x13002a60,0x40ccccc4,0x0485c02b,0x548ea0ae,0x22ceb877,0x80ca41ad,
    0x307c0b8b,0x39b8595b,0xd8773790,0x67442aaa,0xb8ee2019,0x000caaab,
    0x84806a48,0x86471244,0x4cae1268,0x38f09484,0x20a2332c,0xd8812240,
    0x808e2000,0x40555534,0x9090241a,0x0448e248,0xa40d8d09,0x86e1c784,
    0x44800b8b,0x5100b204,0x14807137,0x42c09333,0x4890901b,0x481bb8e2,
    0x644ae24c,0x99a2cece,0x222a0d42,0x216d441b,0x2361cddd,0xc9ad882a,
    0x240a603b,0x904882a8,0x38922441,0x77123ca8,0x584a44a8,0x5c45306a,
    0x10b2602b,0x126b3248,0x1203c81b,0x05c0b048,0x2485b2d4,0x2246e038,
    0xda9a4c2b,0x298e0ada,0x173198d4,0x4a601b80,0x9848a61d,0x98481203,
    0x21212202,0x0a671244,0xa8751219,0x03b3b313,0x4a20e1c4,0x35014c03,
    0x3a859212,0x24240530,0x12120640,0xbcc99c49,0xc8b3122c,0x2c184a42,
    0x46613071,0x48332408,0x0721a8a6,0x4802e07b,0x21c401cc,0x07124484,
    0x341b090b,0x3f30e2e2,0xb806decc,0x32f7623a,0x072f7222,0x7b907797,
    0x80905d3d,0x44800644,0x07124484,0x2a750909,0x04145443,0x02008008,
    0x22008010,0x12c40000,0x1b9cc007,0x165ce498,0x4e0e6c0c,0x00000003,
    0x00000000,0x06665400,0x00002000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x98000000,0x220d401c,0x15014001,
    0x004401c0,0x2a06a373,0x0260a88b,0x13100310,0x05540260,0x25910353,
    0x64dd40da,0x2a003262,0x2b262c9c,0x6406882c,0x4d6444bb,0x27220ccc,
    0x7710adc9,0x5401c980,0x2603505a,0x2e03620c,0x890e1c40,0x9244800b,
    0x0d4000c8,0x243c8170,0x200e2074,0x9509001a,0x4c485557,0x28920902,
    0x37117162,0x26249120,0x6d40aaa2,0x4c240aab,0x2205c243,0x23502b9b,
    0x710902a9,0x23983335,0x42e07104,0xcb8b791a,0x5dc0ca9c,0x477163b8,
    0x33930499,0x43b84813,0x5ec40d84,0x791a8598,0x00d41201,0x20901cd2,
    0x224a62a4,0x6744485b,0x2ae7261e,0x802e0484,0xa87b30c9,0x89103aa3,
    0x015cd40b,0x2600d412,0x2482404b,0x2b89488a,0x51162c48,0x5c090731,
    0x45e5c400,0x0aacc983,0xb506a1c4,0x06a09009,0x87500f20,0x6e4caa2b,
    0x29920ee0,0x481c80d4,0x710002e0,0x43881700,0x024cd41a,0x24014c12,
    0x41cbd980,0x2235c048,0x25412243,0x0002e048,0x88588071,0x4c6a0d43,
    0xbbc81203,0xb001c43c,0x04390217,0x0797b5b5,0x5dc39793,0x6766543e,
    0x999d932c,0x42dcc801,0x6440ccc9,0x2a1bb32d,0x2a5bd11d,0x882ccecc,
    0x00e6e5c0,0x21e5d5dc,0x0202cdd8,0x00004020,0x00000000,0x00000000,
    0x00000000,0xc9800000,0x65c42ccc,0x2cb8819b,0xca9664c3,0x8179931c,
    0x9909acb8,0x32299999,0xccb81ccc,0x54c79910,0x9100ab98,0x200a6037,
    0x42400201,0x911aa0d8,0x81716e21,0x64489638,0x24925d10,0x485a8e24,
    0x9ccb8890,0xd99e41da,0x8164de41,0x173221da,0x14064240,0x81712032,
    0x26350238,0x49248cc2,0x1b8530e2,0x2c25c1c4,0x214cb053,0x841ac884,
    0x00909004,0x2205c012,0x20483203,0x70e22922,0x405c4883,0x5c0e481b,
    0x51702e01,0x42401203,0x2e007004,0x0ed41c40,0x2402f2e2,0x02cbad88,
    0x90770489,0x91029824,0x12035388,0xc892120e,0x5c0121dc,0x40241c40,
    0x910481c8,0x4a601b33,0x225d701a,0x4154122b,0x406a4848,0x06848484,
    0x1a800e89,0x80c0414c,0x44710484,0x37025204,0x81a81997,0x2606440d,
    0x0902b99c,0x1d41c419,0x89112624,0xc8281c48,0x88240d42,0x39b81cc3,
    0x891002e0,0xa8824449,0x10904caa,0x2a017779,0xea83cace,0xbda80cbb,
    0x643fb82b,0x65c3cbba,0x13b223ce,0x401d1079,0xdbc8800b,0xa80224c4,
    0x00440901,0x00880188,0x0200c008,0x40000000,0x01004cda,0x07733336,
    0x6644376e,0x00000cce,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x66443322,0x32219910,0x0333320c,0x66453322,
    0x32619950,0x9999912c,0x4ca965c1,0x702f332a,0x23999999,0x2cccccc8,
    0x88179997,0x910ccccc,0x30c05999,0x21cc1b87,0x4403881b,0x24120e43,
    0x1a871048,0x243b885c,0x3887114c,0x0e21c892,0x21663889,0x1c46e3fb,
    0x220731b8,0x0c89c403,0x09049248,0x0b8350e2,0x88661224,0x89212383,
    0x987106e3,0x25206442,0x38812720,0x80645c40,0x24123954,0x2e0d4388,
    0x10392240,0x2a120667,0x1c424421,0x01e9800e,0x071007c4,0x900ddd88,
    0x04825232,0x83b999d1,0x643c99ab,0xb9d105cc,0x90530905,0x13f33a20,
    0x5c024062,0x810e203b,0x29019158,0x88241294,0x2aee0d43,0x440e480a,
    0x33090333,0x438821b8,0x0482f449,0x7102b954,0x488e20b8,0x073739b8,
    0x06a1c412,0x88048017,0x31212383,0x70711c47,0x02407e61,0x3880c891,
    0x0c87105c,0x02c98e54,0x8350e209,0x4402400b,0x47312483,0x0711c448,
    0x765c25cb,0x88674c3c,0x337721ec,0x9d910dcc,0xe8d316c4,0x333b3221,
    0x36a5d910,0x0599b50d,0x910399d7,0x2eb9999d,0x6d43ccce,0xd913cccc,
    0x01439999,0x00000000,0x00000000,0x00000000,0xa8000000,0x54732a2c,
    0x9316441c,0x0cca8099,0x10000000,0x8dc40375,0x03017300,0x42a88171,
    0x26ea20aa,0x1b502620,0xb91321c4,0x0480aae0,0x80240079,0x2a26e25a,
    0x5c98bb83,0x725c5644,0x25c5e47f,0x20d881b1,0xf50ea8ac,0x0e23aa85,
    0x41322179,0x98122094,0x4c04802d,0x14c4802c,0x23302e1c,0x298350c8,
    0x18912592,0x171507e6,0x2e7190e2,0x01738848,0x03950032,0x203c8824,
    0x01c6cccb,0x4cccccd8,0x99a92090,0x664c299d,0x1503e21c,0x4a521c52,
    0x20e21709,0x5c0374ab,0x333b32e4,0x0dc01b73,0x07001712,0x5c490480,
    0x2200ac8c,0x542a1a1c,0x2d9a438a,0x0b555b09,0xcb812aa9,0x19710900,
    0x388b1120,0x98414c28,0x41a8531d,0x41b8994c,0xc82a022a,0x22452438,
    0x41b999b9,0x072a0764,0x41e44090,0x44dabaca,0xa81bbbca,0x7f72dbbc,
    0x6c165e54,0xabcb8b52,0x220a804c,0x2448243c,0x6de65448,0x12005931,
    0x0020b660,0x08088004,0x06000010,0x7916ec40,0xec88675c,0x32219d73,
    0x0028083e,0x0005000c,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x0d440000,0x10a98155,0x2aaaa835,0x205446a2,0x4c0ab88a,
    0x44173389,0x015510aa,0x00810620,0x99999101,0x980c4199,0x7300151d,
    0x43660dc4,0x267222d8,0x32b2625a,0x4c5ecc39,0x5ecdf4c4,0x442ee248,
    0x7405c0bb,0x987eb7c6,0x5930001e,0x89fdca69,0x2a1c400c,0x30394981,
    0x2016c064,0x249205c4,0x5c624484,0xe85f1088,0x19488db4,0x5dddddc4,
    0x21e4410b,0x21c40180,0x803d301a,0x8700901c,0x4249240a,0xec98910b,
    0x7b0d70bd,0x1221916e,0x01111111,0x87100000,0x4095901a,0x0e01202b,
    0x84924815,0x99101738,0x752b81d8,0x000260c4,0x25999995,0xbbbbbbb8,
    0x0ecc901b,0x2a848864,0x87009062,0x8249240a,0x114d2094,0x40000000,
    0x20999998,0x08888888,0x96f32ee0,0x1db31de8,0x4b7333a2,0x443cceca,
    0x5c9b11dc,0x20f25b1e,0x004101d9,0x00000000,0x00080000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__courier_17_usascii_x[95]={ 0,3,1,1,1,1,1,3,4,2,0,1,2,1,
3,1,1,1,1,1,1,1,2,1,1,2,3,2,0,0,0,0,1,0,0,0,1,0,1,0,0,1,1,0,
0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,1,0,3,1,0,1,0,0,1,0,0,1,
1,1,1,0,0,1,0,0,1,1,1,0,0,0,0,1,1,0,4,0,1, };
static signed short stb__courier_17_usascii_y[95]={ 12,2,2,2,2,2,4,2,2,2,2,3,9,7,
10,1,2,2,2,2,2,2,2,2,2,2,5,5,3,6,3,3,2,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,2,2,15,2,5,2,5,2,5,2,5,2,2,
2,2,2,5,5,5,5,5,5,5,3,5,5,5,5,5,5,2,2,2,6, };
static unsigned short stb__courier_17_usascii_w[95]={ 0,3,7,7,7,7,7,3,3,3,6,7,4,7,
3,7,7,7,7,7,7,7,6,7,7,6,3,4,8,9,8,6,7,9,9,9,8,8,8,9,9,7,8,9,
9,9,9,8,8,9,9,7,7,9,9,9,9,9,7,3,6,3,7,10,3,8,9,8,9,8,8,9,9,7,
6,8,7,9,9,7,9,9,8,7,7,9,9,9,9,8,7,4,1,4,7, };
static unsigned short stb__courier_17_usascii_h[95]={ 0,11,6,11,12,11,9,6,12,12,7,9,6,2,
3,13,11,10,10,11,10,11,11,11,11,11,8,9,9,4,9,10,11,9,9,10,9,9,9,10,9,9,10,9,
9,9,9,10,9,11,9,10,9,10,9,9,9,9,9,12,13,12,5,2,3,8,11,8,11,8,10,10,10,10,
13,10,10,7,7,8,10,10,7,8,10,8,7,8,7,10,7,12,12,12,3, };
static unsigned short stb__courier_17_usascii_s[95]={ 59,67,80,59,39,79,31,122,51,55,68,
48,75,106,114,8,71,36,20,87,28,95,103,120,29,37,92,123,56,96,39,
83,11,21,113,63,96,87,78,53,59,51,44,31,21,11,1,11,69,1,106,
90,98,73,116,41,11,1,105,47,16,35,88,114,118,65,19,74,110,83,52,
71,81,44,1,91,100,48,38,96,1,61,29,114,108,1,58,104,11,116,21,
28,33,23,106, };
static unsigned short stb__courier_17_usascii_t[95]={ 13,1,58,1,1,1,48,48,1,1,58,
48,58,62,58,1,1,27,27,1,27,1,1,1,15,15,48,38,48,58,48,
26,15,48,38,26,38,38,38,26,38,38,26,38,38,48,48,27,38,15,26,
26,26,26,26,38,38,38,38,1,1,1,58,62,58,48,15,48,1,48,15,
15,15,15,1,15,15,58,58,48,27,15,58,48,15,58,58,48,58,15,58,
1,1,1,58, };
static unsigned short stb__courier_17_usascii_a[95]={ 144,144,144,144,144,144,144,144,
144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,
144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,
144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,
144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,
144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,
144,144,144,144,144,144,144, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_17_usascii_BITMAP_HEIGHT or STB_FONT_courier_17_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_17_usascii(stb_fontchar font[STB_FONT_courier_17_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_17_usascii_BITMAP_HEIGHT][STB_FONT_courier_17_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_17_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_17_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_17_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_17_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_17_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_17_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_17_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_17_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_17_usascii_s[i] + stb__courier_17_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_17_usascii_t[i] + stb__courier_17_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_17_usascii_x[i];
            font[i].y0 = stb__courier_17_usascii_y[i];
            font[i].x1 = stb__courier_17_usascii_x[i] + stb__courier_17_usascii_w[i];
            font[i].y1 = stb__courier_17_usascii_y[i] + stb__courier_17_usascii_h[i];
            font[i].advance_int = (stb__courier_17_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_17_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_17_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_17_usascii_s[i] + stb__courier_17_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_17_usascii_t[i] + stb__courier_17_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_17_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_17_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_17_usascii_x[i] + stb__courier_17_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_17_usascii_y[i] + stb__courier_17_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_17_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_17_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_17_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_17_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_17_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_17_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_17_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_17_usascii_LINE_SPACING
#endif

