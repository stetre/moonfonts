// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_bold_16_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_bold_16_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_bold_16_latin1_BITMAP_WIDTH         256
#define STB_FONT_consolas_bold_16_latin1_BITMAP_HEIGHT         94
#define STB_FONT_consolas_bold_16_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_bold_16_latin1_FIRST_CHAR            32
#define STB_FONT_consolas_bold_16_latin1_NUM_CHARS            224

#define STB_FONT_consolas_bold_16_latin1_LINE_SPACING          11

static unsigned int stb__consolas_bold_16_latin1_pixels[]={
    0x107aa3d5,0x00000044,0x50cc0260,0x5554c555,0x01445301,0x80260110,
    0x00000220,0x22080180,0x00000000,0x00060000,0x05a80000,0x2e000000,
    0x7c43f71f,0xfe880fd5,0xf5001fa2,0x7fcdf30f,0x7fff90ff,0xf30ffe88,
    0x7fec409f,0xf9837c0e,0x7d401fd4,0x05fe880e,0x81d7dff1,0x981fd4f9,
    0xdf5001ff,0x20bfd101,0x3e201ff9,0x7cc0ebef,0x001fa01f,0x2ff440db,
    0x0ffffeb8,0x1fb877c4,0xd9f443f7,0xd03ba206,0x46f9800f,0x0fc81ff8,
    0x2fee01f9,0x4407e440,0x5c6e99ee,0xd93e885f,0x9b026cc0,0x937109b1,
    0x327d107d,0x801bb106,0x233604d9,0x01bb104d,0x40fb26e2,0x5f500dd8,
    0xffffd880,0xd83f5a81,0x40fecfff,0x23f70ff8,0x000001fb,0xb01000fd,
    0x643f207f,0x4c0fb00f,0x260fc83f,0x311fe41f,0x35301881,0x4c01a980,
    0x40d4c01a,0x310c4098,0x02621881,0x006a6031,0x09980133,0x9fd01be0,
    0xbf30399f,0x9ffff98f,0x2e1980fd,0x3f23f71f,0x3fc9fe43,0xeafe9fe4,
    0x7fff40df,0xc817e26f,0x3601f90f,0xf113e207,0x07f33517,0x3a27d4ff,
    0x3fffa20f,0x7fff440e,0x7fff440e,0x7fff440e,0xfd13ea0e,0x1fd13ea1,
    0x41fd13ea,0x80efffe8,0x3e207ff8,0x407f207f,0x9805f6f9,0x7fffd40b,
    0x24c80fd9,0x263f71fb,0xf987f46f,0xffe87f46,0x665c5fdd,0x80fee6fc,
    0x201f90fc,0x513e207e,0x9d9ffd3f,0x13ea1fb0,0x5e7f41fd,0x5e7f45ff,
    0x5e7f45ff,0x5e7f45ff,0xd13ea5ff,0xfd13ea1f,0x1fd13ea1,0x2ffde7f4,
    0xb80fffdc,0xbf101fff,0x03f7fe20,0x327fff54,0x1fb3ffff,0x43266e88,
    0x4c7fa1fb,0xf98ff45f,0x07f8bfa5,0x403fb37c,0x881f90fc,0x57f405fa,
    0x7f3f7d90,0x2a5f70bd,0xfa87f44f,0x5fa87fc5,0x45fa87fc,0xf8bf50ff,
    0xfe89f50f,0x0fe89f50,0x50fe89f5,0x6c0ff8bf,0x7fb03fbf,0x807ec07f,
    0xb82efffa,0x363fdaac,0x20fd9fff,0x3ee06ffd,0x0fe53ee1,0xd0fe53ee,
    0x3e00fe8f,0x1f901fa6,0x1dfd03f2,0xbd4fe880,0x09d7f1db,0xd13ea9f3,
    0xfb0fee1f,0x5fb0fee5,0x25fb0fee,0xa97ec3fb,0xfa87f44f,0x4fa87f44,
    0x43fb87f4,0x7c77c2fd,0x0df1df06,0xfb1027cc,0x4f9809ff,0x87ecff5c,
    0x2e019dfb,0x37dbe21f,0x746fb7c4,0xdf007f47,0x1f9007ec,0x9f9303f2,
    0x9d0afe80,0x09f5f3db,0xd13ea9f3,0xf90bf21f,0x7f90bf27,0x27f90bf2,
    0xa9fe42fc,0xfa87f44f,0x4fa87f44,0x42fc87f4,0x74fea3fc,0xfe9fd40f,
    0xb901fa00,0xddb70ff5,0xb0fd80bf,0x2e15305f,0x1fe7e41f,0x743fcfc8,
    0xdf01fe27,0x1f9017dc,0x037403f2,0xedce89f1,0xfb82fafa,0x0fe89f53,
    0x92fc85f9,0xf92fc85f,0x5f92fc85,0x89f52fc8,0xe89f50fe,0xfe89f50f,
    0x2fc85f90,0x217e47f2,0x405f91fc,0x233602fb,0x5defec6f,0xb87ec05f,
    0xf71fb85f,0x00fff983,0xfe81fff3,0x7c03febb,0xfc813e66,0x1f601f90,
    0x66f44f88,0xd80effff,0x7e89f31f,0x23fb13ee,0xb8fec4fb,0xfb8fec4f,
    0x4f98fec4,0xe89f33f4,0x4fd13e67,0xd0fec4fb,0xe8bfb99f,0x405fdccf,
    0x77efcc6f,0xa9fe23ff,0x887ec05f,0x3f72dffe,0x17fa07ee,0xffd0bfd0,
    0x8df007ff,0x21f900ff,0x40fb00fc,0x6476c4f8,0x6f880b89,0x4cff17e6,
    0x21ff10ef,0x1ff10ef9,0x7fc43be6,0x3e21df30,0x7f8bf30f,0x4cff17e6,
    0xdf33fc5f,0x7cc3fe21,0x267fffff,0x07ffffff,0xffb10fe4,0x77ff05bf,
    0x3e208bff,0xba7f6447,0xfd03f71f,0xe81fe803,0xbf30008f,0x1f905fa8,
    0x03e403f2,0x01fb87f3,0xcfe83fd0,0x7ff43fda,0x7ff43fec,0x7ff43fec,
    0x7ff43fec,0x67f43fec,0x67f43fda,0x67f43fda,0x7ff43fda,0x0bee3fec,
    0xb0bee3fb,0x42fc403f,0x3fea00f9,0x3be25faf,0xb8403ffd,0x2a63f71f,
    0xfb5304fd,0x3201fa09,0xfb83feaa,0x643f6aa4,0x6fcc1abf,0x107faa22,
    0x907313df,0xfffd109f,0x7fffb109,0x07fffb10,0x107fffb1,0xd107fffb,
    0xfd109fff,0xffd109ff,0xfffb109f,0x7dc0fd87,0x4fb81fb4,0x03d425c0,
    0x6f6cc018,0x5c7ee002,0x409ff91f,0x1fa04ffc,0x813fffe0,0x43fffe5d,
    0xeb83fffc,0x207ff30f,0xe84ffff9,0x01000804,0x80040020,0x02001000,
    0x00080040,0x00000000,0x40000000,0x223f71fb,0x004c4009,0x26620062,
    0x0cccc000,0x04013331,0x004c4002,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00018862,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x32a00000,0x22080001,0x00000000,0x0004d4c0,0x57001a98,0x2080e980,
    0x00262008,0x88200600,0x00000000,0x00601104,0x00000200,0xf3000400,
    0x807be989,0xa7cc0efa,0x0ffcc0fe,0xa8077d40,0xfffa80ef,0x42ff446f,
    0x00efffd8,0x6da9817c,0x81fd4f98,0x883fffea,0xdff105fe,0xd4f981d7,
    0x00ffcc1f,0x3a2077d4,0xfd5f885f,0x744fffc8,0x220dffbd,0x20fe25fe,
    0xfff904fd,0x77fc43ff,0x07f200da,0xd980f7f3,0x1b27d104,0xb3006ec4,
    0xa826cc09,0x6c4bacff,0x67f44d8c,0x3e205feb,0x37fff441,0x446c9f44,
    0xd81b9aff,0x9b884d8c,0x93e883ec,0x401bb10d,0xb19b04d9,0x4db3e889,
    0x23fdadfb,0x25fddffe,0x0bb1f8ec,0xfc89f3db,0x220bfeab,0x2204fd9c,
    0x805b705f,0x04cc0099,0x09999988,0x42666662,0x3a098818,0x2666202f,
    0xf8bf3099,0x7fff540f,0x3ff33fa0,0x4ccccc44,0x2003be60,0x88330099,
    0x4ccccc41,0x26666620,0x26666620,0x26666620,0x543fa000,0x7f8bfa3f,
    0x07d5fd72,0x5f53f400,0x82fb8000,0x3e207ff8,0x1ffe207f,0x27ffffe4,
    0x29fffff9,0x897ec3fc,0x7ffe407f,0xd87f74ff,0x3f7fea2f,0x3b2bf30d,
    0x3fff20fe,0x3ffe24ff,0x21ffe202,0x83f22ff9,0x24fffffe,0x24fffffe,
    0x24fffffe,0x44fffffe,0x5fa3ffeb,0xd1fa0ff9,0x27f7ea1f,0x7ffd703f,
    0x83f91fd8,0x204fffea,0x3fff706e,0x407ffee0,0xfc81fffb,0x3f21aaac,
    0xff11aaac,0x5f99be61,0x55567e40,0x3fc85f91,0xf71ae7fa,0xc87f33e5,
    0x3a1aaacf,0xb80dffdf,0x7fcc1fff,0xdaa83f26,0x36aa1acf,0x36aa1acf,
    0x36aa1acf,0x37ea1acf,0x3afd3fda,0x3fa3f41f,0x41b66e60,0x23fdadfa,
    0xb84ffffa,0xa83fdaac,0x7f7fb03f,0x40feff60,0xfc83fbfd,0xc80bf202,
    0x7cc5fb3f,0xc817e406,0xff17e42f,0xf33f9172,0x17e47f73,0xbfd36f98,
    0x987f7fb0,0x01f92fff,0x17e405f9,0x7e405f90,0xeb7c7e82,0x27e81ff7,
    0x03f507f8,0x6f4df1fa,0x9f3000a9,0x3be01fb0,0xf1df06f8,0x1be3be0d,
    0x2fc80bf2,0x1be7fe20,0x2fc80ff1,0x2fd89f50,0x3f226dfe,0x645f77c9,
    0x23ff102f,0x477c0ff8,0xafe7cc6f,0x02fc80fc,0x2fc80bf2,0xff10bf20,
    0x5faffddd,0x2ffa1efc,0xbf883feb,0x3bfe21ca,0x33fe7fee,0xddb702ac,
    0x504f88bf,0xf503fa7f,0x7f503fa7,0xfff903fa,0x7ffe45ff,0x7f7e42ff,
    0x3203fe81,0xf12fffff,0xf91fe21d,0x3ee117d9,0x643f94ea,0x322fffff,
    0x20ff8cff,0x4c1fd3fa,0x0fc9fdbf,0x3f202fc8,0xc80bf202,0x6677c42f,
    0x7e4fd4cc,0x7ffffd0f,0x3f7ebb60,0x9999df10,0x7ffffe49,0x7ddefec5,
    0xfc80fe45,0x1fc85f91,0x91fc85f9,0xccdfc85f,0x3337f21c,0x837fc41c,
    0x26dceffa,0x21cccdfc,0x43fecffd,0x31ffffe9,0x1fd15fdf,0x0e666fe4,
    0x913fffee,0xf98bf23f,0x80fcdf9b,0x0bf202fc,0x3f202fc8,0x1fa07f82,
    0x023fa5fb,0x7d5c9fa8,0x8bf303fc,0x54ff10fe,0xe81be25f,0x745fdccf,
    0x745fdccf,0x645fdccf,0x00bf202f,0xfea80bf2,0x00bf24ff,0x5c07fff7,
    0x3ff60bdf,0x17e43fec,0x743fec40,0x265fdccf,0x01fbfb3f,0x17e405f9,
    0x7e405f90,0xbaaefc82,0x3faaefd2,0x3e880fd0,0x7e45f1d7,0xdf52baae,
    0x7ff1fe63,0x17dcbff7,0xffffff98,0x3ffffe67,0x3fffe67f,0x017e47ff,
    0x5f9005f9,0xfc83f980,0x402fb802,0xfff880f9,0x002fc83f,0xfff983fe,
    0x4fe67fff,0xfc80fffa,0xc80bf202,0x40bf202f,0xfd3ffffc,0x07e8fffe,
    0x0bfd1364,0x647ffff9,0x541effff,0x3a5fafff,0xfb0bee07,0x3fb0bee3,
    0x43fb0bee,0x22cccdfc,0x82cccdfc,0x07d402fc,0x16666fe4,0x41f6ffcc,
    0x017f107a,0x96666fe4,0x45fecdf8,0x98fec2fb,0xb83ffa3f,0x2e2cdfec,
    0x2e2cdfec,0x2e2cdfec,0x102cdfec,0x01880801,0x20110000,0x80c00998,
    0x03f602c8,0x703f69f7,0xf703f69f,0x7ffffe49,0x3fffff24,0x4c02fc84,
    0xfffff902,0x077f6a09,0x0064c1ae,0x53fffff2,0xd83eeec8,0xf9a7dc0f,
    0xfe83fee3,0x3fa4ffff,0x3fa4ffff,0x3fa4ffff,0x0004ffff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x08000000,0x00000022,0x08000000,
    0x00022080,0x08000000,0x00000022,0x33100000,0x06a60333,0x4c098800,
    0x988000aa,0x3f601999,0x1005fb84,0x9df705fd,0xfd5f885d,0x2e17f440,
    0x02fdc05f,0x37fa0bf7,0xdaeff882,0x07eafc40,0xe880bfa2,0xb09fb02f,
    0x7eafc47f,0x7c4003f4,0x2f7ff5c5,0x4bf227ec,0x21fffffc,0x40efffe9,
    0x7fec42fc,0x3ffff22f,0xff901fa4,0x27b60fff,0x405f984f,0xff980ee8,
    0x9f440cff,0x01dd106d,0xbf3017e6,0x7642fcc0,0x6ce445ff,0xdb3e884f,
    0x8803ba20,0xf3db00ee,0x3a23fc89,0x007e8db3,0x3bf25f88,0x4f6c5fcb,
    0x7e4ff64f,0x3fa0cccd,0x7fc4fb8a,0x2af3fe25,0x3fea6aa0,0xaa980fd1,
    0x000007fa,0xfd9b9800,0x00000003,0xe8800000,0x0000002f,0x32000000,
    0x03f4002f,0x7f8afc40,0x430017e2,0x89fe00fc,0xfb0ed45f,0xe97e4005,
    0x543f4007,0x7544fffe,0x7f544fff,0xfff704ff,0xfffea81f,0x0bf13fc4,
    0xff07fff9,0x3fae2fc4,0xc87f903f,0x27f83fff,0x7ff5c5f8,0x07fff903,
    0xf90ffff2,0x43fffc85,0x80dfeafe,0xf35fffeb,0x4ff2fc49,0x321d55f8,
    0xdfc809bf,0xff801fd9,0x3a6009a8,0x05fb9fa7,0x2ab2e1fa,0x2ab2e3fd,
    0x2ab2e3fd,0x5f7e43fd,0x5565c3fd,0xf89fe3fd,0x7fe77e45,0x4bf13fc4,
    0x23fdadfa,0x3f21fe99,0x3fc4ffce,0x56fd4bf1,0x677e43fd,0x677e44ff,
    0xc8bee4ff,0x3a4ffcef,0x645fddff,0xf55fcbef,0x4ff2fc49,0x323f75f8,
    0xfd85ffff,0xff8803ff,0x7e42ffff,0x7d5fa2ff,0x201fa00e,0x13e604f9,
    0x9fe24f98,0x27cc06f9,0xf12fc4ff,0x9fe3fc4d,0xdf1fa5f8,0xf893ffe2,
    0x4ff1fe26,0xdf1fa5f8,0x4ff137c4,0xb9fe26f8,0x7c4df12f,0x27f8bfa7,
    0x4d7e27f8,0x7f97ee5f,0x88fdd7e2,0x264feb99,0x5c1ffdff,0x737ff31e,
    0xffca98ff,0x01df3fd3,0xddb707e8,0xfeedb8bf,0x2ff76dc5,0xb87f89f3,
    0x9fe5feed,0xd13ea5f8,0xbf13fc1f,0x3fbbbfe2,0xfa81bf17,0x4ff07f44,
    0xddff15f8,0x227d4ffd,0xe89f50fe,0x3ea3f70f,0x47e87f44,0x449f30fe,
    0x3f73fa5f,0x5f89fe5f,0x97ea05f7,0xe8df50fe,0xfe8df16f,0x3fadf100,
    0x87e801ff,0x25fbbdfd,0x25fbbdfd,0x25fbbdfd,0x363fc5fa,0x3e5fbbdf,
    0x4fa97e27,0x44ff07f4,0x999df15f,0x7d41f499,0x4ff07f44,0x99df15f8,
    0x227d4999,0xe89f50fe,0x3ea3d50f,0x47e87f44,0x449f50fe,0x2fffe65f,
    0x5f89fe5f,0x57ee05f9,0x2a3fc6f8,0x7e83fe7f,0x67f5be60,0x23fc404f,
    0x457ea7f8,0x7c57ea7f,0x6f997ea7,0x27f89be6,0xfc9fa5fa,0x7f89fe65,
    0x7cbf93f4,0x7cc04c07,0x4fd1fe27,0x301fe5fc,0xf33fc4ff,0x9863fc4f,
    0x7e9fe27f,0x25f99fe2,0xbf1085fb,0x32bf93f4,0xffb7772f,0x7e567fc3,
    0xdf92fc44,0x55dc9fb7,0xd1fd3ffc,0xfebcc87f,0xffbbff84,0x3feeffe5,
    0x3feeffe5,0x7f5f7f45,0x7fddffc2,0x3ff77f65,0x7f677f45,0x7feefec3,
    0x2eabbf25,0x3fa0ff32,0x7ec3fece,0x3f25ffdd,0x7f42baae,0x7f43fece,
    0x3f23fece,0x3fb3bfa3,0x3faeffa3,0x7fee7f43,0xfd97e205,0x5f95ffdd,
    0x3077fff6,0x2219fffd,0x7fe40eec,0x77fff44f,0x0ffc5fa2,0x501bfff7,
    0x54bf5fff,0x2a5fafff,0x445fafff,0xfa83fffe,0x3e65faff,0x6c45faff,
    0xff983fff,0x7fe45faf,0x20df33ff,0x983fffd8,0x645fafff,0x6c43ffff,
    0xfd883fff,0x117e43ff,0xfd87fffb,0xff983fff,0x3e205faf,0x3ebffe65,
    0x00447f95,0x01e4c0c4,0xfd009806,0x00207fd4,0x0c00c00c,0x00300100,
    0x0c004003,0x00080880,0x22003001,0x01000800,0x08801004,0x04c00080,
    0x0009880c,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x15100000,0x0001a980,
    0x0427ccff,0x200d4402,0x00000000,0x00355300,0x53000260,0x31026213,
    0x0ff21fe4,0x4c0004a8,0x4eec809a,0x00cc0280,0x00098800,0x88019800,
    0xe885fefe,0xfb00efff,0x13e67f89,0xb107edbe,0xf881bfff,0xd100daef,
    0x10ff4c7f,0x8077d47f,0x31ffffe9,0xb9fc43fd,0x50fe23fe,0x3eadffff,
    0x6f987f44,0x5e8807f4,0x42fffd88,0x647ffffb,0x3204fdcf,0xd07f504f,
    0x3ff6200f,0x89fff91f,0xf86dc2e9,0xd10de807,0xffbcfe8b,0x24f9ed85,
    0x3a13e67f,0x67ec1d95,0x4e444fd9,0x3dd104fd,0x1761fc98,0x3fa03ba6,
    0xf930ba9c,0x93aa2ec3,0x567fd45d,0xfe89f54b,0x2fcc7fa0,0x2227ffe4,
    0x323dcdff,0x7c5babff,0x3fb817e6,0x0fd07f50,0x42eb3f60,0x7c44fca9,
    0x3e6fbcaf,0xbd41cdef,0xf51f9dd9,0x2000ff8b,0x0013e67f,0x07fc4bf3,
    0x1f980000,0xf88001f5,0xfa8fcc07,0x0faaf6c0,0x4fa817f4,0x29f707f4,
    0x6efec1fc,0x413f23ff,0x7f400ff8,0x40404fa8,0x4ffffffb,0x01fe00fd,
    0xfff509f5,0x7f7fc3ff,0x3e3322ff,0x0fee7d3d,0x7ffe45fb,0x89f33fc4,
    0x7d44fffc,0x743ffd13,0x320dffbd,0x3f304fff,0xfff907f1,0x203dff09,
    0x543f89f9,0x443f8eda,0xd13ea07f,0x6fb7c41f,0x7edeafc4,0x27d403fa,
    0x82ff7d40,0x6544fffc,0xfd2ccefd,0xdf01bff7,0xfa84fa80,0x53fc5fb3,
    0x07ddf4ff,0xf90bf29b,0x227ee547,0x9513f67f,0xaafb89fb,0x3fa2fdff,
    0x32a3fedf,0xb15104fd,0x13f72a0d,0x10bbffe6,0x5950db15,0x0bf30db1,
    0x03fa27d4,0xfa87f9f9,0xd0fdaf8b,0x64fee01f,0xaffd47ff,0x27ee5429,
    0xffe83fa8,0xfdd33fed,0x9f50bddf,0xf1fd4f90,0x77d0ff8f,0x2fca6c3f,
    0x27d417e4,0x3bff77fe,0x7dc4fa81,0x21fc8dfe,0x50bf32fe,0x01fa809f,
    0xeb8827d4,0x01fa83ff,0x37cc0fd4,0x0fe89f50,0x2a07ffcc,0x21fb7bbf,
    0x27f903fc,0x3be67fca,0xf507cafe,0x3a0fea09,0x326bf32f,0xa84ccffc,
    0xf51fc84f,0x4ff13fc5,0x7d5ff8dc,0x03fb13ee,0xdfff89f5,0x4fa83fe8,
    0x1fb1ffd4,0x50bf13f4,0x45fc409f,0x009f502a,0xabf88df9,0xa8bf882c,
    0xf981fe22,0x5fe83f44,0xff4edf88,0x9ee6ffcc,0xf93f44fa,0x20fdff13,
    0x07f504fa,0x7c2fc4fd,0x5427d406,0x3e0feadf,0x2a3febaf,0x0f9bc98f,
    0x3fe21df3,0x77c4fa80,0x44fa80c0,0xd1be26f8,0x7d42fc4f,0x2fedb604,
    0xf9804fa8,0x1fccb6c6,0x745fdb6c,0xf8bf303f,0x3603fd07,0x4c3fdcff,
    0xff12fffe,0x23fb3f41,0x9f504ff9,0x9fa13ea0,0x406f85f8,0xfffc84fa,
    0x3fffe2ff,0xa89ee82e,0x767ff43f,0xf89f503f,0x213ea007,0x42febdfd,
    0x2a17e27e,0xd53f504f,0x313ea0b7,0x47ff999d,0xa83ee1fa,0x545bea9f,
    0x3a6dceff,0x263fdacf,0x3a204fda,0x7f303fff,0xff99ff90,0x7fdd77dc,
    0x2609f505,0x4fd2abff,0x406f85f8,0x46fd44fa,0x3ff0ff89,0x07fff900,
    0x507fffb1,0x3e55bf95,0xdfcaa807,0x3fff622a,0x97e27e82,0x22adfcaa,
    0x5fddd3e8,0x956fe554,0x23fffff8,0x42ff23e8,0x5fddd3e8,0x24fffea8,
    0x644fffe8,0x0ce804ff,0xff703dc0,0xfffc8bff,0x32aa4fdd,0xffc82adf,
    0x2fc4fd4f,0xfcaa837c,0xa81912ad,0x01001fe3,0xfffe8020,0xd00336ff,
    0x20dfffff,0x5f89fa00,0x9bfffffa,0x83b2626c,0x46fffffe,0x226c8098,
    0x44d93fff,0x00200ec9,0x20026201,0x019801c8,0x20040088,0x06fffffe,
    0x3e27e826,0xffd06f85,0x0000dfff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x026204c4,
    0x4ccc054c,0x33331000,0x26666621,0x02666219,0x026204c4,0x40620266,
    0x42603309,0x10999998,0x26133333,0x30c40cc1,0x09999988,0x054c0130,
    0x26602620,0x26619999,0x03119999,0x2204c131,0x4c026661,0x01310199,
    0x4c0620cc,0xfd1be60a,0x4ffff981,0x0fffffe2,0x25ffffb0,0xfeeeeefa,
    0x7fffff50,0x3fe66fa8,0x6c3ffc40,0x5fb3f887,0xfff94fb8,0x3fff27ff,
    0x7dcff4ff,0x43f36c86,0x44fffffe,0xffa85fea,0xdff104ff,0xffffff88,
    0x3fffffe7,0x2fd87f97,0x3e7e89f3,0x7fc5ffff,0x1fdc4fff,0x3f22ff98,
    0x93fffa60,0xd07f72fd,0x7c45737f,0x103ffcae,0x2a159fdf,0x21f0bd9d,
    0x3ffcadfa,0x83fd97ec,0x3e41fffb,0x44fb9fc4,0x559f91fd,0x2ab3f215,
    0x3fe2ff1a,0x41f56d80,0x21acfdaa,0xec85fffe,0xfd82ffbb,0x6666446f,
    0x333326fd,0x21ff15fe,0xd13e66f9,0x7ed57fcf,0x3ff2bfe3,0x7cc0fee3,
    0x7c43f26f,0xf12fe9af,0xdf10df1d,0xff32fc40,0x507f3ee0,0x1f1fb51b,
    0x47f993ea,0xb06f9ef9,0x27c87f7f,0x1fe25f11,0xc817e4ff,0x3f6ff02f,
    0x777ff4c2,0x417e42ef,0xb805f9bc,0x37dfd43f,0xf8817ec0,0x7ecff20f,
    0x4fd13e62,0x7f97e66f,0x03fb93ee,0x3f25fff3,0x2fcc9f50,0xf105fdf9,
    0x3a2fc40b,0x1faee81f,0x43ebe2d4,0x20ff44fa,0xdf02fffd,0xa8fb8df1,
    0x3fa2f99f,0x17e49f31,0x5ff02fc8,0x9df910bf,0x2fc839fd,0x32017e60,
    0x37dba23f,0xfe81be20,0x37cffc43,0x3a6677e6,0x23fc9be7,0xfb8ff27f,
    0x2bf9f303,0x44bf50fc,0x542ffc6f,0x7c5eeffe,0x85fb4fff,0x1fffabf9,
    0x3e3f72b5,0x2fd89f50,0xfa837fc4,0x47dc1fd3,0x321f9bfc,0x7e45f93f,
    0xff91eeee,0x3ffe5fff,0x364fe00f,0x3e602fc8,0x907fc405,0xf901be3f,
    0x6417ee07,0x7fcc1fef,0x3fe7ffff,0x77fc5fff,0x0fee0dfe,0x64fedfcc,
    0xb79ff10f,0x37fb2eff,0x33bf662c,0x9677e43c,0x547e41fe,0x3eb50cdf,
    0x13ea1f0b,0xfffa83fd,0x5f91fc80,0x4f7fc7dc,0x7f57e61f,0x3bbbbf20,
    0x3999bf91,0x440ff7fe,0x3f20bb2f,0x8817e602,0xf93e62fe,0x441fe206,
    0xdff100ff,0xf999df30,0x7f657fcf,0x03bfbfe5,0x2fe607f7,0x2a0fcdf9,
    0x976fefff,0xf8859bfd,0xf897e205,0x7ee7fc0f,0x3e0aad41,0x7fc49f50,
    0x42feff40,0x25fdccfe,0xfbfbfbfa,0x22fcffc0,0x05f902fc,0x903fe3fe,
    0x0fffffff,0x2fcc05f9,0x7e43fe88,0x82effeee,0x05fd03fc,0x4f982fc8,
    0x7c4df3f4,0x17eeff0f,0x4fe607f7,0x8880fdfd,0x7f9315f9,0x205f8813,
    0x517f25f8,0xa83fffff,0x543e2f8d,0xf717f24f,0x7cc3ff19,0x2a7fffff,
    0x0fef8ddf,0x321fefe4,0x205f902f,0xc98bf77f,0xc82dfabf,0x217e602f,
    0xffd82fe8,0x443fffff,0x05fb80ff,0x4f982fc8,0x7c4df3f4,0x21fe9fe6,
    0x27f303fb,0x3600fffa,0xfffffd2f,0x6677ecc9,0x3f3be23c,0xf53ec1ff,
    0x05d6a39b,0x3f3bea1f,0x43fe21ff,0xb0bee6fb,0x6cffe63f,0x7ffd40ff,
    0xfc817e40,0x4ff2cccd,0x447d43fe,0x6ff65c3f,0x3bf72e2c,0x3bbffa4c,
    0x641be05e,0xeeff883f,0x82fc85ee,0xff3f44f9,0x3fc7fd99,0x677dcbf7,
    0x747f33cc,0x3f72e0ff,0xa82fb85f,0x26ffffff,0x40cefff8,0x3ffea4f8,
    0xffffff53,0x3bffea1f,0x3e27e40c,0xfb81fb2f,0x3ee1ff34,0xc86ff887,
    0xffff902f,0xff99fe9f,0x217c5ee0,0x24fffffe,0x27fffffe,0x07ffffff,
    0x03fe21be,0x3fffffe2,0xf982fc87,0xdfff3f44,0x3e27f859,0xfffff70f,
    0xffb8fe6d,0x00b7ffa0,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x22000000,0x41999999,0x3330cc19,
    0x33000003,0x00000000,0x01500000,0x55101930,0x17e27f81,0x10000000,
    0x00006005,0x41980544,0xe9fe43fc,0x4c009f07,0xfffd85c2,0x7d4184ff,
    0x10ffffff,0xf9fee3ff,0x260cffff,0x04ffbfff,0xfea83fea,0x7fec44ff,
    0xf90bf22f,0xfff907ff,0x47ffd70f,0x7dc01ff9,0x22feee81,0x6f57e27f,
    0x5f90dffb,0x675c3ffd,0xfb04fbcf,0x1ff7e407,0x3f203f70,0x77ffc4ff,
    0x0fe8df30,0xa87f10fb,0xf72fe80f,0x3ff332e9,0x447fff63,0x0aacfdaa,
    0x9ffa7ff3,0x25feaaff,0xfcdfd9ba,0x5c1efb81,0xf13fdaac,0x7fc7b9bf,
    0x3ff3bf25,0x12ab7f24,0x47fb5bf5,0x3ee02ffa,0x7f93e601,0x6fff57e2,
    0x9bff93fe,0x7ef7dcdf,0x1eb80fce,0x7b5999b0,0x3e607ee0,0x64cc1fb3,
    0x7cc7fa2f,0x27aa3f25,0x1f3772f9,0x7eff443b,0xab8bf905,0x82fc84fc,
    0xfdf8eef9,0x83fc4ff0,0xfd87f1fa,0x94f9800e,0x88ed409f,0xfd9fe26f,
    0x8df1fa03,0x3ba23fe9,0x3f25eefe,0xf89fe4fe,0x57e65fd5,0xfb9fa5fc,
    0x02faafa9,0x8fafb4c0,0xf503f707,0xfc983ea3,0x7e53ee0e,0x33f67ee1,
    0xdfdf71fa,0x06ff885d,0x3f201df5,0xfa82fc83,0xf0fbfbfb,0x765c7f8f,
    0x3fa4feef,0x7f76dc05,0x54001fd5,0xfa87f44f,0x3fe21cff,0xe887feee,
    0xbfb9914f,0x3e2be699,0xd5f89fe4,0x2fcafc4f,0xfa8fb862,0xfff52f99,
    0x52a1ffff,0x3ea3d3ef,0x30ffffff,0xc98fb39f,0x7dbe24fd,0x7ffdfcc6,
    0x3bfea0fb,0x42fffb81,0x9f901ff8,0x3ea0bf20,0xf0facff9,0x9f737d4f,
    0x543557f9,0x7bfb02ff,0x003fabf7,0x07f44fa8,0x223fff93,0x84ccccef,
    0x1fb81efb,0xd277ff44,0x27eafe4f,0x405f95f8,0xf99fa8fb,0x99999932,
    0xad7d6619,0xbfb9930f,0x7ffe4199,0x22fd4cc1,0x7c43fcfc,0x367efbfe,
    0x2e3fdfdf,0x3a2fe8df,0x55dfb02f,0x1f505f90,0x3e3f55fb,0x3a1fffef,
    0x74c03f56,0xf53fc43f,0xc980ff6b,0x3fc4ff30,0x03fc9f90,0xfb8077ec,
    0x37f60301,0x44fd5ffd,0x5c05f95f,0x2f99fa8f,0x52ba0288,0x03f705cc,
    0x7ffc40c4,0x07ffcc0d,0x26ffb7fc,0x20a8f999,0x7e4ba25c,0xff12cccf,
    0x05f90fff,0x3eaf71f7,0x8179dff1,0xa9dfeafc,0x7c5fe880,0xf35ffbbf,
    0x7fc7b9bf,0x3fb3bfa5,0x3faaaf23,0x2eabbf22,0x880bfd12,0x7fffcc0a,
    0xf5fff30f,0x95f89fab,0x547dc05f,0xfd82f99f,0xdb9bd303,0x2607ee01,
    0x260fffff,0xe82ff400,0xd30bfb3f,0xfffd0001,0xfc8009ff,0x1fa87b82,
    0xcfe980ff,0x3601fffa,0x7d7ffd45,0x8bfffaa5,0x3ff623fd,0x7fffec3f,
    0x3ffffc84,0x666407d1,0x55513ccc,0x9fa03055,0x405f95f8,0xf99fa8fb,
    0x5401fb82,0x4064c02b,0x002aaaa8,0x00000000,0xfc800000,0x2f987c82,
    0x188200ff,0x0800c000,0x31004010,0x00011001,0x0bffffff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x905f9000,0x1fe5f30f,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xff887fcc,0x80100980,0x2e0c1021,0x882bbbbb,0x000f6401,
    0x41000022,0x88000808,0x907ae040,0x975c5bbb,0xaaaaaaaa,0x54222221,
    0x0000002f,0x00000000,0x00000000,0x17ed7f20,0xff70ffaa,0xf31f905f,
    0x8fea3f67,0x84fffffe,0x57fe03fd,0x5ffffff8,0x3bf217ee,0x57e23711,
    0x6ea7c47f,0xfc8bfa20,0xcb8dff12,0x7dbfe2cc,0x5fffffff,0x3ddbfffe,
    0x00000000,0x00000000,0x40000000,0xee85fdfe,0x366fe63f,0x3753e60f,
    0x003f6bf1,0x201f9f50,0x777716fb,0x25f98bf7,0xfbbfedfa,0x11babf11,
    0x7441767d,0xfb17e40e,0x9a7ec007,0x09999999,0x0ccf3332,0x00000000,
    0x00000000,0x40000000,0xf500fff8,0x1fa87dc7,0x2e0fddba,0x7774f8af,
    0xd3e85777,0xd013e60b,0x3a2f700b,0x6ea7c6ff,0x3f700000,0x00080008,
    0x00000000,0x00000000,0x00000000,0x1fff1000,0xbfa8fea0,0x27f20fd8,
    0x5c7ec4f9,0xffffff2f,0x1fa87dcb,0x9003bb22,0x02aa0007,0x0001767d,
    0x0000f540,0x00000000,0x00000000,0x00000000,0xfd000000,0xbf950bfb,
    0x217ffe45,0x2e3f96e8,0x2005f8af,0x9326c2d8,0x00000005,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x0ffa9f90,0x988fffff,
    0x4761b500,0x0001b34a,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xf137d400,0x0000003f,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_bold_16_latin1_x[224]={ 0,3,1,0,0,0,0,3,2,1,1,0,1,1,
2,0,0,0,0,1,0,1,0,0,0,0,2,1,0,1,1,2,0,0,1,0,0,1,1,0,0,1,1,1,
1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,1,1,0,0,0,0,1,1,
0,1,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,1,3,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,
3,0,0,0,1,0,0,1,0,0,1,0,1,1,0,1,0,2,3,1,1,1,0,0,0,1,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
 };
static signed short stb__consolas_bold_16_latin1_y[224]={ 11,-1,-1,0,-1,-1,0,-1,-1,-1,-1,2,8,5,
8,-1,0,0,0,0,0,0,0,0,0,0,2,2,2,4,2,-1,-1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,12,-1,2,-1,2,-1,2,-1,2,-1,-1,
-1,-1,-1,2,2,2,2,2,2,2,0,3,3,3,3,3,3,-1,-2,-1,4,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,2,-1,0,0,0,
-2,-1,-1,0,0,3,5,5,-1,0,-1,1,-1,-1,-1,3,-1,5,11,-1,0,3,-1,-1,-1,2,-3,-3,-3,-3,
-3,-3,0,0,-3,-3,-3,-3,-3,-3,-3,-3,0,-3,-3,-3,-3,-3,-3,3,-1,-3,-3,-3,-3,-3,0,-1,-1,-1,
-1,-1,-1,-2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,1,-1,-1,-1,-1,-1,-1,-1,
 };
static unsigned short stb__consolas_bold_16_latin1_w[224]={ 0,3,7,9,9,9,10,3,6,6,7,9,5,6,
4,8,9,8,8,7,9,7,9,8,8,8,4,5,8,7,7,6,9,9,8,8,9,7,7,9,9,7,7,8,
7,9,9,9,8,9,8,8,9,9,9,9,9,9,8,5,9,5,9,9,6,8,8,7,8,8,9,9,7,7,
8,8,7,9,7,9,8,8,8,7,8,7,9,9,9,9,7,7,3,7,9,9,9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,3,8,9,9,9,
3,9,8,9,7,8,8,6,9,7,7,8,6,6,9,8,9,4,3,6,7,7,9,9,9,6,9,9,9,9,
9,9,10,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,8,9,9,9,9,9,9,8,8,8,9,
8,8,8,8,9,7,8,9,8,8,8,9,8,8,9,8,9,9,9,9,9,9,9,8,9,8,8,9,8,9,
 };
static unsigned short stb__consolas_bold_16_latin1_h[224]={ 0,13,5,11,14,13,12,5,16,16,8,9,6,3,
4,14,12,11,11,12,11,12,12,11,12,11,10,12,10,6,10,13,16,11,11,12,11,11,11,12,11,11,12,11,
11,11,11,12,11,14,11,12,11,12,11,11,11,11,11,16,14,16,6,3,5,10,13,10,13,10,12,13,12,12,
16,12,12,9,9,10,13,13,9,10,12,9,8,8,8,12,8,16,17,16,5,11,11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,13,14,11,11,11,
17,14,5,12,9,7,5,3,9,4,7,10,8,8,5,12,14,4,3,8,9,7,12,12,12,13,14,14,14,14,
14,14,11,14,14,14,14,14,14,14,14,14,11,14,15,15,15,15,15,8,14,15,15,15,15,14,11,13,13,13,
13,13,13,14,10,12,13,13,13,13,12,12,12,12,13,12,13,13,13,13,13,9,12,13,13,13,13,16,16,16,
 };
static unsigned short stb__consolas_bold_16_latin1_s[224]={ 255,142,122,127,219,217,182,149,47,92,223,
178,90,181,153,1,48,145,154,229,163,196,219,173,204,247,66,213,40,72,98,
86,82,72,211,125,52,110,102,172,201,137,246,118,229,11,237,11,21,86,220,
96,1,134,92,82,62,191,182,60,209,54,80,171,105,49,156,58,165,89,218,
236,210,193,38,237,228,148,131,71,208,174,139,81,201,123,203,213,30,144,240,
66,5,74,112,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,255,192,96,
11,236,1,1,124,130,1,115,55,96,181,168,158,47,106,248,196,139,30,238,
166,188,40,188,64,77,105,115,248,199,20,134,189,30,10,31,68,40,49,77,
115,163,172,181,154,21,144,179,109,119,129,139,231,105,149,159,169,99,58,246,
199,10,19,1,246,39,229,30,164,77,112,227,190,87,67,21,39,29,58,58,
122,132,93,146,158,154,68,48,183,103,19,29,9, };
static unsigned short stb__consolas_bold_16_latin1_t[224]={ 1,34,84,61,1,19,48,84,1,1,73,
73,84,84,84,19,48,61,61,34,61,34,34,61,34,61,73,34,73,84,73,
34,1,61,61,48,61,61,61,48,61,61,34,61,61,73,61,48,73,19,61,
48,73,48,61,61,61,61,61,1,1,1,84,84,84,73,34,73,34,73,48,
19,48,48,1,34,48,73,73,73,19,34,73,73,48,73,73,73,84,48,73,
1,1,1,84,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,1,34,19,
61,48,61,1,19,84,48,73,84,84,84,73,84,84,73,73,73,84,48,1,
84,84,84,73,84,48,48,48,1,1,19,19,1,19,19,61,19,19,19,19,
19,19,19,19,19,61,19,1,1,1,1,1,73,19,1,1,1,1,19,48,
19,34,34,34,19,34,1,73,48,34,34,19,19,48,48,48,48,34,48,34,
34,34,34,34,73,48,34,34,34,34,1,1,1, };
static unsigned short stb__consolas_bold_16_latin1_a[224]={ 141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_bold_16_latin1_BITMAP_HEIGHT or STB_FONT_consolas_bold_16_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_bold_16_latin1(stb_fontchar font[STB_FONT_consolas_bold_16_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_bold_16_latin1_BITMAP_HEIGHT][STB_FONT_consolas_bold_16_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_bold_16_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_bold_16_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_bold_16_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_bold_16_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_bold_16_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_bold_16_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_bold_16_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_bold_16_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_bold_16_latin1_s[i] + stb__consolas_bold_16_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_bold_16_latin1_t[i] + stb__consolas_bold_16_latin1_h[i]) * recip_height;
            font[i].x0 = stb__consolas_bold_16_latin1_x[i];
            font[i].y0 = stb__consolas_bold_16_latin1_y[i];
            font[i].x1 = stb__consolas_bold_16_latin1_x[i] + stb__consolas_bold_16_latin1_w[i];
            font[i].y1 = stb__consolas_bold_16_latin1_y[i] + stb__consolas_bold_16_latin1_h[i];
            font[i].advance_int = (stb__consolas_bold_16_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_bold_16_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_bold_16_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_bold_16_latin1_s[i] + stb__consolas_bold_16_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_bold_16_latin1_t[i] + stb__consolas_bold_16_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_bold_16_latin1_x[i] - 0.5f;
            font[i].y0f = stb__consolas_bold_16_latin1_y[i] - 0.5f;
            font[i].x1f = stb__consolas_bold_16_latin1_x[i] + stb__consolas_bold_16_latin1_w[i] + 0.5f;
            font[i].y1f = stb__consolas_bold_16_latin1_y[i] + stb__consolas_bold_16_latin1_h[i] + 0.5f;
            font[i].advance = stb__consolas_bold_16_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_bold_16_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_bold_16_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_bold_16_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_bold_16_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_bold_16_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_bold_16_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_bold_16_latin1_LINE_SPACING
#endif

