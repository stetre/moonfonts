// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_19_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_19_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_19_usascii_BITMAP_WIDTH         128
#define STB_FONT_arial_19_usascii_BITMAP_HEIGHT        102
#define STB_FONT_arial_19_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_19_usascii_FIRST_CHAR            32
#define STB_FONT_arial_19_usascii_NUM_CHARS             95

#define STB_FONT_arial_19_usascii_LINE_SPACING          12

static unsigned int stb__arial_19_usascii_pixels[]={
    0x1440a628,0x54220544,0x80099880,0x4c400aa9,0x4c001009,0x80c4000a,
    0x00006619,0x6fc92e00,0x0ffcc6b8,0x7e425d3a,0xfff9104f,0xfd019dfd,
    0x017d507f,0x277fffd4,0x3d80fa80,0x37f6e0ba,0xdd95b1e9,0x981d1019,
    0x3b235c2f,0x403a2b80,0x1bee884e,0x9d03baa2,0x5fdfff10,0x7317df90,
    0x01f5009f,0xf503e23f,0x3a3ffb39,0xc85fbaef,0x46b85f04,0x2097004d,
    0xd805d84e,0x3b213a0e,0x7cc6d8d8,0xa807f503,0x7987c40f,0xe8fec4f8,
    0xf88be60f,0x46b87f01,0x7c47b04d,0x32e44e81,0x367b1bfb,0x6cfe13a4,
    0x01b60c98,0x90fa80fb,0xdfdddfdd,0x3f70be63,0x7b93e1ba,0xe8d70fa0,
    0x83e89d04,0x7cc3e64e,0xd52fedac,0x0da7c274,0x0fb80bf0,0x6d543ea0,
    0x50adeaad,0x7d1f883f,0x90364bd0,0x81fc6b89,0x2742ec4e,0xfd13e2b7,
    0x42743e23,0xf880ecfc,0x5017cc04,0x0ba3d81f,0xd1fa85f3,0x02ec9f0b,
    0xc8b5c5f5,0x6c89d00f,0x7dcf64e8,0x21f13e40,0x9dff704e,0x2601fc41,
    0xf03ea02f,0x9f103e23,0x98fd1fc8,0xf7013a2f,0x00fddae3,0x4e87b89d,
    0x2ec2ec7e,0x3a0274f5,0x202f46fd,0x43ea00fa,0xcfdccfcb,0x2e33ee0c,
    0x53bfd1ff,0x2605d8dd,0x2ecdae3f,0xe86c89d0,0x7c2f47e4,0x404e9764,
    0x3f23f98d,0x4499b600,0x99fb70fb,0xd98199dd,0xbbd1fbff,0x06c81bff,
    0x1f8d7176,0xe84d89d0,0x323e4f64,0x2741f72f,0x4f86c322,0x3ea037e2,
    0x47c87e63,0x4200f64c,0x8029d1f9,0xd70fa07a,0xf89d03e8,0x4d724e83,
    0xccfec9df,0x3e22742f,0x983f11b3,0x3fca9cff,0x45fbaef8,0x9800be3d,
    0xf3009d1f,0x8d70fa01,0x7c49d04e,0x43e64e81,0xdfe8beea,0x3613a131,
    0x306d9dbf,0x205bffd9,0x1f85ffd9,0x7cc001f1,0x136009d1,0x9b1ae1fc,
    0xd06b93a0,0x9001fc89,0x36213a1f,0x0801cfff,0x0c180200,0x0d42a200,
    0x7c40f980,0x417635c2,0x27407e2f,0x4c405fec,0x8813a1fd,0x0000000e,
    0x00000000,0x03fee3c8,0x71efa8d7,0x2e16e3fd,0xffd504fe,0x819ffdbd,
    0x01902efe,0x99999991,0x00000799,0x22000000,0x0e6032a3,0x705d4326,
    0x80355301,0x009acba9,0x88001555,0xaaaaaaaa,0x0000001a,0x00000000,
    0x00000000,0x00000000,0x00000000,0x20180000,0x0018800a,0x00800033,
    0x44020010,0x11000000,0x43000100,0x0bf7a608,0xffd801f3,0x3e1ec01e,
    0x541fffff,0xfd504ffe,0x3bfae09f,0x5c013a0c,0x4c1e8bfd,0xeb81dffe,
    0x3f3004ff,0x8b54c93a,0xd87d403d,0x9f10fc05,0x7d415555,0x7cc4ea8c,
    0x7cc4fb8c,0x13a4fa8b,0x3f6b7ea0,0x2633e62f,0x5457d46d,0x71f9804f,
    0x30f89745,0x3dcd900f,0x00fa8d30,0xd87ea2ec,0x8d907d45,0x3e013a7b,
    0x8db17e44,0xf913a1e9,0x3603f300,0x401ecf32,0x204e8bfa,0x2203dc4b,
    0x7f17c42f,0x71f22f88,0x67ece74f,0x5f50be60,0x6c0801fc,0xfadfdb87,
    0x646dc7b1,0x7ec00d34,0x3617404f,0x220beece,0xf89fc43f,0x33e63f82,
    0x3bfa4fb9,0x03ea6fba,0x2ebe25f1,0x7dc401dd,0x7ed6fd43,0x7e449d1f,
    0x22007b0c,0x3e200ffe,0x7e567f40,0x53ee36c6,0x544f81f9,0x07f45fff,
    0x50be25f5,0x2ff7e65f,0xbff305fd,0xd1fd89f0,0xd9169809,0xf9dfa817,
    0xa86a8756,0xff30fd41,0x3e69ddd9,0x2ff24f81,0x8bd0eea8,0xf913a4f8,
    0x1f51bea5,0x21dd5110,0xe8fdc2f9,0x8dc97404,0x9f52f43d,0x2003c8bd,
    0x45f5c44f,0x7f05f13e,0x74be627c,0x37ee5e83,0x9f32ffda,0x7cc03f88,
    0x1f981f52,0x5f35409d,0x642f89aa,0x4c0fc2ff,0x7c404f80,0x25f10fe2,
    0x9d4e81f9,0xbeeb89f0,0xf07f11f9,0x9a7c0549,0x4e8fd42f,0xf31f8ba0,
    0x17fc45e8,0xf513e0f3,0x83ea26c3,0x7d07d45d,0x98dd1f98,0x83e6062f,
    0x9d17cc5e,0x913e1fa8,0x35413a3f,0x3f225cb6,0x2feeea9c,0x22fee0b7,
    0x457dc6ea,0x46fcc2fa,0x457dc3fb,0x27bfa6ea,0x362746ea,0x75467d46,
    0x75457dc6,0x7dc5fdc5,0x0ba09d1f,0xf903fbf5,0x29d11bff,0x3ffae02d,
    0x3efec80d,0x209fff50,0x3a0befda,0x540bffdc,0xa81ffdef,0xeb80dfff,
    0xffc80bef,0x109d1faf,0x0600a205,0x40020030,0x02001000,0x57510020,
    0x01000801,0x00000020,0x00000000,0x00000000,0x00000000,0x26011000,
    0x02a2001a,0x54220188,0x00266000,0x01100a88,0x266614c0,0x31099999,
    0x02621880,0xf513a088,0x5c07ffff,0xc83efffe,0x01edb607,0x3bffffaa,
    0x3fffae00,0x4402743e,0x3ffe0ffe,0xf75fffff,0xfd17e207,0x2745f501,
    0xf9315bf3,0x317df707,0x207c89f9,0x7cc0b76d,0x0fe9889d,0xf931cfb8,
    0x7d402743,0x99999981,0x203fa3fc,0x22fcc0fd,0xf92744f8,0x07f51ba0,
    0x207c8fee,0x3e60f36d,0xfa89f104,0x0274dd04,0xbf3003dc,0x17d45f98,
    0x21ba2fb8,0x2603f24e,0x9b6036c1,0x1e9b607c,0x0aa00fb8,0xe854c0d9,
    0x320dfc9c,0x7c403efe,0xf12fb80e,0xfc8fd809,0x3be64e81,0x2027c01b,
    0x6d81f27c,0x001b6132,0xefe8017a,0x3f6a6eba,0x00ff401a,0x801db1fd,
    0x9d02fef8,0x1dfffe98,0x3ea01fc4,0x536c0f91,0x33309f0d,0x0027c433,
    0x707dc1dd,0x805f900f,0x5001fef9,0x882740df,0x3e23ffdb,0x7c8fd403,
    0x40f89b60,0xfffff85f,0x5e8013e0,0x80f70fcc,0x9f7003fb,0x80fff400,
    0x0fd8804e,0x21f7013a,0x5d1b607c,0xb99986d8,0x41017a0f,0xf70fc44e,
    0x3002fcc0,0x27f2005f,0xf14e80fe,0x6d8be607,0x0fa9ba08,0x5c4b8bd0,
    0xc83ea00f,0x3a5f500f,0x0f70fc44,0x98003be2,0x33fa802f,0x7749d0bf,
    0x3e60fa80,0x8bf33e64,0x43f983f9,0x80774479,0x417e60fc,0x3f113a5e,
    0x00fe83dc,0x22017cc0,0x3a17dc5f,0x2aafbe64,0xadfa85fc,0xfc85ffc9,
    0xf06fdaac,0xaacfe883,0x7d40dfeb,0x21feb9bd,0xf70fc44e,0x55559f70,
    0x0be60555,0x1fd01fb0,0x3ff66274,0x3f6603ef,0x41dfcdff,0x00ceffec,
    0xffd9107b,0x7ed403bf,0x22741cef,0x321ee1f8,0xffffffff,0x5c05f307,
    0x00df102f,0x10200044,0x20022059,0x00044008,0x00000004,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x10198044,0x43100221,
    0x4ccc4008,0x22199999,0x44019999,0x06666621,0x440310c4,0x09801310,
    0xa8710011,0xff10f90e,0x03f29f03,0x9013a7d8,0xffffffff,0x7ffffe4f,
    0xb1fa84ff,0x3bffffff,0x02fd8fdc,0xb81bf6d9,0xd900db6f,0x83f50ea8,
    0x97c43ffa,0x49f102f9,0x4ccc404e,0x321999fd,0xfda9999f,0x9fd8fd44,
    0x70ffb999,0x203ff63f,0x203ffb6c,0x900db6fe,0x643f880d,0xd07d45cd,
    0x4e83ea0b,0xf903e400,0x47ea3740,0x2e5f507d,0x90bffb1f,0x2613bb6d,
    0xc80db6df,0x17a01eff,0x46c8f57f,0x745d80fb,0x7c80f664,0x46d81f20,
    0x220fb1fa,0x3b63f73f,0xedb642fb,0xb6cdb86c,0x0afd980d,0x88f99f20,
    0x7f113a2f,0x9a742f88,0x903e405f,0xf513e60f,0x87dc1f63,0x3f6db0fa,
    0x7cf6db20,0x6db65741,0xf9806c80,0xf8a74d70,0x43dc6d81,0xc805f8ce,
    0x3bbbf207,0x7d40cffe,0xb7555fb1,0x6d87d4df,0x6db64bf1,0xb647cc9d,
    0x006c806d,0x56c9365f,0x4e87ea0f,0x9006fde8,0x6667e40f,0x23f500ff,
    0xcefffffd,0x2e6d9e60,0x5db6d92f,0x6db65726,0x07546c80,0x1f317d36,
    0xf99fc0b9,0x02fdfe81,0x11f207c8,0x23f501dd,0x6cf3007d,0xdb647ec6,
    0x64ba3f36,0x8d900db6,0x3d75c1fb,0xd901f57c,0xfcaf41b2,0xf903e400,
    0x3f50bf30,0xb3c401f6,0xb6cdf88d,0xd93ce74d,0x21b201b6,0x42e7cc0d,
    0x3e201fcd,0x229d02f9,0x903e405f,0xf50ff20f,0x6c001f63,0xdb6ffb86,
    0x2d92675c,0x0afb806d,0x20ffe0b3,0xfee807fb,0x17d49d00,0x03e40f90,
    0xd8fd41fd,0x363d5007,0x9b6dfb06,0x6db22ff9,0x22aaaaae,0x6c013fe8,
    0x804f981f,0xb13a04fa,0xc81f201f,0xfa97e607,0x3ee00fb1,0x5be20db1,
    0x5b23f46d,0x6ffffffd,0x00000000,0x00000000,0x00000000,0x00000000,
    0x0cc01100,0x221d30b7,0x10002201,0x13333333,0x26666662,0x26666219,
    0x4c402000,0x4c400199,0xd8018000,0x7cc5fb06,0x40f93642,0xfffff16d,
    0x3fff29ff,0xff94ffff,0x21ffffff,0xcffffffd,0x39ffd700,0x77ffffec,
    0x004fc802,0x3f2b63ec,0x82fd86dc,0x0f91fc5e,0xaaaa8b6c,0x33f92fca,
    0x3f213333,0x21999999,0xfca999fd,0xe98bfa86,0x2a667b66,0x7efc02fd,
    0xe8ff5000,0x6c6dbcee,0x2a1f702f,0x6d81f20f,0x00f92f40,0x41f600f9,
    0x262f44fa,0x17a0db1f,0x803f8fa8,0x23f47df8,0x8807f66d,0x07c8bb2f,
    0x20fc81b6,0x007c807c,0x2a3ec0fb,0x06d9fc40,0x6daec0bd,0x747bcd80,
    0x01fdb6c5,0x642f8dd8,0xd999999f,0x7c85f306,0xfb007c80,0x2e007e40,
    0xfb98db1f,0x3ea5f101,0x23ddae01,0x7fef6c4e,0x87bfa803,0xfffffffc,
    0xf90db06f,0x64bfffff,0x5fffffff,0x01fa81f6,0xfffd93e6,0x3ee03fff,
    0x8fcc17e0,0x3f62747b,0xf801fd9f,0x999fc84f,0xf886d999,0xaaaafc83,
    0x2aabf21a,0x81f61aaa,0x8bf301fa,0xfdbaaaed,0x0fc8bd04,0x9d1ee3e8,
    0x1dd11fd8,0x7c81fc80,0x03ee1b60,0x01f201f2,0x01f703ec,0x20db0bf5,
    0x7ffcc0fc,0x7643ffff,0xd09fc999,0x2fcc6d89,0x03e41b20,0x320bd0db,
    0xb007c807,0x7d43ec0f,0x3e60db04,0x55557e42,0x7ffec6ea,0x89d4ffff,
    0x103fc86d,0xd81f207f,0x7c81fc46,0xfb007c80,0x7f50fea0,0x1fb836c0,
    0x01fb827c,0x836c03dc,0x037fc1fe,0x2636c0f9,0x900f901f,0x5555555f,
    0x32aabf61,0x577c45fd,0x5db1aaaa,0xa8bfb555,0x80bf101f,0xdb06cc7b,
    0x1771be60,0x8db03e40,0x00f900fa,0xfffffff9,0x3ffff65f,0xfffa83df,
    0xffb4ffff,0xdb07dfff,0x2e00fc80,0x0000fd47,0x00000000,0x00000000,
    0x00000000,0x04c00000,0x00000440,0x00000000,0x00000000,0x74c3d800,
    0x204c3d51,0x301dfffc,0x3dfda85f,0x03bffd70,0x2603bfb3,0xfd881dfc,
    0x3aeb61df,0x005f40df,0xbadb5c40,0x19fd34fe,0x547e6274,0x7dc5f31e,
    0xff30db12,0x7dd6fd45,0x75cdfe43,0x7e56fd47,0x7e56fdc5,0x7ed56f46,
    0xdd77ddd0,0x801cffc8,0xbdd4ffc9,0xf57dbf95,0x07e62749,0x889d17cc,
    0x8bfbf22f,0x0f635c5f,0x262fc3f5,0xfa8bf12f,0x8e445f13,0x207ea0fe,
    0xea82dfea,0xd07742ef,0x89d35c3f,0x45f101f9,0x5f13f809,0x00fe25f1,
    0x263f9510,0x4f9999bf,0x749f05f3,0x4c6e81cf,0x9bf2601f,0x8bd01cff,
    0x89d3d47c,0x003e01f9,0x25f101fb,0xfd9801f9,0xff51fdef,0x2abfffff,
    0x3625d80f,0x313a4fff,0x37e4c03f,0x13a039fd,0x13a7a8d9,0x200403f5,
    0x25f101fc,0x3e2083f9,0x263f30ae,0x417cc02f,0x29f9504f,0x540fcc4e,
    0xfda82dfe,0x1b22742e,0x3ee2f4f5,0x05f70001,0xb8bf17c4,0xfb83f30f,
    0x2d88bf11,0x13f989f1,0x89d5e81d,0x33ff21f9,0x4ffc9800,0x3d46c89d,
    0x3ff715f9,0x274007aa,0xcfb8be20,0x37e23ea8,0x322ffa88,0x646d98cf,
    0x20eea8cf,0xd3fa89de,0x2fa1f989,0xd6b88000,0x13d46c89,0x23f3dffb,
    0x05f001fb,0x7ed42f88,0x7ff540be,0x7fdc3f8d,0xffda81df,0x7ffecc0d,
    0x03f313a3,0x913a0000,0x00887a8d,0x3e200000,0x00100102,0x10008004,
    0x00000000,0x00000000,0x7c402e88,0x00000002,0x00000000,0x00000000,
    0x7f100000,0x4002f880,0x9926c2e9,0xb72d45c8,0x3ba61d30,0x3305eeee,
    0x2eeeeee0,0x8981443b,0x19836a18,0x00000188,0x3f609b00,0x23dc3f90,
    0xf99761ff,0x555136c1,0x1fe09f95,0x77777774,0x5fc42cc6,0x641f71fa,
    0x9fff910f,0x00001b55,0xbf104d80,0x31f987f3,0x3a17c7df,0xf880be24,
    0x005fd705,0x973b3a60,0x361fabf8,0xaad99ec0,0x000efffd,0x3026c000,
    0x5cfe0bff,0xb81f35cd,0x74403ea7,0x01aefa06,0x20bfd980,0xb30faaf8,
    0x01988080,0x3bba0000,0xfe85eeff,0x2af6b901,0x25f10b97,0x403b604d,
    0x741f88fa,0x26eeeeee,0x88e85be9,0x00000027,0xeccc8000,0x77d44cce,
    0x13f1f506,0x37607d3f,0x03f901f8,0xbb8bb2ec,0x263bbbbb,0x00208171,
    0x00001111,0x41360000,0xf04f8cf8,0x807ef4f9,0x5f706bfa,0x1f30fcc0,
    0x40000000,0x000ffffa,0x4d800000,0x40fdcdb0,0x01bf25fd,0x39f507ff,
    0x40c43333,0x00000009,0x00aaaa20,0x6c000000,0x7ec1fb84,0x7f31fd40,
    0xfc80fc80,0x00ffffff,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_19_usascii_x[95]={ 0,1,0,0,0,0,0,0,1,1,0,0,1,0,
1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,-1,1,0,1,1,1,0,1,1,0,1,
1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,-1,0,0,1,0,0,0,0,0,1,1,
-1,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0, };
static signed short stb__arial_19_usascii_y[95]={ 15,2,2,2,1,2,2,2,2,2,2,4,13,9,
13,2,2,2,2,2,2,2,2,2,2,2,6,6,4,6,4,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,17,2,5,2,5,2,5,2,5,2,2,
2,2,2,5,5,5,5,5,5,5,3,6,6,6,6,6,6,2,2,2,7, };
static unsigned short stb__arial_19_usascii_w[95]={ 0,3,6,10,9,15,11,3,5,5,7,9,3,6,
3,5,9,6,9,9,9,9,9,9,9,9,3,3,9,9,9,9,17,13,10,12,11,10,9,13,10,3,8,11,
8,12,10,13,10,13,12,11,11,10,12,16,12,12,10,4,5,4,8,11,4,9,8,9,9,9,6,9,8,2,
4,8,2,13,8,9,8,9,5,8,5,8,9,13,9,9,9,6,2,6,10, };
static unsigned short stb__arial_19_usascii_h[95]={ 0,13,6,14,16,14,14,6,17,17,6,10,5,3,
2,14,14,13,13,14,13,14,14,13,14,14,9,12,10,6,10,13,17,13,13,14,13,13,13,14,13,13,14,13,
13,13,13,14,13,14,13,14,13,14,13,13,13,13,13,17,14,17,8,2,4,11,14,11,14,11,13,14,13,13,
17,13,13,10,10,11,14,14,10,11,13,10,9,9,9,13,9,17,17,17,4, };
static unsigned short stb__arial_19_usascii_s[95]={ 126,80,99,96,63,1,17,123,1,29,91,
18,106,110,122,29,55,11,77,104,112,35,94,34,65,45,119,123,86,81,76,
1,40,98,87,58,65,54,44,44,23,65,87,1,108,95,84,73,69,13,52,
1,40,27,18,1,111,98,87,58,38,35,72,73,110,28,75,18,114,38,80,
84,71,124,24,31,124,96,67,48,117,107,122,58,117,110,52,38,28,13,62,
17,14,7,115, };
static unsigned short stb__arial_19_usascii_t[95]={ 1,49,89,1,1,19,19,77,1,1,89,
89,89,94,74,19,19,77,63,19,63,19,19,63,19,19,77,49,77,89,77,
77,1,63,63,34,63,63,63,34,63,49,1,63,49,49,49,1,49,34,49,
34,49,34,49,49,34,34,34,1,34,1,89,16,89,77,19,77,19,77,34,
19,34,19,1,49,33,77,77,77,1,1,63,77,49,77,89,89,89,63,89,
1,1,1,89, };
static unsigned short stb__arial_19_usascii_a[95]={ 76,76,97,151,151,242,181,52,
91,91,106,159,76,91,76,76,151,151,151,151,151,151,151,151,
151,151,76,76,159,159,159,151,276,181,181,197,197,181,166,212,
197,76,136,181,151,227,197,212,181,212,197,181,166,197,181,257,
181,181,166,76,76,76,128,151,91,151,151,136,151,151,76,151,
151,60,60,136,60,227,151,151,151,151,91,136,76,151,136,197,
136,136,136,91,71,91,159, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_19_usascii_BITMAP_HEIGHT or STB_FONT_arial_19_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_19_usascii(stb_fontchar font[STB_FONT_arial_19_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_19_usascii_BITMAP_HEIGHT][STB_FONT_arial_19_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_19_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_19_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_19_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_19_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_19_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_19_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_19_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_19_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_19_usascii_s[i] + stb__arial_19_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_19_usascii_t[i] + stb__arial_19_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_19_usascii_x[i];
            font[i].y0 = stb__arial_19_usascii_y[i];
            font[i].x1 = stb__arial_19_usascii_x[i] + stb__arial_19_usascii_w[i];
            font[i].y1 = stb__arial_19_usascii_y[i] + stb__arial_19_usascii_h[i];
            font[i].advance_int = (stb__arial_19_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_19_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_19_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_19_usascii_s[i] + stb__arial_19_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_19_usascii_t[i] + stb__arial_19_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_19_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_19_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_19_usascii_x[i] + stb__arial_19_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_19_usascii_y[i] + stb__arial_19_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_19_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_19_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_19_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_19_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_19_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_19_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_19_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_19_usascii_LINE_SPACING
#endif

