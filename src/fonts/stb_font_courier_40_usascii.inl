// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_40_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_40_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_40_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_40_usascii_BITMAP_HEIGHT        142
#define STB_FONT_courier_40_usascii_BITMAP_HEIGHT_POW2   256

#define STB_FONT_courier_40_usascii_FIRST_CHAR            32
#define STB_FONT_courier_40_usascii_NUM_CHARS             95

#define STB_FONT_courier_40_usascii_LINE_SPACING          19

static unsigned int stb__courier_40_usascii_pixels[]={
    0x2001a880,0x0001c802,0x07300057,0x42e00810,0x202ccccc,0x43a20003,
    0x3332e01a,0xbca8804c,0x02a20001,0x00100000,0x00400008,0x08000200,
    0x07999500,0xf1004fb8,0x0006d803,0xd1003ff9,0x226401bf,0xdf1f882e,
    0x3f209ddd,0x64f90000,0xdddd900f,0x77ffcc0f,0x26003fff,0x703ffffe,
    0x372a009f,0x3ae03eff,0x1003efff,0x003bfffb,0x0bbfff66,0x33bfb220,
    0x17fff201,0x22009f70,0x00fd401f,0xb804d880,0x7c5d801f,0x07f2f882,
    0x2000bf30,0x013e63f8,0xadfb83dc,0x2013ee60,0xfea9bdfb,0x4407fd84,
    0x5cabcefd,0xaabdffa8,0x3e600efc,0x03febace,0x6dd5f7e4,0x33fa205f,
    0xf505ffca,0x4fb809ff,0x0adfc980,0x4000bd01,0x027400fa,0x20be24e8,
    0xb007f2f8,0x3ee0003f,0x5c00ff40,0x5404fc87,0x40fe606f,0x03fec2fa,
    0x2a003ff5,0x0dd100df,0x3f203be2,0x2a07f702,0x503dd04f,0x7fff305f,
    0x2601a880,0xcfffeffe,0x000fd42e,0x3e202f88,0x7c49d002,0x07f2f881,
    0x20006f98,0x804fa84f,0x801fcc7b,0x80bd03f9,0xa837ec5e,0x0e6000df,
    0x3f20fee0,0x3e21ba00,0x2a0fd404,0x103ea01f,0x80005fff,0x2e60bef9,
    0x005e83ff,0x7c405f10,0x7cc7f002,0x07f2f881,0x70002fc8,0x003fe01f,
    0x4006e8f7,0x00fd40fc,0x10df91ee,0x800000bf,0x201fc45f,0x007d42fa,
    0x2013a274,0x01fff85d,0x7007f400,0x001f707f,0x7c405f10,0x7cc5f002,
    0x07f2f880,0x3a0007f8,0x700fee05,0x2000fd4f,0x402ec4f8,0x217f21f9,
    0x000000fd,0x003ee36c,0x200d917a,0x54017c5d,0x003ff40f,0x36013e20,
    0x10009f01,0x017c405f,0x01f517c4,0xa80fe5f1,0x3f50004f,0x2e037c40,
    0x64001b27,0x7c402746,0x5f317ee1,0xf8800000,0x7d802e44,0x24d803d4,
    0x2f8801f9,0xfffcbfec,0x1fffffff,0x700007e6,0x2f88001f,0x2200be20,
    0x7c41ee1f,0x17ec07f2,0xe805e800,0x4e9ee01f,0x2f8f5000,0x43fdb910,
    0x0035c5fb,0x20fdc000,0x88f7004e,0x10fc401f,0x913a003f,0x333326df,
    0x21fdcccc,0x440005f8,0x17c4003f,0x26205f10,0xfc99afa9,0x25f10999,
    0x01ff103f,0xb003f300,0x7f3dc07f,0x447e6000,0xddffb81f,0x9b13ea1f,
    0x64c00000,0x5003f84f,0x200ed81f,0xa803e87d,0x0027dc6f,0x02fd83f3,
    0x4003e400,0x407e603f,0xffffffff,0xf16fffff,0x3fcc0fe5,0x9006d800,
    0xf8bdc09f,0x25f10002,0x11fdc0f9,0x3a27d43f,0x0f7fae63,0x7ffd9900,
    0x7cc00be0,0x8857ec41,0x06c81eea,0x32237fc4,0x107e6000,0x00159dfb,
    0x74003f88,0x4403ee05,0xd999fb99,0x5f10999e,0x037d40fe,0xb8017cc0,
    0x7c5ee05f,0x25f10002,0x11be20f9,0xf11fcc3f,0x36f3bee3,0xffb000df,
    0x00be01df,0xffd80fcc,0xf300efff,0x1efb6207,0x407e6000,0x1cfffec9,
    0xa800db00,0x13f262df,0x41763dc0,0x2e07f2f8,0x06d8005f,0x7b81be60,
    0x7cc000fe,0x17d41f31,0x23f987e2,0x983fb9f9,0x7544005f,0x3002f81e,
    0x9bdf303f,0x7d405fd9,0x3d4774c3,0x00fcc000,0x01ff5d44,0x360017cc,
    0x01ffd0ff,0x209d1ee0,0x2e07f2f8,0x1fc4004f,0x5c0ff300,0x540013a7,
    0x0fa83e67,0x85f30fc4,0x3ea02fcf,0x85fb0001,0x83f3002f,0x09f503fa,
    0x77f77fdc,0x30000f70,0x9f70003f,0x5c00db00,0x17ee20cf,0x413a3640,
    0x2e07f2f8,0x03e4005f,0x7b81bea0,0x364001b6,0x21fcc1f3,0xd0be21f8,
    0x00bb009f,0x00fe36c0,0x07f307cc,0x2a202f98,0x0036c0bc,0x8000fcc0,
    0x02f9806c,0x07dc0bd0,0x99ed9998,0x22099cf9,0x3ea07f2f,0x00fe2006,
    0x3dc0bf70,0xf88003f3,0x5fb03e64,0xb0507e21,0x00d7001f,0x09d0fcc0,
    0x00d71ea0,0x5e800172,0x01f98000,0xd001f300,0x880be00b,0xffffc82f,
    0xffffffff,0x0fe5f10f,0xf9003fcc,0x04fc8001,0x800dd1ee,0x107e60fc,
    0x09fddffd,0x1ea00b70,0x2ec7f000,0x026c6b80,0xf10007a8,0x3f300007,
    0x0fa800fc,0x4401fa80,0x20be202f,0x99de9998,0x22099bf9,0x7fc07f2f,
    0x004f8801,0x1ee03fd8,0x3e6007f3,0xca817c43,0x7a804ecd,0x8000f700,
    0x6c01f23e,0xf9801fc5,0x00fd8000,0x3e1f9800,0x400db006,0x017c405e,
    0x49d005f1,0x25f101f8,0x00bf603f,0x3a0003ee,0x2e1ee00f,0x82fd404f,
    0x4400003f,0x006c801f,0x2f98be20,0x1761fc40,0x54003dc0,0xf300003f,
    0x8806ffc3,0x3ea001fc,0x880be200,0x263f802f,0x3e5f101f,0x2013ea03,
    0x5f88004e,0xefb83dc0,0x09f9510a,0x400002ec,0x01fc406d,0x6e81fb00,
    0x07dc3e40,0x26002f40,0x2600005f,0x3bff3e1f,0x02ffcbac,0x3e204f80,
    0x200be202,0x4403e62f,0xff807f2f,0x0007ea00,0x0f700bf2,0x7ffffecc,
    0x00fd402e,0x26077ec0,0xf71b603f,0x505f9007,0x40fea05f,0x03f200ee,
    0x000dfc80,0x8b87e600,0xbdfffdb8,0x01f70000,0x2f880be2,0x1f517c40,
    0x01fcbe20,0x05e80ff2,0xf700ff00,0x015bf900,0x2a002f40,0xdfa84fff,
    0x9107fa61,0x2a2137df,0x33f603fe,0x4c0bf711,0xfd310aff,0x2e621505,
    0x800003fe,0x0fc401f9,0x827c4000,0x0be202f8,0x03d43f10,0x100fe5f1,
    0x007ea0df,0x2e013ee0,0x273f6207,0xbf502a01,0xfff31cc0,0x3fff6a05,
    0x3f6601ef,0x01efffff,0x4fffffb8,0xffffd880,0xfff880ef,0x0001ceff,
    0x8803f300,0xf900001f,0xd801f501,0xf70fcc04,0x03f97c40,0x06e82fc8,
    0x7001fd00,0x3fffa60f,0xfcacefff,0x9befb81f,0x64c4fda9,0x01aa8801,
    0x0055d440,0x002ae620,0x00157510,0x00001573,0x8801f500,0xf100001f,
    0xa804e987,0xc83e602f,0x1fcbe206,0x3e62fc40,0x04f98002,0x37f60f70,
    0xfeca99ab,0x3fa600df,0x0002efff,0x00000000,0x00000000,0x74000000,
    0x001f8806,0xdfe9f200,0x01ffb001,0x2205b8f3,0xbfffff1f,0x06d83ee0,
    0x3601db00,0x0007ffff,0x00198000,0x00000000,0x00000000,0x00000000,
    0x3f1009f1,0x87440000,0x0288001a,0x54500202,0x0a01aaaa,0x0260003b,
    0x02aaaa98,0x00000000,0x00000000,0x00000000,0x00000000,0x2001df71,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xdddd7000,0x0001bffd,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x99999500,0x00000037,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x7f5c0010,0x2aa0002d,0x2aa60000,
    0x1a980000,0x0a980000,0x664c0000,0xcccc982c,0xcccccccc,0x00333324,
    0x66665c00,0x004ccccc,0x4d5e65d4,0x00f33220,0x05999300,0x99999000,
    0xfb700039,0x76c03bff,0x0004fb8a,0xf90003fd,0x6c9dffff,0xfd882fff,
    0xf70dffff,0x3ffa29ff,0xffffb30f,0x500003bf,0xdf50bfdd,0xdddddddd,
    0x3bb62fdd,0xfd00000f,0xdddddddd,0xffb1001b,0x21fffffd,0x0006fee9,
    0x0027f754,0x3bbbb620,0x3fa2002f,0x84fdbace,0x001f886b,0x26001fe8,
    0xca889bfe,0x8179db5f,0xd731befa,0x4399f73d,0xdfb8fdcb,0x05fd531a,
    0x542ec000,0x30d9000f,0x3a00001f,0xdd100004,0x90198817,0x26c0000d,
    0x17c40000,0x701ee880,0x9902e87f,0x003fd000,0xe9803be2,0x1bf304ee,
    0x2036fe40,0x6403fdf9,0xbb00002f,0x27400f30,0x800007cc,0xf700004e,
    0x01b20003,0x0004d800,0xb002f880,0x21fb803f,0x000b500f,0x3b600155,
    0x04ff8800,0x1bf600dd,0x2007ff30,0xd80000fc,0x17c40005,0x800007cc,
    0xdb00004e,0x00364000,0x00009b00,0xf1005f10,0x2e93a007,0x00000990,
    0x2e002f98,0x001fa84f,0x5f980df1,0x000fa200,0x70001760,0x0003e60f,
    0x80002740,0x1b20004e,0x004d8000,0x802f8800,0xb9b20058,0x0001f886,
    0x2003dc00,0x006b84f8,0x0fe60374,0x5100b900,0x00017603,0x203e60bb,
    0x13a001a9,0x00274000,0x03530d90,0x00004d80,0x00002f88,0x4df6c6c8,
    0x000003fc,0x4e8005c8,0x364005d8,0x50007e60,0x7fff5c0f,0x001762df,
    0x1f302f88,0x3fffff62,0x0427400d,0x7ffffe40,0x1effffff,0x7fec5b20,
    0x9b003fff,0x7fffff90,0x000be200,0x3ae13a00,0x447302df,0x02fffffe,
    0x4e8005d8,0x364005d8,0x50007e60,0x137fb01f,0x1767f951,0x300fa800,
    0x235df31f,0x3a02feb9,0xdffffdac,0xdf999500,0x17999999,0x5f7cf640,
    0x804fdb89,0xcefe984d,0x05f1001c,0x01fb8000,0x21f7e540,0x02fccccb,
    0x7c4007b8,0x6c006c84,0x0017cc06,0x807b61b2,0x0005dcfa,0xfbf98176,
    0x40bf6204,0xcabdfffe,0x04e803fe,0x813ff200,0x426c01fb,0x88000dfa,
    0x2600002f,0xdfb5004f,0x0be20017,0xa8007ea0,0x000fa84f,0x5f980df1,
    0x3f22f400,0x05ff9800,0xf980fe00,0x01db004f,0x0fe40377,0xc80013a0,
    0x027c404f,0x009f7136,0x00017c40,0x6d405f98,0x88000bdf,0x00dd002f,
    0x2f413fe2,0x4c06fd80,0x3f7002ff,0x3f2002f8,0x01f30005,0x880077cc,
    0x1b60003f,0x640009d0,0xd80d9006,0x0000ff24,0x300005f1,0xbfb510bf,
    0xf8800017,0x809f3002,0xf304efd8,0x06efb807,0x200ff7cc,0x003cc4fa,
    0x640017e2,0x001fcc06,0xf9800172,0x80013a01,0x80f7006c,0x002fd8cd,
    0x0002f880,0xadc82fcc,0x000ab980,0xfa800be2,0x3bea20ae,0x37ee04d8,
    0x35d7ecc1,0x33f23e60,0x5c2fecc1,0x005f8006,0x2f9807d0,0x0003dc00,
    0x004e80fe,0x3dc01b20,0x017fbb60,0x0017c400,0x1000bf30,0x007fdbfb,
    0xd1000be2,0x1bfffdff,0xffd30136,0x1ae3dffd,0x3fee1f30,0xb02fffef,
    0x00bd0009,0xf9803f30,0x007d4001,0x27409d00,0x200d9000,0x5f7ec07b,
    0xf880004f,0x0bf50002,0xe9833600,0x002f8803,0x81379530,0x5973004d,
    0x7cc06b81,0x04de5cc0,0xbf000b90,0x300d7000,0x07b8005f,0x9d027400,
    0x80364000,0xf52ec07b,0x2f880009,0x005fa800,0x0f501f30,0x00005f10,
    0x800026c0,0x007cc06b,0x1001ea00,0x09d000bf,0xc8007f30,0x0be20005,
    0x320004e8,0xd80f7006,0x0001fd44,0xfb8005f1,0x812e0004,0x017c400f,
    0x009b0000,0xf3017200,0x2f880001,0x0017ee00,0xdf3003f1,0x0027c400,
    0x27403f50,0x200d9000,0x5c26c07b,0x5f10003f,0x0027dc00,0x00f812a0,
    0x000017c4,0x200009b0,0x007cc03e,0x4007ec00,0x5c005ff8,0x07ff3007,
    0x03983f60,0x09d017a0,0xb8036400,0xfb826c07,0x02f88003,0x00007f90,
    0x201ea03a,0x000002f8,0x32000136,0x007cc01f,0x006f4400,0x800bdbd3,
    0xf9f3004d,0x542fc807,0x07e400ef,0xc80013a0,0xd80f7006,0x000fee04,
    0x5f9005f1,0xb7016a00,0x44017541,0x2000002f,0x3260004d,0x00f9803f,
    0x15fd1000,0xaeda7dcc,0x017c400a,0x3ea3f2aa,0x7fd3109d,0x42b3faa0,
    0xaa82fea8,0xaaaadeaa,0xdb5501aa,0x3f6aa055,0x9d5510aa,0x155ff540,
    0xf7555553,0x43555559,0xaaaaaadf,0x807daaaa,0x441dedfc,0xcfbaaaaa,
    0x001aaaaa,0x7ff776c4,0xddd901de,0x4405ffdd,0xeeeefeed,0x3f220002,
    0x364fffff,0x3cc02fff,0x43fffe20,0xefffffe9,0xfffec801,0xff880eff,
    0xffffffff,0xfff885ff,0xffe81fff,0xfff72fff,0x3fffe609,0xffff90ff,
    0xffffffff,0x7ffffcdf,0xffffffff,0x20151007,0xfffffffb,0x06ffffff,
    0xcccccc80,0x999701cc,0x99001599,0x03999999,0x02ae6000,0x80000000,
    0x8000aba8,0x0000ab98,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x7fcc0000,0xff501fff,0xa8801dff,0x40000abc,0x26003cc9,0xa8040abb,
    0x8001bccb,0x0209acb9,0x99999980,0x4c419999,0x33101999,0xda880333,
    0x65d44001,0x998820ab,0x99999999,0x22099999,0x99999999,0x4cccc000,
    0x00009999,0x2e2000f6,0x9100bcef,0x74407df9,0x0cfffeff,0x0bfdd000,
    0xffeffda8,0x3225f0df,0xdffeefff,0x7ffecc00,0x05f3fffe,0xffffffb0,
    0x2e9fffff,0x44ffffff,0x5ffffffa,0x0fffed44,0xfdfff700,0x2e1f17ff,
    0xffffffff,0x5fffffff,0xfffffff5,0x803bffff,0xfffffffd,0x9d0002ff,
    0x007e4000,0x3ea02f88,0x1bee60ae,0x1763ee00,0x220adfa8,0xff2fbfea,
    0x01ff5019,0xa886f7e6,0x8803fffc,0xafa99999,0x3ee60999,0x99980999,
    0x3ff609de,0x9001fabe,0xffc8819f,0x3333f71f,0x33337f53,0x764ccbd3,
    0xeba99999,0x2666204f,0x001999fb,0x880013a0,0x40d9003f,0x2f4c05fa,
    0x1769f100,0x7dc01fcc,0xf8807f2f,0x8804f985,0x260003fe,0x003d401f,
    0x882ee13a,0x03fa801f,0x06b8ffd4,0x217603f1,0x03fb806c,0x00001f50,
    0xf900013a,0x2205f100,0x07d1004f,0x42ec3f20,0x3f2003f9,0x3f5005f2,
    0xf30027cc,0x0fcc0007,0x9d001ea0,0x2007e200,0x23fd005d,0x203f106b,
    0x7006c85d,0x01f5001f,0x0013a000,0x6c807f10,0xa8003f20,0xb17cc02f,
    0x8800dd0b,0x3e20032f,0x3a001b62,0x07e60002,0x4e800f50,0xf003f100,
    0x5c3e6007,0x3603f106,0x3e006c85,0x000fa803,0xffffff30,0x3fffffff,
    0x3e207c80,0x0007f303,0x6c6d809d,0x40017c45,0x23f8000c,0x0000003f,
    0x3d401f98,0x44013a00,0x003f801f,0x3f106b8a,0x01b21760,0x0fa804e8,
    0xf9971000,0x9999999d,0x03f88017,0x003dc0d9,0x07ea06a8,0x0007a8bb,
    0x4c3ea000,0x0000001f,0x3d401f98,0x44013a00,0x006d801f,0x07e20d70,
    0x8036426c,0x0fa801f9,0x009d0000,0x3e21f200,0x4001b203,0xb0bd00f8,
    0x00006c8b,0x3dcbd100,0x98000000,0x003d401f,0x0fc4013a,0x80027cc0,
    0x2203f100,0xd8806c80,0x001f5006,0x00013a00,0x01f21fc4,0x17c0009b,
    0x22ec07dc,0x8000004d,0x01761ffa,0x7cc00000,0x2003d401,0x03f1004e,
    0x02b3fea0,0x003f1000,0x7fd406c8,0x001f5001,0x00013a00,0x00fe27c8,
    0x1f40007f,0x22ec0fe2,0x2000004e,0x26c0dfea,0x98000000,0x003d401f,
    0x0fc4013a,0x3fff6e00,0x7c4001bd,0x557e4001,0x1effdcaa,0x0003ea00,
    0x00002740,0x201f27f1,0x0fa0003e,0x3a2ec0d9,0xfb000004,0x0013603b,
    0x0fcc0000,0x9d001ea0,0x0007e200,0x04fecb98,0x90007e20,0xffffffff,
    0x01f50003,0x0013a000,0x07f1d900,0x7c000bb0,0x5d80be62,0x800002ec,
    0x202ec04e,0xfffffffd,0x7cc00765,0x2003d401,0x03f1004e,0x06fd4000,
    0x2000fc40,0x04fd886c,0x1000fa80,0x00004e80,0xc803f7c4,0x41f10006,
    0x322ec06e,0x9d000006,0x65406c80,0x22dfcccc,0x03f3002f,0x274007a8,
    0x0001f880,0x44017cc0,0x0364001f,0xfa800bf7,0x200f9800,0xc800004e,
    0x00f7003f,0xcdf99aa0,0xeecccccc,0x0001f71c,0x7a803500,0x2f87f000,
    0xa803f300,0x013a000f,0x00000fc4,0x0fc402ec,0xf301b200,0x007d4009,
    0x09d007cc,0x01f90000,0x2000fe20,0x3fffe65e,0xffffffff,0x00007f15,
    0x007e6000,0x005f0fe0,0x3f1003ea,0x400be200,0x016401f8,0x3e201ee0,
    0x40364001,0x1f5002fb,0x7401f300,0x7c400004,0x007e4004,0xb0005f50,
    0x8001f70b,0x6e800028,0x17c3f800,0x7d007c80,0x4007ee00,0x037401f8,
    0x3e201b20,0x80364001,0x0fa800fd,0x3600f980,0x7dc00005,0x02fc4000,
    0xb0005f88,0x98017a0b,0xf980005e,0x3e1fc003,0x200bf003,0x06e800fb,
    0xfd007e20,0x013e2003,0xd90007e2,0x2013e200,0x0f9800fa,0x2a007f20,
    0x0004f801,0x7cc01bf5,0x0bb0000f,0xf5007be2,0x9ffd101d,0x0019f700,
    0x807fb0fe,0xbd1000fd,0x000fec01,0xefe803f1,0x800fd800,0x364001f8,
    0xa803f700,0x00f9800f,0x9882fbe2,0x7dc03ffc,0x3be60000,0x03bee61b,
    0x2605d800,0x95109bff,0x7ffdc0bf,0xbffa801f,0x17fe4c09,0xa88577dc,
    0x744002fd,0x7fd510ae,0x401f8800,0x441cfdde,0x55301ffa,0x35559f75,
    0x55fb5510,0x1aee8015,0x57f95553,0x95555555,0xffe9801f,0x21cfffff,
    0xffeeeed8,0xb10003ee,0x19ffffff,0xdd555000,0x3ff22035,0x402effff,
    0x000ffffa,0xffffffb1,0x74c017ff,0x00efffff,0xffffb100,0xaaa803df,
    0xaaacfbaa,0x7fdcf22a,0x00dfffff,0x3ffffff6,0xffa86fff,0x402fffff,
    0xfff95ff9,0xffffffff,0x001fffff,0x4026b2a6,0xccccccc8,0x980002cc,
    0x30000abb,0x0bffffff,0x00157530,0x80005e4c,0x001abba8,0x000d5d44,
    0x00357300,0x3ffffffa,0x00ffffff,0x002aeea6,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x31000000,0x99803333,0x4ccc0999,0x4ccc0199,0x26620999,
    0x0ccc4001,0x02666662,0x4c04cccc,0x09999999,0x33333100,0x01333333,
    0x22033331,0x99881999,0x4ccc4009,0x4ccccc40,0x99999999,0x26662099,
    0x99999999,0x4cc40999,0x4ccc4009,0x004ccc40,0x00666662,0x3e6046ea,
    0xb06fffff,0x25ffffff,0x3ffffffc,0xffffff50,0x0ffffe2d,0x9ffffc40,
    0xfffffffa,0x7ffffe43,0x3fffffa2,0x03efffff,0x3ffffffe,0x20ffffff,
    0x45fffffa,0x25fffff9,0x03fffff9,0x25fffff5,0xfffffff8,0xffffffff,
    0xfffff54f,0xffffffff,0x7ffc4bff,0xfff503ff,0x3ffe25ff,0x3ffe606f,
    0xff905fff,0xbd30dfff,0x26201333,0x2621fc99,0x4c0199fc,0x2609de99,
    0xd9007cfb,0x64cc13db,0xc988199e,0x7ccc41df,0xca99999b,0x999881ef,
    0x9999bf99,0x099ec981,0x409fc998,0x4c01afc9,0x5ccc1dfa,0x9999999f,
    0x264e9999,0x99999ec9,0x45d99999,0x2009bfa9,0x4cc1bfa9,0x26603ffa,
    0xfb809de9,0x3601950b,0x20d90005,0x7c4002f8,0x05f1f502,0x205cbf88,
    0x04fb806c,0x774403f8,0x002f8800,0x03dc01b2,0x3b6003ba,0x8003ea00,
    0x2006c84e,0x001f905d,0xfcf980dd,0x3a05d800,0x00364004,0x017605d8,
    0xdbd40f70,0x2e47dc06,0x3fc80d90,0xf1007f00,0x005f100b,0x07b80364,
    0x3f202fc4,0x0007d401,0x400d909d,0x80bf105d,0x47cc01fb,0x305d805e,
    0x07b8001f,0x813609d7,0x13a000fa,0x403f37a8,0x3640b94e,0x7c005fb0,
    0x100f7003,0x0364005f,0x3fa807b8,0xf5007f50,0x64274001,0xa8176006,
    0x007f102f,0x803f51f3,0x003f305d,0x0ffd07a8,0x007f00fa,0x27a807e6,
    0x323f505e,0x7ec1b205,0x801fc001,0x17c400f9,0x2e00d900,0x883f7007,
    0x01f5004f,0x036415c0,0x0fd80550,0x1f3006d8,0x40bb01b6,0x07cc004e,
    0x3e07efe2,0xc8036402,0x1f53d406,0x902e4bb0,0x001fe88d,0x0f7003f8,
    0x64005f10,0x400f7006,0x801ba0ed,0x002a80fa,0x000e41b2,0x07ee27c4,
    0x3f887cc0,0x0fa81760,0xf707e200,0x01f889d1,0x3e200fcc,0x13a3d403,
    0x902e45f1,0x0007744d,0x0bb003f8,0x64005f10,0x400f7006,0x001f95e8,
    0x02ec07d4,0x00fe0d90,0x4f897d40,0xfc83e600,0x5e80bb00,0x57617c00,
    0x4007cc6c,0x007d404e,0x6c8f71ea,0x26d902e4,0x3e0002ff,0x802fc803,
    0x3b2002f8,0x99999999,0x7cc007c9,0x7d4002fe,0x05d99999,0x26667b20,
    0x360003f9,0x4c006d8e,0x5d82740f,0x005ffb10,0x7d4fe1fc,0x2e003ea0,
    0x5402f407,0x3f89fc47,0xf5d902e4,0x0001bfdb,0x3f66207f,0x005f1003,
    0x7fffffe4,0x007fffff,0xa8005fb8,0x5fffffff,0x3ffff200,0x20003fff,
    0x4001fef8,0x40fd40f9,0xd9ef985d,0x2742fe86,0xb8be23f3,0x205f1007,
    0x87a802f8,0x5c81f76c,0xfc93ff20,0x777c001f,0x2effeeee,0x800be200,
    0x999999ec,0x4007c999,0x4000ffe8,0xd99999fa,0x267b2005,0x0003f999,
    0x4c0027d4,0x5d86d80f,0x993e25e8,0xf92ec0df,0x801ae5d8,0x200f906d,
    0x4eaf887a,0x13f205c8,0xdf001ba6,0x0579dddd,0x4005f100,0x00f7006c,
    0x006e9fd8,0x02ec07d4,0x00fe0d90,0x0005f100,0x87f301f3,0x2e0fc45d,
    0x9b20f91f,0x0b93dc4e,0x27c07cc0,0xffb07a80,0x3640b903,0x7c009f10,
    0x7c400003,0x401b2002,0x47ee007b,0x3ea004f9,0x32003a80,0x80003906,
    0xf98002f8,0x2ec1f900,0x3fb741ee,0x30be2d70,0xd001363f,0x5000fa89,
    0x6417e60f,0xf501b205,0x000fe003,0x4005f100,0x00f7006c,0x05f50fe6,
    0x00003ea0,0x017001b2,0x2000be20,0x49f100f9,0x4c07dc5d,0x2f500fdf,
    0x7d3f80fa,0x36c7b800,0x2000f500,0x201b205c,0x007f005e,0x002f8800,
    0x03dc01b2,0x1fc82f44,0x0000fa80,0x1fc006c8,0x8002f880,0x47ea00f9,
    0xb817d45d,0x363e605f,0x00fed906,0x0be25f10,0x90007a80,0x5403640b,
    0x003f801f,0x0017c400,0x01ee00d9,0x0ee803b6,0x00007d40,0x0fe00364,
    0x40017c40,0xdb7400f9,0xfd837445,0x0fe7e205,0x0017c7d4,0x000fbaec,
    0x2e4001ea,0x13a00d90,0x00000fe0,0x364005f1,0x7dc07b80,0x202fc401,
    0xc80000fa,0x801fc006,0xf98002f8,0x2ed7cc00,0xfc8977d4,0xcf80acfc,
    0x3f9f101f,0x9d1f5000,0x0007a800,0x803640b9,0x01fc00fb,0x00be2000,
    0x0f7006c8,0xf9801fcc,0x0003ea03,0x7f001b20,0x000be200,0x3f2003e6,
    0xffff505e,0x20bff25f,0x7fec07ff,0x3fbf0000,0x2bf2a200,0x2aaa00aa,
    0xb5511aee,0x2201555f,0x2aa62acf,0x02aaaacf,0xf7555530,0xa8555559,
    0xa81aafda,0x510aafda,0x220355ff,0x2a1bfdaa,0xaaaabfca,0xfdaa8801,
    0xaaaaaaaa,0x5303faaa,0x5559f755,0x5fe54405,0xbff101aa,0x0055d440,
    0xfb80bfd0,0x1bf20007,0xfffffa80,0xffff103f,0x3ffe6bff,0x3602ffff,
    0xfffb0fff,0x03ffffff,0xffffffd0,0x41ffffff,0x44fffffe,0x2ffffff9,
    0x0bfffff5,0x53ffffee,0xfffffff8,0xffa806ff,0xffffffff,0x03ffffff,
    0xfffffff9,0x7fd40dff,0x2e04ffff,0x0000005f,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x98800000,
    0x19999999,0x33331000,0x98800133,0x00999999,0x26666620,0x00999999,
    0x66c3bf91,0x00000000,0x03a00b91,0x03551000,0x004d4c00,0x009aa980,
    0x006aa600,0x4006a620,0x3f21dfc8,0xffffffff,0x7ffd47ff,0xffffffff,
    0xfff5003e,0x001fffff,0x3fffffe2,0x403dffff,0xfffffffc,0xf906ffff,
    0x27fd4dff,0x91000000,0x5f1005ff,0x3fff2000,0x0698dfff,0x3fffffa6,
    0x7edc402e,0x01dfffff,0xfffffb70,0x7dc0955d,0x01efffff,0xfc9bfff2,
    0xcccccccc,0xec9985fd,0xfc999999,0x999800ef,0x002fafb9,0x2666fe66,
    0x00efdb99,0x333333d9,0x3e0db333,0x3220ffff,0x000003ff,0x1001ffdc,
    0xee98005f,0xfea9889b,0xaefb80fd,0x409fb531,0x5309bdfd,0xcfd803fd,
    0xdffb7309,0x2139fd10,0xff04fea9,0x01b21fff,0x36401dd1,0x4002fcc0,
    0x8800bb6c,0x0ff4402f,0x17d402e4,0x105fffc8,0x00005df9,0x000cfea8,
    0xf30017c4,0x0ffc801b,0x3ea01fdc,0x1be20005,0x7d403fa8,0x5c01ee86,
    0x6fffc84f,0x01dd01ae,0x5f7006c8,0x1f53f800,0x8017c400,0x4405c86e,
    0x05edc05f,0x0077f660,0x03bfb300,0x800be200,0x83f6005e,0x5f5003f9,
    0x807dc000,0xc8db007c,0x03f7000f,0x00c417b5,0x0d9003fb,0xa800fe20,
    0x8800fe0f,0x85f3002f,0x0076c05c,0x67f54000,0x77e44000,0x17c40002,
    0x2001fa80,0x2002f47a,0xf30000fc,0x200bea03,0x000be618,0x320000db,
    0x00d9001f,0x8bb001fc,0x0be2006c,0x1720fc80,0x00001fb8,0x801ffdc0,
    0x00002ffc,0x172005f1,0x02f88200,0x4c00fc40,0x4407e619,0x2e000bfe,
    0x007a8007,0x2002fb80,0x03f3006c,0x3f30be20,0x800be200,0x4c0661f8,
    0x0000003f,0x2a05ff91,0x400003ff,0x09d002f8,0x000f9800,0xffc983f8,
    0x1feeffff,0x6f7ffe40,0xccec80ac,0xcccccccc,0x0001fccc,0xd9000fea,
    0x400df300,0x2009d07b,0x1fc002f8,0x00006e80,0x1efd8800,0x00019fd5,
    0x3bbbbb66,0xeeeeeefe,0x0000fe2e,0x13a000f7,0x33559ff9,0x1003fb75,
    0x5fffd955,0xeeeeefd8,0xeeeeeeee,0x9f30001e,0x333d9000,0x0bfb7533,
    0x1f704e80,0x8005f100,0x00fc804d,0x00033330,0xb31dfd98,0x220003bf,
    0xfccccccc,0x1ccccccd,0xf50000fa,0x647f0001,0x01f9803f,0x49f95100,
    0x0000006b,0xc8002fcc,0xffffffff,0x3e6001ff,0x1005f101,0x05d8005f,
    0xfb8017cc,0x910006ff,0x3faa05df,0x2200000c,0x00bb002f,0x4002f880,
    0x007f12f8,0x200007e6,0x001f50fa,0xbd100400,0x27b20180,0xdcba9999,
    0x80d9004f,0x02f8806d,0xbf102ec0,0x0fffec00,0x017fdc00,0x0003ffb8,
    0x2e005f10,0x2f40000f,0x7d43ee00,0x303f3000,0xf13f800b,0xfd300007,
    0x00ee885d,0x036407e2,0x7c00ef98,0x9999999c,0x17c400fb,0xfd80fa00,
    0x9fff1000,0x03ffa800,0x02ffc880,0x8017c400,0x254005f8,0x3e6005f5,
    0x22003ea3,0x01fb81fe,0x0fdc7f30,0x3fff6000,0x220076c7,0x400d902f,
    0x3fea03f8,0xffffffff,0x017c404f,0x3ea05f10,0xffa82601,0x9fd5000f,
    0xfd880001,0x5f10001e,0x4027d400,0x17e44fd8,0x9f317a60,0x81fffa80,
    0xfe800dfb,0xb800fec0,0x3ffffa2f,0x55559f90,0x05f75555,0x0d9001b2,
    0x4cccceec,0x406c9999,0x3ea002f8,0x7404f880,0x200fff24,0x0001dfd9,
    0x006ff4c0,0x7000be20,0x654415df,0x3bf903ff,0x406fe4c1,0x36a62cfc,
    0x22abfadf,0x441bfffb,0xfc882fea,0x3ee6209d,0x27ffdc4f,0xfffffffd,
    0x205fffff,0x07d4006c,0xf88017c4,0x800be201,0xd00dd06c,0x22037fc9,
    0x00002efc,0x0067f540,0x98002f88,0xfffffffe,0x7ffd400b,0x6403ffff,
    0x1effffff,0x74cdfff3,0xffffffc8,0x7f5401ef,0x0cffffff,0x00003730,
    0x2e003640,0xe800f506,0x400be205,0x01fb83fa,0x03ff34e8,0x0001ffd4,
    0x0bfee000,0x8000be20,0x001abba8,0x001aba88,0x0026eea2,0xabca9880,
    0x5dd44000,0x00000009,0x4400d900,0x8009d04e,0x05f100fa,0x7f30df30,
    0x27dd3a00,0x00003360,0x02644000,0x000000d8,0x00000000,0x00000000,
    0x00000000,0xd1006c80,0x003f101f,0x5f103f88,0x2077dc40,0x53a005e8,
    0x00000049,0x00000000,0x00000000,0x00000000,0x00000000,0x54400000,
    0xaaaaaeda,0x40efdbaa,0x0aaafda8,0x2bbaaaa0,0x2ab3eea1,0x0dffdbaa,
    0xaaaabfa8,0x4eaaaaaa,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x3fea0000,0xffffffff,0xfb80adff,0x303fffff,0x2bffffff,
    0xfffffff8,0x2a00adff,0xffffffff,0x004fffff,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x9ffffb00,
    0xeffffb80,0x980d4400,0x1fffe601,0x007fffe8,0x4c000300,0xfff3001a,
    0xffe883df,0x3fff63ff,0x7f441eff,0xb806ffff,0x26666000,0x33100000,
    0x09999833,0x2aaaaaaa,0xaaaaaaaa,0x02ca80aa,0x03b10100,0x0e67ed40,
    0x8f7f3260,0xfff97ffa,0x3bffea1d,0x07ecb882,0x441f732a,0x6c46fffe,
    0x7dc0cfff,0xffffb16f,0xffc8809f,0xfecb80bc,0x33f72a1c,0xfccb80bc,
    0x17c403ce,0x0ffffb80,0x7cc00d80,0x7fff47ff,0xffffff13,0xffffffff,
    0x7f443fff,0x45100efe,0x7f42efe9,0x007e2001,0xdc985f10,0xdfa8bfef,
    0x06d99cfa,0x07b803dc,0xfb9bb32e,0x4c6fa9ce,0x9bee9eec,0x9804fda8,
    0x01fdc05f,0x3e6007f1,0x005f1002,0x200ffff6,0x7fc405fc,0x17ffec6f,
    0xee880000,0xe883fd30,0x21ffff66,0x0fe002fd,0x807d404c,0x7fdc2ffb,
    0xf7017c44,0x6401ee00,0x09109f96,0xfa817fee,0x705f9802,0x00d9007f,
    0x2f8801b2,0x00ffff00,0xf809f7f7,0x7ffe45ff,0xd9000000,0xd32fd881,
    0x7ffff41f,0xb003fc80,0xd709f70b,0x7c417dc0,0x3dc0bb05,0xd9007b80,
    0xf70005fb,0x2009f00b,0x017e45f9,0x7c402f98,0x2f881303,0x3ffe60c4,
    0xfaa7cc03,0x713ffa02,0x00000fff,0xfff90044,0x4fffb81d,0x2e00bee0,
    0x5d87fe87,0x02f81ee0,0x803dc0bb,0x3ff9007b,0x003ee000,0x5f9801f2,
    0x5d8005f9,0xdfd03dc0,0xb515f117,0x37fe41ff,0x3f917a20,0xf50fff60,
    0x999988df,0x99999999,0x4c001999,0x006e602b,0x83e60026,0x1fc2fbf8,
    0x817c0f70,0x401ee05d,0x01f9007b,0xb8035c00,0x7ffcc007,0x01fa8002,
    0xfda8813e,0xbeffefef,0x2017ff40,0x80ee80ed,0x7fcc2ffc,0x3ffffe25,
    0xffffffff,0x0002ffff,0xf0000000,0x225dbdc5,0xf81ee01f,0x3dc0bb02,
    0xd9007b80,0x006b8000,0xdfb000f7,0x413a0001,0xd51000fa,0x3e2017ff,
    0x80fe406f,0x1ffb85f8,0x4cc44ff8,0x99999999,0x00099999,0x00000000,
    0x4f74e93a,0xf03dc07a,0x7b817605,0x3200f700,0x035c0006,0x7ec007b8,
    0xb8000eea,0x4005e80f,0x2a02fef8,0x0fea01ff,0xff989f30,0x0003fe80,
    0x3ffff600,0xffffffff,0x0000007f,0x7c4be2d9,0x07b80d92,0x702ec0be,
    0x401ee00f,0x35c0006c,0x36007b80,0x001dd11f,0x0fcc3f88,0x07edba00,
    0x27c05fd8,0x3e20fb80,0x0003f906,0x7fffec00,0xffffffff,0x0000007f,
    0x2bb1eef5,0xf03dc04d,0x7b817605,0x3200f700,0x035c0006,0x3fb007b8,
    0x4000ee88,0x20036c7c,0x20dd11fc,0x000400ed,0x00802202,0x88880000,
    0x88888888,0x00000088,0xa89d3f10,0x3dc02f8f,0x817605f0,0x3fcc00fa,
    0x40006c80,0x80f7006b,0xdd101fd8,0x897c4001,0x0fea002f,0x000009f3,
    0x00000000,0x00000000,0xf9f00000,0x00fcf883,0x205f03dc,0x80fe605d,
    0xd9007ffb,0x006b8000,0x07f440f7,0x8007fa20,0xc800f76d,0x0000d704,
    0x00000000,0x00000000,0xfb000000,0x201ff60f,0x6c0be07b,0x985fec05,
    0x2afbcfdb,0x20003640,0x20f7006b,0x502acfea,0x0017ff75,0x0007f7f3,
    0xdddb5000,0xdddddddd,0xbddddddd,0x00000003,0x00000000,0x27dc0000,
    0x2a205fa8,0xacf82afc,0x880d76c0,0x1efffffd,0x54c1fff7,0xaaaaedaa,
    0x36aa02aa,0xda880aaf,0x3ffe22af,0xffe81fff,0xfd002fff,0x0000001f,
    0x99999993,0x99999999,0x00399999,0x00000000,0x00000000,0xfb800000,
    0x7fc0ffff,0x02ffec2f,0x80026eea,0xfffffffe,0xd00fffff,0x705fffff,
    0x000dffff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_40_usascii_x[95]={ 0,8,4,3,3,3,4,8,10,5,0,2,5,3,
7,3,3,3,2,3,3,3,4,3,3,4,7,5,0,1,0,0,3,0,1,2,2,1,2,2,1,3,2,1,
2,0,0,0,3,1,1,3,2,1,0,0,1,1,3,0,0,0,3,1,7,2,0,2,2,2,3,2,1,3,
3,3,3,0,1,2,0,2,2,3,2,1,1,0,1,2,4,0,9,0,3, };
static signed short stb__courier_40_usascii_y[95]={ 29,6,7,5,5,7,10,7,7,7,7,10,23,17,
24,5,6,7,6,6,7,7,6,7,6,6,14,14,10,15,10,8,6,8,8,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,5,7,6,37,6,13,7,13,7,13,7,13,7,6,
6,7,7,13,13,13,13,13,13,13,8,14,14,14,14,14,14,7,7,7,16, };
static unsigned short stb__courier_40_usascii_w[95]={ 0,5,13,15,15,15,14,5,7,7,14,17,8,15,
7,15,15,15,15,15,14,15,15,14,15,15,7,9,17,19,17,13,14,21,19,17,18,18,18,18,19,15,19,20,
18,21,20,18,17,19,20,15,17,19,21,21,19,19,15,6,14,6,15,22,7,18,20,17,19,17,17,18,19,16,
12,18,15,21,19,17,20,19,18,15,17,19,20,21,19,19,14,8,3,8,15, };
static unsigned short stb__courier_40_usascii_h[95]={ 0,24,11,27,28,23,20,11,27,27,14,18,12,4,
6,27,24,22,23,24,22,23,24,23,24,24,16,19,18,8,18,22,26,21,21,22,21,21,21,22,21,21,22,21,
21,21,21,22,21,26,21,22,21,22,21,21,21,21,21,27,28,27,11,2,6,17,23,17,23,17,22,23,22,23,
30,22,22,16,16,17,23,23,16,17,22,16,15,16,15,22,15,27,27,27,6, };
static unsigned short stb__courier_40_usascii_s[95]={ 250,164,185,63,14,17,241,250,90,114,145,
124,160,219,235,98,202,164,1,186,58,166,170,130,218,234,231,78,106,199,88,
91,149,21,1,73,43,181,162,105,122,106,124,67,235,45,220,39,88,129,214,
180,196,144,23,1,142,200,62,83,30,122,169,160,243,178,145,142,110,213,182,
70,200,33,1,220,239,23,84,160,89,50,65,197,1,45,124,1,104,19,239,
54,79,45,219, };
static unsigned short stb__courier_40_usascii_t[95]={ 13,1,123,1,1,32,79,1,1,1,123,
101,123,130,123,1,1,56,32,1,56,32,1,32,1,1,101,101,101,123,101,
56,1,101,101,56,101,79,79,56,79,79,56,79,56,79,79,56,79,1,56,
56,56,56,79,79,79,79,101,1,1,1,123,136,123,101,32,101,32,101,32,
32,32,32,1,32,32,123,123,101,32,32,123,101,56,123,123,123,123,56,101,
1,1,1,123, };
static unsigned short stb__courier_40_usascii_a[95]={ 339,339,339,339,339,339,339,339,
339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,
339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,
339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,
339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,
339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,
339,339,339,339,339,339,339, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_40_usascii_BITMAP_HEIGHT or STB_FONT_courier_40_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_40_usascii(stb_fontchar font[STB_FONT_courier_40_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_40_usascii_BITMAP_HEIGHT][STB_FONT_courier_40_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_40_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_40_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_40_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_40_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_40_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_40_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_40_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_40_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_40_usascii_s[i] + stb__courier_40_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_40_usascii_t[i] + stb__courier_40_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_40_usascii_x[i];
            font[i].y0 = stb__courier_40_usascii_y[i];
            font[i].x1 = stb__courier_40_usascii_x[i] + stb__courier_40_usascii_w[i];
            font[i].y1 = stb__courier_40_usascii_y[i] + stb__courier_40_usascii_h[i];
            font[i].advance_int = (stb__courier_40_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_40_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_40_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_40_usascii_s[i] + stb__courier_40_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_40_usascii_t[i] + stb__courier_40_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_40_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_40_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_40_usascii_x[i] + stb__courier_40_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_40_usascii_y[i] + stb__courier_40_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_40_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_40_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_40_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_40_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_40_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_40_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_40_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_40_usascii_LINE_SPACING
#endif

