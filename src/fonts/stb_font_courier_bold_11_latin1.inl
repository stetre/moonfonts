// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_11_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_11_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_11_latin1_BITMAP_WIDTH         256
#define STB_FONT_courier_bold_11_latin1_BITMAP_HEIGHT         46
#define STB_FONT_courier_bold_11_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_bold_11_latin1_FIRST_CHAR            32
#define STB_FONT_courier_bold_11_latin1_NUM_CHARS            224

#define STB_FONT_courier_bold_11_latin1_LINE_SPACING           5

static unsigned int stb__courier_bold_11_latin1_pixels[]={
    0x00220008,0x64009106,0x0f209300,0x44c004a2,0x03216019,0x804980d4,
    0x31304c00,0x01e40c43,0x31008100,0x80000180,0x00000301,0x00806073,
    0x9811000c,0x3a064645,0x0f416405,0x0281415c,0xc9a83315,0x11303a61,
    0x0a212a01,0x40a0fba6,0x95c5b0e9,0x822262ec,0x0662a2ec,0x525c0ae2,
    0x203903b9,0x41b9b81c,0x01c80c8c,0x70bd9075,0x4c070373,0xc83ee884,
    0x3a1b9b81,0x9442aa64,0x2ab660a8,0x82a22a20,0x3662c85a,0x2066cc0c,
    0x66cc0cd9,0x33661640,0x57643d00,0x9267a3eb,0x2e3ebaec,0x322c9a62,
    0x27d75d92,0x3aebb22c,0x43d01b83,0x02a809a8,0x5306a035,0x303730a6,
    0x3076f035,0xea8db835,0x2e20aa22,0x440d443b,0xd992741a,0x8be63ee7,
    0xf70eddf9,0x40e85f31,0x4d53d12c,0x3a26a9e8,0x2a7a26a9,0x53d11646,
    0x8da8b50d,0x82fb21e8,0x321e88da,0x322b87c2,0x23d11b52,0x3a236a2c,
    0x260fb621,0x89773a26,0x33a25dce,0x9773a25d,0xdcd8f77b,0x3a1ee6c3,
    0x1ee6c1fd,0x221b53d1,0x77645ede,0x897b7a26,0x20f65ede,0x316a7a3b,
    0xb53d1e4d,0x572c8970,0x4b22b964,0x915cb22b,0x22b87dc5,0x9260ec2c,
    0x99ae620e,0x20fcc3a4,0x932c811e,0x9262c874,0x5437d40e,0x47f33ae5,
    0xd71fcceb,0x33ae3f99,0x5c79e1fc,0x2f6dc5ed,0x3b6e355a,0x970774c5,
    0x1f15a96c,0x4972d92e,0x4770592d,0x57cc1eda,0x07b6a1d8,0x87259074,
    0xc9dc393b,0x770e4ee1,0x1dc391e4,0x874930d3,0x9266a9e8,0x21d0b20e,
    0xd24cb21a,0x3a498b21,0x2616ddc0,0x42eabaa5,0xd50baaea,0x2baa1755,
    0x53c5e0ba,0x4ed4b73b,0x8744f45b,0x3d85b9da,0x56a3d2d4,0x51e96a68,
    0x77008f4b,0xdde985e8,0x8ee05e82,0x1d11b32c,0x4c3a2366,0x1b30e88d,
    0xb31641d1,0x416c1d11,0x7644d168,0x2345a20d,0x22c9e22c,0xc9a2d12c,
    0x74345a22,0xb07c45dd,0x776c3ddd,0x87bbb61e,0x3b61eeed,0xffdd32ff,
    0x4bffba65,0x3a65edfd,0x41642ffe,0x77643ffc,0x321ffe42,0x320ae3ff,
    0x02cc0f42,0x3268807a,0xd70bbae2,0x42eeb85d,0x07a22eeb,0x03445dd7,
    0x05705df7,0x25b85df7,0x16ccb23c,0x0e645df7,0xada85df7,0x041e40ea,
    0x01004010,0x00200802,0x3ffd8040,0x00802008,0xc97fe002,0x85fe83ff,
    0x26003ffc,0x00000000,0x00000051,0x0a280004,0x20072a13,0xff8801ca,
    0x00c46fa9,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x20000000,0x01288001,0x3c80d401,0x20320730,0x03c81989,0x2a032073,
    0x80440ced,0x980e7008,0x00766009,0x20244091,0x02198980,0x22022066,
    0x99811019,0x13004419,0x0442994c,0x54402040,0x39004419,0x26a03990,
    0x406e5c1c,0x8198a83b,0x444c1403,0x1c0cc540,0xd33d30a0,0x2617f545,
    0x403181dc,0x0e2e04ba,0x01880150,0x411130ae,0x3ba1e41b,0x21f7743e,
    0xddf30ded,0x3617764f,0x32f70dee,0xb30fbaa7,0x0ee5499b,0x0720af66,
    0x7190a653,0x4cfaebb0,0x41b98533,0x3625eed8,0x3bb625ee,0x43bbbb25,
    0xd90eeeec,0x3bb21ddd,0x204590ee,0x09a98d36,0xd881f6c4,0x07db103e,
    0x6c40fb62,0xdb10203e,0x3bee04bd,0x03a34425,0x2598c12e,0x656d4d17,
    0x4474f3c3,0x87f27a27,0x6f5c09a8,0xf714ca64,0x899b31ee,0xf71e8bfa,
    0x87b9b1ee,0x5e4c0bc9,0xf105e4c0,0x27e21d33,0xd33f10e9,0x43a67e21,
    0x23cb102c,0x6fa83dcd,0xfa81bea0,0xa81bea06,0x930b606f,0x16896417,
    0x7f43ec87,0x40b77a3e,0x893b762c,0x78bc3cce,0x55c3ee76,0xdbd13ce8,
    0x86f76c4b,0x9e78f77b,0x6cc0ccc8,0x479e0e8e,0x02c85edb,0x3e0b2059,
    0x0edfc1db,0xb7f076fe,0x11986d43,0x17b6e3cd,0x5dc0b6ee,0x05b7702d,
    0x5dc0b6ee,0xc80ce82d,0x311d1ec2,0x4d046b88,0x41f069ce,0x66445cce,
    0x997ff7c3,0x5d590fee,0x12d92e77,0x1e785db9,0x12321e2f,0xbc1db5b3,
    0x16e76a78,0xc81640b2,0xdf85df82,0xdf85df85,0x20eefc85,0x276a598f,
    0x05dde85b,0x37a0bbbd,0x0bbbd05d,0x2d11777a,0x93a16448,0x0f823ffa,
    0x074b6682,0x0f16896a,0x200f8795,0x3a33ea4b,0xe98f4b50,0x478bc4fd,
    0x65c2ffed,0x20fdacc3,0xdd32ffed,0x902c85ff,0x45a0b205,0xd1645a2c,
    0x59168b22,0x1efa83a8,0xa8bffba6,0x6d40eaad,0x56d40eaa,0x556d40ea,
    0x7556d40e,0x321ff5c0,0x98ae1ec2,0x3ba23fee,0x213be63e,0x41ffe42b,
    0xee8343ca,0x0bbbae0d,0xeac87ff9,0x217ff6c0,0x8bfd8000,0x1010040f,
    0x7fc4dfff,0x9bffe26f,0xfb2ffffd,0x3ff65fff,0xffffb2ff,0x08003c85,
    0x6fa9ff88,0x9bea7fe2,0x26fa9ff8,0x26fa9ff8,0x06fa9ff8,0x406fff88,
    0x00040100,0x6e6d4000,0x002e0000,0x04166e01,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x1cd98110,0x180544a2,0x4c41a9a8,0x260a9a81,0x200881a9,
    0x00880201,0x0080c022,0x2f260350,0x4c0de541,0x2f2a001a,0x441bc981,
    0x40544088,0x02013008,0x419d9102,0x75c01038,0x226ed41d,0x20200cd9,
    0x2a114ddd,0xd53d11dc,0x417cc7dc,0xfdbd10fb,0xd1366d49,0x77ec5fd9,
    0xaa82f46c,0x06404a83,0x43cc824c,0x82b800d8,0x261ba9ba,0x1fcdd82a,
    0x41d442d6,0x111b8aca,0x16f44111,0xddb05fb1,0x9a61f985,0x2e2d89e9,
    0xe81ee1ad,0x3ccf4699,0xd90d53d1,0x90da885d,0x22ba4d27,0x216a7a2c,
    0x74770e9a,0x2770cb60,0x45734c78,0x53c81ad9,0x54c33241,0xa980a980,
    0x930a0b80,0x54e419bd,0x8f73638a,0x0a982a59,0x322eef44,0x880274b9,
    0x38857306,0x201ee8d1,0x99db102b,0xd70198e8,0x8ae09be8,0x406bea2b,
    0x4dac8858,0xdb51dc3b,0x87f67443,0x750fa9d9,0x7aa54199,0x30f4d7cc,
    0x65dcdbdf,0xb93d70cd,0x76417641,0x6c42ec82,0x2a20cd9c,0x70f20acd,
    0x4b12f6dc,0x770bb208,0x2bb190ec,0x6dfd4013,0x499015c0,0xc8621ccb,
    0x1263dd89,0x6dc27d74,0x3936dc40,0x499f91dc,0xb910b119,0x3a236a91,
    0xf8ee2f40,0x443b76e0,0x3f60e9bd,0x16ef4c7f,0x36a2c9a6,0x3676a2e9,
    0x02b815c3,0x2eb6e057,0xb9c82b85,0xb73b539b,0x5c1eefc8,0x643d2542,
    0x4013baba,0x02b85e9e,0x1edfc4bb,0x2d9a5c39,0x0bfa0926,0x21d24c04,
    0x340e88d9,0x4f24a9dc,0x3bf23d9d,0x89dc1e82,0xda81d00f,0x2634441d,
    0x22c9a605,0xcb947992,0x02b815c3,0x84a8a057,0x47799009,0x4c2ffee9,
    0xff905703,0x04779909,0xb81ffd70,0x32226c42,0x3f6124ec,0x1ff741ee,
    0x85701d7d,0x75c4eee9,0xee98682e,0xc821b00e,0x7ff92cdf,0x85ffed88,
    0x21d4e6fe,0x2ff42efb,0x304effe8,0x269b309b,0xff30ffff,0x3ffe61ff,
    0x219d500f,0x001ffffb,0xf9857004,0x80000fff,0x88018889,0x3fee6fff,
    0x802fdc6f,0x36f70200,0x0002002f,0x010bfff1,0x2661dd88,0x00040029,
    0x00037362,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x0ceda800,0x447b75b9,0x00400880,
    0xdd881a80,0x15301980,0x98cc3530,0x36e0d4c2,0xc9362d99,0x2154d444,
    0x40bcb809,0x6ec289a8,0x36a36e4d,0x45b53b72,0xb14da9dd,0x6cc9b31b,
    0x6eeedc4d,0xb9edd361,0x81301cdd,0x6dc2ddd9,0xb00660cd,0x6ed49bbb,
    0x27a60883,0xd11b51e8,0x1b2176c3,0xdde883b0,0x91777a26,0x6e744355,
    0x36366745,0x32d71fcd,0xd11ee6c7,0x47e41b53,0x3b7a23f9,0x26204c0f,
    0xdeeca839,0xe89327a3,0x73d10da9,0x64cde41b,0x642e96e3,0x2f2f22ce,
    0x3a2fea2c,0x20d53d11,0x2d9bc82b,0xe99ae76a,0xd3bb700d,0x2a2065c4,
    0x92608b25,0x4f415c0e,0xae80a982,0x11d8ee4b,0xcceb819b,0x9873b61f,
    0x71e682a5,0x0ee98bdb,0x716ee6dc,0x2625bd57,0x337ea199,0x36f76d45,
    0x1dd30d35,0x5dc0ee98,0x68b42cce,0x352dabc8,0x76cc3557,0x1aa7a0d8,
    0x1c837931,0x1d975c79,0x2f606754,0x981d42cd,0x9260390d,0x6fc15c0e,
    0x7417645c,0x1e92a5a8,0xada85db5,0xf51510aa,0x8bc112c4,0x316e76a7,
    0xeeab83bd,0x367b6a2b,0x43bbbb51,0xdd9f89e6,0x2063a22a,0xa86e883c,
    0x5641deed,0x3c8ac82c,0x6d64c15c,0x50bfbe0d,0x7e43bddb,0x2ca7645f,
    0x76fc2fc8,0x26313a85,0x261b50cb,0x2e1a2d11,0x0ae1e682,0xfc8dffd1,
    0x2089dc4f,0xdf10eeec,0x1eefc89d,0x74cbfbb6,0x33662ffe,0x15d555c1,
    0x4009fff5,0xdffdb1e6,0x5c0e974b,0x4c5bae82,0x7440fcbf,0x707bd906,
    0x83f69305,0x20ae0d56,0x3a2b301c,0x93033aa0,0x2a751297,0x0777e403,
    0x05705df7,0x0415c3cd,0x3ffe6003,0x8010081f,0xb8040100,0x54ffc2ff,
    0x35002e6f,0x42fabfc8,0xffff9820,0xfd8fff20,0x23e24fba,0xf309b079,
    0x87ffb0bf,0xf90f8bfd,0x306e1aeb,0xdff90bff,0xef806dc5,0x3fee7fff,
    0x201003ff,0x0ffff980,0x267f75f9,0x0000ffff,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x2b36e000,0x49bbb12d,0x221dbada,0xcddb82dd,0x4f777661,0xb70ddddb,
    0x2098019b,0x20019a99,0x89981998,0x51153002,0x51151003,0x0cc2aaa8,
    0x22389c15,0x98040440,0x02609999,0x22098620,0x1a5c1999,0x65640c04,
    0x4352c862,0x2a201999,0x4402aaaa,0x3260cd8e,0x1e23a20b,0x27a21ba6,
    0xa54d6c69,0xb50e99e8,0x37660d73,0x077bbba0,0x6fd43291,0x33bf625c,
    0x64191932,0x15c3fa9f,0xf87b2fea,0x4cf6c6fc,0x44bb6e4e,0xb072ea1d,
    0x5dbbbb09,0x45d896e6,0x75cb913b,0xd7932eee,0x64723a8d,0x9d457373,
    0x6664352b,0x2e235374,0x400bbbbb,0xf05704df,0x5b770f55,0xbd8d75f0,
    0x872fe08e,0xec887659,0x3babab82,0x4d076762,0x6d4074c7,0x92a760d9,
    0x7cc5eee8,0x20754c0e,0x220eced9,0x5370d46f,0x201ee645,0xb9b92a2b,
    0x86ddc361,0x080aaaa9,0x989802c8,0x00001500,0x0767c000,0x3e67c15c,
    0x67c2ee74,0x21f760ed,0x592cc5df,0xbab81fdc,0x327623ba,0x0598f342,
    0x6cc1b579,0x2077cc0e,0x475c3edc,0x746eef82,0xa8bb15ba,0x5c049221,
    0x26c49d52,0x951aa886,0x00005999,0x22220000,0xb4000000,0x2682b84a,
    0x075decc7,0x02763c9a,0x1599645a,0x42ed881d,0x386bebef,0x3eaff217,
    0x4c7fff32,0x509d0389,0x657e4395,0x0ffff13f,0x0208975b,0x00000000,
    0x00000000,0xfff98000,0x00000eff,0x22bd5fc8,0x2ff26fff,0x53ff13fc,
    0x77ffe4df,0xfc8bff50,0xdff92fff,0x000ecc05,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_bold_11_latin1_x[224]={ 0,2,1,0,0,0,1,2,2,1,0,0,1,0,
2,0,0,0,0,0,0,0,1,0,0,1,2,1,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,2,0,1,0,-1,1,0,-1,0,0,0,0,0,0,0,
0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,1,2,1,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,0,0,0,
2,0,1,-1,1,0,-1,0,-1,-1,1,0,1,1,1,0,0,2,1,1,1,0,0,-1,0,0,-1,-1,-1,-1,
-1,-1,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,
 };
static signed short stb__courier_bold_11_latin1_y[224]={ 8,1,2,1,1,1,2,2,1,1,1,2,6,4,
6,1,1,1,1,1,1,1,1,1,1,1,3,3,2,3,2,2,1,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,9,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,2,3,3,3,3,3,3,1,1,1,4,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,3,1,2,2,2,
1,1,1,2,1,3,4,4,2,0,0,1,1,1,1,3,1,4,7,1,1,3,1,1,1,3,0,0,0,0,
0,-1,2,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,3,1,0,0,0,0,0,2,1,1,1,
1,2,1,1,3,3,1,1,1,1,1,1,1,1,1,2,1,1,1,2,1,2,3,1,1,1,1,1,1,1,
 };
static unsigned short stb__courier_bold_11_latin1_w[224]={ 0,2,4,6,6,6,5,2,3,3,6,6,3,5,
2,6,6,6,5,6,5,6,5,5,6,5,2,4,7,6,6,6,5,8,6,6,6,6,6,6,6,6,6,6,
6,8,7,6,6,6,7,6,6,6,8,7,6,6,6,3,6,3,6,8,3,6,7,6,6,6,6,6,6,6,
5,6,6,8,6,6,7,6,6,6,6,6,6,7,6,6,6,4,2,4,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,2,5,6,6,6,
2,6,4,7,4,6,7,5,7,8,4,6,4,4,3,6,6,2,3,4,4,6,6,8,6,5,8,8,8,8,
8,8,8,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,5,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,6,
 };
static unsigned short stb__courier_bold_11_latin1_h[224]={ 0,8,3,8,9,8,7,3,9,9,5,6,4,2,
3,9,8,7,7,8,7,8,8,8,8,8,6,7,6,4,6,7,8,6,6,7,6,6,6,7,6,6,7,6,
6,6,6,7,6,8,6,7,6,7,6,6,6,6,6,9,9,9,4,2,3,6,8,6,8,6,7,8,7,7,
10,7,7,5,5,6,8,8,5,6,7,6,5,5,5,8,5,9,9,9,3,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,6,6,6,
9,8,2,7,4,5,4,2,7,2,4,7,4,5,3,8,8,2,3,4,4,5,7,7,7,8,8,8,8,8,
8,9,6,8,8,8,8,8,8,8,8,8,6,8,9,9,9,9,9,5,8,9,9,9,9,8,6,8,8,8,
8,7,8,8,6,7,8,8,8,8,7,7,7,7,8,6,8,8,8,7,8,6,6,8,8,8,8,10,10,10,
 };
static unsigned short stb__courier_bold_11_latin1_s[224]={ 255,252,215,15,93,36,167,224,150,112,111,
205,181,230,212,79,121,173,180,202,186,209,216,222,228,249,253,192,59,190,227,
218,1,22,31,1,52,45,38,197,15,8,246,1,243,99,189,232,212,7,197,
225,182,8,166,158,151,144,137,130,29,119,156,227,220,85,57,71,21,57,239,
42,22,29,1,211,15,67,83,43,49,28,90,64,204,78,104,132,118,14,125,
107,36,67,197,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,
160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,255,193,196,
50,36,92,116,35,236,116,185,76,163,230,152,241,176,109,171,250,208,242,235,
227,204,146,151,97,72,100,65,180,171,162,153,144,135,141,234,114,107,100,93,
86,79,72,65,186,219,43,39,46,53,60,72,140,1,86,100,134,123,217,175,
203,196,189,128,124,210,58,129,131,161,168,154,175,79,86,93,138,231,122,224,
238,8,145,245,115,108,22,29,51,182,22,14,7, };
static unsigned short stb__courier_bold_11_latin1_t[224]={ 1,1,38,12,1,11,21,38,1,1,38,
30,38,38,38,1,11,21,21,11,21,11,11,11,11,11,21,21,38,38,30,
21,21,38,38,30,38,38,38,21,38,38,21,38,30,30,30,21,30,21,30,
21,30,30,30,30,30,30,30,1,1,1,38,41,38,30,21,30,21,30,21,
21,30,30,1,21,30,38,38,30,21,21,38,30,21,30,38,38,38,21,38,
1,1,1,38,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,1,11,11,
30,30,30,1,21,38,21,38,38,38,38,21,38,38,21,38,30,38,11,11,
38,38,38,38,38,21,21,21,11,11,11,11,11,11,1,30,11,11,11,11,
11,11,11,11,11,30,11,1,1,1,1,1,38,12,1,1,1,1,1,30,
1,1,1,11,21,1,11,30,21,1,1,1,1,21,21,21,21,1,30,1,
1,12,21,1,30,30,12,11,11,1,1,1,1, };
static unsigned short stb__courier_bold_11_latin1_a[224]={ 93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_11_latin1_BITMAP_HEIGHT or STB_FONT_courier_bold_11_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_11_latin1(stb_fontchar font[STB_FONT_courier_bold_11_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_11_latin1_BITMAP_HEIGHT][STB_FONT_courier_bold_11_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_11_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_11_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_11_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_11_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_11_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_11_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_11_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_11_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_11_latin1_s[i] + stb__courier_bold_11_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_11_latin1_t[i] + stb__courier_bold_11_latin1_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_11_latin1_x[i];
            font[i].y0 = stb__courier_bold_11_latin1_y[i];
            font[i].x1 = stb__courier_bold_11_latin1_x[i] + stb__courier_bold_11_latin1_w[i];
            font[i].y1 = stb__courier_bold_11_latin1_y[i] + stb__courier_bold_11_latin1_h[i];
            font[i].advance_int = (stb__courier_bold_11_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_11_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_11_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_11_latin1_s[i] + stb__courier_bold_11_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_11_latin1_t[i] + stb__courier_bold_11_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_11_latin1_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_11_latin1_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_11_latin1_x[i] + stb__courier_bold_11_latin1_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_11_latin1_y[i] + stb__courier_bold_11_latin1_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_11_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_11_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_11_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_11_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_11_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_11_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_11_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_11_latin1_LINE_SPACING
#endif

