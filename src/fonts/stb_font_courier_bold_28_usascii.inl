// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_28_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_28_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_28_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_bold_28_usascii_BITMAP_HEIGHT         90
#define STB_FONT_courier_bold_28_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_bold_28_usascii_FIRST_CHAR            32
#define STB_FONT_courier_bold_28_usascii_NUM_CHARS             95

#define STB_FONT_courier_bold_28_usascii_LINE_SPACING          13

static unsigned int stb__courier_bold_28_usascii_pixels[]={
    0x79900020,0x40000288,0x1017300a,0x2607649d,0x5932cccb,0xdb87b100,
    0x0000b880,0x01799970,0x40000000,0x00000019,0x00001980,0x00066200,
    0x809d7000,0x3fe002fb,0x0001ff46,0xffd84fc8,0x3fe7fa84,0xa7ffff42,
    0x7ec04ffe,0x7ec2ffc7,0x9dfd9304,0x3ffffa01,0x03dfdb84,0x87bfb710,
    0xffdbfffc,0xfd880dff,0x05bfb703,0xbffffb10,0xb10bfff7,0x4c019dfd,
    0xfebffffe,0xdfeb81ef,0x07ffe203,0x3e004fd8,0x003fec6f,0x2a27fc40,
    0x7fb81eff,0xeda83ff1,0x3fff54ff,0xf913fe60,0xb84fd83f,0x2fffffff,
    0x41deffe8,0x04ffeffd,0x7fffffe4,0xffffff11,0x85ffffff,0x7ec0fffa,
    0x500fffff,0xffffffff,0x7d41ffff,0x81ffffff,0xfffffffb,0x3a24ffff,
    0x204fffff,0xff700fff,0x2000579f,0x40003ff9,0x2fec0ffc,0x3fe6ff90,
    0xff13f601,0x103ff607,0x44fe8bff,0xfdbdfffb,0x827f42ff,0x3fd30dfc,
    0x2f7fff60,0x7ffe4c5c,0xfffca9bf,0xb87fff20,0x4ffecfff,0xa9bfff88,
    0x21cffffc,0xfebdfff8,0x3ffe60ef,0xefffeb9c,0x33bff60a,0x02a02fff,
    0x3fffffe6,0xfd0000ff,0x7fc4000d,0x3204fe84,0x401ff36f,0x427f44fd,
    0xffb05ff9,0xff327f43,0x0ffe981b,0x3be213fa,0x7ec1fd40,0xfff1005f,
    0x5cbff303,0x17fa1fff,0xffd83ff7,0x40fff981,0x7fdc1ffb,0x3603ffa2,
    0x27fc44ff,0x3a001ff6,0xfffeceff,0xfffffd51,0x17fd45ff,0x81ffb800,
    0xdfb104fe,0x6c03ff73,0x6427f44f,0x9ff301ff,0x1ffd27f4,0xfe97fe20,
    0xf883fb84,0x002ffd45,0x7e40bff1,0x443ffee7,0x45ff82ff,0x3ff205ff,
    0x7c437e40,0x5417fe3f,0x0ffe44ff,0x98007fea,0x87fc42ff,0xfffffffd,
    0x0037f42f,0x9fd05ff8,0xffffffb0,0xfb01dfff,0xfe84fe89,0xfd37f406,
    0x900bfe29,0x6427f4ff,0x22fe4c2f,0x7c4006fe,0x43fee03f,0x3fea7ffa,
    0x7fc7fc80,0x703fee03,0x2ff981ff,0x7fc05ff1,0x7c437ec4,0x3fe6003f,
    0x32e22980,0x42ffcccc,0x5c001ffa,0x09fd01ff,0xfffffffd,0x9fb01fff,
    0x5ff84fe8,0x9fd3fec0,0xf5003fe6,0x3613fa1f,0xbfffd30f,0x76d5ffc4,
    0x1bfe202d,0x3fe66fe8,0xf10bfe67,0x037f41ff,0xff981ffd,0x0ffeb9ae,
    0x7fcc17fe,0xfd827fc4,0x741664c5,0x4000acff,0x5fe82ff8,0xa837f400,
    0xbff304ff,0x2015dfb5,0x0f7f44fd,0xfb807ff3,0x3ee9fd1f,0xd1ff8807,
    0x7ecfd09f,0x3fe65f9c,0x04fffffe,0x4c3bfff1,0x3fe24ffd,0xfb077fc6,
    0x6ffe43ff,0x03fff661,0x3fffffee,0x407ff42f,0x1ffc4ffd,0x7fec6fc8,
    0xfffffa80,0x5ff1002d,0x2003ff70,0xffc82ffa,0x64ffe01f,0x227ec06f,
    0xff52fffb,0xd2ffa805,0x003fe69f,0x13fa3ff3,0xbf27c5fa,0x6fffffd4,
    0xff883fff,0xfffeefff,0x7dc5ff86,0xfffffcff,0x777ffec2,0xa80fffff,
    0x1fffffff,0x5ce7ffcc,0x7fc4fffe,0x7c4df903,0x3fee203f,0xf8805fff,
    0x05ff882f,0x3f20dfd0,0x4ffe01ff,0x27ec05fd,0x7d4bffee,0x97fd402f,
    0x007fe4fe,0x427f4ff5,0x2fc7f57e,0x221bfff3,0xeff887fe,0x0dffffff,
    0xffd84ff8,0x40ffefff,0xffffffd8,0x7fcc0ffe,0x0fffebdf,0x7fffffe4,
    0x1ffc4fff,0x1bea5fd8,0x0ffeb880,0xb817fc40,0x7fcc00ff,0x113fea02,
    0xfffffffb,0x13f605df,0x7fcc3dfb,0xe8ffdc03,0xd017f64f,0x7427f4df,
    0x97e2bbe7,0x7dc0fff8,0x457fc41f,0x3601bdcb,0x5bfb503f,0x65cc0ffb,
    0x40ffa8bc,0x7fd41ffc,0xfffffa83,0x37ec4fec,0x07f64ff8,0x09fd0254,
    0xf102ff88,0x07fd809f,0x7fd44fe8,0xffffffff,0xfe89fb04,0x2027fc44,
    0xb93fa7fd,0x5ff903ff,0x87ec27f4,0x20fffffb,0x2ff884ff,0x40017fc4,
    0x3fea0028,0x0ffa8005,0x5fe82ff4,0x7f426a20,0x2607fdc4,0xe813e3ff,
    0x809fd03f,0x3f202ff8,0x07ff300f,0xfb509fd0,0x17dff9bf,0x9fd13f60,
    0xfe80dff0,0xffb13fa6,0xbffb535b,0x1fb84fe8,0xd837bb22,0x0ffdc0ff,
    0x0000bfe2,0x03ffd300,0xd81ff500,0x009fd05f,0x3e617fcc,0x707fe43f,
    0x89cfff80,0x4401ffda,0x3fe202ff,0x001ffb03,0x3fea09fd,0xfd807ff0,
    0x7e427f44,0x49ff301f,0xfffc84fe,0xfe85ffff,0x2003fa84,0xfb9adff9,
    0xacffa87f,0x55404000,0x02fffeb9,0x57fe5440,0x26b3fee0,0x5102ffda,
    0x01ffd955,0xff939ffd,0xffff800b,0x805fffff,0x7ec02ff8,0x004ff887,
    0x3fea09fd,0x6c02ff88,0x4c27f44f,0x3ffb05ff,0xffb827f4,0x9fd03eff,
    0xb800df10,0x2fffffff,0x7ffffffc,0x4c7fd001,0x3fffffff,0x7fffcc00,
    0xffd10fff,0x20bfffff,0xfffffffb,0xfffff102,0xfc8001df,0x02effffe,
    0x9805ff10,0x07fe43ff,0xf705fd80,0xb00bfe2f,0xb03ff89f,0x5ff881ff,
    0xffd827f4,0xfe8ea1cf,0x4c3bf704,0xfffd701d,0xffffd05f,0x3fe003ff,
    0x6fffff45,0xfff98000,0xffc86fff,0x3ea04fff,0x401dffff,0x00efffe9,
    0x02ff4400,0x2003fee0,0x13fe26fd,0x40cffc80,0x03ff37fb,0x269ff973,
    0xff301ffd,0x742ffc89,0xffffd84f,0xd1ffffff,0xfd8179df,0x401ffeef,
    0x4cc401a8,0x80c40019,0x300001a8,0xa8801333,0x00666000,0x00002620,
    0x2a604fe8,0x006ffcaa,0x3fee5ff3,0x3ffa2000,0xff8afd44,0x4ffffe80,
    0xfd80bffd,0x7ec2ffc7,0xffffff84,0x3fa5ffff,0x6dc44fff,0x00001bef,
    0x00000000,0x00000000,0x00000000,0x6c13f600,0x0fffffff,0x7f57fa00,
    0x1dc88005,0x54022098,0x5b53eeed,0xdb87b100,0xba81da80,0x8179511a,
    0x001deeed,0x00000000,0x00000000,0x00000000,0xb8000000,0xffff902f,
    0xd980019d,0x00001b51,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x26200000,0x00000009,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xd89fffb1,0x0000dfff,0x70000000,0x03500999,0x00199950,
    0x00000000,0x66664400,0x22cccccc,0xccccccc8,0x0000001c,0x09993000,
    0x40039995,0x8003ccb8,0x3b6a03ec,0xffa80def,0x3ffe27ff,0xfd9101ff,
    0x2e20019b,0x0b9adefd,0x1ffff500,0x07bffee0,0x00ffffc4,0x9dfdb300,
    0x36e60173,0xefec9804,0xfffff883,0x224fffff,0xffffffff,0x7fedcc07,
    0xda80b9be,0xd001defe,0xffff0fff,0x7ffe4005,0x7ffd4006,0xfffffd80,
    0xdffb82ff,0x817ff4c1,0xfffffffb,0x7fffd402,0x003fffff,0x101ffd91,
    0x40bd319f,0x0001ffec,0xfffffff9,0x7ffe4c9f,0x7ffdc04f,0x3e20efff,
    0xfeeeeeef,0x3bbfe24f,0x2a03eeee,0xffffffff,0x3fffa63f,0x5c03ffff,
    0xfeb87fff,0x3f66002f,0x7fc4006f,0xbdfffa86,0xfd80fffd,0x704ff887,
    0xffb9bfff,0x3ffea07f,0x4fffecbd,0x407fd400,0x803ea0fb,0xa8001ff8,
    0xffdcdfff,0x3ffffa6f,0x3ffee04f,0x746ffecd,0x22ff980f,0x5c002ff8,
    0xfdccefff,0x3ffee4ff,0x01fffdcd,0x20fffff1,0xc8002ff8,0x2030006f,
    0x7fd40cf9,0x6c3ff982,0xeff980ff,0x207ff4c0,0xfb80eff9,0xf50cc04f,
    0x541f701f,0x87fe200f,0x0ffd8019,0x9d737fc4,0x7f409fd5,0x20ffdc0e,
    0xf88ff900,0x3fe2002f,0x24ff880e,0x4ff987fa,0x0ffbff90,0x2000bfe2,
    0x000666fc,0x207ff000,0x9ff30ffd,0x4403ffa0,0x07fe45ff,0xfb107fd0,
    0x1ff79fff,0xbd51bf10,0xfdbff880,0xfd00dfff,0xd813f209,0x207fe04f,
    0xfd003ff8,0xcabff88b,0x03ff602b,0x13e22fc8,0x7fcc2fec,0xff107fbc,
    0x13fffae5,0x7ffe7fe4,0xa800004f,0x7ff302ff,0x3e203ff6,0x23fe402f,
    0x064c05fe,0x3fffffea,0xf500ffff,0x9b513bff,0xffffff88,0xfc82ffff,
    0x200b881e,0x406204fd,0xf9802ff9,0x7fffc42f,0xff80efff,0x22000804,
    0x8ffe83ff,0x5ff107fb,0x41fffffa,0xfffffffc,0xcb80006f,0x7ec06ffd,
    0xf304ff9f,0x0ff9801f,0x10005ff1,0xfd55bfff,0x9a801fff,0x443effda,
    0xeaaeffff,0x7fcc0fff,0xb000acef,0x3f60009f,0x87fc800f,0xfffffff8,
    0x0bfe20ef,0xfffa8000,0xfb9ffd41,0xf35ff107,0x32037bff,0xfdaacfff,
    0x3ea0001f,0x4c01ffff,0x700fffff,0x3ff100ff,0x20007fe6,0xffa81ffd,
    0xffb7100f,0x3fe2039d,0x85ffa82f,0xeffffffa,0x0027ec01,0xf801ffec,
    0x237b905f,0x3e64ffb8,0xfb80001f,0x7fc44fff,0x7c41fee6,0x804fffdf,
    0x3ff82ffc,0x6c403db8,0xd804ffff,0x3ea04fff,0x8ffcc00f,0xf8001ff9,
    0x03ffa05f,0x2e6fbff6,0x81bfe202,0xfb5107fe,0x6c05ffff,0x3fa2004f,
    0x5ff3004f,0x4cdfd000,0x7ffe41ff,0xffb02eff,0x45ff905d,0xfff107fb,
    0x3f2005ff,0xf989fd06,0xfd3000ff,0xfff9807f,0x007fe200,0x02ff8ff5,
    0x7017fc40,0x217901ff,0x882ffffb,0x3fee03ff,0x6ffb9800,0x44013f60,
    0x32005ffe,0xff70007f,0x3fa17fc4,0x904fffff,0x3ffe209f,0x1effffff,
    0x17ffffc4,0xfd06fc80,0x007ff889,0x7cc06fe8,0x05ff804f,0x17f637f4,
    0x407ff100,0xdf800ffc,0xff886d88,0xe89ff204,0x407fe604,0xff9804fd,
    0x2ffc004f,0x747fb800,0x7555444f,0x402e205f,0xfffffff8,0x7fc43fff,
    0xc803fffe,0x109fd06f,0xff700015,0x800ffd80,0xff903ffb,0x203ffa85,
    0x41bfe3e9,0x5400fff8,0xf107e60f,0x9bfe20ff,0xff501ffa,0x5013f603,
    0x98007fff,0xe80102ff,0x00ffe46f,0x440009fd,0xfdcccccc,0x8aff882f,
    0x7e404ffe,0x0009fd06,0x5446fd80,0x000dffba,0xb535bffb,0xffd10bff,
    0xff75335b,0x4df7fdcd,0x1bfffec9,0x1fa87e60,0x2fbffee6,0x22ffeb99,
    0xa9abfffb,0x3f607ffd,0x0bfff204,0x4c1ff200,0xd9999bff,0x7ffc43ff,
    0xffca999c,0x22000404,0x5cc2ffca,0xbffd12ff,0x2ffda835,0x8016ff54,
    0xb999ade8,0x3fe64ffd,0x007fffff,0xffffffd1,0x7fec01bf,0x1fffffff,
    0x7fffffec,0x407fffff,0x225eaaee,0xffffffff,0x7d44ffff,0xffffffff,
    0x3aaaa22f,0xf90aaaef,0x755559ff,0x82ff401b,0xfffffff8,0xfff506ff,
    0x9fffffff,0x801bfe20,0x23fffffe,0x3fa2ffff,0xff30ffff,0x3fee7fff,
    0xf8801fff,0xffffffff,0x3fffe60e,0x5c006fff,0x003fffff,0xbfffffb7,
    0x3fffee01,0x05fffdef,0x20effecc,0xffecfffd,0xce882fff,0x1dfffffc,
    0x7ffffff4,0xfff95fff,0x7fffffff,0xb3007e40,0x07ffffff,0xfffffc88,
    0x3fe201df,0x3fff2007,0x3fff61ef,0x97fffee2,0x31efffe8,0x001dfffd,
    0x3fffffaa,0x2666604f,0x2a600009,0x02660000,0x001aa980,0x26000440,
    0x262000aa,0xfff7009a,0x25dfffff,0xfffffffc,0x00004fff,0x00033531,
    0x44003531,0x00000009,0x00000000,0x0009a988,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x20000000,
    0x202ccccb,0x30bcccb8,0x30179999,0x3260003b,0x2ccccccc,0x2bccb980,
    0xccccccc8,0x2e3ccccc,0x66541ccc,0x6666542c,0x0e6665c2,0x9507332e,
    0xccca8599,0x5e6664c2,0x403332a0,0x2e22ccc9,0x32e3cccc,0x332e23cc,
    0x80abcccc,0xccccccc9,0x333260bc,0x3799931b,0x99501998,0xffffa801,
    0x3fff204f,0xffffd5ff,0x00bf907f,0x3fffffe0,0x7ec07fff,0x7c6fffff,
    0xffffffff,0xfff56fff,0x7fffc4ff,0xfffff11f,0x3fffea3f,0x3fffea7f,
    0x3ffffe27,0x1fffff11,0x9fffffec,0xb04ffff8,0x3f21ffff,0xfa9fffff,
    0xff51ffff,0xffffffff,0xfffffe85,0x3fa5ffff,0xfffd5fff,0x837fc4df,
    0x64401ffc,0x2604ffee,0xb52deffd,0xf901bffd,0x3bae000d,0x03eeffee,
    0x3ffbffea,0x7777fc6f,0x6ffeefff,0xd89fffb1,0x7fec4fff,0x3bb624ee,
    0x3ff623ff,0x27ffec2f,0xa93fffb2,0x321dffed,0x7c40ffff,0x3f664fff,
    0xfff14eff,0x7ff6c49f,0x2ffffeee,0x3fffbb6a,0x3fea1dee,0xdffb52df,
    0xf905ff85,0x4fe8003f,0xa80ffcc0,0x01bf207f,0x803fd400,0xff8185fe,
    0x6fc93fa3,0x3fa2ffdc,0x807ff02f,0x7ff706fc,0xf101ffd8,0xffa83fff,
    0x43ffff80,0xf906fffc,0x00effc8d,0xffa88ff7,0x9013fa07,0x213fa0df,
    0x800004fe,0x7fcc04fe,0xf90ff501,0xffffffff,0x07fa8007,0x3e005ff0,
    0xfc93fa3f,0xf93ffd86,0xf27fc07f,0xb02fecdf,0x13fea3ff,0x46ffff88,
    0xfff80ffa,0x37fffc7f,0xffb16fc8,0x83fdc01d,0x9fd00ffb,0xfd06fc80,
    0x0007fb09,0x9809fd00,0x8ff501ff,0xfffffff8,0x54006fff,0x3ffae07f,
    0x82efffff,0xc93fa2ff,0xfbffd05f,0x55fe80bf,0x13fa3fff,0xff8eff88,
    0x7effc406,0x203fea4f,0xf72ffeff,0x3f20dfdf,0x805ffe8e,0x1ff707fb,
    0xf9013fa0,0x3213fa0d,0x3fff622f,0x27f4004f,0x5407fe60,0xffeb987f,
    0x000bcccc,0xffb03fd4,0xbfffffff,0x27f41b70,0x3fa203b3,0x6fd806ff,
    0x3fe7fffb,0x7fffd403,0x57fc401f,0x1ff51ffd,0x2dfd7ff0,0x906fcefe,
    0x00bfffff,0x3fe21fee,0x9013fa07,0xf99999ff,0x543f709f,0x004fffff,
    0x3e6027f4,0x40ff501f,0x500006fc,0x7e5c40ff,0x00bcccdf,0xa8009fd0,
    0xfc801fff,0x3edffff7,0xfffd802f,0x8aff8804,0x01ff56ff,0xf9ff57ff,
    0x320df95f,0x01ffffff,0xebaaffb8,0x3fa03fff,0x7fffe404,0x984fffff,
    0x7fe6540f,0x027f4004,0x7d407fe6,0x401bf207,0x0ff502e9,0x8000bfe0,
    0x3a2004fe,0xfb805fff,0xaffcffaf,0xff8802ff,0x25ff1006,0x0ffabffb,
    0xfffd3ff8,0x7e41bf2d,0x01fffdff,0x7fffffdc,0x27f403ff,0x3fffff20,
    0x0004ffff,0xfe8009fd,0x80ffcc04,0x1bf207fa,0xfa82fe40,0x005ff007,
    0xb0027f40,0x809ffbff,0xf8efeffa,0xd001ffef,0x3fe2009f,0x3fefffa2,
    0xff73ff80,0x641bf27f,0x1fff31ff,0x7ffffdc0,0x4fe800ce,0xfe837e40,
    0x09fd0004,0x4404fe80,0x0ff703ff,0xfc8037e4,0x200ff505,0x3a0002ff,
    0x9ff9004f,0xf980fff6,0xfffb4fff,0x13fa001f,0xf317fc40,0xff01ffff,
    0x643ffe27,0xa8df906f,0x1fee03ff,0x404fe800,0x89fd06fc,0x04fe8009,
    0x74027f40,0x05fe886f,0x32081bf2,0x00dfb05f,0xe8000bfe,0x5ffa804f,
    0xf8817ff4,0xfff51fff,0x027f400f,0x7e42ff88,0x3ff80fff,0x06fc8b2a,
    0x1ff90df9,0x8001fee0,0x37e404fe,0x17ec4fe8,0xd0013fa0,0xdff7009f,
    0x03ffd537,0x5cc57fd4,0xbff92fed,0x07ffb337,0x3000bfe0,0x155bfd55,
    0x42fffa88,0xff02fffb,0x37ffc4ff,0x37faaa20,0xff7100aa,0x7fff4159,
    0x056ffcc0,0x507ff6a2,0x7c435dfb,0x3f660adf,0x2200aaaf,0xaadfeaaa,
    0x2bbf6a0a,0x45bff510,0x3fa04fd8,0x75554c04,0xb01aaadf,0x9fffffff,
    0xfffffd00,0x3ff25fff,0x04ffffff,0x567fdd4c,0x7ffc02aa,0x645fffff,
    0xf51fffff,0xfd07ffff,0x05ffd89f,0x7ffffffc,0xffff706f,0x07ffccbf,
    0x8ffffff5,0x71ffffff,0x43ffffff,0xff56fffc,0x40ffffff,0xfffffffe,
    0xffff34ff,0x3ffff6bf,0xa99fe41f,0xaaadfeaa,0x3ffffe61,0x00ffffff,
    0x05fffff7,0x3ffffaa0,0x7fe4c1cf,0x7c403eff,0xffffffff,0x3fff602f,
    0x7543ffff,0xfd10dfff,0xffb03dff,0x404ffa85,0xfffffffc,0xffffd303,
    0x220ffc87,0x644ffffe,0xd30effff,0x441bffff,0xffd13fff,0x5c09ffff,
    0xffffffff,0xffffd12e,0x3bfffee7,0xfffa9a80,0xffffffff,0xfffffd10,
    0x300bffff,0x2a600015,0x0151000a,0x7ffffec0,0x0001efff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x44000000,0xfffffffe,0x000005ff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xcccb8800,0xcccccccc,0x99999711,0x21999999,0xccccccb8,
    0x9997100a,0xcccca839,0x66666543,0x332a003c,0xb8803ccc,0x2bcccccc,
    0x66665c40,0x1000accc,0x000177b7,0x00000000,0x00998800,0x00026620,
    0x1f5c00c4,0x99999995,0x7ffec599,0xffffffff,0xfffff73f,0x1fffffff,
    0x3fffffee,0xffb84fff,0x3fe27fff,0xff11ffff,0x05ffffff,0xffffff10,
    0xfffb803f,0x2fffffff,0xffffff90,0xb807ffff,0x644fffff,0x5400003f,
    0x9100001f,0xfffd507f,0xc881b9bf,0x03effffe,0xeffffd88,0x90fff982,
    0xffffffff,0x7ffecc9f,0xffeeeeee,0xddfffb33,0x21ffdddd,0xfeeeffd9,
    0x7ec45fff,0x7f643eff,0x7f75c5ff,0x9000deef,0x09ffffdd,0xeefffd98,
    0x981ffffe,0xfeeefffd,0xff102fff,0xfe85ffdf,0xb00002ff,0xf700009f,
    0xfffd8bff,0x42ffffff,0xfffffffc,0x3ffea03f,0x445fffff,0x3bff27ff,
    0x83fffeee,0x0ffe05fd,0x3fea0df9,0xb30bfe20,0x1ff907ff,0x880bfe60,
    0x260002ff,0x9007ffff,0x6ffa88df,0x3a61bf20,0x54ff706f,0xefffd880,
    0x27f40002,0xfffd5000,0x67ffe41b,0x42fffca9,0xea9abcd9,0x9fff307f,
    0x87ffd735,0x222fe428,0x5fd80eff,0x642fe862,0x47f98c6f,0xffd02ff8,
    0xb03ff881,0x2ff880ff,0x2bff2000,0x6fc802ff,0x7e40ff70,0x320ff706,
    0xfd5000ff,0x20003bff,0xe98004fe,0x7c41efff,0x05ff305f,0x01ff5188,
    0x3fa05ffb,0x22fe400f,0xbfb01ffe,0x40da87fc,0x64bf66fc,0x9817fc43,
    0x87fd82ff,0x7c404ff8,0x3fe0002f,0xf900dfd4,0xc81bf60d,0x06fe886f,
    0xb8007ff3,0x000cffff,0xb10027f4,0x2a05dfff,0x037202ff,0x3fffffaa,
    0xceff80ff,0xffdccccc,0xfb27dc02,0x677ec07f,0x7e402ffc,0x203ffccf,
    0x3fe02ff8,0x5c2ffa83,0x7fc400ff,0x3ff50002,0xf9007fea,0x27ff54cd,
    0xd999ff90,0x3e207fff,0x644001ff,0x2603ffff,0x99dfe999,0xfffc8809,
    0x03fdc03f,0xfffffc80,0x7c40ffff,0xffffffff,0x20804fff,0x7ec04ffb,
    0x402fffff,0x3ffffffc,0xe80bfe20,0xe8bfd04f,0x2ff8805f,0xf8dfd000,
    0x7ffe404f,0x405fffff,0xfffffffc,0xffe880ff,0x001df76f,0x85ffff91,
    0xfffffffe,0x3ee4ffff,0xb800cfff,0x7dc000ff,0xfdaaadff,0xeefff80f,
    0x3eeeeeee,0x01bfe600,0x3ffffff6,0x777fe402,0x3fe203ff,0x5c13fa02,
    0x05ff51ff,0x2605ff10,0x55bff301,0xfc80ffd5,0x05ffffff,0xffffffc8,
    0x7ec0efff,0xffecffdf,0xfffd9802,0x7fffec2e,0x4fffffff,0x033fffea,
    0x5013fe60,0x5c077ec3,0x0ffe80ff,0x3fe20000,0x25fd800f,0x37e401ff,
    0xf10a27fd,0x81ffc05f,0x0dfb4ff8,0x220bfe20,0xffff907f,0x405fffff,
    0xffcaaffc,0x437e401f,0x7fc5ffc9,0x09ffffb3,0x3ffffc88,0x3fa66620,
    0xf700999d,0xe8019fff,0xa9889cff,0x2bbf26fe,0xbfffeb98,0x4df7fcc1,
    0x01edca98,0x7445ffb0,0x12a5fd84,0x0c99bf20,0x17fc47f9,0x3201ff98,
    0x003ff9ff,0xff305ff1,0xffffff01,0x640dffff,0x07ffd46f,0x7ec0df90,
    0x7c47fe27,0x3ee00fff,0xe8004fff,0x3f22004f,0x3e203fff,0xffffffff,
    0x3fffe23f,0xffffffff,0x7ffffdc0,0x803fffff,0x3fd44ffc,0x64002fec,
    0x893fa06f,0x6ff982ff,0x7ffffcc0,0x05ff1000,0xffa81ff3,0x203ff501,
    0x6ff986fc,0xfb81bf20,0x2677fa0f,0xfa82effd,0x0000cfff,0xb30009fd,
    0x2205dfff,0xeffffffc,0xffffda83,0x305fffde,0xbffffffd,0x0bff5007,
    0x3aa21ff5,0x400aaaef,0xaaaaffda,0x3ea4feaa,0xffdcaacf,0xfffe801f,
    0xffba9805,0xffcaaaac,0x02bffaa0,0xa85bff73,0x7dc1affd,0x77ed42cf,
    0xffdcaaaa,0x7ffffd46,0xfd32ffff,0x80003bff,0x260004fe,0x100dfffe,
    0x10033553,0x22000135,0x220019a9,0xaaaabfff,0xfff90ffc,0x5c0bffff,
    0xffffffff,0xff74ffff,0xffffffff,0x3ffea007,0x7fffc401,0xffffffff,
    0xfffff50f,0x7ffffc4f,0xfffff71f,0x0fffd83f,0xfffffff7,0x903fffff,
    0xdfddffff,0x00bbffa1,0x0027ec00,0x02fffd40,0x00000000,0x3ffe2000,
    0xffffffff,0xfffffd50,0x7ff4c07f,0xffffffff,0xffffd34f,0x80017bdf,
    0xffb006ff,0xffffffff,0x3ffa61ff,0x7ffec4ff,0xfffd30ef,0xdff881df,
    0xfffffd30,0x4019dfff,0x3ae01a98,0x75400003,0x3ae00001,0x00000002,
    0x7c400000,0xffffffff,0x000000ff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00030000,0x88000333,
    0x200cc000,0x7ec6ffe9,0x413004ff,0x7ffdc018,0x77ff540e,0x32017102,
    0xffffffff,0x3bffee4f,0x45dffd51,0x51efffeb,0x407dfffd,0x21554400,
    0xcccccccb,0x3f62cccc,0x305ff71f,0x11110037,0x01111111,0x3f6e0000,
    0x32203dff,0x0edfffff,0xfab7ffe4,0x7fe41dff,0x0dffffbf,0x266fffb8,
    0x6c44ffff,0xccffedff,0xfff04fff,0xfffc85ff,0x207fb05f,0xfffffffc,
    0x3fffa4ff,0xbffff93f,0x9ffffff4,0x06fffffc,0x7fd401f5,0x3ffffea5,
    0xffffffff,0x3ee1ff91,0x3fff622f,0xfffb25c3,0x09ffffff,0xfffb0000,
    0x3a09ffff,0xffffffff,0x6fffffc3,0x7c6fffff,0xffffffff,0x8dfd505f,
    0x7cc4ffc9,0xffffffff,0xd981ffff,0x515972ff,0x3fa01bff,0x999ff904,
    0x6cc3fffd,0xfff51fff,0x7ffdc419,0x2fbfea22,0x00eff880,0x76c41ff9,
    0xeeeeeeee,0xa9fee4ee,0x3fff60ff,0x23ff95ff,0xfffffffd,0x400004ff,
    0xda9bfffd,0x67fd45ff,0x43ffda9a,0xeffffeb9,0x7ecc6eaa,0xffcaacff,
    0x360df900,0xcfffa84f,0xfe9dffe9,0xf11ff705,0x98bfe6df,0x2ea9fd1b,
    0x7fd49f50,0x9fff701f,0x7dc05fff,0x817fd41f,0xf05fffe8,0xa800009f,
    0xfa9fe26f,0xffffe8af,0x2222225f,0x00088888,0x413fea00,0x3fee1ffc,
    0xc80f5c0a,0xf9004fff,0x207ff05f,0x09fb06fc,0x26fd97fa,0x5ff307fb,
    0xff73fff7,0x7fffff41,0x4264ffff,0x5401fffa,0x401fffff,0x37f45ff8,
    0x9ffdffb0,0x0000ff98,0x9fe2fcc0,0x7ffe42c8,0x00000005,0xf100ffc8,
    0x7fffc47f,0x7e401bde,0x1bf2002f,0x6fc827f4,0x3fa09fb0,0x7fb97f64,
    0x3ffb3fe0,0x7dc6fddf,0xffffffff,0x01fffa81,0x009fffb0,0x7fd47ff2,
    0x369ff902,0x213ee2ff,0xffffffd8,0x10dfffff,0x3005f89f,0x00000037,
    0xb013fa00,0xfffea8bf,0x3f204fff,0x837e4006,0x0df904fe,0x27f413f6,
    0x03fdcbfb,0xffdffffb,0x3faa09ff,0xff501dff,0xffb1003f,0xf1009fff,
    0x541bfabf,0x3ffa25ff,0xff501fb1,0xffffffff,0x20e43fff,0x0000002b,
    0xdfb00000,0x9827fc40,0x04fffdca,0xfc800df9,0x2e09fd06,0x04fe887f,
    0x72fec9fd,0x7ffdc0ff,0x02ffff9f,0x01fffff3,0x6c43fff5,0x46fff442,
    0x6400dffe,0xd03ffbff,0x5ff881df,0x6665405b,0xcccccccc,0x22220002,
    0x88888888,0x00000008,0xf702ffb8,0xd807f45f,0x00df906f,0x9fd06fc8,
    0x262ffea0,0xe81efffc,0xfb97f64f,0x53ffe607,0xfd00fffd,0xfa8bff7f,
    0xfdaaacff,0x89bffaa6,0x2201efff,0x2a07ffff,0x003b300d,0x64000000,
    0xffffffff,0x3fffffff,0x22000000,0xeb8adfff,0x3bfe26ff,0x5feb989a,
    0x2bff6aa2,0xfb500aaa,0x6ff4c15f,0xfffff881,0x20ffffff,0xdfb0dff9,
    0xf807fee3,0x0fff51ff,0x7fe4bfea,0x3fffffa0,0xff56ffff,0x3ff27fff,
    0x3f201fff,0x000003ff,0x40000000,0xfffffffe,0xffffffff,0x40000005,
    0xffffffe8,0x3ffe20ef,0x1fffffff,0x3ffffff2,0xff987fff,0xfff34fff,
    0xfff301ff,0x4bffdbff,0xfb7ffff9,0x5fff71ff,0xbff1bf60,0xd0f21e40,
    0xffffffff,0x3fffa2df,0xbfffd51e,0x03ffc401,0x00000000,0x55544000,
    0xaaaaaaaa,0x0000aaaa,0xffd88000,0xddb04eff,0x85dfffff,0xffffffea,
    0xffe884ff,0xfffb12ef,0x009a980b,0xda7fff44,0x1dff75ff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x2000a880,0x00009a98,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_bold_28_usascii_x[95]={ 0,5,3,1,2,1,2,5,6,2,2,0,5,2,
5,2,2,2,1,1,1,1,2,1,2,2,5,4,-1,0,1,2,2,-1,0,0,0,0,1,0,0,2,1,0,
0,-1,-1,0,1,0,0,1,0,0,-1,-1,0,0,1,6,2,3,2,-1,5,1,-1,1,0,0,1,0,0,1,
2,0,1,-1,0,1,-1,0,1,1,1,0,0,-1,0,0,2,4,6,4,1, };
static signed short stb__courier_bold_28_usascii_y[95]={ 20,3,5,3,2,4,6,4,4,4,4,5,16,11,
17,2,3,3,3,3,4,4,3,4,3,3,9,9,5,9,5,4,3,5,5,4,5,5,5,4,5,5,5,5,
5,5,5,4,5,4,5,4,5,5,5,5,5,5,5,4,2,4,3,24,3,8,4,8,4,8,4,8,4,4,
4,4,4,8,8,8,8,8,8,8,5,9,9,9,9,9,9,4,4,4,10, };
static unsigned short stb__courier_bold_28_usascii_w[95]={ 0,5,9,13,11,12,12,4,7,7,11,14,6,11,
5,11,11,11,12,13,12,13,12,12,11,12,5,7,15,15,15,11,11,17,15,14,14,14,14,15,15,11,15,15,
15,17,16,15,14,15,16,13,14,15,17,17,15,15,13,6,11,6,11,17,5,14,16,14,16,14,14,15,15,13,
10,15,13,17,15,13,16,16,14,13,14,15,15,16,15,15,11,7,3,7,13, };
static unsigned short stb__courier_bold_28_usascii_h[95]={ 0,18,7,20,22,17,15,9,20,20,11,15,8,4,
4,21,18,17,17,18,16,17,18,17,18,18,12,14,15,8,15,17,20,15,15,17,15,15,15,17,15,15,16,15,
15,15,15,17,15,20,15,17,15,16,15,15,15,15,15,20,21,20,9,4,5,13,17,13,17,13,16,18,16,16,
22,16,16,12,12,13,18,18,12,13,16,12,11,11,11,17,11,20,20,20,6, };
static unsigned short stb__courier_bold_28_usascii_s[95]={ 254,170,216,56,1,79,145,250,85,93,125,
174,193,240,250,36,234,123,135,1,203,161,140,148,206,176,248,246,189,200,158,
191,128,94,129,47,45,30,15,175,234,222,60,191,78,173,156,31,207,105,112,
109,91,29,60,122,106,140,1,121,24,70,181,226,250,220,92,205,62,235,76,
218,232,1,13,216,15,90,58,15,153,189,43,29,45,74,165,108,149,15,137,
48,101,77,226, };
static unsigned short stb__courier_bold_28_usascii_t[95]={ 1,1,75,1,1,24,59,42,1,1,75,
59,75,75,59,1,1,24,24,24,24,24,1,24,1,1,24,1,59,75,59,
24,1,59,59,24,59,59,59,24,42,42,42,42,59,42,42,24,42,1,59,
24,42,42,59,42,42,42,60,1,1,1,75,82,52,59,24,59,24,59,42,
1,24,43,1,24,42,75,75,75,1,1,75,75,42,75,75,75,75,24,75,
1,1,1,75, };
static unsigned short stb__courier_bold_28_usascii_a[95]={ 237,237,237,237,237,237,237,237,
237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,
237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,
237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,
237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,
237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,
237,237,237,237,237,237,237, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_28_usascii_BITMAP_HEIGHT or STB_FONT_courier_bold_28_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_28_usascii(stb_fontchar font[STB_FONT_courier_bold_28_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_28_usascii_BITMAP_HEIGHT][STB_FONT_courier_bold_28_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_28_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_28_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_28_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_28_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_28_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_28_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_28_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_28_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_28_usascii_s[i] + stb__courier_bold_28_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_28_usascii_t[i] + stb__courier_bold_28_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_28_usascii_x[i];
            font[i].y0 = stb__courier_bold_28_usascii_y[i];
            font[i].x1 = stb__courier_bold_28_usascii_x[i] + stb__courier_bold_28_usascii_w[i];
            font[i].y1 = stb__courier_bold_28_usascii_y[i] + stb__courier_bold_28_usascii_h[i];
            font[i].advance_int = (stb__courier_bold_28_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_28_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_28_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_28_usascii_s[i] + stb__courier_bold_28_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_28_usascii_t[i] + stb__courier_bold_28_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_28_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_28_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_28_usascii_x[i] + stb__courier_bold_28_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_28_usascii_y[i] + stb__courier_bold_28_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_28_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_28_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_28_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_28_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_28_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_28_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_28_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_28_usascii_LINE_SPACING
#endif

