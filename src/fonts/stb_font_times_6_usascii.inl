// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_6_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_6_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_6_usascii_BITMAP_WIDTH         128
#define STB_FONT_times_6_usascii_BITMAP_HEIGHT         20
#define STB_FONT_times_6_usascii_BITMAP_HEIGHT_POW2    32

#define STB_FONT_times_6_usascii_FIRST_CHAR            32
#define STB_FONT_times_6_usascii_NUM_CHARS             95

#define STB_FONT_times_6_usascii_LINE_SPACING           4

static unsigned int stb__times_6_usascii_pixels[]={
    0x31041082,0x3302220c,0x8230084c,0x29826219,0x8844130c,0x30c41119,
    0x09886237,0x2218542e,0x542826a1,0x42131188,0x450a0942,0x2384c461,
    0x2638c452,0x454a2709,0x30d4a2e1,0x84dc6661,0x088a709a,0x4c26a151,
    0x4c422a22,0x14350471,0x187086e3,0x2628a041,0x29c90a89,0x9c71c29c,
    0x5c62e1ab,0x70554328,0x0d4c2e65,0x982ea183,0x918a86e0,0x18a538e2,
    0x0942842e,0x3511450a,0x14266613,0x2609854a,0x43862099,0x50441189,
    0x41862651,0x263350c1,0x25570cc1,0x422a2999,0x433309a9,0x43046088,
    0x88c45128,0x08542e20,0x01040010,0x80000000,0x00000000,0x80000004,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x26042600,0x45109980,0x10c45418,0x4328a8a2,0x462a6399,
    0x4431188a,0x88623351,0x0a8cc2a1,0x21185454,0x43315089,0x26a33509,
    0x1aa8a6a1,0x208e19b8,0x42730ca1,0x33998e08,0x710e4298,0x4a350d43,
    0x731cc153,0x26a0542e,0x8c542660,0x8a86a312,0x38941150,0x2e615111,
    0x385c0e0a,0x4085c445,0x0e05d5c3,0x154350e6,0x15426a53,0x854dc477,
    0x8e05d40a,0x235352aa,0x19a85541,0x46a2638a,0x82662c9b,0x32826619,
    0x39c29823,0x371514e4,0x00b800d4,0x5c6ae2a0,0x00722e2a,0x20a94c5c,
    0x9b866a0b,0x00000009,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x220cd430,0x188050a0,0x9a8a1860,
    0x54c22261,0x20c01309,0x26098a21,0x330c1311,0x189984c4,0x46319886,
    0x43182219,0x86a29872,0x2a13308a,0x28033128,0x0a9a922a,0x7104130e,
    0x23884c28,0x704c2e63,0x55151c31,0x31833104,0xa8a04cc3,0x8a92a0b9,
    0x35198551,0x28618663,0x387506ea,0x951a984c,0x0a986141,0x9b842087,
    0x2a2e1372,0x1c000003,0x94ca1737,0x0217729b,0x5c7008c0,0x2a2400b8,
    0x2a385021,0x0000000a,0x00d46660,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__times_6_usascii_x[95]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,
-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0, };
static signed short stb__times_6_usascii_y[95]={ 4,0,0,0,0,0,0,0,0,0,0,0,3,2,
3,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,1,0,1,0,1,0,1,0,0,
0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,2, };
static unsigned short stb__times_6_usascii_w[95]={ 0,2,2,3,3,5,5,1,2,2,3,3,2,2,
1,2,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,5,4,4,4,4,4,3,4,4,2,3,4,
4,5,5,4,3,4,4,3,4,4,4,6,4,4,4,2,2,2,3,4,2,3,4,3,3,3,3,3,3,2,
3,3,2,5,3,3,4,3,2,2,2,3,3,4,3,3,3,3,1,2,3, };
static unsigned short stb__times_6_usascii_h[95]={ 0,5,2,5,5,5,5,2,6,6,3,4,2,1,
2,5,5,4,4,5,4,5,5,5,5,5,4,4,4,2,4,5,6,4,4,5,4,4,4,5,4,4,5,4,
4,4,5,5,4,6,4,5,4,5,5,5,4,4,4,6,5,6,3,2,2,4,5,4,5,4,4,5,4,4,
6,4,4,3,3,4,5,5,3,4,5,4,4,4,3,5,3,6,6,6,1, };
static unsigned short stb__times_6_usascii_s[95]={ 37,62,117,65,121,1,7,115,1,34,84,
61,106,110,113,32,22,69,73,18,65,93,58,81,73,77,37,34,30,109,22,
85,20,9,4,13,122,117,113,106,104,58,35,91,86,80,26,44,68,26,43,
69,53,116,97,39,51,56,46,31,125,13,88,120,125,76,111,72,102,61,109,
89,14,1,16,18,40,100,92,26,53,49,81,65,37,100,96,48,77,40,96,
9,7,4,106, };
static unsigned short stb__times_6_usascii_t[95]={ 7,1,14,1,1,8,8,14,1,1,14,
14,14,17,14,8,8,14,14,8,14,1,1,1,1,1,14,14,14,14,14,
1,1,14,14,8,8,8,8,1,8,14,8,8,8,8,8,1,8,1,14,
1,14,1,1,8,8,8,8,1,1,1,14,14,14,8,1,8,1,8,8,
1,14,14,1,14,14,14,14,14,1,1,14,8,1,8,8,14,14,1,14,
1,1,1,17, };
static unsigned short stb__times_6_usascii_a[95]={ 22,29,35,43,43,72,67,16,
29,29,43,49,22,29,22,24,43,43,43,43,43,43,43,43,
43,43,24,24,49,49,49,38,80,63,58,58,63,53,48,63,
63,29,34,63,53,77,63,63,48,63,58,48,53,63,63,82,
63,63,53,29,24,29,41,43,29,38,43,38,43,38,29,43,
43,24,24,43,24,67,43,43,43,43,29,34,24,43,43,63,
43,43,38,42,17,42,47, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_6_usascii_BITMAP_HEIGHT or STB_FONT_times_6_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_6_usascii(stb_fontchar font[STB_FONT_times_6_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_6_usascii_BITMAP_HEIGHT][STB_FONT_times_6_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_6_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_6_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_6_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_6_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_6_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_6_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_6_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_6_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_6_usascii_s[i] + stb__times_6_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_6_usascii_t[i] + stb__times_6_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_6_usascii_x[i];
            font[i].y0 = stb__times_6_usascii_y[i];
            font[i].x1 = stb__times_6_usascii_x[i] + stb__times_6_usascii_w[i];
            font[i].y1 = stb__times_6_usascii_y[i] + stb__times_6_usascii_h[i];
            font[i].advance_int = (stb__times_6_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_6_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_6_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_6_usascii_s[i] + stb__times_6_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_6_usascii_t[i] + stb__times_6_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_6_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_6_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_6_usascii_x[i] + stb__times_6_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_6_usascii_y[i] + stb__times_6_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_6_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_6_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_6_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_6_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_6_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_6_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_6_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_6_usascii_LINE_SPACING
#endif

