// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_8_latin_ext_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_8_latin_ext'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_8_latin_ext_BITMAP_WIDTH         256
#define STB_FONT_consolas_8_latin_ext_BITMAP_HEIGHT         58
#define STB_FONT_consolas_8_latin_ext_BITMAP_HEIGHT_POW2    64

#define STB_FONT_consolas_8_latin_ext_FIRST_CHAR            32
#define STB_FONT_consolas_8_latin_ext_NUM_CHARS            560

#define STB_FONT_consolas_8_latin_ext_LINE_SPACING           5

static unsigned int stb__consolas_8_latin_ext_pixels[]={
    0x0302a186,0x40b80a0a,0x070c440a,0x80aa8373,0x2aa0aa80,0x0aa866a0,
    0x75088144,0x82150288,0x862204c0,0x1c1cc108,0x550e0554,0x13704cc1,
    0x106e04cc,0x88026621,0x4c144199,0x8cc30081,0x30510a23,0x444405c1,
    0xd9962713,0x2215cc2a,0x424c3a81,0x388aa19a,0x5ec43987,0x22121444,
    0x2660a60b,0x4492f620,0x43213018,0x8a2a2145,0x02a6294b,0x5c0a9883,
    0x0b833310,0x2b663511,0x442a1261,0xb73121db,0x43881885,0x9956cc6b,
    0x57055471,0x3624c383,0x327138bb,0x37620ea0,0x7312f623,0x25ec43a8,
    0x11bc9b96,0x0c86497b,0x2224db91,0x497b14bd,0x240dcb0c,0x6e4cdb91,
    0x5ec56191,0x1972c324,0xdc8ac329,0x77b2c326,0x277b2c32,0x260e6b0c,
    0x4911dec2,0x11223ceb,0x22ad9899,0x350ea1bc,0xa8956cd2,0x4855b32c,
    0x2513886e,0x2321db85,0x8864325c,0x191ae2dc,0x5990c832,0x58643255,
    0x92455432,0x0c8641b8,0x5bac9191,0xa848aa92,0xc8656191,0xc8b96190,
    0x45556194,0x41bac324,0x1906eb0c,0x39966cd6,0x122440dc,0x0ea24122,
    0x1db87391,0x981d5235,0x64ea0752,0x58120e20,0x92c32e36,0x3792d441,
    0xc864192c,0x864b1acc,0x05e4cb0c,0xc96b7589,0xb0c86f60,0x50179324,
    0x325ac2e3,0xb8b96190,0x5e4d6196,0x40cac320,0x19032b0c,0x90541cd6,
    0x88489101,0x23b70904,0x2ab06cdb,0x260edc91,0x547076e2,0x1b944e22,
    0x8bc8f32a,0x3732c325,0x0c8e722b,0x8eeee58b,0x166ccb0c,0x322459b5,
    0x2a2c32b0,0x492e6c45,0x31a82cda,0x72c3279b,0x2ed0b961,0xb8b36ab0,
    0x2170aab0,0x2b0b8555,0xa8a62cd9,0x951f64c2,0x3b262447,0x51c96b03,
    0x4246a799,0x122c1545,0x8e271799,0x16744285,0x66cc59b1,0x6c4d9b75,
    0x80b8ae2c,0x4ec42cd8,0x44496390,0x859b15cd,0x3248502b,0x1cc190b1,
    0x66cc59b1,0x4f366b03,0x1e6ccb1c,0x8f366799,0x879b33cc,0x79916229,
    0x81414298,0x20f32a38,0xaa4414c4,0x21b913cc,0x112a3cca,0x111c4e27,
    0x0001c0c4,0x41401c96,0x8a6000ba,0x032a1cc8,0x0c40ae00,0x30e64497,
    0x00028859,0x332201a8,0x00000001,0x8801a851,0x40310622,0x80826002,
    0x900000ca,0x144a2101,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x40000000,0x2206209b,0x45105101,
    0x44113020,0x21443810,0x8a216440,0x4c089809,0x20502260,0x0cc14419,
    0x26054033,0x40661442,0x0d409818,0x54289826,0x05502809,0x82135066,
    0x051026a0,0x504dc014,0x2a61d413,0x05c41440,0x814c5995,0xa8ccc099,
    0x704cc399,0x4cc17129,0x33120911,0x313106a1,0x411304c2,0x220c0888,
    0x0a20c19a,0x260c40c4,0x0540a209,0x21dc4261,0x11044c18,0x981a8813,
    0x5c310301,0x302a6290,0x84834815,0x982e60a8,0x2aa05543,0xaa92f620,
    0x8926a648,0x52f626dc,0x25ec44ba,0x2f629197,0x8244ef64,0x65477264,
    0x8656193c,0xb0c96195,0x96192c32,0x859911cc,0x246a2cc9,0x2246a399,
    0x92970be9,0x33222448,0xd91252e2,0x2a2cc985,0xb8e644cc,0x88f6e690,
    0x8f3aa2db,0x52353cea,0x52352db8,0x2f622db8,0xda864324,0x5513260e,
    0x3aa0dc91,0x370c8641,0x83706e99,0x23509048,0xcac32b2a,0xc92322b0,
    0xc92322b0,0x0b8762b0,0x2a48a98b,0x1a876291,0x465c4c89,0x21712244,
    0x8b9232e5,0x22454c4b,0x43b11bca,0x441c490b,0x0ad98483,0x2a389235,
    0x4321c491,0xaa864b0c,0x9312e62a,0x555bac17,0x45c3258b,0x0656eb5c,
    0x8d424122,0xcac32b1a,0x190decb0,0x4321bd96,0x4864ee25,0x255076cc,
    0x5954ee25,0x4dc2f6e2,0x1912244b,0x2e4b9b92,0x076cc4a9,0x3b883939,
    0x88389617,0x09d88483,0x2a389655,0xc961c4b2,0xb2a96190,0x9b524d4c,
    0x33558645,0x22e58649,0x15561979,0x764cf3a2,0x2cda8d43,0x2585d617,
    0x2a585c5a,0x991585c5,0x530b3227,0x8a674455,0x499d13cc,0x45c9c5db,
    0x8b322244,0x1e744b93,0xbbc8aaa6,0x4dcf3223,0x0e20e24c,0x25930b26,
    0x88e24ce8,0x190e24ce,0x282cd896,0x44b1c850,0x362145cd,0x3362282c,
    0x5050f325,0xb306a190,0xb8f36679,0x571e6cc2,0x0003cd98,0x80001653,
    0xb4ce17b4,0x0f3a2eb8,0x2071a670,0x80000b29,0x01764438,0x05d91000,
    0x9b117644,0x22062005,0x400e6441,0x00620018,0x98620c40,0x4000262c,
    0x0057002b,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x04dc0000,0xa8513051,0x14401443,0x30260226,0x0a609a87,
    0xa826a044,0x7730ea09,0x330a2144,0x30a609a8,0x01305015,0x30550a62,
    0x204ce633,0x00838802,0x42985031,0x26a0cc08,0x02a614c0,0x06a50111,
    0x51144113,0x237310a2,0x044c0898,0x90898833,0x310a9881,0x20544411,
    0x882a620c,0x105f64c1,0x8e60a983,0x30624cfa,0x2e614415,0x41550620,
    0x80611eb8,0x406620c8,0x0a126b22,0x2e611309,0x1298183b,0x165c47bb,
    0x18829851,0x06f620cc,0x11316452,0x98c884cc,0x24b6e208,0x35246a15,
    0x260e90b8,0x432195cb,0x30e65cb9,0x8b322b97,0x22599094,0x259911bd,
    0x4b324bfb,0x4b321bd8,0x4b321bd8,0x99911bd8,0x3220c864,0x215ddc3c,
    0x819752cc,0x479d52cc,0x157592cc,0x8c921664,0x9912984b,0x33222dc5,
    0x887116e2,0x8d4e65cc,0x65c52354,0x291c4190,0xa92350b9,0x4d2172cc,
    0xc88dc3cc,0xbb31b839,0x2c2e3705,0x4dd4332b,0x4b510715,0x2b3754ac,
    0x8acdd438,0x38acdd43,0x272248dc,0x2e1c4643,0x54c1cc90,0x73120e61,
    0x0e6334b8,0x0bb8d8e2,0x25a8876a,0x92d440bc,0xb96dc417,0x91a8ea91,
    0xc8b8a46a,0x9591c439,0x4aa59547,0x4a6d9974,0x30b70e64,0x23981a87,
    0x5c4ac90c,0x259b119b,0x774849b9,0x5cb36233,0x259b119b,0x59b119bb,
    0x0b712232,0x92170e2b,0x30bcc839,0x64398907,0x70730aba,0x58245e41,
    0x22e29373,0x5c526e63,0xac2eb038,0x2aacaa09,0x442dc62b,0xe892ef23,
    0x0ba46a4c,0x10b24a69,0xb0190b07,0x3662cc88,0x257b10ce,0x42664c38,
    0x0e257b15,0x10e257b1,0xb30e257b,0xca838897,0x64685c3b,0x4199172c,
    0xc8b262cc,0xc877932c,0x59d1122c,0xcc9965cc,0x64cb9b54,0x44b9b54c,
    0x299b31cb,0x4533a21b,0x0e2734ce,0x26ee5d91,0x2e91a806,0xeba4a690,
    0x9d70e24c,0x33ae12e9,0x36200004,0x0166402c,0x6c4059b1,0x0b36202c,
    0x97000e20,0x0000003b,0x38198000,0x00b92000,0x00000b92,0x00038800,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x850cc000,0x08982009,0x40a204dc,
    0x40c41419,0x04404099,0x8226041c,0x20a19828,0x41130202,0x260a209b,
    0x102ea0a1,0x2e1b9850,0x20406609,0x13028820,0x044c09b8,0x81130205,
    0x510a2089,0x26098130,0x08830283,0x9873206a,0x26054408,0x80881809,
    0x7b10ec84,0xc9965c49,0x4c37b32d,0x83026608,0x3220c408,0xa882264b,
    0x88302660,0x6c522a60,0x4587663b,0x39730988,0x2171de44,0x20a02664,
    0x30cd40a8,0x131dec13,0x26a19a81,0x0a8826a0,0x983982a2,0x8d523509,
    0x2a679954,0xc88b3220,0x88b3222c,0x0b3222cc,0xc9664417,0x2aa53090,
    0x8b320aa3,0xc8b322cc,0x17316e2c,0x644b3229,0x2259912c,0x259912cc,
    0x98170c9a,0x219b10cb,0x8332294b,0x242e698b,0xb70b70b7,0xb712db88,
    0x116e06e5,0x46f6237b,0x5b712db8,0x45b86f62,0x52351bd8,0xba4aa91a,
    0xb96174bc,0x2e585cb0,0x44585cb0,0x2e5ac2e3,0x43d714c0,0x2b3751db,
    0xb37559ba,0x0bc966ea,0x4b510f6c,0x896a25a8,0x4d56a25a,0x4d56eb0d,
    0x65d226a3,0x6475b348,0x9242e4ba,0x640bc817,0x8e21c40b,0x220bc80c,
    0x21c41c43,0x2f20e238,0x56550e20,0xaa46ab2a,0x192432b1,0x86490c92,
    0x72424324,0x98486521,0x5d616662,0x2337719b,0x337719bb,0xb1a8e2e2,
    0x4dcd26e6,0x2e693734,0x2a937349,0x45217589,0x5d2f21cc,0xb972b4b9,
    0x71585c92,0x11c5c471,0x44388717,0x71710aa3,0xcd8966c4,0x44710e22,
    0x471712cd,0x99d12cd8,0x664d33a2,0x32277912,0x88b3222c,0x8b3222cc,
    0x11982cc8,0x8b36259b,0x5bb50dc8,0x5ec4f32a,0x36257b12,0x2a57b12b,
    0x4f3665cd,0x99934cc9,0x664d3326,0x26a99934,0x4cb9b14b,0xb939540b,
    0x6443732a,0x54f3262c,0x9736a5cd,0x21c45cda,0xda9e6438,0x0710e25c,
    0x0e238871,0x01c4b9b5,0x00000000,0x001c0000,0x00000700,0x0005c900,
    0x00000000,0x38664433,0x240000d3,0x490b9217,0x225d910b,0x0b9202ec,
    0x336259b1,0x3225d912,0x9259b12e,0x0059b10b,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x99000000,
    0x98006e65,0x66541101,0x0a144022,0x329960cc,0x1984c661,0x37044c13,
    0x40841881,0x46a0809a,0xa8555c44,0x107712cc,0x0e64330e,0x912cc853,
    0x0130cc59,0x64404137,0x8040823c,0x1488ae20,0x26a00111,0x8888e640,
    0x4c444080,0x0dd42983,0x50be980c,0x215e5525,0x06022099,0x9c494986,
    0x22624e24,0x76442a20,0x8621c5c2,0x2350d9bb,0x4aa1c884,0x20d20194,
    0x43107621,0x96a259ba,0x51077628,0x488af2a1,0x42449545,0x5c6242bc,
    0x440a63ab,0xb730ec41,0xd8966447,0x4298399b,0x79914aba,0x291a8990,
    0x1264491a,0x26264499,0x7502ee64,0x3220ba81,0x45cb32a4,0x4333664b,
    0xb5792cca,0x44824aa1,0x4481291a,0x4ee22cca,0x466ee4c8,0x499149b9,
    0x49911cca,0xd81c491a,0x41226c1b,0x15ca713e,0x87991053,0x440e23b8,
    0x22cc8714,0x563569a9,0xbdb88548,0x46ed2350,0x24848484,0x4c0a9848,
    0x24054c1a,0x254dd255,0x292a8672,0x33aa5cda,0x48d4480d,0xa4aa2409,
    0xb1243cc8,0x91332657,0xbb2449d4,0x5c41c491,0x7d516e1d,0x53892e23,
    0x1e94c373,0x2cc88a91,0x23705d91,0x98712cd8,0x44b36a12,0x220bb703,
    0x2121a354,0x3206c484,0x3224645b,0xa46a485b,0x376a3ce8,0x91aa46a3,
    0x0c1200d4,0x246a2409,0x10909031,0x2246a485,0x20c346a4,0x24241da8,
    0x18d52248,0x207104a6,0x15c1c429,0x1dc98071,0x5207106a,0xda8540bd,
    0x44bae21d,0x45d712eb,0x1d7170b8,0x45c36a2e,0x25d710eb,0x3b81c91a,
    0x923548d4,0x85d71009,0x3ce81218,0x22189235,0x940cc2eb,0x52352eb8,
    0x3bb52eb8,0x16dc4188,0x9e754f3a,0x2e512eb8,0x8b3663ab,0x50e20038,
    0x000e299d,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x42e00000,0x02004024,0x20814404,0x79954cc8,
    0x10930444,0xa8188ae2,0x81314491,0x83a85cc8,0x82111119,0x80810080,
    0x1104109a,0x81022221,0x04010888,0x04404082,0x14404104,0x16645991,
    0x510b3220,0x99951cc8,0x248b8810,0x415242e5,0x4c2dc1e8,0x5caf2609,
    0xd8a4aa91,0x8832041b,0x246a0a64,0x4aa0d431,0x261824c4,0x896555bb,
    0x90e66a5c,0xa42e1883,0x7b732db8,0xcb995e54,0x44832195,0x332668bb,
    0x4b8aeee2,0x188f32a9,0x8839ad44,0x2a2585c3,0xca83b11c,0x7b07321b,
    0x4d248dc3,0x7906b20b,0x42e15241,0x58d56174,0x06442071,0x54735324,
    0xca9322b2,0x4c17932c,0x0f7222bc,0x21066c53,0x95c12aa5,0x92173dc8,
    0x26a1c438,0x9c88dc48,0x92f2e243,0x242e48a9,0xac6a9197,0x93733dc8,
    0x45b730e6,0x1654c90c,0x07272771,0x445a8719,0x8f2b238c,0x22e21aa9,
    0xc98ee323,0x2a95b35b,0x459b12cd,0x99207259,0x2267444c,0xcd9a4aa4,
    0x3206ae22,0x2c16a240,0x907203d5,0x389b32e1,0x8b76a1c4,0x2242dc39,
    0x3b663cac,0x737242e0,0x190f32a9,0x2cc93326,0x66443931,0x79911442,
    0x0750eef2,0x6417b037,0x377324bb,0x5dcb9b50,0x2a90904c,0x21d41c42,
    0x0973241b,0x48d490a2,0x70351617,0x0dec3983,0x190b552c,0x1242e1b8,
    0x58d43887,0x9120e216,0x1554c2e2,0x2b939a17,0x000dc0ba,0x77300288,
    0x37710007,0x5c5b815c,0x921a869b,0x44b3950b,0x813280cc,0x10062cd8,
    0x126a65d7,0x352eb894,0x2a0de452,0x191e74c1,0x3b2258e4,0x98091353,
    0x452173ce,0xb50e22ec,0x8933ae59,0x5c93ce83,0xdcb96530,0x41ab4ce1,
    0x00003ce9,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x88000000,0x89a96640,0x260246a4,
    0x29899954,0x2a0122e6,0x5285310b,0xcca8f32e,0x6644a312,0x90b85543,
    0x26a61524,0x644f7223,0x30750ee4,0x98204410,0x866044c2,0x4dcaaa62,
    0x542ee511,0x9c52629c,0x0001bbbb,0x00000000,0xba865400,0x5479b159,
    0xc841cc91,0x912a1bd8,0x2e24a819,0x5c4e3238,0x5477190b,0x4886e492,
    0xb89d5d45,0x98ee3238,0x2481904c,0x443220c8,0x5cd662ca,0x20c4b52b,
    0x4220c089,0x235b5998,0x5c613348,0x00000623,0x00000000,0x5c732000,
    0xa927319b,0x40aaa6b2,0x5c481d8c,0xc8a6e20d,0x644a721c,0x1a8ee91a,
    0x8388e649,0x82f62baa,0x12e64cbb,0x1c89206e,0x21db88ea,0x0079933a,
    0x898c0000,0x00000020,0x00000000,0x55400000,0x3a257b10,0x4533a23d,
    0x65d66199,0x4c6ee0cc,0x00c2248b,0x52318311,0x08a46a3b,0x2ee20e23,
    0xb39516a1,0x9d324d4c,0x1dcbae27,0x018506ee,0x00000000,0x00000000,
    0x00000000,0x1bb88000,0x4c01c2a0,0x00000003,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_8_latin_ext_x[560]={ 0,1,1,0,0,0,0,1,1,1,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0, };
static signed short stb__consolas_8_latin_ext_y[560]={ 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,3,2,
3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,0,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,1,-1,1,-1,1,-1,1,-1,-1,
-1,-1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,-2,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,1,-1,-1,0,-1,
-2,-1,-1,-1,-1,1,2,2,-1,-1,-1,0,-1,-1,-1,1,-1,2,5,-1,-1,1,-1,-1,-1,1,-2,-2,-2,-2,
-2,-2,-1,-1,-2,-2,-2,-2,-2,-2,-2,-2,-1,-2,-2,-2,-2,-2,-2,1,-1,-2,-2,-2,-2,-2,-1,-1,-1,-1,
-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,
-2,-1,-2,-1,-1,1,-2,-1,-2,-1,-2,-1,-2,-1,-2,-1,-1,-1,-2,-1,-2,-1,-2,-1,-1,1,-2,-1,-2,-1,
-2,-1,-2,-1,-1,-1,-2,-2,-1,-1,-2,-1,-2,-1,-2,-1,-1,-1,-2,1,-1,-1,-2,-1,-1,-1,1,-2,-2,-1,
-1,-1,-1,-1,-1,-1,-1,-2,-1,-1,1,-2,-1,-2,-1,1,-2,-1,-2,-1,-2,-1,-1,1,-2,-1,-1,1,-2,-1,
-2,-1,-2,-1,-1,1,-2,-1,-1,-1,-2,-1,-1,-1,-2,-1,-2,-1,-2,-1,-2,-1,-2,-1,-1,1,-2,-1,-2,-1,
-2,-2,-1,-2,-1,-2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-3,-2,-2,-1,-2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1, };
static unsigned short stb__consolas_8_latin_ext_w[560]={ 0,2,3,5,4,5,5,2,3,3,4,5,3,3,
2,4,5,4,4,4,5,4,4,4,4,4,2,3,4,4,4,3,5,5,4,4,5,4,4,4,4,4,4,5,
4,5,4,5,4,5,5,4,5,4,5,5,5,5,4,3,4,3,4,5,3,4,4,4,4,4,5,5,4,4,
4,5,4,5,4,5,4,4,5,4,4,4,5,5,5,5,4,4,2,4,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,2,4,4,5,5,
2,4,4,5,4,4,4,3,4,4,4,4,4,3,4,5,4,2,2,4,4,4,5,5,5,4,5,5,5,5,
5,5,6,4,4,4,4,4,4,4,4,4,5,4,5,5,5,5,5,4,5,4,4,4,4,5,4,4,4,4,
4,4,4,4,5,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,4,4,4,4,5,4,5,
5,4,5,4,5,4,4,4,4,4,4,4,4,4,6,6,5,5,4,4,4,4,4,4,4,4,4,4,4,5,
4,5,4,5,4,5,4,4,5,4,4,4,4,4,4,4,4,5,4,4,4,4,4,4,5,5,5,4,4,4,
4,5,6,5,5,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,5,5,5,6,5,
4,4,4,4,4,4,4,4,5,4,5,6,5,4,4,4,4,4,4,4,4,4,5,5,4,4,5,5,5,5,
5,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,4,6,5,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,4,4,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5, };
static unsigned short stb__consolas_8_latin_ext_h[560]={ 0,7,3,6,7,7,7,3,8,8,4,5,4,2,
3,7,7,6,6,7,6,7,7,6,7,6,5,6,6,3,6,7,8,6,6,7,6,6,6,7,6,6,7,6,
6,6,6,7,6,8,6,7,6,7,6,6,6,6,6,8,7,8,4,1,3,5,7,5,7,5,6,6,6,6,
8,6,6,4,4,5,6,6,4,5,7,5,4,4,4,6,4,8,9,8,2,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,7,6,5,6,
9,7,3,7,5,4,3,2,4,3,4,5,4,4,3,6,7,2,2,4,5,4,6,6,6,6,7,7,7,7,
7,7,6,8,7,7,7,7,7,7,7,7,6,7,8,8,8,8,8,4,7,8,8,8,8,7,6,7,7,7,
7,7,7,7,5,6,7,7,7,7,6,6,6,6,7,6,7,7,7,7,7,5,6,7,7,7,7,8,8,8,
7,7,7,7,8,6,8,7,8,7,8,7,8,7,7,7,6,7,7,7,7,7,7,7,8,6,7,7,8,8,
8,8,8,8,8,8,7,7,6,6,7,6,7,6,7,6,8,8,7,4,7,8,8,8,8,8,4,7,7,8,
8,6,6,6,6,6,6,7,6,8,6,7,6,7,8,6,8,7,8,7,8,7,7,5,7,6,8,6,7,6,
8,7,8,7,8,6,8,7,8,8,7,7,6,7,8,7,8,7,8,7,8,7,8,7,8,6,7,6,7,8,
7,7,6,7,6,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,8,8,7,7,8,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,8,6,8,8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6, };
static unsigned short stb__consolas_8_latin_ext_s[560]={ 254,253,173,95,72,159,163,177,7,46,132,
221,137,180,146,191,169,120,246,202,19,229,16,109,108,37,28,57,61,141,131,
239,50,25,157,208,190,52,251,143,141,146,67,125,173,178,196,61,201,62,184,
77,151,175,7,13,114,167,162,74,51,100,48,196,164,211,11,216,234,6,98,
92,87,82,110,71,66,68,74,227,47,42,84,238,170,17,95,101,42,1,113,
178,1,246,184,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,
217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,254,214,148,
204,11,193,4,153,154,180,1,63,168,180,90,149,53,233,127,123,159,112,93,
190,193,37,249,58,73,67,61,56,102,186,180,192,213,244,23,251,250,239,224,
219,203,234,229,198,35,158,23,120,1,7,42,79,196,99,88,110,83,134,12,
138,133,128,123,118,113,88,243,1,97,92,87,82,46,51,41,79,56,84,45,
39,33,27,21,22,89,6,1,248,243,104,78,93,223,218,212,207,215,161,183,
186,58,175,153,165,163,154,147,140,181,128,123,118,113,108,103,98,173,156,83,
78,31,25,78,68,53,104,95,142,29,24,106,171,7,176,249,151,239,166,188,
204,217,118,206,226,236,73,36,19,107,165,160,63,68,135,118,223,6,199,209,
155,141,48,125,176,101,34,132,30,83,66,56,120,40,170,72,31,126,17,13,
187,188,229,241,115,231,138,221,235,210,201,198,193,211,222,240,229,168,234,158,
133,148,143,137,244,126,18,115,77,12,31,1,89,44,50,104,39,206,61,136,
130,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,55,
217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,
217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,
217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,
217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,
217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,
217,217,217,34,29,148,195,16,181,217,217,217,217,217,217,217,217,217,217,217,
217,217,217,217,217,217,217,217,217,217,217,217,217,11,146,198,193,217,217,217,
217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,
217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,
217,217,217,217,217,217,217,217,217, };
static unsigned short stb__consolas_8_latin_ext_t[560]={ 10,19,50,36,28,19,28,50,1,1,50,
43,50,50,50,19,28,43,36,19,43,19,28,43,28,43,50,43,43,50,43,
19,1,43,43,28,43,43,36,28,43,43,28,43,43,43,43,28,43,1,43,
28,43,28,43,43,43,43,43,1,28,1,50,50,50,43,28,43,19,50,43,
43,43,43,1,43,43,50,50,43,43,43,50,43,19,50,50,50,50,43,50,
1,1,1,50,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,10,36,28,
36,50,36,1,28,50,19,50,50,50,50,50,50,50,43,50,50,50,36,19,
50,50,50,43,50,36,36,36,36,28,28,28,28,28,28,36,1,28,28,28,
28,28,28,28,28,36,28,1,1,11,10,10,50,19,10,10,10,10,19,36,
28,28,28,28,28,28,19,43,36,28,28,28,28,36,36,36,36,28,36,28,
28,28,28,28,50,36,28,28,19,19,10,10,10,19,19,19,19,1,36,1,
19,10,19,1,19,1,19,19,19,36,19,19,19,19,19,19,19,1,36,19,
19,10,10,1,1,10,1,1,1,19,19,36,36,19,36,10,36,10,36,1,
1,10,50,10,1,1,10,10,10,50,10,10,10,10,36,36,36,36,36,36,
10,36,10,36,10,36,19,1,36,1,19,1,10,1,10,19,50,10,36,10,
36,10,36,1,10,1,10,1,36,1,10,1,1,10,10,36,10,1,10,1,
10,1,10,1,10,1,19,1,43,19,43,20,1,19,19,43,19,43,19,43,
36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,19,
36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,
36,36,36,1,1,10,10,1,10,36,36,36,36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,36,36,36,36,36,1,36,1,1,36,36,36,
36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,36, };
static unsigned short stb__consolas_8_latin_ext_a[560]={ 70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_8_latin_ext_BITMAP_HEIGHT or STB_FONT_consolas_8_latin_ext_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_8_latin_ext(stb_fontchar font[STB_FONT_consolas_8_latin_ext_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_8_latin_ext_BITMAP_HEIGHT][STB_FONT_consolas_8_latin_ext_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_8_latin_ext_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_8_latin_ext_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_8_latin_ext_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_8_latin_ext_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_8_latin_ext_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_8_latin_ext_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_8_latin_ext_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_8_latin_ext_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_8_latin_ext_s[i] + stb__consolas_8_latin_ext_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_8_latin_ext_t[i] + stb__consolas_8_latin_ext_h[i]) * recip_height;
            font[i].x0 = stb__consolas_8_latin_ext_x[i];
            font[i].y0 = stb__consolas_8_latin_ext_y[i];
            font[i].x1 = stb__consolas_8_latin_ext_x[i] + stb__consolas_8_latin_ext_w[i];
            font[i].y1 = stb__consolas_8_latin_ext_y[i] + stb__consolas_8_latin_ext_h[i];
            font[i].advance_int = (stb__consolas_8_latin_ext_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_8_latin_ext_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_8_latin_ext_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_8_latin_ext_s[i] + stb__consolas_8_latin_ext_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_8_latin_ext_t[i] + stb__consolas_8_latin_ext_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_8_latin_ext_x[i] - 0.5f;
            font[i].y0f = stb__consolas_8_latin_ext_y[i] - 0.5f;
            font[i].x1f = stb__consolas_8_latin_ext_x[i] + stb__consolas_8_latin_ext_w[i] + 0.5f;
            font[i].y1f = stb__consolas_8_latin_ext_y[i] + stb__consolas_8_latin_ext_h[i] + 0.5f;
            font[i].advance = stb__consolas_8_latin_ext_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_8_latin_ext
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_8_latin_ext_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_8_latin_ext_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_8_latin_ext_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_8_latin_ext_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_8_latin_ext_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_8_latin_ext_LINE_SPACING
#endif

