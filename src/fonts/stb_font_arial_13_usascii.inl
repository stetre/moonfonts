// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_13_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_13_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_13_usascii_BITMAP_WIDTH         128
#define STB_FONT_arial_13_usascii_BITMAP_HEIGHT         60
#define STB_FONT_arial_13_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_arial_13_usascii_FIRST_CHAR            32
#define STB_FONT_arial_13_usascii_NUM_CHARS             95

#define STB_FONT_arial_13_usascii_LINE_SPACING           8

static unsigned int stb__arial_13_usascii_pixels[]={
    0x2a141980,0x31443551,0x22035300,0x0000882a,0x20001a88,0x14428600,
    0x400a880c,0xd50edc41,0x2e3d3341,0x1059263e,0x83d957bb,0x234584f9,
    0xec88ee3c,0x6f640edc,0x1dbdd34c,0xb5d126d0,0x75f4415c,0xd0ecda81,
    0xd1643db7,0x980ee1dc,0x6c411d83,0xf0ea1a61,0x3d83a698,0xa6cd335c,
    0x588b70f9,0xb0da4c75,0x221e56a0,0x71b3750e,0x5cd15c33,0x68b31dc2,
    0xcceec964,0x83a1a658,0x2ccf46fc,0x2e3d01f3,0xd134d2e4,0x8f7f776c,
    0x440aeb58,0x46540ecf,0x2a0e7a62,0x1dc2c9a3,0x65a1d8b3,0x699a5f13,
    0xcbb87878,0xa9ec1aa2,0xd334d2a4,0x5b70d2b8,0x0ff440b1,0xa8f6775c,
    0x696c43ee,0x2cc770b5,0x20fa44b2,0x2634cb0e,0x46e88786,0x3a25d069,
    0x5c3e69b0,0x27a6b624,0x1bb53700,0x92bae7a2,0xdc892a6b,0x5ab47624,
    0x591663b8,0x1789a2ea,0x21a234c7,0x1f889b07,0xbdd507c4,0x837bba69,
    0x81eeeefd,0x2a751b58,0x25a8ff65,0x69b899e9,0x707268ee,0x443a2cc7,
    0x3a3761f5,0x1e1e1a60,0x98edc0ec,0x2cd2a04d,0xc80aeb10,0x8744ead1,
    0x5c3a24fb,0x24bb8eac,0x5c3b9a2b,0x8e8f1663,0x88cfadea,0xd81b0d30,
    0xeb817267,0x9a5404ee,0x80e52605,0xb8372e58,0x261e9dee,0xbdf90ded,
    0x1dcd1641,0x0ea598ee,0x99aa01d3,0x54403a86,0x31000800,0x010880a2,
    0x0000204c,0x41d50e20,0x9f5c7a66,0x6cc163d9,0x20cecacd,0x000584f9,
    0x00000000,0x80000000,0x330a0cc0,0x3114c6aa,0x809aa980,0x000882a8,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x22060153,0x0006a601,0x9880554c,0x83106200,0x26662028,0x20155100,
    0x80982818,0x06a20528,0xb0bb9bd1,0x220ecec8,0x640edcee,0x33ae5cde,
    0x76f5c1ed,0x66e49500,0x7640b30e,0xcbdd83ee,0x8766e42f,0x6883c878,
    0xe839d01b,0x44b11ec3,0x5c3e92e6,0xf15d9a66,0x5cf12dc1,0xc9629503,
    0x03a02b32,0xf134c3d8,0x3c8789e4,0x0f057688,0x22a810f1,0x07cd664a,
    0x96a3b87c,0x4cb500bf,0x4137bb25,0x1ddbd31e,0x1e2054fc,0x896c7e04,
    0x16883c87,0x2a0efd89,0x9a20d805,0x4b60b56c,0xfd996a4b,0x2d125c3d,
    0xbf513669,0xf35b87cc,0x234c5d79,0x3fea0999,0x20f21e25,0x261e1a68,
    0xeeb85806,0x4ba0d56c,0x885d88e8,0x6892e5ea,0x64425c97,0x413c4d34,
    0xee89a65a,0x9913d12f,0x3441e43c,0x0f887839,0x4c049a54,0x0f981f15,
    0x1cd3376a,0x5664a87c,0x30452a4b,0x11699a6d,0x3603e344,0x1f34c972,
    0x9a6132e8,0x0dc83c3a,0xd106e3d1,0xd33b9164,0x2770c49d,0xe89aa1f8,
    0x4d9a6790,0x1f99e4d1,0x44c9a277,0x447a60eb,0x2a4d92e6,0x896a950f,
    0xddd903c5,0x4deb82c5,0x0ddeeeb8,0xe983aefa,0x76d40eff,0x7266f5c4,
    0x33a619dd,0x2fbae0ce,0x2effea80,0xb106f6dc,0x7ec43dff,0x001e2c1f,
    0x98200004,0x00005541,0x00000000,0x00400000,0x00000040,0x00000000,
    0x00000000,0x00000000,0x55510000,0x2602a355,0x2a150531,0x52882a20,
    0x40a23301,0x12aaaaa9,0x40d55545,0x26aaa028,0x13051440,0x0514c0d4,
    0xcc88a854,0x88d54ecc,0x3545d10f,0x9717d479,0x2ccb60f2,0x3ccfccb8,
    0x3333e291,0x441660ee,0x264fcccf,0x13c89f15,0x1e2df0bf,0xd503f0e8,
    0x985d26c1,0x96a0e88f,0x34cb65cc,0x401599e2,0x361e200f,0x23c41663,
    0x3e2b30f8,0x77c4f21f,0x03c5ba60,0x3f307e1d,0x905b9f88,0x3a7885db,
    0x21e83e78,0x3fb3a64b,0x8acc0f81,0x55662d87,0x0f88f10e,0xc9abe2b3,
    0x5e477f13,0xf8740f16,0x7540ba21,0x7417a00e,0x8d13b598,0x0f983a4b,
    0x5981f097,0x89d999f1,0x3e20e9d9,0x5665dbaa,0x44f29b78,0x45a7a59f,
    0xb0743a07,0x2a02e809,0x3bac81fe,0x37887777,0x212a698b,0xaf8acc0f,
    0x3ff985da,0x20de67c4,0x27e2f159,0x2a3af13c,0x740f169b,0x201721b0,
    0xd73f102d,0x3661b950,0x42cad81c,0x03e12a59,0x89b1e2b3,0x1e20f9e9,
    0xea9e2b30,0x32eef13c,0x740f1699,0x2003aab0,0x26c7b02d,0x541ba374,
    0x12a5986c,0x1e2b303e,0x5bacc3f1,0x22b301e2,0x1789fec7,0x03c5a6dd,
    0x7ffec61d,0xc82d86ff,0x13617c45,0x4c2740b9,0x303e12a5,0x99ae1e2b,
    0x203c4fa5,0x3f88f159,0x1699f4f1,0x874fffff,0x0000001f,0x00000000,
    0x00000000,0x00000000,0x05054140,0x2aa08813,0x2aaa1aaa,0x4d5542aa,
    0x0ccccc40,0xa8013555,0x14c06200,0x020000a0,0x6c788004,0xd11e43c5,
    0x966667c5,0x24ccccf8,0x23fdccf8,0xf16eeeea,0x2203fb99,0x3d9b905f,
    0x640f5e6c,0x2a598fc5,0x447f7b24,0x3b664ede,0x3c26cf16,0x22eea9e4,
    0xf101e207,0x23d01e88,0xbb825c78,0x29534c0e,0xbd516a69,0x34a96618,
    0x924aa5c9,0x26de20f9,0xb153c878,0x80f103c5,0x4b84c878,0x3a0791e2,
    0x16a083c8,0x0b3d12d4,0x544952cc,0x17bd14ec,0x3f7e234c,0xffffff02,
    0x3bbe2d87,0x3bbbe25e,0x16a1e23e,0x777c41f1,0x1a6b306e,0x0ea81e88,
    0x59816676,0x54df4d2a,0x5987e4c4,0x407ce7c4,0xf16c3c87,0x4fc43333,
    0x21e20999,0x3e225c5b,0xdc85c999,0x2e882faa,0x4cee0e88,0xa6cd10c5,
    0xd255764b,0x5cf11663,0x6c3c8786,0x407881e2,0x0f43c878,0x5f0f11e2,
    0x2e98b955,0xfffe8b30,0xced87e6f,0xd7bbd14b,0x8b32776c,0x21e26c78,
    0x40f16c3c,0x2a3c4078,0x23c43c0f,0x3e22d46b,0x04403d10,0x000b8b30,
    0x1e200002,0x1e43c5f1,0x3e2078b6,0xf10fffff,0x6983bfff,0x1dffff88,
    0xfb9e416c,0x02d46fff,0x000028b3,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00401000,0x00200802,0x44001040,0x05400088,0x64c002e6,
    0x82060580,0x10eeeee9,0x5c5dfb83,0x76d40cee,0x3db9b10c,0x327bb762,
    0xf9dc592e,0x0e9ae3b0,0x2a3fddd5,0x1fc43d16,0xda80ef5c,0x9530d02d,
    0x22220f85,0x26992e08,0x11dcd12b,0x70f89dcd,0x8aec3e29,0x20874b35,
    0x0d11db3b,0x85b7912e,0x3b6606ab,0x91019d30,0x322199f9,0xaa885c2e,
    0x4b92a2aa,0xd5344950,0xa9a2d999,0x4f164d14,0x2b30598e,0x5a83aabe,
    0x57685e88,0x6c49d710,0xaeba882e,0x88a156c2,0x310ccccc,0x92e11254,
    0x26676a78,0x58a4cb11,0x32ee78b2,0x32727a02,0x44074c1d,0x268a546e,
    0x9100bec8,0x0001a09d,0x590e8800,0xd12dc3a2,0x932c52a1,0x89e2c962,
    0x4bb2046e,0xe807446e,0x053004b9,0x00480b80,0x77540000,0x206f7544,
    0x4b10deda,0xf164b149,0xf507c4e8,0xddfb1361,0x02e92e7d,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x42262000,0x2aa20028,0x5411aaaa,0x000001bb,
    0x00000000,0x00000000,0x6c779500,0x3759fb31,0x8d555554,0x0037730f,
    0x00000000,0x00000000,0x32a00000,0xb989843b,0x000000cd,0x00000000,
    0x00000000,0x22000000,0x00000199,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_13_usascii_x[95]={ 0,1,0,0,0,0,0,0,0,0,0,0,0,0,
1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,1,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0, };
static signed short stb__arial_13_usascii_y[95]={ 10,1,1,1,0,1,1,1,1,1,1,3,8,6,
8,1,1,1,1,1,1,1,1,1,1,1,3,3,3,4,3,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,1,3,3,3,3,3,3,1,1,1,4, };
static unsigned short stb__arial_13_usascii_w[95]={ 0,2,4,7,6,10,8,2,4,4,5,7,3,4,
2,4,6,4,6,6,6,7,6,6,6,6,2,3,7,7,7,6,12,9,8,8,8,8,7,9,8,2,5,8,
7,9,8,9,8,9,9,8,7,8,8,11,8,8,7,4,4,3,6,8,3,6,6,6,6,6,4,6,6,2,
3,6,2,9,6,7,7,6,5,6,4,6,6,9,6,6,6,4,1,4,7, };
static unsigned short stb__arial_13_usascii_h[95]={ 0,9,4,10,12,10,10,4,12,12,5,6,4,2,
2,10,10,9,9,10,9,10,10,9,10,10,7,9,6,4,6,9,12,9,9,10,9,9,9,10,9,9,10,9,
9,9,9,10,9,10,9,10,9,10,9,9,9,9,9,12,10,12,6,2,3,8,10,8,10,8,9,10,9,9,
12,9,9,7,7,8,10,10,7,8,10,8,7,7,7,10,7,12,12,12,3, };
static unsigned short stb__arial_13_usascii_s[95]={ 56,125,1,93,1,101,112,123,51,28,105,
97,111,30,27,10,48,19,76,62,90,76,121,50,94,15,47,97,89,115,81,
83,33,66,57,1,41,32,24,84,10,122,110,1,114,104,95,68,83,22,66,
39,55,101,39,27,18,9,1,46,116,20,74,18,6,108,69,1,55,16,121,
32,48,63,24,76,92,30,23,8,85,78,122,115,56,101,40,50,67,61,60,
15,13,8,10, };
static unsigned short stb__arial_13_usascii_t[95]={ 12,25,54,1,1,1,1,45,1,1,45,
45,45,54,54,14,14,35,35,14,35,14,1,35,14,14,45,35,45,45,45,
35,1,35,35,14,35,35,35,14,35,25,14,35,25,25,25,1,25,14,25,
14,25,14,25,25,25,25,25,1,14,1,45,54,54,35,14,45,14,45,14,
14,25,25,1,25,25,45,45,45,1,1,35,35,1,35,45,45,45,1,45,
1,1,1,54, };
static unsigned short stb__arial_13_usascii_a[95]={ 52,52,66,104,104,166,124,36,
62,62,72,109,52,62,52,52,104,104,104,104,104,104,104,104,
104,104,52,52,109,109,109,104,189,124,124,134,134,124,114,145,
134,52,93,124,104,155,134,145,124,145,134,124,114,134,124,176,
124,124,114,52,52,52,87,104,62,104,104,93,104,104,52,104,
104,41,41,93,41,155,104,104,104,104,62,93,52,104,93,134,
93,93,93,62,48,62,109, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_13_usascii_BITMAP_HEIGHT or STB_FONT_arial_13_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_13_usascii(stb_fontchar font[STB_FONT_arial_13_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_13_usascii_BITMAP_HEIGHT][STB_FONT_arial_13_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_13_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_13_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_13_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_13_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_13_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_13_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_13_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_13_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_13_usascii_s[i] + stb__arial_13_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_13_usascii_t[i] + stb__arial_13_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_13_usascii_x[i];
            font[i].y0 = stb__arial_13_usascii_y[i];
            font[i].x1 = stb__arial_13_usascii_x[i] + stb__arial_13_usascii_w[i];
            font[i].y1 = stb__arial_13_usascii_y[i] + stb__arial_13_usascii_h[i];
            font[i].advance_int = (stb__arial_13_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_13_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_13_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_13_usascii_s[i] + stb__arial_13_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_13_usascii_t[i] + stb__arial_13_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_13_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_13_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_13_usascii_x[i] + stb__arial_13_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_13_usascii_y[i] + stb__arial_13_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_13_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_13_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_13_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_13_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_13_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_13_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_13_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_13_usascii_LINE_SPACING
#endif

