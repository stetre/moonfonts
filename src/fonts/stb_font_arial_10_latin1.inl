// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_10_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_10_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_10_latin1_BITMAP_WIDTH         256
#define STB_FONT_arial_10_latin1_BITMAP_HEIGHT         44
#define STB_FONT_arial_10_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_arial_10_latin1_FIRST_CHAR            32
#define STB_FONT_arial_10_latin1_NUM_CHARS            224

#define STB_FONT_arial_10_latin1_LINE_SPACING           6

static unsigned int stb__arial_10_latin1_pixels[]={
    0x00000000,0x40c54000,0x80002209,0x5c04c28b,0x52aa983c,0xa8844005,
    0x880ab880,0xa9800082,0x00062001,0x4c310000,0x0cdc180a,0x0d4c0015,
    0x981440c4,0x140c4c40,0x57058076,0x24c076a0,0x18a81b90,0x26015448,
    0x07057304,0xddfc8573,0x30390d13,0x37b02ea3,0x381d8593,0x9bc84d88,
    0x1c42b82c,0x2a2ec126,0x10dc8b13,0x17167627,0x44622262,0x4ec44985,
    0x05570905,0xb0353509,0x84620e44,0x260c2311,0x8839102b,0x21718889,
    0x542a170a,0x903503cc,0x21b89739,0x3fa4b9cc,0x066161bb,0x23215466,
    0x160caaca,0x85510995,0x75511449,0x5d44e215,0x777710ab,0x26144a21,
    0x40ec710a,0x96589264,0x4e63108a,0x6dc3db85,0x9d71edc3,0x2732b09d,
    0x3589264b,0x73992c49,0x24b9cc89,0x59556249,0x32b52caa,0x22c45d82,
    0x22c4e61c,0x4377f71c,0x52a85d85,0xbd9d5cc5,0xcac99639,0x015c5d81,
    0x221555b3,0x21555b33,0x910aaad9,0x9c491122,0x98e63dba,0x92a59624,
    0x9893751d,0x8e4a6392,0x04a43929,0x931c8b1b,0x56249ac4,0x4588e458,
    0x8ac4931c,0x9236248d,0xdb98932a,0x4c750aa0,0x263a8554,0xb73161bb,
    0x54552a81,0x233390d9,0x4c0eae1c,0x410ea0db,0x12671049,0x9148824c,
    0x32370488,0xb124c552,0x4953b24c,0x65c4793a,0x25b9712d,0x5b52dcb8,
    0xa855b05b,0x49ac4933,0x4ea15562,0x2499d42a,0x99073258,0x643a9d43,
    0x570ea3a8,0x15c3a9d4,0x322c3773,0x2a9543a8,0x24b4366a,0x066eea48,
    0x12c47519,0x126674cb,0x99333a67,0x45224cce,0x22312444,0x4c932abd,
    0x220c9624,0x0d85d45e,0xb964ae59,0x5d4ae592,0x5b1170ba,0x44932b87,
    0x3aac4935,0x95c3a95c,0x86996249,0x22e75469,0x3a27ccf8,0x88ec1d10,
    0x5cc1d10e,0xccf8961b,0x222a9547,0x41cecd9c,0x3e22eec5,0x6eed47cc,
    0x99c41260,0x52209304,0x87124448,0x2589a26b,0x50ae164a,0x66d49997,
    0x27b9b53d,0x5353dcda,0x744f6cc3,0xa9621d10,0xe8a54b14,0x43a21d10,
    0x254b10e8,0x2a873073,0xd3164550,0x74c683db,0x0ddcc1ed,0x5c59154b,
    0x443c8552,0x5017161d,0x21221645,0x12671049,0x9148824c,0x9c4e2488,
    0xddb8760c,0x00ae160d,0x04200000,0x20f6f4c0,0x36e0dddb,0x3b7a60dd,
    0x20f6f4c1,0x0b50dddb,0x360350b5,0x0cc01620,0x5c2aa200,0x93588365,
    0x9b3076a1,0x0a3a819b,0x4b8b106c,0x12eeee98,0x4bbbba65,0x912eeee9,
    0x14491122,0x80288997,0x0002b82b,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x44400000,0x41440981,0x43bc818a,0x9866e188,0xa8814418,
    0x440aa881,0x82881301,0x80cc4189,0x2053301a,0x80c41bc8,0x157302b9,
    0x82a20c43,0x30660c18,0x541da831,0x406a20a1,0x44182809,0x10c41101,
    0x1b981415,0x75483530,0x85570905,0x1826218a,0x20a98aea,0x20544189,
    0x2e24b9cc,0x48240bbb,0x0c4c2ab8,0x815c0fa6,0x033102a8,0x16a6f212,
    0x481f9399,0xd9891ccc,0x98626120,0x29530dbc,0x80d9c838,0x3663ab84,
    0x2a2b8120,0x121b5b11,0x79132732,0x2ca8c593,0x3198cc66,0xfa8cc663,
    0x11edcb10,0x6dc3db89,0x26391623,0x32a0aaad,0x32a16542,0x32a16542,
    0x2ec0bb06,0x45950bb0,0x25985449,0x866331dc,0x2190374a,0x2e2ca80c,
    0x245cd43a,0x2ca84ac8,0x5c321654,0x922cdb81,0xa86e573b,0x14498ec4,
    0x95472737,0x54ae552b,0x4572a572,0x24472535,0xc94c7253,0x933a8551,
    0x498e5260,0x98e52639,0x32326394,0x4c06dcc2,0x0db980db,0x22b8e4e6,
    0x26e57099,0x54ae553a,0x8b8139ab,0x4393982a,0x22ee22ec,0x3983f503,
    0x70e4e639,0xb3a82731,0x4ea39245,0x2750ae38,0x4c33202b,0x954ae554,
    0x54ae552b,0x97158bbb,0xcb89225b,0x25b9712d,0xce995c3a,0x4b33724c,
    0x9b92ccdc,0x4b337259,0xa8c8731c,0xc83a8c83,0xa4c323a8,0x2e59513a,
    0x4aa571ba,0x10d3482b,0x4321b919,0x64165c49,0xd1950cc8,0xca4c321b,
    0x9a690930,0xb8a6570c,0x87724751,0x3608752c,0x64aa752a,0x954b2552,
    0x5676752c,0xc922572c,0x95cb2572,0x261d10e8,0x54225504,0x844aa112,
    0x5cae112a,0x11f33e22,0xcf88f99f,0x89d4aa7c,0x9744ae0e,0x0b2550e8,
    0x49099119,0xb9d4aa48,0x4dcc2ab9,0x9ae572aa,0x54aa752a,0x72644643,
    0x7305cb25,0x4d62486e,0x2c4b10ea,0x221b991f,0x97d12cbe,0x54b2fa25,
    0x336abd13,0x66d4913d,0x47b9b53d,0x1261ede9,0xc886e644,0x1b9910dc,
    0x64437322,0x4591544c,0x22a8b22a,0x41b9912c,0x930cedd9,0x5f443d9d,
    0x6d44aa2c,0x85f446e0,0xbd10dcc8,0x4332481b,0x913bddd8,0x373221b9,
    0x86d44aa0,0x9092dcd8,0x3aa1a89b,0x376a0ded,0x0000160d,0x405b8ea0,
    0x20000048,0x002eeee9,0x0d800000,0x9620d962,0x0001620d,0x04040001,
    0x20019882,0x00008103,0x20020200,0x06004000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x54c05440,0xaa860c41,0x54c0540a,0x4400a881,0x440220ab,0x2205441a,
    0x0a140aaa,0x202aaaaa,0x182aaa21,0x1c2202a2,0x04c05415,0x3882aaa2,
    0xcb862031,0x8879731a,0x882aaa22,0x2110aaaa,0x1118a808,0x0d65c022,
    0x65c0b855,0x41304442,0x4b3b10b9,0x263a89c8,0x0aae9624,0x4e443676,
    0x36b623a8,0x556c4730,0x6cec0aa6,0xd98b5b11,0x5cae1daa,0x55576542,
    0xb5532640,0x6d6c5225,0x59547a20,0x64c4d824,0x8c9845ba,0x3b3aac40,
    0x3591656a,0x4c7aab66,0x2550aaad,0x1118a82a,0x96cea0aa,0x52a0c0d8,
    0x388eaa0b,0x2111b3b3,0x557b170d,0x73589263,0x70889981,0x2e355791,
    0x4c3b2551,0x1e5d4264,0x39398473,0x8d8b11cc,0x300d8d85,0xa44b1097,
    0x8de45509,0x20e248d8,0xd8e60cb9,0x0edce980,0xa8dc32b1,0x731c4732,
    0x55039ac4,0x2388e2aa,0x64797519,0x907b2550,0x64cc0e41,0x2a84ce23,
    0x2bc8b97a,0xb5589267,0x3736e1b7,0x75383570,0x3ae1ccf2,0xc9656a1c,
    0x645ed84e,0x764cd0bd,0x66ed260b,0x36123224,0x81b11220,0x4887361a,
    0x3a6398c8,0x547304dd,0x8e4aa913,0x3244553a,0x999d3687,0x20daa954,
    0xca54aa48,0x1c4b2551,0x42a5512a,0x1122395a,0x2e2e590b,0x4493288b,
    0x2a573a85,0x8a2a5172,0x20733bdb,0x526551d9,0x2c9dc1e8,0x2a66832a,
    0x3b3761ae,0x36ab2088,0x44911620,0x1aa1a81d,0x4d99f091,0x911c88b9,
    0x48722326,0x36a3d991,0x8732445c,0x54111936,0x2488bd52,0x44aa552a,
    0x44712dcc,0x95499905,0x50d8912a,0xa8d54aa3,0xaa54b10c,0x954a6551,
    0x30c8ba9a,0x751cc6e3,0x2553a954,0x4551b848,0xeca92a39,0x1b11932c,
    0x543d7750,0x00d8a442,0x1221cc35,0x26391175,0x9d328ae3,0x51a81839,
    0x23992205,0x4aa0734a,0xa9222baa,0x84caa552,0x9a44711c,0x954aa244,
    0x99b11448,0x5c0cbca8,0x99b10ddd,0x5e545cc8,0x8933620c,0xa977721e,
    0x373764cd,0xe9899913,0x0c8b04dd,0x12077776,0xbd948839,0x0b51a85b,
    0x5220d891,0x7305dde9,0x4c6a1220,0x6f4c9101,0x3777a64d,0x86caa552,
    0xa954aa48,0x1c479912,0x43a8332a,0xb122552a,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x40000000,0x4a62aaa8,0x55183119,0x98621555,0x55510311,
    0x26310545,0x45114621,0x0a250509,0x82aaa251,0xaaa88c18,0x0c0e6441,
    0x2f2e1654,0x216542ca,0x21edc2cb,0x26333cc9,0x20111111,0xca980010,
    0x79331c9a,0x9c4e0c44,0x99708109,0x2392a619,0x220e350a,0x55b37108,
    0x73299cc5,0x155b5358,0x3986cce6,0x2a6baa88,0xd8744724,0x0d9ae190,
    0x1f99cc39,0x6d56cd72,0xd9ac1f31,0x1c6e3caa,0x98e4e62c,0x9cc6e991,
    0x4c2e951b,0x54cac392,0x502046a5,0x882f665b,0x96d2a395,0x9c872b55,
    0x525ae323,0x24a83dbd,0x12cae0ca,0x448b857b,0x2a730398,0x06458732,
    0x398366e6,0x26760ec0,0x551664c4,0x4932c6f6,0xae47930c,0x2e4cea39,
    0x22588e6b,0x33b2a2dd,0xcb8e6192,0x9b73ccde,0x2e207259,0xb35551dc,
    0x8408d4aa,0x47b302d9,0x864aa3e9,0xaa8aa555,0xb179550c,0x1661b9cc,
    0x448c8855,0x415e446a,0x5262cce9,0xbdddd32a,0x176cc0c8,0x882c80e6,
    0x488bb05d,0x25891739,0xacd56e65,0x730ebad9,0x6674d677,0x89a2261d,
    0x2a3508d8,0x8ccb2393,0x54aa312a,0x6ccae590,0x46e5548b,0x41cc8840,
    0x97321cc8,0x9556192a,0x9b16322a,0x6c6445b3,0xb0550b10,0x6c2cd839,
    0x408c9849,0x8732dde9,0x23660645,0x2540e60e,0x1bb10570,0x835b2ad8,
    0x2ee62aab,0x06b66b48,0x64d67673,0x266cc3b8,0x43732224,0x45cdbcda,
    0x93320dcc,0x9d12dcd9,0x472fa21b,0x54ee2040,0x5199440c,0x52aac325,
    0x5b026a25,0x2bcba83e,0x0aa199bb,0x836571aa,0x73910a98,0xb0e60e60,
    0x599cc0c8,0x701660e6,0xc8b31b03,0xb910990c,0x2b4c8b98,0x36273039,
    0x40164735,0x0002dddb,0x00000000,0x00022226,0x00000000,0x00000000,
    0x14c0e600,0x819161cc,0x6f4cee39,0x1bbbbb3d,0x7715c1b8,0x320b52cc,
    0x2b1e9cc4,0xadc73039,0x0003a239,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x20c00000,0x7732bbb9,
    0x06e20c57,0xa830621a,0x05442a20,0x84c62615,0x13db8248,0x54528cc5,
    0x98662aaa,0x99913acd,0x00024499,0x00000000,0x00000000,0x00000000,
    0x20000000,0x884ccc45,0x49b55999,0x2eeea599,0x2e599721,0x4cd22648,
    0x56b27133,0x020c8a1c,0x888a5241,0x2631c088,0x0000001b,0x00000000,
    0x00000000,0x00000000,0x98000000,0x77732beb,0x91645605,0x84dcc4b5,
    0x948e1ac8,0x5c4e60c8,0x202a7152,0x000000c9,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x26213b31,0x54010099,0x58dc383b,
    0x32e2c88a,0x00005753,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x12000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_10_latin1_x[224]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,-1,
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,
-1,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__arial_10_latin1_y[224]={ 8,1,1,1,1,1,1,1,1,1,1,2,7,5,
7,1,1,1,1,1,1,1,1,1,1,1,3,3,2,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,1,3,3,3,3,3,3,1,1,1,4,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,3,1,1,2,1,
1,1,1,1,1,3,3,5,1,0,1,2,1,1,1,3,1,4,7,1,1,3,1,1,1,3,-1,-1,-1,0,
0,0,1,1,-1,-1,-1,0,-1,-1,-1,0,1,0,-1,-1,-1,0,0,2,1,-1,-1,-1,0,-1,1,1,1,1,
1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,1,1,1,1,1,1,
 };
static unsigned short stb__arial_10_latin1_w[224]={ 0,2,3,5,5,8,6,2,3,3,4,5,2,3,
2,3,5,4,5,5,5,5,5,5,5,5,2,2,5,5,5,5,9,7,6,7,6,6,6,7,6,2,4,6,
5,7,6,7,6,7,7,6,6,6,6,9,6,6,6,3,3,2,4,7,3,5,5,5,5,5,3,5,5,2,
3,5,2,7,5,5,5,5,4,5,3,5,5,7,5,5,5,3,2,3,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,1,5,5,5,6,
2,5,3,7,4,5,5,3,7,7,3,5,3,3,3,5,5,2,3,3,4,5,8,8,8,5,7,7,7,7,
7,7,9,7,6,6,6,6,2,3,4,3,7,6,7,7,7,7,7,5,7,6,6,6,6,6,6,6,5,5,
5,5,5,5,8,5,5,5,5,5,2,3,4,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
 };
static unsigned short stb__arial_10_latin1_h[224]={ 0,7,3,8,8,8,8,3,9,9,4,5,3,2,
1,8,8,7,7,8,7,8,8,7,8,8,5,7,6,4,6,7,9,7,7,8,7,7,7,8,7,7,8,7,
7,7,7,8,7,8,7,8,7,8,7,7,7,7,7,9,8,9,4,1,2,6,8,6,8,6,7,7,7,7,
9,7,7,5,5,6,7,7,5,6,8,6,5,5,5,7,5,9,9,9,2,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,7,9,8,5,7,
9,9,2,8,4,5,4,2,8,2,3,6,4,4,2,7,9,2,3,4,4,5,8,8,8,7,9,9,9,8,
8,8,7,9,9,9,9,8,9,9,9,8,7,8,10,10,10,9,9,5,8,10,10,10,9,9,7,8,8,8,
8,8,8,8,6,7,8,8,8,8,7,7,7,7,8,7,8,8,8,8,8,4,6,8,8,8,8,9,9,9,
 };
static unsigned short stb__arial_10_latin1_s[224]={ 220,163,169,245,175,181,190,173,198,80,127,
109,176,183,224,224,228,123,117,1,102,22,28,108,71,42,253,153,172,115,178,
250,117,138,146,246,183,190,1,129,14,114,251,28,35,79,94,54,87,238,101,
52,21,15,72,62,55,48,41,113,234,98,143,216,206,148,59,142,218,136,225,
219,213,210,109,200,197,190,198,121,172,166,230,109,48,160,235,210,241,128,224,
127,160,209,210,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,
166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,220,254,131,
65,218,85,189,192,194,34,132,247,121,183,7,198,165,115,157,161,190,8,92,
187,179,148,152,204,209,160,151,229,101,64,137,115,107,99,92,145,153,163,170,
62,177,180,184,38,77,25,31,1,23,84,72,184,137,16,9,39,202,213,156,
220,227,239,233,32,42,48,127,235,69,75,81,87,247,134,178,206,93,241,123,
197,203,1,169,137,154,145,7,13,19,52,58,46, };
static unsigned short stb__arial_10_latin1_t[224]={ 10,21,37,1,12,12,12,37,1,1,37,
37,37,37,37,12,12,21,21,21,21,21,21,21,21,21,30,21,30,37,30,
21,1,21,21,12,21,21,30,12,30,21,1,30,30,30,30,12,30,12,30,
21,30,21,30,30,30,30,30,1,12,1,37,37,37,30,21,30,12,30,21,
21,21,21,1,21,21,30,30,30,21,21,30,30,21,30,30,30,30,21,30,
1,1,1,37,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,
30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,10,12,1,
21,30,21,1,1,37,21,37,30,37,37,21,37,37,30,37,37,37,30,1,
37,37,37,37,30,12,12,12,21,1,1,1,12,12,12,21,1,1,1,1,
12,1,1,1,12,21,12,1,1,1,1,1,30,12,1,1,1,1,1,21,
1,1,1,1,12,12,12,30,21,12,12,12,12,21,21,21,21,12,21,12,
12,12,12,12,37,30,12,12,12,12,1,1,1, };
static unsigned short stb__arial_10_latin1_a[224]={ 40,40,51,80,80,127,96,27,
48,48,56,84,40,48,40,40,80,80,80,80,80,80,80,80,
80,80,40,40,84,84,84,80,145,96,96,103,103,96,87,111,
103,40,72,96,80,119,103,111,96,111,103,96,87,103,96,135,
96,96,87,40,40,40,67,80,48,80,80,72,80,80,40,80,
80,32,32,72,32,119,80,80,80,80,48,72,40,80,72,103,
72,72,72,48,37,48,84,107,107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,40,48,80,80,80,80,37,80,
48,106,53,80,84,48,106,79,57,79,48,48,48,83,77,40,
48,48,52,80,119,119,119,87,96,96,96,96,96,96,143,103,
96,96,96,96,40,40,40,40,103,103,111,111,111,111,111,84,
111,103,103,103,103,96,96,87,80,80,80,80,80,80,127,72,
80,80,80,80,40,40,40,40,80,80,80,80,80,80,80,79,
87,80,80,80,80,72,80,72, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_10_latin1_BITMAP_HEIGHT or STB_FONT_arial_10_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_10_latin1(stb_fontchar font[STB_FONT_arial_10_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_arial_10_latin1_BITMAP_HEIGHT][STB_FONT_arial_10_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_10_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_10_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_10_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_10_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_10_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_10_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_10_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__arial_10_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__arial_10_latin1_s[i] + stb__arial_10_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__arial_10_latin1_t[i] + stb__arial_10_latin1_h[i]) * recip_height;
            font[i].x0 = stb__arial_10_latin1_x[i];
            font[i].y0 = stb__arial_10_latin1_y[i];
            font[i].x1 = stb__arial_10_latin1_x[i] + stb__arial_10_latin1_w[i];
            font[i].y1 = stb__arial_10_latin1_y[i] + stb__arial_10_latin1_h[i];
            font[i].advance_int = (stb__arial_10_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__arial_10_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_10_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_10_latin1_s[i] + stb__arial_10_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_10_latin1_t[i] + stb__arial_10_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_10_latin1_x[i] - 0.5f;
            font[i].y0f = stb__arial_10_latin1_y[i] - 0.5f;
            font[i].x1f = stb__arial_10_latin1_x[i] + stb__arial_10_latin1_w[i] + 0.5f;
            font[i].y1f = stb__arial_10_latin1_y[i] + stb__arial_10_latin1_h[i] + 0.5f;
            font[i].advance = stb__arial_10_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_10_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_10_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_10_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_10_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_10_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_10_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_10_latin1_LINE_SPACING
#endif

