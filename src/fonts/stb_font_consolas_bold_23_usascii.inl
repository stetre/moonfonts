// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_bold_23_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_bold_23_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_bold_23_usascii_BITMAP_WIDTH         256
#define STB_FONT_consolas_bold_23_usascii_BITMAP_HEIGHT         84
#define STB_FONT_consolas_bold_23_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_bold_23_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_bold_23_usascii_NUM_CHARS             95

#define STB_FONT_consolas_bold_23_usascii_LINE_SPACING          15

static unsigned int stb__consolas_bold_23_usascii_pixels[]={
    0x026a6355,0x31000510,0x802a6200,0x2aaaaa83,0x01555553,0x07f70000,
    0x0bdedb88,0x0000eea8,0x0000eeb8,0x5405e76c,0xee9801ee,0x079b9305,
    0x4d6654c0,0x4c02aa63,0x100000aa,0x44aa2013,0x4ff80bcb,0x2207fff9,
    0x3e2003fe,0x3ff2205f,0xf8bf901f,0xff96ffff,0x36205fff,0xf9003eff,
    0x7fffcc05,0x7fc41eff,0x5fe80004,0x6c0eff54,0x9ffffd1e,0x400ffdc1,
    0xffa86ff9,0x6c406fff,0x0fffffff,0x3fa09ff5,0x03db880f,0xf706fe88,
    0x3fffff3f,0xffd74ff8,0x5ffd103f,0x03ffea00,0x40777fe4,0x77744ffc,
    0xddff96ff,0xffff503d,0x2ea20bff,0x7c40acfe,0x7ffecdff,0x40007fc8,
    0x3fe21ffa,0x72fdc6fd,0x5cbfffdd,0xff8801ff,0x656ffc46,0x3ffa03ff,
    0x20fffcce,0x4ff987ff,0x3007ff30,0xff703fff,0x8fffddff,0x2ffc44ff,
    0x800fff98,0xff105ff8,0x037fd409,0x03fe5bf2,0xff993fe6,0x7ffffd42,
    0x17fe43ff,0xff30fff6,0x37ec0005,0x88fecfee,0xfff300ff,0x2007fee7,
    0x7fdc6ff8,0x7dc17fa0,0x907fe44f,0x1ffc85ff,0x2007ff30,0xfff706fe,
    0xff17fe47,0x540df909,0x031006ff,0xf880ffcc,0xb7e400ff,0x27f407fc,
    0xfff52fdc,0x447fbffd,0x6ff886ff,0x30006fe8,0x92fc87ff,0x500ff67f,
    0x27feebff,0x7c40bca8,0xd07fdc5f,0x03ffa09f,0x7fc41ff9,0x2a237fc5,
    0xaaadffca,0xffb80602,0xff27fcc4,0xc80ff709,0x2aaa22ff,0xf502aaaa,
    0x07ff201f,0x3fe5bf20,0x3e20df50,0xf33ffb0f,0x07ff304b,0x3fea1ffa,
    0x0ffc8001,0x4fec6fcc,0xff9805fa,0xfff5ff75,0x2ffc43ff,0x7fe4ffe6,
    0xf90dff02,0x30ffd81f,0xfffa87ff,0x27ffffff,0x702aaaaa,0x5ff883ff,
    0x1fee13fe,0x7ccbff10,0x06ffffff,0x3fe01ff5,0x32df9005,0x54ffa07f,
    0xd1feabbc,0x209f51ff,0xffb02ffa,0x800bff01,0xfff04ff8,0x001ff1df,
    0x3fee9ff9,0x47ffeeff,0xeffe85ff,0xbff103ff,0xfa81ff90,0x981ff93f,
    0xeeeffeee,0x3ffffe5e,0x883ff707,0x213fe5ff,0x7f400ffa,0xddddd30f,
    0x3fea0dff,0x003ffa80,0x41ff2df9,0xfffc8ff8,0xffb2fdbf,0x3ee07fbd,
    0x03ffb02f,0x5c001ff7,0x7b7100ff,0xeed80ff6,0xfff70fff,0xff17fe47,
    0x5dfff309,0xfc86ff80,0xff6ff80f,0x03ff980b,0x41fffbb6,0x7fcc1ffb,
    0x3e213fe4,0x17fe402f,0x7e41bfa0,0x003ff907,0x83fe5bf2,0xfcff8efa,
    0xff33fdbf,0xf703bfff,0x03ff605f,0xe800ffe2,0x1bea005f,0x41dfffd0,
    0x7fcc4ffb,0xfd113fe4,0x2165cbff,0x7ffcc7fe,0xffbffc80,0x01ffcc02,
    0xff707fd8,0x3e2ffc83,0x9bffd04f,0xd00ffea0,0x7fee44df,0x400ffb04,
    0x20ff96fc,0xff6fbcfc,0x7f547f95,0x2a0dffff,0x0ffd03ff,0xfa803fec,
    0x1ff1002f,0xb80efd80,0x2ffc41ff,0xdffe89ff,0xc89fd4ff,0xfffa8cff,
    0xffff980f,0x03ff9806,0x3ee0ffb0,0xf1bfee2f,0x3ffec09f,0x7404ff88,
    0x0bffe66f,0x32006fe8,0x360ff96f,0x3ff4fcbf,0xfff507fb,0x2ffd4dff,
    0xf3037fc4,0x0dfb005f,0x5dc5fec0,0xf705fd80,0x25ff883f,0x4bfea4fe,
    0x43ffbffd,0xeffffff8,0xfffd00ff,0x07ff3007,0x7dc1ff60,0x1fffffff,
    0xffe827fc,0x09ff104d,0x3f226fe8,0x0dfd02ff,0x7fcb7e40,0x17fb5fb0,
    0x105fd1ff,0x45fff7df,0x7fdc0fff,0x2037f403,0xf5003ff8,0x87ffff1d,
    0x3ff701a9,0x2aa4ff98,0x7443ff21,0xe981ffff,0x0ffcafff,0x001fff50,
    0x36007ff3,0xffff707f,0x9ff01bff,0xa805ff30,0x37f403ff,0xffb05fd8,
    0x65bf2001,0xfd5fd07f,0x07faff37,0x1ffdd7e6,0xf937dff9,0xffa801ff,
    0x003ff201,0x33f27fe2,0x804c46f9,0x7fe41ffb,0x3ff90622,0x2037ffc4,
    0x403ff218,0xf3004ffb,0x1ff6009f,0x004d7fdc,0x1fee13fe,0xd00bff20,
    0x41fee0df,0xf9002ffc,0x7f41ff2d,0x9ffabfda,0x327f507f,0x7fff42ff,
    0xf001ffff,0x13fe209f,0x1fd9fe40,0x3bfa23fb,0x2e2ffb80,0x97fe26ff,
    0xfb10dffa,0xffc800df,0x00fff980,0x043fff10,0xff707fd8,0x213fe003,
    0xffd807fb,0xa837f400,0x3ffa80ff,0x3f2df900,0xdf95fb07,0x7cbfdfff,
    0xffdcfdcd,0x7ffe440f,0x3f2001df,0x01ffb80f,0x47f26fa8,0x3fff30fe,
    0xffffff70,0x3ffd43ff,0x3ffffff6,0x32005fff,0xffb930ff,0xffd8003f,
    0x33317fff,0x21333ffd,0xff001ffb,0xf00ff709,0x0dfd00bf,0x3e203fea,
    0x2df9005f,0x37f907fc,0x1dff9dff,0x7ffffffc,0x27fc01ff,0x41ffc400,
    0xfe8805fe,0x1bf7bea1,0x3f660dfd,0x440dffff,0x7fe445ff,0x3ffd9eff,
    0x2a1ff900,0x8002ffff,0x57ffffd8,0xffffffff,0x007fee5f,0x3fdc27fc,
    0x2007ff20,0x1ff506fe,0x200bff20,0x20ff96fc,0x2a1535fb,0x7ff6dc0a,
    0xffd003de,0x36009315,0x017fcc7f,0x7fe427e4,0x3100181e,0x44018801,
    0x2a980001,0x0002f366,0xffa82660,0x2fffffff,0x3e001551,0x206fc84f,
    0xf8805ffa,0x03ff305f,0x9007ffe2,0x4c1ff2df,0xff0000ff,0xffff5000,
    0xff3005ff,0x00037ec5,0x00000010,0x00000000,0x00000000,0x3fe00000,
    0x882ff444,0x54040fff,0x9ff104ff,0x0077fd40,0x81ff2df9,0x440105fe,
    0xff50006f,0x2a001bff,0x0006aa1a,0x00000000,0x00000000,0x00000000,
    0x3fe00000,0x05fffb54,0x3b20bffa,0x00fffebc,0x2033bff6,0x66645ffd,
    0x99ff96fe,0x56ffd439,0x3a605db9,0x04c40004,0x00000000,0x00000000,
    0x00000000,0x00000000,0x53fe0000,0xd103fffc,0x3fff205f,0x6c402fff,
    0xbfb01fff,0x96fffff8,0xa85fffff,0x05ffffff,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x54d3fe00,0x10144009,0x00159997,
    0x07005544,0x26555555,0x880aaaaa,0x0001bccb,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x000027fc,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x000b3200,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x75c00000,0x5799500e,0x54000555,
    0xee9801ee,0x3bbb6002,0xedc8806e,0x999900bd,0x22039999,0x1003dedb,
    0x93059995,0x4c039ddd,0x3b2e200b,0x6e440cde,0x6641ceee,0x20cccccc,
    0x059903cc,0x2f7bb726,0x37bfb6e1,0xccccca82,0x9931cccc,0x98799307,
    0x3ff2000b,0x7ffff4c0,0x75c06fff,0x3ff74fff,0x005ff500,0x03fffffc,
    0x3fffffea,0xfffff81e,0xfe983fff,0x100effff,0x89fffffb,0xfffffffb,
    0x80fffa82,0xfffffffa,0x3ffffee1,0x7fffc2ff,0x3fe0ffff,0xc84ff885,
    0x4fffffff,0x3ffffffe,0x7ffffe45,0x3fe2ffff,0x51ffec1f,0x32001fff,
    0x577f40ff,0x203dffea,0x75fffffd,0xff5003ff,0x74ccc005,0x3ffe207f,
    0xf87ffecd,0x3fffffff,0x6ddfffc4,0xffe986ff,0x3e62ccee,0x7ffb9aef,
    0x5c1fffc8,0xfeccefff,0x579fff31,0xcccc85d9,0x3fe0ffec,0x6c4ff885,
    0xfeccdfff,0x3f2af3a4,0x3bbae2ff,0x22fffeee,0x3fe65ffa,0x00fffe46,
    0x3e60ffc8,0x80ffe22f,0x1989dffa,0xf5003ff7,0x3f60005f,0xb0bff607,
    0x04ff87ff,0xfd85ff70,0x01ffec1f,0xff907fee,0x20fffa81,0x0883fff8,
    0x40005ff9,0x17fe0ffc,0xffa93fe2,0x5c01881e,0xffc804ff,0xfb1ffe85,
    0x0fffa85f,0xffb99530,0x3a0ffd41,0x03ff204f,0x65c4ffdc,0x217fd40b,
    0x3f601aaa,0x10dff107,0x04ff8dff,0xff50dff0,0x4027fcc9,0x3fe42ffb,
    0x7fdc0b98,0x02ffd804,0xf83ff200,0x24ff885f,0x20001ffe,0x7cc03ff9,
    0xdffa80ff,0x17306ff9,0xfffffb10,0x27fcc1ff,0x7ec07ff3,0x3effee07,
    0x3ea1ffff,0x03bfea2f,0xff307fd8,0xff1ffa07,0x4ff88019,0xf72fffdc,
    0x7c40223f,0x09ff72ff,0x801ffd80,0x000bfffb,0x3fe0ffc8,0xf14ff885,
    0xfc8000df,0x17ff400f,0x3ffdffb0,0x9dffd000,0xfd81fff9,0x00effdef,
    0xffb81ff6,0x25ffeeff,0xfff32ffa,0x507fd801,0x3ff605ff,0x3fffffe0,
    0x89ffcc1c,0x366ffffd,0xcffffdff,0x7ffffdc0,0xffe8005f,0xffff8800,
    0x3f2001df,0x2217fe0f,0x49ff34ff,0x541aaaa9,0x402ffedc,0x7cc05ffb,
    0xb8005fff,0x07fe44ff,0xbfffffd1,0xffeee881,0xf72eeeef,0x53ff47ff,
    0x3ffd15ff,0x2e0ffb00,0x3ffb02ff,0x7ffffffc,0x2abfea1f,0x27fdbfff,
    0xfffffffe,0xffffb86f,0x7fc0401f,0x3ffa6007,0xc800dfff,0x217fe0ff,
    0x7ff54ff8,0x227fffe4,0x03effffc,0x2003ffe6,0x8001fffe,0x7fe40ffe,
    0x0045bee0,0xfffffff1,0x3fee7fff,0xfa87fe44,0x002ffdbf,0x3fee0ffb,
    0x4c1ffb02,0x6ffdb999,0x3bffbfea,0x7ff4ffb1,0x2ffe999c,0x3ffbffea,
    0x45ff882f,0xda8007ff,0xc805ffff,0x217fe0ff,0x7ff54ff8,0x227ff75c,
    0x5fffcba9,0x3005ffd0,0x5c0bffff,0x6437fc2d,0x2bff20ff,0x2aaa0199,
    0x0aaaaffe,0xffc83ff7,0x7fffff50,0xa83fec00,0x0ffd03ff,0x261fff10,
    0x7f44ffff,0xf303ffa6,0x437fe69f,0x7dc0fffb,0x03ffa2ff,0x7ffe4400,
    0xf07fe401,0x29ff10bf,0xff884ff9,0x0fff4404,0x74013fee,0xb82ffeff,
    0xbff10fff,0x7cc1ff90,0x2effffff,0xfb81ff60,0xa87fe41f,0x005ffeff,
    0x7fcc1ff6,0x006ff885,0x3fe23ffb,0xb2ffc42f,0x5ff881ff,0xffb81ffb,
    0xb1fffd42,0xd80007ff,0x7fec02ff,0x3e217fe0,0x10fff13f,0xff7009ff,
    0x007ffcc5,0x7fd6ffd4,0x21fffc86,0x0ffc86ff,0x3fbbffa2,0xffb02fff,
    0x320ffdc0,0xb5ff50ff,0x3f6009ff,0x703ffe07,0xff1007ff,0x5c1ffe8f,
    0x0ffee2ff,0x1ffa9ff3,0x3f20bfea,0x03ffea3f,0x01ffd800,0x1ffa3ff4,
    0xffd8bfea,0x4027fc43,0x3ffa1ffd,0x23ffd002,0x7fcc3ffd,0x3e63ff46,
    0x03ff60ff,0x3f60bff5,0x907fee07,0x2bfea1ff,0xd802ffe8,0x3bfee07f,
    0x447ffc9b,0xffeb989a,0xa8f7fd44,0x7ffc46ff,0x91ffe98a,0x3f6219ff,
    0x41ffa81f,0xbaacfffe,0x33359d1e,0x9ae8fff9,0x7e45ffc8,0x1ffd30df,
    0x4d6fffcc,0x13314ffa,0x5cdff931,0xcccccfff,0x997fee1c,0x40c40fff,
    0xffa8cffc,0x0bff10ff,0x3f60bff1,0x907fee07,0x4bfea1ff,0x4c41fff9,
    0x999ffe99,0x3ffffa20,0x7fcc2fff,0xb05fffff,0x3fffffff,0xffffff90,
    0x7fffcc9f,0xe884ffff,0xfffe985f,0xffd1ffff,0x83ffffff,0x1fffffff,
    0x7fffffc4,0xfffb82ff,0xf74fffff,0x3fffffff,0x7ffffff4,0xfff13fff,
    0x004ffd83,0xbffffff1,0x5fffc1ff,0x02ffea9a,0x7fdc0ffb,0xfa87fe41,
    0x83bfee2f,0xfffffffa,0xfffc82ff,0xfff980df,0x7dc02eff,0x2a00dfff,
    0x982effff,0x43effffd,0x200effea,0x0dffffec,0xbffffffb,0xbffffb03,
    0x3fff6203,0x3f6601ef,0xf71dffff,0x817fffff,0xfffffffe,0x0bff93ff,
    0x2003fff3,0xf9bfffe9,0x3fffea0f,0x3602ffff,0x07fee07f,0x3fea1ff9,
    0xf52ffec2,0xffffffff,0x9800c405,0x01880009,0x98004c40,0x059d7009,
    0x26200980,0x00310009,0x98800188,0x00133100,0x00000000,0x95100188,
    0xfb005999,0x0000000f,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x80000000,0x99501cca,0x2deec983,
    0x9300ccb8,0x900f2a59,0x3dd71019,0x97059990,0x2e0e65c5,0x3332e1cc,
    0x51cccccc,0x2cca8199,0x66666664,0x99933ccc,0x32999999,0x52cc883c,
    0x03799999,0x33333332,0x9999993c,0x66664799,0xca800abc,0x995072a2,
    0x50059999,0xc8003999,0x5ff984cc,0x3626ff88,0x45ffffff,0xff903ffc,
    0xf881bf23,0x7fffdc1f,0xe87fff81,0x897ffa4f,0x3ffa3fff,0x2fffffff,
    0x7fc43ff9,0x3fffe20f,0x55ffffff,0xffffffff,0x3e21bfef,0xfffff94f,
    0xffff0bff,0x3febffff,0x26ffffff,0xffffffff,0xfb27e403,0xfffffc85,
    0x3fe01fff,0x3ee004ff,0x3ffd07ff,0x3e62ffb8,0x3fffccef,0x7f417fea,
    0xf881bee7,0xffffd50f,0x5ffff03f,0x3ffa4fe8,0xe8fffee7,0xffffffff,
    0x6c3ff92f,0xcccc83ff,0x33ccceff,0x99dff999,0x3e21bfe9,0xd9bff94f,
    0xfff89fff,0xff3ccccc,0x4799999f,0xffedceff,0xe8ff604f,0x66ffe41f,
    0xf306ffec,0x2200dfff,0xf307ffff,0x437fc4bf,0x22ffd42b,0x4ff987ff,
    0xff881bee,0xff99ff50,0x8dffff03,0x3fffe4fe,0x009fffb2,0x7fe4fff1,
    0x100bff51,0xff100bff,0xf10dff0b,0xa87ff29f,0x037fc6ff,0x3fe01bfe,
    0x20fffd45,0xf99bfe99,0x03ff21af,0xff701ffd,0xfb001ffb,0x7f40ffbd,
    0x005ff70f,0xffb1bfe2,0x2a2ffb83,0x7f98627f,0x81ffc8ec,0x3a2ffeff,
    0x33f3fe4f,0x804fcff8,0x3ff23ffb,0x800fff89,0xf8805ff8,0x886ff85f,
    0x83ff94ff,0x037fc7ff,0x3fe01bfe,0x7c4ffb85,0xffffffff,0x81ff90ff,
    0xdfe80ffd,0x7d403ffa,0x2607fdaf,0x00dff4ff,0x3ea2ffcc,0x507fec4f,
    0xf99fecff,0x207ff207,0x3a5fecff,0x3bebfe4f,0x804fccfa,0x3ff20fff,
    0x1002ffd9,0xff100bff,0xf10dff0b,0x887ff29f,0x037fc6ff,0x3fe01bfe,
    0x7c5ff885,0xffffffff,0x41ff90ff,0xff886ff8,0x2205ff8b,0x80ffb5ff,
    0x02ffbffe,0xf10bff20,0x4c5ff8df,0x7cd7fe7f,0x207ff207,0xd1ffbcff,
    0x3e3fe29f,0x05fcafef,0x3f227fdc,0x2004ffcf,0xf8805ff8,0xeefff85f,
    0xf94ffeee,0x5ffd735f,0x9999eff8,0x999fff09,0x82ffc599,0x0ff886ff,
    0xbff90df3,0x501dffb9,0x03ffa3ff,0x7fd87fe4,0x37fffcc0,0x20dff300,
    0x7ff50ffe,0xfff37f98,0x7e40df31,0xf8cff81f,0x3e29fd5f,0xf77ffc8f,
    0x40ffe80b,0x01fffffc,0x2017fe20,0xfff85ff8,0x4fffffff,0xdffffff9,
    0xffffff05,0x3fffe5ff,0x3fe4ffff,0xf10fff05,0x7e437d4f,0x0dffffff,
    0x3fee7fd8,0x363ff982,0xfffe807f,0x3fff3002,0x7e4bfee0,0x647fc40f,
    0x06faafff,0x3fe07ff2,0x9fd1ff94,0xaffd5fe2,0x3fee06fb,0xffcffc84,
    0x17fe2005,0x3e17fe20,0xfdccccff,0xfffff94f,0x3fffe09f,0xfff2ffff,
    0x7c599999,0x30dff05f,0x642fdcdf,0xffeccdff,0xf32ffc0f,0xd8dfd09f,
    0x6ffa807f,0x03fff100,0x6feaffcc,0xbfe8ff88,0x3205fadf,0x14ff81ff,
    0x269fd9ff,0x2e5ff17f,0x03ffa06f,0x3ff67ff2,0x0bff1003,0xff0bff10,
    0x329ff10d,0x2ffe89ff,0x7fc06ff8,0x885ff806,0x3fbaa5ff,0x3effeeef,
    0xffb03ff2,0x4cdffcc9,0x7fd47ff9,0xaffeaaac,0x0bff100a,0x005ffd10,
    0x09ff1ffd,0xf3bf5ff1,0x7e40bf7f,0x364ff81f,0xff34feff,0x06fb865c,
    0x3f209ff5,0x00fff89f,0x8805ff88,0x86ff85ff,0x3ff94ff8,0x3fe1bfe2,
    0x4037fc06,0x4ffb85ff,0x3fffffee,0x3f24ffff,0x92ffcc0f,0xffffffff,
    0x7fffe43f,0x0fffffff,0x880bff10,0xf9001ffe,0x3e03ff9f,0xfbfd2fdf,
    0x40ffe40b,0x3ffe64ff,0x540ff54f,0x01ffd07f,0x7fdc7ff2,0x05ff8806,
    0xff85ff88,0xf94ff886,0x217fec3f,0x37fc06ff,0x3e22ffc0,0x3f6620ff,
    0x09bfe99c,0xff703ff2,0x7fffff49,0x3f23ffff,0xffffffff,0xbff100ff,
    0x677ff440,0xf981cccc,0x3fe07fff,0x9fff90ff,0x7fed5544,0x89ff1aab,
    0xff54fffe,0x7d43fd40,0x87ff205f,0x7c403ffe,0xf333105f,0x3fe333bf,
    0xf94ff886,0x237fcc3f,0x7ffc06ff,0x3e2aaaaa,0xfffcaaef,0x7f47fb04,
    0xa9affc81,0xff12fffc,0xff333339,0x01ff600d,0xfc817fe2,0xffffffff,
    0x09ffff02,0xff32fffc,0x7fffcc9f,0xff3fffff,0x54fffa89,0x43fd40df,
    0x3f201ffe,0x07ffe61f,0xf505ff88,0xffffffff,0x3fe21bfe,0xfe83ff94,
    0xf01bfe2f,0xdfffffff,0x7ffffffc,0xf8bf603f,0xffffc80f,0x3ee4ffff,
    0x01ffd01f,0xf100ffb0,0x7ffe40bf,0x02ffffff,0x7405fffb,0x1fffc3ff,
    0xfffffff3,0x213fe7ff,0x0df74ffe,0xff507fd4,0x41ffc80b,0x3e206ffc,
    0xffff505f,0x3fefffff,0xf94ff886,0x26ffa83f,0x7ffc06ff,0x3e6fffff,
    0x00cdefff,0x0ff88ff4,0xefffffc8,0x903fec1d,0xffb005ff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x5e66664c,0x4004cb81,0x103deec9,0x20180001,0x2601bcb9,
    0x9802bccb,0x7300acca,0xcba80579,0x02aa22cc,0xa8d54553,0x895442cc,
    0x4d440bcb,0x01950bb8,0x55302cc8,0x542aa601,0x88d5401a,0x455502aa,
    0xaaaaaaa8,0x005d902a,0x7ffdc011,0x360effff,0x3ff2007f,0x7445ffff,
    0xbf70001e,0xbfffff90,0xfffffe81,0xffe880ef,0x7f445fff,0x440dffff,
    0x0ffffffe,0xffc83ff7,0xfffb9ff0,0x7cffdc9f,0x3ea1ffff,0xffadffdd,
    0x413fe02f,0xffd04ffa,0xff01bf61,0x321ffec5,0x3ffe23ff,0x826fffff,
    0x3e6012fd,0x9bff704f,0x7ecdfffb,0x7dff7007,0x7dc7ffd7,0x7e4002ff,
    0x37ff20ff,0x7744ffdb,0x45ffdbbc,0xfeeffff8,0x3bbffe25,0x7ff45fff,
    0xf70dbaac,0xf0ffc83f,0xfffbffff,0x3bfffee3,0x3fea5ffe,0xfeefffcf,
    0xf813fe04,0x24ff987f,0x3fe207fc,0x4c7ffe21,0x7ffc45ff,0x3a5fffff,
    0x3fa9fc8d,0xb80fffc8,0x3ffa21ff,0x3a00ffb2,0x1ffe20ff,0x1007fff5,
    0x7cc1dffb,0x107fe44f,0xffb1ffa0,0x3ff21889,0x44bffa64,0x7fdc06ff,
    0xff87fe41,0x27ff50ef,0x3fa3fffb,0x7f53fea7,0x3e06fa8f,0x0bff204f,
    0x3fdc3ff9,0x03fe6131,0xffd1dff5,0x1fff3001,0x37fbffe6,0xfffb85ff,
    0x541ffb82,0x00ffb4ff,0xff90bff1,0x04fff981,0x2e17ffa2,0x17fd40ff,
    0xff13fec0,0x70ffd00d,0x3ffe29ff,0x83ff700b,0x1fff0ffc,0xffba7fc4,
    0xfa87fe44,0x3ea9fd0f,0x3fe66667,0x3e20999d,0x2a37fc5f,0x2a9ff1ff,
    0xfdff907f,0xffd1005f,0xbfffd705,0x417fec03,0x7fcc1ffb,0xf100ffb4,
    0x03ff70df,0x981bffd1,0xffb03fff,0x7fffffff,0xffffeda8,0x200ffea7,
    0x5ff985ff,0x0b7ffff6,0xffc83ff7,0xf700dff0,0x50ffc83f,0xfa9ff4ff,
    0xffffff17,0xfd8bffff,0x987ff30f,0x77ff9aff,0x7fff40df,0x09ffb005,
    0x5bffff71,0x5c07fdc0,0x9ffdc1ff,0xfff007fd,0x017fe445,0x3ea1dffb,
    0x3ffa02ff,0x3fffffff,0x3ffffff6,0x00ffee7f,0x3fe0bff1,0x7ffffdc5,
    0xc83ff70e,0x00dff0ff,0xffc83ff7,0x9ff4ff50,0xffff17fa,0x8bffffff,
    0x1ff93ffa,0xffcbff88,0x3205fcaf,0xfb802fff,0xdfff985f,0xe986ffdf,
    0x23ff704f,0xfb0fffb8,0x3ffee00f,0x02ffffef,0x74cbffd1,0x1ff604ff,
    0x906ffdc0,0x027fd4ff,0x7fc43ffc,0xbfff9304,0xff907fee,0x2e01bfe1,
    0x87fe41ff,0x54ffa7fa,0x013fe07f,0x82ffdbfe,0xdfdfecff,0xfff304fd,
    0x7fcc01ff,0xf91bd00f,0x7f5c7f53,0x3ffee05f,0x362fffff,0x3ff2007f,
    0x82ffffff,0xe884fff9,0xffb80dff,0x40ffd801,0x3ffe27fd,0x20fff400,
    0x7cc03ffb,0x4c5ff57f,0x0dff0fff,0xfc83ff70,0x7f4ff50f,0x7fc0ff53,
    0xfbffc804,0xdfdfb02f,0x107fdff3,0x0bff9fff,0x0807ffe2,0x3b204bf6,
    0x7ffdc01c,0x7ec1dfff,0x55544007,0x7d41ffc8,0x7fec02ff,0x177fc40e,
    0x13ffc8a2,0xffd8fffb,0x2e4b99bf,0xffb9bfff,0xff502e27,0x2e77fe6b,
    0xdff0ffff,0xc83ff700,0x74ff50ff,0x7c0ff53f,0xfff9804f,0x3fff206f,
    0xb05ffff4,0x0fff65ff,0x2aab7ffa,0x005d902a,0x137ff700,0x0003fec0,
    0x3ff237f4,0xfff7001f,0xfffffb85,0x3ffea6ff,0x447fefff,0x5fffffff,
    0x7ffffff4,0x3bffe62f,0x3fa2ffff,0x0ffdffff,0xff700dff,0xf50ffc83,
    0x7fa9ff4f,0x74013fe0,0x3ee03fff,0x1fff91ff,0x3e25ffb8,0x3ffea1ff,
    0x007fffff,0x1ffb8000,0x0007fd80,0xff71ffdc,0xffa8001d,0x7fff541f,
    0x7ffdc5ff,0xc887f9bf,0xc83fffff,0x4c1dffff,0x1dffffff,0x4d7fff4c,
    0x00dff0ff,0xffc83ff7,0x9ff4ff50,0x06aa07fa,0x007ffd40,0x7fccfff5,
    0x207ffcc7,0xff50effb,0x0fffffff,0xff700000,0x55ffb003,0x54415555,
    0x0effecaa,0x980006ec,0x004cc03f,0x26200066,0x88018800,0x0c400999,
    0x00000000,0x00000000,0x00000000,0x00000000,0x6c00ffdc,0xffffffff,
    0x3ffffea1,0x000000ef,0x00000001,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x01ffb800,0xffffffd8,0x3ffea1ff,0x000002ce,
    0x302cc800,0x55555555,0x5ee88105,0x5400e654,0xa8ddb2ee,0xaaa80eee,
    0x77771aaa,0x77777777,0x00000005,0x00000000,0x00000000,0x00000000,
    0x00000000,0x0fffb800,0xffffffb8,0xbff30fff,0xff92ffc4,0x53fcc9ff,
    0x21ff65ff,0x3e20efe9,0xff5fffff,0xffffffff,0x000009ff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x7fc40000,0xeeea84fd,0xb0eeeeee,
    0xaffc5fff,0xcffeeff8,0x3fe67fb8,0x3620ffb2,0xffff10ef,0x33332bff,
    0xcccccccc,0x00000002,0x00000000,0x00000000,0x00000000,0x00000000,
    0x3e2ff200,0x7ec0001f,0x553fe2ff,0x3ffff27f,0x647fe64f,0x2204406f,
    0x00088888,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xf93fcc00,0xff98000d,0x3c9a7fc5,0x1077ffdc,0x01bf23ff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x80000000,0x8ffe22fe,
    0xfffffffb,0x320620ff,0x81a8802d,0x09b50dd8,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x3fea1bee,0xffffff70,
    0x00001fff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xaa800000,0x26235501,0x19999999,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_bold_23_usascii_x[95]={ 0,4,2,0,1,0,0,4,3,2,1,0,2,2,
4,0,0,1,1,1,0,1,1,1,1,0,4,2,1,1,2,3,0,0,1,0,0,2,2,0,1,1,1,1,
2,0,1,0,1,0,1,1,0,0,0,0,0,0,1,3,1,2,0,0,0,1,1,1,0,1,0,0,1,1,
1,1,1,0,1,0,1,0,2,1,0,1,0,0,0,0,1,1,5,2,0, };
static signed short stb__consolas_bold_23_usascii_y[95]={ 17,1,1,2,0,0,1,1,0,0,1,5,12,9,
12,1,2,2,2,2,2,2,2,2,2,2,5,5,4,7,4,1,0,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,0,2,19,1,5,1,5,1,5,0,5,1,0,
0,1,1,5,5,5,5,5,5,5,1,5,5,5,5,5,5,0,-2,0,8, };
static unsigned short stb__consolas_bold_23_usascii_w[95]={ 0,5,9,13,11,13,13,4,8,8,11,12,7,8,
5,12,13,11,11,11,13,11,11,11,11,12,5,7,10,11,10,8,13,13,11,12,13,9,9,12,11,10,10,12,
10,13,11,13,11,13,12,11,12,12,13,13,13,13,11,7,11,7,12,13,8,11,11,10,12,11,12,12,11,11,
10,12,11,12,11,12,11,12,10,10,11,11,13,13,13,13,10,10,3,9,13, };
static unsigned short stb__consolas_bold_23_usascii_h[95]={ 0,17,6,15,20,18,17,6,22,22,10,12,9,4,
6,19,16,15,15,16,15,16,16,15,16,15,13,16,14,8,14,17,22,15,15,16,15,15,15,16,15,15,16,15,
15,15,15,16,15,20,15,16,15,16,15,15,15,15,15,22,19,22,8,3,5,13,17,13,17,13,17,17,16,17,
22,16,16,12,12,13,17,17,12,13,17,13,12,12,12,17,12,22,24,22,6, };
static unsigned short stb__consolas_bold_23_usascii_s[95]={ 254,171,109,201,85,136,177,90,46,15,232,
166,244,128,84,123,103,55,15,211,241,91,117,93,129,24,249,141,48,72,37,
150,71,227,215,149,187,177,167,198,142,131,174,105,13,79,67,77,1,97,154,
162,118,185,27,41,235,1,223,63,111,55,59,137,119,71,159,83,1,59,27,
14,40,230,24,52,65,153,141,94,242,191,130,107,218,118,179,193,207,204,221,
35,1,5,95, };
static unsigned short stb__consolas_bold_23_usascii_t[95]={ 1,1,74,44,1,1,1,74,1,1,60,
60,60,74,74,1,26,44,44,26,44,26,26,44,26,60,26,26,60,74,60,
1,1,44,44,26,44,44,44,26,44,44,26,44,60,44,44,26,60,1,44,
26,44,26,44,44,26,44,26,1,1,1,74,74,74,60,1,60,26,60,26,
26,26,1,1,26,26,60,60,60,1,1,60,60,1,60,60,60,60,1,60,
1,1,1,74, };
static unsigned short stb__consolas_bold_23_usascii_a[95]={ 202,202,202,202,202,202,202,202,
202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,
202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,
202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,
202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,
202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,
202,202,202,202,202,202,202, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_bold_23_usascii_BITMAP_HEIGHT or STB_FONT_consolas_bold_23_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_bold_23_usascii(stb_fontchar font[STB_FONT_consolas_bold_23_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_bold_23_usascii_BITMAP_HEIGHT][STB_FONT_consolas_bold_23_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_bold_23_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_bold_23_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_bold_23_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_bold_23_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_bold_23_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_bold_23_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_bold_23_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_bold_23_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_bold_23_usascii_s[i] + stb__consolas_bold_23_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_bold_23_usascii_t[i] + stb__consolas_bold_23_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_bold_23_usascii_x[i];
            font[i].y0 = stb__consolas_bold_23_usascii_y[i];
            font[i].x1 = stb__consolas_bold_23_usascii_x[i] + stb__consolas_bold_23_usascii_w[i];
            font[i].y1 = stb__consolas_bold_23_usascii_y[i] + stb__consolas_bold_23_usascii_h[i];
            font[i].advance_int = (stb__consolas_bold_23_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_bold_23_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_bold_23_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_bold_23_usascii_s[i] + stb__consolas_bold_23_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_bold_23_usascii_t[i] + stb__consolas_bold_23_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_bold_23_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_bold_23_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_bold_23_usascii_x[i] + stb__consolas_bold_23_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_bold_23_usascii_y[i] + stb__consolas_bold_23_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_bold_23_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_bold_23_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_bold_23_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_bold_23_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_bold_23_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_bold_23_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_bold_23_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_bold_23_usascii_LINE_SPACING
#endif

