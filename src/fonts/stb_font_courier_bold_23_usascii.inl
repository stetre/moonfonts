// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_23_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_23_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_23_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_bold_23_usascii_BITMAP_HEIGHT         70
#define STB_FONT_courier_bold_23_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_bold_23_usascii_FIRST_CHAR            32
#define STB_FONT_courier_bold_23_usascii_NUM_CHARS             95

#define STB_FONT_courier_bold_23_usascii_LINE_SPACING          11

static unsigned int stb__courier_bold_23_usascii_pixels[]={
    0x00000026,0x4c030000,0x00f660ee,0xed92e5b5,0x806601de,0x440eeed8,
    0x0801d53e,0x0004c000,0x02000000,0x00026200,0x00800001,0x04001310,
    0x260dd880,0x01fa805f,0x01b209d1,0x7cc0bee0,0x413fee0f,0x21fd4ffa,
    0xfb83ffff,0x7d40cfff,0xafcc0fff,0xffd882fd,0x20ffcc0e,0xfcefffd8,
    0x9fff51ef,0x261fffdc,0xd881cffc,0xffd02dff,0x03dfffbb,0x21fff64c,
    0x501dffd8,0x2605bffb,0xffeefffe,0xa802f985,0x00ffc3ff,0x2fe41bea,
    0x7c000ff8,0x2a06601f,0x747fb07f,0xb013ff0f,0x1dffdfff,0x540ff988,
    0xfd03fb5f,0x7dc1fd79,0x3bffe24f,0x51ffffff,0x7fdcbfff,0x3fffe24f,
    0x7fff42ff,0xfffe81ff,0x82fffeff,0x26fefff9,0x0fffffe8,0x7fffffe4,
    0x7f7ffcc3,0xfb85ffff,0xc8199004,0x43ff804f,0x7f541ff8,0xfb805eff,
    0x41fe0005,0x7c3fa0fe,0x23ffb80f,0x1fd05fea,0x83fd4fa8,0xb8be61fa,
    0x8bbf64ff,0x6fa86ffa,0x67e43fd8,0x77d4df70,0x3ee0df71,0x83fee1df,
    0xb810cff9,0x45fc88df,0x8df50bee,0xffb10dfe,0x0013ee05,0xb801ff10,
    0x2637e46f,0x07ffefff,0x7ff41fe8,0x3fc2ffff,0x43fa0fe8,0x17fc40ff,
    0x7f40ffc4,0x7f4efe40,0x72742e41,0x03fe27ff,0x1ff41bee,0x87f81ff3,
    0xe87f91fe,0xb06fb83f,0x2027fc7f,0x01fe21fd,0x0ff88fec,0x3a617fc4,
    0x2fffffff,0x2027e400,0x0bfe2ff8,0x03f447fb,0x3ffa1bea,0x3fc2ffff,
    0x43fa0fe8,0x03fd40ff,0x21fd07fb,0xfffffff9,0xfc98fa5f,0x7ccbfea4,
    0x260df506,0x3e0ff66f,0x6c3fe21f,0x5c27dc1f,0x269f705f,0xe87f805f,
    0x87fcc01f,0x85fb05f9,0xfffffff9,0x7fc4003f,0xf99fec00,0x0c42fd87,
    0x6c00bfa0,0x7c07fc2f,0x7fc3fa0f,0xf5027dc0,0x3621fd0b,0x3effeeff,
    0x3fff25f1,0xff87fe64,0x3a06fe82,0xf707f9bf,0x54bff9bf,0x217fe24f,
    0x2ff80ffb,0x87dfb9f7,0x83fb85f9,0x224ffed9,0x17fc40ff,0xfd804fb8,
    0x900ff605,0x2a1beabf,0x9801ceff,0x0bf6006f,0x3fea5ffb,0x0ff87f46,
    0xbf5027dc,0xafc81fd0,0x44fcc6f8,0x7fc49d3f,0x2eb7ff21,0x3e606ffe,
    0x3fe03fef,0x3e20ffff,0x87ffeabf,0xecacfffb,0xffffb0ef,0x42fd4dff,
    0xfffa83fb,0x886ff41f,0x9f702ffd,0x4c01ff00,0xbb7d407f,0xfffd505f,
    0x01fec05d,0xffc85fb0,0xfe8bff53,0x7f881ff0,0x3fa0ff60,0x37ccfec0,
    0x743ea7e6,0x3f207fc4,0x06ffffff,0xf903ffec,0xb8bffbdf,0x86ffffff,
    0xfffffffb,0x237ff60e,0x0bf51fe9,0x36a207f7,0x3ffe61ff,0x702ffffe,
    0x03fa809f,0x3ea03fd8,0xb980bf96,0x0ff306fe,0x7fc2fd80,0x3fa3fc41,
    0x5fd01ff0,0xfd03ff10,0x3bbffaa1,0x23f31dff,0x3f44e9df,0xf9bcda88,
    0x81ffcc06,0x3fe22ff8,0x7e5f5c41,0xdc9cfb84,0x20efc80b,0xb0ff14fa,
    0x87f9003f,0xfeefffe9,0xc809f702,0x40df5006,0x90df55fb,0xfb05f903,
    0x42fd8007,0x741fd07f,0xf701ff0f,0x17faa17f,0xfffc87f4,0xf12fffff,
    0x11fffee7,0x037cc001,0x6f981fea,0x3e603fc8,0x004fb82f,0x26f889f7,
    0x01fe21fe,0x09882fd4,0x17ea05fb,0x8007a573,0x29fb02fe,0x437cc7f9,
    0x07fc41fe,0xff0bf600,0x0fe83fa0,0x3fee01ff,0xd00effef,0x5cffc41f,
    0x5545e85f,0x37cc0001,0xf880ffa0,0x207fa21f,0xf705feb8,0x87fe2009,
    0x437f23fc,0x220a24fb,0xff9803fe,0x3fbbfe00,0xf50006ff,0x7c4bfe0d,
    0x33ffea1f,0x4fc86ffc,0x7c2fd800,0x7f41fd07,0x7d401ff0,0x7f404fff,
    0x84fbbfc0,0x04c800fd,0x0dffeda8,0x1bffddb3,0x7f77fec0,0x3ffbf26f,
    0xddfd906f,0xfdff7009,0x7ff441ff,0x3fee1ffe,0x80efffee,0x04ffeeec,
    0x67ffff54,0x07fa0000,0x25fc8ff5,0xdffffff9,0x0007fc41,0x41fe0fec,
    0x7c3fa0fe,0x3bff200f,0xfe81b88b,0x1fddfe20,0x1c8867cc,0xf9003fe2,
    0x3ee5ffff,0x402fffff,0x20dffffc,0x203ffffb,0x007fffff,0x305bffd9,
    0xc885fffd,0x80dffffe,0x04fffff8,0x00002620,0x0ffa2fdc,0xf9843ff3,
    0x009f701f,0x3e61ff30,0x25ff904f,0x3bdff0fe,0xffffffb8,0xffdb14ff,
    0x2fcb7c41,0x3ffdff70,0x33300088,0x99998813,0x30062000,0x33331001,
    0x80088001,0x00988018,0x00019988,0x3ff00000,0x3f603fea,0xf101ff04,
    0xddd9003f,0x06fdc9ff,0xf9f69fb0,0x6f543fff,0x50beedbc,0x3d81ffff,
    0x65cc01b3,0x0000000a,0x00000000,0x00000000,0x00000000,0x7dc00000,
    0x3e205f72,0x3e60fd05,0xffff8805,0x8100084f,0x00026660,0x00066620,
    0x00000000,0x00000000,0x00000000,0x00000000,0x0c000000,0x02980002,
    0x4cc40026,0x00000001,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00cc0000,0x304eeb80,0x77640179,
    0x00000002,0xeeeeeeb8,0x3bbbbaa2,0x13101eee,0x4c400000,0x00662000,
    0x00000662,0xa880275c,0x0000bded,0x5eea8000,0x6c400000,0x3ffee01e,
    0x7ff4004f,0x07ecfa85,0x8007fff1,0x2a00fdb9,0xfc81cffe,0x2e5fffff,
    0xffffffff,0x6fffedc2,0x5ffff71e,0x709fffd1,0x0dbdfffd,0x37ffffee,
    0x77ffecc6,0xffff900b,0xdf903dff,0xfffff100,0x93ffea7f,0xff53fffb,
    0x1fffdc9f,0x2e00fff9,0x4effffff,0x3607ff50,0x0effefff,0x3a17ea00,
    0x3fc80ba2,0xffffd100,0x3ffff201,0x4dfe41ff,0x4dfd4199,0x2e1ff999,
    0x3fffeeff,0xd15ffff7,0xffc8bfff,0x40ffffee,0xffeefffc,0x3bbffa1f,
    0xfff904ff,0x3103dfff,0x339f9001,0x3ffea155,0x54ffff24,0x3fee5fff,
    0x803fc43f,0xfffffffb,0x7017705f,0x2ff547ff,0x42fcc260,0xfb80f62e,
    0x3e201313,0xf980ffce,0xc8bf712f,0xf981802f,0xfd10ff46,0x7cc1fdc7,
    0x2e0ffdc5,0x07fea0ff,0x07f43ff3,0xf8801ff1,0x3fe00006,0x2a3fe800,
    0x27f440ff,0x5fe03ff5,0x13fc0098,0x44003fd5,0x1ff882ff,0x677ffec4,
    0xfbaeb85f,0x3f77ee00,0x7f401eff,0xfe83fa80,0x2f733f20,0x4c9f9000,
    0x2e2fa85f,0x745f983f,0x641fb01f,0x4b8d701f,0x7c402fc8,0x1ffff906,
    0xfffffd10,0x3ff303ff,0x3e607fd1,0x202ff9bf,0x0efffdff,0x09f50ff0,
    0xfb03fcc0,0x7f7ffc47,0xbd705fff,0xfb89fb55,0x2fffefff,0x40c03fa0,
    0x3ff20ff8,0xe802ffff,0x20e7fc1f,0x7cc1fdc0,0x1881fe25,0x4c0003fc,
    0x37c401ff,0x80ffffc8,0xffffffe8,0xf9df902f,0xffffa80b,0x77fffc04,
    0x88ff06ff,0x3ee003fd,0xfd97ea04,0x0bff711d,0x416ffed4,0xf911dffb,
    0x003fa01f,0x77dc6fd8,0x200ffdac,0xfffa86f9,0x83fb83df,0x017ea5f9,
    0x20005fa8,0x8805ffd9,0x00ff806f,0x3fa003fc,0xffb800ff,0x10dff805,
    0x99ff01fd,0x3101dffd,0x7d409f70,0xfd01ff15,0xacffd88b,0x203fee02,
    0x01fd02fe,0x0203bf60,0x4fc813f6,0xdfffd730,0x7cc1fdc1,0xa8013ea5,
    0x6f77644f,0xa87ffd03,0xf806f883,0x003fc00f,0x6c00bfe6,0x3fc00eff,
    0x7ffc17ec,0xf980efff,0xb03fcc2f,0x5417ea7f,0xfc8e4c5f,0x04fb82ff,
    0x03fa09f7,0x003ffd10,0x3ff02fd4,0x49fd5100,0x25f983fb,0x3e6007f8,
    0x3ffffe26,0xfd01fb07,0xf806f881,0x003fc00f,0x7dc007f4,0x3fc05fef,
    0x57fc17e4,0xf981ffda,0x417fc42f,0x0ff31ff8,0x1f8817f2,0x20df70d7,
    0x01fd03fd,0x00077f4c,0x37cc13ee,0x37c407dc,0x89f50bf5,0xff0202fe,
    0x0ff4cc43,0x81fd0188,0x0ff806f8,0x74003fc0,0x4ffd400f,0x1fe04fe8,
    0x91fe0bf2,0x203101ff,0xfd50bffb,0x260bff8b,0x89aa05ff,0x05ffdc0f,
    0x3fa03ff5,0x01dff500,0x7fd10326,0x3f613f20,0x893f220d,0x0bfe62ff,
    0x6c417df9,0x82b7f62f,0xe8001fe8,0x4027e42f,0x03fc00ff,0xf3007f40,
    0x817fcc7f,0xf82fc87f,0x8005fd87,0xeffefffd,0x7f7ffd40,0x881fffff,
    0xffe8b92f,0x4fffefff,0x3ee03fa0,0x3fee185f,0x206fffee,0xfffd81ff,
    0x5c0fffee,0x05ffefff,0xffddfff9,0x7fffc41f,0x901fffee,0xdfffd01b,
    0xff701dff,0x29ffffff,0xfffffff9,0xffffa80e,0x7ffdc3ff,0x997fff66,
    0xffd1ffff,0x3fffee9f,0x00bffa25,0x09ffff70,0x6fffff4c,0xff701eff,
    0xeeffe83d,0x7443ffff,0x1fffffff,0xfffffffd,0x7ffedc3f,0x417600df,
    0xeffffcea,0x9ffff502,0xffffdb80,0xfffc880d,0xff102dff,0xffff7105,
    0x3ffee01b,0xd34fffff,0x1dffffff,0xffffff50,0x26fffb87,0x3a65fffc,
    0xfffd1eff,0x17fffea7,0x20005ff3,0x06620019,0x33000400,0x3fffa203,
    0xffd1efff,0x05ffffff,0x10000066,0x06600133,0x88002600,0x00880099,
    0x00000188,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00bbb620,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x01bb6000,0xdddd7000,0x22376a01,0xfb802fff,0x43efffff,0xfffffff8,
    0x89bffa2f,0x7f45fffe,0x1effa84f,0x7fffffd1,0x57fffee0,0x7f43fffc,
    0x3fff26ff,0xffffd11e,0x7ff43fff,0x1effe8af,0x5c9fffd3,0x3f62ffff,
    0xffffffff,0xffffff56,0x7fdcbfff,0x881defff,0xffffffff,0xffff72ff,
    0xa8015bff,0xfff307ff,0xffd805ff,0x89fb00ff,0xffb802fd,0x24ffffff,
    0xfffffff8,0x4ffffa2f,0x745fffe8,0x7fec0fff,0xffffd11f,0x3ffee07f,
    0x47fffb5f,0x326fffe8,0xfd11ffff,0x43ffffff,0xfe8afffe,0xffff31ff,
    0x17fffdc9,0xfffffffb,0x3ffeadff,0x25ffffff,0xfffffffb,0x7fffc43f,
    0x72ffffff,0xffffffff,0x07fff80d,0x0dfffff3,0x201ff310,0x017e40ff,
    0x3ea26f88,0xfc8ff10f,0x20fffb86,0xfff885f9,0x40bffe63,0x4ff001fd,
    0xf980efe9,0xf80bf206,0x321fe00f,0x882fe82f,0x85fa80ff,0x4c3fc6f8,
    0x9327dc5f,0xf37c43ff,0x1fe17ecf,0x3f205fb3,0x7fc407fe,0x1ff001ff,
    0x5f909f30,0xf10ffffa,0x37c7f70d,0xff701ff7,0x442fccbf,0x3ff67fff,
    0x003fb02f,0x06ffcdfe,0x5ff17f88,0x0ff807f6,0x0bf21fe0,0x13f217ea,
    0x3e152fd4,0xf1353fc6,0xfc84fb89,0x27f9be25,0x543fc2fd,0xf9ff885f,
    0x7e6fdc07,0x701ff004,0xf15f901f,0x6f887fff,0x4cf24fd8,0xf9f702ff,
    0x2217e65f,0xff8afeef,0x03fb02fd,0x13febfe0,0x3fee3fe0,0x7fc01fd4,
    0x3f21fe00,0xff83ff02,0x3eebf501,0xf17f8132,0x09f7026b,0x3e5f8ff1,
    0x4ff03ee7,0xfd83fea8,0xafe80ff4,0x1ff007f8,0x2ff207b0,0xff102ffe,
    0x03ff9533,0x7dc09fd1,0x5f98ffab,0xcefaef88,0xfb02fccf,0x3fffe003,
    0xd9fe801f,0xf80ff7ff,0x3fffe00f,0xf902ffff,0xf502fd49,0x7c07ffff,
    0x2e06ffff,0x041fd04f,0xfff011fe,0xf50dffff,0xf981fe1f,0x3e00bf67,
    0x3f20080f,0x3e200eff,0x03ffffff,0x3fb80bfb,0x10bf3bfb,0x27fffadf,
    0x03fb02fc,0xffdfff01,0xffbfd803,0x7c07fafe,0x3fffe00f,0xf102ffff,
    0xf5017f4f,0x7c07ffff,0x2e06ffff,0x403fd04f,0xffff807f,0x7f43ffff,
    0xdfc81fe3,0xf806fcaa,0x7fe4000f,0x3fe200ef,0xf901ceee,0x3ee16c1f,
    0x0bf9ff13,0x57feedf1,0x83fb02fc,0xb8ffc3f9,0x3bf200ff,0x06fefbdf,
    0x0ff007fc,0x5fec05f9,0xafd407f9,0x45fe02fb,0x4fb8515f,0x07f80ff0,
    0x7fdcc7f8,0xfdddff51,0xfff881bf,0x401fffff,0x903100ff,0x201dfdbf,
    0xff5006f8,0x3ee2fcc3,0x217ffee3,0x25ff16f8,0x83fb02fc,0x363fc4fa,
    0x3ffee04f,0x405fff8a,0x21fe00ff,0x3bea02fc,0x2fd403fc,0x4267f805,
    0x213ee0fd,0x03fc06fa,0x73fc83fc,0xffffffff,0xeeeffb81,0x7fc04fee,
    0x642ff880,0x81ffd8af,0xff8806f8,0x3ee2fcc3,0x442fff43,0x2fc8626f,
    0x4fa83fb0,0x03fe23fc,0xffd3ffd4,0x200ff809,0x402fc87f,0x5400fffe,
    0x41fe005f,0x893ee1fe,0x3fc02ffb,0x7ecc3fc0,0xf3333313,0x105fd01f,
    0x80ff80ff,0xffd12ff8,0x4bfffe65,0x0efffffb,0xffffffb8,0x3ffee5ff,
    0x88bff32f,0x3ee5fffe,0xffd12fff,0x9fffffff,0xc97fffee,0x7fcc0eff,
    0xd10ffee5,0x3fffffff,0x22bfffe6,0x2e03fffe,0x7fec05ff,0xff506fff,
    0xffffffff,0x3ffffee3,0xff504fff,0xfb87ffff,0xffffffff,0xdfffb00f,
    0x97fffe61,0xf72ffffb,0x9fffffff,0x5ffd1044,0x5cbfffa2,0x80efffff,
    0xfffffffb,0x3fffee5f,0xfd117f22,0x7ffdc9ff,0xffffd12f,0x2e9fffff,
    0x3e25ffff,0x17fc40ef,0xfe885ff1,0x31efffff,0xfd15ffff,0x7fc407ff,
    0x7fffe401,0xffff505f,0x23ffffff,0xdefffffa,0x3fffea02,0x7ffdc3ff,
    0x00deffff,0x4c3bfff6,0x3ee4fffe,0xfff72fff,0x009fffff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x000d4013,0x400014c0,0x00262029,0x4c400130,0x22000000,
    0x00662000,0x00110000,0x88000000,0x0304c001,0x09700000,0xddc88040,
    0x1ddddddd,0x10ffffa6,0x40003bff,0x3220007e,0x7ffe41ff,0x3f6203ef,
    0xb880cfff,0x50eefffd,0x7ffd4fff,0x9dffd702,0x3fffee01,0x7fffc4de,
    0xfd32ffff,0x1bffd39f,0xfe8f7ff4,0xdfff90ef,0x43bfffa3,0xfffcffe8,
    0x77ff440c,0x83fffcff,0x3a21fffd,0x01fa06ff,0xfffb836c,0x4fffffff,
    0x20bffbfa,0x000cfffb,0xb8000ff8,0xfff84fff,0xf882ffee,0x86ffeeff,
    0xfffeeffc,0x7dcfff51,0xfffc82ff,0x7e40efff,0x47fffeff,0xffffffff,
    0xffffff31,0x7ff47fff,0x21fffd0f,0xfd0ffffd,0x3fa21dff,0x45ffefff,
    0xffefffe8,0x7ec0ffef,0x3ffe22ff,0x88ff84c6,0x209ff701,0xaaaaaaa9,
    0x0457ea1a,0x07fff910,0x2000ff80,0x100dfffa,0xfe86f981,0xf13fa20e,
    0x207ec43f,0x5c2fc87f,0x97faa2ef,0x3ee0bff9,0x7ff537c7,0x547fff50,
    0x7d5ffe40,0x40ff885f,0x1bff02fe,0x97fc07f4,0xd05f94fe,0x3fc7fe3f,
    0x37ffbfe6,0x7ffd42ff,0xfa80003f,0x7fec4006,0x01ff002f,0x03dffd50,
    0xffdddb70,0xcccdff88,0x7fe47fdc,0x7f808acd,0x17f42fc8,0x09f93fc4,
    0x3ea55176,0x03ff503f,0x13fffea0,0x1bea4fc8,0x82fc87f8,0x7e47fa7f,
    0xffabfc83,0x7e445f9c,0x20dfffff,0x2ffabff9,0x3bbbbba6,0x3fe2eeee,
    0xffe98003,0x7f77642e,0x260deeef,0xd002effd,0x8fffffff,0xfffffff9,
    0x3f620fff,0x7f83ffff,0x03fc2fc8,0x007fa3fb,0xa80ffea0,0x7fec004f,
    0x43fe200e,0x21fe02fe,0x3a7f82fc,0xf507f91f,0x9f9fffbb,0x407fff40,
    0x43fee4fe,0xfffffffa,0xfff74fff,0x2a007d53,0xff10dfff,0xffffffff,
    0x01fffe43,0xa99befb8,0x667fc47f,0x20cccccc,0x0bff2a62,0xe85f90ff,
    0xb0ff881f,0xffa8007f,0x0027d403,0x01dfdffb,0x037d67e4,0x20bf21fe,
    0x7e47fa7f,0xeffff883,0xff502fff,0x85f989fd,0x222222fc,0xf5088888,
    0x0ffbdfbf,0x81effe98,0x99ff9998,0xeffd9809,0x9107fc02,0x81bfd0ff,
    0x213ea198,0x507fc4fc,0x1efc85fd,0xefb9bf66,0x3ea1da81,0xf50be63f,
    0x3dfd1009,0x2203ffd1,0x7c02feff,0x7f82fc87,0x81fe47fa,0xfffacffe,
    0xff35ff00,0x00060081,0xfffd4fc8,0x3fff6203,0x003fe002,0x80f7ff4c,
    0xfffedffc,0x3ffe62ff,0x70ffffee,0xfffddfff,0xffeffd83,0x3f622fff,
    0x41effeef,0xffedfffd,0xfffff31f,0x3ff29fff,0x544fffff,0xfe89ffff,
    0xdffb03ff,0x8ffffcc0,0xfd12fffc,0x327ffadf,0x1ffc82ff,0x515c0dff,
    0x40000007,0x0bff33fc,0x007fff91,0xa8001ff0,0x6c40dfff,0xfffdffff,
    0x7fffecc2,0x3fbe63ef,0xe882cfff,0x2ffeefff,0x0dffffc8,0xfffffc88,
    0x3fffe62e,0xff94ffff,0xa89fffff,0xffd1efff,0x0ffe607f,0x91effe98,
    0x3fa25fff,0xf93dfd6f,0x64df505f,0x0000004f,0x3bfe2000,0x7fc6fffe,
    0xfd0000cf,0x3fee0001,0x0013301f,0x4400ccc4,0x01310019,0x31001880,
    0x00000335,0x00000000,0x00000000,0x00000000,0xffd70000,0x1dd8bfdf,
    0x002e4000,0x0003b220,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000988,0x20000000,0x44266198,0x0f6e20aa,
    0x66440d41,0x51cccccc,0xfffffffd,0x0009ffff,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x4c000000,0x225ff0ff,0xfffd11ff,
    0x17dd7e2b,0x3fffffe2,0xffff91ff,0xffffffff,0x0000000d,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xfd3fc400,0xdfc87fc3,
    0x24ffeffa,0x444443fb,0x88880888,0x08888888,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x83f66f80,0xfd89267e,
    0x0004984f,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x97a00000,0x4c036c7c,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x2dc9b000,0x0000016e,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x10000000,0x000c4081,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_bold_23_usascii_x[95]={ 0,4,2,1,1,1,2,4,5,2,1,0,4,1,
4,1,1,1,1,1,1,1,2,1,1,2,4,4,-1,0,0,2,1,-1,0,0,0,0,0,0,0,1,1,0,
0,-1,-1,0,1,0,0,1,0,0,-1,-1,0,0,1,5,1,2,1,-1,4,0,-1,1,0,0,1,0,0,1,
1,0,1,-1,0,0,-1,0,1,1,1,0,0,-1,0,0,1,3,5,3,1, };
static signed short stb__courier_bold_23_usascii_y[95]={ 16,2,3,2,1,3,4,3,2,2,3,4,13,9,
13,1,2,2,2,2,3,3,2,3,2,2,7,7,4,7,4,3,2,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,2,20,2,6,3,6,3,6,3,6,3,3,
3,3,3,6,6,6,6,6,6,6,3,6,6,6,6,6,6,3,3,3,8, };
static unsigned short stb__courier_bold_23_usascii_w[95]={ 0,4,8,10,10,10,10,4,5,5,10,12,5,10,
4,10,10,10,10,10,10,10,9,10,10,10,4,5,13,12,13,9,10,14,12,12,12,12,12,13,12,10,12,13,
12,14,14,12,11,12,13,10,12,12,14,14,13,12,10,5,10,6,10,15,5,12,13,11,13,12,11,13,12,10,
9,12,10,14,12,12,13,13,11,10,11,12,13,14,12,12,10,6,3,6,10, };
static unsigned short stb__courier_bold_23_usascii_h[95]={ 0,15,7,16,18,14,13,7,18,18,9,12,7,3,
4,18,15,14,14,15,13,14,15,14,15,15,10,12,12,7,12,14,16,13,13,14,13,13,13,14,13,13,14,13,
13,13,13,14,13,17,13,14,13,14,13,13,13,13,13,17,18,17,8,3,4,11,14,11,14,11,13,15,13,13,
18,13,13,10,10,11,15,15,10,11,14,11,10,10,10,15,10,17,17,17,5, };
static unsigned short stb__courier_bold_23_usascii_s[95]={ 254,122,53,100,24,28,1,62,18,12,221,
26,250,84,250,35,200,53,64,211,213,75,190,86,154,165,248,248,39,243,12,
148,111,224,200,121,174,161,148,134,120,109,158,80,67,52,37,1,14,80,234,
97,187,108,133,94,207,194,26,74,1,93,232,95,78,53,39,116,14,66,182,
222,221,171,46,1,239,191,178,103,176,127,139,79,236,90,164,206,151,141,128,
63,70,56,67, };
static unsigned short stb__courier_bold_23_usascii_t[95]={ 1,1,61,1,1,20,49,61,1,1,49,
49,35,61,43,1,1,20,20,1,35,20,1,20,1,1,20,1,49,49,49,
20,1,35,35,20,35,35,35,20,35,35,20,35,35,35,35,20,35,1,20,
20,35,20,35,35,20,20,35,1,1,1,49,61,61,49,20,49,20,49,20,
1,20,20,1,35,35,49,49,49,1,1,49,49,1,49,49,49,49,1,49,
1,1,1,61, };
static unsigned short stb__courier_bold_23_usascii_a[95]={ 195,195,195,195,195,195,195,195,
195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,
195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,
195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,
195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,
195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,
195,195,195,195,195,195,195, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_23_usascii_BITMAP_HEIGHT or STB_FONT_courier_bold_23_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_23_usascii(stb_fontchar font[STB_FONT_courier_bold_23_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_23_usascii_BITMAP_HEIGHT][STB_FONT_courier_bold_23_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_23_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_23_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_23_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_23_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_23_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_23_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_23_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_23_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_23_usascii_s[i] + stb__courier_bold_23_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_23_usascii_t[i] + stb__courier_bold_23_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_23_usascii_x[i];
            font[i].y0 = stb__courier_bold_23_usascii_y[i];
            font[i].x1 = stb__courier_bold_23_usascii_x[i] + stb__courier_bold_23_usascii_w[i];
            font[i].y1 = stb__courier_bold_23_usascii_y[i] + stb__courier_bold_23_usascii_h[i];
            font[i].advance_int = (stb__courier_bold_23_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_23_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_23_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_23_usascii_s[i] + stb__courier_bold_23_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_23_usascii_t[i] + stb__courier_bold_23_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_23_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_23_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_23_usascii_x[i] + stb__courier_bold_23_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_23_usascii_y[i] + stb__courier_bold_23_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_23_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_23_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_23_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_23_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_23_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_23_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_23_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_23_usascii_LINE_SPACING
#endif

