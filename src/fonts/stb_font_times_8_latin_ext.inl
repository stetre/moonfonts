// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_8_latin_ext_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_8_latin_ext'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_8_latin_ext_BITMAP_WIDTH         256
#define STB_FONT_times_8_latin_ext_BITMAP_HEIGHT         60
#define STB_FONT_times_8_latin_ext_BITMAP_HEIGHT_POW2    64

#define STB_FONT_times_8_latin_ext_FIRST_CHAR            32
#define STB_FONT_times_8_latin_ext_NUM_CHARS            560

#define STB_FONT_times_8_latin_ext_LINE_SPACING           5

static unsigned int stb__times_8_latin_ext_pixels[]={
    0x80130300,0x80600808,0x00130000,0xa880c010,0x20108000,0x02101081,
    0x40101100,0x4c000008,0x00000281,0x00c00001,0x00c05000,0x06050110,
    0x30c4c466,0x881a80a0,0x880b8809,0x882a8809,0x11033009,0x5c06e201,
    0x402e0300,0x0300b80b,0x31060551,0x402e0b88,0x220cc419,0x2655041b,
    0x41860540,0x03701302,0x01310533,0x540c1806,0x86a661a9,0x5411111c,
    0x89d40a80,0x751c4ea3,0x4713a8e2,0x89d4713a,0x751c4ea3,0x8e2550e2,
    0x29a8713a,0x44aa14d4,0x26a04dc3,0x2a1c4ea2,0x9a8111a9,0x9a8222a2,
    0x26a14d42,0x0e298662,0xaa864831,0xa86a622a,0x514d42aa,0x9d466917,
    0x13a8cc38,0x235186a7,0x5554324a,0x261202a2,0x98a298a2,0x98a298a2,
    0x98a298a2,0x10a298a2,0x8a29863b,0x44a67129,0x2e0c7623,0x4e2530da,
    0x461a8a29,0xa9c4a62a,0x99c4a61a,0x9c4a6712,0x454914c3,0x45518a0c,
    0x22a846e0,0x489c4a60,0x30a2986b,0x01928a61,0x30c96319,0x2224a535,
    0x4c514c1d,0x98a298a2,0x98a298a2,0x98a298a2,0x31b110a2,0xb064514c,
    0x36225832,0xc8d45c18,0x64514d60,0x58322980,0x2b064195,0x2b06560c,
    0x5cc914c4,0x21918442,0x21926c39,0x32583239,0x28a619c8,0x1b94530c,
    0x52470ba8,0x51266537,0x98a39891,0x98a398a3,0x98a398a3,0x98a398a3,
    0x5b1110a3,0x895451cc,0x88922554,0x5155c2d8,0x451cd225,0x4aa3a81b,
    0x2a1b5748,0xa44aa912,0xa82e912a,0x1c2ba8e3,0x212446e3,0xa922373a,
    0x6c654912,0x8cc28e61,0x4cd44a39,0x2e153910,0x89590983,0x54e40c9a,
    0x32054e40,0x054e40a9,0x53902a72,0x640a9c81,0x299540a9,0x26a054e4,
    0xa82a6a0a,0xa80b8532,0x82a720a9,0x833099a8,0x50260a9a,0x054d4153,
    0x510c1535,0x2386250c,0xaa8ea2a1,0x50ea2a1a,0x90938153,0x32198153,
    0x200000a9,0x4a85c019,0x00000000,0x00000000,0x20000000,0x4000001a,
    0x00001001,0x30211040,0x00020837,0x00000000,0x00000001,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00019800,0x20130080,0x82808809,0x2a882808,0xa80aa04c,0x00020aca,
    0x44ea3551,0x30660003,0x2ae60010,0x08006001,0x01803330,0x4c2a9cc3,
    0x2000022b,0x2a0d41c0,0x82b88712,0x44318819,0x00b80999,0x0cc0cc03,
    0x88550262,0x2614c408,0x0dc22221,0x220e60e2,0x5308dc29,0x11206a0c,
    0x20530307,0x4142ce24,0x87303808,0x44ea7129,0x70ae660b,0x4c33502a,
    0x44064063,0x10aa0cc2,0x713a863b,0x4221c4ea,0x50666311,0x38954353,
    0x53115554,0x988d4d43,0x98e2951a,0x9a8a2628,0x43881509,0x2950acaa,
    0x45326438,0x09b86221,0x49553154,0x11c41ab9,0x2554c399,0x08b83573,
    0x20c92aa6,0x48e0c535,0x44a60a9c,0x8280c933,0x98a26398,0x0c6c4428,
    0x0a298c53,0x19294255,0x362186a1,0x5c115431,0x37186a11,0x45c18c82,
    0x4390e2e3,0x1c41c40a,0x9d420c64,0x238b8629,0x4370380a,0x12454b38,
    0x44370377,0x40c9b8b3,0x9a446e1b,0x7122a862,0x4560c82a,0x83910223,
    0x171c5c1b,0x22d88887,0x8514c629,0x54d45429,0x6c440321,0x21cc3218,
    0x26c0324d,0x47150322,0x550d438a,0x88388498,0x70ccd40c,0x51c54153,
    0x88730701,0x951d21cc,0x64439872,0x26199c1c,0x730a9b83,0x4e24710c,
    0x8a446a0a,0x312260c3,0x151c545b,0x4c531987,0x9851cc62,0x2a6e2632,
    0x22203708,0x2446e2d8,0x840dcea1,0x65cc243a,0x0a219730,0x38818831,
    0x2a066090,0x2a865cc0,0xbb885818,0x07032ea1,0xa837710b,0x87702c2a,
    0x4cd40a9c,0x4d40a9c1,0x5418710a,0x2e604449,0x5019730c,0x9c82a6e0,
    0x06184c0a,0x504cd443,0x75150a65,0x9a88d554,0x44355509,0x0150000e,
    0x10930101,0x00c0101d,0x39bc8180,0x0400e52a,0x94a8e6f2,0x039bc803,
    0x29800011,0x40930031,0x0004950b,0x30000180,0x00266043,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x0a603030,0x00216d40,0x08303980,0x27300110,
    0x0031540b,0x3060000c,0x9a800889,0x0081801a,0x20260220,0x15554002,
    0x1a83302a,0x0001a818,0x26e60004,0x5c111542,0x5c04c419,0x3be2ac80,
    0x2a0c1c41,0x8220e209,0x75103009,0x044055c4,0x00805543,0x44198512,
    0x351cc183,0x3030370c,0x80c05417,0x4c044419,0x08811543,0x80982222,
    0x0aa61881,0x30730371,0x44138853,0x49a86088,0x443a8828,0x9876e08b,
    0x3730c3ac,0x98d41c45,0x54714a83,0x540b6238,0xb824c931,0x986cc29c,
    0x388a6e64,0x2498a6e6,0x0507300c,0x8280a893,0x23a9cc0b,0x443229b9,
    0x4d4322a3,0x26191509,0x4322a29b,0xb98280ab,0x9c882829,0x24c266a2,
    0x983910e2,0x4c122a29,0x08a4ce21,0x307104e2,0x0c640e23,0x65c4326a,
    0x44711981,0x92829303,0x882711c4,0x47104e23,0x20c8a81b,0x251c41c8,
    0x22a0e443,0x7114ce21,0x4c711b82,0x5530e42a,0x0aa609c4,0x441c8839,
    0x441c8813,0x21c43903,0x5c244c38,0x21981d22,0x3220d638,0x98eb6629,
    0x03220711,0x6d2a3315,0x22388cc3,0x229d8a83,0x3911c474,0x539124c5,
    0x133511c4,0x89130d52,0x130e6638,0x32249a89,0x0a7222a9,0x1dd45315,
    0x223ba86a,0x10eea29c,0x22244c19,0x2244c29c,0x10d439c9,0x24d43887,
    0x0197514c,0x3489c433,0x330a0388,0xab8480e2,0x1098140a,0x244c1c47,
    0x23886dd4,0x0e218838,0x5530e0e2,0x71c449a8,0x5449a895,0x114ce238,
    0x44a05407,0x23128511,0x2a312838,0x2224d42a,0x26093503,0x98710a20,
    0x222542e4,0xca822000,0x739300a9,0x5b32a810,0x2000e887,0x99261981,
    0x1cecc5c4,0x39c99260,0x4c73930c,0x50b80084,0x42e024c9,0x54326e4a,
    0x1ce4c774,0x150d440c,0x27261a88,0xb8106a23,0x1ce4c950,0x50c12a17,
    0x00004981,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x05000000,0x4141a880,0x39330e23,0x8a098085,
    0x10888e3a,0x03005415,0x750d4435,0x57306a61,0x0ae21a98,0x214c4175,
    0x00e0541a,0x15c45310,0x8381306a,0x4550d42a,0x1130aa21,0x4c42e6ea,
    0x702a0dc2,0x71042110,0x41430a66,0x80b881c8,0x31098081,0x2a0a46a1,
    0x08862a49,0x41370c56,0x50e4260a,0x4c18150e,0x40a02624,0x3730c209,
    0x10c21845,0x02e18431,0x204c0c35,0x204c0c09,0x226e0c09,0x2ee60981,
    0x088e2910,0x82606044,0x38926e52,0x53731026,0x50504898,0x1524d493,
    0xd86462a3,0x43220e2a,0x2a0c5c52,0x729462a0,0x9351ccc1,0x728e2394,
    0x24d41c88,0x209c4717,0xb8e2e38b,0xab8e2e38,0x50c94a61,0x250c9432,
    0xc943250c,0x44cc3250,0x98325089,0x93548e21,0x493524d4,0x7150e49a,
    0x7130e528,0x91093502,0xc8838383,0x246e1910,0x2535164c,0x0dc1c883,
    0x4370e191,0x2660e4ab,0x43998e23,0x4541c489,0x8a8a7223,0x38a8e2a3,
    0x24aa8e2a,0xaa46a92a,0x1aa46a91,0x91aa46a9,0x2751306a,0x42e6a354,
    0x41c1d238,0x71c98383,0x87330873,0x42e29c8a,0x26244c4a,0x9a8b262c,
    0x74dc5352,0x98e0cc39,0x5144241c,0x14c72653,0x55c5931c,0x44ab8e24,
    0x3164c49a,0x260e2197,0x219730cb,0x19730cb9,0x531a8e2a,0x553154c5,
    0x4553154c,0x30aa62a9,0x3154cea2,0x30aaca86,0x93164c59,0x20a164c5,
    0x224ab942,0x204c038b,0x0000049a,0x00020c00,0x44000044,0x2024c000,
    0x3000950b,0x00000739,0x02a864dc,0x00000000,0x00000008,0x02a0c000,
    0x07393300,0x012a170c,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x542a88d4,0x30611541,
    0x80d44353,0x219b800b,0x2a0d40a8,0x20660c21,0x5c3aa4c3,0x08805330,
    0xa8099980,0x0066a000,0x9861c4aa,0x088c4112,0x22204462,0x55550e40,
    0x310d4188,0x215c4105,0x1706e24b,0x2aa1c0a8,0x130a8354,0x8630c443,
    0x2546638b,0x4c441337,0x1089cc08,0x882a0547,0x13126e18,0x2710c4c1,
    0x49284429,0x5c322a3a,0x40d44cc0,0x26351884,0x2202e712,0x4e21831d,
    0x06303181,0x2a4832ae,0x4e38a822,0xa99854e2,0x13071140,0x060604c4,
    0x52866133,0x238b8e2e,0xc8e2a38b,0x1c654b18,0x21986935,0x8e55999b,
    0xa8e2e192,0x94322a38,0x8a6712ad,0x4488c452,0x8862a2a9,0x88391043,
    0x55832330,0x18d88811,0x8823130c,0x26621899,0x90d45408,0x1d238864,
    0x85cdc6a9,0x30ea0a99,0x51ca3949,0x30cc728e,0x47150e35,0x98e2a38a,
    0x4e1550cb,0xbab83c8b,0x910b8660,0x23548e66,0x4326e38a,0x89331a9c,
    0x041c5338,0x4d47750e,0x30222a64,0x2331a891,0x066a911a,0x0cc5b111,
    0x14621c4c,0x0aaa1c4c,0x2a388dc9,0x91054e4b,0x20e15e4c,0x3998e663,
    0x23998e66,0x1c986619,0x32e61973,0x22819730,0x5770a9b8,0x4c49c17b,
    0x5c2e6e21,0xb98aa64a,0x2aa8260c,0x64c2f26e,0x287260ba,0x8a8c4a1c,
    0x2a04ccc3,0x2198cc49,0x81950a9a,0x23a45319,0xa88c1731,0x15064c60,
    0x14c543b8,0x4c45311c,0x986660a0,0xab92ae1a,0x4ab92ae4,0x0002a8aa,
    0x00004400,0x00002b80,0x00000080,0x1a889300,0x2e00326e,0x2a954950,
    0x8006cdc0,0x04400098,0x00001500,0x00180015,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x291550cc,0x22199319,0x204ccc29,0xa8d4d429,
    0xa8844713,0x2011111a,0x0d400039,0x44090e60,0x4198e098,0x5122e62a,
    0x2208c445,0xc9861088,0x81504c3a,0x0ea2ea2b,0x2e211303,0x54539702,
    0x44332aa2,0x30c4c152,0x102a0207,0x2220c141,0x086b4828,0x55314d45,
    0x30d43835,0x5c2218a6,0x5c266a11,0x0a260e21,0x310cc411,0x89856445,
    0x8a564a08,0x04413108,0x54110671,0x70cd4349,0x5499c471,0x11062231,
    0x251d4e54,0x4219150c,0x08829301,0x844221c4,0x02e255b2,0x50cc4935,
    0x8e50cc4a,0xca449b88,0x116c2819,0x06cc2373,0x00c53019,0x82a1c899,
    0x856409b8,0x49371aa9,0x922e248b,0x705d249c,0x1a826e13,0x2e0d40e2,
    0x150e40ba,0x9158e547,0x435126e1,0x5522a9c8,0x26e35391,0x229d8a84,
    0xa872a21a,0x31266351,0x49110709,0x73324443,0x93a86a70,0x922a1883,
    0x21c0b9a9,0x9862981b,0x21a8ea11,0x1460e20a,0x5438a822,0x9c379109,
    0x54b6eaa3,0x443302a0,0x09383303,0x8865cc17,0x54a6a913,0x2710cc38,
    0xaa8aa629,0x2260e2a2,0x21c41984,0x326e3319,0x5930750b,0x890e4c48,
    0x2a2664ab,0x98509381,0x50ccd429,0x266a2179,0x1882a6e0,0x50a23335,
    0x201d6cc5,0x19371aa9,0x2c6c2540,0xa8370dc0,0x550eb662,0x9ca80000,
    0x4193700a,0x01d52a2a,0x17064dc0,0x215473b3,0x02a95449,0x2e01d654,
    0x00aee02b,0x00000000,0x54000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x13370d40,
    0x8cc23180,0xa92aa61a,0x4c6cc714,0x888eb262,0x65545508,0x4c35730a,
    0x06b2a2ab,0x54759305,0x98399263,0x24c70173,0x2170ea73,0x537329b9,
    0x8002b880,0x22044430,0x0cc42220,0x26221111,0x80222218,0x8a613108,
    0x44a60a29,0x44022088,0xaa86e21a,0x2e59150a,0x370311b8,0x2aa818c8,
    0x220499c4,0x2ce21c40,0x45c43271,0x27107224,0x92a19149,0x80ab8838,
    0x3388e239,0x88710b85,0x24841013,0xb8cc4099,0x99872249,0x22213719,
    0xcab86aa4,0x35115449,0x061898d4,0x27706227,0x53310998,0x36648894,
    0x3548c30a,0x4c1a8e2a,0x1b00c883,0x540b1ca8,0x33221c41,0xc896b221,
    0x7112261a,0x498b98ac,0x20b620e2,0xc88e2388,0xc88542a9,0xa98a7223,
    0xa94c141a,0x0721c541,0x51205411,0x1c545419,0x8f221331,0x262a8219,
    0x26110230,0x48208199,0xa9a84e4c,0x664c5530,0x12058330,0x44e224cc,
    0x87106604,0x5ce21bb8,0x89350711,0x96429138,0x32e20e24,0x3886ddc1,
    0x42a14ce2,0x8101c438,0x2660cc42,0x22a19370,0xbb86e00d,0x4dc366e2,
    0x2a200c9b,0x00000aa0,0x42bb8000,0x0004221c,0x439bc8aa,0x3c94c0e8,
    0x4442a72a,0x44985508,0x272a394a,0x50b8950c,0xa854e549,0x36659999,
    0x41ed2a3a,0x774a9263,0xc98951b8,0x332e0839,0x00008010,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x0a8c4530,0x3099c535,0x21350621,
    0x546aaa19,0x0004ccc3,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xa844615c,0x2a220018,0x00000001,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00062080,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_8_latin_ext_x[560]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,
-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,
0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,
0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,
1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,0,0,-1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1, };
static signed short stb__times_8_latin_ext_y[560]={ 6,1,1,1,0,1,1,1,0,0,0,1,5,4,
5,0,1,1,1,1,1,1,1,1,1,1,2,2,1,2,1,1,0,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,7,1,2,0,2,0,2,0,2,0,0,
0,0,0,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,0,0,3,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,2,1,1,1,1,
0,1,1,1,1,2,2,4,1,0,1,1,1,1,1,2,1,3,5,1,1,2,1,1,1,2,-1,-1,-1,-1,
-1,0,1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,2,1,-1,-1,-1,-1,-1,1,0,1,1,
1,1,1,0,2,2,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,2,2,1,1,1,1,1,0,1,
0,1,-1,1,1,2,-1,1,-1,1,-1,1,-1,1,-1,0,1,0,0,1,-1,1,-1,1,1,2,-1,1,-1,1,
-1,1,-1,1,1,0,-1,-1,1,0,-1,1,0,1,-1,1,1,0,-1,2,1,0,-1,1,1,0,2,-1,-1,1,
0,1,0,1,0,1,0,-1,1,1,2,-1,1,1,1,2,0,1,-1,1,-1,1,1,2,-1,1,1,2,-1,1,
-1,1,-1,1,1,2,-1,1,1,1,-1,0,1,1,-1,1,0,1,-1,1,-1,0,-1,1,1,2,-1,1,-1,1,
-1,-1,1,-1,1,-1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,-1,1,-1,
1,-1,1,-1,0,-1,0,-1,0,-1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,-2,-1,-1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1, };
static unsigned short stb__times_8_latin_ext_w[560]={ 0,2,3,4,4,6,6,1,3,3,4,4,2,3,
2,3,4,3,4,4,4,4,4,4,4,4,2,2,4,4,4,3,7,6,5,5,5,5,4,6,6,3,3,6,
5,7,7,5,4,5,5,4,5,6,6,7,6,6,5,3,3,2,4,5,2,4,5,3,4,4,4,4,4,2,
3,4,2,6,4,4,5,4,3,3,3,4,4,6,4,4,4,3,1,3,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,2,4,4,4,4,
1,4,3,6,3,4,4,3,6,5,3,4,3,2,2,4,5,2,2,2,3,4,6,6,6,3,6,6,6,6,
6,6,8,5,5,5,5,5,3,3,3,3,5,7,5,5,5,5,5,4,5,6,6,6,6,6,4,4,4,4,
4,4,4,4,5,3,4,4,4,4,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,4,
6,4,6,4,6,4,5,3,5,3,5,3,5,3,5,5,5,4,5,4,5,4,5,4,5,4,5,4,6,4,
6,4,6,4,6,4,6,4,6,4,3,4,3,4,3,4,3,3,3,2,6,4,3,3,6,4,4,5,2,5,
2,5,3,5,3,5,2,7,4,7,4,7,4,5,5,4,5,4,5,4,5,4,7,5,5,3,5,3,5,3,
4,3,4,3,4,3,4,3,5,3,5,4,5,3,6,4,6,4,6,4,6,4,6,4,6,4,7,6,6,4,
6,5,4,5,4,5,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,4,3,3,5,
4,6,4,6,4,6,4,6,4,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,6,4,8,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4, };
static unsigned short stb__times_8_latin_ext_h[560]={ 0,6,3,6,7,6,6,3,8,8,4,5,3,1,
2,7,6,5,5,6,5,6,6,6,6,6,5,6,5,3,5,6,8,5,5,6,5,5,5,6,5,5,6,5,
5,5,6,6,5,7,5,6,5,6,6,6,5,5,5,7,7,7,3,1,2,5,7,5,7,5,6,6,6,6,
8,6,6,4,4,5,6,6,4,5,6,5,5,5,4,6,4,8,8,8,2,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,7,6,5,5,
8,7,2,6,3,5,3,1,6,1,3,5,3,3,2,6,7,2,3,3,3,5,6,6,6,6,7,7,7,7,
7,6,5,7,7,7,7,7,7,7,7,7,5,8,8,8,8,8,8,4,6,8,8,8,8,7,5,7,6,6,
6,6,6,7,5,6,6,6,6,6,5,5,5,5,7,5,6,6,6,6,6,4,5,6,6,6,6,7,8,7,
6,6,7,6,7,6,8,6,8,6,8,6,8,6,7,7,5,7,6,6,7,6,7,6,7,6,7,6,8,7,
8,7,8,7,7,8,7,7,5,6,7,5,6,5,7,5,7,8,7,4,6,8,8,7,7,8,4,7,7,7,
8,5,6,5,6,5,6,8,5,7,6,8,5,5,6,6,7,6,8,6,8,6,6,5,7,5,7,6,7,5,
8,6,8,6,7,6,8,6,7,7,7,7,5,6,8,6,7,6,8,6,8,7,8,6,7,6,8,6,7,7,
7,7,5,7,5,7,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,7,5,5,5,
5,5,5,5,5,5,5,5,5,5,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,6,7,5,8,
6,8,6,8,7,8,7,8,7,8,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,8,8,7,6,8,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5, };
static unsigned short stb__times_8_latin_ext_s[560]={ 59,245,11,205,214,193,59,254,183,190,214,
153,8,42,21,35,230,138,158,245,122,250,1,14,19,235,253,49,168,242,163,
125,14,88,77,36,95,147,142,218,131,127,214,115,109,101,175,164,83,178,71,
52,65,42,60,6,43,36,30,201,215,198,233,46,33,248,166,239,143,229,129,
134,139,158,8,170,161,202,173,177,208,225,188,156,62,145,140,133,178,57,192,
245,203,199,24,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,
56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,59,253,226,
31,11,6,12,12,29,144,238,87,247,42,24,36,222,77,226,230,15,240,23,
18,252,5,1,72,201,194,187,183,140,156,5,219,232,151,192,129,119,203,109,
39,250,83,1,87,50,90,105,131,171,177,224,209,53,238,249,76,62,60,92,
67,16,11,6,1,248,151,217,236,231,226,221,216,214,211,201,61,135,187,178,
173,168,163,158,183,182,145,140,135,130,193,125,245,107,102,14,93,7,83,144,
75,48,121,1,56,22,29,29,17,150,100,124,114,175,21,1,26,239,47,226,
88,36,209,217,198,205,188,181,194,168,163,170,150,147,165,98,117,125,128,115,
150,105,219,114,17,13,79,72,160,197,54,51,45,187,122,21,66,25,223,155,
28,160,241,98,117,82,97,210,240,205,200,154,188,165,183,39,103,160,109,148,
67,137,113,212,31,43,35,104,52,54,71,85,81,91,121,205,79,137,119,249,
33,48,38,34,116,1,43,109,48,230,66,59,76,97,131,234,154,243,172,1,
73,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,77,56,56,126,
56,56,56,56,56,56,56,56,56,56,56,56,56,191,16,56,56,56,56,56,
56,56,56,56,56,56,56,56,184,21,56,56,56,56,56,56,56,56,56,56,
56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,219,83,
211,26,111,88,98,93,83,66,69,71,55,236,41,231,56,56,56,56,56,56,
56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,
56,56,56,27,22,91,108,7,103,56,56,56,56,56,56,56,56,56,56,56,
56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,
56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,
56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,
56,56,56,56,56,56,56,56,56, };
static unsigned short stb__times_8_latin_ext_t[560]={ 18,27,55,27,19,27,34,19,1,1,49,
49,55,55,55,19,34,49,49,34,49,34,42,42,42,34,42,42,49,49,49,
34,10,49,49,42,49,49,49,34,49,49,34,49,49,49,34,34,49,10,49,
42,49,42,27,42,49,49,49,10,10,10,49,55,55,42,10,42,10,42,34,
34,34,34,10,34,34,49,49,42,34,34,49,42,42,42,42,42,49,42,49,
1,1,1,55,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,
49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,18,27,10,
42,49,49,10,19,55,34,49,42,49,55,42,55,49,42,49,49,55,34,19,
55,49,55,55,42,34,34,34,34,19,19,19,19,19,34,42,19,19,19,19,
19,19,19,19,19,49,1,1,1,1,1,1,49,34,1,1,1,1,19,42,
19,35,35,35,35,27,19,42,27,27,27,27,27,42,42,42,49,19,42,27,
27,27,27,27,49,42,27,27,27,27,19,1,19,27,27,27,27,27,27,1,
27,10,34,1,27,10,34,19,19,42,19,27,27,19,27,27,27,19,27,19,
27,10,19,1,19,1,19,19,1,19,19,42,27,19,42,27,42,19,42,19,
1,19,49,34,1,1,19,19,1,49,19,19,19,1,42,34,42,34,42,27,
10,42,10,34,1,42,42,27,27,10,27,1,27,1,27,27,42,10,42,10,
27,10,42,1,27,10,27,10,27,10,27,10,10,10,10,42,27,1,27,10,
34,1,34,1,10,10,34,10,34,1,34,10,10,10,10,42,10,42,10,49,
34,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,34,49,49,10,
49,49,49,49,49,49,49,49,49,49,49,49,49,10,49,49,49,49,49,49,
49,49,49,49,49,49,49,49,10,49,49,49,49,49,49,49,49,49,49,49,
49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,10,34,
10,49,1,34,1,34,1,10,1,10,1,10,1,10,49,49,49,49,49,49,
49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,
49,49,49,1,1,19,34,1,34,49,49,49,49,49,49,49,49,49,49,49,
49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,
49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,
49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,
49,49,49,49,49,49,49,49,49, };
static unsigned short stb__times_8_latin_ext_a[560]={ 29,38,47,58,58,96,90,21,
38,38,58,65,29,38,29,32,58,58,58,58,58,58,58,58,
58,58,32,32,65,65,65,51,106,83,77,77,83,71,64,83,
83,38,45,83,71,103,83,83,64,83,77,64,71,83,83,109,
83,83,71,38,32,38,54,58,38,51,58,51,58,51,38,58,
58,32,32,58,32,90,58,58,58,58,38,45,32,58,58,83,
58,58,51,55,23,55,63,90,90,90,90,90,90,90,90,90,
90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,
90,90,90,90,90,90,90,90,29,38,58,58,58,58,23,58,
38,88,32,58,65,38,88,58,46,63,35,35,38,67,52,29,
38,35,36,58,87,87,87,51,83,83,83,83,83,83,103,77,
71,71,71,71,38,38,38,38,83,83,83,83,83,83,83,65,
83,83,83,83,83,83,64,58,51,51,51,51,51,51,77,51,
51,51,51,51,32,32,32,32,58,58,58,58,58,58,58,63,
58,58,58,58,58,58,58,58,83,51,83,51,83,51,77,51,
77,51,77,51,77,51,83,75,83,58,71,51,71,51,71,51,
71,51,71,51,83,58,83,58,83,58,83,58,83,58,83,58,
38,32,38,32,38,32,38,32,38,32,82,64,45,32,83,58,
58,71,32,71,32,71,47,71,40,71,32,83,58,83,58,83,
58,70,81,57,83,58,83,58,83,58,103,83,77,38,77,38,
77,38,64,45,64,45,64,45,64,45,71,32,71,49,71,32,
83,58,83,58,83,58,83,58,83,58,83,58,109,83,83,58,
83,71,51,71,51,71,51,32,90,90,90,90,90,90,90,90,
90,90,90,90,90,90,90,83,90,90,58,90,90,90,90,90,
90,90,90,90,90,90,90,90,83,61,90,90,90,90,90,90,
90,90,90,90,90,90,90,90,63,90,90,90,90,90,90,90,
90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,
90,90,90,90,90,83,51,38,32,83,58,83,58,83,58,83,
58,83,58,83,58,90,90,90,90,90,90,90,90,90,90,90,
90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,
90,90,83,51,103,77,83,58,90,90,90,90,90,90,90,90,
90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,
90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,
90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,
90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,
90,90,90,90,90,90,90,90, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_8_latin_ext_BITMAP_HEIGHT or STB_FONT_times_8_latin_ext_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_8_latin_ext(stb_fontchar font[STB_FONT_times_8_latin_ext_NUM_CHARS],
                unsigned char data[STB_FONT_times_8_latin_ext_BITMAP_HEIGHT][STB_FONT_times_8_latin_ext_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_8_latin_ext_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_8_latin_ext_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_8_latin_ext_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_8_latin_ext_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_8_latin_ext_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_8_latin_ext_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_8_latin_ext_s[i]) * recip_width;
            font[i].t0 = (stb__times_8_latin_ext_t[i]) * recip_height;
            font[i].s1 = (stb__times_8_latin_ext_s[i] + stb__times_8_latin_ext_w[i]) * recip_width;
            font[i].t1 = (stb__times_8_latin_ext_t[i] + stb__times_8_latin_ext_h[i]) * recip_height;
            font[i].x0 = stb__times_8_latin_ext_x[i];
            font[i].y0 = stb__times_8_latin_ext_y[i];
            font[i].x1 = stb__times_8_latin_ext_x[i] + stb__times_8_latin_ext_w[i];
            font[i].y1 = stb__times_8_latin_ext_y[i] + stb__times_8_latin_ext_h[i];
            font[i].advance_int = (stb__times_8_latin_ext_a[i]+8)>>4;
            font[i].s0f = (stb__times_8_latin_ext_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_8_latin_ext_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_8_latin_ext_s[i] + stb__times_8_latin_ext_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_8_latin_ext_t[i] + stb__times_8_latin_ext_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_8_latin_ext_x[i] - 0.5f;
            font[i].y0f = stb__times_8_latin_ext_y[i] - 0.5f;
            font[i].x1f = stb__times_8_latin_ext_x[i] + stb__times_8_latin_ext_w[i] + 0.5f;
            font[i].y1f = stb__times_8_latin_ext_y[i] + stb__times_8_latin_ext_h[i] + 0.5f;
            font[i].advance = stb__times_8_latin_ext_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_8_latin_ext
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_8_latin_ext_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_8_latin_ext_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_8_latin_ext_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_8_latin_ext_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_8_latin_ext_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_8_latin_ext_LINE_SPACING
#endif

