// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_13_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_13_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_13_latin1_BITMAP_WIDTH         256
#define STB_FONT_arial_13_latin1_BITMAP_HEIGHT         64
#define STB_FONT_arial_13_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_arial_13_latin1_FIRST_CHAR            32
#define STB_FONT_arial_13_latin1_NUM_CHARS            224

#define STB_FONT_arial_13_latin1_LINE_SPACING           8

static unsigned int stb__arial_13_latin1_pixels[]={
    0x02886626,0x55530150,0x0a802a01,0x51544220,0x02980035,0x98054c03,
    0x01982882,0x35006a60,0x06600cca,0x04001510,0x41000000,0x15002882,
    0x00000400,0x55701500,0x2cc02cc7,0x037b7fea,0x407701a6,0x3eb93e65,
    0x3a2076e2,0xde88582c,0x35e645dc,0x101a6126,0x03d957bb,0x0755a3d3,
    0x5cd803d0,0x807b7620,0x272a01f7,0x360d2405,0x00765c02,0x4f407bbb,
    0x00ae202d,0x0acc0077,0x3ffb0220,0x26112877,0x541308a0,0xe8ee1a63,
    0x422a1edb,0x7d0e6098,0x0dc3a3d8,0x3b00dc40,0x1dc1d882,0x1b88164d,
    0x110154c0,0x02a98035,0x20262115,0x00d41a49,0xa88026a6,0x00554401,
    0x655540f2,0x99dc792a,0x8f20edee,0x773ffd3b,0x789e43c4,0x6983a3c8,
    0x371b33b8,0xd0f21e23,0x3ae043c4,0x3b225981,0xc9640edc,0x5c58ccee,
    0x6442b9a2,0x6440edce,0x6440edce,0x6440edce,0x1e20edce,0x0edea8f2,
    0x880bf10d,0x02fc405f,0xbf1017e2,0x99999f10,0x1f30e9a6,0x43a6996e,
    0x223b9ffa,0x90f13c87,0x2e1a63c7,0x78873d33,0x5a8ec3c8,0x22756cc0,
    0x8d70f659,0x34be2796,0xb0ea68b2,0x21ec6b87,0x1ae1ec6b,0x1e26b87b,
    0x5e4744f2,0x01d770d3,0x770075dc,0x075dc01d,0x7881d770,0xd32ccf40,
    0x1667a344,0x3c4773b1,0x3c8789e4,0x3b8698d3,0x8788fbaa,0x0699643c,
    0x264d89dc,0x23d01f35,0x58741f48,0x32d8816a,0x3e63d01f,0x01f31e80,
    0x3a03e63d,0x26790f11,0xc8e86895,0x80f23a03,0x23a03c8e,0x0f23a03c,
    0x2cbb80f1,0x5dc699a6,0x23b9d82c,0x0f13c878,0x0d31a279,0x14dc8877,
    0x12c8790f,0x7d14a81f,0x0d5599a2,0x1345d4f6,0x205a8e2f,0x360d51d8,
    0x54f60d53,0x41aa7b06,0x2790f13d,0x31a138d9,0x9acc1a6b,0x41a6b306,
    0x5660d359,0x7777c469,0xf31ba23e,0x0dd112e1,0x90f0ee76,0x8f1e43c7,
    0x1333b869,0x1e43cd37,0xd10dc83a,0x3166ec43,0x89741a6b,0x3a3761f5,
    0x1dcd0e40,0x34cba0d3,0x3a0d32e8,0x78ba0d32,0x2e73e3c8,0xfaadc8d3,
    0x2faadc82,0x82faadc8,0xc82faadc,0x3e22faad,0x26c09999,0x2037bba6,
    0x8773b04d,0x81f1740f,0x8698362e,0x9771d53b,0x0f0ba07c,0x2e05ddd9,
    0x0fc5660f,0xea8e83e2,0x2088cfad,0x222b9a3b,0xf887c41f,0x1f887c41,
    0x41f887c4,0x5d03e0f8,0x4686efd4,0xf85caaaf,0xaf85caaa,0xaaf85caa,
    0xaaaf85ca,0x3601e25c,0x0ec02cc1,0x26c3b9d8,0xf526c1f5,0x70d31d41,
    0xb06f7e47,0x07507d49,0x4792416a,0x6cc76e59,0x6a8074c4,0x2164d1dc,
    0xb89b31db,0xdb89b31d,0x1db89b31,0x2a4d89b3,0x4d03220f,0xb507c45a,
    0x116a0f88,0x3e22d41f,0x21f116a0,0x21726078,0x81726059,0x7ec43b9d,
    0x7fec41ef,0x93e6581e,0x441c43eb,0x02c1effd,0xd7b903d5,0xdd70f663,
    0x3376609d,0x74c0ceca,0x2e03aad1,0xdd704eee,0x3bbae09d,0x09ddd704,
    0xa83dffb1,0x320b6682,0xd8f20b63,0x20b63c82,0x4f20b63c,0x8ffffff8,
    0x202880a8,0x262600a8,0x80200201,0x55455108,0x44040081,0xa9802a01,
    0x00080a60,0x4c013553,0x01006651,0x80040020,0x40201000,0x00000002,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x4c028805,0x00028801,0x02019853,
    0x0a180a80,0xa80540cc,0x26201500,0x42066028,0x814c0200,0x206600a9,
    0x4c066029,0x0840a602,0x262144c4,0x2a012828,0x981a8000,0x09702980,
    0x376603b8,0x7901e401,0x3a0e8897,0x3e36ecc1,0x21b321e8,0x203a0936,
    0x2e0b503b,0x20939304,0x2ee5c0e8,0x4dc2efdc,0x4075ee40,0x16f440e8,
    0x2de880e8,0x65c2de88,0x224dd45d,0x4eb849b9,0x207c0b30,0x21622caa,
    0x32aa2de8,0x3042a2aa,0x165ddd43,0x2eea0170,0x1705c2bb,0x54c26054,
    0xb104d4c1,0x030040ea,0x00803014,0x69808022,0x1f0710ae,0x220620b2,
    0x22030088,0x09888088,0x01004010,0x0040b573,0x1d83a603,0x33e21088,
    0x11aa4ccc,0x3333e21f,0x10bf104c,0xe899999f,0x227c43a0,0x83a03a3c,
    0x21efeeed,0x36a0ceda,0x3f7b20ce,0x7033bae1,0x52cc19dd,0x706775c9,
    0x8fef6409,0xbd90d168,0x0676d43f,0xeb819dd7,0x7ef640ce,0xc87f7b21,
    0x3b6a1fde,0x8bfb6a0c,0x21e12a59,0x260ea951,0x201e32a5,0x0788ba4d,
    0xf103aee0,0x88741d00,0x0e8f21ff,0x4695c0e8,0x7344ee68,0xd14b9267,
    0x1dcd11dc,0x268a54b3,0x30892a3b,0x9768a5c9,0x3452e498,0x23b9a277,
    0x2498ee68,0x9a5c934b,0x773452e4,0xb32e43a2,0x261aa254,0xb30589dd,
    0x4403c654,0x03c45b9f,0x788791d0,0x443a0e80,0x0e8f26af,0x26b620e8,
    0x999d509e,0x9b333aad,0x4954eca8,0x26892a68,0x12552a59,0x22c8744d,
    0x2d14eca8,0x765443e8,0x2d999d54,0x24a9a24a,0x27654468,0x5449d951,
    0x999d54ec,0x266992ad,0x00e992a5,0x2ccf30d8,0xddddf195,0x881dd507,
    0x983eeeef,0xeef88d35,0x1d0743ee,0x23ca6de2,0x3f60e80e,0x3b51eeee,
    0x2676a333,0x9537d319,0x92e7892e,0x74a96678,0x3baa3c49,0x52a6fa64,
    0x74cf6268,0x33b54a9b,0x27892e33,0xbe99e24b,0x537d34a9,0x52a6fa69,
    0x971999da,0x254b334c,0x2257001d,0x8ca9666d,0xd009999f,0x3333f105,
    0x5f55b901,0x04cccfc4,0x2f10e83a,0x03a3c9f8,0x8575883a,0x3a2950e8,
    0x5d92e950,0xe896e1d1,0x9b344b70,0x5c2dc3a2,0x22bb25c4,0x92e9528e,
    0x52a1d15d,0x744b70e8,0xbb25cb70,0x4975d92e,0x52a1d15d,0x2688f269,
    0x07c43a4d,0x11ebe926,0x003c66cd,0x200f105b,0x225caaaf,0x43a0e807,
    0xe8f3aa78,0x65260e80,0x20deda81,0xbd10deda,0x6f754d7b,0x206f7540,
    0x3aa4bced,0x235c40de,0xd16bdde8,0x6f443bb6,0x37b6a6bd,0x5037baa0,
    0x6f441bdd,0x7bbd16bd,0x9af77a2d,0x36a0deda,0x5e76c0ce,0x10fafae4,
    0x361eaa8b,0x0078cbce,0x201e20b6,0x7887c45a,0x443a0e80,0x01d1fec7,
    0x0008441d,0x00000800,0x40300000,0x00020000,0x10040000,0x00000040,
    0x04405440,0xfff88008,0x82d80fff,0x0ffffff8,0x7c4f20b6,0x3a0fffff,
    0x223c43a0,0x03a03a3f,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x98180000,0x30098180,0x82886255,
    0x0c015101,0x13100288,0x02013105,0x5100c400,0x8054c015,0x83009998,
    0x10054c02,0x30054c03,0x01880035,0x0d440151,0x4004c140,0x00310028,
    0x588bb351,0x21622ecc,0x0dedcee8,0x882b96ba,0x20b01ebe,0x52ccd168,
    0xedeb8937,0x41dbdd30,0xcdc8ee3c,0x7e5eec0e,0x2dcdecc2,0x2a1f7764,
    0x301b0ecd,0xb90b737b,0x66f441d9,0x6e77445d,0x6764340e,0x0baf6e0e,
    0x41db9d91,0x4790f13c,0x0b34cdec,0xcdec92a0,0xd8b11b35,0x0762c440,
    0xa4cdd0fa,0x656a0b0d,0x2d105883,0x22016668,0xb87ccee7,0xb10e9a65,
    0x6987b164,0x262aa766,0x0e880745,0x2b30ae75,0x9e2599ba,0x47b0fa3c,
    0x11e35c3e,0x261d25cd,0x89ae1ec4,0x26790f10,0x00acd366,0x57669a54,
    0x815cb159,0x3e20ea58,0xac47e760,0x33e20575,0xd102a80e,0x4b3599e2,
    0x9accb54a,0xb33d1a26,0x10788f40,0xbacd6464,0x9502a7e1,0x46448851,
    0x21b8c8bb,0x21e25b1f,0x43e03e60,0x5992a6fc,0x03e601f1,0x8788d47a,
    0x9a5c973c,0x3b20eede,0xad4774de,0x81269159,0x96a0b148,0x56dc7b2c,
    0x07fa2058,0xf168806c,0x52a59acc,0x334da24b,0xa82cbb8d,0x3331a65f,
    0x9a5de561,0x45d79f33,0x1a1eceeb,0xfa8e616b,0xb5016a5f,0x34478b60,
    0x2137eed9,0x4ae7b06a,0x4953c878,0x56e1f34a,0x525d3669,0x2eb1166b,
    0x261b01dc,0x5d1dd6a7,0x4376a6e0,0x44aeb9e8,0x8fc5a205,0xba54b35b,
    0xb87cda24,0x91037444,0xfee89a69,0x4c32b2b2,0x9ae5a822,0x4958724a,
    0x13d12989,0xd501a699,0xeb878ba0,0x039916ce,0x1dcba0d3,0x43a2790f,
    0xbbc4d34d,0x447452e4,0x11c8b35d,0x6c4ae0b2,0xf892fe26,0x751b5880,
    0x263fd96a,0xf16984c4,0xa966bbdd,0xe9acc954,0x44d80dee,0x80f9a608,
    0xb119372d,0x4d104432,0x23a9a65a,0x195bd99b,0x1f16992e,0x981f14a8,
    0x4b301e0f,0x883f102d,0x207c790f,0x537baa2e,0x525da669,0x9a66ed49,
    0x30790ea5,0xdb0f5f49,0x8e413661,0x5c3a2756,0x29506e4f,0xd102d15a,
    0x790e8a6c,0x10760166,0x41d71e4d,0x443b11e9,0x24c9a23b,0x2c4970e8,
    0x11dc21b1,0x21b925cd,0x267721e8,0x9a23c4ee,0x5c03d32c,0x2649b31d,
    0xa807d49b,0x4cee3f34,0x770c5366,0x3b22c566,0xd551621c,0x3bbf3663,
    0x6e5cb104,0x3a77bae0,0x3ffb10b1,0xbced81a2,0x5993b6a4,0x75c17260,
    0x7ff540ce,0x6e6e442e,0x40beeb82,0x22c0ded9,0xb82dcdc8,0x77640ded,
    0xdeeeb82e,0xbd71f60d,0x3f766ec9,0x3227775c,0x07bff624,0x9d9d34a8,
    0xd266f5c1,0x4d661d77,0x1104ccc0,0x4c008020,0x00400040,0x100000a0,
    0x00054405,0x00000000,0x00000040,0x00330400,0x20100200,0x31001008,
    0x02aa0000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x03302aa6,0x22280053,0x05119999,
    0x09aaa815,0x2a0a0a94,0x55555500,0x2aaaaa85,0x08051088,0x40289441,
    0xa8809aaa,0x141502a1,0xaaa81880,0xa8054009,0x20a1aaaa,0x542a1509,
    0x55531980,0x2aaa2555,0x330151aa,0x0282a0a6,0x887b73ae,0xf0f5e6c6,
    0x7754b903,0xcb8796ee,0xfb99f10e,0x788e46c7,0xedea82ec,0x33e23ccc,
    0x97444ccc,0x9b766059,0x7c40b348,0x6743fdcc,0x226992e1,0x1ecdc807,
    0x03fb99f1,0x667c17e2,0x4f21e2cc,0x20f23f0e,0x99f9972d,0x3b333227,
    0x10f88d54,0x0f13545d,0x045b83e2,0x5032d4d3,0x808f40bd,0xd11e2111,
    0x09b3c403,0xf1025d74,0xb32eea80,0x0acc0100,0xf0fc4788,0xf116c3a0,
    0x34c17999,0x0971e295,0x01e03aee,0x7c3a790f,0xf0788d31,0x360ea801,
    0x11f30ba4,0x7f03c41d,0x5a807401,0x5c167a20,0x883a03a4,0x883a4c87,
    0xbb5409b7,0x1501e204,0x8755665b,0xb31edcd9,0x887fb3a6,0x1dfb4b87,
    0x7c469da8,0x5046caaa,0x20791e2b,0x40783c8e,0x3e1d3c87,0xf04b87a1,
    0x220fcc01,0xdb905b9f,0x36607885,0xa80e83df,0x1667600e,0xe80e83e2,
    0xe96a1e20,0x80bf7e20,0x7dddf72e,0x1f7777c4,0x0e9d996c,0x59a5c3e6,
    0xfc92e1f3,0x43cb50cc,0x221bee98,0x1e880f87,0x20ddddf1,0xddf0d359,
    0xfffff8bd,0xb83a1d3f,0x807c03a4,0x1dd502e8,0x03c42f40,0x03a2f544,
    0x4ee181d1,0x0744b859,0xb70f1074,0xf39f1074,0xb955f301,0x4fc41333,
    0x32d80999,0x2a6987ff,0x4a9a6b34,0x24b867e6,0x4cedca87,0xd10f11e2,
    0x64ccfc45,0x2faadc85,0x1e0cccfc,0x20d874f2,0x07c0b378,0x017404d8,
    0x07883fd5,0x0741f073,0x7f47e166,0x20f46fff,0x1e20e80e,0x9e20e8f2,
    0xdccdd86b,0x6c01e204,0x4c1f3d32,0x59acd2a5,0x3c87892a,0x33b72a1e,
    0x3b733e24,0x1e2174c3,0x9555f0f1,0x643c078b,0x2b6161d3,0x3203e02c,
    0xf102d805,0x10788d73,0x03a3543f,0xb3017011,0x1d01d0f0,0xe83ea3c4,
    0x4c9b1e20,0x0f1025c6,0x5baccb60,0x2b34a966,0x47892a59,0x2621e0ea,
    0x2be219da,0x881e881a,0x116a35c7,0x21e03c1f,0x2a061d3c,0x2a07c06c,
    0xb02d800e,0x40f126c7,0x740effe9,0x98142d40,0x407434c5,0x3fffe20e,
    0x8f10741d,0xfb87b2f8,0x3fe27fff,0x96c0ffff,0x52ccfa59,0x952cd669,
    0x0effffc4,0x7885981e,0xb7fffdc0,0x41dffff8,0x01e3c82d,0x7c3a790f,
    0x07c04e81,0x1bfffff6,0xf11720b6,0x1ffffe25,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x54000000,0x22882a20,0x2aa2981a,0x0982809a,0x1006aaaa,
    0x08042000,0x00201004,0x4cc40401,0x00100199,0x40020498,0x88881000,
    0x261ce000,0x0188a00b,0x440b0193,0x24d4dcc2,0x198a8054,0x45f51e4c,
    0xdf0bf14b,0x93f333e2,0xf89e44f8,0x640eeccc,0x54b31fde,0x83bb7664,
    0x5efceded,0xbd12efdc,0x0ceda89d,0x00833bae,0x3b3b8b21,0x24c0e9ae,
    0x327bb762,0x3db9b12e,0x50f9bb66,0x5aa3fddd,0x12ab21e8,0x19903bd7,
    0x02dda87d,0x6f424c0d,0x41fc42fb,0x33621d58,0x2d97325a,0xb74c1df1,
    0xf887c478,0x43c4f21f,0x34b9263d,0x323b254b,0x7364930f,0x952b9a67,
    0x89dcd124,0x21008ee6,0xd9dc3a59,0x3b6a688e,0x361f15de,0x5c3e2b15,
    0x70081f34,0x442dbc89,0xed981d8e,0x9d31fe40,0x99f99101,0x933332a1,
    0x0d570ee6,0x6444593d,0x0f9e3a78,0xb5e477f1,0xf887c478,0x43c4f26a,
    0xa765442d,0xbb452a59,0x3b2a22da,0x0975dcce,0xea82f7a2,0x44956ccc,
    0x31d04026,0xaabeaccb,0x4676a623,0xd178b268,0x50069a54,0x3a0bd10b,
    0x275c41d8,0xed893ba2,0x2aeba882,0x68aaaaa6,0xd0aed0b2,0x1d488593,
    0x89a276b3,0x45a7a59f,0x225dbaaf,0x7c4f29b7,0x74c4eccc,0x54b34a9b,
    0x43a93d34,0x99cb9be9,0x20449509,0x33b50fc9,0x27892e33,0x165dc100,
    0x0772727a,0x164b1126,0xb349962f,0xd101d300,0x4495570d,0x93d80bec,
    0xd04ec889,0x3ba22d40,0x3452a3fd,0x2911a366,0x77773bac,0x9ba8ebc4,
    0x83799f16,0x2793f178,0xb85daaf8,0x9b345764,0x92e68afc,0x8744ee6e,
    0x88f4952c,0x43a2950e,0xd104025b,0x1ba5d90d,0x2c962144,0x26932c5e,
    0x403a2085,0x439c4b9e,0x80204029,0x0220480b,0x000a1131,0x32a03315,
    0x4439b30d,0x2d339777,0xd53c4078,0x89b1e279,0x366bdde8,0x3bb64bce,
    0x2bb7a21e,0x3aa0deeb,0x22776c4e,0x3aa0deda,0x204020de,0x9b0fa84e,
    0x16ffffb8,0x962f164b,0x21f0b349,0x973eeefd,0x00000174,0x00000000,
    0x46e80000,0x6e8bc46e,0xf101e2d3,0x88f13fd8,0x1800081f,0x00000000,
    0x26666000,0x00000199,0x00000000,0x00000000,0x00000000,0x89b00000,
    0x27d3c45c,0x7880f169,0xb8789fc4,0x00000006,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x41a81530,
    0x21981819,0xddd30898,0xd31441dd,0x1041dddd,0x000a2043,0x75043215,
    0x2aaaa237,0x233131aa,0x2cccccc8,0x00000000,0x00000000,0x00000000,
    0x00000000,0x249b9800,0x77752caa,0xbca8b2a6,0x44477954,0x11ce4088,
    0x87c1d111,0x23b0b24b,0x51bacfd9,0x730f85c9,0x55555437,0x4455571a,
    0x00088888,0x00000000,0x00000000,0x00000000,0x00000000,0x74c6cc88,
    0x2ec88e40,0x3bcaac32,0x44555551,0x1706c093,0x8435452a,0x10cdb989,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xd3390000,
    0xb0763a8c,0x8ac55c55,0x99991199,0x7005d419,0x2a231141,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xb932564c,
    0x100f7b23,0x00000197,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_13_latin1_x[224]={ 0,1,0,0,0,0,0,0,0,0,0,0,0,0,
1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,1,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,-1,
1,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,-1,-1,-1,-1,
-1,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__arial_13_latin1_y[224]={ 10,1,1,1,0,1,1,1,1,1,1,3,8,6,
8,1,1,1,1,1,1,1,1,1,1,1,3,3,3,4,3,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,1,3,3,3,3,3,3,1,1,1,4,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,10,3,1,1,3,1,
1,1,1,1,1,4,4,6,1,0,1,3,1,1,1,3,1,5,9,1,1,4,1,1,1,3,-1,-1,-1,-1,
-1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,3,1,-1,-1,-1,-1,-1,1,1,1,1,
1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,1,1,1,1,1,1,
 };
static unsigned short stb__arial_13_latin1_w[224]={ 0,2,4,7,6,10,8,2,4,4,5,7,3,4,
2,4,6,4,6,6,6,7,6,6,6,6,2,3,7,7,7,6,12,9,8,8,8,8,7,9,8,2,5,8,
7,9,8,9,8,9,9,8,7,8,8,11,8,8,7,4,4,3,6,8,3,6,6,6,6,6,4,6,6,2,
3,6,2,9,6,7,7,6,5,6,4,6,6,9,6,6,6,4,1,4,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,2,6,7,7,8,
1,6,4,9,5,6,7,4,9,8,4,6,4,4,3,6,7,2,4,3,4,6,10,10,10,7,9,9,9,9,
9,9,12,8,8,8,8,8,3,3,5,4,9,8,9,9,9,9,9,6,9,8,8,8,8,8,8,7,6,6,
6,6,6,6,10,6,6,6,6,6,3,3,5,4,7,6,7,7,7,7,7,6,7,6,6,6,6,6,7,6,
 };
static unsigned short stb__arial_13_latin1_h[224]={ 0,9,4,10,12,10,10,4,12,12,5,6,4,2,
2,10,10,9,9,10,9,10,10,9,10,10,7,9,6,4,6,9,12,9,9,10,9,9,9,10,9,9,10,9,
9,9,9,10,9,10,9,10,9,10,9,9,9,9,9,12,10,12,6,2,3,8,10,8,10,8,9,10,9,9,
12,9,9,7,7,8,10,10,7,8,10,8,7,7,7,10,7,12,12,12,3,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,10,12,10,6,9,
12,12,2,10,5,6,4,2,10,2,4,7,5,5,3,10,12,2,4,5,5,6,10,10,10,10,11,11,11,11,
11,11,9,12,11,11,11,11,11,11,11,11,9,11,12,12,12,12,12,6,10,12,12,12,12,11,9,10,10,10,
10,10,10,10,8,10,10,10,10,10,9,9,9,9,10,9,10,10,10,10,10,6,8,10,10,10,10,12,12,12,
 };
static unsigned short stb__arial_13_latin1_s[224]={ 197,202,78,75,63,33,44,108,49,79,67,
215,104,138,135,53,78,94,156,100,25,127,135,32,157,188,168,21,207,83,192,
14,114,172,163,164,49,85,182,107,190,199,58,63,248,13,32,203,23,173,41,
1,214,216,205,1,239,230,222,54,142,59,238,143,116,51,232,84,239,98,133,
246,116,113,100,99,253,145,155,105,85,225,162,91,183,58,121,128,178,93,171,
127,195,134,120,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,197,213,188,
195,230,138,132,93,152,147,51,245,96,138,117,157,91,138,62,57,128,64,23,
132,111,252,73,185,12,1,238,230,197,28,207,217,227,237,72,84,247,1,19,
38,47,51,69,64,123,55,104,139,149,159,169,200,23,40,31,70,179,10,147,
149,97,157,187,194,201,142,73,135,90,83,164,208,10,39,43,58,215,106,104,
171,179,127,112,223,65,223,120,249,71,16,8,1, };
static unsigned short stb__arial_13_latin1_t[224]={ 13,37,57,14,1,26,26,57,1,1,57,
48,57,57,57,26,26,37,37,26,37,26,26,37,26,26,48,37,48,57,48,
37,1,37,37,26,37,37,37,26,37,37,26,37,37,48,48,26,48,26,48,
37,37,26,37,48,37,37,37,1,26,1,48,57,57,48,26,48,26,48,37,
26,37,37,1,37,26,48,48,48,26,26,48,48,26,48,48,48,48,26,48,
1,1,1,57,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,13,26,1,
26,48,37,1,1,57,26,57,48,57,57,26,57,57,48,57,57,57,26,1,
57,57,48,57,48,26,26,14,14,1,14,1,1,1,1,37,1,1,14,14,
14,14,14,14,14,37,14,1,1,1,1,1,48,26,1,1,1,1,14,37,
14,14,14,14,14,14,14,48,14,14,14,14,14,37,37,37,37,14,37,14,
14,14,14,14,48,48,14,14,14,26,1,1,1, };
static unsigned short stb__arial_13_latin1_a[224]={ 52,52,66,104,104,166,124,36,
62,62,72,109,52,62,52,52,104,104,104,104,104,104,104,104,
104,104,52,52,109,109,109,104,189,124,124,134,134,124,114,145,
134,52,93,124,104,155,134,145,124,145,134,124,114,134,124,176,
124,124,114,52,52,52,87,104,62,104,104,93,104,104,52,104,
104,41,41,93,41,155,104,104,104,104,62,93,52,104,93,134,
93,93,93,62,48,62,109,140,140,140,140,140,140,140,140,140,
140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,
140,140,140,140,140,140,140,140,52,62,104,104,104,104,48,104,
62,137,69,104,109,62,137,103,74,102,62,62,62,107,100,52,
62,62,68,104,155,155,155,114,124,124,124,124,124,124,186,134,
124,124,124,124,52,52,52,52,134,134,145,145,145,145,145,109,
145,134,134,134,134,124,124,114,104,104,104,104,104,104,166,93,
104,104,104,104,52,52,52,52,104,104,104,104,104,104,104,102,
114,104,104,104,104,93,104,93, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_13_latin1_BITMAP_HEIGHT or STB_FONT_arial_13_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_13_latin1(stb_fontchar font[STB_FONT_arial_13_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_arial_13_latin1_BITMAP_HEIGHT][STB_FONT_arial_13_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_13_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_13_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_13_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_13_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_13_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_13_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_13_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__arial_13_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__arial_13_latin1_s[i] + stb__arial_13_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__arial_13_latin1_t[i] + stb__arial_13_latin1_h[i]) * recip_height;
            font[i].x0 = stb__arial_13_latin1_x[i];
            font[i].y0 = stb__arial_13_latin1_y[i];
            font[i].x1 = stb__arial_13_latin1_x[i] + stb__arial_13_latin1_w[i];
            font[i].y1 = stb__arial_13_latin1_y[i] + stb__arial_13_latin1_h[i];
            font[i].advance_int = (stb__arial_13_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__arial_13_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_13_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_13_latin1_s[i] + stb__arial_13_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_13_latin1_t[i] + stb__arial_13_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_13_latin1_x[i] - 0.5f;
            font[i].y0f = stb__arial_13_latin1_y[i] - 0.5f;
            font[i].x1f = stb__arial_13_latin1_x[i] + stb__arial_13_latin1_w[i] + 0.5f;
            font[i].y1f = stb__arial_13_latin1_y[i] + stb__arial_13_latin1_h[i] + 0.5f;
            font[i].advance = stb__arial_13_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_13_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_13_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_13_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_13_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_13_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_13_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_13_latin1_LINE_SPACING
#endif

