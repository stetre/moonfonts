// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_14_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_14_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_14_usascii_BITMAP_WIDTH         128
#define STB_FONT_arial_14_usascii_BITMAP_HEIGHT         66
#define STB_FONT_arial_14_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_14_usascii_FIRST_CHAR            32
#define STB_FONT_arial_14_usascii_NUM_CHARS             95

#define STB_FONT_arial_14_usascii_LINE_SPACING           9

static unsigned int stb__arial_14_usascii_pixels[]={
    0x82010108,0x1a200000,0x23ff1091,0x220004fd,0x00220010,0x44000000,
    0x7e4aa010,0x2cdd03a0,0x5bddd730,0xeeeb8a20,0x512e1e22,0x3203bffd,
    0x22edc1b1,0x0cfd980d,0x80cffda8,0x47201eeb,0xd1e4580e,0x20ea2d41,
    0x0f620ae9,0x69cb44a2,0xea92e1e2,0xe80fb88b,0x32cb44d0,0x22dcb609,
    0x88b911ea,0x57340d36,0x1d1dc3b8,0x3a234254,0x5b151750,0x212d3688,
    0x07e4b878,0xbafaa972,0x6ceeb12e,0xf1e61f00,0x47c41903,0x24cb105b,
    0x0749503a,0x8ec5b095,0x498fdacd,0x10b9d344,0x41e6970f,0x32b72a79,
    0x2a367a2d,0x8f6b7204,0x37f20078,0x3c687500,0x1e41d2cc,0xb92ed1e4,
    0x5c4d11a7,0x2e1e22ff,0x83e20d54,0x1b88593a,0x37aa061b,0x4c01aa2e,
    0x83b015ee,0x56e0f10d,0x52e0b90e,0x8ad43b58,0x7d643444,0x26970f10,
    0x36a7a80f,0x9502beac,0x22799afa,0xf100f10f,0x683d7d13,0xd10f13b8,
    0x40f4c3a5,0xc87eb34b,0x53688373,0xb8788f52,0xb9720fe4,0xd03cfccf,
    0x2d476951,0x1f81f8ba,0x2637ccd5,0x503a5884,0x90770749,0x5f54dbc5,
    0x3e6d10b5,0x21e278c8,0x222faa4b,0x058b41ec,0x11da4cea,0x3f51e61d,
    0x31f89722,0x6815c3ff,0x074970b6,0x4ec1d095,0x12edbee8,0x3bfee698,
    0x512e1e22,0x5983bffb,0x7d074075,0x82deda8b,0x540cffeb,0x366b9eed,
    0x71663900,0x98950747,0xb900fc45,0x442c2e44,0x009930af,0x44022110,
    0x04000181,0x44010040,0xd174c360,0x03b174c1,0xd9557bd3,0x0080ba89,
    0x006a6155,0x00000000,0x00000000,0x5070ea51,0x32aa01c7,0x000000ac,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00a2ee20,0x220689e0,0x3b882c9a,0x5000f405,
    0x206fec41,0xeb80dfd9,0xdffda81d,0x1effd880,0x4c067e4c,0x6742effd,
    0x17ee0fda,0xf881a278,0x56745dad,0xea87a07d,0x7d07c2de,0x1723d172,
    0x7d51aa7b,0xbe81d711,0xb9741f50,0x5d3174c5,0x3a0f99aa,0x13ce5c41,
    0x0f88771d,0x0f33547e,0x9e63f0f4,0x7c698bfa,0xd334c510,0x26417c18,
    0x1a63703e,0x9d41741f,0xbfa87c4b,0x89fab3a0,0x1a25dadf,0x40f12e5b,
    0x51e8711e,0x1e8b517f,0x2b6a3ea8,0x203e60bd,0x40df6469,0x0f88fc69,
    0x21f12d40,0x4cd50bfa,0x11f83e27,0x44b31e8f,0x35407a07,0x0b625c3e,
    0x67dc5db3,0x441aa6c9,0x43efda87,0xf32fb8bf,0x47e4ccb8,0x4b83a0fc,
    0x12d8d13c,0x1f83e65f,0x540f40f7,0x45a87c0e,0x2e1f101e,0x80f987c7,
    0x31754079,0x3e23b7d9,0xc99eeaa0,0xa83a0fae,0x74789e25,0x83ddbf10,
    0x8aa7ded9,0x0f81f81f,0x8510f8d3,0x21e8d51e,0xd32e462f,0x83a04970,
    0x4317982e,0x1f107478,0xd33f89ee,0x4f000bc4,0x5881f35a,0x5a8f41f0,
    0x3a34c3e2,0x57541f31,0x5fc0fec8,0x43e25d10,0x9857cc5a,0x136afa6d,
    0x7befa81d,0x8877afa2,0x3f63c007,0x3f20303f,0xa81ddb31,0x764c1dee,
    0xdffea81e,0x7ffec44e,0x406f7543,0x20cfffd9,0x00e82cb8,0x000a2000,
    0x03c40105,0x01002000,0x00203810,0x00002001,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xdd500000,0x141980dd,0x4f103e00,
    0x0ffffff9,0x321f107b,0x3ff66a85,0x3f32ffff,0x7fffc5c8,0xbd0f60de,
    0x3fffe4c8,0x2174fe4e,0x4b8199bc,0x3662ccb5,0x2207c1cf,0x0d536407,
    0xf1174497,0x35c0f603,0x220f81d5,0xfe896e6c,0x310f87a0,0x2174fe7d,
    0x453ee01e,0x52e85b0f,0x03c40f8d,0x741f81f5,0x04d87d41,0xf8cd80f6,
    0x87c40f81,0x44b6ee79,0x756e07c7,0xcecf85d2,0xbc92f720,0x3f0e20f8,
    0x4c1e207c,0x1a64c81f,0x360356e4,0x40fbe203,0x1f17220f,0x22d52e76,
    0xd2e9ec0f,0x35c57445,0x4ae992e1,0x81f07cc0,0x303e8878,0xfe881e4d,
    0x3601ec01,0xfffff00f,0x22f2c817,0xeeef8796,0x0ba3b0ef,0x744b83d0,
    0xf0ba201e,0x04d87983,0x2e00f8f4,0x2a03d805,0x261f05de,0x259ca82e,
    0x55fc0e8e,0x22e8ec1a,0x12e0f428,0x417cc0d7,0x1b235c2e,0x7016b2e0,
    0x2207b009,0x0f83e89f,0x79d107e6,0x007c3564,0x0f88ba17,0x3b8970f3,
    0x3b205f30,0x07549d30,0x2016fc40,0xb03d804b,0x03e0fcc9,0x541dd0d7,
    0x2200f84e,0xceea85d0,0x1d714b80,0xfc803f10,0x7ffec4ff,0x07c82fff,
    0x83d804b8,0x07c6b86b,0xf11b2274,0x97401f05,0x14b8002e,0x3ffee039,
    0x000101ff,0x00000000,0x00000000,0x00000000,0x0f800000,0x20db03c4,
    0xffffff78,0x7fffffc1,0x0b7fffe3,0x7ffc40f1,0x7542a1df,0x0f12eeee,
    0x7c7887f0,0x1f13f986,0x4e883e20,0x220f103e,0x07e301de,0x10f801f0,
    0x103c47f5,0x1d9ee61f,0x21f53331,0x20ff8078,0x320ffc78,0x2201f13f,
    0x0f89d10f,0x5bcb83c4,0xf803f288,0x9e607c00,0x220bb8f8,0x74007c0f,
    0xf8199e22,0x79f1e26c,0x01f13de8,0x213a23e2,0x07a999af,0x7881f13d,
    0xf813335f,0x07c1999a,0xdadf88fc,0x2e667e26,0xbc45b805,0x3e8f80eb,
    0x2669f8f1,0x201f13cc,0xdf04e8f8,0xd30fdddd,0x7fde21ec,0x777c2fff,
    0x203e0eee,0x9e21f12e,0x03feeef8,0x757c41f8,0x11f31f00,0x2723d78f,
    0x2201f13c,0x0f80fdef,0x667643c4,0x01fbc46d,0x203e007c,0x10f8f11f,
    0x0897441f,0x37fc4354,0x1e3ae1f0,0x13cb4eef,0x6cfe201f,0x43c40f85,
    0x22f9999f,0x0f803f78,0x43e607c0,0x0f887c78,0x1ec2ea64,0xf81ec7c4,
    0x26f1f3a0,0x3e2794ae,0x3a21f100,0x51e207c3,0xfbc4b90b,0x3e007c01,
    0x3c47d310,0xd307c43e,0x103d06a5,0x83e07e2f,0x3dd3c7f9,0x8807c4f2,
    0x0f87e60f,0x220b63c4,0x007ef10f,0x49ffffff,0x443effff,0xfff887c7,
    0x41e0e3ef,0x03e1ae78,0xc9ae78f9,0x7fffff13,0x01d903e2,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x3e200000,
    0x03731a60,0xcb883993,0x441c980b,0x21654142,0x40a8c00a,0x510b82a3,
    0x26298022,0x93501502,0xaea8ae27,0x4d307ec6,0x3a64dadd,0x2afa1faa,
    0x2ed6ec6c,0x56ec78d3,0x2e20723d,0x92d4973f,0x9a54be65,0x89e881df,
    0xf881d01e,0x1eacdead,0x7e5cd5b5,0x9a345a60,0x8a2110ea,0x0f8d10f8,
    0x89e678d3,0x82fb6603,0x75a8b678,0xdb50b29b,0x203de985,0x7a87c40e,
    0x9a4e4cee,0xfab4c1f6,0x3f22feee,0x7f76543e,0xd32d8970,0x4c016e78,
    0x1e2b603f,0x035a7af1,0x986d89f3,0xf14fffff,0x084952cc,0x36983e3d,
    0x4d3aa00b,0xb50f88ae,0x3c4f32e8,0x3aa028d3,0x84ada82d,0x30b5d6ad,
    0x774419d9,0x209e8882,0x04a96668,0x215f3399,0x87c47e69,0x72d52e5a,
    0x0f98fc1f,0x3f1ee1f1,0xd980996a,0x5c0f7c2e,0x7445d94e,0x1f15b02e,
    0x4cd103a0,0x6775d2a5,0x31efeeec,0x21776ccd,0xdb10eeec,0x76d43d7d,
    0x356fe41e,0x2e877b6a,0x20d90620,0x441f52f8,0x05b96e01,0x96668817,
    0xf035534a,0x040034c1,0x00000008,0x00000000,0x00000000,0x34c1f000,
    0x00000000,0x00000000,0x00000000,0x40000000,0x4d441772,0x5777730b,
    0xaaaa8808,0x5426041a,0x3082a205,0x55555541,0x00000002,0x44000000,
    0x3a26cace,0x3aaaa64d,0x376626c3,0x3a2c3ddd,0x547a2b52,0x5d5ddfee,
    0x2eeeeee2,0x00000003,0x44000000,0x00f89e1f,0x01db3172,0xa8ef6d40,
    0x2094c931,0x00000bb8,0x00000000,0x23c40000,0x86b81e27,0x33223bac,
    0x8b6e2ccc,0x00000042,0x00000000,0x22000000,0x2a0d13c6,0x268b440e,
    0x21bbbbb8,0x00000052,0x00000000,0x40000000,0x30d13c68,0x0e47501d,
    0x00000000,0x00000000,0x00000000,0x4344f1a2,0x006ffffd,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_14_usascii_x[95]={ 0,1,0,0,0,0,0,0,0,0,0,0,1,0,
1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,-1,0,0,0,0,1,0,1,1,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0, };
static signed short stb__arial_14_usascii_y[95]={ 11,2,2,1,1,1,1,2,1,1,1,3,9,7,
9,1,1,1,1,1,2,2,1,2,1,1,4,4,3,4,3,1,1,2,2,1,2,2,2,1,2,2,2,2,
2,2,2,1,2,1,2,1,2,2,2,2,2,2,2,2,1,2,1,12,1,4,2,4,2,4,1,4,2,2,
2,2,2,4,4,4,4,4,4,4,2,4,4,4,4,4,4,1,1,1,5, };
static unsigned short stb__arial_14_usascii_w[95]={ 0,2,4,7,7,11,9,2,4,4,5,7,2,4,
2,4,7,4,7,7,7,7,7,7,7,7,2,2,7,7,7,7,13,10,8,9,9,8,7,9,8,2,6,9,
7,10,9,10,8,10,9,8,8,9,9,12,9,9,8,4,4,3,6,9,3,7,7,7,7,7,4,7,7,2,
3,7,2,10,7,7,7,7,5,6,4,7,7,9,7,7,6,4,2,4,7, };
static unsigned short stb__arial_14_usascii_h[95]={ 0,9,4,11,12,11,11,4,13,13,5,7,4,2,
2,11,11,10,10,11,9,10,11,9,11,11,7,9,7,5,7,10,13,9,9,11,9,9,9,11,9,9,10,9,
9,9,9,11,9,11,9,11,9,10,9,9,9,9,9,12,11,12,6,2,3,8,10,8,10,8,10,10,9,9,
12,9,9,7,7,8,10,10,7,8,10,8,7,7,7,10,7,13,13,13,3, };
static unsigned short stb__arial_14_usascii_s[95]={ 59,120,123,70,42,78,108,57,1,19,48,
104,54,123,72,118,1,9,22,9,1,1,17,110,90,45,59,107,62,40,88,
115,24,49,98,98,80,71,63,53,40,123,108,30,22,11,1,59,111,25,88,
36,69,30,49,98,78,59,40,50,123,55,33,75,60,27,84,51,76,12,71,
63,90,60,38,118,9,112,12,35,92,100,20,20,123,43,70,78,96,14,26,
14,11,6,64, };
static unsigned short stb__arial_14_usascii_t[95]={ 13,27,48,1,1,1,1,57,1,1,57,
48,57,53,57,1,15,27,27,15,48,27,15,37,1,15,48,37,48,57,48,
15,1,37,37,1,37,37,37,15,37,27,15,38,38,38,38,1,27,15,27,
15,27,27,27,27,27,27,27,1,1,1,57,57,57,48,15,48,15,48,15,
15,37,37,1,37,48,48,57,48,15,15,57,48,15,48,48,48,48,27,57,
1,1,1,57, };
static unsigned short stb__arial_14_usascii_a[95]={ 56,56,71,112,112,178,134,38,
67,67,78,117,56,67,56,56,112,112,112,112,112,112,112,112,
112,112,56,56,117,117,117,112,204,134,134,145,145,134,122,156,
145,56,100,134,112,167,145,156,134,156,145,134,122,145,134,189,
134,134,122,56,56,56,94,112,67,112,112,100,112,112,56,112,
112,45,45,100,45,167,112,112,112,112,67,100,56,112,100,145,
100,100,100,67,52,67,117, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_14_usascii_BITMAP_HEIGHT or STB_FONT_arial_14_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_14_usascii(stb_fontchar font[STB_FONT_arial_14_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_14_usascii_BITMAP_HEIGHT][STB_FONT_arial_14_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_14_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_14_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_14_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_14_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_14_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_14_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_14_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_14_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_14_usascii_s[i] + stb__arial_14_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_14_usascii_t[i] + stb__arial_14_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_14_usascii_x[i];
            font[i].y0 = stb__arial_14_usascii_y[i];
            font[i].x1 = stb__arial_14_usascii_x[i] + stb__arial_14_usascii_w[i];
            font[i].y1 = stb__arial_14_usascii_y[i] + stb__arial_14_usascii_h[i];
            font[i].advance_int = (stb__arial_14_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_14_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_14_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_14_usascii_s[i] + stb__arial_14_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_14_usascii_t[i] + stb__arial_14_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_14_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_14_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_14_usascii_x[i] + stb__arial_14_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_14_usascii_y[i] + stb__arial_14_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_14_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_14_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_14_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_14_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_14_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_14_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_14_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_14_usascii_LINE_SPACING
#endif

