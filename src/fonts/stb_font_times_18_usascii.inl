// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_18_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_18_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_18_usascii_BITMAP_WIDTH         128
#define STB_FONT_times_18_usascii_BITMAP_HEIGHT         90
#define STB_FONT_times_18_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_18_usascii_FIRST_CHAR            32
#define STB_FONT_times_18_usascii_NUM_CHARS             95

#define STB_FONT_times_18_usascii_LINE_SPACING          12

static unsigned int stb__times_18_usascii_pixels[]={
    0x01008040,0x88000100,0x80000001,0x00000009,0x14c00000,0x51120d44,
    0x33d40601,0x2e601f99,0x401aa9ab,0xc81dddda,0x6eedc3ce,0x3bb9b501,
    0xccca8ba0,0x0e5d4c2b,0x04882e48,0x2882c48b,0x407c40c0,0x640a6039,
    0x790be61d,0x0b115590,0x217541b9,0x744954f8,0x883f32c3,0x3a072124,
    0xe8878921,0x40f88000,0x5c198049,0x320fa80f,0x870a9f83,0x40fa80fb,
    0x23985d3f,0x530fe0f8,0x0fc34c24,0x12a07cc9,0x883e20a0,0x0e38aa85,
    0xc97e209f,0x810ade83,0x5f17e04f,0x428303ba,0x7579532f,0x7c43f05b,
    0x3c81f120,0x3e21f620,0x323b06e0,0x203f98e6,0x3e60f26f,0x203f981f,
    0xff98f47e,0x4c4b7003,0xf80ab99d,0x2c4906c3,0x21ea0174,0x479160f8,
    0x02fa8e4d,0xd103c9f6,0x202fa85f,0xfd306c7d,0x480e803d,0x22274032,
    0x102a291a,0x8879803f,0x7c6a960f,0x203f98e1,0xda80f26d,0xd80fe63f,
    0x2ffb8247,0x24710350,0x525309d0,0x401f982a,0x910f8879,0x144f51e4,
    0x323e813e,0x89f22a03,0x4717a04f,0x8283f440,0x3ceccdda,0x490e42e8,
    0x2017c448,0x920f8879,0x05cbb11f,0x90fcc1f6,0x3e151887,0x0fcc1f21,
    0x107a8482,0xf01c42e0,0x1f120f81,0x43cc02e8,0xace960f8,0xd02174ca,
    0x1e43d889,0x234c5522,0x426c44e8,0x84b83d0a,0x80d49038,0x490fc468,
    0x202640f8,0x2e0f8879,0x2b265930,0xbec88190,0x443c81ec,0x901bbcde,
    0xf105d97d,0x332b3767,0x2481f980,0x3f07900b,0x0b10f324,0x20f88698,
    0x40950048,0x07903fe9,0x04c006e2,0x00310820,0x0e008201,0x2a0d1234,
    0x3e212a02,0x12602440,0x320bf620,0x00000203,0x20000000,0x44855018,
    0x74435029,0x3eea21ba,0x731bb880,0xbc88005b,0x000ab721,0x00000000,
    0x50080400,0x0aa04020,0x26006662,0x080001aa,0x00002662,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00040000,
    0x10040400,0x22015300,0x20100a89,0x79501000,0xcb809101,0x9993002c,
    0x3ec40959,0x97d99730,0x07f50d40,0xf31b3024,0x76dfd49d,0xd51f624f,
    0x788f5009,0x4c0190b5,0x03aa01a5,0x307a80d7,0x900fa81d,0x80d407d0,
    0x97a13a3c,0x26c3d47c,0x79b54180,0x69320154,0x0680fd40,0x80fcc3d4,
    0x07d0900b,0x2649d048,0x545f31ec,0x30004c87,0x80489e6d,0x7402c8fc,
    0x2aa20605,0x0407e87a,0x545f40d4,0x74d50480,0x317c3d81,0x04cc990f,
    0x9255a214,0x21bf3001,0x13e21efa,0x7e99d980,0x240027c4,0x43fedce8,
    0x0157901a,0x3cc1f0f6,0xd885d264,0x350bb987,0x7764404c,0x07f503e0,
    0xa8f71ec0,0x0cec883f,0x3ee4e824,0x005e4240,0x3cc59936,0xf500ca64,
    0x6cec9100,0x53ea3661,0x003f882a,0x223d41f1,0xa85f304f,0x17c47d01,
    0x3fffee12,0x5d5f6c0e,0x6ee43cc0,0x9201e601,0xb1f4b76a,0x02f4095f,
    0x21ea0fa8,0x483f306e,0xa87d0fa0,0x4a9985c1,0x798045ec,0x2605edc8,
    0x2b70dc07,0x7c45f36a,0x403f201f,0x3d45f108,0x0fcc0fdc,0x3e23e812,
    0x2216a481,0x1e601ec1,0x4c0fe332,0x2d50e207,0x221bf15b,0xe8871efd,
    0x86f41986,0x40ed887b,0xe806a1f9,0xf12416a3,0x9d05979d,0x55d87a80,
    0x240f505f,0xf716c744,0xffd319df,0x77bdb103,0xf9bfb305,0x2eb36e07,
    0xd50120cd,0x06a01777,0x2aa60353,0x547fb101,0x23ff8aee,0x00883fd8,
    0x04060151,0x10800880,0x00804c00,0x00020010,0x00000000,0x00000000,
    0x00000000,0x00000000,0x80000000,0x03793000,0x76c073b2,0x82ae605e,
    0x81eeeeea,0x4cc418a8,0x04403310,0x2a0bbba8,0xced98bed,0x6d4336e1,
    0x8eed41de,0x2013aa28,0x3790b668,0x599950fb,0x66740f20,0x2ae20fcc,
    0x22fcc7e9,0x89d5702d,0x3f70ee3a,0x54341fcc,0x3dc3b03f,0xa9360136,
    0x481f3046,0x83104c80,0x0f516458,0x279058d7,0x8d316c48,0x222f43f8,
    0x2160bd04,0x17c026c0,0x516603f3,0x03ea017f,0x2a3c2b80,0x40a65f07,
    0x643b202e,0x23ec6d83,0xa81f701b,0x0554c802,0x817c43f3,0x1ff6540d,
    0x401ed6f4,0x0f51ea0e,0x7cc425ae,0x57dd101b,0x2fe87ea0,0x2c4f8816,
    0x3fcbcc80,0x10fe07d4,0x3f201dfb,0x06e9a7c1,0x543f3162,0x1097f107,
    0x220159f5,0x54fe01ff,0xc80715ea,0x2e400e67,0x221f98d7,0x407f302f,
    0xf987e64c,0x1bd05700,0x00fc81f2,0xe8d880be,0x5d2d902f,0x7cc00b8f,
    0xc8530192,0x98be1aa4,0x9817201f,0x2f887e25,0xbfd301d0,0x202c40f5,
    0x6d8b202f,0x3e293f30,0x16db005a,0x54990fec,0x01ea3d87,0x3e254057,
    0x02c407c2,0x05503d42,0x887e02f8,0x6c3df00f,0x5bf5003e,0x24c8aa20,
    0x0b25a87a,0x1b114681,0x5c1665b8,0x2c0f5002,0x479017c0,0xf51f2058,
    0x20374001,0x20f526c3,0x77c44bdb,0x37fa20cc,0x1959900c,0x3dc00360,
    0x3e007bea,0x2eaee202,0x0d112600,0x30603b80,0x07fb13dd,0x00100600,
    0x44002004,0x002a22aa,0x1003bf71,0x00020200,0x00000000,0x00000000,
    0x00000000,0x00000000,0x0ef6d400,0xcb839b71,0x06edc41c,0x000736e2,
    0x217bd710,0x3221deda,0x9dd931ce,0xddd50179,0x265ddddd,0xd930ceed,
    0x2b7b2617,0x9bdd9300,0x1d01fb85,0x260ba3b8,0xb801d05f,0xf50bd000,
    0x5f30b309,0x45703b66,0x5fb0ea5d,0x03f983b8,0x4bf32f98,0x3d0b00fa,
    0x1ff442d4,0x8027c02c,0xc81f905e,0x3ea2f880,0x83176143,0x441266e8,
    0x22f8802f,0x201f51fb,0x1f107cc5,0x2c2fcc88,0x7401faa0,0x1d4bd105,
    0x0fe62f88,0x9f300bb0,0x017c40b1,0x25f517c4,0xf88b00fa,0x2910be23,
    0x3b0161fd,0x40bd005f,0x7c40b3fa,0xbb003f62,0x8037ee00,0x2f8802f8,
    0xb00fa9f6,0x207ccbb0,0x161dd148,0xd00db398,0x00cfc80b,0x00ff77e2,
    0x0dd002ec,0xf8802f88,0x3ea1ddac,0x5d910b00,0x7c4910db,0xfa8640b5,
    0x2202f401,0x457c404f,0x00bb003f,0xf8813f2a,0x08af8802,0x00b01f98,
    0xfa89109d,0x333b105c,0x804e809f,0xa97c404f,0x805d801f,0x2203f748,
    0x02f8802f,0x202c0be2,0xb84880ea,0x5557707f,0x01f401f9,0x8be2027c,
    0x02ec00ed,0x101dd06c,0x2f88a05f,0x015c2ec0,0x412201d3,0x7f10b07d,
    0xf003d4a8,0x222f9809,0x2037406e,0x442fcc1d,0x3e60c83f,0xcbbdd802,
    0x20175303,0x70d02ec8,0xfa83f605,0x77e4403b,0x43dfb302,0xffb83ef9,
    0x5c2fea83,0xffb11dff,0x6ccddd9b,0x011001df,0x81000008,0x7f4c1cfa,
    0x0000221d,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x26000000,0x9d932dec,0xcccdeb81,0x5bd930dd,0x302fb6e2,0xdcccec98,
    0x99bd931e,0x7764c7b9,0xc980abcd,0x8f7a202e,0x1cdcdec9,0x5c1ef64c,
    0x41deb885,0xc81ec2f9,0x3e61fd40,0x84986d82,0xf315c2f9,0x17cc4885,
    0xdf303db1,0x7cc2fdc0,0x9f117a62,0x5790bd50,0x917c41fb,0x17e21405,
    0x31b20be2,0x17cc13bd,0x8305f10c,0x41fd82f8,0x9fb02fd9,0x1fb85f10,
    0x445c81fc,0x25f127c1,0x07ec002c,0x236417c4,0x3e609dd8,0x10be2022,
    0x9f105f10,0xaa86db98,0x542f884f,0x5b81fc2f,0x2be24c80,0x17d4002c,
    0x86c82f88,0x122f984d,0x88488be2,0xb98dd02f,0x84fac1fa,0x21ba22f8,
    0xd00b703f,0x017f7c45,0x7c409f10,0x86eccccd,0xeeef984d,0xeccdf887,
    0xfb02f885,0x9d4bd398,0xdcdf884f,0x703f80ef,0x7c45980b,0xdb002fda,
    0x6417c401,0x2f984d86,0x070be20e,0x31fa05f1,0x9f2c7ea7,0x7ec45f10,
    0x05b81fc1,0x6cbe2064,0x00fdc02f,0x21b20be2,0x022f984d,0xf1010be2,
    0x47317e05,0x213e39cf,0x22fc42f8,0x5c0b703f,0x3f62f881,0x8609f302,
    0xc86c82f8,0x2017cc15,0x7c4302f8,0x1cc1fb82,0x427c1bf7,0x237c42f8,
    0x2a0b703f,0xfd85f302,0x43706e83,0xa86d82f9,0x2017cc5f,0x260c82f8,
    0x4c1fd42f,0x09f13e24,0x22fc85f3,0x50d703f8,0xb3373337,0x3ff623bf,
    0x999bf92d,0x6feccfd9,0x002ffea1,0x2603bfb3,0x5ecccefc,0x3333bf66,
    0x22ed980c,0x45df910c,0xdddcefd9,0x50bbf222,0x7ffd45fd,0x000006ff,
    0x00000000,0x00000000,0x00000000,0x107c4000,0x14420000,0x42662331,
    0x21331098,0x22133198,0x00351009,0x409a9805,0x06600aa8,0x84cc4298,
    0x507ec019,0x3260005b,0x53e61f73,0x21d10de8,0xe88e46e8,0x22f21b24,
    0x1902404d,0x546c43d1,0x3645cc2e,0x443ee2e6,0x5c05d0fd,0x0bda80fa,
    0x4082da80,0x4299aa5c,0xa936247a,0x80d70f86,0xd0ccd104,0x5f123dc3,
    0x7443d0ec,0x22e602ac,0x0332600f,0x4c003991,0x4125f70f,0x24d8352f,
    0x01f6a06a,0x26177409,0x7447e60f,0x0d11aaaa,0x14809f30,0x29d1001f,
    0x7d0001eb,0x6c81d72e,0x43549b09,0x7647a8c9,0x25eeefee,0x1f50dfd8,
    0x540f53f8,0x206e800f,0xa801f10b,0x005ecc2d,0x3e62fae0,0x075f101b,
    0x9e23549b,0x0882407a,0xf0be29f5,0x2230be23,0x3a2e0c2f,0x03e22984,
    0x91007322,0xf8828839,0x1fb017a4,0x51f62b90,0x4805f21f,0xbb1dc910,
    0x22ff634c,0x2e2bf61b,0x217ccaa0,0x4ffffffd,0x88001993,0x360f72db,
    0x09500ee1,0x0fef3be6,0x405f5bfd,0x1959f104,0x206df744,0x6442efc8,
    0x4c7ea2ef,0x266622ff,0x000309fa,0x00100860,0x80210020,0x1100e000,
    0x00200440,0x7c400001,0x00000000,0x00000000,0x00000000,0x40000000,
    0x980880f8,0x26219999,0x0298c428,0x5442aa31,0x00006e00,0x44000035,
    0x2233080a,0x22221999,0x00008888,0x26b6225c,0xf99f54f9,0x3f373ea5,
    0x75defcc3,0x880fdcad,0x7b0e884b,0x32e7f8ba,0x24cccccc,0x336f226c,
    0x7cd76512,0x777714ff,0x00017777,0x22b57579,0x20db1b60,0xbb0d70dd,
    0x905f0fd4,0x3a1f30aa,0x005c47f3,0xb8830d80,0x000000bd,0xdddc9800,
    0x26c0fb81,0x321ea4d8,0x43e83e64,0x6cf1122a,0x531c45d2,0x05555555,
    0x00000003,0x6e64c000,0x6417cc1c,0x43d49904,0x3e83e64c,0x5cb0e22c,
    0x2620c191,0x00999999,0x00000000,0x5dd5e400,0x26413a25,0x321ea4c8,
    0x23e83e64,0x1860b81a,0x00000006,0x00000000,0x236c25c0,0x526c1362,
    0x07ccb90f,0x0000007d,0x00000000,0x10000000,0xcccdfb81,0xf985fd55,
    0x263fd89e,0x8bfc8aee,0x00001dfa,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_18_usascii_x[95]={ 0,1,1,0,0,0,0,0,0,0,1,0,0,0,
1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,
-2,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,2,1,1,0, };
static signed short stb__times_18_usascii_y[95]={ 14,2,2,2,2,2,2,2,2,2,2,4,12,9,
12,2,3,3,3,3,3,3,3,3,3,3,6,6,4,6,4,2,2,2,3,2,3,3,3,2,3,3,3,3,
3,3,3,2,3,2,3,2,3,3,3,3,3,3,3,2,2,2,3,16,2,6,2,6,2,6,2,6,2,2,
2,2,2,6,6,6,6,6,6,6,4,6,6,6,6,6,6,2,2,2,8, };
static unsigned short stb__times_18_usascii_w[95]={ 0,3,5,8,8,13,13,3,6,5,6,9,4,5,
2,5,8,6,8,7,8,8,8,8,8,8,3,3,9,9,9,7,15,12,10,11,12,10,9,12,12,6,7,12,
10,15,13,12,9,12,11,8,10,12,12,16,12,12,10,4,5,5,8,10,4,8,9,7,9,7,8,8,9,5,
6,9,5,13,9,8,9,9,6,6,5,9,8,12,8,9,7,5,1,5,9, };
static unsigned short stb__times_18_usascii_h[95]={ 0,13,6,13,14,13,13,6,16,16,8,9,5,2,
3,13,12,11,11,12,11,12,12,12,12,12,9,11,9,5,9,13,16,12,11,13,11,11,11,13,11,11,12,11,
11,11,12,13,11,16,11,13,11,12,12,12,11,11,11,16,13,16,6,2,4,9,13,9,13,9,12,12,12,12,
16,12,12,8,8,9,12,12,8,9,11,9,9,9,8,12,8,16,16,16,3, };
static unsigned short stb__times_18_usascii_s[95]={ 127,97,69,118,75,1,15,65,21,1,10,
75,75,108,105,64,11,112,119,20,1,28,37,46,84,14,30,123,20,80,10,
110,41,37,94,29,65,54,44,51,25,105,50,1,107,78,23,84,118,57,71,
101,83,1,110,93,94,58,14,70,80,35,56,114,90,66,70,109,41,101,75,
86,1,121,28,111,105,42,32,92,95,55,25,85,38,56,47,34,117,65,17,
15,13,7,95, };
static unsigned short stb__times_18_usascii_t[95]={ 1,1,80,1,1,18,18,80,1,1,80,
70,80,80,80,18,32,58,58,32,70,32,32,32,32,45,70,32,70,80,70,
1,1,45,58,18,58,58,58,18,58,58,45,58,45,58,45,1,45,1,45,
1,45,45,32,32,45,45,58,1,18,1,80,80,80,70,18,70,18,70,32,
18,32,18,1,18,18,80,80,70,18,32,80,70,58,70,70,70,70,32,80,
1,1,1,80, };
static unsigned short stb__times_18_usascii_a[95]={ 65,87,106,130,130,217,202,47,
87,87,130,147,65,87,65,72,130,130,130,130,130,130,130,130,
130,130,72,72,147,147,147,115,239,188,173,173,188,159,145,188,
188,87,101,188,159,231,188,188,145,188,173,145,159,188,188,245,
188,188,159,87,72,87,122,130,87,115,130,115,130,115,87,130,
130,72,72,130,72,202,130,130,130,130,87,101,72,130,130,188,
130,130,115,125,52,125,141, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_18_usascii_BITMAP_HEIGHT or STB_FONT_times_18_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_18_usascii(stb_fontchar font[STB_FONT_times_18_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_18_usascii_BITMAP_HEIGHT][STB_FONT_times_18_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_18_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_18_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_18_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_18_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_18_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_18_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_18_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_18_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_18_usascii_s[i] + stb__times_18_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_18_usascii_t[i] + stb__times_18_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_18_usascii_x[i];
            font[i].y0 = stb__times_18_usascii_y[i];
            font[i].x1 = stb__times_18_usascii_x[i] + stb__times_18_usascii_w[i];
            font[i].y1 = stb__times_18_usascii_y[i] + stb__times_18_usascii_h[i];
            font[i].advance_int = (stb__times_18_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_18_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_18_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_18_usascii_s[i] + stb__times_18_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_18_usascii_t[i] + stb__times_18_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_18_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_18_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_18_usascii_x[i] + stb__times_18_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_18_usascii_y[i] + stb__times_18_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_18_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_18_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_18_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_18_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_18_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_18_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_18_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_18_usascii_LINE_SPACING
#endif

