// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_31_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_31_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_31_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_31_usascii_BITMAP_HEIGHT         96
#define STB_FONT_courier_31_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_31_usascii_FIRST_CHAR            32
#define STB_FONT_courier_31_usascii_NUM_CHARS             95

#define STB_FONT_courier_31_usascii_LINE_SPACING          15

static unsigned int stb__courier_31_usascii_pixels[]={
    0x00401540,0x15000005,0x591002f2,0x764064e2,0xdd2a83ee,0x3b2605dd,
    0x8ee003df,0x0018800d,0x80008000,0x08020000,0x00200040,0x03500020,
    0xa81cccb8,0xdd001ccc,0x0ba05a80,0x31f88000,0x867c40bb,0x5530bb5a,
    0x7f2f889b,0x37f70155,0x9001db73,0xff3007c7,0x764c09fd,0xffe9801c,
    0x7fe5403f,0xeca800cf,0x207ec4ff,0x203effd8,0x403dffd8,0x003effeb,
    0xcdfb80bd,0x02eeca81,0x05a80dd0,0xb80001aa,0x89700f85,0x5c03f35a,
    0x401f3644,0x01f900ec,0x5403e2d8,0x2213662f,0x5401b30d,0x06eb89cf,
    0xfb5113bd,0x88dfe401,0x9f30ff41,0x77413aa1,0xdb04ea8a,0x00bf9117,
    0x80b700bd,0x0ee000f8,0x4e77fdc4,0x80001742,0x5b02d81f,0xb817a5a8,
    0x00f8fe24,0x05c801f3,0x3a07896c,0x0dc0f882,0x817c40e6,0xbd01d43e,
    0xb001bd10,0x7c426c3f,0x42d82d41,0x700fe06c,0xb807e007,0xbf300004,
    0xb8bfb515,0x06a80005,0xb50b605b,0x24b807d4,0x7403e0fb,0x201f8803,
    0x16e0f11e,0x0582c2d8,0x0035c0d7,0x801721ea,0x201f30fd,0xf8816c4c,
    0x06b807e0,0x4416e000,0x7b00000f,0x007e1720,0x0b605d00,0x7f16a16c,
    0x7c4e92e0,0x2e007880,0x834c7a04,0x3712e02d,0x409903a8,0x23cc0079,
    0x3f6000fa,0x13cc0d90,0x050ec01f,0x40000788,0x2605b81f,0x4ccccccc,
    0xb81881e6,0x81aa0005,0x5a85b02d,0xf34b836c,0x05a80f85,0x30f816a0,
    0x2a607a0d,0xea97444d,0x2dc0f300,0x07913200,0x01367c80,0x5701a61f,
    0x3223cc00,0x2e003ccc,0x32201f85,0x27cccccc,0x7c4000f8,0x405d0000,
    0x5a85b02d,0xca5c07e4,0x25c07c0f,0xffd8f100,0x5fffffff,0xeefd883e,
    0x40bdb884,0x3e20fe29,0x83d91002,0xd3e4000e,0x07e1e805,0x136004e8,
    0x00db9991,0x0016e1f8,0x0026c788,0x3cc00264,0x20fc1320,0x5c0fd45a,
    0x901f0fb4,0x4c3c4009,0x19dc99f9,0x2e1b71e2,0x39d73004,0x7ed5f744,
    0x0efed803,0x7dfd73c4,0x401f9ee0,0x75c13a2d,0x500d7005,0x3e5b800d,
    0x11e20001,0x10037bfb,0x03d8001f,0x6c985fcc,0x417cc5a8,0x01f0dd4b,
    0x834c00b7,0x1e212e78,0x93025c1f,0x7fd4039d,0xb73006ff,0x5db6985f,
    0x4d709f71,0xf316c00f,0x8069eb85,0x06a800eb,0x005b9f80,0xca883c40,
    0x026c03fe,0xfb001f30,0x16a0bfa7,0x3a9707f3,0x06980f86,0x934c16a0,
    0x234cf107,0x0e764c4b,0xda85f5c0,0x8fe6000e,0x2f885de9,0xd801f354,
    0x77677d42,0x075c0698,0xb8006a80,0x440001fd,0x40bb1007,0x099000f9,
    0x0fa81d70,0x20bea2d4,0x01f0fb4b,0x11f4007e,0xbb55d955,0x83e3c455,
    0x2a072a4b,0xb900fa82,0x3e0f8800,0x5a8b900e,0x103d007a,0x702d4375,
    0x0354001d,0x80005f80,0x007c0078,0x01f1007b,0x507a07b0,0x4b81fb8b,
    0x700f81f9,0xe98d500b,0xeefeefee,0xbeb8f10d,0x56d404c9,0x981321db,
    0x3a2d8007,0xd821e602,0x8003e202,0x001d903b,0x3d0006a8,0x14f10000,
    0x0d300f40,0x0b600990,0xf916a16c,0x07ee9701,0x80fa201f,0xe92e02e8,
    0xec981f02,0xd2c2c07e,0x4001e805,0x6980b64b,0x0f502640,0x7640fc40,
    0x006a8000,0x100005b8,0x0d5017cf,0x07c405d0,0x85b02d80,0x4b82ec5a,
    0x200f85f3,0x1fcc0de8,0xd01e92e0,0x41d40003,0x7cc09b1c,0x971fc000,
    0x1aa01e40,0x176005c8,0x540003b6,0x001e8006,0x17fcf100,0x35401f4c,
    0x16c00b70,0xf12d42d8,0x45d92e05,0x77e4400f,0x3c802ffd,0x0026403e,
    0x2a1b0930,0x0c4d900f,0x03d03ee0,0x2e85307e,0xf7001e88,0x00405d81,
    0x0d5001aa,0x5d3c4000,0x05bfbbf9,0x01f81740,0x216c0b60,0x4b81ee5a,
    0x000f83ea,0x640017f9,0x07cc03e3,0x2c41b000,0x0fc98bb6,0xf93077a2,
    0x2617d305,0x527fcc6d,0x402ec43f,0x4f640ee9,0xf9999999,0x3ae66620,
    0x7fec1999,0x0006ffff,0xec882788,0xb86a8001,0xd816c005,0x409f2d42,
    0x01f27c4b,0xabccfd88,0x44b60b50,0x2206e407,0x6e6cc00a,0xfeffb80d,
    0xddfd700e,0x7f5403df,0x7fcc0dfe,0x27f7fd44,0x1f7f77c4,0xffffffd8,
    0xff50ffff,0xffffffff,0x4ccccc4d,0x78800009,0xf80016a0,0xf1001741,
    0x556a2d40,0xf712e00f,0x37fa007c,0x2effecbc,0x101e25d0,0x1dfb79db,
    0x31002200,0x2a620015,0x802a2000,0x002a6029,0x00000033,0x00000000,
    0x016a06a8,0x01aa5b80,0x77403fc8,0x2e0fab52,0xf3e84ecc,0x80103999,
    0x00705c00,0x0002f32a,0x00000000,0x00000000,0x00000000,0xb0000000,
    0x0002d409,0x800ba1f1,0x2233000a,0x2aaaa051,0x55551881,0x00000003,
    0x00000000,0x00000000,0x00000000,0x00000000,0x1db30000,0x20000c40,
    0x00000020,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xdfffffb8,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x4c000000,0x00000199,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x8f7fb220,0xfb700ccc,0x0f32639b,0x444eea80,
    0xeeeeeeee,0x0bdb30ee,0x5c999100,0x3a01beed,0x2eeeeeee,0x6d440000,
    0x5dd71bcc,0x0bdb3000,0x44003800,0x2004eeed,0x000bdfdb,0x930176c4,
    0x7edc4009,0x2a0172de,0x9acfa80b,0x0ccf8dda,0x5d4d6f4c,0x003cebaf,
    0x5f1172a2,0xf5555555,0x4003dd41,0xaed8fcc8,0x7f04fb99,0x81555555,
    0x01dffeda,0xccaadfb8,0x0007b533,0x4000f751,0xaaa80069,0xbdd8805c,
    0x2004eb99,0x7e4c3edc,0x9f5005de,0x3fdd9535,0xf88fff70,0x101fd701,
    0x17ba205f,0x3445a800,0x01e21e60,0x103ef880,0x2001f09b,0xfda89bee,
    0x4003e203,0x1e20003c,0x00069800,0x13e202d4,0x7cc01f44,0xa8de43d8,
    0x201fa805,0xfffd81fd,0x1fb00f60,0x5f9809b0,0x0016a000,0x001e212e,
    0x7c405f88,0x0f8007c1,0x12e01f50,0x20003c80,0x1a600078,0xc80b5000,
    0x200f4404,0x5a807b3d,0x22017cc0,0x24fe981e,0x80f98078,0x005d800f,
    0x3a0016a0,0x20007882,0x43c801f8,0xe80b000f,0x64007903,0x01e20003,
    0x333f72e0,0xa802cccc,0x2003e605,0x3d9aa06a,0x13202d40,0x1a6000c0,
    0x0d303e20,0xca8816e0,0x00b50bde,0x54f10788,0x2201ceec,0x0f8b5007,
    0x54970000,0xccccdecc,0xdb53c80c,0x4788019d,0x5c0cccc9,0xcccccfdc,
    0x205a801c,0x403a004c,0xb500f62e,0x00001e80,0x1f100d30,0x0b900788,
    0x32a6b7a2,0x5c005a9f,0x2fb2f105,0xf104fb99,0xaf8b5001,0x000cefec,
    0xbd99516c,0x90199999,0xdb537d97,0x3a63c401,0x0d300ccf,0x3605a800,
    0x2e076002,0x16a01ec5,0x00000788,0x03ea007c,0x2176003e,0xbbd303e8,
    0xf102d800,0x20fa209b,0x43c802f8,0xfeb9bdff,0x201f5001,0x17f2003c,
    0xa8f102e4,0x0069802f,0x03d02d40,0x07e21e40,0x205a807b,0x40000069,
    0x407f404c,0x42fd405c,0x02fcc04c,0x37c403e0,0xdf107e20,0x0040f980,
    0x1ed980d9,0x5c800f20,0x27881e60,0x0d3001ec,0x3e05a800,0x9912e000,
    0x05a807b0,0xf10001a6,0x83f883ff,0x9d00fcd8,0x3a177ea0,0x2005d800,
    0x00be205a,0x1bbf10f2,0x88007d30,0x007fd02f,0x01e40079,0xedbc403e,
    0x001a6000,0x01740b50,0x407cc590,0x302d403d,0x3fffe60d,0x13fee1ff,
    0x7e5e7744,0x3f6201f4,0x5b9eecbc,0x05c803c4,0x0f880f20,0xcbc45a80,
    0x02fdbbcf,0x03e07b00,0x79001e40,0xdf100f80,0x0698005f,0x7902d400,
    0x07d0f400,0x40b500f6,0x26666078,0x007fec3e,0x0f86f32a,0x855e5cc0,
    0xb8034c5b,0x8803e005,0x788b5007,0x002b32a2,0x01d04b80,0x3c800f20,
    0xbf8807c0,0x1a6001f9,0x5c0b5000,0x7c4f3006,0xefeeeeee,0x3d016a05,
    0xff887a00,0x007c0002,0x00f0b700,0x034c0172,0x12e007e2,0x400000f1,
    0x3c80003c,0x1f00f200,0x01f99e20,0xa8000d30,0x6c017405,0x55555544,
    0x16a01cea,0x87a00b90,0x4c0005fa,0x42dc0007,0x02fc402d,0x27c403c8,
    0x01e21740,0x002e8000,0x32003c80,0x78807c03,0x0f800fcc,0x5016a000,
    0x0035c03f,0x00b500f6,0x643d007d,0x2ec0001f,0x2a16e000,0x017f200f,
    0x3fe200f4,0x1e216e01,0xb8032600,0x20035106,0x00f2003c,0x2a1e201f,
    0x40cb801f,0x16a02ea8,0xd710bee0,0x403d8001,0x0de9805a,0x01e43f50,
    0x001d9300,0x3d505b80,0x01dbdd88,0x3ea2034c,0x80fc82f9,0x5fb00078,
    0xff103f70,0x3666203f,0x9809999c,0x9f9880cd,0xfb83d440,0x3bf6201a,
    0x4c42efed,0x1999eb99,0x9fdbfd30,0x5ecc4001,0x4f5cccc0,0x3ff20099,
    0x002dfede,0x3ffffe60,0xffb0000d,0xfd50bfff,0x3fea9fdb,0xf9812e06,
    0xfdbfd37f,0xffff981b,0x3aa001ff,0x300efeef,0x3fe03fff,0x7fffffff,
    0x217fffdc,0x3e67fffe,0xffffa87f,0x501a9803,0xffffffff,0x0d440dff,
    0x7fffd400,0x3fffffa7,0x4401ffff,0x000009aa,0x00001331,0x01333331,
    0x00000d44,0x00554400,0x00133331,0x4c0054c0,0x0000001a,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xca800000,0x3ccccccc,
    0x88b3332e,0x300ccccc,0x2e19dfb7,0x3dfeda80,0x33332a15,0xccccc983,
    0x333332a0,0x66644ccc,0xcccccccc,0x0399911c,0x21999991,0xccccccca,
    0x6665402b,0x23ccc983,0xa84cccc9,0x9933cccc,0x05799999,0x99999997,
    0x6665c199,0x07333222,0x332e0350,0xcccccccc,0xa82ea0cc,0x2aa605ee,
    0x22aaddaa,0x221aafba,0xb80addaa,0xbfeb9acf,0x4d6fec1e,0xf732eeeb,
    0xb5510557,0xaaadc85b,0x3e27baaa,0xaaecaaaa,0xf7513daa,0x2bb2aa0d,
    0x555bb530,0x2601bfb7,0xea881bfc,0x2abb222e,0x1ecaa982,0x7555d953,
    0x55543dfb,0x0aaaaeca,0x5506b76a,0x3bf2037f,0x6ed4c3ff,0xaaaaaaaa,
    0x54fff71f,0x25c006ff,0x09700f10,0x7f4403aa,0x7e403ee1,0x1f8016c2,
    0x893603c8,0x43c85a87,0x16a04df8,0x06d88264,0x01f3026c,0x425c00d3,
    0x01d9105a,0x0132016a,0x183a601f,0x47a00f20,0xff30fffd,0x204b800b,
    0x984b8078,0xb0fd400f,0x2a17c409,0x7906a805,0x50f11aa0,0x8f88790b,
    0x320b500f,0x880be204,0x102f882e,0x0790310f,0x504e80b5,0xf809900b,
    0x64005b00,0xfd31e803,0x001ffc49,0x8078812e,0xb003c84b,0x02e00f41,
    0x207b003e,0x441f883c,0x43c85a87,0x16a0b778,0x01320264,0x404d83f3,
    0x360ff40f,0x35405a82,0x04c805a8,0x002d807c,0x003600f2,0x97000bfe,
    0x25c03c40,0x3d800074,0x44079000,0x7b01300f,0x3216a1e0,0x505d3c42,
    0x5b01320b,0x1721d500,0x3cf887a0,0x202d40f4,0x900b505a,0xb500f809,
    0x0a61e400,0x000ff400,0x8078812e,0x0003c44b,0xd30007f3,0x2e002dc0,
    0x802d4006,0x16a1aa78,0x00f70264,0x4007d6e4,0xf16b6e2d,0x3d80b501,
    0x09900b50,0x007a00f8,0x0012e1e4,0x2e0007ec,0x2e01e204,0x200034c4,
    0x00acdfc8,0x005d01e8,0x2a0007cc,0x3d8f1005,0x224c82d4,0x4000deb9,
    0x479001fe,0x41e0f8bd,0x40db105a,0xccec805a,0x00fccccc,0x3b200dd3,
    0x0004dccc,0x097000f7,0x225c03c4,0x26000069,0x2e00efdb,0x74006985,
    0x005a8002,0x2a0f88f1,0xfffff905,0x3fa0005f,0x87c79001,0x3aa0f12d,
    0x0cfecccc,0x372016a0,0xfaaaaaaa,0x23d9ec80,0x556e43fa,0x804404da,
    0x12e00dc0,0x44b80788,0x20000069,0x81f101fb,0x0172003c,0x78802d40,
    0x6416a5c8,0x40027cc4,0xb800fadc,0x69a5cd34,0x59999d50,0x900b5001,
    0x7c40f809,0x03361f10,0x2a04b879,0x02d805ff,0x00f1025c,0x000f8897,
    0xd8132000,0xea8007c3,0x2d402980,0x1f887880,0x221320b5,0x43aa005e,
    0x975a805c,0xb505ab4c,0x402d4000,0x2a07c04c,0x407c6dc5,0xfb00c43c,
    0x02d801ff,0x003e0264,0x0005d079,0x40d30033,0x44016a69,0xa809701f,
    0x2a0f1005,0x81320b56,0x41f9803e,0x2eb4c04d,0x5a825cfc,0x2016a000,
    0x2e07c04c,0x7905de84,0x06ffb800,0x017402d8,0x505f0136,0x2e31001d,
    0x7405b806,0x136005b1,0x02d404b8,0x2afa0788,0x7c409905,0x220fa201,
    0x3e3e202f,0xa81e5e40,0x016a0005,0x881f0132,0xc817d40f,0x00298003,
    0x007cc09b,0x206b81ee,0xb97cc05d,0x00fe202f,0x2e00f197,0x2a025c06,
    0x4c0f1005,0x809905bf,0x9813605b,0x216fe00f,0x0b502dda,0x6402d400,
    0x66407c04,0x32077ba0,0x44000003,0x017cc0de,0x0fdc2ec8,0xf5107b60,
    0x10dff5c7,0x9f100db5,0x335f1009,0x09933333,0x133d7331,0xc80cfcc0,
    0x09cc985f,0x3f702fa0,0x403b2601,0x1ef883ee,0x0999eb98,0x4f5cccc0,
    0x0e644099,0x22057cc4,0xfe8cfdfc,0x26673663,0xf7000000,0x8005ffbd,
    0x01efdffc,0xdfdbff70,0xefe9ba83,0xb000cffd,0xfff1003f,0x9fffffff,
    0xffffffd0,0xffff903f,0xfc8bf10b,0xf501ffff,0x1ffff61f,0x207ffff2,
    0x81fd01fd,0xfffffffb,0xfffffb01,0x3ea3ffff,0x3fe25fff,0x015107ff,
    0x7fffffec,0x4c000007,0x54c0001a,0x13510001,0x026aa200,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x3333332a,0x2e2ccccc,0x1bcccccc,0x00333220,0x66547995,
    0x02cccccc,0x66666644,0x3ccca800,0x224ccc98,0x2ccccccc,0x333332a0,
    0xc93332a0,0x98000001,0x54028804,0xccca82cc,0xdfdb7300,0xdfb91005,
    0xccc88e39,0x3999500c,0x0f7bb6e0,0x56ed4c10,0x5caaaaaa,0x2aaabeea,
    0xfa881fec,0x16f7c03e,0x5555bb53,0x55403dfb,0x9804dfca,0xea882bfb,
    0x3eaaa22d,0x2a601aac,0x2e60aadd,0x037ea2ef,0x3f220000,0x5405a803,
    0xfcca84ec,0x99bdec80,0x2fee04eb,0x27dfdb9a,0x500cdfb8,0xfe983bf9,
    0x40efdaad,0x02645ffa,0x540f116a,0x40f5f02f,0x07904cda,0x9cc8035c,
    0x98172007,0x000f400f,0x105d8132,0x000019f9,0x540033ee,0xf8097005,
    0x407c4000,0x0ff100ea,0x103e005b,0x3636409d,0x01320fff,0x4c0788b5,
    0x02d8f80f,0x0f20995d,0x23d003d0,0x40ba002e,0x001e802e,0x02744264,
    0x0001fec4,0xa8003bf5,0xf8097005,0x443c8000,0x5c3d402f,0x21e22544,
    0x2a4e806c,0x202646ff,0x6c03c449,0x986a8f84,0x00f20996,0x2e698097,
    0x903e6005,0x0007a00b,0x004e8899,0x3001774c,0x2a0005dd,0xf8097005,
    0x13208800,0x305001f5,0x16a1fe8b,0x31ea00be,0x02989905,0x43c403c4,
    0x93d83d0f,0x5d00f209,0x03e23c80,0x03e65c80,0x32000f40,0x8000fe64,
    0x36201eea,0x2d40002f,0x07c04b80,0xeffffeb8,0x0002e44e,0x9267c4f1,
    0xccccf887,0x0fcccccc,0x02d44c80,0x207c01e2,0x87c4b70f,0x2207904c,
    0x6c0f806d,0x2e974003,0x90007a00,0x0000bea9,0xf9106fdc,0x55550007,
    0x55555d95,0x07c04b81,0xb302bba2,0x40003c89,0x6cf3971e,0x55557c41,
    0x0aaaaaaa,0xdcccec80,0xe803c405,0x321f07c1,0x67641324,0x806fedcc,
    0x4006a85a,0x74005cf9,0x7d664001,0x9100003f,0x006fdc9f,0x777776c0,
    0x41deeeef,0x3607c04b,0x12e26406,0x47a79000,0x01f01f1e,0xaadc8000,
    0x03c405ca,0x9907c1e8,0xb904c83e,0x9db95555,0x03f02d80,0x4000fc80,
    0x7764001e,0x0000ee99,0x322037ee,0x540000cf,0xf8097005,0x13200fc0,
    0xda8000d5,0x41a72e78,0x6400003d,0x1e202d44,0x883e07c0,0xc82645bf,
    0x44076403,0xeaaaaabf,0x00354004,0xd90200f4,0xa8006c81,0xfd8801ee,
    0x016a0003,0x0fd8834c,0x09f70174,0x3079009b,0x25fc497d,0x01801f88,
    0x04188990,0x21a201e2,0x3217ec0f,0x7b007904,0xdddddd70,0x6a800fdd,
    0x2601e800,0x04d82646,0x0005dd30,0x50005dd3,0x2617400b,0x07542fde,
    0x10737b66,0x0bf5019f,0x0fba0f7c,0xdb303fa8,0xb0099001,0x2dc03c43,
    0x320a207c,0xb5007904,0x02e803d0,0x3a001aa0,0x0991a601,0xfd8803e2,
    0xdea80003,0x8016a001,0xf2ffdeea,0xfdeec8bf,0x88bff94f,0x2efedefd,
    0x0fdc3ec0,0x3b7bf620,0x132003ff,0x407887a0,0x000f81f8,0x200f2099,
    0x5c034c4b,0x001aa005,0x6469807a,0x32213204,0x400000cf,0x5a800cfb,
    0x000a9800,0x44000d4c,0x000009a9,0x04d4c400,0x74026400,0x2e881e21,
    0x132001f0,0x0ba201e4,0x01f10079,0x3a001aa0,0x0991a601,0x006f43cc,
    0x0f910000,0x00000b30,0x00000000,0x00000000,0x26673260,0x21e99999,
    0xc99999fa,0x035f303f,0x260664c4,0x999999cc,0x0d7cc4eb,0x2017d310,
    0x099eb998,0x26ba6620,0x26a99999,0x7d009cc9,0x00000003,0x00000000,
    0x00000000,0x00000000,0xffffff90,0x23ffffff,0xeffffffd,0xffff701b,
    0xfffff30d,0x3fffff61,0x642dffff,0xf985ffff,0xfe80ffff,0x82ffffff,
    0xfffffff8,0xf96fffff,0xf503ffff,0x0000009f,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x9dfd7300,0x7f654071,0x7199303d,
    0x33b225dd,0x36a59900,0x99700cee,0x5c2dda87,0x65c0cccc,0x332e1ccc,
    0x06665c0c,0x99999995,0x00e60199,0xaa880000,0x544aaa62,0xaaaaaaaa,
    0x00642aaa,0xb98019b5,0xbbbbbbbb,0x9999973b,0x99999999,0x00000199,
    0x4d677440,0x7f907fdb,0x983db533,0xafaaeefc,0xd706c9ce,0xfb537d99,
    0x22db9703,0x2e4eabee,0x65c0ccfd,0x3bee1cee,0x0efedc0c,0x999999d9,
    0x402d40dd,0x9302fff8,0xf93ffcc0,0x37776abf,0xdddddddd,0x75c0f5c4,
    0xbacc1fca,0xffffffff,0x777756ff,0x77777777,0x00001777,0xf7035c00,
    0x3ea01b90,0x3ee0ef80,0x5fb80f44,0x4f4c0b90,0x01e8183f,0x82f98174,
    0x504c84e8,0x402d403f,0xff106ffb,0xa9bfe207,0x400004ff,0xa83aa1fa,
    0x4443f72f,0x08888888,0x00000000,0x580b7000,0x17200754,0x790d303e,
    0x3cc03ae0,0x4005ff30,0x101a605b,0xa81f447d,0x0541f982,0x7ec144b5,
    0x3f19d01f,0xff997fe0,0xfa800002,0xbfd10111,0x00000003,0x40000000,
    0x5b001bf8,0x81f03e00,0x9703c869,0x3f300f80,0xb00f8800,0xd17d1007,
    0x82f88007,0xdbdcbefc,0x82ffc0df,0x3a03ea5c,0x447fe23f,0xaaaaaaaa,
    0x2202aaaa,0x00001000,0x00000000,0x3ff62000,0x01e80bce,0x4c0f85b0,
    0x09703c86,0x00d300f8,0x03e21320,0x001ff440,0xfb500fa2,0xff3017bf,
    0x6c81d503,0x87fc2fd8,0xddddddda,0x004ddddd,0x00000000,0x00000000,
    0x3fb2a200,0x2d8007c2,0x321a607c,0x0f809703,0x22000d30,0x3002640f,
    0x4d8007df,0x407df300,0x01f984fc,0x741fc89b,0x00000007,0x00000000,
    0x00000000,0x1e87e600,0x40f83d00,0x9703c869,0x0d300f80,0x03e1ec00,
    0x27457cc0,0x3a005d80,0x1fd01f9b,0x0f4405d0,0x000970d3,0x00000000,
    0x00000000,0x01220000,0x9804c8f6,0x434c0f87,0xf809703c,0x4000d300,
    0x4c016e69,0x9013a22f,0x4b90260b,0x0005d06b,0x00000000,0x00000000,
    0x00000000,0x400f9800,0x880be23e,0x34c0f82e,0x404b81e4,0x000d300f,
    0x3003d2e8,0x209b105f,0x445b00eb,0x00016c0e,0x00000000,0x00000000,
    0x00000000,0x1ef98000,0x7cc0ec98,0xf984e983,0x332074c1,0x980e6440,
    0x333d302f,0x57540013,0x80bfa806,0x3ea0de98,0xd999999a,0x00000003,
    0x00000000,0x00000000,0x00000000,0x7f574400,0x100dffde,0x05ffbdfb,
    0x7cc9fff9,0x543ff22f,0x7dc3ffff,0xffff95ff,0x007fffff,0x3ee017f4,
    0x7ff42fff,0x3ffffa7f,0x002fffff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x8004d54c,0x00001aa8,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__courier_31_usascii_x[95]={ 0,6,3,2,3,2,3,6,8,4,0,1,3,2,
6,3,3,3,2,2,2,2,3,2,3,3,6,4,0,1,0,0,2,0,1,1,2,1,2,1,1,3,2,1,
1,0,0,0,2,1,1,2,1,1,0,0,1,1,2,0,0,0,3,1,5,1,0,2,1,1,2,1,1,2,
2,2,2,0,1,1,0,1,2,2,1,1,0,0,1,1,3,0,7,0,2, };
static signed short stb__courier_31_usascii_y[95]={ 22,4,5,4,3,4,7,5,5,5,5,7,17,13,
18,3,4,5,4,4,5,5,4,5,4,4,10,10,7,11,7,5,4,6,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,3,5,4,28,4,10,5,10,5,10,5,10,5,4,
4,5,5,10,10,10,10,10,10,10,6,10,10,10,10,10,10,5,5,5,12, };
static unsigned short stb__courier_31_usascii_w[95]={ 0,4,10,12,11,12,11,4,5,5,11,14,7,12,
5,11,11,11,12,12,12,12,12,12,11,11,5,7,14,15,14,10,12,17,14,14,14,14,14,15,15,11,15,15,
14,17,16,14,13,15,16,12,14,15,17,16,15,15,12,5,11,5,11,17,6,14,15,13,15,14,13,15,15,12,
10,14,12,17,14,14,15,15,13,12,14,14,16,16,15,15,11,6,2,6,12, };
static unsigned short stb__courier_31_usascii_h[95]={ 0,19,8,20,22,19,16,9,21,21,11,15,10,3,
5,22,19,17,18,19,17,18,19,18,19,19,13,15,15,6,15,18,20,16,16,17,16,16,16,17,16,16,17,16,
16,16,16,17,16,20,16,17,16,17,16,16,16,16,16,21,22,21,9,2,5,13,18,13,18,13,17,18,17,18,
24,17,17,12,12,13,18,18,12,13,17,13,12,13,12,18,12,21,21,21,5, };
static unsigned short stb__courier_31_usascii_s[95]={ 253,182,153,105,12,131,216,249,77,65,121,
159,133,200,250,36,187,219,211,156,206,94,169,49,144,199,243,247,144,164,129,
107,118,64,49,33,16,1,228,231,200,188,1,113,98,31,107,191,174,89,124,
48,92,17,61,157,141,82,79,83,24,71,141,213,180,189,62,204,33,235,118,
1,132,224,1,148,178,29,47,14,78,17,62,1,163,174,76,218,93,237,109,
55,62,48,187, };
static unsigned short stb__courier_31_usascii_t[95]={ 1,1,80,1,1,1,45,45,1,1,80,
63,80,80,63,1,1,26,1,1,26,26,1,26,1,1,45,26,63,80,63,
26,1,63,63,45,63,63,45,26,45,45,45,63,63,63,45,26,45,1,45,
45,45,45,45,45,45,63,45,1,1,1,80,80,80,63,26,63,26,63,26,
26,26,1,1,26,26,80,80,80,26,26,80,80,26,63,80,63,80,1,80,
1,1,1,80, };
static unsigned short stb__courier_31_usascii_a[95]={ 263,263,263,263,263,263,263,263,
263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,
263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,
263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,
263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,
263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,
263,263,263,263,263,263,263, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_31_usascii_BITMAP_HEIGHT or STB_FONT_courier_31_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_31_usascii(stb_fontchar font[STB_FONT_courier_31_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_31_usascii_BITMAP_HEIGHT][STB_FONT_courier_31_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_31_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_31_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_31_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_31_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_31_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_31_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_31_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_31_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_31_usascii_s[i] + stb__courier_31_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_31_usascii_t[i] + stb__courier_31_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_31_usascii_x[i];
            font[i].y0 = stb__courier_31_usascii_y[i];
            font[i].x1 = stb__courier_31_usascii_x[i] + stb__courier_31_usascii_w[i];
            font[i].y1 = stb__courier_31_usascii_y[i] + stb__courier_31_usascii_h[i];
            font[i].advance_int = (stb__courier_31_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_31_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_31_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_31_usascii_s[i] + stb__courier_31_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_31_usascii_t[i] + stb__courier_31_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_31_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_31_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_31_usascii_x[i] + stb__courier_31_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_31_usascii_y[i] + stb__courier_31_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_31_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_31_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_31_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_31_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_31_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_31_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_31_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_31_usascii_LINE_SPACING
#endif

