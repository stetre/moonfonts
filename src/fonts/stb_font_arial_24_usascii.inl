// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_24_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_24_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_24_usascii_BITMAP_WIDTH         256
#define STB_FONT_arial_24_usascii_BITMAP_HEIGHT         80
#define STB_FONT_arial_24_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_24_usascii_FIRST_CHAR            32
#define STB_FONT_arial_24_usascii_NUM_CHARS             95

#define STB_FONT_arial_24_usascii_LINE_SPACING          16

static unsigned int stb__arial_24_usascii_pixels[]={
    0x80b26073,0x1059502c,0x530a9819,0x2aaa6355,0xbcca9801,0x00ae0001,
    0x40159730,0x01310098,0x84c15100,0x4002a218,0x000acb98,0x0055e544,
    0x00abca88,0x00072e20,0xb8770154,0x1a80ea02,0x03f11530,0x13e0bff7,
    0x17213ff2,0x7ffe47f2,0x409fff74,0xffffffeb,0xf93002df,0xffc8017d,
    0xa81effff,0xa85f904f,0xbfffd103,0x3a7f25f5,0x2e00dfff,0x2effffff,
    0x7ffff540,0x7fe404ff,0x6404ffff,0x0dffffff,0x4e81fe00,0x889d01fc,
    0x643ffffd,0x3620d72f,0xef84f80f,0xeb81f881,0x2e9f7311,0xfe8809bf,
    0xd9510ace,0xfffd805f,0xdf901fff,0x3ffb7337,0x31fe0ff0,0x39fd109f,
    0x3f25fff9,0x05fd9bff,0xb5337ffb,0x3fea03ff,0x6fea99ac,0x7337dfb0,
    0x3bf20dfd,0x06fdb9ac,0x1fc41fe0,0x0be205f3,0x7fd539fd,0x02f88f5c,
    0x889f03f5,0x800bb04f,0x205f74fa,0xfb003fe8,0x3237ee05,0xdfb86f9b,
    0xc81ff500,0x2627cc2f,0x442fc84f,0x90ff92ff,0x00dfb87f,0xef983ff5,
    0xf10ff600,0x707fe01f,0x01fec0df,0x43f507f8,0x41f500fb,0x037c44fa,
    0x417d41b6,0x4c1fcc4f,0xf503102f,0x7ec0bee9,0x5fb00984,0x64f23fb0,
    0x003fe62f,0x44f98bf9,0x37ea21fc,0x7e41fa09,0xbf50bf92,0x2e007fc4,
    0x200ffc6f,0x027d46f8,0x0ffc49f7,0xf001ff10,0x4fe4cc4f,0xd809fd99,
    0x7f4075c6,0x1fd41310,0x227c17d4,0x207d83f9,0xba7d41fc,0x644fa82f,
    0x74df5fff,0x2790fe85,0xf003fb80,0x46f8fd0f,0xf13ffffc,0x7e4bea0b,
    0x3ee6f882,0x261fd004,0x9813005f,0x27d4007f,0x4ff00040,0xfffffffd,
    0x03f84fff,0x17e4ff30,0x20fe617e,0x7c1fcc4f,0xf507f205,0x1ba0bee9,
    0xfdf739fb,0x97e43e49,0x007f203c,0x4bee0ff4,0x6fdcc3fa,0x2a0bf31a,
    0x3a01f92f,0x6c00bf27,0x0009f52f,0x801bffe8,0x400003fb,0x37eaaa7f,
    0x41adfbaa,0xfda801f9,0x0dd0bf23,0xa89f07f1,0x9027cc2f,0xf74fa83f,
    0x3f23f885,0xf31ffd43,0x3dcff983,0x64003fa0,0xfdafc43f,0x7c44f980,
    0x3f25f707,0x0fecdf01,0x5f93fb80,0xfffb0000,0x3fb017bf,0x87f80000,
    0x40be63f8,0x7ffcc07b,0x1f617e43,0x3627c37c,0x901fd40f,0xf74fa83f,
    0xdf11f985,0x7c43ff10,0xbefffa83,0x2e007f81,0x5f8fd84f,0x3ff09f30,
    0x0bf25fd0,0x00fe93e6,0x07f69f50,0x3bbbbba2,0xfffd7301,0x001fe85f,
    0x7d43fc00,0x2f403ee1,0x8fff7260,0x40fec2fc,0x4d3e1df9,0x02fb83fd,
    0x29f507f2,0xa87dc2fb,0xf98fd03f,0x3fffaa02,0xc8007f43,0x2fdfa82f,
    0x9f709f30,0xdf92ff98,0x3f62fd81,0x327f7001,0xffff883f,0xda8802ff,
    0x00bf23ff,0xf70ff000,0x05f106c8,0xfc97f440,0xfb817e42,0x827d53e4,
    0x07f201fc,0xb0bee9f5,0x6f80fe4d,0x2f2007dc,0x0bf22ffc,0xff80ff40,
    0x7413e607,0x2fffcbef,0xff79fff9,0x9002fb89,0x4017ea3f,0x7d4002fc,
    0x2600fee6,0x764ff000,0xeffeeeff,0x0003ea3e,0xb0bf29f5,0x43bf701f,
    0x707f914f,0x20fe405f,0xd85f74fa,0x3ea03f66,0x9e403744,0x017ea5fa,
    0x7e403fe2,0xc813e604,0x92fbcfff,0x07dffb5f,0xff100bf3,0xfc8037c4,
    0xfd003fa2,0x3a017e61,0xff05713f,0x77777f64,0x1b23eeef,0x96f880c4,
    0xbf07e85f,0x40fc89f0,0x07f203f9,0x70bee9f5,0x3a0bf21f,0x2a07f22f,
    0x137c4f23,0xb2ea83ff,0x007e407f,0x5c3009f3,0x0223f92f,0xfc805fd0,
    0x6402ff45,0xf00bf22f,0x2a03fe8f,0x88bf30ff,0xf317c46f,0x7f413a03,
    0x5f95fa80,0x83f985f8,0x220fd44f,0x507f205f,0xf50bee9f,0xff917ea5,
    0x7fc13ee3,0x317e6790,0x7fecc5ff,0x202fc06f,0x7dc005f8,0x44003f92,
    0x0df903fe,0x9101bfd1,0x1ffcc5ff,0x7fcc4fc8,0x224fe982,0x517ee0ff,
    0x4c07dc3f,0xd09f501f,0xf88bf27f,0x4f83fa84,0x037417cc,0x74fa83f9,
    0x364f885f,0xefeeecff,0x4ff604ff,0xf307f93c,0xfffb99df,0x05fb5509,
    0x20059ff0,0x003f92fb,0xdcceff98,0xfd100efe,0xdffdb9df,0x9bfff505,
    0xf501bffb,0xbfff99ff,0xffbbffb0,0x83647b83,0x5eff407b,0x8bf25ffc,
    0x82fa82fa,0x6c1fcc4f,0xa83f900f,0xdd05f74f,0xeaa77641,0xf30662df,
    0x0dfdbbbf,0x6ffff5cc,0x3f62ffcb,0xbff7004f,0x7e4bee00,0xfdb88001,
    0x4400bdff,0x3efffedb,0x7fff6cc0,0x7f64c04e,0xf9102eff,0x8db05dff,
    0x880bb05e,0x643fffeb,0x7d41ba2f,0x1fc44f82,0x1fc81fcc,0x82fba7d4,
    0xd8001ff8,0xfffe983f,0x011000df,0x00dcc9b1,0x13100040,0x0c000062,
    0x00022000,0x440004c4,0x80260009,0x09804c08,0x4c002200,0xf05f702f,
    0xfb04f889,0x9f503f60,0x7fd40bee,0x09fd1002,0x0000cd88,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x1fd510db,0x13ff09f0,
    0x3a622f88,0x5d3ee627,0xfea809bf,0xca889bce,0x79003ffd,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x207e6000,0x09f04ffb,
    0x4d909ff7,0x3ff23ffe,0x09fff74f,0x7fffff54,0x2000cfff,0x00000008,
    0x00000000,0x00000000,0x00000000,0x00000000,0x07500000,0x02c80ae6,
    0x21910553,0x4ccc40ba,0x00133310,0x0026aea6,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xa8800000,
    0x8015c260,0x260001a9,0x0153100a,0x4c000153,0x00dc400a,0x2e600191,
    0x80998002,0x154401a8,0x4ccccccc,0x26597300,0x01aa800a,0x05542a88,
    0x0a986a60,0x2a802aa0,0x154002aa,0xe9800153,0xb3faefff,0xfffe980d,
    0x2fb8003e,0x0dffffb8,0x910007f2,0x3609ffff,0x0d905fdf,0x3ffffd10,
    0x7ffff900,0x7cc05f98,0x7ffffd45,0xfffb82ff,0xf5005f93,0x44fd801f,
    0x3fe206fc,0x7cc0fee0,0x64bf304f,0x26f9804f,0x3a2001fc,0x3fffc9df,
    0x3fe201f5,0x002feaae,0x37f217dc,0x3f25fc9a,0x4efe4001,0x97cc3fda,
    0x017c41f9,0x05fa97e4,0x7fdd77dc,0xf3017e63,0xcccdfc8b,0x8aff81cc,
    0x36005f90,0x41bee05f,0x85fd03fe,0xfff905f9,0x7f88fee0,0x3f22fc80,
    0x10ff6001,0x40be27ff,0x01fe84fc,0xef88bee0,0x1fc8fe40,0x3e1be200,
    0x87f07dc6,0xd8df006c,0x88bf300f,0x80bf30fe,0x003ec5f9,0x05f90df1,
    0x220bfe20,0x3ff101ff,0x0ff04fc8,0x3607f3ba,0x2017ec1f,0x000fe47f,
    0x47fb01ff,0x703fd04e,0xb854409f,0x2207f22f,0x2a63f91b,0x320fea00,
    0x4bd1f61f,0x1ff002f9,0x05f903fc,0x017e67f7,0x006f8bf3,0x6413bf31,
    0xfa81982f,0x201fec0f,0x81bea6fb,0x567c41fd,0xfa87f83f,0xf913ea04,
    0x7c406a23,0x3e47f706,0x0df107f8,0xf7bfffd3,0x64007f45,0x0dfffeaf,
    0x0ff86f98,0xb1fc43f2,0x46fe400d,0x41f603fd,0x80bf34f9,0x093e25f9,
    0x9bffff60,0x827ec2fc,0x017ea5fd,0x07fc67ec,0x2fa87f70,0xf05f98bf,
    0x320fec0f,0x1ffffdaf,0x3f9827cc,0x03fe07e6,0xbfd11bea,0x7c5fff93,
    0xc85bfb77,0x6feabfff,0xfb339fb0,0x1f53fa89,0xfd000be6,0x07e807ff,
    0x017e6bf1,0x667d4bf3,0xfba84fff,0xd8bf22ae,0x2bfe203f,0xf1000ff8,
    0xf8805fdf,0x47d87e45,0x05f902fb,0xdff90df1,0x441ffb57,0xf87f505f,
    0xfd83fe83,0x3e217e47,0x3bf3be2f,0x3ff24ffe,0xfc81fe40,0xff903fff,
    0x20036c9f,0xf804ffd8,0x3e6df106,0xf72fcc05,0x0dffb9df,0x25f90bf1,
    0xefa803fd,0x7d4002fc,0xf8fd004f,0x0fd8bee5,0x7f70bf30,0xfe81df90,
    0x7e407fc1,0x7fd42ec3,0x47ffc88b,0x225f907e,0x3faa2fff,0xdf109f91,
    0xffb9ff70,0xf982a205,0x7cc02e21,0x1021ffcf,0xf9b7c0df,0xd72fcc05,
    0x443fe887,0xfdafc85f,0x17ff6003,0x01bfea00,0x23f987e4,0xd01be4f9,
    0xc80fe81f,0x5c2fb83f,0x0ffea0df,0xfff901f7,0x7c4dd5ff,0x3e25f705,
    0xf95fb83f,0xbf71fe05,0x8017f441,0x13fbf25d,0x3bf23ff3,0x837c4fa8,
    0x80bf35f8,0xdf7005f9,0xffc85f88,0x3e2001ff,0x7fc4000f,0x2fa803fe,
    0xf16f83f7,0x263fb809,0x505f905f,0xfbffb07f,0x2f887fdf,0x3e37b930,
    0x7d417e64,0x3e203fe2,0x1fe03f96,0x09f503fd,0x4be63f30,0xb0bf20fa,
    0x7e83fbbf,0x1be29f10,0x22009f50,0x642fc47f,0x000efcff,0x3f6001fe,
    0x4401ff9b,0x1fb0fb4f,0x6f8805f5,0x0fe407f2,0xfeb81fd4,0x4e83fbad,
    0xbf0fe600,0x0fe8bf20,0x05f96f88,0x206f8df1,0x2e5e807f,0x3fc7f10f,
    0x7437ff44,0x3fc7f307,0x2010fee0,0x42fc46f8,0x009f93fc,0x3ee003fc,
    0xd003bee5,0x3f509f1d,0x1fb001f9,0x81fc81be,0x3ee003fa,0x06546c82,
    0x41fa17e4,0x207f62fe,0x707f94fa,0xf307f8bf,0x361fa80d,0x03fb2fc6,
    0x5f909ff3,0x0ff45f90,0x0ff45fb0,0x17e21fdc,0x02fe8bf2,0x7cc00ff0,
    0x2027ec0f,0xf882fafc,0x7f5005eb,0x0fe407f3,0x03ba1fd4,0x83ea03fa,
    0x42fcc4fa,0x17fcc4fc,0x2fd81df3,0x2fd81df9,0x1fec27e4,0x44f717a0,
    0xb037ea3f,0xef887fff,0xdf71be60,0x541df701,0x207f444f,0x22fc85f8,
    0x7f800ef9,0x105ff100,0x77d405ff,0x07fdd00f,0x007e7740,0x87f503f9,
    0xfda89dfc,0xfe87f104,0xb00ffbac,0x5fdfb7df,0xffbbefc8,0x2efbbf24,
    0xdff885ff,0x5406feba,0xfa97c41f,0x7667ff40,0x643ffbdf,0x81ffcbff,
    0xfedceffd,0xcbdfe80f,0x85f884ff,0x027e42fc,0x4fd803fc,0x4403fea0,
    0x3ff206ff,0x17ff2001,0x7f503f90,0x9fffff90,0x7e445d80,0x32201cff,
    0x82facfff,0x644efffb,0x03fffd9f,0x33ffff62,0xfd82f400,0xffd884fe,
    0x207ea3ef,0x202dfffb,0x1cefffdc,0x7ffffb10,0x3f217e20,0x2017fc42,
    0x06fb807f,0x3fa05fd8,0x001fea04,0xfc805ff1,0x2603fa81,0x0088009b,
    0x00060006,0x00620011,0x32200330,0x2002e200,0x08801009,0x20004c00,
    0x00000009,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x55530000,
    0x55555555,0x0a985543,0x55555551,0xa88a2003,0xa88d4402,0x0aa9801a,
    0x2a200351,0x26155401,0xaaaaaaaa,0x544550aa,0x98154401,0xaaa881aa,
    0x22aaaaaa,0xaaaaaaa8,0x2aa22aaa,0x2009aaaa,0xaaaaaaa8,0x2aaa2009,
    0x88001aaa,0x1540002a,0x3ffee0cc,0xffffffff,0x3f21ff15,0xffffff51,
    0x74407fff,0x9807fea7,0x00fff55f,0x13ea3ffb,0xf9027d40,0xffffc81d,
    0xf2ffffff,0x2602fccf,0x7fff4c5f,0x3ffe61ef,0x0fffffff,0xfffffff3,
    0x7fd4dfff,0x1dffffff,0xffffff98,0xfa81ffff,0x4fffffff,0x00bfee00,
    0x3e237d40,0x655554c7,0x11aaaadf,0x547f21ff,0xcbaaaaef,0x7fd883ff,
    0x4c03bfea,0x03fff55f,0xfa8fffc4,0x209f5004,0xaa980efc,0xffcaaaaa,
    0x02fccff1,0xdff897e6,0xf30ffda9,0x5555555d,0x55577cc5,0x2a2aaaaa,
    0xecbaaaef,0x577cc2ff,0xffecaaaa,0x5556fd41,0xd005ffcb,0xf1000dfd,
    0x807f88df,0x3fe204fa,0x17ea3f90,0x7fd47fa8,0x13ffea7f,0xfdfaafcc,
    0x47fbee04,0x9f5004fa,0x0001df90,0x33fc7fd1,0x25f980bf,0x33fd84fc,
    0x2fcc00bf,0xc817ea00,0x017e60ff,0x04fa89fb,0xf9801ff1,0x6c001fcc,
    0x2a0006ff,0x43fe204f,0x80bf51fc,0xd5ff71fe,0x17fe7d4f,0xecfaafcc,
    0x47f7b607,0x9f5004fa,0x0000efc8,0x267f89fd,0xd2fcc05f,0x26bf303f,
    0x17e6005f,0xc80bf500,0x3017e64f,0x204fa8df,0x4fe402fc,0x3ee004f9,
    0x2a0006fa,0xc87fc04f,0xe80bf51f,0x9fa1991f,0x40efacfa,0xf99f55f9,
    0x3fb7f103,0x7d4013ea,0x0003bf24,0x33fc37e4,0x45f980bf,0x3e69f501,
    0x017e6005,0xf980bf50,0xf5017e66,0x3604fa8b,0xff3fc00f,0x3e9f1001,
    0x13ea0006,0xa8fe4ff0,0x81be605f,0x7ed3ea7e,0xcfaafcc4,0xd8fb84f9,
    0x2009f51f,0x01df94fa,0x203fee00,0x3017e67f,0x4bfa00bf,0x3e6005f9,
    0x02fd4005,0x2fcc3fe2,0xfa85fd10,0xa80bf704,0x200ff24f,0x000df0ee,
    0x9fa027d4,0x30bf51fc,0x3f407fd7,0x8bfe29f5,0x3a9f55f9,0x23fb5e87,
    0x9f5004fa,0x0001fff9,0x9fe03ff3,0xfffffff9,0xa805ffff,0x3bbfe66f,
    0x7cc6eeee,0xeeeeeeef,0x2017ea1e,0x99df31fe,0x0dffd999,0xfffffff5,
    0x43fb00bf,0x0fdc06f9,0x7d4000df,0x3f937404,0x3fffffea,0x3a00dfff,
    0xefa93ea7,0x53eabf30,0x6cfe21fc,0x2009f51f,0x5fddfffa,0x01ffc400,
    0x777fccff,0x5feeeeee,0xf307fd40,0xffffffff,0xffffff98,0x3ea1ffff,
    0xf32fd805,0xbfffffff,0x3bbfea07,0x202ffffe,0x01fe86f8,0x006f89f3,
    0xdb013ea0,0xeffa8fe4,0x801bceee,0xfb13ea7e,0xa7d57e69,0x6c3ee4f9,
    0x2009f51f,0x7fd15ffa,0x2027f400,0x3017e67f,0x0f7dc0bf,0xf98017e6,
    0x02fd4005,0x9df98ff4,0x203fea99,0x7fd304fa,0x2aab7ee0,0x0dd04fda,
    0x500330df,0x325d809f,0x000bf51f,0x113ea7e8,0x2abf35ff,0x25e9fa4f,
    0x009f51fd,0x3ff317ea,0xf00df900,0x2602fccf,0x01df905f,0x7cc00bf3,
    0x02fd4005,0x85f987fc,0x9f503fe8,0xfe837cc0,0xffffffff,0x55567e40,
    0xff12aefa,0xc809f500,0x2fd47f25,0xfa9fa000,0x5f9ffa84,0x4cfdc9f5,
    0x7d47f62f,0x909f5004,0x7fdc01df,0x3e67f800,0x642fcc05,0x0bf300ef,
    0x2002fcc0,0x37d405fa,0x3fe60bf3,0x7c04fa81,0x5577cc0f,0x43fdaaaa,
    0xfffffffd,0x00ff16ff,0x208809f5,0x00bf51fc,0x13ea7e80,0xfaaff7ec,
    0x83ef3e64,0x009f51fd,0x2ff413ea,0xf001ff98,0x2602fccf,0x202fec5f,
    0x3e6005f9,0x02fd4005,0x05f98bfa,0x9f503ff2,0x7e43fc40,0x531be602,
    0x5df55555,0x7d403c45,0x3f90cc04,0xd00017ea,0xf8827d4f,0xe89f55ff,
    0xa8fec5ef,0x09f5004f,0xff10bfe2,0xf33fc005,0x2a5f980b,0x05f9805f,
    0x50017e60,0x1bf620bf,0x4fe80bf3,0xfd8827d4,0xfe807f85,0xb70df001,
    0xf809f500,0x3ea3f90f,0x53f40005,0xaffd409f,0x17fdc4fa,0x77fd47f6,
    0x50eeeeee,0x07fdc09f,0xdddddff9,0x9fe7dddd,0x2fcc05f9,0xddddddff,
    0x8017e69d,0xeeeeeff9,0xff50eeee,0xdfffdddd,0x4c05f981,0x3bfea1ff,
    0x0effeeee,0x7dc027d4,0x1b0df005,0xf809f500,0x3ea3f90f,0x53f40005,
    0x55fd809f,0xd87f989f,0xfffff51f,0x3ea1ffff,0xf937ec04,0xffffffff,
    0xf99fe9ff,0xf9afcc05,0xffffffff,0x4c00bf36,0xffffffff,0xfff50fff,
    0x205bdfff,0x6fc805f9,0x3fffffea,0x2fd80bee,0x800ff880,0x0000006f,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x32a20000,0x4cccc0ac,0x88199999,0x033000aa,0x804c4062,
    0x31000998,0x04cc0035,0x206a2188,0x2602a218,0x41511881,0x4c330098,
    0x13101301,0x266660cc,0x06219999,0x00370988,0x9501a800,0x2012e001,
    0xa805504a,0x22ffffff,0xffffffff,0x7fffec7f,0xfffd881e,0x5c0fe44e,
    0x7ffec42f,0xffd300df,0x2e205fff,0x640dfffe,0x1ffffd8f,0x3fffa7f2,
    0x45dfff35,0x11fff9fc,0x25fa83ff,0x437d40fd,0x443fe0fc,0xffffffff,
    0x7ec0fee7,0x0005dfd1,0xc817fe44,0x1ff9800f,0x07f82dc0,0x2e22ffe6,
    0x999991ff,0x7e4bfd99,0xd87fb9ac,0x22fdaaef,0x42fb81fc,0x6feaadfe,
    0xda9bff98,0x77fc40ff,0x7e46feaa,0x27fcabee,0xfeaadefc,0x26fbadfd,
    0x546ceefc,0xb83fe26f,0x207fe43f,0xa887fc6f,0x4feaaaaa,0x9be21be2,
    0x00bfffc9,0x17dffb50,0x32003f20,0xb77d05ff,0xb03fc3b5,0x809f909f,
    0x21be0ff8,0x20ff21ec,0x703f90ff,0x6427dc5f,0x6c17e42f,0x6c1fec2f,
    0x361bf23f,0x4c1df92f,0xc8fe44ff,0xe9fec06f,0x3a2fc42f,0x00fe62fe,
    0x7ec2fdc0,0x5c41fd41,0xb881dffe,0xc801dffe,0x667c400f,0x7ff6440f,
    0xd81fe1de,0x406f980f,0x017f42fd,0x909983ec,0x745f703f,0x445f981f,
    0x7f85f701,0x1fe4df50,0x83fc97dc,0xc9fd41ff,0x67f4403f,0x7c4fd04f,
    0x007f24fb,0x2a03bea0,0x2007ec4f,0xf91effd9,0x554017df,0xaaabfdaa,
    0x27c4fdc0,0x6e82ff88,0x409f3000,0xfffa85fa,0x006f80ad,0x45f703f9,
    0xccccccff,0xdb75106f,0x82fc47ff,0x20bf27f8,0xf05f93fa,0x3f27f50f,
    0x06ff9802,0x747dc7ee,0x26001ba6,0x89be00ff,0x3fea005f,0xd001dfd2,
    0xffffffff,0x3f66f85f,0x17d67440,0x3a200172,0x01ff101f,0x93ffff66,
    0x3f9006f8,0x3fe25f70,0x7fffffff,0xdcefffd8,0xe817e63f,0xf503f90f,
    0x1fe07f27,0x00fe4fea,0xf302ffc4,0x447e5b67,0x7fc4004f,0xfb8fe401,
    0x7ff5c402,0x3bffd50c,0x7ecccc40,0x3ea0999a,0x4910fea2,0xe880001c,
    0x013ee02f,0xdf27fe4c,0x3207f200,0x800ff12f,0x3ee0adfd,0x6f817e23,
    0x4fea07f2,0xa87f81fc,0x9003f93f,0xb7c05fdf,0x3f77f34f,0x017f4400,
    0x207ea7cc,0x00beffc9,0x007dffb3,0x43f401f9,0x8000006e,0x7f403fe8,
    0xf982b881,0x3f203fa6,0x5fb05f91,0x164417fc,0x0ff60ff1,0xc97e20ff,
    0xf93fa81f,0x7f50ff03,0xbf5007f2,0x3f201ff1,0x1f77e2fa,0x4007fd00,
    0xea84f9fe,0x22002dff,0x900cfffc,0x20fa601f,0x000001eb,0x3e6027e4,
    0xf503fa05,0x3e227dc9,0xff313ee6,0x7ec2fdc5,0x3e61fe23,0x2227e43f,
    0x207f23fd,0xf03f93fa,0x3f27f50f,0x543fe201,0x1fdf505f,0x19827fec,
    0x2e0027ec,0xcfe81fdf,0x7f540001,0x0001f902,0x74000000,0x202fc807,
    0xffcacefa,0x75df7f41,0x2b7fe22f,0x7f42fdfc,0xc85fdbcf,0xfefcaadf,
    0x65fff443,0x40fe44ff,0xf03f93fa,0x3f27f50f,0xfb0ff601,0xf71bfe07,
    0x5c3fe05f,0xccccccff,0x06ff880c,0x98000015,0x00019501,0x7c000000,
    0x403fc406,0x01efffdb,0x305bfff9,0x5f37fffd,0x17dfff90,0x5dffd910,
    0xff910df1,0x03f907df,0x207f27f5,0xf93fa87f,0x2217ee03,0x44fd81ff,
    0x43fe07f9,0xfffffffc,0x07fb01ff,0x00000000,0x00000000,0x3e6004c0,
    0x3000c005,0x80011001,0x00220008,0x00000220,0x00000000,0x00000000,
    0x00000000,0x00000000,0x0cc00000,0x0000fea0,0x00000000,0x00000000,
    0xddddddd9,0x2a0443dd,0x01103532,0x41106ea0,0x21bbbbb8,0x88888888,
    0x00000888,0x00000000,0x00000000,0x407f8800,0x000002fc,0x00000000,
    0x6c000000,0xffffffff,0x1ff1fe1f,0x7ffd49f7,0xf992a1cf,0xfff33fc6,
    0x3ffe67ff,0xffffffff,0x0000000f,0x00000000,0x00000000,0x3f603fc4,
    0x00000001,0x00000000,0x80000000,0x7dc7fc7f,0x3fff7fe4,0x7dc4ffef,
    0xaaa89fe2,0x333311aa,0x33333333,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x2eff1e20,0xff93163f,0x005501bf,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x88888800,0x2dc08888,0x8017cdb6,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x80000000,0xfffffffd,0xb90361ff,
    0x000007e2,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xccb80000,0x0ccccccc,0x00000400,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_24_usascii_x[95]={ 0,1,0,0,0,1,0,0,1,1,0,1,1,0,
1,0,0,2,0,0,0,0,0,1,0,0,1,1,1,1,1,0,1,-1,1,1,1,1,1,1,1,2,0,1,
1,1,1,1,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,-1,0,0,1,0,0,0,0,0,1,1,
-1,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0, };
static signed short stb__arial_24_usascii_y[95]={ 19,3,3,3,2,3,3,3,3,3,3,6,16,12,
16,3,3,3,3,3,3,3,3,3,3,3,7,7,6,8,6,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21,3,7,3,7,3,7,3,7,3,3,
3,3,3,7,7,7,7,7,7,7,3,7,7,7,7,7,7,3,3,3,9, };
static unsigned short stb__arial_24_usascii_w[95]={ 0,4,7,12,11,17,14,4,6,6,8,11,4,7,
4,6,11,7,11,11,11,12,11,10,12,12,4,4,11,11,11,11,21,16,13,14,14,13,12,15,13,3,10,14,
11,16,13,15,13,16,15,14,13,13,15,21,15,15,13,5,6,5,10,14,5,12,11,11,11,12,7,11,10,3,
5,10,3,16,10,12,11,11,7,10,6,10,11,16,11,11,11,7,3,7,12, };
static unsigned short stb__arial_24_usascii_h[95]={ 0,16,7,17,20,17,17,7,21,21,7,11,7,3,
3,17,17,16,16,17,16,17,17,16,17,17,12,16,11,7,11,16,21,16,16,17,16,16,16,17,16,16,17,16,
16,16,16,17,16,18,16,17,16,17,16,16,16,16,16,21,17,21,9,3,4,13,17,13,17,13,16,17,16,16,
21,16,16,12,12,13,17,17,12,13,17,13,12,12,12,17,12,21,21,21,5, };
static unsigned short stb__arial_24_usascii_s[95]={ 252,15,114,220,75,82,100,247,28,1,238,
215,109,146,141,233,115,38,136,240,237,141,45,13,69,20,162,249,203,97,191,
1,53,220,206,194,175,161,148,163,122,118,209,89,77,60,46,147,24,87,190,
179,1,127,227,205,189,173,104,47,13,41,227,154,135,71,57,35,33,58,154,
1,243,252,35,162,20,108,97,84,135,123,125,24,116,47,179,145,133,104,167,
20,16,8,122, };
static unsigned short stb__arial_24_usascii_t[95]={ 18,41,71,1,1,23,23,58,1,1,58,
58,71,71,71,1,23,41,41,1,41,23,23,58,23,23,58,41,58,71,58,
58,1,41,41,1,41,41,41,1,41,41,1,41,41,41,41,1,41,1,41,
1,41,23,23,23,23,23,41,1,23,1,58,71,71,58,23,58,23,58,23,
23,23,1,1,23,41,58,58,58,1,1,58,58,1,58,58,58,58,1,58,
1,1,1,71, };
static unsigned short stb__arial_24_usascii_a[95]={ 95,95,122,191,191,306,229,66,
114,114,134,201,95,114,95,95,191,191,191,191,191,191,191,191,
191,191,95,95,201,201,201,191,349,229,229,248,248,229,210,267,
248,95,172,229,191,286,248,267,229,267,248,229,210,248,229,324,
229,229,210,95,95,95,161,191,114,191,191,172,191,191,95,191,
191,76,76,172,76,286,191,191,191,191,114,172,95,191,172,248,
172,172,172,115,89,115,201, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_24_usascii_BITMAP_HEIGHT or STB_FONT_arial_24_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_24_usascii(stb_fontchar font[STB_FONT_arial_24_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_24_usascii_BITMAP_HEIGHT][STB_FONT_arial_24_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_24_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_24_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_24_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_24_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_24_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_24_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_24_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_24_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_24_usascii_s[i] + stb__arial_24_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_24_usascii_t[i] + stb__arial_24_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_24_usascii_x[i];
            font[i].y0 = stb__arial_24_usascii_y[i];
            font[i].x1 = stb__arial_24_usascii_x[i] + stb__arial_24_usascii_w[i];
            font[i].y1 = stb__arial_24_usascii_y[i] + stb__arial_24_usascii_h[i];
            font[i].advance_int = (stb__arial_24_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_24_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_24_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_24_usascii_s[i] + stb__arial_24_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_24_usascii_t[i] + stb__arial_24_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_24_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_24_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_24_usascii_x[i] + stb__arial_24_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_24_usascii_y[i] + stb__arial_24_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_24_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_24_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_24_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_24_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_24_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_24_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_24_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_24_usascii_LINE_SPACING
#endif

