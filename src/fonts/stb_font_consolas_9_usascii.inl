// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_9_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_9_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_9_usascii_BITMAP_WIDTH         128
#define STB_FONT_consolas_9_usascii_BITMAP_HEIGHT         36
#define STB_FONT_consolas_9_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_consolas_9_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_9_usascii_NUM_CHARS             95

#define STB_FONT_consolas_9_usascii_LINE_SPACING           6

static unsigned int stb__consolas_9_usascii_pixels[]={
    0x102a6061,0x06100985,0x18088353,0x00442180,0xdb810181,0x33008043,
    0x06213010,0xb5583501,0x70ec3b88,0x8aeb30bd,0x872b20ab,0xbc8f762b,
    0x205b52aa,0x752c1a1b,0x0581ccae,0x3a8388d5,0x5ecc6837,0x1cc2cb0a,
    0x5444ba92,0x50dc361a,0x32648a45,0x212eb248,0x0d0ed446,0x34886473,
    0xb00c8357,0x5ac13388,0x86b22154,0x388e60e5,0x966617a6,0x6ce4372a,
    0x0de8574d,0x5b8832a2,0x85872762,0x9a44360c,0x41221c9e,0x2e255c45,
    0x0dc34c3b,0x89cc1b16,0x440de885,0x990dd265,0xbb832971,0x46ee63ad,
    0x21b95c49,0x54ae2445,0x0b0aa733,0xf10bb116,0x58370b01,0x8388e60e,
    0x752c42bc,0x4aadc86e,0x0fcc6c37,0x70629179,0x0dc18765,0x73997362,
    0x44582a85,0x5824c1cb,0x2cb0cd88,0xeea921cc,0x5c725884,0x4c72eb21,
    0x64f776a3,0x88953ca8,0x0b1e1dce,0x4cd98cec,0x867e44b0,0x212e3b38,
    0x2c00cfc8,0x5458730b,0xb9669301,0x00e406e1,0x14c00000,0x5c005910,
    0x00000001,0x165c2dac,0x1b93012a,0x65c5950e,0x00000382,0x00000000,
    0x20000000,0x00000004,0x93cc8000,0x00009999,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xb9800000,0x4020981a,0x35110aa8,
    0x1e5c3db8,0x4cd85b91,0xbb714c2a,0x33224c88,0xcc8776a4,0x450eecc4,
    0x2912531a,0x0dc4710c,0x206c644a,0xb10531bd,0x327a6193,0x9ccae751,
    0x5c24681c,0x6c0ea731,0x4c24d600,0x22162393,0x1c963625,0x88e52673,
    0x26b10c8c,0x2624458c,0x85cae1ab,0x44325529,0x447b5374,0x37056c3a,
    0x2a0f44e6,0x232b02bc,0xb92f6098,0x4c3d5001,0x524ec194,0x79305b7b,
    0x99676dc3,0x86caa59e,0x44363729,0x44737994,0x43aa60da,0x6dc4731b,
    0xb0391750,0xbc8b2632,0x30a0570d,0xf88b683d,0x21022ea0,0x0e20cce9,
    0x5ec46e53,0x5c99d30c,0x154ea551,0x1b8640dc,0x4ea37055,0x2657582a,
    0x244ae552,0x916360f8,0x99b0b077,0x3a8dde21,0x06e530e2,0x6c414c2e,
    0x91266c4c,0x11e64499,0x2e654b9b,0x2dd89336,0x66c4b772,0x44736e0d,
    0xf31d4b25,0x91000b01,0x261c4199,0x26150372,0x20100002,0x00000000,
    0x00150000,0x00000000,0x00000000,0x00000000,0x00000000,0x9c380000,
    0x37663dd9,0x5466751d,0x46612572,0xb911540b,0xa8cc2a19,0x33362cdc,
    0x6d433360,0x98b7621b,0x206c42cd,0x20dcc1ba,0x2c2b980b,0x582c9cd2,
    0xadca63ae,0x75530b3d,0x5c5819d8,0x04858531,0x4c323709,0x064e61b3,
    0x0d9a8595,0x6c43b393,0xa520c6c0,0x390ae734,0xbc94e5dc,0x9930b3ab,
    0x77160398,0x9d858575,0x237156c1,0x4cb39329,0x22c6c4ac,0x26370eca,
    0x39b07443,0xd339e9c8,0x4dc4989b,0x91d192ad,0xb1136616,0x2eaee2c0,
    0x21df42c2,0xa4c6e2ad,0x2b262dd9,0x3996910d,0x21546e19,0x2e0d881c,
    0x20733c9c,0x96ccdc0d,0x54c2d214,0x20665c2b,0x2c298dc5,0x91b84824,
    0x2732ce65,0x25b9b52b,0x9b10dcd9,0x66441c89,0x732eadc5,0x2e3bbd50,
    0x3a9165d1,0x076531cc,0x2e19f910,0x04858531,0x3b6e199d,0xe995ce63,
    0x0058964d,0x00000000,0x00000000,0x00000000,0x00000000,0x50e20000,
    0x4c2cb871,0x36a2dc85,0x111d41dd,0x854ccc26,0x43062aa8,0x06a22299,
    0x4462130a,0x82808111,0x305ddcc4,0x9106c418,0x864aa3b5,0x20b085b9,
    0x2997220c,0x8ebaf237,0x248d6599,0xb3b31bae,0x4373a8b0,0x10dcc58d,
    0x221cdc1f,0x44d15408,0x71d9d886,0x2c0b0ae5,0x532d2244,0x1c64646e,
    0x38e8c836,0x37298452,0xb58b3b2a,0x175c1f98,0x30c9c4b1,0x22c03999,
    0x06cec44a,0x70583b99,0x59543905,0x1948e526,0x2f2a15c7,0x5ca6122c,
    0x21de42c1,0x8eee23cb,0x8000000a,0x076f6a49,0x0570b032,0x3eccc8b1,
    0x8ca4773a,0x26199f13,0x94c243d6,0x07cc1c1b,0x00307293,0x042060c0,
    0x99114640,0x98efec43,0x806e1ddf,0x00000005,0x00000000,0x770f8800,
    0x0163a75b,0x00000000,0x00000000,0x00000000,0x0b884000,0x00000129,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_9_usascii_x[95]={ 0,1,1,0,0,0,0,1,1,1,0,0,1,1,
1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0, };
static signed short stb__consolas_9_usascii_y[95]={ 6,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,1,4,3,
4,-1,0,0,0,0,0,0,0,0,0,0,1,1,1,2,1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,7,-1,1,-1,1,-1,1,-1,1,-1,-1,
-1,-1,-1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,-1,-2,-1,2, };
static unsigned short stb__consolas_9_usascii_w[95]={ 0,3,3,5,5,5,5,2,3,3,5,5,3,3,
3,5,5,5,5,5,5,5,5,5,5,5,3,3,5,5,5,4,5,5,5,5,5,5,5,5,5,5,4,5,
4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,3,5,5,3,5,5,5,5,5,5,5,5,5,
4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,1,4,5, };
static unsigned short stb__consolas_9_usascii_h[95]={ 0,8,3,6,9,8,8,3,9,9,5,5,4,1,
3,8,7,6,6,7,6,7,7,6,7,6,6,7,6,3,6,8,9,6,6,7,6,6,6,7,6,6,7,6,
6,6,6,7,6,8,6,7,6,7,6,6,6,6,6,9,8,9,4,1,3,6,8,6,8,6,7,7,7,7,
9,7,7,5,5,6,7,7,5,6,7,6,5,5,5,7,5,9,10,9,3, };
static unsigned short stb__consolas_9_usascii_s[95]={ 127,69,123,7,17,52,46,123,42,28,97,
79,103,46,113,73,37,19,25,43,37,49,67,31,84,13,124,96,1,113,114,
58,36,96,90,90,78,72,66,78,54,48,73,36,31,25,19,31,7,79,84,
61,60,55,106,1,100,112,13,32,91,8,107,50,119,102,85,42,63,118,7,
1,13,115,23,103,97,49,73,108,25,19,67,120,121,43,85,61,91,109,55,
12,1,3,117, };
static unsigned short stb__consolas_9_usascii_t[95]={ 1,1,31,27,1,1,1,27,1,1,27,
27,27,10,31,1,12,27,27,12,27,12,12,27,12,27,12,12,27,27,20,
1,1,20,20,12,20,20,20,12,20,20,12,20,20,20,20,12,20,1,20,
12,20,12,12,20,12,12,20,1,1,1,27,10,27,20,1,20,1,12,12,
12,12,1,1,1,1,27,27,20,12,12,27,20,1,27,27,27,27,1,27,
1,1,1,31, };
static unsigned short stb__consolas_9_usascii_a[95]={ 79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_9_usascii_BITMAP_HEIGHT or STB_FONT_consolas_9_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_9_usascii(stb_fontchar font[STB_FONT_consolas_9_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_9_usascii_BITMAP_HEIGHT][STB_FONT_consolas_9_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_9_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_9_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_9_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_9_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_9_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_9_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_9_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_9_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_9_usascii_s[i] + stb__consolas_9_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_9_usascii_t[i] + stb__consolas_9_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_9_usascii_x[i];
            font[i].y0 = stb__consolas_9_usascii_y[i];
            font[i].x1 = stb__consolas_9_usascii_x[i] + stb__consolas_9_usascii_w[i];
            font[i].y1 = stb__consolas_9_usascii_y[i] + stb__consolas_9_usascii_h[i];
            font[i].advance_int = (stb__consolas_9_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_9_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_9_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_9_usascii_s[i] + stb__consolas_9_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_9_usascii_t[i] + stb__consolas_9_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_9_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_9_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_9_usascii_x[i] + stb__consolas_9_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_9_usascii_y[i] + stb__consolas_9_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_9_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_9_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_9_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_9_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_9_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_9_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_9_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_9_usascii_LINE_SPACING
#endif

