// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_14_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_14_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_14_latin1_BITMAP_WIDTH         256
#define STB_FONT_courier_14_latin1_BITMAP_HEIGHT         58
#define STB_FONT_courier_14_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_14_latin1_FIRST_CHAR            32
#define STB_FONT_courier_14_latin1_NUM_CHARS            224

#define STB_FONT_courier_14_latin1_LINE_SPACING           7

static unsigned int stb__courier_14_latin1_pixels[]={
    0x75061800,0x28080040,0x0c008000,0x214c0130,0x00004c00,0x0000180a,
    0x10000000,0x07000003,0x20280206,0x00005018,0x0325c000,0x4142a055,
    0x42401203,0x0aab00c8,0xb8577571,0x203700ca,0x39806408,0x0c816370,
    0x7103ac88,0x2980ea20,0x01c40a60,0x102980aa,0x42a85107,0x01910299,
    0x80759112,0x2e071029,0x4c38e0b1,0x20c41301,0x40198333,0x20001029,
    0x008214c4,0x64333102,0x400885ba,0x02210000,0x03a88288,0x20144051,
    0x28804028,0x161c1440,0x540006a2,0x0a200821,0x8e000510,0x2e0c4133,
    0x53990e61,0x20e02419,0x96c45bba,0x440513c9,0x3627932d,0x26627932,
    0x2ea04334,0x45bba85b,0x547932d8,0x310c45bb,0x10c43998,0x09802603,
    0x0e555644,0x70150054,0x4054c244,0x49102da9,0x2a602da9,0x53015300,
    0x3738e05b,0xb071c1cc,0x20351c41,0x8910cc28,0x40198543,0x0a870543,
    0x3302ae38,0x24433244,0x8866150e,0x2a488e24,0x4710cecd,0x1d4dcc48,
    0x870ea6e6,0x0ea6ea09,0x0c875375,0x2a9a9873,0x516039a8,0x2a6a6073,
    0x4154d4c2,0x71c7039a,0x8388b81c,0x8381c384,0x42a1c483,0x82a1c038,
    0x221c0543,0x83920e3a,0x41c2a1c4,0x7150e1c4,0x2a1c3870,0x89c150e0,
    0x87054381,0x81cc320a,0x01538389,0x9802a716,0x70713038,0x2e38e02a,
    0x02ee0388,0x0540a8b2,0x82a0e0e2,0x43090543,0x0a870543,0x20e38338,
    0x1c15070a,0x70541c2a,0x0b6b6a38,0x8a21c387,0x59971443,0x1ccccd88,
    0x439999b1,0x55751223,0x10713889,0xa8389c49,0x55d44aab,0x8389c44a,
    0x401770e3,0x3771703b,0x20e070e0,0xd882a1c4,0x150e0cbb,0x64e02a1c,
    0x920e3a9b,0x42a1c483,0x89054483,0x22415073,0x0a870543,0x201c108e,
    0x87161c03,0x42555d44,0x12aaea1a,0x2243890e,0x2384aaba,0x02e01dc3,
    0x710b801c,0x5c488660,0x5c0d40e0,0x81c170e0,0x43303213,0x44886648,
    0x22198e0b,0x16e5e444,0x32f220e7,0x0aeee22d,0x83857771,0x872aee23,
    0x511cabb8,0x2aaee2a8,0x48330e2d,0x5770661c,0x555dc5b5,0x38330e2d,
    0x2660170e,0x801c880c,0x5d401538,0x1abc884b,0xbc882a88,0x0d5e441a,
    0x50387531,0x97750977,0xa8357910,0x940204bb,0x80100202,0xccccd980,
    0x02200883,0x2e010605,0x221b912d,0x6e44b6e1,0x5c020040,0x2e1b912d,
    0x8064cc64,0xaa980aaa,0x00800000,0x00200004,0x00035501,0x00400801,
    0x00000002,0x00000000,0x00000000,0x00000000,0x02aaa000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x85000000,0x0cc0a04c,0x50180004,0x54418557,
    0x01880c00,0x40a00014,0x515300b9,0x00033770,0x204460c1,0xc880aa0b,
    0x2ea01101,0x2044603a,0x20260318,0x44011028,0x01c88111,0x07710391,
    0x2e038191,0xbbb88701,0x55c2aac2,0x4381300c,0x0655c052,0x80644154,
    0x01910555,0x65dc0e53,0x40640600,0x942bbbb8,0x31286c19,0x5dc0d4e0,
    0x9401102c,0x20a8c419,0x2a2c99b8,0x42cbb80e,0x9c0da9aa,0x4835381a,
    0x080e0071,0x00a870e0,0x2eea0410,0x100a21c5,0x00000804,0x44051c00,
    0x64c76638,0xb11c02e3,0x21b01301,0x15301989,0x2a602a60,0x9805402d,
    0x00221c0a,0x82c38098,0x1302a009,0x5b11d8a4,0x40b6a60e,0xda994143,
    0x8ab6a62a,0x26392219,0xaac882da,0x55b531ca,0x91156d4c,0x32239555,
    0x5ce1caaa,0x0dcab984,0x0660a92e,0x9b98e914,0x2666243a,0x0aa6a60a,
    0x35055353,0x0ea6ea07,0x01c55353,0x1d4dcc0c,0x4dcc4851,0x1d4dd43a,
    0x1c4e2387,0x2a0e6a07,0x070e0662,0x50241c1c,0x8130e073,0x261c0e03,
    0x11c130e0,0x1715c387,0x424c42a7,0x438e1719,0x0aa9920a,0x44c0e260,
    0x87015383,0x0e38980a,0x54382a82,0x21c688e0,0x0e150e0a,0x81c49a87,
    0x222a8153,0x0701c283,0x54e01507,0x0e031380,0x20627038,0x0a870313,
    0x5ce18851,0x5441c0a8,0x14438a1a,0x541aa841,0x55d44aab,0x4389c44a,
    0x21ccccd8,0x2e24aaba,0x20170bab,0x37711443,0xd8944387,0x3871cccc,
    0x9c41c1d8,0x2a243838,0x070701c0,0x0e2711c9,0x01c0b32e,0x20b32e07,
    0x23382ccb,0x23850a0a,0x2c81c0ab,0x0054382a,0x3890e14a,0x12aaea24,
    0xa848700e,0x543821c0,0x0a870e00,0x20a1a80e,0xaaba8383,0x5de44384,
    0x260e0382,0x2ea39221,0x042384aa,0x8470380e,0x366108e0,0x554c3ba9,
    0x81751c2a,0x2bbbc883,0x3e15ddc4,0x2ee15542,0x2aee2daa,0x8330e2da,
    0x2e1cabb8,0x2a22daab,0x115cdd42,0x53105777,0x42bbb885,0x321cabb8,
    0x838380ca,0x2e0e0cc3,0x701c189d,0x4712eea0,0x0e0e0cc3,0x38381c07,
    0x10040e0e,0xb86c9d30,0x0430ccec,0x20004020,0x2db80400,0x01101b91,
    0x05440002,0x802aa008,0x00804400,0x726439d9,0x9837225b,0x9854cd41,
    0x3b263cec,0x2e30103c,0x261b912d,0x933ccccd,0x6764c79d,0x33333663,
    0x79999b33,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x23000000,0xa81c8818,0x5d5d40bb,0x910c4310,0x17910599,
    0x4413332e,0x4415cc0c,0x0880203b,0x80103b98,0x2a200800,0x2611043a,
    0x001d4001,0x40200000,0x80206209,0x00800031,0x100dc022,0x41654dd4,
    0x4704c353,0x11c4529c,0x19300cc9,0x41501c18,0x71487138,0x20aa9a98,
    0x44a23aac,0x8aeeae23,0x440aa9a9,0x5143baac,0x539911e8,0x0adaa819,
    0x81c0e00e,0x547932d8,0x261b85bb,0x116eb223,0x75b102a5,0xbb80e037,
    0xf880b82c,0x8620c873,0x25592018,0x0198e1c2,0x4a21c016,0x26382a0a,
    0x1ab988e1,0x70a330c5,0x44c4a624,0x22242899,0x0d801262,0x89c1c0e2,
    0x9c981901,0x4c2a1c09,0x438e1221,0x0c4311c3,0x181c0e1c,0x54033033,
    0x7105c288,0x90e54244,0x23870a53,0x2e21bcd9,0xba86603a,0x27220ca9,
    0x50c8e22b,0x217028c6,0x80a29753,0x288a2252,0x4181b940,0x57070384,
    0x4bab8955,0x87026726,0x1709070a,0x71019871,0x8a21c244,0x2e1ccecc,
    0x1262399c,0x40e885c0,0x21d441c3,0x120b854a,0x12272638,0x4419121c,
    0x65dc1cbc,0x44a6a51a,0x27387221,0x41940333,0x04c43318,0xc890e235,
    0x6c1c02a2,0x81054a20,0x0e150e03,0x202ee02a,0x0e1c1bb8,0x1c1c79d9,
    0x40e0e0b8,0x557710da,0x1701c381,0xcbcb8528,0x8e21502d,0x50a23819,
    0x640905c1,0x44294650,0x714bb9c1,0x88a12940,0x45312aa3,0x37717122,
    0x4e120e1c,0x4380e00b,0x2e09070a,0x70e0b803,0x03818870,0x7b038387,
    0x482a0540,0x2e14a0e0,0x921c0808,0xb120cc0a,0x22070541,0x14c26624,
    0x12088640,0x851a8c46,0x41770385,0x14380e0d,0x2e2330ec,0x1701c298,
    0x8244331c,0x5054480b,0x40e1c241,0x03838702,0x2215c40d,0x5952dcbc,
    0x070a5037,0x260dded4,0xc98382bb,0x2ee0cbaa,0x2132a21b,0x6d82aaa9,
    0x5ec411cc,0x2aaa60cb,0x1babd882,0x886c2886,0x0757501c,0x907755b5,
    0x43757503,0x5d41abc8,0x80c9984b,0x6443baac,0x33a62dcb,0x666640bc,
    0x3a27b11c,0x4199d972,0x040aaa00,0x2e2ea010,0x10020020,0x00801000,
    0x80880001,0x00880bca,0x55404400,0x2aa6182a,0x70000200,0x10020080,
    0x0802aaa0,0x00000040,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00080000,0x21100d4c,
    0x50003a81,0x02a80005,0x8ccccccc,0x002b84c8,0x00498480,0x001bb880,
    0x000aea00,0x73000000,0x2a064000,0x0000000a,0x655c0000,0x1c06b6a0,
    0x1330a130,0xb579b307,0x88ec4038,0x20100e2d,0x540381c0,0x80c4aaad,
    0x2aab2203,0x5e441c1c,0x2b6a2d88,0x4e2350bb,0x23aadac8,0x3623babc,
    0x99e42baa,0x5307531d,0x4177055b,0x5555c08b,0x96c47625,0x2a5b11d8,
    0x6ccb511c,0xb01c7931,0x22398379,0x0cc0660b,0x070e3370,0x4389c417,
    0x02011c43,0x404c4e07,0x4e0331c3,0x884c381a,0x371c19ba,0x13813870,
    0x986638e5,0x1c3870e2,0x2e20701c,0xa8e02e0a,0x44389c41,0x22944533,
    0x1c1525c3,0x2718d470,0x4424c43a,0x2666e049,0x501731c0,0x21d47093,
    0x27038100,0x885380ab,0x73397049,0xba883138,0x80645c19,0x211c41c3,
    0x71c19863,0x0e0e1c28,0xa82a7038,0x50388413,0x212a6093,0x8b851593,
    0x19d91153,0x91513870,0x1c070b33,0x4c4d9998,0x4458ab99,0x2a661cea,
    0x2010aaac,0x01bb81c0,0x381c1736,0x20b32e1c,0x05797028,0x71032eb2,
    0x8e0cc0e0,0x65c3dccb,0x0e0385cc,0xaa9854a6,0x0ec04848,0x733703b0,
    0x15173831,0x5154701c,0x701c1dc7,0x20272ae0,0x3260ee3a,0x4661d409,
    0x7b038100,0x07019c03,0x0423870e,0x0d42e051,0x203880e4,0x0e383303,
    0x0e0e1c71,0x3caab838,0x23507615,0x26a03809,0x83373b84,0x04382ae3,
    0x2e08379b,0x0701c0cb,0x82188cce,0x32620cba,0x08a60409,0x2e703810,
    0x70380701,0x511c1c38,0x207070e0,0x1981c039,0x0e3838a6,0x201c0707,
    0x8932f20a,0x4c0e02a3,0x933b8712,0x642ea381,0x9d70cccd,0x2e191005,
    0xd970ccec,0x3636e199,0x32201dcd,0x500675c0,0x26666359,0x99d97199,
    0x21f452a1,0x765c1cdb,0x267b10cc,0x9999b32e,0x98f372a7,0x75c950cd,
    0x2e66742c,0xdc839d91,0x333662bc,0x269b10bc,0x479d932e,0xd983cec9,
    0x66664043,0x30e7640d,0x3b93625d,0x06c9d31a,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x01883100,0x8310c4a2,0x00c03128,0x51018026,0x21426011,
    0x101300a9,0x204c0054,0x98188988,0x198c1310,0x219884c4,0x04009998,
    0x20006231,0x1cc60880,0x82a986a6,0x8e541c81,0x36a60da8,0x2baac882,
    0x2a056d44,0x64436e0e,0x85dc0e60,0x93512648,0x540e0539,0x10502a9a,
    0x9b98b317,0x2a2a60ea,0x47266e22,0x205713f8,0x3663a9b9,0x9dc29bc9,
    0x267320d8,0x0e447223,0x48895335,0x4dd5c491,0xc8977752,0x0b8b8488,
    0x20e0a10a,0x54382f83,0x87039a81,0x4ee20703,0x98c9c3b8,0x21405d41,
    0x2050c983,0x000a8703,0x64702173,0x0e388819,0x2e205411,0x7282a1c1,
    0x541d541c,0x21c330e0,0xb31b1120,0x22710550,0x42c46c43,0x20cc141e,
    0x86f6ee39,0x40e0a81e,0x04870153,0x45cea207,0x5c3ab9c3,0x5d470a03,
    0x5dc3bcda,0x77b11bbd,0x5dddc177,0x50aea21b,0x55751c32,0x770001c9,
    0x4728a21c,0x4282d883,0x0e033383,0x8140f4b6,0x652a0e19,0x0b82e2e3,
    0x4151826a,0x380640ca,0x0e271051,0x1c032eae,0x873a8a88,0xba83b8ba,
    0x23920a80,0x0381c01c,0xbb870a00,0x38e1c150,0x37102a08,0x8e505438,
    0x142a9c43,0x5c0e2a0e,0x0d89d830,0x8773b014,0x30449549,0x21998662,
    0x014a2098,0x2ea02e70,0x06e384aa,0x1b944a1c,0x40755887,0x32f220ba,
    0x79b7752c,0x55c40e09,0xac8280ba,0x5d6643ba,0x96d555c2,0xf10baab8,
    0x5c40ae27,0x95d6e2ba,0x3667d10d,0x0b627b12,0x2ef6a0b2,0x2a488c85,
    0x262a1bcc,0x01c52228,0x00000000,0x330e0733,0x9c382438,0x40003828,
    0x41100828,0x01100600,0x21101004,0x20100200,0x000400a0,0x00000000,
    0x00000000,0x00000000,0x4b6e0760,0x19b30dc8,0x67644362,0x225b74cc,
    0x000000ec,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x14265400,0x5ddddd40,0x3ba87732,0xda8aa2e2,
    0x77777100,0x0a800545,0x11110446,0x770e4111,0x32377777,0x0000dddd,
    0x00000000,0x00000000,0x00000000,0x00000000,0x7530d520,0x71380150,
    0x9944a239,0x26264997,0x73717002,0x23f88e21,0x2aaa2332,0x05d12aaa,
    0x00000000,0x00000000,0x00000000,0x00000000,0x80000000,0x14ce25ac,
    0x27380551,0x7894ce1a,0x45107477,0x82bbbbb8,0x00114409,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x41830000,0x37318001,
    0x5520dc45,0x00000711,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_14_latin1_x[224]={ 0,2,1,1,1,1,1,2,3,1,0,0,1,1,
2,1,1,1,1,1,1,1,1,1,1,1,2,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,
0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,2,0,0,1,0,0,1,0,0,1,
1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,3,0,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,1,0,1,0,
3,0,1,0,0,0,0,1,0,-1,2,0,2,2,2,0,1,2,2,2,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,1,1,1,-1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,
0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__courier_14_latin1_y[224]={ 10,2,2,1,1,2,3,2,2,2,2,3,8,6,
8,1,2,2,2,2,2,2,2,2,2,2,4,4,3,5,3,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,12,1,4,2,4,2,4,2,4,2,2,
2,2,2,4,4,4,4,4,4,4,2,4,4,4,4,4,4,2,2,2,5,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,10,4,1,2,3,2,
2,2,2,2,2,4,6,6,2,1,1,2,2,2,1,4,2,5,9,2,2,4,2,2,2,4,0,0,0,1,
0,0,2,2,0,0,0,0,0,0,0,0,2,1,0,0,0,1,0,4,2,0,0,0,0,0,2,2,1,1,
2,2,2,1,4,4,1,1,2,2,2,1,2,2,2,2,1,1,2,2,2,3,4,1,1,2,2,1,2,2,
 };
static unsigned short stb__courier_14_latin1_w[224]={ 0,3,5,6,6,6,6,3,3,3,5,7,4,6,
3,6,6,6,5,6,5,6,6,5,6,6,3,4,6,7,6,5,5,8,7,7,7,7,7,7,7,6,7,8,
7,8,7,7,6,7,8,6,7,7,8,8,7,7,6,3,5,3,6,8,3,7,7,6,8,7,6,7,7,6,
4,7,6,8,7,7,7,8,6,6,7,7,8,8,7,8,6,3,1,3,6,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,3,5,7,6,7,
1,7,5,8,4,7,7,6,8,9,4,7,4,4,3,7,6,3,3,4,5,7,8,8,8,5,8,8,8,8,
8,8,8,7,7,7,7,7,6,6,6,6,8,7,7,7,7,7,7,5,7,7,7,7,7,7,6,7,7,7,
7,7,7,7,8,6,7,7,7,7,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,8,7,8,
 };
static unsigned short stb__courier_14_latin1_h[224]={ 0,9,4,10,11,9,8,5,10,10,5,7,4,1,
3,11,9,8,8,9,8,9,9,9,9,9,7,8,7,3,7,9,9,8,8,9,8,8,8,9,8,8,9,8,
8,8,8,9,8,10,8,9,8,9,8,8,8,8,8,10,11,10,4,2,3,7,9,7,9,7,8,9,8,8,
11,8,8,6,6,7,9,9,6,7,9,7,6,7,6,9,6,10,10,10,3,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,8,6,8,
10,9,2,9,4,6,4,1,9,1,4,8,5,5,3,9,9,2,4,5,4,6,8,8,8,9,10,10,10,9,
10,10,8,11,10,10,10,10,10,10,10,10,8,9,11,11,11,10,11,5,9,11,11,11,11,10,8,9,10,10,
9,9,9,10,7,9,10,10,9,9,8,9,8,8,9,8,10,10,9,9,9,7,7,10,10,9,9,12,11,11,
 };
static unsigned short stb__courier_14_latin1_s[224]={ 124,152,80,132,85,156,209,249,191,212,243,
78,86,147,114,33,249,189,151,18,203,40,47,54,69,76,132,251,54,95,136,
92,98,10,173,104,165,120,97,121,181,196,149,135,28,36,248,187,144,26,19,
204,157,179,1,239,231,223,216,9,27,250,50,124,110,117,157,125,60,86,128,
225,112,105,80,89,82,151,168,143,141,1,200,102,171,61,176,45,160,195,185,
22,254,187,103,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,
74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,124,137,165,
1,207,57,56,129,118,112,69,192,61,147,83,137,45,228,233,238,91,32,25,
133,57,228,74,214,48,65,16,211,203,13,216,179,241,58,39,56,163,97,67,
89,75,82,41,34,219,121,40,92,116,48,100,222,136,72,108,64,48,1,9,
105,233,225,163,171,196,195,69,204,179,171,241,188,244,129,32,25,113,236,155,
147,233,217,144,94,109,124,139,10,211,1,19,10, };
static unsigned short stb__courier_14_latin1_t[224]={ 12,14,52,1,1,14,35,44,1,1,44,
44,52,52,52,1,14,35,35,25,35,25,25,25,25,25,44,25,44,52,44,
25,25,44,35,25,35,35,35,25,35,35,25,35,44,44,35,25,35,14,44,
25,35,25,44,35,35,35,35,14,1,1,52,52,52,44,25,44,25,44,35,
14,35,35,1,35,35,44,44,44,25,25,44,44,25,44,44,44,44,25,44,
14,1,1,52,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,
35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,12,25,25,
35,44,35,14,25,52,25,52,44,52,52,25,52,52,25,44,44,52,25,25,
52,52,44,52,44,35,35,35,14,1,14,1,14,1,14,35,1,1,14,14,
14,14,14,14,14,25,14,1,1,1,14,1,44,14,1,1,1,1,14,35,
14,1,1,14,14,14,1,44,14,1,1,14,14,25,14,35,35,14,25,1,
1,14,14,14,44,44,1,1,25,25,1,1,1, };
static unsigned short stb__courier_14_latin1_a[224]={ 119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_14_latin1_BITMAP_HEIGHT or STB_FONT_courier_14_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_14_latin1(stb_fontchar font[STB_FONT_courier_14_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_courier_14_latin1_BITMAP_HEIGHT][STB_FONT_courier_14_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_14_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_14_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_14_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_14_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_14_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_14_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_14_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__courier_14_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__courier_14_latin1_s[i] + stb__courier_14_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__courier_14_latin1_t[i] + stb__courier_14_latin1_h[i]) * recip_height;
            font[i].x0 = stb__courier_14_latin1_x[i];
            font[i].y0 = stb__courier_14_latin1_y[i];
            font[i].x1 = stb__courier_14_latin1_x[i] + stb__courier_14_latin1_w[i];
            font[i].y1 = stb__courier_14_latin1_y[i] + stb__courier_14_latin1_h[i];
            font[i].advance_int = (stb__courier_14_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__courier_14_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_14_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_14_latin1_s[i] + stb__courier_14_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_14_latin1_t[i] + stb__courier_14_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_14_latin1_x[i] - 0.5f;
            font[i].y0f = stb__courier_14_latin1_y[i] - 0.5f;
            font[i].x1f = stb__courier_14_latin1_x[i] + stb__courier_14_latin1_w[i] + 0.5f;
            font[i].y1f = stb__courier_14_latin1_y[i] + stb__courier_14_latin1_h[i] + 0.5f;
            font[i].advance = stb__courier_14_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_14_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_14_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_14_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_14_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_14_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_14_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_14_latin1_LINE_SPACING
#endif

