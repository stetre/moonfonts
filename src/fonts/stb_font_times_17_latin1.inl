// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_17_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_17_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_17_latin1_BITMAP_WIDTH         256
#define STB_FONT_times_17_latin1_BITMAP_HEIGHT         90
#define STB_FONT_times_17_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_17_latin1_FIRST_CHAR            32
#define STB_FONT_times_17_latin1_NUM_CHARS            224

#define STB_FONT_times_17_latin1_LINE_SPACING          11

static unsigned int stb__times_17_latin1_pixels[]={
    0x1001a800,0x53008015,0x4c0280c0,0x035001aa,0x51002980,0x46666001,
    0x54c06a02,0x5510131a,0x2006a605,0x26009839,0xd300c402,0x03500319,
    0x00002980,0x2a200151,0x1f35d021,0xb7002fa8,0x1d100980,0x221205c0,
    0x006a20ab,0x02d800b5,0x6c40b9b0,0x2091c9ff,0x9bd80eda,0xd5310aa0,
    0x1eb9ce98,0x801912a0,0x0e62e02d,0x4017e44c,0x016c006a,0x173600e4,
    0xd9537b10,0xd0388b83,0x19012005,0x22402880,0x06a02444,0x0e200170,
    0xb01a8cc0,0x7048efff,0x340b60e2,0x303e6698,0x0126003f,0x0b158071,
    0x17000d4c,0x9500e200,0x23305d59,0xb05d101a,0x005d0005,0x9988b500,
    0x70266209,0x081b1245,0x035301c2,0x4c006a60,0x5fffe01a,0x04ccc523,
    0x20b61331,0x3a6980f8,0x2e00db04,0x104ccc45,0x30174133,0x003d939d,
    0x74008001,0x00405338,0xea944176,0x95d03624,0x1275419f,0x3621641b,
    0x07b220af,0xb83724f3,0xd3052eaa,0x2603d939,0x301ec9ce,0xd03d939d,
    0xb148efff,0x8f64415f,0xd307982d,0x0fdc0be6,0x446a9b22,0x3b220afd,
    0x3e60bea1,0x1a00fc40,0x4fc40d00,0x7c068063,0x1c49b003,0x21fcc6f4,
    0x03d0e24d,0x220e60f7,0x4722c90f,0x7cc150f9,0x3e60fc40,0x3e60fc40,
    0x3ea0fc40,0x0f72477f,0x0d02d8e6,0xa80fd5a6,0x1266b82f,0x911cc1ee,
    0x904e87f3,0x8017dc0d,0x17f602fb,0x7cc0bee0,0x2e1f3002,0x31b22e80,
    0x0f882e1f,0x207307b8,0xa96e582f,0x3209d0e5,0x46c82746,0x510d904e,
    0x41ee48eb,0x0d40b639,0x302fab4c,0x05cd505f,0x323983dc,0x0be63f30,
    0x6cd80fd4,0xc80d9b00,0x8366c04f,0x4f6002f9,0x43d45d04,0x80fa893d,
    0x3e07307b,0x6c3d1cc2,0x502f98e3,0x540be63f,0x2a05f31f,0x248e701f,
    0x16c7307b,0xf1698350,0xb541ea07,0x260f700b,0xf52b8763,0x260be603,
    0x54c01f9a,0x77e401f9,0x01f9a980,0x57cc007f,0x42d45d02,0x07c42af9,
    0xf03983dc,0x278a4421,0x7d4331f9,0x3ea5f301,0x3ea5f301,0x4e05f301,
    0x7307b923,0x980c816c,0x82e417a6,0x1ee0aa6a,0x2e3f51cc,0x3e605f50,
    0x9013a482,0x3a6e0274,0x6c13a484,0x81ba0205,0x3740b23e,0x307b81f8,
    0x2924d107,0x7179aaf8,0xf9817d42,0x3e605f52,0x3e605f52,0x2e48e702,
    0x416c7307,0x7c4d3068,0x6a8074c1,0x4c1ee166,0xf315fd43,0x7107ea07,
    0x238807d4,0x538440fa,0x03ea388d,0x202a13e6,0x2abba03a,0x1e40ea03,
    0xa82983d4,0x1970c924,0xf98ccaf2,0x3e63f503,0x3e63f503,0x4e03f503,
    0x5307a923,0x983cc16c,0x26d6ecc6,0xa86a9aa0,0x3f505307,0x90b905e8,
    0x207f9999,0x43fccccc,0x990ee738,0x2207f999,0x700bbced,0x40057401,
    0xf30b100b,0x43b03701,0x0a200e24,0xbd1720bd,0x20bd1720,0x491ce05c,
    0x361b80f9,0x6980f882,0xa801ff50,0x03e616a4,0x316a306e,0x480f983f,
    0xd90906c8,0x0bacce88,0x26036424,0xd0122205,0x40488805,0x2c43e81a,
    0x09112144,0x20fcc244,0x20fcc0f9,0x20fcc0f9,0x91ce00f9,0x362c43e8,
    0x0d305882,0x550076cc,0x443e82c4,0x8838b445,0xb80ddadd,0x0dc2f981,
    0x824417cc,0x202f981b,0x06fb80f8,0xdf7027c4,0x9b106a00,0x80881997,
    0xa9abb884,0x2b76201a,0x5bb100dd,0x376201bb,0x39c00dda,0x9979b112,
    0x512cdd81,0x806dc981,0x2efe0ab9,0x66c40d40,0xa9b80ccb,0x7f500c00,
    0xf52ffb81,0x82ffb817,0x5c0bfa80,0x409502ff,0x00999801,0x01800006,
    0x00c40180,0x006000c0,0x218c0030,0x01000601,0x00880000,0x00003004,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x028800a6,0x00d40350,
    0x54407295,0x20054400,0x980498d8,0x0a6018ce,0x4c0c674c,0x77588594,
    0x52a02e00,0x01b9802c,0x4401100c,0x5018600a,0x01a80003,0x0d402ee2,
    0x05300530,0x13200788,0x6981b2e0,0xc81652a0,0x4025c05c,0x9804a8d8,
    0x0b602fc8,0x4c17e44c,0x77588594,0xca540e00,0x6c073802,0x5c0481d9,
    0xb848e204,0x5b8e886d,0xd101db50,0x0d301f11,0x0ba00f44,0x02400660,
    0x2a029944,0x4c06a600,0x10240351,0x4cc41333,0x26202660,0x00401c09,
    0x26213331,0x40199999,0x70004028,0x25da6057,0xa809002e,0x53288711,
    0x89c0a670,0x40b64a83,0x880e201a,0x33333103,0x99998833,0x4ccc4199,
    0x4cc41999,0x64e74c09,0x84ccc41e,0x26209998,0x415fb109,0x3fa61ec8,
    0x988ee440,0x881a0099,0x7f910cfb,0x7701d555,0x003401bb,0x4b55a81a,
    0x0b800039,0x00000035,0x002e8f20,0xfc880000,0x220eaaab,0x0eaaabfc,
    0x2aaaff22,0x833ee20e,0x10fc40f9,0x3fa619f7,0xb837a20c,0xdf307307,
    0x67dc4730,0x4405f700,0x260fcc1f,0x03fba541,0x3ee005f7,0x48eed302,
    0x541cbb80,0x21ceccec,0xbb81dba8,0xd996cc1c,0x425c5ec2,0xbb80dcba,
    0x0dcba81c,0x20cc1f98,0x260cc1f9,0x3e20cc1f,0x46c82741,0x427c41f8,
    0x07307b85,0x4298bf93,0x1b3601f8,0x0fcc1f88,0x004cd740,0x33600d9b,
    0x5c32ee06,0x07f0ec00,0x8d524249,0x45d0fe1d,0x76c5ec3d,0x6c3d9e21,
    0x36788fe1,0x9801f983,0x01f9801f,0x0be61f88,0x03f10fd4,0x5c0dc3f5,
    0x37307307,0x3e214c7f,0x03f35301,0x43f307e2,0x4039f828,0x4c01f9a9,
    0x53001f9a,0x4798b322,0x8891c46c,0xf31eccce,0x7b1746c8,0x231b23d8,
    0xd91e64e8,0xf309d118,0x0fcc1443,0x443f3051,0x3ea1f882,0x7c45f301,
    0x4122db01,0x7307307b,0x2214cbee,0x8274901f,0x66fcc1f8,0x23be82ec,
    0x9013a480,0x36480274,0xf51ea78a,0x66ee6ed4,0x23d40d51,0x87b1747a,
    0xc983ea3d,0xf51ea4c9,0x984c9c98,0x982eccdf,0x982eccdf,0x882eccdf,
    0x4c0bea1f,0x4407e22f,0x41ee04bf,0x3f239839,0x40fc4298,0x2203ea38,
    0x530fcc1f,0x102a5f90,0x38807d47,0x419003ea,0x87e61f1f,0x8835246a,
    0x21f9840f,0x87b1746a,0x2689e23d,0x6a87e64c,0xf984c9a2,0x87e60a61,
    0x261f9829,0x3e61f882,0x7c43f503,0xa80bee01,0x87305307,0x0fc429ee,
    0x1fe66664,0x07e60fc4,0x20fffa01,0x03fccccc,0x07f99999,0x1e27a154,
    0x4921e49d,0xe8715dd0,0x229b0f24,0x4cddec3e,0x066c5ea4,0x2f51e49d,
    0x0fcc0cd8,0x0107e602,0xf88083f3,0x45c82f41,0x07e601f8,0x81b80f98,
    0x2177c439,0x6c8481f8,0x0fcc1f88,0x4802a20c,0xd90906c8,0x2b2e1220,
    0x425ee444,0x77ecc124,0x425ee441,0x31ddaefa,0x4415957f,0x220ebcee,
    0x77444bdc,0x0fcc0ebc,0x0607e60c,0xf88303f3,0x3e60fcc1,0xf300fc40,
    0x2c43e803,0x42f98398,0x4c0dc1f8,0x260fcc2f,0x02a2441f,0x42f981b8,
    0x982f981b,0x00403300,0x10020041,0x00010880,0x40000800,0x262441f9,
    0x3e62441f,0x07e62441,0x0376b762,0x1f9807e6,0x665e6c40,0xa81ed880,
    0x7f50fcc2,0x912ffb81,0x37f223bf,0x0142eccc,0xffb817f5,0xfb817f52,
    0x0000002f,0x00000000,0x00000000,0x3337f220,0x37f222ec,0x3222eccc,
    0x22ecccdf,0x0601dfc8,0x981dfc88,0x03000dfd,0x7e441000,0x0000001d,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00080544,0x28a01a80,0x20001730,0x0014c029,0x880c4020,0x30110180,
    0x005400c0,0x014c014c,0x01804c00,0x130182a6,0x300854c0,0x44133310,
    0x09998099,0x33310a60,0x75c26ec1,0x2eadc29d,0xb300fd98,0x4c1ce019,
    0x0f884c8e,0x3fa20b60,0x40fa80ab,0x40c83da9,0x0b50905a,0xc9e8802e,
    0x200f4401,0xb71d103d,0xf30eab60,0xca9ad985,0x7b10903b,0xea87db33,
    0x2bf622fe,0xf307b220,0x03b305ff,0x4663bf51,0x41db841b,0x22701729,
    0x205bc883,0x533883bb,0x10380a60,0x20180f66,0x2c414c0b,0x4c2c40d4,
    0x04996403,0x20240388,0x6c970533,0x0f98be61,0xe8380fcc,0xbb1c4a82,
    0x907307b8,0x00b50333,0x0000007f,0x80f60800,0x00000000,0x7d301800,
    0x488b1048,0xd0090b10,0x00000727,0xb90fc000,0x909d0fc4,0x6d8350d9,
    0x5c2a80a0,0x04987307,0x8be003e2,0x5d40dcba,0x6e5d40dc,0x881cbb80,
    0x5d41feba,0x6dd440dc,0x20edd441,0xbb81dba8,0x5880a01c,0x322c402e,
    0x00b8b100,0xcc89cec8,0x16ccb663,0x98b665b3,0x7c45b32d,0x261f1ee0,
    0x0fd4642f,0x0009f112,0x1cc1ee0e,0x9b02fff2,0xf12f8051,0x1ecf11ec,
    0x8761ecf1,0x4e88e43f,0x5243d9e2,0x491aa48d,0x07f0ec6a,0x23575017,
    0x21d30429,0x443a602a,0x23fc8043,0x0f62e85c,0x8ba1ec5d,0xfa83ea3d,
    0x2e1fa9a0,0x4c387f31,0x42ccb82f,0x83dc1fd9,0xf8bf5039,0x5f01fdac,
    0x88c4e88c,0x24e88c4e,0x91e36479,0x449d118d,0xd11eccce,0x3a23d999,
    0x8f31eccc,0x9002cc6c,0x269103c8,0x791202dc,0x90fd9c88,0x21ec5d01,
    0x45d0f62e,0x7b83ea3d,0x8e65f52c,0xf306a2f9,0x6c41ba05,0x1cc1ee0f,
    0x83e61f10,0x64c5f05d,0x64e4c4c9,0x5264e4c4,0x51ea7a8f,0x24c9c98f,
    0xa81aa06a,0x8f51ea06,0x5417002e,0x4c21903c,0x1e543705,0x14efc4ba,
    0x5d0f62e8,0x3d8ba1ec,0x1c6b87e2,0xfa8919f1,0xd827c120,0x0f517c05,
    0x265b00a6,0x97c1ee0f,0x26893268,0x24c9a24c,0xf89aa1f9,0x32689aa0,
    0x22103e24,0x40f8840f,0x33543f30,0x1cc1a21f,0x05307533,0x4cc71035,
    0xfb87e63b,0x43d8ba05,0x45d0f62e,0x8991743d,0x2e426ec0,0x6c1b2071,
    0x1f306c05,0x11c80370,0x1f82d43f,0x543362f5,0x5ea19b17,0xc93a0cd8,
    0x54791f43,0x77419b17,0x4577438a,0x21c57743,0x1f88f24e,0x373a241a,
    0x8154240d,0x986ee744,0x4cffa64f,0x21f45361,0x4d87d14d,0x3a4b87d1,
    0x30be2140,0xe880d41f,0xb1045d85,0x185887d0,0x1e499122,0x77443e55,
    0x9dd10ebc,0x33ba21d7,0x2f7220eb,0x44bbc984,0x20ebcee8,0x6cc1efd9,
    0x77ecc1ef,0x425ee441,0x1b8299db,0x540b8750,0xb80d44ad,0xc9ef7e43,
    0x577d44ff,0x2bbea1dd,0x2bbea1dd,0x166641dd,0xccab87e2,0x20240aaa,
    0x2dbabdc8,0x203337e6,0x40ccbcd8,0x7904cef8,0x02bfb877,0x01000000,
    0x01000010,0x02004008,0x22018060,0x04ccc0c0,0x01008806,0x80422011,
    0x04220108,0x10204010,0x03100040,0x20060008,0x00200800,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x99988035,0x26009819,0x20035000,0x0ccc4119,0x199884cc,
    0x4cc43333,0x04c01440,0x80141000,0x026601a9,0x1b882662,0x00015400,
    0x210d4400,0x443624ea,0x4c400999,0x00199999,0x20510018,0x03b98ab8,
    0x4cdffffb,0x4dc4599c,0x3157103b,0x2ab66077,0x20ffa66d,0x23fd11fb,
    0x2f621ff9,0x20f666e0,0x7543c8c8,0x3e20cfca,0x9ce98071,0x0fe981ec,
    0x5f50ee44,0x54274c00,0x55c43ddb,0x5ec41ccc,0x9361eca9,0x2b3f2238,
    0x7e440ded,0x440eaaab,0x03ffea83,0x555c42e4,0x0c88710a,0x8b21d8ea,
    0x47107a1e,0x1d83a9a9,0x2a0be62c,0x1f707d43,0x0f534458,0x37e0e679,
    0x530c3f98,0x3f103e60,0x0730df30,0x44d8005d,0x27913a1c,0x417440f9,
    0x05c3e62d,0x1fc883ea,0xb0660fcc,0x807dc707,0x197385da,0xc808a299,
    0xf12d8fa1,0x22a9c3b8,0x21fc28bb,0xf0485e82,0x11217c47,0x0ba07ccd,
    0x023645d0,0x36413a09,0x0a62fe4c,0x899000ba,0xf8ba2646,0x42882ec2,
    0x01f3093d,0x401f98dd,0xf1022dea,0x88b79105,0x039a6952,0x8eafea34,
    0x289ae1f9,0xbf90e30b,0x9107d401,0x25f99b20,0x7425c01a,0x8f517402,
    0x817cc1c3,0x7cdcc1fa,0x2aba0a63,0xebaa80cf,0xc8991aa4,0x007f0f15,
    0x7cc157cc,0x3e60fa80,0x00f60a21,0x16e901f1,0x8b2b6a15,0x3ee0ea02,
    0xa9ae3f85,0x320a05a8,0xb93e02ff,0x2f21f300,0x41d0090f,0xd01cdfc8,
    0x53162d45,0x5f301fa8,0x265f7398,0x4ea8ce82,0x7cc9d164,0x2af61320,
    0x20017cc0,0x301f306e,0x666fcc5f,0x5c03d82e,0xa8b71b84,0x028b7950,
    0x13ef2072,0x549d59d5,0x4c0a06a8,0x21f705fe,0xf8c9fc05,0x80d4048a,
    0x591f403d,0x17d44868,0x91cc2f98,0x45d0531f,0x89b07c6b,0x644e88cf,
    0x000be601,0x203e6075,0x987e62f9,0x42c03d82,0x25116e38,0xd01c5b4a,
    0x20bea590,0x7ca22f88,0x2e043840,0x2abf883f,0xdd94f640,0x5b01401a,
    0x83aaee80,0x0fe61c0f,0xd0e60fd4,0x4c5d053d,0x44c8f50f,0x644ccfea,
    0x1fc4ffff,0x7cc02e00,0x3e61fb80,0x701ec041,0xfddddb03,0x46e45c1d,
    0x730299e8,0xb82dc1f0,0xb5593385,0x4d838531,0xf3009d90,0x0c02fd4b,
    0x57408390,0x2983f100,0x985c82f4,0x74177c43,0x21f99ea2,0x7132104c,
    0x0bb064cc,0x4c091104,0x7cc5e80f,0x40a6c181,0xb555301a,0x2133905d,
    0x207203a8,0x16a0aa2d,0x41cc2238,0xf980f40e,0x4f89d004,0x7dcc1440,
    0x02e8399c,0xf3120be6,0x3980f983,0x22e82f98,0x09b2743c,0x0e16a4d8,
    0x2e1509f3,0x307d406f,0x41f981db,0x2a1fdc48,0x2e03999b,0x2eaaee05,
    0xab883402,0x401d4c3a,0xb02baabb,0xe807977b,0x1c837000,0x55543d40,
    0x1fc43ffb,0x81703f30,0x80ddadd8,0x82a81ed8,0xe982bbeb,0x3a01edde,
    0x2f37f625,0xbbced880,0x3f6600c0,0xc883ddcd,0x02ecccdf,0x3fffffa8,
    0x022016e0,0x04020040,0x42004400,0x00010008,0x02010008,0x40133301,
    0x00180101,0x20020080,0x09988010,0x003000c4,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x99880000,0x33109999,0x02a20133,0x33333330,0x33099983,
    0x00aa1cc1,0x0d43986a,0x22b98000,0x22009998,0x19880999,0x1004cc40,
    0x004ccc40,0x4c426662,0x00530099,0x00026662,0x4ccccc40,0x41333109,
    0x33310998,0x4a84ccc3,0x3f22012a,0xf916caab,0x7907d957,0xaaeee980,
    0x433ea2da,0x4cdb10ea,0x3074c03e,0x2201fd49,0xd2a82dba,0x8033f227,
    0xc880bfc8,0x02bfa02f,0x33f22068,0x5c40deda,0x79f910cf,0x362ee89d,
    0x9f910e9b,0x3a201dd7,0x566c0abf,0xfd32fdaa,0x886f4419,0x33e61ffb,
    0x322dcb70,0x51c0fa85,0x241fc41f,0x0a177220,0x1aa0d4b9,0x800b807b,
    0x7a86c03d,0x7cc111e8,0x200fa801,0x0df306fa,0x3ea02fb8,0xf107b220,
    0x9f10fa83,0x71351c2a,0x41ba0fa8,0x88707b30,0x2c27c44f,0x70e62fb8,
    0x20a62dcb,0x03e600f9,0xb17000db,0x121f300b,0x0007b1aa,0x46880f60,
    0x3f300f80,0x5b99f300,0xcd82fb98,0x30366c06,0xf88dd01f,0x0db07cc1,
    0xf907cc00,0xdb020001,0x0dc3f501,0x70911fb0,0xf9802dcb,0x441f30e0,
    0x881b224e,0x9b038bb4,0x3d8d5053,0x9b2215b1,0x75dec6c8,0xf7103546,
    0x003f3057,0x98bea1f3,0x365cc6da,0x203f3530,0x20fa80f9,0xf07cc1f8,
    0xd911b229,0x42f41f30,0x406ebbea,0x45b601fa,0x06e7c404,0x200b72dc,
    0x4c4dccf9,0xb84ecbcf,0x676c2e06,0x09f503ec,0x0727b1aa,0xdd8d71ae,
    0x107c45d0,0x3f300f81,0x3741f300,0x4643f353,0x84e9206c,0x264ccfdb,
    0xf307e22f,0x35c3d913,0x5d7cc35c,0x23bd00cd,0x809f102e,0xf5004bf8,
    0x6ec5ae07,0x887cc008,0xfc987cc3,0xae883543,0x550e25ea,0x54355bd5,
    0xa8065ec6,0xd8f63546,0x41c4f743,0x003f300f,0x5337c1f3,0x06ca4576,
    0x4c07d471,0x222f980f,0x0d57cc1f,0x4c354354,0x3600fcaf,0x036c0f63,
    0xd5002fb8,0x39dd701f,0x7cc0cc9f,0xc81f3020,0x0641aa0f,0x4ccc08bb,
    0x1aa099ce,0x1aa03fbb,0x1363d8d5,0x1f01bfb3,0x26007e60,0x94c5f70f,
    0x0d90c9fa,0x0ff33332,0x87ee03e6,0x007cc1f8,0xf30d50d5,0x23d817a1,
    0x001fb84c,0x193003f3,0x041190bf,0x01f303fa,0x87ee07cc,0x2ec3886a,
    0xdeaaa844,0x7b1aa1aa,0xa8d501f7,0x209b1ec6,0x7cc03e05,0x6e7cc181,
    0x9bd14c1c,0x6c848364,0x45e80f98,0x007cc1f8,0xf30d50d5,0x1ec0fe21,
    0x183f9899,0x48803f30,0x803d0bea,0x007d40b8,0x546e81f5,0x42ec0d86,
    0x1aa07d04,0x1aa1b27b,0x1363d8d5,0x80fc41ec,0x2a1c41f9,0xfa8aa01f,
    0x206e1f21,0x307d42f9,0x41f981db,0x21aa01fa,0x2a1fa86a,0x1363d81f,
    0x7cc120bd,0x3f606c01,0x871007e0,0xd980cfd9,0x20cddcdf,0x8bf22fd8,
    0x4ecccffa,0x6c41dfa8,0xf33bf52f,0x44bf623b,0x33bf32fd,0x40c983dd,
    0x6cc0cfc8,0x22fdccef,0xd980cfd9,0xbfea961d,0xfb817f50,0xb9bfb32f,
    0x3bf9107b,0x22033f66,0x8bf622fd,0x3f60cfd9,0xd33bf30b,0x3337f23d,
    0xfd984fdc,0x21eea80d,0x0012efd8,0x00000003,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x884ccc40,
    0x4ccc4099,0x20809999,0x33109998,0x26666613,0x10000199,0x00000000,
    0x00000040,0x00020000,0x47d73ea8,0x3660004c,0x4a005b32,0x06e331a8,
    0x6c4336a0,0x7b11a800,0x88105d97,0x39f30bfc,0xacfabdb8,0xc88fea6c,
    0x19f710bf,0x91c41806,0x4179b790,0x5440dcba,0x6dd442db,0x44048a61,
    0xcbb8d703,0xbaebbb81,0x0365544c,0x3aefaa09,0x48ba3e86,0x23baef6a,
    0xb1741fea,0x87edf547,0x44daadd8,0x12e402db,0x10e5c407,0x0f442ec1,
    0x703b83e6,0x87b0e2f8,0x317c40f9,0x15c360c0,0x9e23e8b6,0x47a86c3d,
    0x2a3b1aa4,0x14c0e203,0x4f11fc3b,0x92c4ba5e,0x23bd0240,0x2db3542e,
    0xdd86f438,0x362e8b90,0x12146f43,0x02f2a071,0x4c05c3e6,0x075c00bc,
    0x43e62464,0x05f0203b,0x103e61ec,0x64300c5f,0x70f88d53,0x49d118d9,
    0x99d10468,0xe874c3d9,0xf3007102,0xee88c6c8,0x19f13dcc,0x47b02401,
    0xfb99f83d,0x991ec0a9,0x3d8ba354,0x1c0d41ec,0x7b033260,0x2005950e,
    0x533981f9,0x001dc7cc,0x4c3d80be,0x0317c40f,0x87f0fa8c,0x41f3357a,
    0x1aa4c9c9,0x74e806a8,0x56dd554f,0x547a80aa,0x01ed6447,0x554c5fd3,
    0x360aaada,0x4f321323,0x323d83cc,0x6c5d1aa4,0x414c1ec3,0x205e5404,
    0x66441aea,0x481f4401,0x06df9864,0x0f602f80,0xf75557f3,0x9ec300c5,
    0xa95fcc6a,0x224c9a27,0x07c4220f,0x45d0f982,0x199c9998,0x13543f30,
    0x8211761f,0xb33311fc,0x91ec1333,0x3e67f309,0xa9323d82,0x43e8a6c6,
    0x0388b03d,0x05f80597,0x2ec0b6e2,0x4ce20d4a,0x7c005fbf,0x5f30f602,
    0x0c5f3333,0xd0ae5830,0x22f51e49,0x227ba0cd,0x21c57743,0x1c40951d,
    0x3c93a188,0x352fc9ea,0x0901e8e6,0x1a09b1ec,0x25c8f60d,0x6d77d46a,
    0x3260f61d,0x3224ccbd,0x0057001c,0xbcfb8f2a,0x1f3002db,0x17c00bf3,
    0x40f987b0,0x418062f8,0xbec89238,0x5e77444b,0x037f660e,0x14c3dfb3,
    0xd9038809,0x2225ee44,0x4ffd9cee,0x4812afe6,0xdd33bf30,0xf9808103,
    0xd89ee99d,0x4c08442f,0x4410c1ef,0x00000150,0x20000330,0x00bf30f9,
    0x4c3d80be,0x0317c40f,0x0043000c,0x00200400,0x676665c0,0x002020cc,
    0x00220083,0x00000009,0x00000000,0x00000000,0x83ea0000,0x1fc00df9,
    0x40fa87b0,0x2666a2f8,0x00002999,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x30000000,0x3fe619fb,0x77e440be,0xb31eea81,
    0x37f2219f,0x00000001,0x83101503,0x06203018,0x060540c4,0xcca80613,
    0x951ccccc,0x43999999,0x0000d429,0xcc884c00,0x2a3ccccc,0x91aaaaaa,
    0x00000007,0x00000000,0x30000000,0x203d31dd,0x0c855059,0x08ac8cb5,
    0x32e65973,0x291a2e64,0x2255dc2c,0x35f1ea6f,0x4400641f,0x542d8002,
    0x98b77226,0x7d4f6d50,0x4449b3ff,0x55408888,0x571aaaaa,0x00000000,
    0x00000000,0x26000000,0x00402a9f,0x64b03257,0x85c2eabe,0x2d964b10,
    0x5c711e4c,0x74799220,0x01320f8a,0x4cccc4a2,0x5c0e0999,0x1eed4450,
    0x88886a71,0x00000010,0x00000000,0x00000000,0x64000000,0xaaaaa83e,
    0x0edc0aaa,0x3037aa2c,0x4ee1a87b,0x70ea361b,0x4585305c,0x00e4cd0d,
    0xbbbba844,0x00000bbb,0x00000000,0x00000000,0x00000000,0x00000000,
    0x333107f0,0x59903333,0x755eecb0,0x9106a582,0x0dbce875,0x7010f32a,
    0x00000e38,0x00000000,0x00000000,0x00000000,0x00000000,0x5c000000,
    0x806201f9,0x874c571c,0x2ea11590,0x01bbd71a,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x0d71a800,0x5c1a824c,
    0x00404c00,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x21d50000,0x00000dfa,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_17_latin1_x[224]={ 0,1,0,0,0,0,0,0,0,0,1,0,0,0,
1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,
-2,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,2,1,1,0,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,0,0,0,0,
1,1,0,0,-1,0,0,0,0,-1,0,0,0,0,1,1,-1,1,1,1,0,0,1,1,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,
 };
static signed short stb__times_17_latin1_y[224]={ 13,2,2,2,1,2,2,2,2,2,2,3,11,8,
11,2,2,2,2,2,2,2,2,2,2,2,5,5,4,6,4,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,15,2,5,2,5,2,5,2,5,2,2,
2,2,2,5,5,5,5,5,5,5,3,6,6,6,6,6,6,2,2,2,7,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,13,5,3,2,4,2,
2,2,2,2,2,5,6,8,2,1,2,3,2,2,2,6,2,7,12,2,2,5,2,2,2,5,-1,-1,-1,0,
0,0,2,2,-1,-1,-1,0,-1,-1,-1,0,2,0,-1,-1,-1,0,0,4,2,-1,-1,-1,0,-1,2,2,2,2,
2,2,2,2,5,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,5,2,2,2,2,2,2,2,
 };
static unsigned short stb__times_17_latin1_w[224]={ 0,3,6,8,7,13,12,3,5,5,6,9,4,5,
2,5,8,5,8,7,8,7,8,7,7,8,2,3,9,9,9,7,14,11,10,10,11,10,8,11,11,5,6,12,
10,14,12,11,8,11,11,8,9,11,11,15,11,11,9,4,5,4,7,9,4,7,9,7,8,7,7,8,8,4,
5,8,4,12,8,8,9,8,6,6,5,8,8,11,8,8,7,5,1,5,9,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,3,7,8,8,8,
1,6,5,12,6,8,9,5,12,9,6,9,5,4,4,8,8,2,3,3,5,8,11,11,12,7,11,11,11,11,
11,11,15,10,10,10,10,10,5,5,5,5,11,12,11,11,11,11,11,7,11,11,11,11,11,11,8,8,7,7,
7,7,7,7,10,7,7,7,7,7,4,4,5,5,8,8,8,8,8,8,8,9,8,8,8,8,8,8,9,8,
 };
static unsigned short stb__times_17_latin1_h[224]={ 0,12,5,12,14,12,12,5,15,15,7,9,5,3,
3,12,12,11,11,12,11,12,12,12,12,12,9,11,8,4,8,12,15,11,11,12,11,11,11,12,11,11,12,11,
11,11,12,12,11,15,11,12,11,12,12,12,11,11,11,15,12,15,7,2,4,9,12,9,12,9,11,12,11,11,
15,11,11,8,8,9,12,12,8,9,11,8,8,8,7,11,7,15,15,15,4,10,10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,12,13,12,8,11,
15,14,3,12,6,9,4,3,12,2,6,9,7,7,4,11,15,2,4,7,6,9,12,12,12,12,14,14,14,13,
13,13,11,14,14,14,14,13,14,14,14,13,11,14,15,15,15,14,14,7,12,15,15,15,14,14,11,12,12,12,
12,12,12,12,9,11,12,12,12,12,11,11,11,11,12,11,12,12,12,12,12,7,9,12,12,12,12,15,15,15,
 };
static unsigned short stb__times_17_latin1_s[224]={ 255,178,120,185,224,162,129,116,29,47,73,
142,111,177,183,194,169,24,237,212,246,232,240,14,22,30,112,250,230,141,211,
89,55,135,10,188,208,220,1,200,30,159,249,1,100,120,138,126,165,145,186,
52,14,220,61,73,229,217,207,129,120,140,248,196,156,69,151,77,161,85,92,
179,75,70,157,56,51,173,152,115,106,170,195,135,231,186,221,161,42,199,240,
163,115,134,161,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,255,116,130,
97,202,42,53,181,171,39,97,51,131,177,1,186,104,102,85,80,151,241,106,
206,127,69,91,93,117,105,92,84,200,212,232,101,138,150,26,244,1,12,23,
119,34,95,52,113,147,82,70,82,94,188,40,61,182,35,169,117,70,58,111,
220,229,246,1,9,17,43,124,84,59,67,194,51,21,65,174,180,34,198,237,
176,25,75,202,51,60,142,151,211,160,20,10,1, };
static unsigned short stb__times_17_latin1_t[224]={ 1,32,80,17,1,17,32,80,1,1,80,
70,80,80,80,32,32,70,45,32,45,32,32,45,45,45,70,58,70,80,70,
45,1,58,58,45,45,45,58,32,70,58,32,70,58,58,45,45,58,1,58,
45,70,32,45,45,58,58,58,1,45,1,70,80,80,70,45,70,45,70,58,
45,58,58,1,58,58,70,70,70,45,45,70,70,45,70,70,70,81,45,70,
1,1,1,80,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,1,45,17,
45,70,58,1,1,80,45,80,70,80,80,45,80,80,70,80,80,80,58,1,
80,80,80,80,70,32,32,32,32,1,1,1,17,17,17,58,1,17,17,17,
17,17,17,17,17,58,17,1,1,1,1,17,80,32,1,1,1,17,17,58,
17,17,17,32,32,32,32,70,58,32,32,17,32,58,58,58,58,32,58,17,
17,32,32,17,80,70,32,32,17,32,1,1,1, };
static unsigned short stb__times_17_latin1_a[224]={ 61,82,100,123,123,205,191,44,
82,82,123,139,61,82,61,68,123,123,123,123,123,123,123,123,
123,123,68,68,139,139,139,109,226,177,164,164,177,150,137,177,
177,82,96,177,150,218,177,177,137,177,164,137,150,177,177,232,
177,177,150,82,68,82,115,123,82,109,123,109,123,109,82,123,
123,68,68,123,68,191,123,123,123,123,82,96,68,123,123,177,
123,123,109,118,49,118,133,191,191,191,191,191,191,191,191,191,
191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,
191,191,191,191,191,191,191,191,61,82,123,123,123,123,49,123,
82,187,68,123,139,82,187,123,98,135,74,74,82,142,111,61,
82,74,76,123,184,184,184,109,177,177,177,177,177,177,218,164,
150,150,150,150,82,82,82,82,177,177,177,177,177,177,177,139,
177,177,177,177,177,177,137,123,109,109,109,109,109,109,164,109,
109,109,109,109,68,68,68,68,123,123,123,123,123,123,123,135,
123,123,123,123,123,123,123,123, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_17_latin1_BITMAP_HEIGHT or STB_FONT_times_17_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_17_latin1(stb_fontchar font[STB_FONT_times_17_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_times_17_latin1_BITMAP_HEIGHT][STB_FONT_times_17_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_17_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_17_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_17_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_17_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_17_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_17_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_17_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__times_17_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__times_17_latin1_s[i] + stb__times_17_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__times_17_latin1_t[i] + stb__times_17_latin1_h[i]) * recip_height;
            font[i].x0 = stb__times_17_latin1_x[i];
            font[i].y0 = stb__times_17_latin1_y[i];
            font[i].x1 = stb__times_17_latin1_x[i] + stb__times_17_latin1_w[i];
            font[i].y1 = stb__times_17_latin1_y[i] + stb__times_17_latin1_h[i];
            font[i].advance_int = (stb__times_17_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__times_17_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_17_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_17_latin1_s[i] + stb__times_17_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_17_latin1_t[i] + stb__times_17_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_17_latin1_x[i] - 0.5f;
            font[i].y0f = stb__times_17_latin1_y[i] - 0.5f;
            font[i].x1f = stb__times_17_latin1_x[i] + stb__times_17_latin1_w[i] + 0.5f;
            font[i].y1f = stb__times_17_latin1_y[i] + stb__times_17_latin1_h[i] + 0.5f;
            font[i].advance = stb__times_17_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_17_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_17_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_17_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_17_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_17_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_17_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_17_latin1_LINE_SPACING
#endif

