// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_7_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_7_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_7_latin1_BITMAP_WIDTH         256
#define STB_FONT_courier_bold_7_latin1_BITMAP_HEIGHT         26
#define STB_FONT_courier_bold_7_latin1_BITMAP_HEIGHT_POW2    32

#define STB_FONT_courier_bold_7_latin1_FIRST_CHAR            32
#define STB_FONT_courier_bold_7_latin1_NUM_CHARS            224

#define STB_FONT_courier_bold_7_latin1_LINE_SPACING           3

static unsigned int stb__courier_bold_7_latin1_pixels[]={
    0x00000000,0x05833100,0x02000000,0x33000001,0x215c0000,0x00220228,
    0x00000000,0x00400033,0x91001000,0x00000039,0x2b8134a8,0x5702604c,
    0x0a0cc0a8,0x665c5737,0x40983710,0x06604c2b,0x15c14c9b,0x224c882a,
    0x02a15c3c,0x931e4415,0x99320549,0x02615c4c,0x5c433013,0x57570543,
    0x81971322,0x50720b84,0x93221b81,0x20dc4314,0x02615c09,0x1e445415,
    0x2e6e5757,0x1e447912,0x2eae5757,0x2a619172,0x8b9445c4,0x2219170c,
    0xc893224c,0x98907264,0x8a93264c,0x2233170b,0xc893224c,0x290662e4,
    0x83ba63c9,0xc98f2659,0x3930f263,0x373724d4,0x1ca98cce,0x4c388391,
    0x1c98721c,0x24b992e6,0x65c39304,0x2619970c,0x54332e4c,0x267198b8,
    0x4c5c9531,0x4ce33171,0x54546671,0x19b70f60,0x54542a2a,0x29a4a690,
    0x064c4a69,0x0540a835,0x94521715,0x3b991dcc,0x28a47732,0x3666c9a4,
    0x6c986445,0x86c99b26,0xc892aa4c,0xdb86a2e4,0x06417930,0x4c815264,
    0x0dc98ae6,0x24c83993,0x15550aaa,0x21555054,0x22e5148a,0x5148f61a,
    0x1a8b9452,0x3b263517,0x41c81b31,0x3d931ec9,0x6e54372a,0x36a1b950,
    0x2a054484,0xcc993620,0x32a19950,0x2619950c,0x2e9510cc,0x4c9911ec,
    0x23d970db,0x3d971ecb,0x833336d4,0xc893261b,0x84886643,0xda8266da,
    0x8b930dc6,0x9536d41a,0xa82b2a15,0x5d42b2a0,0x49930cc9,0x433260d9,
    0x49930cc9,0x40cc04c9,0x00000019,0x26150130,0x0013664d,0x06200000,
    0x00000660,0x0d4973d0,0x200009b1,0x04b9e809,0x0000973d,0x6ee52e7a,
    0x3665bb92,0x000b7724,0x000000cc,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x44419833,
    0x4c00d441,0x004c2b81,0x33220000,0x05443310,0x20c8b8a6,0x4c8aeae4,
    0x2200e204,0x2200002a,0xb837262a,0x3322150c,0x0d88f323,0xd984c791,
    0x2a48f224,0x43b2e530,0x39912b9b,0x22a872e2,0x59911cc8,0x985910cc,
    0x49911541,0x20e4c4c9,0x326141c9,0x8115c643,0x41c1c43a,0x13552dc8,
    0x15c4322e,0x10a8a872,0xb91199c7,0x20a2c0a8,0x437129bb,0x713260d9,
    0xa8eee555,0x1aa42a1c,0x70a8a26e,0x2d986331,0xa85c662e,0x2a648150,
    0x3138c524,0x088b8f26,0x332e5b17,0x26449750,0x229a4991,0x4c84c80a,
    0x46c98322,0xa89119db,0x42e320bb,0x59591b8b,0x545432a2,0x67447710,
    0x8a63d950,0x37191a8b,0x224877aa,0x8955d40c,0x1210540c,0x31dc5155,
    0xdc982377,0x0a8336e1,0x710dce29,0x52a94521,0x6c388361,0x4b232123,
    0x473266c9,0x155529cc,0x6e64326a,0x6e54a691,0x8db502a0,0x970546da,
    0x98ed5c3d,0x98aee24b,0x277913ab,0x19970dec,0x23a87b26,0x88350fc8,
    0x4ca93263,0x81516054,0x502a0bba,0x5dd41c81,0x21b18e60,0x03915c0a,
    0x64332615,0x664c9931,0x0542a170,0x9306cc35,0x5cb32a39,0xdc86a1ec,
    0x3215950c,0x219950dd,0x36600dca,0x3d25cf44,0x00336697,0x4044395b,
    0xa5c3b83b,0x08000001,0x99500090,0x0cd98e23,0xd9866cc0,0x2009b90c,
    0x543730bb,0x88330cc0,0x0239b10d,0x530a9200,0x00000cc0,0x0b772060,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x32a1e440,0x32614162,0x4c88e42d,
    0x41ca8ae0,0x19173cc9,0xc870e654,0x6542cb80,0x0d449911,0x26043991,
    0x1b83623c,0x46e6e084,0x99322188,0x237370cc,0x2e721b9b,0x5c0ee723,
    0x479701cc,0x17950888,0x915c6404,0xb832a731,0xc99261bb,0x65c6eaa4,
    0x2a59950c,0x81911510,0x9d3265c4,0xdc886521,0x731c9911,0xb10e6c41,
    0xb82a2a57,0x541914dd,0x98d45c4d,0x23b990ce,0x8222e3cb,0x151b2608,
    0xeda86dcc,0x06449910,0x124cca69,0x32264499,0x82e2e2aa,0x5453572a,
    0x44017352,0xb702e38b,0x916de433,0x22643ba8,0x542e6a0a,0x053710aa,
    0x2e24a2a8,0xd9512288,0xccb8dd21,0x8836a370,0x9976a2bc,0x8b7761ec,
    0xd82e6a0a,0x9951229b,0x64c2a6a1,0x2e37751c,0xf982a1ec,0x87b16e61,
    0xc8372a0a,0x87b06e08,0x13221edc,0x47205475,0x66c406da,0x55c39b50,
    0x48af321d,0x5ca932a3,0x21b95054,0x47b10aca,0xb826150a,0x9066ec4c,
    0xd9525459,0x473aa007,0x2ee6c2ea,0xc866cc00,0x433322ca,0x656404e9,
    0x6cc00c01,0x263d570c,0x4c9d10aa,0x376e00cd,0x6de49b11,0x59076ae2,
    0xc8226c40,0x211113ab,0x360541da,0x52e7a1ca,0x57793cea,0x24d99aa2,
    0x5bb92dbc,0x000c076a,0x00026000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x5c000000,0x980e4c2c,
    0x204c7970,0x4b2b23cb,0x33321ccb,0x4e439931,0x4372602a,0x09711caa,
    0x22600c4c,0x542a0440,0x20c002a0,0x810a83a8,0x66446a08,0x6644663c,
    0x0000003c,0x00000000,0x00000000,0x44c83738,0x4326a3c8,0x42a6a3c8,
    0x86eea4b8,0x2e1639ac,0xb88b21dd,0x71362742,0x2790de45,0x165dc4aa,
    0x2f4c2a77,0x6d542635,0x4c04caa0,0x00e17730,0x00000000,0x00000000,
    0x00000000,0x36a299c0,0x995065c6,0xcac8ecc3,0x40888b21,0x87d54bbe,
    0x432a66c9,0x5d990de9,0x26350622,0x1551dc29,0xa804c510,0x00000002,
    0x00000000,0x00000000,0x00000000,0x199b0000,0x32225cf4,0x0ea59b91,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_bold_7_latin1_x[224]={ 0,1,0,0,0,0,0,1,1,0,0,0,1,0,
1,0,0,0,0,0,0,0,0,0,0,0,1,1,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,1,0,0,0,-1,1,0,-1,0,0,0,0,0,0,0,
0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
1,0,0,-1,0,0,-1,0,-1,-1,0,0,0,0,1,0,0,1,1,1,0,0,0,-1,0,0,-1,-1,-1,-1,
-1,-1,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,
 };
static signed short stb__courier_bold_7_latin1_y[224]={ 5,0,1,0,0,1,1,1,1,1,1,1,4,2,
4,0,0,0,0,0,1,1,0,1,0,0,2,2,1,2,1,1,0,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,6,0,2,1,2,1,2,1,2,1,1,
1,1,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,1,1,2,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,2,0,1,1,1,
1,1,1,1,0,2,2,2,1,0,0,0,0,0,0,2,1,2,4,0,0,2,0,0,0,2,-1,-1,-1,0,
0,-1,1,1,-1,-1,-1,0,-1,-1,-1,0,1,0,-1,-1,-1,0,0,2,1,-1,-1,-1,0,-1,1,1,0,0,
0,1,1,0,2,2,0,0,0,1,0,0,0,1,1,1,0,0,0,1,1,1,1,0,0,0,1,0,1,1,
 };
static unsigned short stb__courier_bold_7_latin1_w[224]={ 0,2,3,4,4,4,4,2,3,3,4,4,2,4,
2,4,4,4,4,4,4,4,4,4,4,4,2,2,5,4,4,4,4,5,4,4,4,4,4,4,4,4,4,4,
4,5,5,4,4,4,4,4,4,4,5,5,4,4,4,2,4,3,4,5,2,4,5,4,4,4,4,4,4,4,
3,4,4,5,4,4,5,4,4,4,4,4,4,5,4,4,4,2,2,2,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,2,4,4,4,4,
2,4,3,5,3,4,5,4,5,5,3,4,3,3,2,4,4,2,2,2,3,4,4,5,4,4,5,5,5,5,
5,5,5,4,4,4,4,4,4,4,4,4,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,4,
 };
static unsigned short stb__courier_bold_7_latin1_h[224]={ 0,6,2,6,6,5,5,3,5,5,3,4,2,2,
2,6,6,5,5,6,4,5,6,5,6,6,4,4,4,3,4,5,6,4,4,5,4,4,4,5,4,4,5,4,
4,4,4,5,4,5,4,5,4,5,4,4,4,4,4,5,6,5,3,1,2,4,5,4,5,4,4,5,4,4,
6,4,4,3,3,4,5,5,3,4,5,4,3,3,3,5,3,5,5,5,2,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,6,4,4,4,
5,5,1,5,3,3,3,2,5,1,3,5,4,4,2,5,5,2,3,4,3,3,5,5,5,5,6,6,6,5,
5,6,4,6,6,6,6,5,6,6,6,5,4,5,7,7,7,6,6,3,5,7,7,7,6,6,4,5,6,6,
6,5,5,6,4,5,6,6,6,5,5,5,5,4,5,4,6,6,6,5,5,4,5,6,6,6,5,7,6,6,
 };
static unsigned short stb__courier_bold_7_latin1_s[224]={ 253,203,158,136,77,110,115,139,125,144,142,
198,176,171,165,192,97,164,169,141,225,216,187,235,217,182,250,253,43,69,54,
1,167,37,49,245,32,240,245,250,235,230,6,220,215,209,203,221,193,208,183,
100,174,129,164,158,153,148,143,253,82,204,91,189,150,108,11,98,27,88,83,
22,72,67,127,118,113,74,59,138,198,193,80,32,17,56,64,85,101,240,96,
232,229,226,153,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,
188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,253,213,212,
40,123,128,190,185,185,174,120,124,129,171,153,179,135,139,179,170,162,120,180,
168,147,37,111,115,90,84,79,74,206,161,227,52,46,197,50,222,233,248,238,
16,243,92,87,41,77,68,16,1,21,122,102,106,11,26,31,6,177,172,45,
21,156,151,146,1,63,131,61,6,117,112,107,26,58,148,159,133,134,93,72,
67,62,31,36,103,95,36,57,52,105,11,46,41, };
static unsigned short stb__courier_bold_7_latin1_t[224]={ 7,1,20,1,1,8,8,20,8,8,20,
15,20,20,20,1,1,8,8,1,15,8,1,8,1,1,15,15,20,20,20,
15,1,20,20,8,20,15,15,8,15,15,15,15,15,15,15,8,15,8,15,
8,15,8,15,15,15,15,15,1,1,8,20,20,20,15,15,15,15,15,15,
15,15,15,1,15,15,20,20,15,8,8,20,15,15,15,20,20,20,8,20,
8,8,8,20,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,8,1,
15,15,15,8,8,20,8,20,20,20,20,8,20,20,8,15,15,20,8,8,
20,20,15,20,20,8,8,8,8,1,1,1,8,8,1,15,1,1,1,1,
9,1,1,1,8,15,8,1,1,1,1,1,20,9,1,1,1,1,1,15,
9,1,1,1,9,8,1,15,9,1,1,1,9,8,8,8,15,8,15,1,
1,1,9,8,15,8,1,1,1,8,1,1,1, };
static unsigned short stb__courier_bold_7_latin1_a[224]={ 59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_7_latin1_BITMAP_HEIGHT or STB_FONT_courier_bold_7_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_7_latin1(stb_fontchar font[STB_FONT_courier_bold_7_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_7_latin1_BITMAP_HEIGHT][STB_FONT_courier_bold_7_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_7_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_7_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_7_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_7_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_7_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_7_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_7_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_7_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_7_latin1_s[i] + stb__courier_bold_7_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_7_latin1_t[i] + stb__courier_bold_7_latin1_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_7_latin1_x[i];
            font[i].y0 = stb__courier_bold_7_latin1_y[i];
            font[i].x1 = stb__courier_bold_7_latin1_x[i] + stb__courier_bold_7_latin1_w[i];
            font[i].y1 = stb__courier_bold_7_latin1_y[i] + stb__courier_bold_7_latin1_h[i];
            font[i].advance_int = (stb__courier_bold_7_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_7_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_7_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_7_latin1_s[i] + stb__courier_bold_7_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_7_latin1_t[i] + stb__courier_bold_7_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_7_latin1_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_7_latin1_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_7_latin1_x[i] + stb__courier_bold_7_latin1_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_7_latin1_y[i] + stb__courier_bold_7_latin1_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_7_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_7_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_7_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_7_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_7_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_7_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_7_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_7_latin1_LINE_SPACING
#endif

