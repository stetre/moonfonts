// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_24_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_24_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_24_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_bold_24_usascii_BITMAP_HEIGHT         76
#define STB_FONT_courier_bold_24_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_bold_24_usascii_FIRST_CHAR            32
#define STB_FONT_courier_bold_24_usascii_NUM_CHARS             95

#define STB_FONT_courier_bold_24_usascii_LINE_SPACING          11

static unsigned int stb__courier_bold_24_usascii_pixels[]={
    0x01506aa0,0x4c188062,0x9b000aaa,0x9802aaa6,0x8007d00c,0x2002e239,
    0xa802cedb,0xcb9802a1,0x41aa980b,0x554c1aa9,0x802ccb89,0x2a602cb8,
    0x201aaaaa,0x32e60008,0x880ca80b,0x15552cca,0x102cca80,0x35515997,
    0x1ffc0310,0x5f905ff5,0x3e61ffb0,0xfa803fff,0x40ffffb6,0x0ff882fc,
    0x2a3fd100,0x3ffa606f,0x3e00dfff,0x3ea0bf37,0x3ee0efff,0xfff50fff,
    0x3fffe23f,0x81efffff,0x3fffffe9,0xffffffb8,0x67fe441f,0x7fffd400,
    0x517fe60f,0xffffffff,0x3ffee0ff,0x7ffdc1ff,0x43ffffff,0x45dd05ff,
    0x7ec0ffd8,0x9127fcc2,0xfd007ffd,0x40f7bf65,0x6c2bdfea,0x4df9004f,
    0xff883ff8,0x05ffeacf,0x217eaff1,0x49f30ef8,0x3623ffe8,0x7ff5c4ff,
    0x0ffeccff,0x7edefff4,0x777fdc0f,0x99eb84ee,0x3bfe203e,0x3fea6feb,
    0x337ffe67,0xb83efffe,0x20cbbeff,0xffdbfffa,0x3fe20cff,0x42fe8005,
    0x01fe42fd,0x7fa807f9,0xffd80bf6,0x3e62ffff,0x1ffc400f,0x3bf61bf2,
    0x4c1ffcc0,0xf909f77f,0x7fc46d81,0xfa837dc1,0x22ff40cf,0x21fe40ba,
    0x45d004fb,0xf17ee06b,0xe9bfe65f,0x0ffec0df,0x3e01ffdc,0x837fc44f,
    0x555510a9,0x42fd8355,0x017ec2fd,0x3fe807f9,0x7fd40bf6,0x6c3ffcac,
    0x43fdc04f,0x3fe22ff8,0xf30df902,0x1ba13f2d,0x4bf903ee,0xff502ff8,
    0x5c01fe60,0x8027dc5f,0xfd81324c,0xff9a7e42,0xf101ff15,0x805ff03f,
    0x6fc80ff8,0xffffff00,0x6c2fd8bf,0x9017ec2f,0x07fcc07f,0x0ff605fb,
    0x0ff983d3,0x7ec0ffa0,0xf981fea5,0x767fed47,0xd727c2ef,0x1ff881ff,
    0x37d40df9,0x26207f88,0x7fdc2ffb,0xf980dffe,0x44531fee,0x8b7d40ff,
    0x01ff15ff,0x6f983ff1,0x41be6055,0xdb7006fb,0xfd8bfddd,0x3f617ec2,
    0xd80ff202,0xb817ec4f,0x7fd001ef,0xfb817fc0,0xff013ee6,0x3ffffe23,
    0x7f11ffff,0x203f77ee,0x02ff8dfc,0x3f60ffea,0xbffff106,0xffffff70,
    0x7577101f,0x437ccdfd,0xf93fe7f8,0x41ffc84f,0x3effedfb,0x7f40ffc4,
    0x17ea0006,0x17ec19fb,0x7e405fd1,0xd81ff303,0xffff102f,0x83fd405b,
    0xff500ff8,0xff1037d4,0x7e77f541,0x7cbe23df,0xff101f74,0xffa80dfd,
    0x2ffecbef,0x1dfffb10,0xea8ace98,0xefec985f,0x4437cc0b,0xfb8ffa7f,
    0xfffebbef,0x77fffec1,0x977ec4ff,0xfb86ffc8,0x517ea00f,0x997ecfff,
    0x3f200fff,0xfb09fb03,0xffffb805,0x505fd00e,0x8ffc40ff,0xff700ff8,
    0x07fa9f70,0x2e5f15f1,0x5fff900f,0xfffffa80,0xd5002eff,0x9fe600bf,
    0x2cabeff8,0x7f986f98,0xfff70bfa,0xc83fffff,0x83fea5ff,0xfffefff8,
    0x402fe86f,0x2ffdc5fa,0x3ffa25fb,0x220ff200,0x02fd80ff,0x207fd710,
    0x07f986fb,0x3fe83fe6,0xfd88bfd0,0x7c41ff9c,0x01fb7fb3,0x2a01bfe2,
    0x01cdc8df,0x2007f980,0x2e1511ff,0x0ff86fdf,0x01f927dc,0x3fa2f726,
    0x3a07fdc1,0x7ffec42f,0x2fc46fdf,0x3f62fd40,0x3f617ec3,0x320ff202,
    0x205fb05f,0x206f983d,0x0ffc42ff,0x7fd47fa8,0x41ffd51d,0xfffffffb,
    0xfd89fc5f,0x3ff102ff,0x000bf500,0x44007fc0,0x7c5f00ff,0x3f61fec2,
    0x0ff40002,0x0bf61bea,0x45fa8cc4,0x5fa800fb,0x0bf617ec,0x1fe405fb,
    0x7ec07fe2,0x641ff982,0x21bee04f,0x0df702ff,0xfffffff5,0xfffffb85,
    0x22f44fff,0x1bf20198,0x1002fd40,0x26fc8817,0x37ecc2d9,0x71360f98,
    0x03fea3df,0x883fd000,0x01fea3fe,0x01ec3fd8,0x17ec5fa8,0x05fb0bf6,
    0x17ee1fe4,0xff982fd8,0x01fffdef,0x9fb07fe2,0x7cc13fa0,0x3a01dfff,
    0xf907f89f,0xfccc8801,0x7edc02df,0x7dc00bce,0x2ffffeff,0x3ffbffea,
    0x233a02ff,0xfffd80fa,0x00edc4ff,0x0b7ff322,0x9ffdfff3,0x3ff332a0,
    0xf500041f,0x7ec2fd8b,0xf9017ec2,0x3602ff87,0xffff882f,0xfc802eff,
    0x2607fd45,0xfff701ff,0x3fa0ea39,0xbf107f99,0xfff71d43,0x7c40bfff,
    0x801fffff,0x1efffffd,0xeffffdb8,0x1fff4c02,0x84fffe88,0x7fd403fe,
    0xfeb87fff,0xfff00dff,0x80003fff,0x20ff45fb,0x01fe42fd,0x037dc7f9,
    0xe8840bf6,0x3fe2004f,0x3f627f41,0xfffff305,0xff81ffff,0x3ea06f98,
    0x5544ffef,0x4c00aaaa,0x2001aaaa,0x26001998,0x80040009,0x40062018,
    0x200aaaaa,0x554c0098,0xfd00001a,0x361bfa27,0x127fd42f,0x7f47ffdb,
    0x1f77ec02,0xc8005fb0,0x987fd44f,0xbff501ff,0xf05bffb9,0x980bf51f,
    0x00001bdb,0x00000000,0x00000000,0x00000000,0x332e0000,0xdf50fffd,
    0xfb05f905,0x3fffe61f,0xfb00df13,0x17e40fff,0x361be200,0x0009f51f,
    0x0fa2bb00,0x00000000,0x00000000,0x00000000,0x00000000,0x7fffc400,
    0x0600c1ef,0x55544088,0x2a600260,0x00e200aa,0x0c0804c0,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x01aaa980,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x554c0000,0x2aaa2001,0x802aaaaa,0x2200aaa8,
    0x32e601ca,0x01555102,0x00aa8800,0x55300aa2,0x55544003,0x001c800a,
    0x802cedb8,0x8800bcca,0x06e600aa,0x99999710,0x77654037,0x95100a9c,
    0x221717bd,0x9930bccb,0xdedb8879,0x04fff883,0x3ffffea0,0xfc805fff,
    0xfff901ff,0xfffa85ff,0x7ffe42ff,0xffd70000,0x3fea0dff,0x09fff100,
    0x17fffec0,0x98017e60,0x0dfffffe,0xfffffe88,0x21fff402,0x403fffda,
    0xfffffffc,0xffffe886,0xfe884fff,0x94ffffff,0x3febffff,0xfff92fff,
    0xfd70dfff,0x77fd4009,0x805feeee,0xf981ffc8,0x20ffdbdf,0x0ffebeff,
    0x0003ff26,0x3fbbbfe6,0x401dd506,0x26004feb,0x4c02ffed,0xfff1006f,
    0xd0bffd59,0x0dfd79ff,0xf11fffdc,0x9807ffff,0x1cdfeccb,0x55677fc4,
    0x7f445ffc,0x4ffebabe,0x2a37dfb3,0xdfd0cffc,0x703ff957,0x16c4009f,
    0xfd001fec,0xfd85fb03,0x4fd8df53,0xc8000ff8,0x7000003f,0x3f60009f,
    0x2bbf2602,0xefd80aaa,0xf31ffcc0,0x882fd81f,0x5dc3ffff,0x6c003fd9,
    0x01df502f,0x0efc89f7,0x13ee4fd8,0x81fb0ff4,0x8cfb85fa,0x44002ccb,
    0xcca881ff,0x3ff03fd2,0x87f95fb8,0xb9ff87f9,0x3aa602cc,0x880aaacf,
    0x5c00aaaa,0x0355514f,0xff502fd8,0x8fffffff,0xdf902ff8,0x2fdc16c4,
    0x01fe77e4,0xfd8007f9,0x6403fb02,0xf980ff40,0x7f413ee2,0x1bea0a21,
    0x3ffffbee,0xdf5001ef,0xffffff50,0x1bfb03ff,0x1fecffa6,0xfff03fe6,
    0xf10bffff,0xdfffffff,0x05ffffb0,0xfffd4fb8,0x817ec01f,0xeeeffec8,
    0x303fd43d,0x7fd001ff,0x3fc9ff98,0xb000ff20,0x00ff105f,0x5c007f88,
    0x803fd04f,0xffb83fea,0x0fffdcff,0x7cc3fd80,0xffffdcff,0xfefff981,
    0xfd1bee6f,0xbefff83f,0xfdb82ffc,0x982deeef,0x5c02ffed,0x3dffe8cf,
    0x26017ec0,0x04fb806f,0x3f600ff4,0xfcafec0e,0x000ff203,0x0bf505fb,
    0x4005fa80,0x03fd04fb,0x2037ffaa,0x7f444ffb,0x20ffc405,0x3fa20dfe,
    0xffffd01f,0x5f7fc49f,0x7fc2fffe,0xfb02fdc4,0x02fd8005,0x17ff6fdc,
    0x4c02fd80,0x06fb806f,0x6c403fe2,0x87fd41ff,0x0ff203fc,0x417ec1ae,
    0x7ffe46fa,0x00df52ef,0x3fd04fb8,0xb80fff20,0x07fa80ff,0x3fe237d4,
    0xc81ffa81,0x2ffdbcff,0x3fffffe6,0x2607fc1f,0x00bf606f,0xfb805fb0,
    0x36000fff,0x037cc02f,0xfb807fcc,0x03ffd107,0x01fe47fd,0x03fd07f9,
    0x1ff105fb,0x97ffffec,0x2e000ff8,0x201fd04f,0x2fdc01fb,0x3600ff88,
    0xf037cc3f,0xc85ff03f,0x55e5c45f,0x207fc0ff,0x0bf606f9,0xb805fb00,
    0x2003ffff,0x37cc02fd,0xfd03ff80,0x03fff30b,0xfffffff5,0x20ff207f,
    0x01fe81fe,0xfb9887ff,0x13027ec5,0x3fc43fcc,0x3fee0020,0x2207fa80,
    0x07fc41ff,0x3e20ffcc,0x7407f987,0x4c0ff85f,0x00bf606f,0xfb805fb0,
    0xb004ffcd,0x47f9805f,0x3fea0cb9,0x81ffd51d,0xf500effa,0x7fffffff,
    0x3fa0ff20,0xc81fee0c,0x2fe442ef,0xf7073fea,0x8867fc4d,0xb80005fe,
    0x3fa61cff,0x741bea04,0x3ffa61df,0x3223ff81,0x7f5c425f,0x541ff80f,
    0x37fd306f,0x36662013,0x9f9019bf,0x22033fee,0x019bfd99,0x3fffbff6,
    0x7fffe42f,0x7fdc2fff,0x00a9999e,0x2620ff62,0x3fa09bfd,0x02fffeff,
    0x7ff7fff4,0xfffb85ff,0x543fffef,0x0fffefff,0x7440bb20,0xffefffff,
    0x0ff600ff,0x7ff7ffcc,0x7dc5ffff,0x91fffeff,0x83ffffdf,0xf93ffff9,
    0x3fe61fff,0x43ffffff,0xfffffffb,0x9fff10ff,0xf537fff4,0xffffffff,
    0xffffb301,0x3ffea05d,0xfffe81ef,0x904fffff,0x3e27ffff,0x5fffffff,
    0x5dfffd71,0x3fffae00,0xfb500bef,0x2605dfff,0x400dfffe,0x3ffa05ff,
    0x0dffffee,0xd30075c0,0xfffbffff,0xdffff709,0x67fffd43,0x2fffe980,
    0x261dfff7,0xfffffffe,0x7ffffd43,0xfd10efff,0x2fffec9f,0xfffffff5,
    0x019801df,0xfe802620,0x5fffffff,0x47ffff90,0xfffffffe,0x00009884,
    0x33000266,0x8004c400,0x99880018,0x98800000,0x04c40009,0x00000330,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xec980000,0x33221aad,0xcccccccc,0x99999713,0xcccb8035,
    0x116665c2,0xccb85997,0x70b32e22,0xccca8599,0x32e201cc,0x599712cc,
    0x222ccca8,0x32a1bccb,0x21bccccc,0x9931bcc9,0x6665c437,0xcb980acc,
    0xcccccccc,0x99999711,0x2e219999,0x201bcccc,0xcccccccc,0x261e6543,
    0x99703ccc,0x03100599,0x3fffffa2,0x3fffe26f,0x96ffffff,0xffffffff,
    0x3fffea0b,0xfffff50f,0x43fffee1,0xf71ffffa,0x3fea1fff,0xffff30ff,
    0x7fe40fff,0xfffc9fff,0xfffff11f,0x5bffff25,0xfffffff8,0x57fffe6f,
    0x3f26ffff,0x4fffffff,0x7ffffff4,0xff93ffff,0xffffffff,0x3fffff23,
    0xfff82eff,0x7c5fffff,0x3ffe2fff,0x7ffd43ff,0x5ff806ff,0xfbabefc8,
    0x333fe27f,0x16fdcdfe,0xfd999ff7,0x37fee05f,0x8bbfae22,0x3a23ffb8,
    0x3ff223ef,0x50fffa25,0x4059bfd9,0xf53cffb8,0xcffb87df,0x87ff6e23,
    0xccdfecca,0x5473fea1,0x3ee21ffd,0x2ffecccf,0x3333ff26,0xf713fecc,
    0xff9999bf,0x333bf623,0x7fc1fffd,0x45ffcccc,0x930fffda,0xcb8819ff,
    0x2202fffe,0x07fc45ff,0x27f89fe6,0xf8df32fd,0x9037cc0f,0x40bfe0bf,
    0x3ff30efc,0x7d47ff20,0x00ff201f,0xdff30ff8,0x554ff101,0x7ec0df31,
    0xf503fe02,0xf503fe0b,0xfb06f98b,0xfe80ff85,0x3f617ea1,0xdfb07fc6,
    0x89fff501,0x3fe201fe,0x054405fd,0x8f603fe2,0x4cbf67f8,0x7c07fc6f,
    0x81ff300f,0xa7f406fa,0x77ec04fe,0x7e403ffa,0x2a3fe003,0x87fc05ff,
    0x40bf55ff,0x03fe02fd,0x03fe0bf5,0x26f983fe,0xff83f53d,0xf51f2b70,
    0x745fd10b,0x5407fee7,0x3fa1ffef,0x3e3bee01,0xffb0000f,0xb2740159,
    0x3fe1f45f,0xb01bfa60,0x403fd87f,0x006fdff9,0x9009fffd,0x6ffc007f,
    0x9fe804ff,0x4fb8fffa,0xff80bf60,0x05fcaaab,0x47fb81ff,0x06fbaff9,
    0x07fd5ffc,0x9f905fa8,0x03ff994c,0xe9bf37ea,0x6cffa01f,0xfd10003f,
    0xb007dfff,0xffff805f,0x5401ffff,0x003fe66f,0x4007ffee,0xf9007ff9,
    0x7fffc007,0xdafd805f,0x03fcbfff,0xfff80bf6,0xf05fffff,0x9ffd757f,
    0x6fffff98,0x7fffffc0,0x2e0bf500,0x05fe885f,0x9ffc6fd4,0x1ff301fe,
    0x30001bea,0x809fffd7,0x7ffc02fd,0xf000ffff,0x8017f25f,0x3f6004fe,
    0x3fc803ff,0xcfff8298,0x3f200dff,0xfddfcffb,0xf80bf602,0x5feeeeef,
    0xfffffff0,0xfddff309,0xfeeff80d,0x20bf500f,0x06fd84fb,0x1ff55fa8,
    0x3bf203fd,0x102ffccc,0xf7103015,0x017ec01f,0x3fea6bfe,0xf1bf7005,
    0x17ec003f,0xffcffb80,0x741fe402,0xf88ffc0f,0x3ffee04f,0x01ffff8e,
    0x0ff80bf6,0xcff82fd4,0xdf301bcc,0x1ff017e2,0x3ea1c9fa,0xfc87f905,
    0x3ea1b20f,0x07fb7f65,0x3fffffe2,0x8bff05ff,0x05fb02fb,0x3fe017ec,
    0x2013fe60,0x006fcff8,0x7d4017ec,0x401ff92f,0x40ff83fc,0x03fe60ff,
    0xfd9fffd4,0x0bf600ff,0x2fd40ff8,0xf3000ff8,0x3fe0044d,0xa93ea110,
    0x21ff885f,0x0ff42ffa,0xfff897ea,0xccefb81f,0xf80ffccc,0x1177ec5f,
    0x36601ff7,0x5ff100bf,0xd802ff98,0x26003fff,0x3e601bfd,0x4077ec4f,
    0x9999cfd9,0x0bfe20ff,0xff5019fb,0x41ffee3f,0x809bfd98,0x437d41ff,
    0x40099ff8,0x88019ff9,0xb9999aff,0x2677ea5f,0x3e25fea9,0xff9999df,
    0xf706fd41,0x09fd03ff,0x206213f6,0xffeffffc,0xffffa84f,0x3fee0eff,
    0x3ff20fff,0x03ffcc06,0xffffff98,0x7fffdc0f,0x25ffff71,0xfffffff8,
    0xff70ffff,0x3fe61fff,0x137fcc4f,0xfff88fff,0xf35fffff,0x3ffa9fff,
    0xffff70ff,0x3ff607ff,0xf701ffff,0xffffffff,0x3fffeebf,0x2e0effff,
    0xffffffff,0x3fffee1f,0xf987ffa4,0x3fe66fff,0x9d5006ff,0x207fffff,
    0x6fffffe9,0x077fffd4,0x3fa017fa,0xfffd3004,0xffb81dff,0xdfff51ef,
    0x3ffffa23,0x50ffffff,0x6c1dffff,0x27fc43ff,0x3ffa1bf6,0xd34fffff,
    0x3ff69fff,0xffff70ef,0x3ff205ff,0xf501efff,0xffffffff,0x3fffeabf,
    0xffb83def,0x1fffffff,0x98ffffea,0x3ffa61ff,0x3fffa66f,0x03330006,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x66540000,0x44399702,0x02cccccb,
    0x0057b930,0x00000000,0x05997300,0x22b32e60,0x2732a201,0x82aaa20a,
    0x65402aa9,0xcb9800ac,0x1555100a,0x220aaa88,0x2aaa22aa,0x55555540,
    0x9554c2aa,0xaa981cb8,0x1bc98bc8,0x222aaa88,0x3a60aaaa,0x3fffc42e,
    0xf937ffcc,0xbfffffff,0x3fffee01,0x0002ee87,0x40000fa8,0x7fff43fb,
    0xfb102fff,0x85ffffff,0xffffffe8,0x547fff24,0xfd506fff,0x2209ffff,
    0x84fffffe,0x7fc4ffff,0x3fffe4ff,0xf8bfffd3,0x6fffffff,0x3ebbffe6,
    0x3fe65fff,0xffffffff,0x7ffff41f,0x49ffffd3,0xfff706fb,0x21fffc87,
    0xdcccffb8,0x77fd03ff,0x3bffd05d,0x017ec000,0x44ffea80,0x6fdbcdec,
    0xd97dffb0,0xcefc87ff,0x3665ffcb,0xdfd911ff,0xb79dff30,0xffe889ff,
    0x5c4fffcd,0xb8a99dff,0x3fee1efe,0x85dff91f,0xfffeeeff,0x3fffb224,
    0x7e47fcef,0xcdffebff,0x6ffed44f,0x43bffb51,0xfff102fd,0x837ffc4d,
    0x43fc40ff,0xfc8806f9,0xd8000cff,0x7f4c002f,0xe84402ff,0x40ffd42f,
    0x05ff43fe,0x83fd05d1,0x85fe86f9,0x3bf21ffa,0x3617fd40,0x3f69fd3f,
    0xfbefe983,0x2a7e80df,0xfff304ff,0x91ff8087,0x741fe2bf,0x2227ec3f,
    0x3ffe206f,0x0dfff72f,0x1ff103fe,0x1002ff88,0x8007fffb,0xfb1002fd,
    0x7e4407ff,0x642fffff,0xb81b305f,0x00bdefff,0x46f983fd,0xeeeeeff8,
    0x0ffa3ffe,0x37ee27e4,0x1ff8fff9,0x09fffd10,0x04ffa844,0x7c007fe6,
    0x3e27f90f,0x7ccdf507,0x1017d40f,0x3fedf9ff,0x57ff06fc,0x360dff95,
    0x3a6000ef,0xfb002fff,0xfffc8805,0x3ffe200c,0x6c2fffff,0xfeb8002f,
    0xfe81ffff,0x3e637cc1,0xffffffff,0x5403fe4f,0x7e7fcc5f,0x6407fcff,
    0xfa802fff,0x037cc04f,0x4ff21ff0,0x4bfa07f8,0x406c85fc,0xfcff8ff8,
    0xfff06f9e,0x905fffff,0x3ff19fff,0x5dffd500,0xffffffe8,0x3fee4fff,
    0xefc801df,0xc85fb10a,0x305c005f,0x3fd0dfb5,0x7fc46f98,0xaaaaaaac,
    0x7ec0ffa1,0xfcffff84,0xffb105ff,0x7d407ffb,0x3e60224f,0x643fe006,
    0x5c0ff13f,0x881ff9ef,0xfcbfc400,0xf06f9bff,0xffffdddf,0x7fe7fcc3,
    0xfa802ffd,0x7ff41eff,0x3fffffff,0x007bffaa,0xffb887fe,0x2057fd43,
    0x03bea5d9,0x2fe81ff3,0x3f61bfaa,0x7054c41e,0x3f2217ff,0x8effd81f,
    0xfe883fff,0x50bff71f,0xdd333bff,0x199ffa88,0x3fc87fc0,0xeff80ff1,
    0x3e20005f,0xf31fff17,0xb303fe0d,0xfbafe4df,0x7f5403ff,0x5fb002ef,
    0x1bfff700,0x7f77fdc0,0x7e46ffff,0x5fffeeff,0x3fbbffea,0xeffc84ff,
    0x446fffff,0xfffeffff,0x77ffec4f,0xff703fff,0xf507ff27,0x3ff67fff,
    0xffff10ff,0x7e4fffff,0x0fffffff,0x64ffffc4,0x0fff8cff,0x003fff70,
    0x9fb3fc40,0x07fc1be6,0x5fa87fc4,0x6cc07ffa,0x6c003fff,0xff91002f,
    0x3ff2019f,0x85ffedff,0xcffffffb,0x3fffbe20,0xffb00cff,0x10bffbff,
    0x9ffffffb,0xdfffd701,0x987fcc05,0xfffe987f,0x21dfff92,0xfffffff8,
    0x3fffee7f,0x7440efff,0xbffc8eff,0x7fc06ff8,0x7fc40005,0xf10df501,
    0xf933335f,0xffefff8f,0x3ff222ff,0xfd8000cf,0x7fec4002,0x0026603f,
    0x80133530,0x31001a98,0x13530003,0x00026200,0x00000000,0x00000000,
    0x7cc00000,0xff30efff,0x7ffdcdff,0x3fffffff,0x7f7ffed4,0x037ffe2e,
    0x002fc800,0x00bffd30,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x4dfffd10,0x2a6fffe8,0xffffffff,0x8026202d,0xa80001dd,
    0x7540000e,0x32a2aa63,0x0031002c,0xfe800000,0xee880084,0x51009d92,
    0x37777661,0xcddddddd,0x3fffffe0,0x000005ff,0x00000000,0x00000000,
    0x00000000,0xf1000000,0xdffffdff,0x1003f900,0x3fffea0b,0x0fffffff,
    0xefd98ffa,0x1ff88e21,0x203aebf9,0xffffb5ff,0xffffffff,0x7ffffc7f,
    0x00005fff,0x00000000,0x00000000,0x00000000,0x20000000,0xfcbefffb,
    0x017ec02f,0x3ea13fa2,0xffffffff,0x44bf60ef,0xe8afffff,0x7dc3fe1f,
    0xff85fb13,0x55555315,0x03555555,0x00000000,0x00000000,0x00000000,
    0x00000000,0xfe800000,0x66c2fd45,0x83dabfd9,0x0002fffd,0x67e47ee0,
    0x46ffffc8,0xf90bea7e,0x00000181,0x00000000,0x00000000,0x00000000,
    0x00000000,0x7f400000,0x3e237cc1,0x6fffffff,0x0ffe7fe4,0x4ccccccc,
    0x510fa809,0x6c0dffa8,0x00607e66,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xf307fa00,0xffff930d,0x97fd417d,0xfff50ffd,
    0xffffffff,0x00803cc1,0x0000e895,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xf983fd00,0x0bfff606,0x6fe87ff1,0xfffffff5,
    0x0081dfff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x3e60ffc0,0xff9ff706,0x74427441,0x00000004,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x40000000,0xf53ffff9,
    0x25fd0dff,0x000003fd,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x7f4c0000,0xbffd53ff,0x000a8530,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_bold_24_usascii_x[95]={ 0,4,2,1,1,1,2,4,5,2,1,0,4,1,
4,1,1,1,1,1,1,1,2,1,1,2,4,4,-1,0,0,2,1,-1,0,0,0,0,1,0,0,1,1,0,
0,-1,-1,0,1,0,0,1,0,0,-1,-1,0,0,1,5,1,2,1,-1,4,0,-1,1,0,0,1,0,0,1,
1,0,1,-1,0,0,-1,0,1,1,1,0,0,-1,0,0,1,3,5,3,1, };
static signed short stb__courier_bold_24_usascii_y[95]={ 17,3,4,2,2,3,5,4,3,3,3,4,14,10,
14,2,3,3,3,3,3,3,3,3,3,3,7,7,4,7,4,4,3,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,2,3,2,21,2,7,3,7,3,7,3,7,3,3,
3,3,3,7,7,7,7,7,7,7,4,7,7,7,7,7,7,3,3,3,8, };
static unsigned short stb__courier_bold_24_usascii_w[95]={ 0,4,8,11,10,11,10,4,6,6,10,12,5,10,
4,10,10,10,10,11,10,11,10,10,10,10,4,5,13,13,14,9,10,15,13,12,12,12,12,13,13,10,13,13,
13,15,14,13,12,13,14,11,12,13,15,14,13,13,11,6,10,6,10,15,5,13,14,12,14,12,12,13,13,11,
9,13,11,15,13,12,14,14,12,11,12,13,13,14,13,13,11,7,3,7,11, };
static unsigned short stb__courier_bold_24_usascii_h[95]={ 0,15,6,17,18,15,13,7,18,18,10,13,7,2,
4,18,15,14,14,15,14,15,15,15,15,15,11,13,13,8,13,14,16,13,13,14,13,13,13,14,13,13,14,13,
13,13,13,14,13,17,13,14,13,14,13,13,13,13,13,18,18,18,8,3,5,11,15,11,15,11,14,15,14,14,
19,14,14,10,10,11,15,15,10,11,14,11,10,10,10,15,10,18,18,18,6, };
static unsigned short stb__courier_bold_24_usascii_s[95]={ 250,205,151,106,56,182,31,134,78,85,98,
57,247,187,166,38,194,178,156,158,167,170,225,16,42,53,248,250,70,120,42,
244,118,232,17,217,192,179,166,203,139,128,189,99,85,1,217,142,153,92,26,
1,13,230,41,113,71,57,205,49,67,31,109,171,160,84,1,98,27,137,78,
236,64,91,1,103,117,217,84,150,143,210,204,111,129,123,233,163,178,129,192,
23,19,11,139, };
static unsigned short stb__courier_bold_24_usascii_t[95]={ 15,1,64,1,1,1,52,64,1,1,64,
52,52,64,64,1,1,21,21,1,21,1,1,21,21,21,37,1,52,64,52,
21,1,37,52,21,37,37,37,21,37,37,21,37,37,52,37,21,37,1,37,
37,37,21,37,37,37,37,37,1,1,1,64,64,64,52,21,52,21,52,21,
1,21,21,1,21,21,52,64,52,1,1,52,52,21,52,52,52,52,1,52,
1,1,1,64, };
static unsigned short stb__courier_bold_24_usascii_a[95]={ 203,203,203,203,203,203,203,203,
203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,
203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,
203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,
203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,
203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,
203,203,203,203,203,203,203, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_24_usascii_BITMAP_HEIGHT or STB_FONT_courier_bold_24_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_24_usascii(stb_fontchar font[STB_FONT_courier_bold_24_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_24_usascii_BITMAP_HEIGHT][STB_FONT_courier_bold_24_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_24_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_24_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_24_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_24_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_24_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_24_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_24_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_24_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_24_usascii_s[i] + stb__courier_bold_24_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_24_usascii_t[i] + stb__courier_bold_24_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_24_usascii_x[i];
            font[i].y0 = stb__courier_bold_24_usascii_y[i];
            font[i].x1 = stb__courier_bold_24_usascii_x[i] + stb__courier_bold_24_usascii_w[i];
            font[i].y1 = stb__courier_bold_24_usascii_y[i] + stb__courier_bold_24_usascii_h[i];
            font[i].advance_int = (stb__courier_bold_24_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_24_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_24_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_24_usascii_s[i] + stb__courier_bold_24_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_24_usascii_t[i] + stb__courier_bold_24_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_24_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_24_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_24_usascii_x[i] + stb__courier_bold_24_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_24_usascii_y[i] + stb__courier_bold_24_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_24_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_24_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_24_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_24_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_24_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_24_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_24_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_24_usascii_LINE_SPACING
#endif

