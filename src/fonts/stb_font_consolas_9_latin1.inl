// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_9_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_9_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_9_latin1_BITMAP_WIDTH         256
#define STB_FONT_consolas_9_latin1_BITMAP_HEIGHT         40
#define STB_FONT_consolas_9_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_consolas_9_latin1_FIRST_CHAR            32
#define STB_FONT_consolas_9_latin1_NUM_CHARS            224

#define STB_FONT_consolas_9_latin1_LINE_SPACING           6

static unsigned int stb__consolas_9_latin1_pixels[]={
    0x06010821,0x40210c01,0x01026030,0x44c08808,0x41082a60,0x061441a9,
    0x80980203,0x02660201,0x0b883031,0x0100c084,0x00840603,0x42020181,
    0x10500440,0x180220c0,0x92d61808,0x03986a12,0x59839c57,0x442bc857,
    0xcac81502,0x3b88eea1,0xd81571ce,0x85a86aa1,0x545eb828,0x3a20a81a,
    0x2a14c2cf,0x25215d41,0x50aea0aa,0x12905505,0x7505502a,0x4fc89485,
    0x0aea2edc,0x5099706a,0xb342ba83,0x131884d6,0x10d5cc62,0x51298d49,
    0x03b06c35,0x23db87b7,0x43db922a,0x1b8f6e39,0x161edc48,0x25d4a635,
    0x31a94c6a,0xc8abbee5,0x9506a65e,0x26098443,0x504c221a,0x4c1a9835,
    0x8a44321a,0x20d4c130,0x526cc1a9,0x0d545b57,0x835306aa,0x20d4c1a9,
    0x373aad66,0x9e98dcea,0x98dc571c,0x32a96663,0x2b9d4979,0x6ce4ae75,
    0x98ae754d,0x0dcae753,0x4573a8e2,0xd3398dc3,0x2e731b8b,0x2bbe6731,
    0x32217752,0x436660d9,0x27223739,0x986e730d,0x3b3930d9,0xa4c76726,
    0x446e731c,0xb3910d9c,0x64367621,0x366649c8,0x64c36660,0x3b3931d9,
    0x25876726,0x5b45b435,0x20c954e6,0x2588731b,0x646e9349,0xa4432910,
    0x2194b8cc,0x8864e648,0x322c4374,0x370d8910,0x70de88e6,0x398dce63,
    0x25d4aaa6,0x6545b9b5,0x546e731e,0x2e732dcd,0x8dc7b2a1,0xd8e63739,
    0xa8dce649,0xb9b52dcd,0x8d9546e5,0x87b2a48c,0x26371eca,0x8dce6373,
    0xbc859639,0x2731de43,0x98dc372b,0x54752c43,0x5221b0dd,0x2b72910d,
    0x99221b4a,0x0dd221b3,0x4910d8e2,0x64398dc3,0x5ce6372b,0x22550731,
    0x730753ed,0x51ca4c72,0x4c729307,0x9546e393,0x07c4551b,0x41d47293,
    0x2572b83a,0x2733aabb,0x5c72731c,0x9546e551,0x2b0c551b,0x1f103e24,
    0x4732674c,0x2588572b,0x2572c41c,0x64ea573a,0x2a571cba,0x3a95ce63,
    0xa95c9037,0x4ae57163,0x5cae4eea,0x2e0ae572,0x199b06c2,0xce877366,
    0xe833361d,0x3b9b31dc,0xcd897362,0x1dce8585,0xccd83336,0x744b9b10,
    0x4773665d,0x9b11dcd9,0xb12e6c4b,0x32d678b9,0x03989309,0x21736239,
    0x6e44b349,0xd8973623,0x36206e5c,0xcd89cc5c,0xd89606e5,0x33622c5c,
    0x33620d45,0xb9173625,0x0000488b,0x00000000,0x00000058,0x00000048,
    0xcbad6000,0x0a6065c0,0x86e4c038,0x2e000003,0x02cb802c,0x012a1654,
    0x0000005b,0x00000000,0x00000000,0x00000000,0x00000000,0x00001290,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x08981080,0x18084044,0x04201020,
    0x3008100c,0x205c43bb,0x80602010,0x31060040,0x81008981,0x5c020021,
    0x2020223d,0x30218208,0x9b0b7221,0x6644c889,0x82611144,0x0eecc3cb,
    0x1dda8797,0x80849991,0x5c3ba894,0x55439c4c,0x41440a81,0xa81aa873,
    0x09621440,0x40e70726,0x2a06aa1b,0x21a81440,0x1dd46ad8,0x8aaaf258,
    0x2a0e63dd,0xb0b6a573,0xadca6b30,0x23405429,0x93981b04,0x17299623,
    0x8588e4e6,0x0933a99b,0x55425258,0x5514cea1,0x987774c3,0xddd30eee,
    0x443bba61,0xddd10eee,0x443bba21,0x20570eee,0x207440e8,0x03a21da8,
    0x20e881d1,0x22ea1308,0x1cc07445,0x464c9759,0x0c86ae64,0x20646891,
    0x84a448e9,0x5b0ea20a,0x3615e541,0x85ca604b,0x0373da9b,0x23291579,
    0x0aa58098,0x8eb86ccc,0xb0366629,0x4582c160,0x48848848,0x702b8488,
    0x222cb859,0x0b2e1c9d,0x22cb8597,0x36aa3739,0x064165c0,0x0de81951,
    0x86c727a6,0x488b7148,0x322064cc,0xb5106cc0,0xba8754c1,0x836f21c8,
    0xcc865262,0x7905739b,0x164c6521,0x32a0d32c,0x4539771e,0x582c1eca,
    0x5b1160b0,0xb1156c45,0x3156c455,0x1b163609,0x361b95cb,0x362c6c58,
    0xa8dce658,0x22c6c4ba,0x71bb9848,0x54e675b7,0x24cea572,0x20bb9858,
    0xb8160bb9,0x2a750c81,0x0f8ae552,0x4ea799f3,0x7190912a,0x414cae93,
    0x1c9cc2c5,0x4e655b37,0xb0582c1c,0x455b1160,0x2b622ad8,0xd70ab622,
    0x886d2239,0x8ecae1b4,0x6d221b48,0xa4c36910,0x44ae551c,0x640dc1b4,
    0x3f31b48b,0xcd895ce6,0x21540625,0x32b21cac,0x4cc88361,0x99b0f322,
    0x5886e6c4,0x2266c0a6,0x99911cdb,0xd896ee41,0x66cc2c2d,0x25b3371d,
    0x82c1dcd9,0x91160b05,0x10910910,0x3bae2c09,0x25ddd72e,0xdd71dce8,
    0x4bbbae5d,0x33a2eeeb,0x23b7551d,0x2162eeeb,0xbb53ca8c,0x2133667b,
    0x2c09519d,0x22e7b517,0x08b223da,0x15000010,0x0000014c,0x0cfc8800,
    0x805d1b80,0xf910cfc8,0x433f2219,0x9d10cfc8,0x4333a219,0x9d10cce8,
    0xb12c0819,0x12c05896,0x44b5896b,0xac4b0005,0x80000029,0x037002c8,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xa8000000,0x2a6e6531,0x86e20530,0x22a81308,0x2ea2aaaa,
    0x22a06c41,0x4cea2cc3,0x824ae551,0x55cc1302,0x142a8021,0x30f6e086,
    0x81008180,0x2edc3109,0x5060a615,0x041a8883,0x51008198,0x30664c15,
    0x98b36037,0x206f662b,0xb10884c1,0x349e9996,0x6464499b,0x9d86e530,
    0xa8a2e6a1,0x88b2a0d9,0x8b731dac,0x2b7298eb,0xb0b10b3d,0x43632237,
    0x4833b029,0x73a94d6e,0x41b81545,0x9d4682ba,0x2370751b,0xd992e639,
    0x393d30ab,0x11aa1e5c,0x4193b107,0x41d9c985,0x50c6c1da,0xd88b0325,
    0x98b6a0dd,0x2e735cec,0x265b7b52,0x4a0e6372,0x83b2a2a9,0x3676258d,
    0x272ee2c1,0x16757792,0x23262440,0x3986ae65,0x86494870,0x0aa0aa48,
    0x560aa0aa,0x23707a25,0x21b79339,0x54a61ac8,0x8b035112,0x5cae1338,
    0x8dc13d10,0xb05de439,0x94c66439,0x2d62ceca,0x2d617f71,0x8ba8e4e6,
    0x588e5260,0x4e6538a8,0xd896910c,0x26e2c0d9,0x91d192ad,0x9db70416,
    0xe986f265,0x22c16259,0x244360c8,0xd30d30d3,0x87770d30,0x26370db8,
    0x5c739373,0xb31b94c1,0xab88b0b3,0xe986caa4,0x11546e2b,0x0d883757,
    0x45893199,0x0f4c4b58,0x3a659799,0xd0666c3d,0x8665c3b9,0x3366518a,
    0x25b9b50d,0x22c1dbda,0x4292d99b,0x388f10b4,0x2986674c,0xb066dc37,
    0x2371bb98,0xb0582c2a,0x403e2160,0x5caa371b,0x306e2aba,0x1b94c99d,
    0xb117622c,0x6c42c197,0x10ee5c4c,0x2c954b99,0x89b7a21c,0x1cc00aea,
    0x77700000,0x96258075,0x37f6228c,0x22cba371,0x440399d4,0x533a8dc3,
    0x48b0b06e,0x21336273,0x2c160b05,0x9732a24c,0x37625cd8,0x29866c44,
    0x45837298,0x21701cb8,0x4801ccfa,0xeda807b5,0x4c733263,0x00000330,
    0x00000000,0x00000000,0x99910e20,0x020dca61,0x02e88b92,0xc8867e44,
    0x19f910cf,0x25c33f22,0x20038000,0x23729829,0x2710cfc8,0x0000a81d,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xbb300000,
    0xa9c4323b,0x1270e531,0x50b372a9,0x9116ec47,0x0f76619b,0xb87105b9,
    0x46605c2c,0xd866150b,0x437b50cc,0x376a2cd9,0x4433361d,0x044622aa,
    0x26306595,0x35110a99,0x2661884c,0x40c06002,0x310a0900,0x10002ca8,
    0x0a120303,0x32932c0c,0x22cb1b11,0x0b0e6394,0x0d9ccb91,0x1164e62c,
    0x9541b116,0xa983620c,0x914c6e3a,0x9cc32370,0x4120c80c,0x22c6c599,
    0xca46b4b9,0xb3b33aeb,0x2ba1b9d4,0xc892321b,0x731b20bc,0x75160503,
    0x91915ac7,0xb986c6c4,0x73716b23,0x906e07c4,0x75449d83,0x2934a521,
    0x25a42c0c,0x4c5859c9,0x344b0573,0x7442b95c,0xabb89930,0x1b8ab62b,
    0x212b2653,0x6c0cec48,0x2b60fcc0,0x3271d194,0x2e5338c8,0x84522d61,
    0x326e2ac8,0x8bae2c28,0xd952ccca,0x95b15c59,0x3f3064dc,0x896b16c4,
    0x20162193,0x4c0f8849,0x8e7a721e,0xb2a8b0b6,0x22c16ecc,0x42b84de9,
    0x41dcc84a,0x7713661c,0x7156c575,0x6d64d263,0x0efa0e40,0xa8797057,
    0x2597952a,0x5ca67194,0x2090ef21,0x2aaa658d,0x5dc4baa1,0xdc8b0083,
    0x48d86e62,0x49732d6c,0x00a801ca,0x1b0b00d8,0x91e4e5cb,0xccc8b077,
    0x1616733e,0x4c0ae073,0x20e41904,0x4c6e2ba9,0x9646e122,0x42c45739,
    0x30ccf884,0x32aa8729,0x38ca47ad,0x0f986e53,0xba810824,0x40604c42,
    0x20988705,0x102222aa,0x00001982,0x20eef540,0xb73a9645,0x580f98ba,
    0x25739960,0x0730cfc8,0x8803bbf3,0xb29801cc,0x9d14c6e3,0x98fb6e19,
    0x240dc4de,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x32a17773,0x821020dc,0x086180c1,
    0x325952c1,0x07994ccc,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x446e0111,0x2552520f,0x45a3adbb,0x004b1d0f,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x39993000,0x20004110,0x482c1710,0x00000009,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__consolas_9_latin1_x[224]={ 0,1,1,0,0,0,0,1,1,1,0,0,1,1,
1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
2,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__consolas_9_latin1_y[224]={ 6,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,1,4,3,
4,-1,0,0,0,0,0,0,0,0,0,0,1,1,1,2,1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,7,-1,1,-1,1,-1,1,-1,1,-1,-1,
-1,-1,-1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,-1,-2,-1,2,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1,-1,0,0,0,
-2,-1,-1,0,0,1,3,3,-1,0,-1,0,-1,-1,-1,1,-1,2,6,-1,0,1,-1,-1,-1,1,-2,-2,-2,-2,
-2,-2,0,0,-2,-2,-2,-2,-2,-2,-2,-2,0,-2,-2,-2,-2,-2,-2,1,-1,-2,-2,-2,-2,-2,0,-1,-1,-1,
-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,0,-1,-1,-1,-1,-1,-1,-1,
 };
static unsigned short stb__consolas_9_latin1_w[224]={ 0,3,3,5,5,5,5,2,3,3,5,5,3,3,
3,5,5,5,5,5,5,5,5,5,5,5,3,3,5,5,5,4,5,5,5,5,5,5,5,5,5,5,4,5,
4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,3,5,5,3,5,5,5,5,5,5,5,5,5,
4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,1,4,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,3,4,5,5,5,
1,5,4,5,4,5,5,3,5,4,5,5,3,3,5,5,5,3,2,4,4,5,5,5,5,4,5,5,5,5,
5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
 };
static unsigned short stb__consolas_9_latin1_h[224]={ 0,8,3,6,9,8,8,3,9,9,5,5,4,1,
3,8,7,6,6,7,6,7,7,6,7,6,6,7,6,3,6,8,9,6,6,7,6,6,6,7,6,6,7,6,
6,6,6,7,6,8,6,7,6,7,6,6,6,6,6,9,8,9,4,1,3,6,8,6,8,6,7,7,7,7,
9,7,7,5,5,6,7,7,5,6,7,6,5,5,5,7,5,9,10,9,3,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,7,9,6,6,6,
10,9,3,7,5,5,3,1,5,2,4,6,5,5,3,7,9,3,2,5,5,5,7,7,7,7,8,8,8,8,
8,8,6,8,8,8,8,8,8,8,8,8,6,8,9,9,9,9,9,5,8,9,9,9,9,8,6,8,8,8,
8,8,8,8,6,7,8,8,8,8,7,7,7,7,8,7,8,8,8,8,8,5,7,8,8,8,8,9,9,9,
 };
static unsigned short stb__consolas_9_latin1_s[224]={ 255,251,165,222,108,133,139,158,23,38,191,
203,246,183,161,127,219,228,61,185,37,191,197,115,203,73,251,209,67,127,79,
157,60,216,109,225,103,97,121,237,91,49,243,85,246,240,234,35,55,151,43,
71,31,77,25,19,13,7,1,82,162,72,240,177,148,210,145,198,85,186,1,
7,13,59,33,113,107,150,156,131,95,119,168,144,89,192,162,144,133,65,127,
86,1,97,152,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,255,25,132,
125,162,168,3,42,143,231,139,174,133,183,180,172,234,156,209,230,250,213,126,
139,169,186,213,218,174,29,168,180,103,97,91,121,79,73,137,67,61,55,49,
43,37,31,25,19,150,7,48,54,91,66,76,224,215,102,120,114,27,185,180,
115,167,227,221,13,1,143,174,19,155,137,197,203,41,47,53,248,209,101,173,
239,245,233,179,197,83,191,109,161,149,11,17,5, };
static unsigned short stb__consolas_9_latin1_t[224]={ 1,1,35,20,1,12,12,35,1,1,29,
29,29,35,35,12,12,20,29,12,29,12,12,29,12,29,20,12,29,35,29,
12,1,20,29,12,29,29,29,12,29,29,12,29,20,20,20,21,29,12,29,
21,29,21,29,29,29,29,29,1,12,1,29,35,35,20,12,20,12,20,21,
21,21,21,1,21,21,29,29,21,21,21,29,21,21,20,29,29,29,21,29,
1,1,1,35,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,1,21,1,
21,21,20,1,1,35,12,29,29,35,35,29,35,29,21,29,29,29,12,1,
35,35,29,29,29,12,21,12,12,12,12,12,12,12,12,21,12,12,12,12,
12,12,12,12,12,21,12,1,1,1,1,1,29,1,1,1,1,1,1,20,
12,1,1,1,12,12,1,20,21,1,1,1,1,21,21,21,12,1,21,1,
1,1,1,1,29,21,1,12,1,1,1,1,1, };
static unsigned short stb__consolas_9_latin1_a[224]={ 79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_9_latin1_BITMAP_HEIGHT or STB_FONT_consolas_9_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_9_latin1(stb_fontchar font[STB_FONT_consolas_9_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_9_latin1_BITMAP_HEIGHT][STB_FONT_consolas_9_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_9_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_9_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_9_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_9_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_9_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_9_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_9_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_9_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_9_latin1_s[i] + stb__consolas_9_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_9_latin1_t[i] + stb__consolas_9_latin1_h[i]) * recip_height;
            font[i].x0 = stb__consolas_9_latin1_x[i];
            font[i].y0 = stb__consolas_9_latin1_y[i];
            font[i].x1 = stb__consolas_9_latin1_x[i] + stb__consolas_9_latin1_w[i];
            font[i].y1 = stb__consolas_9_latin1_y[i] + stb__consolas_9_latin1_h[i];
            font[i].advance_int = (stb__consolas_9_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_9_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_9_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_9_latin1_s[i] + stb__consolas_9_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_9_latin1_t[i] + stb__consolas_9_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_9_latin1_x[i] - 0.5f;
            font[i].y0f = stb__consolas_9_latin1_y[i] - 0.5f;
            font[i].x1f = stb__consolas_9_latin1_x[i] + stb__consolas_9_latin1_w[i] + 0.5f;
            font[i].y1f = stb__consolas_9_latin1_y[i] + stb__consolas_9_latin1_h[i] + 0.5f;
            font[i].advance = stb__consolas_9_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_9_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_9_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_9_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_9_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_9_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_9_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_9_latin1_LINE_SPACING
#endif

