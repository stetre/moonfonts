// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_25_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_25_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_25_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_bold_25_usascii_BITMAP_HEIGHT         78
#define STB_FONT_courier_bold_25_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_bold_25_usascii_FIRST_CHAR            32
#define STB_FONT_courier_bold_25_usascii_NUM_CHARS             95

#define STB_FONT_courier_bold_25_usascii_LINE_SPACING          12

static unsigned int stb__courier_bold_25_usascii_pixels[]={
    0x0001bf60,0x06004002,0x15438800,0x401de880,0x25d31ec8,0x200efffb,
    0x7fec01a8,0x0002605f,0x30000000,0x00262001,0x4006004c,0x00198018,
    0x00044000,0x3f606fd8,0x05f98db0,0x3f9827d4,0x225fd000,0xff9800ff,
    0x4bffa01f,0xffff75fb,0xffffd505,0xbffff107,0x01bfff90,0x2efbff66,
    0x3bae0dee,0x03effdad,0x8077ffe4,0x02ffffe9,0xb03bfff9,0x7fedc0df,
    0x7ffed43f,0x3ffae03f,0xf03dedae,0x0aaa000d,0x0ff89ff8,0x7c40bfe2,
    0x00bf704f,0x7f41ff50,0x07fd3004,0x5fb87fe6,0xf7013bf7,0x0bffffff,
    0xfd8bf931,0xfc86fcbd,0xffffffff,0xfffff13f,0x01dfffff,0x0dfffffb,
    0x3ffffffa,0x7ffffe41,0x07ffe20f,0x97fffff6,0xfffffffa,0xfffffd81,
    0xf887ffff,0x3e000007,0xfd87f89f,0x981ff706,0x04fffffd,0xffa89fd0,
    0x209f7000,0xbafdc5fb,0x5dff305f,0x5c0fff66,0xf717e65f,0x4ceffd41,
    0x4c2efffb,0xb99cfffc,0x9ffc45ff,0x77d44fea,0xff89fb31,0x225fd98b,
    0x7fec1fff,0x1dfd810b,0xffb8bf91,0xcfffda9d,0x7007f880,0x1ddddddb,
    0x0ff31ff0,0x9fd05ff3,0xffffff88,0x0ff9807f,0xf7003fe8,0xf717ee09,
    0x7f417eeb,0x701ff505,0x2607ecbf,0x2613fa3f,0x7ff505ff,0x7dc5ff30,
    0x3fa37dc5,0xfa87fcc2,0xff17fc46,0x00ffec1f,0xf07fc404,0x83ff909f,
    0xeeeffec8,0x7fff41de,0x7c40ffff,0xfd07f98f,0x540ffa8b,0x0df711ef,
    0x3ea0bfb0,0x209f7007,0xbafdc5fb,0x02ff885f,0x97ee0ffa,0x89fdc46e,
    0x0bf900ff,0x7ec03fea,0xff30bf63,0x3e61ff41,0xfb09f90f,0xff13ffc7,
    0x3fd40005,0xff301ff1,0xfffff983,0x5443ffff,0x20ffaaaa,0xfffffffd,
    0x323fd43e,0xb84fc86f,0x00ffcc02,0x9f7007ff,0xbf717ee0,0x1fea17ee,
    0xbf709f90,0x7fffb2fc,0x7ec07fe2,0x201ff505,0x01ff13fe,0x5ffdc5fd,
    0x3ee6feb9,0xfd2ffc46,0x76477dcf,0x7ee5401c,0x203fe64f,0xfb981ff8,
    0x002aaabf,0x7ffc43fe,0x45ffffff,0x13fa1ff9,0x002b7fe6,0x7dc05fc8,
    0x43efa806,0xafdc4fea,0x05fb85fb,0x2fdc2fdc,0x3e73ee9f,0xf5037fa3,
    0x17fea0bf,0x3fc47fee,0x7fec3fd8,0x3e60ffff,0x4dffb12f,0x3fbf26fd,
    0x3e03ffff,0x3ff87fff,0xf101ffb8,0x0ff8000f,0x3f27bee2,0x22ff881d,
    0xfff903ff,0xff8805bf,0x017fc401,0x7ccbffe2,0xbafdc1ff,0x407f985f,
    0x25fb84fc,0x8fe2bd4f,0xfebdfff9,0xfff505ff,0x4bffd9bf,0x47fb07f8,
    0xffffffe8,0x7ff7fec1,0xc97f26ff,0xffebefff,0x9ffdb501,0xb88bffc8,
    0xff101fff,0x40ff8000,0x409f95fa,0x05ff13ff,0x27fff644,0x3200df90,
    0x6ffd406f,0xf70fff20,0x7fc17eeb,0x2e0ffa02,0x8af53e5f,0x7fff543f,
    0xf505ffff,0x9fffffff,0xfe80ff88,0x2a6fff62,0x7fec47fe,0x3f25fdff,
    0xfd17fee5,0x43ff700b,0xffffffe8,0x0ff101ff,0x260ff800,0x0dfdaefd,
    0x17fc5ff0,0x107fb880,0x3e2005ff,0x417ee02f,0xbafdc5fb,0x20bfb05f,
    0x5fb80ffb,0x7e77d53e,0x739b7304,0x23bea0bf,0x3fa02dcb,0xff07fc42,
    0x981ff887,0x263ff9aa,0x703fea2e,0x13f600df,0xf9ffffb1,0x03fe203f,
    0xf70ff800,0xffffffff,0x3a1ff983,0xfd05e84f,0x800df705,0x13ee05fc,
    0x57ee2fdc,0xdff305fb,0x40fff665,0xeb97a5fb,0x3ee006ff,0x800df505,
    0x12fdc5fc,0x05fd01ff,0x4401ffd8,0x037dc1ff,0x26604fd8,0x7fc03ff0,
    0x200f6e62,0xdffb30ff,0xa81bdffd,0x117f60ff,0x0ffa87ff,0x44003ff8,
    0x09f701ff,0x2bf717ee,0x3fe605fb,0x205fffff,0x221b65fb,0x82fdc001,
    0x7d4006fa,0xe87fd52f,0x1ff710df,0x2ffeb88c,0x261bfb00,0x985915fe,
    0xf5002ffb,0xffffc80f,0xff806fff,0x2fe9fec0,0xffb8df90,0x3bfffe60,
    0x7fb84fff,0x20bfb000,0x8bf704fb,0x80bf75fb,0x03efffe8,0x03f72fdc,
    0x77ee5400,0x33ff6a0b,0xfff9000b,0xffa81dff,0x2e4fffff,0x83ffffff,
    0x7ffc43ea,0xff50ffff,0x0bffffff,0x3ffb3326,0x7ffe4404,0x7c400bff,
    0xfe9fec0f,0x443ff881,0x7fffc3ff,0x7fd03fff,0x03fe6000,0x2fdc13f2,
    0x02fdd7ee,0x2277ffea,0x45fb81b8,0x003662ee,0x7ffffff1,0x3fffffe2,
    0x3fff6004,0xfffd500e,0xffff987f,0x50bf901d,0xc83dfffb,0x04ffffff,
    0x17fffffa,0x40013300,0xf2fe86fb,0x01ff903f,0xf9108ff9,0x03fea01d,
    0x224fd800,0xff301ffd,0x7dd7ee1b,0x7fc40cef,0x5fffffff,0xf317fbae,
    0x001ffddf,0x41799995,0x00bcccca,0x31000980,0x30019801,0x4c009880,
    0xcc980099,0x800001bc,0x4ffeccca,0x81ff1fe8,0xff103ff8,0xe817ee07,
    0x7d40004f,0x809ff30f,0x29f53ffb,0x4c2ffffb,0xfffddeff,0xbffff10d,
    0x0159b730,0x00000000,0x00000000,0x00000000,0x3e000000,0x904fffff,
    0x3e61b61f,0xa827dc06,0x01ff104f,0x545fd000,0x0a853000,0x22055553,
    0xaa980980,0x0000001a,0x00000000,0x00000000,0x00000000,0x66654000,
    0x1500000b,0x32201500,0x00006a01,0x00000144,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x80000000,0x2e0ceed8,
    0x2a202dee,0xffd10001,0x0077220b,0x0000dffb,0x80262001,0xeffffffb,
    0x3ffffea2,0x5301ffff,0x00000013,0x44001351,0x353001a9,0x26000001,
    0x32a002ff,0x0000ceef,0x7fd40000,0xffff11ff,0xffffd50b,0xfff98007,
    0x4fdef885,0x00dfff10,0x80bfb730,0x81efffea,0xfffffffb,0x3ffffea4,
    0x7d41ffff,0x70fdffff,0x3eebffff,0xfb505fff,0x20ddbfff,0xeeffffe9,
    0x7fffe446,0x3ffea04f,0x981fffff,0xffb002ff,0x3e67ffff,0x3ffa0eff,
    0x3dfff33f,0x5c1ffff4,0x6ffcc2ff,0x7ffffdc0,0x644005ff,0x1ea5c85f,
    0xe800df70,0x2a05ffff,0x1fffffff,0x4cccf7dc,0x4ccefcc1,0x3e60ffa9,
    0x2ffffeff,0x32dffff7,0xfa86ffff,0xfffffeff,0x77fffd40,0x3f60ffff,
    0x04fffeff,0xfffffff5,0x0155105f,0x5537ff30,0x3fffe619,0x29ffff10,
    0x3e1ffffa,0x9fd04fff,0x7cc0ffa8,0x7ffb32ef,0xd85fb800,0xfa807e24,
    0x777fc006,0x477fe05f,0x2fdc6fd9,0x6fb80a80,0xff706fe4,0x22077d47,
    0xdff985fc,0x983ff620,0x7fdc0cff,0xfb833f60,0x3ee6600f,0x3200001e,
    0x8bfd004f,0x7f440ffc,0x500ffe46,0x427f41ff,0x1ff505fe,0x97dffb50,
    0x913f50bf,0xdaefa80d,0x21103eff,0x0df305fb,0x77dc1ff3,0x74001aa9,
    0x203fe23f,0x41bea2fd,0x05fd84fb,0x2fec1ff1,0x81fb8fd0,0x5fb802fe,
    0x09dddb30,0x777fff5c,0x3ff980ce,0x3e607ff3,0x005ff75f,0x03fea9fd,
    0x7ec05ff1,0x7ffffe43,0xffb05fff,0xa85b513d,0xffffffff,0x817ee00e,
    0x20ff981a,0xdffffffb,0x40ff8800,0x543884ff,0xf09f706f,0xf11dc03f,
    0x8004403f,0xfb801ff8,0xbffff905,0x7fffffc0,0xff702fff,0xfa80bfd1,
    0x5004ffdf,0x509fd1ff,0x24fb80ff,0xfc9aeffa,0x2ea205ff,0x7d41dffd,
    0xffd9aeff,0x0017ee05,0xfff51bf6,0x700bffdd,0xbfff70df,0x41bea037,
    0x03fc44fb,0x0001fe60,0x401bfee2,0xb55105fb,0x7ed4c0bf,0x7401aaad,
    0xb800ffff,0x74005fff,0xfb80ffef,0xff2fd405,0x10bff309,0x405bffb7,
    0xffa84ffa,0x800bf701,0x5dc41ffd,0xd00bfea0,0x3ffee07f,0x37d41fff,
    0x37cc4fb8,0x221be600,0x3ea01999,0xb8041eff,0x05fb805f,0x44004fc8,
    0xf1002fff,0xfa8003ff,0x0ff504ff,0x3ff14fb8,0xff117fa0,0x203bb559,
    0x7fd01ffa,0x44017ee0,0x74002ffe,0x03fe603f,0x3fffd730,0x4fb837d4,
    0x26003fcc,0x7fffe47f,0x07ff707f,0x0bf703f9,0xf900bf70,0x0df90009,
    0x077ffec0,0x403ffa00,0x3fa02ff8,0x7e40ff33,0x333ea185,0x207fa82f,
    0x0bf704fc,0x005ffd10,0x7dc0bf90,0xfb102886,0xfc837d49,0x2002ff84,
    0x3faa1ff8,0x7f305fff,0x3ee0bfa0,0x805fb805,0xfb8004fc,0xd5ff9005,
    0x4fe800df,0xfb82ff40,0x205ff10f,0x71f405ff,0x105ff50d,0x17ee05ff,
    0x003fff30,0xfe80ffa0,0xf504fb83,0x6c0ffc4d,0x206fd83f,0xf027f438,
    0x3fa0001f,0xb804fb82,0x04fc805f,0xa805fb80,0x0bff33ff,0x3003fea0,
    0x3f665dff,0x8577ec3f,0x200dffd9,0x3ee1ea2f,0xffb30aef,0xa817ee01,
    0x3a600eff,0x302ffb83,0x7ff901ff,0xd0ffaa21,0x3ff225df,0x0beffa80,
    0x7dc5ff51,0x3fea20bf,0x3bfd0000,0x98817fd4,0x4099dfc9,0x199dfd98,
    0x4efe4c40,0xa8bff300,0xccb883ff,0xfb802efe,0x85ffffff,0xfffffff8,
    0xd902ffff,0x7fc49d33,0xffffffff,0xefc9982f,0x3ffee099,0x2a299999,
    0xffffffff,0x641bee05,0xffffffff,0xfffff987,0x3fea03ff,0x0effffff,
    0x7fffffec,0xbd700fff,0x3fffff60,0xfff704ff,0x29ffffff,0xfffffff9,
    0xfff980ff,0x7e43ffff,0xfff33fff,0xffffa8df,0xe9800fff,0x2202ffff,
    0xfdeffffd,0xffb101ef,0xdeffe81b,0xf81effff,0xffffffff,0xffffffd1,
    0x7ed41fff,0x5403ffff,0xfd9d301f,0x2201bfff,0x802ffffe,0x4efffed9,
    0x3ffffaa0,0x3ff601cf,0xdfffd500,0x7fff5409,0xd13fffff,0xbfffffff,
    0x3ffffa20,0x7ffdc2ff,0xbfffd12e,0xcccccb88,0x004c4002,0x00035310,
    0x99880022,0x3ffff600,0xffd1efff,0x3fffffff,0x00002620,0x8004ccc0,
    0x31000098,0x01998001,0x26200260,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x0005ffd5,0x1bff6000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x7fd40000,0x017ffe46,0xffffffa8,
    0xfff102ef,0x3ffea00d,0xe82effff,0xffffffff,0xb87fffa1,0x7f45ffff,
    0x3fff906f,0x3fffffa2,0xffff501f,0x7fffd15f,0x12ffffe8,0x743ffffd,
    0xefffffff,0x5d7fff61,0xff30efff,0x7ff41dff,0xffff93ff,0x2fffffff,
    0xfffffffa,0x3fea5fff,0x80ceffff,0xfffffff8,0x3a02ffff,0x2fe886ff,
    0xfffff700,0x5c09ffff,0xfff7006f,0x89ffffff,0xfffffffe,0x9bfffa1f,
    0x226ffffb,0x7c42ffff,0xfff12fff,0x2e03ffff,0xf9afffff,0x3fe24fff,
    0xfff12fff,0x7fff43ff,0x3a1fffff,0xfff76fff,0x3fffe63f,0x3ffffa1f,
    0xffffffb3,0x3eefffff,0xffffffff,0x3fffee5f,0x441fffff,0xffffffff,
    0xff702fff,0x00bfa0df,0xa99bfe88,0xdf500ffc,0x4dff4400,0x3a2ffca9,
    0x6ff999af,0x223fffb8,0xfff885fc,0x417ffdc6,0x8801dfc9,0x3bfea3fe,
    0x809ff880,0xc9883fe9,0x5fd019df,0xfe81ff88,0x981ff705,0xa99999ff,
    0x26ffa27f,0x545fc999,0xfeb999ef,0x267fe20f,0x2fe99dfc,0x06feff88,
    0x5dffb9fd,0x7ec17f40,0x366df503,0x2fe81dee,0x87fa4fd8,0xffa80ffd,
    0x417ee0ff,0x3fa1ffff,0x0bf702ff,0xffb97f40,0x5c3fe00e,0xb807fa5e,
    0x417f405f,0x07fa81ff,0x1ff109fb,0x7f46f984,0x2a27d422,0x24ff886f,
    0x4bf70ff8,0xaefc82fe,0xffffd06f,0x3fa07fff,0xf503fd82,0x13ffff2d,
    0x93f60bfa,0x05ff70fd,0xb97fbbea,0xbfdff05f,0x40bfbfea,0x3fa005fb,
    0xf805ffca,0x3e3fff1f,0x017ee00f,0x03ff05fd,0x3ff10bfe,0x3f61ff10,
    0x72fe8590,0xfa83913f,0x7f8ff506,0x41fe97ee,0x06faaff9,0xf933bffd,
    0x266ffa0f,0xf500ffeb,0x159ffd1d,0xffa85fd0,0x04ff9842,0x4bfe7bea,
    0xf5ff05fb,0x5fd9fd1f,0xe8017ee0,0xd005ffef,0x19fff35f,0x2fdc01ff,
    0x33337fa0,0xdf901ffc,0xff106fc8,0x7403ff99,0x203fecdf,0x1ff106fa,
    0x54bf71dc,0xdf55fe84,0x3fe13fa0,0xfffffe81,0x3fea01ff,0x7f402fff,
    0x05fffdcd,0xfa80bfd1,0xbf71ff96,0x3bfa3fe0,0x702fe8ff,0x7ff400bf,
    0xfd802fff,0xf9efffcb,0x202fdc07,0xfffffffe,0x43ff101f,0xfff102ff,
    0x7f403fff,0x2a03ffff,0x803fe06f,0x7fd405fb,0x3fa0df50,0xfe81ff82,
    0x403fffff,0x801ffffa,0xcffffffe,0x0c1ffb00,0xcff8b7d4,0x51ff05fb,
    0x0bfabfff,0x0e442fdc,0x3ff6bffa,0x7fe7e403,0x406fcffb,0x6ff405fb,
    0x01ffcccc,0x03fd53f6,0x3ff99ff1,0x7f66ff40,0x441bea03,0x17ee00ff,
    0xcaaeff88,0x82fe80ef,0x12fe81ff,0x7d405ffb,0x7400efff,0x200abcdf,
    0x0fea1ffc,0x6ffd4df5,0x3a1ff05f,0x205fd1ff,0x44fb85fb,0x03ff22fe,
    0xd8ffffb8,0x7dc05fff,0x7c17f405,0x23fea01f,0x3fe204fe,0x2fe80fb0,
    0xf512e3f7,0x701fea0d,0x7ffd40bf,0x40ffffff,0x81ff82fe,0x0ffec2fe,
    0xeff9efa8,0x400bfa01,0x27dc3ffa,0xfffb1bea,0x7543fe0b,0x7dc0bfa5,
    0x7f44fb85,0xf5027f42,0x3ffeebff,0x202fdc04,0x01ff82fe,0x007feff4,
    0x20041ff1,0x0ff822fe,0x2fec1bea,0xfa817ee0,0x5fffffff,0x3e21ff44,
    0x05ff442f,0x3ee03bfa,0x815ffd16,0x2019bfe8,0x9999eff8,0x0f7d44fc,
    0xf10bfff1,0x7fd3015f,0x333bf930,0x7f449f93,0x407fea0b,0xff12fff9,
    0x3f26607f,0x7f44099d,0x2017fc43,0x4c05fffb,0x440099ff,0x99999bfe,
    0x27bea1ff,0x00ffeb99,0x013bf931,0xf31bee20,0x3feabfff,0xffff74ff,
    0x9fffc47f,0x3f26fff8,0xfff73fff,0x3ea0dfff,0xffffffff,0x9ffffee4,
    0x7fcc5ffb,0x3ffa1fff,0xffff14ff,0x9fffffff,0x8bffffee,0x7c40fffe,
    0x0bff60ff,0x3ffffffe,0xffff31ff,0x13ffff2f,0x202fff88,0x4ffffffd,
    0xffffff70,0x2e3fffff,0xffffffff,0xffff302f,0xfb807fff,0xfd30ffff,
    0x3ffa69ff,0xdffff53f,0x3a2ffa85,0x3ffee6ff,0xfffff52f,0x3ffea09f,
    0x24ffffff,0x745ffffa,0x7fff445f,0x3ffff60e,0x3fffffa2,0xf54fffff,
    0x7d43dfff,0x45ff80ef,0xffd81ffa,0x30efffff,0x3eebfffd,0x7e403fff,
    0x7fffe406,0xfff503ff,0xffffffff,0x3ffffea3,0x3a600cdf,0x02efffff,
    0x02ffffd4,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x2a000000,0x2005fffe,0x00014c01,
    0x20000170,0x002c9829,0x00000000,0x20000000,0x000003d9,0x43ddb300,
    0x0001eeeb,0x4b7bb6a0,0x2a4eeed9,0xfffff53b,0x744039ff,0x400fffff,
    0x405ffffc,0x81ffffc8,0x40002eff,0x440004fa,0x7ff41ffd,0x6fff64c0,
    0x7fecc01b,0x36e201ce,0xd904cdff,0x20599fff,0x01cefdb8,0x77641ffd,
    0x43efd98e,0xeffcbeeb,0x22fffc83,0x7642ffff,0xfeacffbe,0x7ffff41d,
    0x3fffff75,0x7ffddbf2,0x05ffffff,0x7ffffff3,0x0bf93100,0x1fffffb8,
    0x01dfffb8,0x000bf700,0x217fff22,0xfffe86fc,0x3f207fff,0x83ffffff,
    0xfffffff9,0x3fffa60f,0xf986ffff,0x82ffffff,0x3ffe66fc,0x2fffffdf,
    0xfffffff1,0xfea887ff,0x98bfea62,0xffffffff,0x7dc46fff,0x33fee0cf,
    0xfe897ee1,0x0ffb999b,0x1bfff660,0x7405fb80,0x6c40372f,0x4000cfff,
    0xfb8005fb,0x40201eff,0xfea99bca,0x9adffa83,0x7ec1ffda,0x0ffc99ad,
    0x2e673ffa,0x7ffc47fe,0x82fffb9c,0xffffa980,0x3a61eb9d,0x6fc99dff,
    0x5fd05fd0,0xfc9eff98,0xd81fe9cf,0x543fdc5f,0x6417f44f,0x2ffe204f,
    0xbf7001ff,0x000ffc40,0x00ffffa6,0x2a005fb8,0x0002effe,0x6fbaaa98,
    0xdfb04ff8,0x2a0aefd8,0x2a03fea3,0xc83fe46f,0x7ffc006f,0xf84fe803,
    0xe82fe81f,0xf51ff82f,0x7cc1fecd,0x260ffe1f,0x2217f43f,0x5fee03ff,
    0xbf7004fd,0x0005fd80,0x105fffd5,0x55dfb555,0xfffd3035,0xfd300007,
    0x88dfffff,0xffffffff,0x7ffcc7ff,0x2fe43dff,0x03fe8370,0x7c001ff1,
    0x05fd001f,0x05fd03fd,0x23ff05fd,0x40ff66fa,0x20ff75fd,0x66ff42f8,
    0x200fffec,0x01ff34fe,0xfd80bf70,0x4001313f,0x3e0efffb,0xffffffff,
    0x3fff61ff,0x0266000d,0xffdffff3,0xffff98df,0x0fffffff,0x7ffff64c,
    0xf0013f66,0x00ffc03f,0x3a001ff0,0xe81fe82f,0xf82fe82f,0x7ecdf51f,
    0xfd3ff303,0x3fa0f407,0x0effffff,0x7f41ff30,0x205fb803,0xfd8ffffd,
    0xdfff7006,0xfeeeeb83,0x220deeef,0x800cfffd,0x77f41ffa,0x7fc37d41,
    0x9999999b,0x3ea60e41,0x800df72f,0x8ff705fd,0x01ff01b8,0x3fa0bfa0,
    0x3664fd81,0x51ff82ff,0xb01fecdf,0x8001ffff,0xfecccdfe,0xeffc80ef,
    0xb806ffee,0xd9ff305f,0xa80bffdf,0x7002effe,0x3fa600bf,0x27e403ff,
    0xff711ff4,0x0affc81d,0xff98aea2,0xf99ff4c2,0x0fe440cf,0x2e239ff5,
    0x07ff45ff,0x1335ff31,0x3e0ffa20,0xffffb82f,0x223fffff,0x6cdf51ff,
    0x3ffe603f,0x82fe8003,0x7fc42ff9,0x1fffffff,0xfb82fdc0,0x40dfff16,
    0x003fffe9,0x2a002fdc,0xff02fffe,0xfffff501,0x447fffff,0xfffefffe,
    0xffff50ff,0x5c1ffffd,0xfffeffff,0x7fffdc1f,0xffd85fff,0xffffff90,
    0xfff989ff,0x7ffff15f,0xfbffff90,0x3ffe65ff,0xd8fffaaf,0x3ff604ff,
    0x02fe8000,0xaefb89fb,0x04fdaaaa,0xef982fdc,0xb109ff90,0x00019fff,
    0x2e000bf7,0x3e61efff,0x3fffb202,0xc82fffde,0x2dffffff,0x3ffffba2,
    0xffeb81df,0xd502efff,0x4c09dfff,0x3ffffee0,0x7f4c3fff,0x3fffa4ff,
    0x40135102,0xfa9effe8,0x007ffb5f,0x2ffa2000,0x2ffb9999,0x2e033fa2,
    0x64cc41ff,0x7f4099df,0x46ffffff,0x0001dfff,0x880017ee,0x0b91fffc,
    0x20002660,0x988009a9,0xa998009a,0x01310009,0x00000000,0x00000000,
    0xff700000,0xffffffff,0x3fffea1d,0x3ffffe1f,0xffffff73,0x7ecc9fff,
    0x645ffeff,0xe880001d,0xec880002,0x00000110,0x00000000,0x00000000,
    0x00000000,0x00000000,0x7ffffd40,0x260cefff,0x360efffe,0xfd52ffff,
    0x7fffffff,0x00000660,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x776c0000,0x21eeeeee,0xdb32dedb,
    0x2dedb89d,0x102776cc,0x200c005d,0xbbbbbbba,0x2ffc0abb,0x055446aa,
    0x0dc4015c,0x33333093,0x2e613333,0xcccccccc,0x0002cccc,0x00000000,
    0x00000000,0x80000000,0xfffffffe,0x57fffe1f,0x3e1ffffb,0x7fe46fff,
    0x09f700ff,0x7d40fea0,0xffffffff,0x07fe65ff,0x83fea9ff,0xb10dfffa,
    0xf887ff45,0x3ffffe0e,0xffb1ffff,0xffffffff,0x0001ffff,0x00000000,
    0x00000000,0x80000000,0xffdaacfe,0xaa7fecc5,0x7f442eff,0xfb8bc98d,
    0x5fb8441f,0x17ffc402,0x6eeeee44,0x321ddddd,0xf32fe85f,0x7ff7fc4f,
    0x3f65fe9e,0x6c7fa20f,0xdddddddd,0x99999930,0x59999999,0x00000000,
    0x00000000,0x00000000,0x2a1f9000,0x3ff205ff,0xf900effd,0x3ea3ff6b,
    0x7eeffc46,0x7441ffde,0x0001ffff,0x3f607fa0,0xa7dcdf11,0x41ffffe9,
    0x00079009,0x00000000,0x00000000,0x00000000,0x40000000,0xfb805ffa,
    0x7fd405ff,0x4fcafff8,0xffffffe8,0x4ffec0ef,0x554c0efe,0x1aaaaaaa,
    0x07e413e2,0x7ec418bf,0x0000001d,0x00000000,0x00000000,0x00000000,
    0x20000000,0xfb005ffa,0x7c401dff,0xfeefffdf,0xbfff9302,0x223ff903,
    0x3ffea6ff,0xffffffff,0x1ee01f54,0x0000009d,0x00000000,0x00000000,
    0x00000000,0x00000000,0x897fea00,0xfcffd882,0x3ffa01ef,0x00ffffbf,
    0x103ffff6,0x2ff985ff,0xddddddb3,0x0625dddd,0x000d4388,0x00000000,
    0x00000000,0x00000000,0x00000000,0x7d400000,0x2fc999ef,0x7c4bffa2,
    0xfff902ff,0x5c0fffb1,0xb84fe9ff,0x00019302,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x3fe20000,0x3fffffff,0x2ebffff5,
    0xfa84ffff,0x40bff55f,0x00df33fc,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xffffff88,0xffd33fff,0x3fffaa7f,
    0x3e1ff883,0x0220c03f,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_bold_25_usascii_x[95]={ 0,4,2,1,1,1,2,5,5,2,1,0,4,2,
4,1,1,1,1,1,1,1,2,1,1,2,4,4,-1,0,0,2,1,-1,0,0,0,0,1,0,0,1,1,0,
0,-1,-1,0,1,0,0,1,0,0,-1,-1,0,0,1,5,1,2,1,-1,4,0,-1,1,0,0,1,0,0,1,
1,0,1,-1,0,0,-1,0,1,1,1,0,0,-1,0,0,1,3,5,3,1, };
static signed short stb__courier_bold_25_usascii_y[95]={ 18,3,4,2,2,4,5,4,3,3,4,5,15,10,
15,2,3,3,3,3,4,4,3,4,3,3,8,8,5,8,5,4,3,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,4,3,22,3,7,4,7,4,7,4,7,4,4,
4,4,4,7,7,7,7,7,7,7,4,8,8,8,8,8,8,4,4,4,9, };
static unsigned short stb__courier_bold_25_usascii_w[95]={ 0,5,9,11,11,11,11,4,6,6,11,13,6,10,
5,11,11,11,11,11,11,11,10,11,11,10,5,6,14,13,14,10,10,15,13,13,13,13,12,14,13,11,13,14,
13,15,15,13,12,13,14,11,13,14,15,15,14,13,11,6,11,6,11,16,5,13,14,12,14,13,12,14,13,11,
10,13,11,15,13,13,14,14,12,11,13,13,14,15,13,13,11,7,3,7,11, };
static unsigned short stb__courier_bold_25_usascii_h[95]={ 0,16,7,19,19,15,14,7,19,19,10,13,7,3,
4,19,16,15,15,16,14,15,16,15,16,16,11,13,13,7,13,15,17,14,14,15,14,14,14,15,14,14,15,14,
14,14,14,15,14,18,14,15,14,15,14,14,14,14,14,18,19,18,8,3,4,12,15,12,15,12,14,16,14,14,
19,14,14,11,11,12,16,16,11,12,15,11,10,10,10,15,10,18,18,18,6, };
static unsigned short stb__courier_bold_25_usascii_s[95]={ 242,198,142,12,38,44,43,251,31,24,97,
70,135,176,164,50,163,71,83,215,243,95,204,107,175,187,173,99,84,121,55,
175,122,15,1,146,215,201,188,160,158,146,186,115,101,85,69,15,44,101,15,
119,229,131,172,130,239,225,57,94,62,115,109,187,170,106,56,146,29,120,212,
227,1,200,1,30,31,220,192,159,148,133,179,134,242,206,236,81,67,1,55,
82,90,74,152, };
static unsigned short stb__courier_bold_25_usascii_t[95]={ 17,1,66,1,1,21,52,52,1,1,66,
52,66,66,66,1,1,21,21,1,37,21,1,21,1,1,52,52,52,66,52,
21,1,52,52,21,37,37,37,21,37,37,21,37,37,37,37,21,37,1,37,
21,37,21,37,37,21,21,37,1,1,1,66,66,66,52,21,52,21,52,21,
1,37,21,1,37,52,52,52,52,1,1,52,52,1,52,52,66,66,21,66,
1,1,1,66, };
static unsigned short stb__courier_bold_25_usascii_a[95]={ 212,212,212,212,212,212,212,212,
212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,
212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,
212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,
212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,
212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,
212,212,212,212,212,212,212, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_25_usascii_BITMAP_HEIGHT or STB_FONT_courier_bold_25_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_25_usascii(stb_fontchar font[STB_FONT_courier_bold_25_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_25_usascii_BITMAP_HEIGHT][STB_FONT_courier_bold_25_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_25_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_25_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_25_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_25_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_25_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_25_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_25_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_25_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_25_usascii_s[i] + stb__courier_bold_25_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_25_usascii_t[i] + stb__courier_bold_25_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_25_usascii_x[i];
            font[i].y0 = stb__courier_bold_25_usascii_y[i];
            font[i].x1 = stb__courier_bold_25_usascii_x[i] + stb__courier_bold_25_usascii_w[i];
            font[i].y1 = stb__courier_bold_25_usascii_y[i] + stb__courier_bold_25_usascii_h[i];
            font[i].advance_int = (stb__courier_bold_25_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_25_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_25_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_25_usascii_s[i] + stb__courier_bold_25_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_25_usascii_t[i] + stb__courier_bold_25_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_25_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_25_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_25_usascii_x[i] + stb__courier_bold_25_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_25_usascii_y[i] + stb__courier_bold_25_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_25_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_25_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_25_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_25_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_25_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_25_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_25_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_25_usascii_LINE_SPACING
#endif

