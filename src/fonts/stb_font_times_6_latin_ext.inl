// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_6_latin_ext_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_6_latin_ext'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_6_latin_ext_BITMAP_WIDTH         256
#define STB_FONT_times_6_latin_ext_BITMAP_HEIGHT         38
#define STB_FONT_times_6_latin_ext_BITMAP_HEIGHT_POW2    64

#define STB_FONT_times_6_latin_ext_FIRST_CHAR            32
#define STB_FONT_times_6_latin_ext_NUM_CHARS            560

#define STB_FONT_times_6_latin_ext_LINE_SPACING           4

static unsigned int stb__times_6_latin_ext_pixels[]={
    0x83302202,0x02040c08,0x02604411,0x2a040883,0x30260cc1,0xa8260983,
    0x188a0a0a,0x20880180,0x1020cc18,0x30418841,0x130a0c43,0x801409a8,
    0x330660c1,0x330c6088,0x8260cc18,0x842a2a19,0x13300a28,0x983304c4,
    0x20881109,0x44622a18,0x0c4622a3,0xa8a63115,0x54266188,0x33066188,
    0x4550fe14,0x4454a098,0x45530609,0x8a384d43,0x31084d42,0x08c33141,
    0x47099823,0x45065150,0x45423098,0x2a311518,0x45463188,0x22a13118,
    0x188a8618,0x22884135,0x211c708a,0x3944e732,0x98261442,0x0898c508,
    0x450898c5,0x718a1131,0x289c6284,0x0a614a27,0x2826a517,0x7098a0c5,
    0x8e484714,0x26a108e0,0x33289c60,0x211c2661,0x0ce66714,0x4c26a135,
    0x4628c509,0x8c529462,0x450c509a,0x3805d462,0x2e0e28aa,0x30738e71,
    0x462a2987,0x228c5462,0x518a3151,0x50718a31,0x271ce38c,0xa8c5c182,
    0x28314a0b,0x7148a38e,0x52282666,0x282ea138,0x0e3871c7,0xbab8a666,
    0x20ba8ea0,0x28c518a3,0xa8c529c6,0x1450c50b,0x704722e3,0x330a85dc,
    0x9984d541,0x1dc13309,0x532aa92a,0x54caaa13,0x2a655509,0x2a655509,
    0x54c13309,0x26133309,0x41815099,0x1288cd43,0x31144133,0x53330631,
    0x4cc305c4,0x1866a129,0x98261333,0x83102660,0x8cd40873,0x4c26a609,
    0x4135309a,0x2a135318,0x22135319,0x08826a62,0x018a14c2,0x4ca00000,
    0x00000002,0x00000000,0x00002020,0x80000000,0x00102000,0x00820000,
    0x04004000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x40000000,0x418509a9,0x19866219,
    0x44302214,0xa8620441,0x22044419,0x50cc0c40,0x41103301,0x03040980,
    0x0c454133,0x443304c3,0x4660c311,0x3106188a,0x09813044,0x44260c18,
    0x4c188622,0x19898620,0x04c30422,0x33060983,0x21319862,0x4c331143,
    0x219826e1,0x23115198,0x45451198,0x2a311518,0x304c4648,0x22a09a83,
    0x83301518,0x5431188a,0x21985188,0x22139823,0x118b8261,0x70cd46a3,
    0x986aa314,0x26e63109,0x5451c170,0x308984c1,0x4cc22611,0x18898a23,
    0x30c26333,0x3098e661,0x08984c73,0x8a1c6a33,0xb8a2709b,0x84dca272,
    0x9984dc62,0x54628c50,0x42a2661b,0x2608e513,0x22702a13,0x4c704e62,
    0x25138e13,0x2a171103,0x529b8a61,0x72454a63,0xa922a314,0x0a1c3518,
    0x0c0a8a17,0x5462a315,0x2398a618,0x21551889,0x5304c509,0x84c5304c,
    0x4261318a,0x71cae1c4,0x5c71ca2a,0x22570c52,0xb8c518a3,0x133510b8,
    0x88e2938e,0x1c5570b8,0x4505c447,0x71c50b88,0x46650266,0x4c512a29,
    0x986ea312,0x2ea13530,0x714caaa1,0x5142a0a8,0x54aaa081,0x21c5552a,
    0x442e6a3b,0x4351c260,0x098704c3,0x84c26555,0x265150c1,0x9998a099,
    0x26a65150,0x98625150,0x4135309a,0x98446209,0x45333099,0x26614332,
    0x408cca09,0x4cc22332,0x02202609,0x5c002994,0x5c3100b8,0x009000b8,
    0x0005571c,0x0000a720,0xc84c2635,0x14e46a29,0x0d46a035,0x00000000,
    0x04000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x40000000,0x8510cc19,0x43306219,0x09883018,
    0x0c431044,0x21351026,0x1060c19a,0x50620a83,0x88311981,0x2188261a,
    0x18860c19,0x0c430a66,0x41106515,0x8310cc18,0x98430c19,0x18506210,
    0x0988430c,0x30a14431,0x188c2a18,0x188a8426,0x150a1113,0x45426633,
    0x35105118,0x43313821,0x1aa8a218,0x8822a1ce,0x218866a1,0x9a86219a,
    0x10c4ae21,0x51155453,0x22188c5c,0x44543109,0x330c4312,0x0c453067,
    0x04428822,0x04c43182,0x4c226113,0x0c611308,0x4310c437,0x21886218,
    0x217108a8,0xa86e21aa,0x894350a9,0x86e23151,0x321cc28a,0x21173399,
    0x4543528a,0x3350dd20,0x541150d4,0x21a822a1,0x5466a08a,0x89431528,
    0xa8c5c153,0x5054a2a0,0x515054e1,0x92a05d5c,0x87314c39,0x51110629,
    0x8c54a222,0x2a31518a,0x5c313118,0x4a2a5150,0x2a51528a,0x28a86e28,
    0x06a15111,0x9a8c5475,0x0d45551a,0x21ca8335,0x15770a99,0x3515466a,
    0xa8ce4cc3,0x19a8aa19,0x2a19a8aa,0x1ab866a2,0x28aae335,0x5426154e,
    0x715466e2,0x9a8aa153,0x94ca1ce1,0x8772543b,0x51306e4a,0x52aa9444,
    0x554aaa55,0x8ccc6222,0x2a33519a,0x26a33519,0x219a8661,0x80351a89,
    0x0531729b,0x4e4a00d4,0x4d400001,0x9a80a001,0xa8066a01,0x4dc00019,
    0x00002009,0x06200000,0x26502994,0x00000022,0x00020880,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x03000000,0x06229833,0x4310c185,0x0cc11098,0x3060c451,
    0x409884c4,0x31086621,0x26098828,0x41181440,0x09862099,0x11098cc1,
    0x40a81306,0x22088181,0x30660441,0x20441983,0x0822188a,0x1188a862,
    0x17060841,0x11b984d4,0x20886185,0x8945c513,0x22188621,0x118a82a1,
    0x44310c45,0x2a188621,0x22a13509,0x42213718,0x2650d432,0x1c7066e3,
    0x3108e133,0x46608263,0x54661319,0x9a866a19,0x998866a1,0x44098a70,
    0x10220440,0x2a213981,0x2854410a,0x25284d46,0x8238a61a,0x86198608,
    0x22e38e29,0x350d4351,0x55c550d4,0x731cc731,0x1cc731cc,0x442ea515,
    0x4e095c1b,0x271b94e2,0x851c0ab9,0x5462a0e3,0x21309862,0x822a1309,
    0xa822a08a,0xa984a208,0x98530a61,0x10a614c2,0x42aa2171,0xb98c50c0,
    0x8a2e7370,0x418e2909,0xa8a3170b,0x43826664,0x22a8aa2a,0x5c62142a,
    0x2e3b8ee3,0x2e3b8ee3,0x0d433519,0x09982515,0x84d5422a,0xa8a62c9b,
    0x704cc130,0x8542ea55,0x4c261309,0x0cd43350,0x10cd4335,0x12a0c133,
    0x2544a895,0x4466512a,0x2618209a,0x0a31309a,0x99866313,0x2e198629,
    0x014ca729,0x40000002,0x00000000,0x00003502,0x00100000,0x2351a800,
    0x866a351a,0xa866a19a,0x29940019,0x52994a65,0x002994a6,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x4d440000,0x21301500,0x85350898,0x10cc4508,
    0x8554c261,0x0898a032,0x09811015,0x350c4306,0x4c151454,0x44c23088,
    0x42a18850,0x310c4261,0x221450c4,0x26a14319,0x10c42619,0x21886213,
    0xa828a218,0x0c462629,0x8a8e6613,0x22315318,0x3530c660,0x820e6061,
    0x2a2a281a,0x2aa71151,0x9845cc50,0x8661c351,0x22a1519a,0x88600151,
    0x2a213109,0x50454150,0x4c2a6a53,0x8ee31509,0xa861861a,0x8a147328,
    0x8671508a,0x54aa6e1a,0x528a86a1,0x4c7314c1,0x88a86621,0x286a3153,
    0xc837114c,0x700c6661,0x54c39500,0x4d450171,0x44ce371c,0x42aee150,
    0x2a0c88e3,0x551c631c,0x0a0022a5,0xa851c387,0x87524540,0x8c5caaa3,
    0xa8a28a29,0x8a147719,0x5146aa2a,0x0c666a31,0x5519b8aa,0x2e3b8c5c,
    0x71b8ae18,0x85154aaa,0x31cc1a83,0x0c383143,0x0988ce4a,0x5c038537,
    0x38070099,0x2248890e,0x57188709,0x47044445,0x2e13709b,0x22ab8709,
    0x4dc0002b,0x8071c702,0x2ee38709,0xb94dc700,0x00015298,0x29b814dc,
    0x0099b8ee,0x85391c2a,0x406e2a1a,0x00009023,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x33500000,
    0x19a8cd40,0x330a8a6a,0x4151502a,0x0cc54261,0x85119a80,0x43350441,
    0x8cc13098,0x89982089,0x86030661,0x42611098,0x10c42221,0x44110441,
    0x130cc319,0x11863188,0x8ccc6633,0x0000001a,0x00000000,0x198922a0,
    0x250454e5,0x542e7338,0x47104d40,0x4cc62509,0x2608a820,0x394530a0,
    0x551c711c,0x2a8a8d4c,0x1104c62e,0x2110b986,0x98544518,0x44402661,
    0xa8023310,0x400c6a31,0x00000330,0x00000000,0x86ea0000,0x4d426a19,
    0x537138a1,0x417502a1,0x26a130ca,0x8d4c661a,0xa85060aa,0x4dc2e6a4,
    0xbb8e1530,0x23a8b820,0x0202129b,0x00e084c1,0x00000000,0x00000000,
    0x00000000,0x71700000,0x4d417181,0x454266e1,0x5c5571ab,0x71a8a1c8,
    0xb8202531,0x4a382aa0,0x00173729,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_6_latin_ext_x[560]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,
-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,
0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0, };
static signed short stb__times_6_latin_ext_y[560]={ 4,0,0,0,0,0,0,0,0,0,0,0,3,2,
3,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,1,0,1,0,1,0,1,0,0,
0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,2,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,0,0,0,0,
0,0,0,0,0,1,1,2,0,-1,0,0,0,0,0,1,0,1,3,0,0,1,0,0,0,1,-1,-1,-1,-1,
-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,1,0,-1,-1,-1,-1,-1,0,0,0,0,
0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,
-1,0,-1,0,0,1,-1,0,-1,0,-1,0,-1,0,-1,0,0,0,-1,0,-1,0,-1,0,0,1,-1,0,-1,0,
-1,0,-1,0,0,0,-1,-1,0,0,-1,0,-1,0,-1,0,0,0,-1,1,0,0,-1,0,0,0,1,-1,-1,0,
0,0,0,0,0,0,0,-1,0,0,1,-1,0,0,0,1,-1,0,-1,0,-1,0,0,1,-1,0,0,1,-1,0,
-1,0,-1,0,0,1,-1,0,0,0,-1,0,0,0,-1,0,-1,0,-1,0,-1,0,-1,0,0,1,-1,0,-1,0,
-1,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,
0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-2,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0, };
static unsigned short stb__times_6_latin_ext_w[560]={ 0,2,2,3,3,5,5,1,2,2,3,3,2,2,
1,2,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,5,4,4,4,4,4,3,4,4,2,3,4,
4,5,5,4,3,4,4,3,4,4,4,6,4,4,4,2,2,2,3,4,2,3,4,3,3,3,3,3,3,2,
3,3,2,5,3,3,4,3,2,2,2,3,3,4,3,3,3,3,1,2,3,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,2,3,3,3,3,
1,3,2,4,3,3,3,2,4,4,2,3,2,2,2,3,4,1,2,2,2,3,4,4,4,3,4,4,4,4,
4,4,6,4,4,4,4,4,2,2,2,2,4,5,4,4,4,4,4,3,4,4,4,4,4,4,3,3,3,3,
3,3,3,3,4,3,3,3,3,3,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,
4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,
4,3,4,3,4,3,4,3,4,3,2,3,2,3,2,3,2,2,2,2,4,3,3,3,4,3,3,4,2,4,
2,4,3,4,2,4,2,5,3,5,3,5,3,4,4,3,4,3,4,3,4,3,5,4,4,2,4,2,4,2,
3,2,3,2,3,2,3,2,4,2,4,3,4,2,4,3,4,3,4,3,4,3,4,3,4,3,6,4,4,3,
4,4,3,4,3,4,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,5,3,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,2,2,4,
3,4,3,4,3,4,3,4,3,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,3,6,4,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4, };
static unsigned short stb__times_6_latin_ext_h[560]={ 0,5,2,5,5,5,5,2,6,6,3,4,2,1,
2,5,5,4,4,5,4,5,5,5,5,5,4,4,4,2,4,5,6,4,4,5,4,4,4,5,4,4,5,4,
4,4,5,5,4,6,4,5,4,5,5,5,4,4,4,6,5,6,3,2,2,4,5,4,5,4,4,5,4,4,
6,4,4,3,3,4,5,5,3,4,5,4,4,4,3,5,3,6,6,6,1,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,6,5,4,4,
6,6,2,5,2,4,2,1,5,2,2,4,3,3,2,5,6,2,3,3,2,4,5,5,5,5,5,5,5,5,
5,5,4,6,5,5,5,5,5,5,5,5,4,6,6,6,6,6,6,3,5,6,6,6,6,5,4,5,5,5,
5,5,5,5,4,5,5,5,5,5,4,4,4,4,5,4,5,5,5,5,5,3,4,5,5,5,5,6,6,6,
5,5,5,5,5,4,6,5,6,5,6,5,6,5,5,5,4,5,5,5,5,5,5,5,5,4,5,5,6,6,
6,6,6,6,6,6,5,5,4,4,5,4,5,4,5,4,5,5,5,3,5,6,6,6,6,6,3,5,5,6,
6,4,4,4,4,4,4,6,4,6,5,6,4,4,5,5,6,5,6,5,6,5,5,4,5,4,6,5,5,4,
6,5,6,5,6,5,6,5,6,6,5,5,4,5,6,5,6,5,6,5,6,5,6,5,5,4,6,5,5,6,
5,5,4,5,4,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,4,4,6,4,4,4,
4,4,4,4,4,4,4,4,4,4,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,4,6,
5,6,5,6,6,6,6,6,6,6,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,6,6,5,5,6,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4, };
static unsigned short stb__times_6_latin_ext_s[560]={ 255,188,184,217,217,250,98,173,106,97,121,
56,158,191,178,81,84,68,64,245,40,232,228,241,220,168,252,244,6,154,52,
211,59,72,77,115,19,14,60,236,47,44,104,35,30,24,197,6,10,130,1,
77,247,215,241,152,232,227,222,86,208,103,111,141,175,193,88,185,120,177,173,
68,164,161,112,153,150,101,107,138,11,36,90,125,108,117,113,108,86,111,82,
135,144,150,187,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,
74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,255,128,183,
124,58,54,242,40,161,163,164,31,180,191,203,149,138,8,125,128,146,224,89,
168,115,118,170,237,186,212,191,182,1,192,187,182,177,172,1,114,158,153,148,
143,140,137,134,131,26,75,109,65,86,22,13,134,93,31,44,49,200,72,104,
64,60,56,52,48,44,40,38,32,28,24,20,16,253,132,135,241,246,197,237,
233,229,225,221,97,181,208,204,200,196,191,94,158,177,173,168,164,159,142,16,
144,66,135,1,127,166,119,114,109,206,101,96,92,87,83,78,74,69,215,58,
54,70,99,125,146,139,219,171,187,15,11,168,121,250,128,243,17,235,79,227,
224,221,131,212,210,244,228,237,248,93,183,180,81,6,99,95,69,35,12,62,
91,249,119,133,100,189,201,139,123,76,105,153,148,11,50,63,21,143,43,54,
148,156,46,36,125,27,137,18,140,9,165,1,252,168,173,49,177,232,191,223,
195,214,199,205,161,195,246,151,65,176,6,1,162,24,238,83,230,87,203,91,
146,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,40,74,74,121,
74,74,74,74,74,74,74,74,74,74,74,74,74,116,157,74,74,74,74,74,
74,74,74,74,74,74,74,74,106,211,74,74,74,74,74,74,74,74,74,74,
74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,128,208,
253,219,81,29,71,20,61,57,52,48,43,39,34,30,74,74,74,74,74,74,
74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,
74,74,74,25,21,33,45,6,131,74,74,74,74,74,74,74,74,74,74,74,
74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,
74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,
74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,
74,74,74,74,74,74,74,74,74, };
static unsigned short stb__times_6_latin_ext_t[560]={ 1,8,32,8,15,15,21,32,8,8,32,
32,32,32,32,21,21,32,32,21,32,21,21,21,21,21,27,27,32,32,32,
21,8,32,32,21,32,32,32,21,32,32,21,32,32,32,21,21,32,1,32,
21,27,21,15,15,27,27,27,1,21,1,32,32,32,27,21,27,21,27,27,
21,27,27,1,27,27,32,32,27,21,21,32,27,21,27,27,27,32,21,32,
1,1,1,32,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,1,21,1,
21,27,27,1,8,32,21,32,27,32,32,21,32,32,27,32,32,32,21,1,
32,32,32,32,27,15,15,15,15,21,21,21,21,21,21,27,8,21,21,21,
21,21,21,21,21,27,8,8,8,8,8,8,32,21,8,8,8,1,21,27,
21,21,21,21,21,21,21,27,21,21,21,21,21,21,27,27,27,15,27,15,
15,15,15,15,32,27,15,15,15,15,1,1,1,15,15,15,15,15,27,1,
15,1,15,1,15,1,15,15,15,27,15,15,15,15,15,15,15,15,27,15,
15,8,1,1,1,1,1,1,1,15,15,27,27,8,27,8,27,8,27,8,
8,8,32,8,1,1,1,1,1,32,8,8,8,8,27,27,27,27,27,27,
8,21,8,8,8,27,27,15,15,1,15,1,15,1,15,15,27,8,27,8,
8,8,27,8,8,8,8,8,8,8,8,8,1,8,8,27,8,1,8,1,
8,1,8,1,8,1,8,8,27,1,15,15,1,15,8,27,8,27,8,27,
27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,15,27,27,1,
27,27,27,27,27,27,27,27,27,27,27,27,27,1,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,1,27,27,27,27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,8,8,
8,27,1,15,1,15,1,1,1,1,1,1,1,1,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,
27,27,27,1,1,15,15,1,15,27,27,27,27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,27, };
static unsigned short stb__times_6_latin_ext_a[560]={ 22,29,35,43,43,72,67,16,
29,29,43,49,22,29,22,24,43,43,43,43,43,43,43,43,
43,43,24,24,49,49,49,38,80,63,58,58,63,53,48,63,
63,29,34,63,53,77,63,63,48,63,58,48,53,63,63,82,
63,63,53,29,24,29,41,43,29,38,43,38,43,38,29,43,
43,24,24,43,24,67,43,43,43,43,29,34,24,43,43,63,
43,43,38,42,17,42,47,67,67,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,22,29,43,43,43,43,17,43,
29,66,24,43,49,29,66,43,35,48,26,26,29,50,39,22,
29,26,27,43,65,65,65,38,63,63,63,63,63,63,77,58,
53,53,53,53,29,29,29,29,63,63,63,63,63,63,63,49,
63,63,63,63,63,63,48,43,38,38,38,38,38,38,58,38,
38,38,38,38,24,24,24,24,43,43,43,43,43,43,43,48,
43,43,43,43,43,43,43,43,63,38,63,38,63,38,58,38,
58,38,58,38,58,38,63,56,63,43,53,38,53,38,53,38,
53,38,53,38,63,43,63,43,63,43,63,43,63,43,63,43,
29,24,29,24,29,24,29,24,29,24,61,48,34,24,63,43,
43,53,24,53,24,53,35,53,30,53,24,63,43,63,43,63,
43,52,61,43,63,43,63,43,63,43,77,63,58,29,58,29,
58,29,48,34,48,34,48,34,48,34,53,24,53,37,53,24,
63,43,63,43,63,43,63,43,63,43,63,43,82,63,63,43,
63,53,38,53,38,53,38,24,67,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,63,67,67,43,67,67,67,67,67,
67,67,67,67,67,67,67,67,63,46,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,47,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,
67,67,67,67,67,63,38,29,24,63,43,63,43,63,43,63,
43,63,43,63,43,67,67,67,67,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,
67,67,63,38,77,58,63,43,67,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,67, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_6_latin_ext_BITMAP_HEIGHT or STB_FONT_times_6_latin_ext_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_6_latin_ext(stb_fontchar font[STB_FONT_times_6_latin_ext_NUM_CHARS],
                unsigned char data[STB_FONT_times_6_latin_ext_BITMAP_HEIGHT][STB_FONT_times_6_latin_ext_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_6_latin_ext_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_6_latin_ext_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_6_latin_ext_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_6_latin_ext_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_6_latin_ext_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_6_latin_ext_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_6_latin_ext_s[i]) * recip_width;
            font[i].t0 = (stb__times_6_latin_ext_t[i]) * recip_height;
            font[i].s1 = (stb__times_6_latin_ext_s[i] + stb__times_6_latin_ext_w[i]) * recip_width;
            font[i].t1 = (stb__times_6_latin_ext_t[i] + stb__times_6_latin_ext_h[i]) * recip_height;
            font[i].x0 = stb__times_6_latin_ext_x[i];
            font[i].y0 = stb__times_6_latin_ext_y[i];
            font[i].x1 = stb__times_6_latin_ext_x[i] + stb__times_6_latin_ext_w[i];
            font[i].y1 = stb__times_6_latin_ext_y[i] + stb__times_6_latin_ext_h[i];
            font[i].advance_int = (stb__times_6_latin_ext_a[i]+8)>>4;
            font[i].s0f = (stb__times_6_latin_ext_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_6_latin_ext_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_6_latin_ext_s[i] + stb__times_6_latin_ext_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_6_latin_ext_t[i] + stb__times_6_latin_ext_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_6_latin_ext_x[i] - 0.5f;
            font[i].y0f = stb__times_6_latin_ext_y[i] - 0.5f;
            font[i].x1f = stb__times_6_latin_ext_x[i] + stb__times_6_latin_ext_w[i] + 0.5f;
            font[i].y1f = stb__times_6_latin_ext_y[i] + stb__times_6_latin_ext_h[i] + 0.5f;
            font[i].advance = stb__times_6_latin_ext_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_6_latin_ext
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_6_latin_ext_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_6_latin_ext_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_6_latin_ext_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_6_latin_ext_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_6_latin_ext_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_6_latin_ext_LINE_SPACING
#endif

