// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_bold_14_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_bold_14_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_bold_14_latin1_BITMAP_WIDTH         256
#define STB_FONT_arial_bold_14_latin1_BITMAP_HEIGHT         72
#define STB_FONT_arial_bold_14_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_bold_14_latin1_FIRST_CHAR            32
#define STB_FONT_arial_bold_14_latin1_NUM_CHARS            224

#define STB_FONT_arial_bold_14_latin1_LINE_SPACING           9

static unsigned int stb__arial_bold_14_latin1_pixels[]={
    0x00004c22,0x000220c4,0x0015404c,0x01300151,0x00008000,0x2a800d44,
    0x11004c40,0x4f884026,0x5b20e200,0x5440004f,0x880aa001,0x10fff14f,
    0xc9f98013,0xffffb106,0xf6c854cd,0x0b9dd107,0xa83545e8,0x0fe0befe,
    0x2ec00be6,0x200ff5c0,0x82dffeca,0xdfea83fd,0xf100f901,0x206ed805,
    0x4fd87f3d,0x15c009f1,0xf302c9d4,0x03e407bb,0x32202f88,0xdd05bf12,
    0x3a8c880b,0x9fbfffb0,0x06a53274,0x9802a666,0xffb85f05,0x40fe6fdb,
    0x00488039,0x75c07539,0x987f931b,0x5e9ef87d,0x055006e0,0xf3037498,
    0x1cf98fe1,0x201959f1,0x17e20eb9,0x153150fb,0x29801b80,0x07f11a80,
    0xeb807273,0xfff81eff,0x54711f9e,0x3fae0d42,0x2a1541ef,0x47f89b21,
    0xeb87f0dc,0xfd701eff,0x3fae03df,0x88eb81ef,0x41f9a8ab,0x40ffc0fb,
    0xf13ec5f8,0x17e27d8b,0x8fe6d8fb,0x3bfe21f9,0x7f7e42fe,0x8fb17e25,
    0x6c1f20ef,0x04fd804f,0x81fc53e2,0x3fee04fd,0x7e41ffdc,0x9f11f9ef,
    0x717d47ee,0x43ffb9ff,0x545f51fb,0xf80bf30f,0x3f73fee3,0x6e7fdc1f,
    0x67fdc1ff,0x4cfc1ffd,0x4d8ffcdf,0x3ff607d4,0x9f62fc43,0xf13ec5f8,
    0xf27c7d8b,0xdf10fd47,0x959f12f4,0xfb17e219,0x21f24ff8,0x7c407ff8,
    0x453e207f,0x07ff883f,0x37cc1ff1,0x47e7bf62,0x329f14f8,0xf983fe27,
    0x23e53e26,0x807f52f9,0x4c1ff13f,0x983fe26f,0x983fe26f,0xd2eda66f,
    0x47f316af,0x225fd9fb,0xbf13ec5f,0xb17e27d8,0x45b1fc4f,0xc93e20fc,
    0x81b5f50f,0x3e3ec5f8,0xf70f91ff,0x6fdc05fb,0x229f102f,0x2fdfb83f,
    0x0fe85f98,0xf11f9ec8,0x264fb6c9,0x360fe85f,0x33f889f6,0x99fc08bf,
    0xf30fe85f,0x3e61fd0b,0x2970fe85,0x41dd7a2f,0x325f73fc,0x7d8bf12f,
    0x44fb17e2,0x5f33ec5f,0xbf10ff20,0x1b7f33ec,0xfb17e215,0x0f96fdf8,
    0x740bf1dd,0x9f105f8e,0x23ba0fe2,0xd83fa85f,0x1f9ec81f,0x7e7d49f1,
    0x3f60fea1,0x107f3ea1,0xfb1fe25f,0x41fd4fe1,0xb07f51fd,0x360fea3f,
    0x25f3971f,0x441e8bf8,0x17ff11ef,0xfb17e25f,0x89f62fc4,0x5f33ec5f,
    0x446fa84c,0x224fabff,0x3e1fccff,0x2f3e3ec5,0xa7cc7caf,0xb4f981fd,
    0x229f103f,0xfda7cc3f,0x7fc2fd41,0x11f9ec80,0x547ff89f,0x7c0ff85f,
    0x2e1f987f,0x3e4fdbef,0x1ff0bf53,0x43fe17ea,0x30ff85fa,0x33f677ed,
    0x441fa85d,0x22fc6ffe,0x1f62fc7d,0x1fc7d8bf,0xf107dc7f,0xf9819fdb,
    0x3a37c3ef,0x7dfea7c7,0x27ee6fe4,0x27ee6fe4,0x43f8a7c4,0x44fdcdfc,
    0x1be60ff8,0xf88fcf64,0x3e227e44,0x321be60f,0x4c0fb84f,0x4fe0cefc,
    0x9be60ff8,0x9be60ff8,0x1be60ff8,0xdf7db53f,0x201f7067,0x3a37c6fc,
    0xf1fa37c7,0xf2747e8d,0x9f10fd47,0xfb00e802,0x4f89fb7b,0xfff8fff5,
    0xfff87fff,0x3f987fff,0xffff87f1,0xcffb87ff,0x3d902ffc,0xf913e23f,
    0xf99ff703,0xb03f905f,0x3e136609,0x3f33fee3,0x667fdc2f,0x67fdc2ff,
    0x17d42ffc,0x23dc4e88,0x6c1f93c8,0x6c4fdbdf,0x6c4fdbdf,0x5c4fdbdf,
    0x22f98fe6,0x024c04f8,0x81bfffb1,0xfa9ff64f,0x7f517dc3,0x3fea2fb8,
    0x3eabdf12,0x7dc17dc3,0x3b201eff,0x2a9f11f9,0x3fee05fe,0x2ff541ef,
    0x7a9807c4,0x7ffdc3f8,0xdfff701e,0x3bffee03,0x99bdf301,0x86fc89fd,
    0x6c45fdfd,0x6c40dfff,0x6c40dfff,0x1f80dfff,0x51ffc47f,0x10008803,
    0x4ff127c0,0xb2fc40fd,0x265f881f,0xfda6642c,0x0102fc40,0x442a2a60,
    0x0017934f,0x405e4c01,0x202ee039,0x0400101c,0x54c00100,0x019701bc,
    0x00100b2a,0x2a004002,0x02c98392,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00003510,0x006202a8,0x409806a2,0x207ff62a,
    0x40009803,0x30130880,0x00004c01,0x00062018,0x440004c0,0x00988130,
    0x4407e73a,0x14013009,0x20000260,0x93f300c9,0x7d40db0d,0x0fd402dd,
    0x5c03ef98,0x41fd700e,0x43f951fa,0xf701efea,0x33ffaa03,0x7c66c0fb,
    0xb807fd42,0x3ffae00f,0xfb02e81e,0x3bffd309,0xfd307ee0,0x13ed905d,
    0xc8ab81b6,0x3f60bd00,0x2a075905,0xffe980ff,0x2073902d,0x1903a8c8,
    0x200a62e0,0x126ae01a,0x23220370,0x3f51543a,0xd837767c,0xf99ff701,
    0x1f35f07f,0x2e02b9b8,0xfb9ff703,0xc984c83f,0x5df7c0c8,0xdf03b07e,
    0x2a530dd3,0x7c40d881,0x444fffff,0x0c8c880d,0x73902da8,0xfbcffa85,
    0x204fd81f,0x3ffe24f8,0x4fd84fff,0xffffff10,0x3ffffe29,0xf88bf64f,
    0xf113e20f,0x9f98fd49,0x82ca808e,0xdfd10ff8,0x27f77f6c,0x2ca80b2a,
    0x3e60ff88,0x0b983546,0x43952fc4,0xd4f8aa1a,0x8179710b,0x3e20bcb8,
    0x222cccce,0x65c40bcb,0x05e5c40b,0x3fe2a86a,0xff10f620,0xf127c40f,
    0x8859999d,0x9df107ff,0x3be25999,0x3e22cccc,0x9f10ff26,0x87ea4f88,
    0xefc80eef,0x457e61ff,0xfb70fdce,0x77e47dd9,0x7f7e41ff,0x3a17e61f,
    0xfb03e20f,0xcffd89fb,0x2bf27c41,0xe82facf8,0x6ff46fdf,0xd017e26f,
    0xdfe8dfbf,0x37eff46f,0xf8afc9f1,0x5fbf7005,0x5f893e20,0x82fdfb80,
    0x17e205f8,0x1be33ee0,0x49f113e2,0x3ffa61fa,0x2fc57e63,0x7ed767f5,
    0xf31f5721,0x5f997e2b,0x41fd4bf1,0xf11741fd,0xff911ee5,0xf93e21bf,
    0x09f59f15,0x0a83f215,0x2bbe21f9,0x642a0aaa,0x07e42a0f,0x7c43f215,
    0xb1fd57e4,0xf8ee8bdd,0x7c49f105,0x740aaaae,0xef885f8e,0xdf10aaaa,
    0xfd015555,0x89f103fd,0x207ea4f8,0x45f50fdf,0xbb9f10fc,0xceeb87f4,
    0x645f53df,0x7e45f50f,0x1ff0bf50,0x3bbee4c8,0x7fb301fe,0xf15f93e2,
    0xfb50ff69,0x7fed41ff,0xfffff10f,0x7ffed43f,0x83fff6a0,0xf10fffda,
    0x25f8afc9,0x53e67fed,0x24f881fd,0x1ffffff8,0x20fed3e6,0x1ffffff8,
    0x3ffffff1,0x2207ff30,0xf527c44f,0x3e3a3263,0x236c7f31,0x4df30efe,
    0x34efeefd,0x7f336c7f,0x41ff136c,0x2a6b86f9,0xf50999af,0x4f8a7c47,
    0xfd27c57e,0x3ee33ea1,0x1f719f50,0xcfa817e2,0x19f50fb8,0x233ea1f7,
    0x7c9f10fb,0x4fd03fe5,0x84fdcdfc,0x017e24f8,0x89fb9bf9,0x17e205f8,
    0xf100fd80,0x3ea4f889,0x4f9dbf11,0x43fcaef8,0x2ffcbefd,0xf11ae3e6,
    0x7c47f95d,0x7dc3fcae,0x982ffccf,0xdb3bf10f,0x7f5e7f41,0x57f27be2,
    0x0fda9cf8,0x23fd37f5,0x11fe9bfa,0x4dfd40bf,0xd37f51fe,0x3a6fea3f,
    0x3f27be1f,0x3af3fea5,0x3ffffe7f,0x224f887f,0x7fffc05f,0x02fc47ff,
    0x3ec00bf1,0x4f889f10,0xefea87ea,0x21f7f441,0x1effdbfa,0xe885cbd4,
    0xefe883ef,0x3dfff703,0xdff50fc0,0x3fffd985,0x8af67fdc,0x6c3ffacf,
    0x3f62fcff,0x9df12fcf,0x7fec7999,0x33ff62fc,0x3f3ff62f,0x17b3fee2,
    0x219dffb5,0x217dc3fa,0x33be24f8,0x87f53ccc,0x33be22fb,0x9df13ccc,
    0x1f607999,0xa7c44f88,0x40681fec,0x84400600,0x02002008,0x80880040,
    0x00000800,0x44020040,0x45ffffff,0x00200400,0x0fd80800,0x93e22fc4,
    0x5ffffff8,0x25f881fb,0x5ffffff8,0xbffffff1,0x4f881f60,0x0ccba7c4,
    0x00000008,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x4c40fed9,0x0000c400,0x2230088c,0x00000000,
    0x40009800,0x42200008,0x00004009,0x00000088,0x00000000,0x75400008,
    0x80000eee,0x9d455098,0x80bd101c,0xdffd505e,0x0d93f303,0x74cd93f3,
    0x3dc0ec2e,0x743dc074,0xfb01f700,0xfd701f8b,0x81fdb20b,0x500ceeec,
    0x88be03bd,0x76cc0bec,0x17dfd502,0x4c2efe98,0x7f4c1cfd,0x9ddd900c,
    0x3227cc01,0x3660eeef,0x64fd01cf,0x4fd8dd0e,0x59806c40,0xffb9ff70,
    0x8298a883,0x2a2298a8,0x32a12a3d,0x3e541dc7,0x985700ee,0x4416e3f7,
    0x2983f9cf,0x5417b035,0x3f5fec0e,0xf7dd07c4,0x2fe6fc4b,0x1bf6ffee,
    0x741fb5df,0x3be25ebe,0x20bd85fb,0x89fd00ea,0x3afba06d,0xd8bfec46,
    0x7ff88220,0xb9805cc0,0xf307fc40,0x2a05950d,0x24d98aa1,0x344f100e,
    0x50344f10,0x5d7a9543,0x4efc407e,0x7017303f,0x9663bb29,0xd50514f8,
    0x50fc9fcc,0x7c43f63f,0x3f886e47,0x64fe2151,0x23746e27,0x98eeebcb,
    0x7c4ffc85,0x47a61def,0x9ffbe1fb,0x3f7ee01a,0x89fbfb02,0x3e64fdfd,
    0x3f20ff85,0x93e21ffe,0x2eb9975f,0x02c9e203,0xf102c9e2,0xfbf8afc9,
    0x7fe405b8,0x89fbfb04,0x9a535a8d,0xc80cccfa,0x8fdcbea4,0x263f91fa,
    0x4efcc05f,0x84fced80,0x5c6c1fc8,0x5f31a793,0x75f7c49f,0x9c1fb00f,
    0x7409f17d,0x2f885f8e,0x7b97c4f7,0x47f60fea,0x44bf15f9,0x8bb97e4f,
    0x29106268,0x29103158,0x4f886258,0x3f1b997e,0x2bffea06,0x3dcbe208,
    0xb8e41e5a,0x2e86ecff,0x897dcbee,0xf52ffbdf,0x4fffe807,0x982fffa8,
    0xeebb42fe,0x4674390d,0x20bea04f,0x22fb04fb,0xa7cd724f,0x777dc1fd,
    0xdddf71fe,0x3617e63f,0x7e45f50f,0x82fc9f10,0x6c09d12c,0x3606cf89,
    0x27c49d11,0x6f56e0bf,0xfd1bf10f,0x3bbee1fb,0x56a3a1fe,0x53ea1d2a,
    0xa83e21fa,0x6cc3f72f,0x8bf31fcd,0x204fec40,0x201f93f9,0x2ee3a0fc,
    0x5fe43a6a,0x21511dfb,0x02fdc2f9,0x6e93e2fb,0x89fb9bf9,0x50999afa,
    0x2213335f,0x4df5d57f,0xf89b63f9,0xd96217e4,0x2229304d,0x6ec9307a,
    0x05f93e24,0x54baf33f,0x549ff32f,0x2e0999af,0x4b31dd93,0x545f34f9,
    0x0fc9fcc6,0xff10fd86,0x417a0fd8,0x223f51fa,0x5dc5f70b,0x6cb37b3b,
    0xf14fffff,0x7d41fb5d,0x4f8bec05,0x7ffffd62,0x6cefc47f,0xdb3bf10e,
    0x7f67fdc1,0x32bbe22f,0x7e4f7c3f,0xdbd71d85,0x0f541d03,0x3dbd70e8,
    0x42fe4f7c,0x44baf35b,0x2fffbaef,0x81db3bf1,0x3a074c3d,0x42647dbf,
    0x3e26faef,0x77dc5fad,0x37f64fdb,0x2b7e1cbd,0x3ab7e27e,0x074c3d86,
    0x419f3331,0x3e21cfea,0x7d81cccf,0x7d4e49f1,0x3ea17dc3,0x77fd42ef,
    0xfefffb82,0x0fbfa21e,0x317b3fee,0x207654cb,0x03bbe63a,0x07654c75,
    0xf0bd9ff7,0xb307ef43,0x545f5bff,0xdd902eff,0xdf9101bd,0xfd982e85,
    0x05ffdc0c,0x70677e4c,0x549ffd9d,0x7f542dfe,0xbdbd901d,0x0027c401,
    0x05fffff7,0x3613e2fb,0x082fc40f,0xb1040040,0x98000101,0x44280880,
    0x11028199,0x03051000,0x10008004,0x00018000,0x80400000,0x00100000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x2088c098,0xb883cce9,0x43cfa80a,
    0x6ec04c29,0x2206a06b,0xa8006a0a,0x03f88d42,0x3a803740,0x289fa053,
    0x51f62fc4,0x32601951,0x20544299,0x0dfffff8,0x3fffffe2,0x13e29f14,
    0x14f8a7c4,0x09fb009f,0x0fbfffe2,0xd9fffffe,0xfb89f30f,0x4d91f30e,
    0x7e40ca9a,0x2fdb86fe,0x883f23ec,0x13e01b9a,0x327c4bea,0x7dc17df9,
    0x0fe25f51,0x7fd4dd00,0x1bbbbf63,0xf88bf3f4,0xfdf13ec5,0xfefd85ff,
    0x220fd46e,0x25fdccef,0x2ccccef8,0x413e29f1,0x7c4b24f8,0x83ffc404,
    0x4feccef8,0x3266677c,0x3903f29f,0x8a62a257,0x3e20bcb8,0xda983934,
    0x0b20a60f,0x81a80595,0x749f12fa,0x3e24fbae,0x4dfc4f94,0xdd17500b,
    0x4f884ff4,0x55fa0df1,0xb17e22ef,0x4bd37c4f,0x22df15f8,0xf109afb9,
    0x17e26e8b,0x29f14f88,0x549f10a9,0x05719f11,0xf105fbf7,0x17e0fe8b,
    0x209f3fb0,0x7f41a81a,0x80bea6fd,0x2a4ffffb,0x3bf21a84,0x509f01ff,
    0x6453e25f,0x3edb1f62,0x3fbbfe24,0xb7ff7ec2,0x8bea2efa,0x3f2fd06e,
    0xfb17e25f,0x21f927c4,0x7edba2fa,0xdf14ffff,0x7c47f955,0xf10aaaae,
    0x97eb3e29,0x229f14f8,0x743feeef,0x5f885f8e,0x55df0fe4,0x7f7dc435,
    0x2227c40a,0x0fc8544f,0xf82a27f3,0x22dcdf15,0x22bf34f8,0xa82fc85f,
    0x2609f33f,0x0fe7d45f,0xf12f4df1,0x7fedbe69,0x3e27f30e,0x22fcfd06,
    0xf13ec5f8,0x47f13ecb,0x57f9536f,0x3ffffe23,0x3fffe21f,0x229f11ff,
    0xa7c45fdf,0x7cdf14f8,0x0fed3e65,0x45f717e2,0x363fffff,0x444fffff,
    0x2a27c44f,0x3ba0fffd,0x45f51fca,0xf88d90fd,0x07e45f54,0x3bea07fb,
    0xef984fda,0x7c47ff80,0x17d43f24,0x7fc374df,0x4fd06fdb,0x3ec5f85f,
    0x89f57ff1,0x546fcaee,0x98afc41f,0x40bf10fe,0xdfff14f8,0x29f14f88,
    0xfc9be4f8,0x7c44fdcd,0x3bf0fdc5,0x7dcc4133,0x227c409b,0x233ea4f8,
    0x3bf660fb,0x26e8fe63,0xf9a7c47d,0x23f99b63,0x37f7ea08,0x900ee84f,
    0x365f889f,0x26f8fe66,0xe9ec886e,0xbf37cd76,0x227e8df0,0x4c0cfedf,
    0x74c6edfe,0x3ee2fc40,0x7c40bf12,0x45f7df14,0x229f14f8,0xfff9ba4f,
    0x2fc47fff,0x205f83fa,0x44fffffd,0x527c44f8,0x983fd37f,0xfcaee85c,
    0x29f11fa3,0x23fcaef8,0xfa9ba3f8,0x9016400a,0xbbff883f,0x7e577c4f,
    0x43711ba6,0x9f9bf55f,0x37f6177c,0x53e24fdb,0x32add000,0xdf12cccc,
    0x221ff999,0x13ccccef,0x3f53e29f,0x453e29f1,0x1fd5ba4f,0xcef88bee,
    0x02fc3fdc,0x8359f953,0x227c44f8,0x4c2fcffd,0x77e440f9,0x93e23f43,
    0xfc83efe8,0x0bea2ffe,0x3faa1360,0xcfecf885,0x36eff4c0,0xfdbfd0dd,
    0x906ffe45,0xfffd88ff,0x0013e20d,0x3ffff6dd,0xfffff14f,0x7fffc45d,
    0x229f15ff,0x3e29f34f,0x93e29f14,0xf881fb6e,0x3bfffe25,0xfa805f83,
    0xf889f101,0x0ddc0084,0x3e215400,0x5dc40084,0x7c005440,0x000bc985,
    0x221ba000,0x04001cca,0x001a8020,0x00000154,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x3fe67e80,0x07f4bf10,0x225f83f6,0x3bbaa2fe,
    0xfff902ee,0x3e2bffff,0xff107ec5,0x5f887dff,0xff502740,0x7ec3ffff,
    0x7d43fe22,0xff897ea5,0x7ed3fe65,0xfd2fffff,0x44f9077c,0xd83effff,
    0x3ffe26bd,0x65c41def,0x05e5c40a,0x2224ddc4,0x02cb9cca,0x17301571,
    0x99954350,0x1fc99999,0x8fea5ff7,0xf1be23fb,0xd50bfa2b,0xf103ffdd,
    0x7999bfbd,0x41fb17e2,0x4feccef8,0x206677e2,0x3332605f,0x9be20ffd,
    0xe97ec3fc,0xb9ffe20f,0xdf9974ff,0xff9fa399,0xcef89f24,0x26a22fec,
    0x333be21b,0x33be27fc,0x37eff45f,0xb13fbbee,0xbfbfffbf,0x6c6fefc8,
    0x93e24fdf,0x3ea6015f,0x3ee9fdb2,0x3fa97e21,0x803feafc,0xf75f704f,
    0xfb17e205,0x3fa2fc41,0xbfffff10,0xe8802fc1,0xf8cfb82f,0x3fcef886,
    0xee8ff7c4,0x7e85f84f,0x13e47ffe,0x352fccbf,0x22fc4771,0x339f50fd,
    0x41f90a83,0x1a8ff94f,0x447ea7f9,0x3e23934f,0xf27c4f72,0xa7c4c02b,
    0xb0fb6dcf,0xbf03f61f,0x0d7009fb,0xaacfbb74,0x555df10a,0x22fc41fd,
    0x33bf11fc,0x802fc7f9,0x3bfa04fd,0x0dff701f,0x9f17f9f1,0xdb0bf09f,
    0x27cb7efc,0x453ea5f8,0xf14feeef,0xe8dd333b,0x7ed42eff,0xb75f50ff,
    0x7fed41f7,0xf52feeef,0x3bbbee05,0xafc9f11f,0x3e7ba300,0xa85f8fba,
    0xfff0bf3f,0x1fc401ff,0xfff73fa8,0x3ffe25ff,0x3fe0ffff,0x225f74ff,
    0x5f97e25f,0x4c05fb80,0x3fe203ff,0xaddcf883,0x85f84faf,0x2bef3e5c,
    0x3fffe27c,0x7cdf11ff,0xbfffff15,0x21fd7303,0x50fb8cfa,0xf99f6bbf,
    0x999bfb8d,0x42a27f30,0x10999afa,0x300afc9f,0x3e63f3f2,0xaef883fc,
    0xfabff82f,0x7403ee05,0x102fdccf,0x220fd8bf,0xf88fe45f,0x3e4fc99d,
    0x0077d405,0xffb007ec,0xfbcf881f,0x5f84f8fc,0x7f53e4b8,0x333be27d,
    0x6f93e20b,0x87fb3bf1,0x50fc9bfa,0x7c3fd37f,0x3ea3fbaf,0xfc9dfe8b,
    0x47f2bba0,0x20ed9df8,0x015fc9ef,0xff37fdc6,0x1fbf603f,0x205fb2fc,
    0xdddf505d,0x17e205fd,0x22fc41fb,0xffff10fe,0x102fc1df,0x1f6001ff,
    0x45fbdfa8,0x8dff9cf8,0x2985f84f,0x13ffd53e,0xd27c40bf,0x2fe97e2d,
    0x36177f64,0xbd12fcff,0xbffb07df,0xd987dff7,0x77fd43ef,0xaf67fdc2,
    0x8ffe6300,0x3fea07fd,0x7fccbf05,0x1fd04f80,0xa6666fdc,0x107ec5f8,
    0x49fb99df,0xf819aef8,0xfd0cccce,0x2039999d,0x21ff107d,0x7d3e22fd,
    0x5f84f8bf,0xfd93e5c8,0xf8817e27,0x32fc5ba4,0x040101ff,0x02020010,
    0x30001000,0x7c533333,0xf017ea1f,0xf917e05f,0xf983f88b,0x7ffffdc5,
    0x0fd8bf17,0x0fbfffe2,0xfff80bf1,0xfffd1fff,0x1f605fff,0x1ff11fe4,
    0x44fed3e2,0x6d85f84f,0x227f893e,0xe93e205f,0x4fb8bf16,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x6cc05950,0x17104081,0x7072e391,
    0xb9b87713,0x2a570ea3,0x731b8ae2,0x5dcc6e63,0x000a62bb,0x88730000,
    0x4251d41b,0x00002002,0xc9800802,0x4c03cccc,0xb13ccccc,0x5fccbea5,
    0x098221fb,0x20844372,0x30444408,0x3bf20c59,0x41fa81ff,0x223f54e8,
    0xfdefedef,0x3fb7be0f,0x5cbfdf13,0x5f25f31f,0x225f37f8,0x3ee6f8ef,
    0x3fea5fff,0x2e57c40b,0xd506acd8,0x6c2f88bf,0x5fffff77,0x4f713fa2,
    0x3ba66ee9,0x34427cc1,0x7fdcbba6,0x93f65fff,0x15fffffb,0x7ccbea7f,
    0x45f31fbb,0x3e5b314f,0x47f30f9b,0xfff75ffc,0x8afccddf,0x2666625f,
    0x97f7ee09,0x2e9f55f8,0x15f9be1f,0x329f10df,0x3fea7e67,0x3fea0fb9,
    0x40fe881f,0x2e1dffc9,0x4fdc2f9f,0x37ff222f,0x26fe6622,0x7577c310,
    0x543e3327,0x43eea27c,0x7fec3d98,0x4cfbb720,0x2b3005a9,0x2b97601d,
    0x2abe23f3,0x51b8570f,0x21445437,0x54f32a49,0x2a1dda89,0x7e43f22f,
    0x7ec3ffff,0x7ccfe20f,0xd27c3f53,0x7ec13e2b,0x6e5fc4f8,0x4fd85dbe,
    0x6c403fd0,0x87de745f,0x7d46dbf8,0xffffb81e,0xf51f985f,0xf10fcf61,
    0xb307df5c,0x21fd7cc9,0xa8f542fc,0xd14eeeee,0x8aec01d5,0x001860c5,
    0x80000000,0xa99b63f9,0x3ea1aaaa,0x4cfe24fe,0x27c3f52f,0x5413e2bd,
    0x776c1fcf,0x7c43fdcb,0x817ec0ff,0x222efeb8,0x5ef46dbf,0x33ff620f,
    0x2b3eea61,0x4fb5bf02,0x93c46dfa,0x332e1fbd,0xd13e5f25,0xa967d4b3,
    0x2a4ddddd,0x001dc02d,0x33323d80,0x66644ccc,0x80004ccc,0x83fcaef8,
    0xbafc41ea,0x3e67f12f,0xd27c3f52,0xfe80fe2b,0xfa9ffa86,0x2fd7f40f,
    0x54777df9,0xadd81dff,0x26cfcc0f,0x2227fe44,0xffaae42f,0x20a22fff,
    0x884c5438,0x267b10bb,0x1ddd401d,0x00000000,0xbbbb93e0,0x5dddc3bb,
    0x100003bb,0x3aa07dfd,0x7f10c181,0xf0fd4be6,0x03f8af49,0x5fe20bee,
    0xc97dc6f8,0xfffffb3f,0x8c880654,0x0915502b,0x20ec44b8,0x0e262a7d,
    0x00000000,0x00000000,0x00000000,0x00400000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_bold_14_latin1_x[224]={ 0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,-1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,
1,0,0,-1,0,0,0,0,-1,-1,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,-1,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__arial_bold_14_latin1_y[224]={ 11,2,2,1,1,1,1,2,1,1,1,3,9,6,
9,1,1,1,1,1,1,2,1,2,1,1,4,4,3,4,3,1,1,2,2,1,2,2,2,1,2,2,2,2,
2,2,2,1,2,1,2,1,2,2,2,2,2,2,2,2,1,2,1,12,1,4,2,4,2,4,1,4,2,2,
2,2,2,4,4,4,4,4,4,4,2,4,4,4,4,4,4,1,1,1,5,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,4,2,1,3,2,
1,1,1,1,1,4,4,6,1,0,1,2,1,1,1,4,2,5,11,1,1,4,1,1,1,4,-1,-1,-1,-1,
0,0,2,1,-1,-1,-1,0,-1,-1,-1,0,2,-1,-1,-1,-1,-1,0,3,1,-1,-1,-1,0,-1,2,1,1,1,
1,2,1,1,4,4,1,1,1,1,1,1,1,1,2,2,1,1,1,2,1,3,4,1,1,1,1,1,2,1,
 };
static unsigned short stb__arial_bold_14_latin1_w[224]={ 0,2,6,7,7,11,9,3,4,4,5,7,3,4,
3,5,7,5,7,7,7,7,7,7,7,7,2,2,7,7,7,8,13,10,9,9,9,8,8,9,9,3,6,10,
8,10,9,10,8,10,9,8,8,9,10,12,9,10,8,4,5,4,7,9,4,7,8,7,7,7,5,7,7,3,
4,7,3,11,7,8,8,7,6,7,5,7,7,10,7,7,7,5,2,5,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,3,7,7,7,7,
2,7,5,11,5,7,7,4,11,9,5,7,4,4,3,7,8,3,4,4,5,7,11,11,11,8,10,10,10,10,
10,10,13,9,8,8,8,8,4,4,5,5,10,9,10,10,10,10,10,7,10,9,9,9,9,10,8,8,7,7,
7,7,7,7,11,7,7,7,7,7,4,4,5,5,8,7,8,8,8,8,8,7,8,7,7,7,7,7,8,7,
 };
static unsigned short stb__arial_bold_14_latin1_h[224]={ 0,9,4,11,12,11,11,4,13,13,6,7,5,3,
2,11,11,10,10,11,10,10,11,9,11,11,7,10,7,5,7,10,13,9,9,11,9,9,9,11,9,9,10,9,
9,9,9,11,9,11,9,11,9,10,9,9,9,9,9,12,11,12,6,2,3,8,10,8,10,8,10,10,9,9,
12,9,9,7,7,8,10,10,7,8,10,8,7,7,7,10,7,13,13,13,3,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,10,12,11,7,9,
13,13,3,11,6,7,5,3,11,2,5,9,6,6,3,10,12,3,3,6,6,7,11,11,11,10,12,12,12,12,
11,11,9,13,12,12,12,11,12,12,12,11,9,12,13,13,13,13,12,7,11,13,13,13,12,12,9,11,11,11,
11,10,11,11,8,10,11,11,11,11,10,10,10,10,10,9,11,11,11,10,11,7,8,11,11,11,11,13,12,13,
 };
static unsigned short stb__arial_bold_14_latin1_s[224]={ 151,147,210,94,66,100,112,206,137,28,169,
120,202,241,217,150,156,242,234,198,218,226,142,36,190,164,128,253,112,180,88,
73,79,216,169,172,227,179,237,228,58,200,121,25,88,127,150,120,160,28,177,
145,138,134,14,1,117,106,97,215,131,61,161,221,236,195,90,224,99,232,107,
113,208,204,210,192,188,26,38,1,144,153,46,187,128,240,53,61,72,82,80,
145,43,93,246,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,
248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,151,38,160,
182,131,246,142,99,230,130,150,104,194,241,206,231,188,161,175,156,217,65,242,
221,225,145,139,96,80,68,56,56,188,199,220,10,1,238,44,33,1,21,30,
187,56,251,50,249,68,178,46,57,68,9,231,18,83,107,117,127,168,39,79,
162,179,196,204,13,171,212,212,21,12,20,137,122,42,248,1,7,29,169,111,
74,102,47,39,10,203,92,154,220,48,20,151,1, };
static unsigned short stb__arial_bold_14_latin1_t[224]={ 14,51,61,15,15,28,28,61,1,1,61,
61,61,61,65,28,28,28,28,28,28,28,28,51,28,28,61,28,61,61,61,
40,1,40,40,28,40,40,40,15,51,40,40,51,51,51,51,15,51,28,51,
15,51,40,51,51,51,51,51,1,15,15,61,65,61,51,40,51,40,51,40,
40,40,40,1,40,40,61,61,61,40,40,61,51,40,51,61,61,61,40,61,
1,1,1,61,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,14,40,1,
28,61,40,1,1,61,28,61,61,61,61,28,65,61,40,61,61,61,40,1,
61,61,61,61,61,28,28,28,40,1,1,1,15,28,15,51,1,15,15,15,
15,15,1,15,15,51,1,1,1,1,1,1,61,15,1,1,1,1,15,51,
15,15,15,15,40,15,15,51,40,28,28,15,28,40,28,40,40,40,51,15,
15,15,40,28,61,51,28,15,15,28,1,1,1, };
static unsigned short stb__arial_bold_14_latin1_a[224]={ 56,67,95,112,112,178,145,48,
67,67,78,117,56,67,56,56,112,112,112,112,112,112,112,112,
112,112,67,67,117,117,117,122,196,145,145,145,145,134,122,156,
145,56,112,145,122,167,145,156,134,156,145,134,122,145,134,189,
134,134,122,67,56,67,117,112,67,112,122,112,122,112,67,122,
122,56,56,112,56,178,122,122,122,122,78,112,67,122,112,156,
112,112,100,78,56,78,117,150,150,150,150,150,150,150,150,150,
150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,
150,150,150,150,150,150,150,150,56,67,112,112,112,112,56,112,
67,148,74,112,117,67,148,111,80,110,67,67,67,116,112,56,
67,67,73,112,167,167,167,122,145,145,145,145,145,145,201,145,
134,134,134,134,56,56,56,56,145,145,156,156,156,156,156,117,
156,145,145,145,145,134,134,122,112,112,112,112,112,112,178,112,
112,112,112,112,56,56,56,56,122,122,122,122,122,122,122,110,
122,122,122,122,122,112,122,112, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_bold_14_latin1_BITMAP_HEIGHT or STB_FONT_arial_bold_14_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_bold_14_latin1(stb_fontchar font[STB_FONT_arial_bold_14_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_arial_bold_14_latin1_BITMAP_HEIGHT][STB_FONT_arial_bold_14_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_bold_14_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_bold_14_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_bold_14_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_bold_14_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_bold_14_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_bold_14_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_bold_14_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__arial_bold_14_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__arial_bold_14_latin1_s[i] + stb__arial_bold_14_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__arial_bold_14_latin1_t[i] + stb__arial_bold_14_latin1_h[i]) * recip_height;
            font[i].x0 = stb__arial_bold_14_latin1_x[i];
            font[i].y0 = stb__arial_bold_14_latin1_y[i];
            font[i].x1 = stb__arial_bold_14_latin1_x[i] + stb__arial_bold_14_latin1_w[i];
            font[i].y1 = stb__arial_bold_14_latin1_y[i] + stb__arial_bold_14_latin1_h[i];
            font[i].advance_int = (stb__arial_bold_14_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__arial_bold_14_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_bold_14_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_bold_14_latin1_s[i] + stb__arial_bold_14_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_bold_14_latin1_t[i] + stb__arial_bold_14_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_bold_14_latin1_x[i] - 0.5f;
            font[i].y0f = stb__arial_bold_14_latin1_y[i] - 0.5f;
            font[i].x1f = stb__arial_bold_14_latin1_x[i] + stb__arial_bold_14_latin1_w[i] + 0.5f;
            font[i].y1f = stb__arial_bold_14_latin1_y[i] + stb__arial_bold_14_latin1_h[i] + 0.5f;
            font[i].advance = stb__arial_bold_14_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_bold_14_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_bold_14_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_bold_14_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_bold_14_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_bold_14_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_bold_14_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_bold_14_latin1_LINE_SPACING
#endif

