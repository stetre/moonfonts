// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_39_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_39_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_39_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_39_usascii_BITMAP_HEIGHT        136
#define STB_FONT_courier_39_usascii_BITMAP_HEIGHT_POW2   256

#define STB_FONT_courier_39_usascii_FIRST_CHAR            32
#define STB_FONT_courier_39_usascii_NUM_CHARS             95

#define STB_FONT_courier_39_usascii_LINE_SPACING          18

static unsigned int stb__courier_39_usascii_pixels[]={
    0x0001ec80,0x08800000,0x40000080,0x00000059,0xa8000000,0xb95001c0,
    0x00620057,0x00000000,0x98000000,0x51000acb,0x20003597,0x80fba2fd,
    0x01f6a079,0xffff5d80,0x0000fa9f,0x7ff407a8,0x3ab905ff,0x7fedc003,
    0x1f4002ce,0xfe8801f3,0x2604ffde,0x7003eded,0x7edc4999,0x7fc01bdf,
    0xffffffff,0x7ffffdc5,0x3fffffff,0x7ffdffb0,0x77ffdc40,0x6c000dff,
    0x40bf262f,0x039f507a,0x67cbe200,0x00f90aaa,0x2603d400,0xf985daaa,
    0xd1003f93,0x9fd957bf,0x0f517c00,0x2e20df88,0x221e885f,0x776c403d,
    0x9579ff37,0x567c09fd,0x0aaaaaaa,0x555557dc,0x83faaaaa,0x9f710afe,
    0x9817fd10,0x3b2000fe,0x0f505b81,0xd9000136,0x03f8817c,0x7fff5c00,
    0x172038be,0x02fc43fa,0x7cc03bea,0x2e2f800e,0xf7036c07,0x06883b81,
    0x033ebea0,0x03f827dc,0xf1007a80,0xf701fb85,0x2200ec83,0xf300006f,
    0x3f10f501,0xf1fc4000,0x80036405,0xeb9befe8,0x517207ff,0x101fd89f,
    0x0bd100bf,0x81ae1f88,0x0fe202f9,0x4007601d,0xf9803ffa,0x88003f83,
    0x441f5002,0x002f403f,0x80001fc8,0x887a81f8,0x1f20001f,0x017c405f,
    0xf880fec0,0x3fb17207,0x0d904fa8,0xf3017cc0,0x0bb03643,0xb00e8bb0,
    0x01bea003,0x003f87c8,0x2e2ec000,0x007dc00f,0x00017c40,0x43d40fc4,
    0xf10001f8,0x36c02f87,0x5013e200,0xdf12e40f,0x5f303fa0,0x2606d800,
    0x3f81720f,0x41dc6c80,0x0bea0068,0x1fc1f880,0x0fe00000,0x07f100bb,
    0x6543f300,0xcccccccc,0x3d40fc43,0xb8000fc4,0x26017c0f,0x03ea001f,
    0x2e5c8060,0xc87f702f,0x02f98006,0x882ec1f5,0x1b6a602f,0x016cc5d1,
    0xe8001f50,0x00001fc3,0x03e81f50,0xfb0009f0,0xeeeeeec8,0x0fc46eee,
    0x00fc43d4,0x02f84f80,0x3ea005e8,0xd2e40002,0x3a37c40f,0x207d0004,
    0xf982747a,0x6fffea80,0x02deec88,0x000f5011,0xcb8bf89d,0x40001bdd,
    0xd002f86c,0x03fa8009,0x0fc46c80,0x00fc43d4,0x17c07d40,0x8800fd40,
    0xae40006f,0x0ffc06f9,0x9760005f,0xeeefeeed,0xf51eeeff,0x1b219f70,
    0x5fb71010,0xf8003f50,0x6ffff7c3,0x20004ffd,0x8017c43f,0x7e55405c,
    0x8d90003f,0x987a81f8,0x04e8001f,0x017a005f,0x001befa8,0x80bf75c8,
    0x003f12fe,0xeccb9b20,0xccdfcccf,0x5f98f50c,0xdb880364,0x0fea02cf,
    0x6f41f980,0x005fb81b,0x0fc41f98,0x3e606c80,0x20003fff,0x7a83f86c,
    0x54000fb8,0x2005f01f,0x322000fa,0x801bdfff,0xd809f95c,0x0003f33f,
    0x3e2e41ae,0x1fb8f502,0xfd710364,0x3fea0039,0x000dd000,0xd7000bea,
    0x32003f10,0x3fdb9806,0xf90d9000,0x2fd47a87,0x5f02f400,0x80027400,
    0x00dfecb8,0x201fed72,0x005f14fc,0x12ec1720,0xd91ea05f,0xeeb88d90,
    0xefa8001c,0x00fe400e,0xe800db00,0x9001f884,0x04fb800d,0xffd06c80,
    0x00dfd3d4,0x17c03f30,0x0001f700,0x3201dd30,0xfa805fb5,0x74000fe5,
    0x0fc49b04,0x207dc7a8,0x4073b66c,0xfd1f5001,0x02fe9815,0x1003d400,
    0x005f103f,0x3e600172,0x54364002,0xd99ea1df,0x036c003f,0x07f000be,
    0x40be2000,0xb805fb5c,0x4001364f,0x7cc9d03f,0xdf88f501,0x2e201b20,
    0x2a00beee,0x3fbbff67,0x980000ef,0x40f7000f,0x009b003f,0xd9001760,
    0x90f509f0,0x017cc00f,0x0f7000be,0xc826c000,0xfc809f95,0x70003ea3,
    0x3ffff23f,0xffffffff,0xff503ea4,0xd801dd9b,0x540b910c,0x01acb987,
    0x003e6000,0x009d026c,0x3d4000fa,0x5f11b200,0x03f30f50,0x0be01b60,
    0x7407f100,0x320bb000,0xfd80bf75,0x3e002f42,0x33eaaa64,0x0aaafcaa,
    0x3b2207e6,0x1a202fee,0x007a8074,0x03dc0000,0x17602f88,0x4000be20,
    0x1b2000f9,0x10f503f1,0x05f1003f,0xd90005f0,0x22013e20,0x3eab903f,
    0x2e0ffc06,0x01f9001f,0x440f717c,0x7900002f,0x03d412a0,0x1b600000,
    0x3ea03d40,0x0007dc00,0x364007b8,0x21ea07e2,0x07c801f8,0xf10005f0,
    0x407ff105,0x457206e8,0x41fe207f,0x17e403fc,0x035c3f10,0x6400013a,
    0x1ea09502,0x20033000,0x0bb002f9,0x27404f88,0x004f8800,0x207e2364,
    0x401f887a,0x05f003f8,0x3e21b600,0xcaabdffd,0xc97201ef,0x409f501f,
    0xb5109cfc,0x21f8805f,0x007dc06c,0x1d82cc00,0xb8000f50,0x17a200cf,
    0xfb802f80,0x7641f901,0x0076c402,0x03f11b20,0x803f10f5,0x05f000fb,
    0x320be600,0xdfffec88,0x3e65c803,0xa801fb04,0x0efffffe,0x1720f980,
    0x00009f10,0x035c42fa,0xf70000f5,0x77dc437d,0x001f5000,0x7e4c2ffa,
    0x0d6fec43,0x0003ff51,0xa81f88d9,0x7c01f887,0x000be004,0x0f5006d8,
    0x07f45c80,0xfe8017e2,0x3ea000ac,0x3ee01760,0x22006e03,0x440cedec,
    0xeffffffe,0xfec88001,0x4004ffff,0x7fe4005b,0x36602fff,0x0cffffff,
    0xf88d9000,0x1f887a81,0xf8003ee0,0x07e60002,0xb9001ea0,0x17e43fb8,
    0x0cdff440,0x6c7a8188,0x37bf9004,0x8003fd75,0x55555401,0x40000aaa,
    0x00009aa8,0x06aa2000,0x01355300,0x3dc5d800,0x407d07a8,0x017c004e,
    0x2a017a00,0x7c2e4007,0x2a01be27,0xefffffff,0x7b85fdbc,0xfd500274,
    0x00019fff,0x00000000,0x00000000,0x00000000,0x04ea8fe2,0x20bea0f5,
    0x17c000fa,0x003ea000,0x85c800f5,0x005f72fb,0x533359db,0x2a05bfd9,
    0x18001746,0x6eeeee40,0xdddddddd,0xffffff72,0xffffffff,0x00bfffff,
    0x00000000,0x20000000,0x019fd1fb,0x47fd81ea,0xfff8005e,0x4e8004ff,
    0x3fa03d40,0x2bb05fff,0x0000005e,0x00000408,0xffffffd0,0x7fffffff,
    0x2aaaaaa2,0xaaaaaaaa,0x001aaaaa,0x00000000,0x54000000,0x200263fd,
    0x0360c401,0x2aaaaa00,0x80598000,0x55554c00,0x00063102,0x00000000,
    0x26666000,0x99999999,0x00000099,0x00000000,0x40000000,0xfffffffd,
    0x00000002,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x55000000,0x00035555,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x0005cc00,0x75100000,0x00000037,0x2a200000,0xcb98001c,0x0000000a,
    0x00000000,0x00000000,0x3cccc880,0x073332a0,0x00000dd0,0x2a04fe80,
    0x10bcefec,0xd7005999,0x207ffdff,0x21bdffdb,0xff10bccc,0x5c0000ff,
    0x00cffeff,0x7ff7ff44,0x7ff40004,0x4fffb81f,0x3aa00000,0x91deefff,
    0x40007fff,0x07fffff9,0x0deefe98,0x07dfdd90,0x950007f8,0xf8037dfd,
    0xcefd884f,0xf98efdba,0x3f6205ee,0xd10260ac,0x5fd957bf,0xa983bbbe,
    0xf900007c,0x813f2617,0x37d41ef9,0x3f753000,0x009d5510,0x33bf6000,
    0x512dccaa,0xa80007f5,0x2007caaa,0x03ee005e,0x36001fe0,0xefdbabdf,
    0xfd09ff00,0x3eff6205,0x017fcc01,0xf701ef88,0x07a807f7,0x102f9800,
    0x8817a05f,0x7c40004f,0x00026c01,0x40017dc0,0x5400003f,0x007ea007,
    0x06e80274,0x4407fa20,0x44fe80ee,0xffd800fc,0x00077401,0x7ff500db,
    0x80007a80,0x207d405e,0x07dc00fa,0x803f1000,0xe800004d,0x007f0005,
    0x4007a800,0x00fa805e,0x01dd0000,0x47fd0bb0,0xff1002f9,0x0007e403,
    0x3f2003f5,0x0003d403,0x13a007e2,0x03f100d9,0x200fc400,0xf800004d,
    0x007f0002,0x4007a800,0x027401fa,0x01fa8000,0x47fb13e0,0x0fe4006b,
    0x64003f98,0x00fe6006,0xf98000f5,0x3646c800,0x00017c40,0x04d803f1,
    0x002f8000,0x800007f0,0x05e8007a,0x000003ea,0xf70013e2,0x0bb17ec1,
    0xd701fa80,0x4009b000,0x13d403f8,0x039dfd95,0x3e6003e6,0xf9007ea0,
    0x677edcc0,0x9b007e22,0x01effedc,0x66fe6654,0x202ccccc,0xccccb83f,
    0x000f5003,0x813a01f5,0x04ccccb8,0xe8000fa8,0x04d8bf22,0x3d80fcc0,
    0x4004e800,0xe8bd403f,0x3fecbbdf,0xfc801f88,0xbf102fc2,0x2eb3bf20,
    0x803f15fd,0xbbdfe8cd,0x3b600dfe,0xeeeeefee,0x10fe04ee,0x01bdfffb,
    0x3a000f50,0x2600fa84,0x807eeeee,0x4990006c,0x001721fc,0x30be03f7,
    0x01720599,0x7d403f88,0x9f900de9,0xff9807d0,0x7116fd42,0x05f901dd,
    0x007e7ba2,0xf301bfdb,0x0017c00b,0x0dfa83f8,0x8003d400,0x002740fa,
    0x02ec03d4,0x87f26b80,0x3f6000fa,0xff70f881,0x7b81dfdd,0x500fea00,
    0x5f500bff,0xbd100fc8,0xbfff307d,0x3f701bff,0x803ffb00,0x07dc05fd,
    0xf0002f80,0x0004fb87,0x274000f5,0xf50001f5,0x20007d00,0xf883ee7a,
    0x03ff3004,0xd113eaf5,0x8027c41f,0x7fd403fe,0xdb0fb000,0x09d5e881,
    0xbffddfd1,0x7c400fe0,0x4036c01f,0x05f002f8,0x3fc8fe00,0x001ea000,
    0x00bd0fa8,0x0fe01ea0,0xfb87cc00,0x2601fd40,0xaf981fee,0xf717a02f,
    0x03fed805,0xf1001fd4,0xdbdfe883,0xf987d0ef,0x30774c0c,0x01fc800f,
    0x03e8026c,0x3e0005f0,0x0002fd8b,0x3a0003d4,0x50001fac,0x0009b00f,
    0xc80fa9ea,0x6fdc41df,0x09ff01f9,0x67ec1f98,0x1fc774c0,0xf0007ea0,
    0x39db5107,0x07f30fc4,0x0016e6d8,0x04d803f5,0x0be007d0,0x17f67c00,
    0x003d4000,0x0017bea0,0x05c807a8,0x01c4b900,0xfffdffd3,0x37407e67,
    0xffa82f80,0x7f0dffef,0x4000fa80,0x0f98004d,0x47e20172,0x0fcc004e,
    0x1f401360,0xf0002f80,0x0001fbbf,0xe80007a8,0x1ea0001f,0x6c001ae0,
    0xbca98003,0x3d80fcc1,0x26209d00,0x01fc0acb,0x7d0003ea,0x3e8d7000,
    0x01367b00,0x4d803f50,0x3e007d00,0x6cbf0002,0x1ea0000f,0x0017a000,
    0x5f300f50,0x001f9800,0x701f9800,0x000fa00b,0x17d403f8,0x1000be00,
    0x9002f8bf,0xf7001aab,0xd004d803,0x000be007,0x003b61fc,0x20003d40,
    0x540001f9,0x800d9007,0x3000006d,0x003ea03f,0x7c4000be,0x0027d402,
    0xfd8001f5,0x4e801f40,0x7f4001f1,0xe8026c01,0x0005f003,0x003ba0fe,
    0xb0001ea0,0x0f50000b,0x54013e20,0x3000001f,0x2027403f,0xf50000fb,
    0x02ffa801,0x5c004f88,0x9806c82f,0x5c01ba2f,0x026c01ff,0x05f003e8,
    0x3a20fe00,0x03d4000e,0x0003f300,0x7dc00f50,0x2217d404,0x4c0004fd,
    0x407e201f,0xf10003f8,0x3f9f500d,0x10036c40,0x13e209fb,0x27445e88,
    0x007f3ea0,0x00fa009b,0x3f80017c,0x4001dd10,0x1760007a,0x003d4000,
    0x4c42bbea,0xfffc83fc,0x07e60001,0x2a25bf50,0x544000ef,0x32aa00ee,
    0x54439f97,0x310a81ef,0xfa805ff7,0x03bea21e,0xc9827be2,0x41abf8af,
    0x502aeeaa,0xaa835bf5,0xaaaacfaa,0x7d5440aa,0x55df7103,0x2aaaaa61,
    0xaaaaaafc,0xffffff30,0x53005fff,0x57f95555,0x22015555,0x2cfffffe,
    0x001fff70,0x7fffffd4,0x3ffae06f,0x7f4405ff,0x00dfffff,0xeb9fffe2,
    0x104fffff,0x19dfffff,0x3fffa200,0x7ecc04ff,0xf11effef,0x7ffc4dff,
    0x7fcc0fff,0x3fe66fff,0xffffffff,0x7ffe42ff,0xfffff903,0x3fffff27,
    0xffffffff,0x55555512,0xf9001555,0xffffffff,0x8805ffff,0x173001b9,
    0xaaaa8800,0xa8802aaa,0x5555000a,0x20000155,0x98009ba8,0x5440001a,
    0x5cc0009a,0x0000000a,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x000c0000,0x2e600000,0x000000ab,0x01100000,0x64c00000,
    0x540ccccc,0x00cccccc,0x5c000017,0xcccccccc,0x333264cc,0xaccccccc,
    0xcccca800,0x999500cc,0x00001999,0x99999995,0x99999999,0x2601ca81,
    0xb98007ec,0x710cdffe,0x7f7ffdc0,0x7f64403f,0x00532dff,0x5c417ff4,
    0x00dffffe,0xbdffb730,0xfdb30e25,0xeea83bdd,0x5f00defe,0x77640000,
    0xeeeffeee,0x3bffb664,0x3ffeeeee,0x777ff540,0xfddd500d,0x3f2601bd,
    0xefc82ccf,0xeefeeeee,0x361feeee,0x3f262fff,0x22007def,0xfcaabdff,
    0xbf907baf,0xa82fdc45,0xfdbaacff,0x7f7005dd,0xacffd85f,0x202feba9,
    0xcbacefe8,0xf707cefe,0x2007cc00,0x8000002f,0x80b9006c,0x0fa805fb,
    0x7007d400,0x03dd77df,0x441ea0d9,0xdffff11f,0x07a8df7c,0x5c01bd10,
    0x02fc87ff,0x19f30fe6,0x2017fe60,0x4f85f3f8,0x7440fec0,0x1ff6200e,
    0x1f3003dc,0x00002f80,0xb9006c80,0xf007f300,0x405d8007,0x41b2004e,
    0x743f107a,0x3d404fff,0xb802f440,0xb804f87f,0x2e01b60f,0x3e6c805f,
    0x2f4017c2,0x0fd002f4,0x0f9801ee,0x000017c0,0x5c803640,0xd900d700,
    0x5017c400,0x8364001f,0x4c3f107a,0x3d400cfd,0xd0007ec0,0x8800fa8f,
    0x7400be2f,0x5f17cc05,0x47b800c8,0x1ea000fc,0x1f3003dc,0xcdfccc88,
    0x02cccccc,0x9006c800,0x003e600b,0x1ee003f3,0x6c800f70,0x07e20f50,
    0xf807a800,0x04354003,0x07e27f00,0x1b601d40,0x3e60005f,0x06000fe0,
    0x1f3003dc,0xeefeeea8,0x05eeeeee,0x9006c800,0x401ae00b,0x809d004e,
    0x172001f9,0x01f883d4,0xf301ea00,0x10000000,0x0001fc3f,0x017c1fa8,
    0x03e67b80,0x007b8000,0x05f003e6,0x0d900000,0x3a201720,0x300f7003,
    0x00bb001f,0x207a814c,0x03d40003,0x00000172,0x03f91f20,0x5f09d000,
    0x7b93a000,0x03dc0000,0x2f801f30,0x6c800000,0xe980b900,0x05f1000f,
    0x3f1005c8,0x00f50000,0x203d4000,0x0000004e,0x67ec17d4,0x01f70001,
    0xfe98005f,0x00001361,0x07cc00f7,0x00000be0,0x6e401b20,0xfdca9999,
    0x02ec000e,0x3f2005f1,0x07a80006,0x01ea0000,0x0000007d,0xfb5027cc,
    0x880159df,0x2005f03f,0x2740efc9,0x01ee0000,0x17c00f98,0x36400000,
    0xfffffc80,0x50002eff,0x201ee01f,0x443fbfe9,0x00f5004c,0x203d4000,
    0x0000003e,0x26200bf3,0x900effdb,0x6c017c0d,0x009d02ef,0x2007b800,
    0x017c00f9,0xd9000c80,0x26677200,0x0000efb9,0x402740fa,0x641f70de,
    0x00f5004f,0x2006ff54,0x0027407a,0x02fcc000,0x307fa600,0x4017c05f,
    0x2027404f,0xdeeeeeed,0xf3003dc1,0x8002f801,0x0d9001f8,0x7f4c1720,
    0x30d70001,0x41f9803f,0xa8013a5d,0x3fffe007,0x3603d404,0x54000005,
    0x3600005f,0x0be02f47,0x0bb00fe0,0xfeeeeec8,0x3003dc1c,0x002f801f,
    0xd9001f88,0xd8817200,0x1f88000f,0x435c0364,0x001f9af9,0x7fc401ea,
    0x03d405ff,0x800001f2,0x400004fa,0x559f51f9,0x59f55555,0x35c01b80,
    0xf983d400,0xf00f7000,0x03f10005,0x2e401720,0xd8003740,0x36401fc5,
    0x4005dfb8,0x3ff6007a,0x203d402f,0x800001f9,0x01b804fa,0xfffa9fc0,
    0xffffffff,0x7d40002f,0xf03d4000,0x201ba005,0x1f88002f,0x32009f00,
    0x003f9805,0x01f50fa8,0x3fa03f70,0x003d4002,0x1ea002e6,0x26001b60,
    0x2009f700,0x017c004e,0x40000be0,0x3d4004f8,0x7f100d90,0x10007f00,
    0x05f3005f,0x7dc01720,0xbb3f8000,0x2213e200,0x3d4002fe,0x0f500000,
    0x5c009f10,0x003fb82f,0x7d4003fa,0x0017c000,0x4005f500,0x813e607a,
    0x0fb006f9,0x02fe8510,0x5c8017a2,0x20017a00,0x2002f8ec,0xbdd31dfb,
    0x1ea0055d,0x07a80000,0xc801bf30,0x003fc84f,0x7cc02ff4,0x202f8004,
    0xc803ffd8,0x80f5003f,0x3ea21ef9,0x5bf3001f,0x07fed441,0x544277f2,
    0x554400ee,0x5402aaee,0x3e6002bf,0xffb8007d,0xfff88eff,0xfcaaa980,
    0x0000aaaa,0x7d400f50,0x3f6e21be,0x9002fc82,0x02ffb7a5,0x2000df91,
    0x3fff202f,0xaefb800f,0x807fd981,0xdfffffe9,0x7ff54000,0x00befffe,
    0x9fffffd5,0x3fffea00,0x7ec00fff,0x13fa001f,0x00dd4400,0x3fffffa0,
    0x8003ffff,0xafcaaaaa,0x9100aaaa,0x1bffffff,0x5555bf10,0x7f555555,
    0x77ffe4b6,0x22003fff,0x80acfaaa,0x2006fffa,0xffefffe9,0x544002ef,
    0x540000ab,0x44001aba,0x00000aba,0x00000000,0x00000000,0xfffd1000,
    0xffffffff,0x03753009,0xffffff88,0x3fffffff,0x026aea60,0xfffff700,
    0x02f2605f,0x4d5d4c00,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x99100000,0x32059999,0x913ccccc,0x2a019999,
    0x3263cccc,0x40cccccc,0x223ccccb,0x500ccccc,0x66479999,0xcccccccc,
    0x333222cc,0x666541cc,0x3332e0cc,0x1bcccccc,0x99999910,0x99999999,
    0x33326199,0xcccccccc,0x3220cccc,0xcccccccc,0xcccb800a,0xcccccccc,
    0x33333261,0x02bccccc,0x99999930,0x65400059,0xddddfb11,0x3fbbb205,
    0xbdffb13e,0x3bfbae01,0x3bffb663,0x7ff640de,0x3bfb624e,0xdffd501d,
    0x77777647,0x23eeeeef,0x41deffd9,0x20defeda,0xeeeefeec,0x441effee,
    0xeeeefeed,0xfeeeeeee,0xddffdb30,0xdddddddd,0x77f6c43f,0xeffeeeee,
    0x3bbbf600,0x2feeeeee,0x3bbffb66,0x0dffeeee,0x77776cc0,0xfb0006ef,
    0x002745ff,0x03f982f8,0x05c80dd0,0x3e204fa8,0x200bd004,0x0172007a,
    0x03f101f4,0x7b80ff4c,0x3203e600,0x303f1005,0x17f4c03f,0x1fa804d8,
    0x75c40bb0,0x46ec000f,0x7fc4001f,0x001765ff,0x0fdc07e2,0xb9003f20,
    0xa804fb80,0x007e401f,0x172007a8,0x3f101f40,0xf701db00,0x6407cc00,
    0x303f1005,0x01f9003f,0x04f8809b,0x17e20176,0x0bb2f880,0x49fffd00,
    0x1015506c,0x8076c03f,0x05c802fa,0x6d800ff2,0xa800be60,0x40172007,
    0x007e203e,0x01ee0be2,0x05c80f98,0x3f303f10,0x13617a00,0x05d80dd0,
    0x3dc00f90,0xe98001f5,0x7c1ae0cf,0x200f984f,0x04f985e8,0x0bf20b90,
    0x3a09f100,0x003d4005,0x80fa00b9,0x09b001f8,0x07c400f7,0x0f8802e4,
    0xf3001f98,0x3ee04d85,0x9802ec00,0x449d000f,0x2a00003f,0xa86df987,
    0x223f9807,0x2172005e,0xf50001fd,0x4000fb83,0x0172007a,0x03f101f4,
    0x41ee13a0,0x282e4001,0x8007e600,0xf9815c5d,0x9005d803,0x907e200d,
    0x7cc0000d,0x207cf640,0x23f7006b,0x972000fd,0x40001ee8,0x000fe66d,
    0x05c801ea,0x0fc407d0,0x3dc17c40,0x172002f8,0x7cc003e2,0x801ee001,
    0x00bb005e,0x1ae009f3,0x400007e6,0x3fa741f8,0x9f9002e4,0x15c8003f,
    0x100001fd,0x40017a7f,0x0172007a,0x03f101f4,0x0f701fb0,0x85c800be,
    0x3f3001f9,0x4007cc00,0x0bb000fc,0x8017ee62,0x0009d03e,0x25f117c0,
    0x20026c5d,0xdc8003fe,0x001efff9,0x00fcfb80,0x6400f500,0xffffffff,
    0x3e203fff,0x40bfa201,0xfffffffb,0x3fff2002,0x3001ffff,0x0fcc003f,
    0xd800bea0,0xffffffff,0x03e6005f,0xf00003dc,0x47a87d47,0x3fa2003e,
    0x5fec8004,0x00009ff5,0x540007fb,0x2abb2007,0xfaaaaaaa,0x2ab3e203,
    0x02efecba,0x333333ee,0x33b2002f,0x001fdccc,0x7cc003f3,0x0013e201,
    0x999999db,0x9001bfdb,0x4017c40d,0x4e84fffc,0x3e1f8976,0x3efb6003,
    0x227e4002,0x40002fc8,0x2a0000fa,0x40172007,0x3ffe203e,0x802defff,
    0x4005f07b,0x001f985c,0x7cc003f3,0x2001b600,0x2fd8805d,0x17601fc0,
    0x203fffa0,0x49d0fe4d,0x23f7002f,0x172001fc,0x20000fb8,0x3d40007a,
    0x3a00b900,0x0007e203,0x007a0f70,0x00f885c8,0x5c003f30,0x0807ee06,
    0x3e400bb0,0xffffff50,0x401fffff,0xb903fff9,0x22d907e6,0x43f9801f,
    0x0b9000ee,0x2a0006e8,0x03d40007,0x0fa00b90,0x40001f88,0xb900007b,
    0x7cc14400,0x4c136001,0x203e203f,0x07e2005d,0x555556ec,0x203faaaa,
    0x5ae06ffb,0xf98f987b,0x442fc400,0x80b9005f,0xf50002f9,0x007a8000,
    0x01f40172,0xb80003f1,0x0b900007,0x0fcc3d40,0x17a07f00,0x0bb01f30,
    0x1f884e80,0x7f40d900,0x275ea01f,0xd807aaf8,0x200fe606,0x005d805c,
    0xa8000f50,0x40172007,0x007e203e,0x0000f700,0x87a80172,0x1fb001f9,
    0xf9801f90,0x7c005d80,0x26007b83,0x04ff881f,0xd817c7cc,0x07e406bd,
    0xb9007ee0,0x0003f500,0x7a8000f5,0x74017200,0x0007e203,0x20000f70,
    0x21ea005c,0x1fb801f9,0xf9802fa8,0x2a005d80,0x4004e81f,0x00ffa84e,
    0xb807e7c4,0x0bea05cf,0xb9007ec0,0x20013a00,0x3d40007a,0x3a00b900,
    0x0007e203,0x20000f70,0x21ea005c,0x3f2201f9,0x3004f882,0x200bb01f,
    0x01f985f9,0x17ec3dc0,0x2206ff80,0xefa885ff,0xf75300aa,0x76d5445b,
    0x2bee02aa,0x9555300a,0x2015557f,0xafcaaaaa,0x2aa1aaaa,0x5440aaed,
    0x2a61adfa,0x1aaaacfb,0xaafdaa80,0xa8800aaa,0xaaaaaeea,0x47caaaaa,
    0xaaaabfba,0xf502ffeb,0x55555557,0x2a21f755,0xaaaaaeea,0x444fecaa,
    0x202aafda,0x22bfbaa8,0x13fe0039,0xff709fd0,0x3fa07fff,0xff51ffff,
    0x201fffff,0xfb04fff8,0xffffffff,0x3ffffa07,0x4fffffff,0x5ffffff1,
    0x6fffffb8,0x3ffffffa,0x7fcc06ff,0x3fffffff,0xfffffa80,0xffffffff,
    0x3ffe67ff,0xacefffff,0x3fffea00,0xffffffff,0xfffff50f,0x9dffffff,
    0xfffff703,0x3ffee03f,0x00001fff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xcc800000,0x332a02cc,
    0x9910cccc,0x32600199,0x3332a4cc,0x004ccccc,0x1a854000,0x14400000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x76c40000,0xdb500ffe,
    0x3621bdfd,0xfb004ffe,0x7775c9df,0x005eeefe,0x23fd5000,0x00000cfd,
    0x51000f50,0x2a5bdfd9,0x7ff65400,0x4c0330ce,0x01ceffec,0x677f6dc0,
    0xfd971002,0x64c03bdf,0x45bfb53c,0x2602dfd9,0x3ff6e3cc,0x7fe400bd,
    0x17bea06f,0x7dc07e20,0x57cc00fb,0x0035c01f,0x37f66000,0x001ffdc1,
    0x2003d400,0xfdbacefb,0xfb102fef,0x7fd9759b,0x33bee09d,0x804fecab,
    0xecabdfe9,0x3ff200df,0x3ffdbacd,0xbf9ddd50,0x7df53fd7,0x3fae05fb,
    0xebbdfd8d,0x3ffa00ef,0x3ebea01f,0xb80fc401,0x8ec807f7,0x0035c01f,
    0x1efc8800,0x00bbf220,0x2007a800,0x3fa604fa,0x201ef882,0x2fe84ffb,
    0xfa81baa0,0x01fd300d,0x03f900a6,0x3fa1ffdc,0x3202e44f,0x5e980eee,
    0x80bfff10,0xf880db7a,0x81b2f701,0x401f8af8,0xb800006b,0x322002ff,
    0xa80001ef,0x201b6007,0x006d82f9,0x01fb89f9,0x4f884f88,0x0005e880,
    0x4fb813e2,0x0f985fb8,0xb803bf20,0x1fffb80f,0x03f8bd40,0x8bdc07e2,
    0x3e2f702f,0x00035c01,0x0007ff50,0x0006fecc,0x7e400f50,0x7d40c800,
    0xf993a001,0xb07e6002,0x01fcc00d,0x35c0d900,0x1f880f98,0xf1003b20,
    0x009ffb07,0x8807e4f5,0x2ecf701f,0x803f13e8,0xe980006b,0x500000cf,
    0x500019fd,0x06fcc00f,0x2002ec00,0x2001ee19,0x0007e23e,0x364000b9,
    0x03e60d70,0x05c807e2,0x1fff07d0,0x04e8f500,0x99ee03f1,0xf887d41f,
    0x00035c01,0x0003bfb3,0x00ffee00,0xe9800f50,0x401acdef,0x7640003e,
    0xaaaaaaaa,0x2a5daaaa,0x83dc000f,0xdeffedb8,0x41ae06ec,0x01f880f9,
    0x21f40172,0xf5004ff9,0x1f881fa8,0x6c4e8f70,0xd7007e25,0x5df91000,
    0x91000000,0x666445df,0xcccfdccc,0x2ea03ccc,0xf04fffec,0xffd80005,
    0xffffffff,0x1ae6ffff,0xf703e600,0xd97579bf,0x9835c0df,0x201f880f,
    0xc87d005c,0x0f5000ff,0x203f10db,0xf987d47b,0xd7007e21,0x07ff7000,
    0x6c400000,0xdddd50df,0xddddfddd,0x22001ddd,0x17c0eeca,0x00172000,
    0x2a001ea0,0x0033ee0f,0x9835c0d9,0x201f880f,0xe87d005c,0x21ea003f,
    0x80fc42f9,0x8d93e87b,0x035c01f8,0x02efc880,0x3f220000,0x01ea002e,
    0xd13a2000,0x07b80009,0x000f9800,0x00bf135c,0x306b81b2,0x403f101f,
    0xd87d005c,0xc83d4005,0x5c07e20f,0x42f8fb87,0x035c01f8,0x077f6200,
    0x7ff70000,0x200f5000,0x91ea0049,0x2f98000d,0x003f8000,0x001f52f4,
    0x306b81b2,0x403f101f,0x007d005c,0x3e20f500,0x3dc07e24,0x7c43f7c4,
    0xb8035c01,0x033fa603,0x19fd5000,0x401ea000,0x8f9000fb,0x322003f9,
    0x00003f21,0x3f2003f7,0x74c01ee0,0x7cc1ae06,0x3201f880,0x0007d005,
    0x8fd40f50,0x20f701f8,0x01f883fc,0x05d8035c,0x000cfea8,0x0006ff4c,
    0x7dc01ea0,0xb85f9804,0x0ffa802f,0x64400774,0x5c01ed86,0x201fcc3f,
    0x1ae06ffb,0x0fc407cc,0x0fa00b90,0xd01ea000,0x3dc07e2b,0x200fc400,
    0x00bb006b,0x4401ffdc,0x00001efd,0x3fee00f5,0x775c40ae,0x413bfb00,
    0x881efda8,0x65441cfd,0xcfd882ef,0x40ff6621,0x3ae61bfd,0x10aaecbf,
    0xf9835fb5,0x2167c42b,0x302aedaa,0x00015bf5,0x2be603d4,0x00f701f8,
    0x6b803f10,0x8800bb00,0xfc882efc,0x5400002e,0xfb1b5007,0x19fffdff,
    0xfeffea80,0xfb802eff,0x3efffeff,0xfefffb80,0x3f2201ef,0x90dfffff,
    0x3fee7fff,0x7ffcc6ff,0x447ffe20,0x80ffffff,0x003ffffe,0x3b201ea0,
    0x00f701f9,0x6b803f10,0x2000bb00,0xff50dfd8,0x2a000007,0x95310007,
    0xa9800135,0x880009ab,0x30001aba,0x44001575,0x00001aba,0x00000000,
    0x807a8000,0xf701fdf8,0x803f1000,0x00bb006b,0x19b1d980,0x2c400000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xca880000,0xf700aaaf,
    0xafda883f,0x755100aa,0x5554c59f,0xaaaaaafd,0x0005eaaa,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x7d400000,0x202fffff,
    0x7ffd41fe,0xff702fff,0x3f23ffff,0xffffffff,0x15ffffff,0x2e207997,
    0xcca82ccc,0x665c01cc,0x332e21cc,0x5eed442c,0x1e666440,0x21e66644,
    0xccccccca,0x32a1cccc,0xc883cccc,0x001ccccc,0x40180000,0x3a65eeea,
    0x26620eee,0x99999999,0x00019999,0x00000000,0x40000000,0xd305fee9,
    0xfdb09fdd,0xeed807dd,0x3bba23ef,0x337fea4f,0x3ffaa0fe,0x7f74c0de,
    0x3bbf60df,0xfeeeeeee,0x3bbffb63,0xefeee985,0x803e202e,0x5c03fffe,
    0x3ffea00f,0x89fffe25,0xffffffff,0xffffffff,0x0037faa6,0x00000000,
    0x80000000,0x209d005c,0x3dc000f9,0x0dfca6c0,0x00fec1ec,0x01760bee,
    0x03ea0bd1,0x4c007dc0,0x3fff600f,0x81bfe602,0x7fc4fff9,0x55554c6f,
    0xaaaaaaaa,0x3ffa0aaa,0x0000004f,0x00000000,0x40172000,0x005f104e,
    0xddd805d8,0x1fc8003f,0x17605f90,0x3a00ee88,0x2009d004,0x3ff200f9,
    0xf1bf101f,0x21fffc0b,0x00005ffe,0x0bffff10,0x00000000,0x00000000,
    0x04e802e4,0x207ae0fa,0x1ffd803e,0x90bf2000,0xb015405f,0x00fb801d,
    0xf98007d4,0x03ffee00,0x207f3374,0x7fec2fff,0x36000003,0x00002fff,
    0x00000000,0x17200000,0x0b902740,0x01f889ff,0x80000ed8,0x003f92fc,
    0x44007ec0,0xd82ec03f,0x221f30ad,0x0fff34da,0x03f703f2,0xffc83ffb,
    0x4c000002,0x0000000b,0x00000000,0x802e4000,0xf31ea04e,0x800f98f9,
    0x2e00004d,0x20001fdf,0x1b2001fc,0xfd501f98,0xffb9f9bf,0x21bfe25b,
    0x81fb02fa,0x1ffa87fc,0x3fffffe2,0xffffffff,0x000006ff,0x00000000,
    0xb9000000,0xf9813a00,0xb8be3b21,0x0009b006,0x0004fe80,0xf1000bee,
    0x2201b205,0x0bdfffdb,0x27cc5ff8,0x0df71ba0,0xaaa81ff3,0xaaaaaaaa,
    0x001aaaaa,0x00000000,0x00000000,0x13a00b90,0x4d9fc5f0,0x026c0136,
    0x7f9fb000,0x007f5000,0x0be21b60,0x00eff880,0x00bd0ffa,0x42fcc9f1,
    0x000007f8,0x00000000,0x00000000,0x40172000,0xf9a6c04e,0x8017cf70,
    0xfb00004d,0x9800fee3,0x3e60004f,0x36003dc1,0x3f604f9e,0x298005c2,
    0x201a805c,0x00080018,0x00000000,0x00000000,0x13a00b90,0xf8972d70,
    0x9b001f8a,0x0ed88000,0x7c401fd4,0x2f400405,0x1fb800fa,0x03aa05f5,
    0x40000000,0x8202fffd,0x000002fa,0x00000000,0x7b800000,0x4c04fb80,
    0x56ec3f8f,0x00136007,0xf500ee88,0x202f4409,0x50fa806b,0x0fe6001f,
    0x000001f9,0xafd80000,0x2f884fc8,0x00000ff2,0x00000000,0xf5000000,
    0x027fec05,0xf503f3e2,0x026c00b9,0x400ee880,0x01dd04fa,0x29d006b8,
    0x4176005e,0x0000004e,0x507f2000,0x5c3744bf,0x0000004f,0x00000000,
    0x17740000,0x5bd5fd73,0x442ff401,0x2aa604ff,0xaaaaadea,0x57fd501a,
    0x33f6aa05,0x2aaaff61,0x06daaaaa,0x003f7f70,0x00002004,0x0a800000,
    0x19fbdd30,0x00017ea0,0x00000000,0x88000000,0x0dfffffe,0x7e407ffd,
    0x7405fb03,0xffffffff,0xff884fff,0x7cc0efff,0x3fe6ffff,0xffffffff,
    0xff1006ff,0x0000000d,0x00000000,0x40065c40,0x00000059,0x00000000,
    0xbba80000,0x00000001,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_39_usascii_x[95]={ 0,8,4,3,3,3,4,8,10,5,0,2,5,3,
7,3,3,3,2,3,3,3,4,3,3,4,7,5,0,1,0,0,3,0,1,2,2,1,2,2,1,3,2,1,
2,0,0,0,3,1,1,3,2,1,0,0,1,1,3,0,0,0,3,1,7,2,0,2,2,2,3,2,1,3,
3,3,3,0,1,2,0,2,2,3,2,1,0,0,1,2,3,0,9,0,3, };
static signed short stb__courier_39_usascii_y[95]={ 28,6,7,5,5,6,9,6,6,6,6,9,22,17,
23,4,6,6,6,6,6,6,6,6,6,6,13,13,9,14,9,7,6,8,8,7,8,8,8,7,8,8,8,8,
8,8,8,7,8,7,8,7,8,8,8,8,8,8,8,6,4,6,6,36,5,12,6,12,6,12,6,12,6,6,
6,6,6,12,12,12,12,12,13,12,8,13,13,13,13,13,13,6,6,6,15, };
static unsigned short stb__courier_39_usascii_w[95]={ 0,5,13,15,14,15,14,5,6,6,13,17,8,15,
6,14,14,14,15,15,14,15,14,14,14,14,6,8,17,18,17,13,14,21,18,17,18,18,18,18,19,14,19,19,
17,21,20,18,16,18,20,15,17,19,21,20,19,18,15,6,13,6,14,21,7,17,19,17,19,17,16,18,19,15,
11,17,15,21,18,17,19,19,17,15,17,18,20,20,18,18,14,8,3,8,15, };
static unsigned short stb__courier_39_usascii_h[95]={ 0,23,10,26,27,23,20,11,27,27,14,18,12,3,
6,27,23,22,22,23,22,23,23,23,23,23,16,19,18,8,18,22,25,20,20,22,20,20,20,22,20,20,21,20,
20,20,20,22,20,26,20,22,20,21,20,20,20,20,20,27,27,27,10,2,6,17,23,17,23,17,22,23,22,22,
29,22,22,16,16,17,23,23,15,17,21,16,15,16,15,22,15,27,27,27,6, };
static unsigned short stb__courier_39_usascii_s[95]={ 255,1,210,126,71,157,215,189,93,100,175,
98,245,157,243,35,224,1,34,239,66,193,27,209,96,81,248,247,62,224,80,
81,142,225,206,16,171,152,133,95,96,81,152,42,44,22,1,237,116,107,172,
50,230,114,193,1,22,62,190,50,57,86,195,173,240,186,61,132,111,150,151,
42,131,221,1,168,186,204,226,168,173,7,102,116,134,62,154,81,120,202,139,
26,22,13,224, };
static unsigned short stb__courier_39_usascii_t[95]={ 1,31,118,1,1,1,55,118,1,1,118,
99,99,25,118,1,1,55,55,1,55,1,31,1,31,31,55,78,99,118,99,
55,1,78,78,55,78,78,78,55,78,78,55,78,99,99,99,31,78,1,55,
55,55,55,55,78,78,78,78,1,1,1,118,25,127,99,31,99,31,99,31,
31,31,31,1,31,31,99,99,99,1,31,118,99,55,118,118,118,118,31,118,
1,1,1,127, };
static unsigned short stb__courier_39_usascii_a[95]={ 331,331,331,331,331,331,331,331,
331,331,331,331,331,331,331,331,331,331,331,331,331,331,331,331,
331,331,331,331,331,331,331,331,331,331,331,331,331,331,331,331,
331,331,331,331,331,331,331,331,331,331,331,331,331,331,331,331,
331,331,331,331,331,331,331,331,331,331,331,331,331,331,331,331,
331,331,331,331,331,331,331,331,331,331,331,331,331,331,331,331,
331,331,331,331,331,331,331, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_39_usascii_BITMAP_HEIGHT or STB_FONT_courier_39_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_39_usascii(stb_fontchar font[STB_FONT_courier_39_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_39_usascii_BITMAP_HEIGHT][STB_FONT_courier_39_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_39_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_39_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_39_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_39_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_39_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_39_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_39_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_39_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_39_usascii_s[i] + stb__courier_39_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_39_usascii_t[i] + stb__courier_39_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_39_usascii_x[i];
            font[i].y0 = stb__courier_39_usascii_y[i];
            font[i].x1 = stb__courier_39_usascii_x[i] + stb__courier_39_usascii_w[i];
            font[i].y1 = stb__courier_39_usascii_y[i] + stb__courier_39_usascii_h[i];
            font[i].advance_int = (stb__courier_39_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_39_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_39_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_39_usascii_s[i] + stb__courier_39_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_39_usascii_t[i] + stb__courier_39_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_39_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_39_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_39_usascii_x[i] + stb__courier_39_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_39_usascii_y[i] + stb__courier_39_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_39_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_39_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_39_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_39_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_39_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_39_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_39_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_39_usascii_LINE_SPACING
#endif

