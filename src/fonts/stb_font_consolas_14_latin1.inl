// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_14_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_14_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_14_latin1_BITMAP_WIDTH         256
#define STB_FONT_consolas_14_latin1_BITMAP_HEIGHT         72
#define STB_FONT_consolas_14_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_14_latin1_FIRST_CHAR            32
#define STB_FONT_consolas_14_latin1_NUM_CHARS            224

#define STB_FONT_consolas_14_latin1_LINE_SPACING           9

static unsigned int stb__consolas_14_latin1_pixels[]={
    0x00002211,0x71eee8ee,0xb10009dd,0x200f6a1d,0x0389c408,0x18607b71,
    0x0654002e,0x14c002a2,0x08cc0350,0x41400c30,0x029800a8,0x00018035,
    0x2030c022,0x5303ccb9,0x19804660,0x745b2d81,0x1b60b500,0x6441e4ba,
    0x819b04ff,0x216401e9,0x5d10d369,0xf3798b73,0x075400f4,0x74c00eb8,
    0x505db901,0x7981ddb9,0x706880f3,0x40f4c01d,0x41e02edc,0x6544ffea,
    0x879bcc0d,0x986cdffc,0xeedca81e,0x0776e540,0x85b8b65b,0x974001f9,
    0xe98cd83c,0x09701f84,0x2d8001d8,0x01e80074,0x88011000,0x04018600,
    0xbff91000,0x01100440,0x7f644186,0x222bea0e,0x000e5dc2,0x1aafffe2,
    0x20020022,0xe85b2d80,0x3bb21f43,0x8792e84e,0x3e07cc79,0x3aa09700,
    0x598b30ef,0x9dccc5a6,0xdaebcc79,0x598b30df,0x4427fe44,0xfc884ffc,
    0x4ffc884f,0xd84ffc88,0x1e63fd8c,0x2f31e6f3,0x79d3cc79,0x4017c13b,
    0x30df102b,0x88d57fff,0x21be206f,0x2d9a64f8,0x1aa7985b,0x3a172662,
    0xf85b8792,0x70b503c1,0x17c13f3d,0x6f4ddcb9,0x798f33ad,0x7c9b15fd,
    0x119b1722,0xe88cd89d,0x274466c4,0xb13a2336,0x3cc9d119,0x263ccf5f,
    0xf3798f37,0x773f1798,0x7f540798,0x80fdb84f,0x5c6abffe,0x1fb700fd,
    0x4d30ff88,0x23f05b2d,0x742dc04d,0xf85c8792,0x74409951,0x21a27e1b,
    0xd9d87e5c,0x8f34acba,0x93545d79,0x98f30fcb,0x0f98f30f,0xf30f98f3,
    0x98f30f98,0x7d2ab70f,0xf3798f30,0x798f3798,0x0f50b7ba,0xd85f3198,
    0xbfd883da,0x81ed6c6a,0x6fc43dad,0x0996cd33,0xb807d3d8,0xb8792e85,
    0x07b71f85,0x31f12cc8,0x8d31f30b,0x3abc8f8e,0x43d798f3,0x1a63e669,
    0x16e3f0b7,0x8fc2dc7e,0x0b71f85b,0xf965723f,0xf3798f31,0x798f3798,
    0x1f1177dc,0x1f126400,0x44d500d7,0x8f886b8f,0x9bcfc46b,0x29900b66,
    0x742dc02e,0x4c7a8792,0x216a0787,0x97d04aae,0x93b78e89,0x3af31e65,
    0x997d16a1,0xb91f85c8,0x3e1723f0,0x323f0b91,0x3ab71f85,0xf31e61f0,
    0x1e6f31e6,0x47f7d0f3,0x3bb2603e,0x07c56e4f,0xf15b9aa0,0x41f15b81,
    0x6cd37d78,0x03d9f402,0x3c9742dc,0xf07d14f8,0x3ee12e01,0x7f540acd,
    0x675f4f40,0x3af31e66,0xfea85d12,0xb87c2dc0,0xf0b70f85,0x5c3e16e1,
    0xb3f30f85,0xbcc799e6,0x479bcc79,0x64d77879,0x916c30bf,0x807d1ec9,
    0x43e8f66a,0x5788fa3d,0x2d96cd3d,0xb80b71f8,0x30792e85,0x03e09ffd,
    0xcefa825c,0x9ad85f80,0x51e61b8b,0x40ffffad,0x3cc7a85f,0x1ea798f5,
    0x9e63d4f3,0x3ba3cc7a,0x51e63e8b,0x26d51e6d,0xe998b547,0x7ffd44e9,
    0x8a74c7e4,0x406fffff,0xfffff14c,0x7ffffc4d,0x26ce9e26,0x26a85b2d,
    0x213200f9,0x1ec0792e,0x812e03d0,0x703f100e,0x3627f009,0x1f8803d4,
    0xf0fa29f0,0x29f0fa29,0xe8a7c3e8,0x43e8a7c3,0x3f84fff8,0xd89fc9b1,
    0x8a6c4fe4,0x7903effe,0x299bff70,0xd307c46a,0x11aa3f97,0x1f11aa1f,
    0x366fa9e2,0x217c45b2,0x17d4d45c,0x27325d33,0x43ddf980,0x0baa21dc,
    0x04e98878,0x305119f1,0x80f49ffd,0x3a604e98,0xffe984ff,0x84ffe984,
    0xe984ffe9,0x00e884ff,0xd313ffa6,0xffe989ff,0x0f404a84,0x0fa0f600,
    0x41ec1773,0x27d07b3e,0x25b37478,0x1f41762d,0xeee85bdb,0x2209dd71,
    0x50db882a,0x5c2c407b,0x6f64403d,0xb80ec002,0x0000003d,0x88000000,
    0x00000001,0x00000198,0x00000000,0x45b2d800,0x0000e204,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x80000000,
    0x0000592c,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x20015100,0xb80a8829,
    0x2026c401,0x5029801a,0xc8818603,0x510d404d,0x2a053001,0x4e20c301,
    0xb8372238,0x221c4e21,0x00b20713,0x0064c195,0x099d42a8,0x832a0017,
    0x064c1cda,0x16400000,0x801d715c,0x81d701e9,0x0655c05a,0x2602edc8,
    0x42edc81e,0xbf88f379,0x2e07c029,0x207a600e,0x9bcc2edc,0x3269b4c7,
    0x698b55bb,0x0d3698d3,0x3aa07b7b,0xc800ea80,0x437ff224,0x20ea801e,
    0x540fb9eb,0x4ffc880e,0x40dffd88,0x21f43dbd,0x20044008,0x2200f808,
    0x2018603c,0x000c3008,0x16a003e6,0x20110044,0xd8000061,0x000e8e8a,
    0x00000000,0xf5532640,0xe8000f43,0xcd8007e1,0x8a744e88,0x88fa004e,
    0x3e85d86f,0xc8fffff2,0x881be203,0xffff906f,0x1ffffe47,0x447ffff9,
    0x20f401ef,0x3a3ffffe,0x3fa3ffff,0x3ffa3fff,0x3b8763ff,0x20797bd5,
    0x7f543eec,0x83eec84f,0xeec83eec,0x44ffeb83,0x36ba6feb,0x3ffaa0df,
    0x2a2ec7e4,0x31e64ffe,0x47b1741f,0x23e8ee1d,0x0fcc0fdb,0x2204c8d7,
    0x403f6e07,0x04c80fdb,0x204c8132,0xd304fabd,0x07b01ec0,0xd07b01ec,
    0xd3332643,0x31f45720,0x15c8be63,0x3e8ae47d,0xb91f4572,0x46e49b13,
    0xb15fd2f8,0xf2f98cc9,0x26330b73,0x43f0b72f,0x3a0ebafa,0x363d9321,
    0x3e5c83da,0x0b602642,0xad81ed6c,0x3204c83d,0x1f813204,0x407b07d1,
    0xd80f603d,0x87a0f603,0x1f01e84c,0x7c9902d4,0x2a0f96a0,0x3e5a83e5,
    0x707c5321,0x206a8bab,0x01d73f4c,0x3f0b94c8,0x0f43ffc8,0x8f896c99,
    0x5baf886b,0xa8199dc8,0x86b8f886,0xdc86b8f8,0x4cee4199,0x20ccee41,
    0x788b70dc,0x07b01ec0,0xd07b01ec,0x2f322643,0x3fffe25f,0x3fbb266f,
    0xdfffff14,0x5bffffe2,0x36fffff8,0xa8f34c8f,0x9334c3d6,0x6c7e9fdd,
    0x3fbb261e,0x641f0b74,0x87a3fa8d,0x8adcb64c,0x81feb80f,0xe81eeefc,
    0x40f8adc1,0xfc81f15b,0x3bf21eee,0x3bbf21ee,0x1757e41e,0x407b012e,
    0xd80f603d,0x99321e83,0x3e25b68e,0x14c8b601,0x407e203f,0x41f101f8,
    0xd5b8f34d,0x645b2d43,0x5b3643f4,0x3cc7aa64,0x3d35c1f1,0x8f613264,
    0x3209d03e,0x1ec4b804,0x0fa3d87d,0x90264099,0xf0dd3009,0x3603d801,
    0x3d80f603,0x749f54c8,0x6ec59689,0x93a63f00,0x01bb00dd,0xb9f40376,
    0x9f44fa4f,0x8fc5d12e,0x3543f4e9,0x4f93a63f,0x362f87d1,0x727d5325,
    0xdfffff13,0x02640f60,0xfff887c4,0x3ffe26ff,0x902646ff,0x98026409,
    0x1ec02d47,0x01ec07b0,0x7bfd307b,0x46ed92e9,0x2e3fefd8,0x3624cdff,
    0x3f623fef,0x3bf623fe,0x2f3fea3f,0xc93ffa64,0x7fdc3fff,0xff93f4cd,
    0x266ffdc3,0xf509ffd3,0x7f4c1bff,0x1ab3e4bd,0x207b01f1,0x2a79004c,
    0x46a87c46,0xc81320f8,0xab813204,0x4016c5eb,0xd80f603d,0x0000f603,
    0x10000200,0x00040080,0x00000000,0x00080000,0x41f41ec0,0xffff903d,
    0x41eca207,0x47d07b3e,0x323ffffc,0x3f23ffff,0x332a3fff,0x7ff40282,
    0x3fffa3ff,0x3ffffa3f,0x0fffffa3,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00193050,0xa9819500,0x20e27101,
    0xb80000c9,0x2059018b,0x320018bb,0x6540000b,0x00000000,0x18bb80b2,
    0x203ffff2,0x3065402c,0xfb300019,0x7400003d,0xfff92744,0x21fec88f,
    0xd505984e,0x3fffb101,0xcfa81d50,0x0d36983f,0xffc803aa,0x85fbba83,
    0x5dd43dbd,0x17ffdc5f,0xfd505f95,0x201d509f,0x9ddb103b,0xb13ffaa0,
    0xf77507b7,0x40cce64b,0x1d503dbd,0xfd981d50,0x262be62f,0x1177f4c0,
    0x23c87ffb,0x2a6625f8,0x8866fa27,0x0bfd915f,0x00219d00,0x0016e7b0,
    0xe88dd800,0x40000002,0x1f503ea0,0x0144575c,0x17441e40,0x88afa8b9,
    0x0f200002,0x64000000,0x01361f52,0x13e8625f,0x3000443f,0xcd801ecf,
    0x70ec3ee8,0x1d807e27,0x07b4d8ee,0x9109dd91,0x20f889dd,0x27ff546c,
    0x9113ffaa,0x80f809dd,0x4403f11f,0x7f5c4eec,0x91773eee,0x017c3d1b,
    0x3b09dd91,0x0d6e49fb,0x75c1f75c,0x03eeb83e,0x2602e974,0x24c8f307,
    0xf9e6002d,0x2f301aa9,0x90f469d9,0x1e8176c9,0x04ef9932,0xd89d319b,
    0x9a64e98c,0xf98cc7fc,0xb17cc662,0x7109d319,0x1aa6b98b,0x49d319b0,
    0xb099cd98,0x277139b3,0x4c66c079,0x744f744e,0x41dfb951,0xc9884c98,
    0x204c9884,0x4c09b1f8,0x25a8f307,0x2f30042d,0x83fcbef8,0xe8f1596a,
    0x5df71321,0xec9321e8,0x51e6488f,0xa9aa3ccd,0x4078ce8e,0x3cd3204c,
    0x47ff91aa,0x456e0bf9,0x6a8f36ff,0x0e8e83c8,0xf303d52a,0x991746a8,
    0x81320fe0,0xc813204c,0xf508bea5,0xade8dfff,0xbf0f65eb,0x507c5e60,
    0x8ebc674d,0x0990f479,0x321e8fea,0x9abb2d54,0x8d53c46a,0x44bfe678,
    0x27f764c7,0x2a9fdd93,0x3e883c46,0x698d50d3,0x3c8788d5,0x770bc9d8,
    0x235403e6,0x0990f478,0xc8132136,0x76413204,0x317ffd40,0x4baca80f,
    0x2a0fb0f6,0xf17987e7,0x226d77ab,0x5b81321e,0x4994c87a,0xd31e64fe,
    0xf89a63cc,0x645b1aa1,0xf34c8b64,0x45320698,0x5a60f982,0x26434c79,
    0x746e45e4,0x1e607f11,0x1321e8d3,0x813207e6,0x2e13204c,0xf307900e,
    0x87b16c00,0x97622a5c,0x7c41364d,0xf54c84fe,0x24d88229,0x3aa9f54c,
    0x23e87f70,0x87b1f43d,0x1f85d14d,0xe98fc9d3,0x303d8fa4,0x6ec1265d,
    0x7b1f4d30,0x1e881d50,0x217f916e,0x743d8fa1,0x77fed321,0x26409901,
    0x99fc8990,0x3cc0f409,0x7d176620,0xffc83b62,0x37ffa20d,0xe9803a00,
    0xfff34bdf,0xbdfe989f,0x3efbff24,0x213ffa61,0xd884ffe9,0xdffb83ff,
    0x337fee4c,0xd13ffa64,0x07dc5dff,0x327ffe44,0x7ec09ffd,0x13bb624f,
    0xd327ffe4,0x643d09ff,0xfffe8024,0x3ffffa4f,0x53ffffa4,0x806fffff,
    0x26fffffa,0x13c83efd,0x44000003,0x00880002,0x00000000,0x00000000,
    0x01000020,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x21c4e200,0x40eeefd8,0x598b30fa,0x22370f66,0x4798dc4c,
    0x1b899179,0xa8815c3b,0x540370cd,0xdfd702cc,0x437f6767,0x3016400b,
    0x2fffe801,0x6f7fc03d,0x1f307d41,0xeea8a214,0xff90eeee,0x3fff27ff,
    0x4b20a03f,0x3fffea0e,0x237540ff,0x983ffffe,0x1a6d306f,0x260be29b,
    0x25c8be0d,0xcc96a7a8,0x4c7996a5,0xd2d4b997,0x9dd81e43,0x54c07b0a,
    0xd89dc84d,0x29b15dd4,0xb027c01e,0x207f4c05,0x47c0bcde,0xb26c2fa8,
    0x64d57c47,0x5c72a6a5,0x21333b90,0x81db004c,0xe9988f1d,0x36f6c19c,
    0x1b7a03d8,0x05d17400,0x10fcb902,0xa81d11d9,0x23cc1d15,0x07456a79,
    0x7c41e43d,0x4c803d80,0x3a990fc4,0x200f5aa2,0x59016c00,0xfcace81f,
    0x4c6b83e2,0xefa86a8f,0x6c46a0ff,0x320990b9,0x26274404,0x81cfcdfc,
    0x41ae303d,0x0d5b703d,0x3720fbae,0x46880fa9,0x64c698f9,0x95a83c8f,
    0x53cc7987,0x643d0f2b,0x47b07983,0x3cc4c83d,0x2d30f532,0x3ae4fdae,
    0x6f66443e,0x19fbc44c,0x5f35b87a,0xdb903e21,0x87e2b703,0x642eb21a,
    0x8333b904,0x9f9883e9,0x03d809ea,0x883d835c,0x93106a8f,0x039b9b09,
    0x997d0d71,0x10698a88,0x98f30d31,0x3a1a6227,0xfeea8f61,0x2ecf65ee,
    0x363c44c8,0xfeadc3d4,0x99311e89,0x2aceaa88,0xd0eefa5c,0x4efeb5c3,
    0x05f881f1,0x1351747b,0x7fe42ebb,0xdddf91ff,0x2f0076c3,0x700f6059,
    0x4f60f60d,0x7c26406a,0x2bf8819a,0x3a00fea8,0x3cc0f401,0x3a07a1e6,
    0x54c49f54,0x36f6199f,0x4be13204,0x3a65d4fb,0x322645d2,0x8f40b604,
    0x4e88f40f,0x3a0fa83e,0xb644ffff,0x9226a1f8,0x1320990b,0xfb981d90,
    0x07b02dca,0xa87b06b8,0x09901aa5,0x5c7fdddb,0x9902fc05,0xd59909b1,
    0x91aa3ccd,0x7f749b19,0x83cc2f9d,0x13200fdd,0x75333fea,0xc87a3fff,
    0x05b02644,0xe81fddf3,0x907c4fee,0x7d40f60d,0x226a0fee,0xc82642e1,
    0x261fa804,0xb02ddaec,0x7b06b807,0xffffffd8,0x0f889902,0x2206b9ea,
    0x336d301f,0x41d0b4c5,0xb4c9b13f,0x2007a5cd,0x1d77b079,0x53201320,
    0x2643d01e,0x8f200132,0x404df40f,0x6c2fc98f,0x3e23eefe,0x26a5c89a,
    0x82642e39,0x41d3004c,0x1ec0594a,0x409ec988,0x2035403d,0x4c57cc4c,
    0x8857746c,0x267a04e9,0x447a1edf,0x27ff4c3d,0x47b7e67a,0xb079801e,
    0x02641b27,0x3d01ea64,0xf1132264,0x3e2bffff,0x0f4bffe0,0x403bfff0,
    0x2288503d,0x0eccccda,0x3fff2099,0x6d2e003f,0x7ec0f602,0xfffd6fff,
    0x741aa07f,0x36a4ffff,0x3db80cee,0x8a5c07b7,0x64970eb9,0x297001ef,
    0x03b0eb98,0xd8f60f30,0x13ffffa5,0x3a03b3b8,0x7fff5321,0x0000004f,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xdfffff30,
    0x062f31e6,0xb7ffffc4,0x1f53e85d,0xd83c87d4,0x267b07d2,0x7f41deff,
    0x6fff42ef,0xf6993e23,0x37c426c3,0xd51f7ff4,0x27d8be60,0xfec8ee1d,
    0x36601106,0x3ffaa1ef,0x82776444,0x00003eec,0xf99fd300,0x74eedd49,
    0x25b8ba23,0x3044fd9d,0x1e699333,0x4c0fe6f3,0x3f33f999,0x2e93635c,
    0x35c760f2,0xa9bcc3e2,0x3ea2ba2f,0x47a627a1,0x3ed30ff8,0x3f6e0b91,
    0xa7544f40,0x22bd306a,0x74c87a7e,0x427c021b,0x26098af9,0x466c5f31,
    0xe8ae44e9,0xf907fba3,0x220f605f,0x2a3d5e88,0x5478dd9f,0x3ba0f98f,
    0x0bf11e89,0xf31e63f1,0x1ae02744,0x3e217cb9,0x7425c5c9,0x33541f11,
    0xe8ba6b8f,0xf13d87a3,0x54fda67b,0x87b5b00e,0x8355ae1e,0x27bb8fca,
    0x0f5d321e,0x013606a0,0x6a8f34c8,0xb50b507c,0x7b079b4c,0x2a5b2d80,
    0x3721e795,0x2791742e,0x265b85f8,0x447a999f,0x41f980dd,0xd705baf8,
    0x25b4b81f,0x23d8fa0e,0x25d3cc79,0x2a6fa1f9,0x26f3f11e,0x2203f7f6,
    0x90f46b8f,0x66541aad,0x43d0f8eb,0x88bbf24c,0x3a199999,0x3fbb2602,
    0x22788d54,0x366fffff,0x0f96e5dc,0x4337b331,0x2eeefee8,0x443cb2b5,
    0x12e1e85f,0xeef987e0,0x82f987ee,0x03fd703e,0x7d6a17e2,0x1f35c1f5,
    0x743e23cc,0x77741eff,0x2faf10df,0x5c0bff69,0x4df41f15,0x2e0d52fb,
    0x3a1f5e9c,0x4bea1321,0x0eeeeeea,0x9916c099,0x7c4d31e6,0x4b91d301,
    0x3aa6a9f9,0x990eeefe,0x9656a0f2,0x741fdc87,0x8b7012e1,0x3ea3cc79,
    0x27406b82,0xda83fd90,0x7c478fca,0x2a3cc6a8,0x85d15d0f,0x5e2bb11e,
    0x5f5f69ea,0x3a3e8f60,0x41aa1cee,0x643e5d4b,0x7d029f54,0x4117cc00,
    0x1f49d31f,0x900dd87b,0x0cda875b,0xd15b07b0,0x3cb2b50b,0xe83ea3ea,
    0x83f012e1,0x3d73cc79,0x3d803f10,0x98d71f30,0xe87bc9de,0x323cc3db,
    0x3a3d4ba6,0x9d3c5ae1,0x107e67ed,0x74dfffff,0x12e0d501,0x5eff4c7a,
    0x209fffb4,0x5ffb503e,0x3266ffdc,0xfb109ffd,0x2aaa27fd,0x1555510a,
    0x3df307b0,0x656a1ffb,0xd917c4f2,0x5c0970f4,0x9bcc7986,0x333bd00d,
    0x8fa07b03,0x755ba24e,0x4c0fdb86,0x1743f937,0x4e98f47d,0x1fb7d4f1,
    0x223541d7,0x1aa03d0f,0x000f41e4,0x0002d801,0x4c080000,0x9930cccc,
    0x00370199,0x00000002,0x23cc17c0,0xfff98079,0xb83d87ff,0x4f88fcc6,
    0x21be21be,0x741dfff9,0xeffe9aa2,0x3edd1e23,0xe83d9761,0x3fea03d3,
    0x3d0795ff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x41640000,0x5dddd92c,0x110d31aa,0x03995022,0xb8441835,0x1821deba,
    0xcdb83c88,0x02066e40,0x0e64c1f4,0x0ca80326,0x55004ccc,0x20085555,
    0x2666662c,0x911c4e20,0x331e4951,0x26666633,0x00000099,0x00000000,
    0x47a09dc0,0x3e0fa888,0x74ba1321,0x4766eee1,0xb9099b89,0x467647a2,
    0x31e5325c,0x9b5709dd,0x3e23d998,0xd3075dc4,0x01d50f53,0x599901d5,
    0xcccc93a2,0x64bfd13c,0x3bba27d0,0x34da64ee,0x874d71f1,0xddd5eee8,
    0x0007dddd,0x00000000,0x7b4a8000,0xc85d103e,0x32b707e4,0xad6e7624,
    0x360dcdda,0x489722ed,0x2e0f44f4,0xd910f604,0x55a26e83,0x000e92e5,
    0x89be2000,0x656a0888,0xb80f67be,0xb51f1004,0x00000000,0x00000000,
    0x746cc000,0xf307b0f6,0x0f4ba1aa,0xa969b373,0x237cc1ef,0x3ca5c03c,
    0x885d825c,0x592644da,0x6a8ea96c,0x08800000,0x457ffffe,0x01a872a0,
    0x533800ea,0x00000000,0x00000000,0x5d744000,0xd02dc6ae,0x2ad307b5,
    0xaced4ec6,0xd12c9bbc,0x301e4bb5,0xdda8d31d,0x30abba22,0x83b66bb3,
    0x3bb71443,0x00000000,0x00000000,0x00000000,0x00000000,0x8ef80000,
    0x803aa5eb,0x25900fdb,0x36ab6a2c,0xd8b20e40,0xd9640792,0x99333221,
    0x37624ccc,0x0000310c,0x00000000,0x00000000,0x00000000,0x00000000,
    0x16e80000,0x7ffff49f,0x0002fc44,0x00020551,0x00000079,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__consolas_14_latin1_x[224]={ 0,2,1,0,0,0,0,3,2,1,1,0,1,1,
2,0,0,0,1,1,0,1,0,0,0,0,2,1,0,0,1,2,0,0,1,0,0,1,1,0,0,1,1,1,
1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,2,1,1,0,0,0,0,1,1,0,0,0,0,1,1,
0,1,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,1,3,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,
3,0,0,0,1,0,0,1,0,0,1,0,1,1,0,1,0,2,2,1,1,1,0,0,0,1,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
 };
static signed short stb__consolas_14_latin1_y[224]={ 10,0,0,1,-1,0,0,0,-1,-1,0,2,7,5,
7,0,0,1,0,0,1,1,1,1,0,0,3,3,2,4,2,0,0,1,1,0,1,1,1,0,1,1,1,1,
1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,0,0,1,11,0,3,0,3,0,3,0,3,0,0,
0,0,0,3,3,3,3,3,3,3,0,3,3,3,3,3,3,0,-2,0,4,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10,3,-1,0,1,1,
-2,0,0,0,0,3,5,5,0,0,0,1,0,0,0,3,0,4,10,0,0,3,0,0,0,3,-2,-2,-2,-2,
-2,-2,1,0,-2,-2,-2,-2,-2,-2,-2,-2,1,-2,-2,-2,-2,-2,-2,3,-1,-2,-2,-2,-2,-2,1,0,0,0,
0,0,0,-1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,
 };
static unsigned short stb__consolas_14_latin1_w[224]={ 0,3,5,8,7,8,8,2,4,5,6,8,4,5,
3,7,8,7,6,6,8,6,7,7,7,7,3,5,7,7,6,5,8,8,6,7,8,6,6,7,7,6,5,7,
6,8,7,8,6,8,7,7,8,7,8,8,8,8,7,4,6,5,7,8,5,7,6,6,7,7,8,8,6,6,
6,7,6,8,6,8,6,7,7,6,7,6,8,8,8,8,6,6,2,6,8,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,3,7,7,8,8,
2,7,7,8,6,7,7,5,7,6,6,7,6,5,7,7,7,3,3,6,6,6,8,8,8,5,8,8,8,8,
8,8,9,7,7,7,7,7,7,7,7,7,8,7,8,8,8,8,8,6,8,7,7,7,7,8,6,6,7,7,
7,7,7,7,8,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,7,7,7,7,8,6,8,
 };
static unsigned short stb__consolas_14_latin1_h[224]={ 0,11,4,9,13,11,11,4,14,14,7,8,6,2,
4,12,11,9,10,11,9,10,10,9,11,10,8,10,9,4,9,11,13,9,9,11,9,9,9,11,9,9,10,9,
9,9,9,11,9,13,9,11,9,10,9,9,9,9,9,13,12,13,5,2,4,8,11,8,11,8,10,10,10,10,
13,10,10,7,7,8,10,10,7,8,11,8,7,7,7,10,7,13,15,13,4,9,9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,13,10,9,9,
15,12,4,11,8,7,4,2,7,4,5,9,6,6,4,10,12,4,3,6,8,7,10,10,10,10,12,12,12,12,
12,12,9,13,12,12,12,12,12,12,12,12,9,12,13,13,13,13,13,7,13,13,13,13,13,12,9,11,11,11,
11,11,11,12,8,10,11,11,11,11,10,10,10,10,11,10,11,11,11,11,11,8,11,11,11,11,11,13,13,13,
 };
static unsigned short stb__consolas_14_latin1_s[224]={ 254,252,172,212,187,132,34,153,13,7,42,
209,91,182,252,84,61,230,198,95,245,167,244,1,236,220,252,232,204,136,17,
102,76,108,85,142,68,197,190,108,9,238,238,100,124,131,92,227,117,36,77,
18,221,51,59,50,41,32,24,31,27,25,96,188,111,170,197,163,181,187,76,
9,115,122,18,85,93,227,245,178,108,100,56,147,125,140,17,1,236,24,10,
45,1,52,144,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,
181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,254,228,59,
212,172,163,4,76,164,133,195,26,156,182,34,125,104,129,78,85,117,68,220,
132,178,71,202,64,59,42,33,18,1,228,43,237,211,34,137,195,19,52,60,
68,92,100,108,116,154,246,109,118,127,136,145,49,154,163,171,179,85,10,147,
212,219,204,78,70,149,203,218,205,173,165,157,141,190,182,174,1,189,159,52,
116,150,86,43,154,1,10,26,244,124,100,93,67, };
static unsigned short stb__consolas_14_latin1_t[224]={ 1,17,63,42,1,17,30,63,1,1,63,
53,63,63,53,17,30,42,30,30,42,30,30,53,17,30,30,30,42,63,53,
30,1,53,53,30,53,42,42,30,53,42,30,53,53,53,53,17,53,1,53,
30,42,42,53,53,53,53,53,1,17,1,63,63,63,53,17,53,17,53,42,
42,42,42,1,42,42,53,53,53,42,42,63,53,30,53,63,63,53,42,63,
1,1,1,63,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,1,30,1,
30,42,42,1,17,63,30,53,63,63,63,63,63,63,42,63,63,63,42,1,
63,63,63,53,63,42,42,42,42,17,1,17,1,1,17,42,1,17,17,17,
17,17,17,17,17,42,1,1,1,1,1,1,63,1,1,1,1,1,17,42,
17,17,17,30,30,17,1,53,30,17,17,17,17,30,30,30,42,17,30,30,
30,30,30,30,53,30,30,30,17,17,1,1,1, };
static unsigned short stb__consolas_14_latin1_a[224]={ 123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_14_latin1_BITMAP_HEIGHT or STB_FONT_consolas_14_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_14_latin1(stb_fontchar font[STB_FONT_consolas_14_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_14_latin1_BITMAP_HEIGHT][STB_FONT_consolas_14_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_14_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_14_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_14_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_14_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_14_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_14_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_14_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_14_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_14_latin1_s[i] + stb__consolas_14_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_14_latin1_t[i] + stb__consolas_14_latin1_h[i]) * recip_height;
            font[i].x0 = stb__consolas_14_latin1_x[i];
            font[i].y0 = stb__consolas_14_latin1_y[i];
            font[i].x1 = stb__consolas_14_latin1_x[i] + stb__consolas_14_latin1_w[i];
            font[i].y1 = stb__consolas_14_latin1_y[i] + stb__consolas_14_latin1_h[i];
            font[i].advance_int = (stb__consolas_14_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_14_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_14_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_14_latin1_s[i] + stb__consolas_14_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_14_latin1_t[i] + stb__consolas_14_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_14_latin1_x[i] - 0.5f;
            font[i].y0f = stb__consolas_14_latin1_y[i] - 0.5f;
            font[i].x1f = stb__consolas_14_latin1_x[i] + stb__consolas_14_latin1_w[i] + 0.5f;
            font[i].y1f = stb__consolas_14_latin1_y[i] + stb__consolas_14_latin1_h[i] + 0.5f;
            font[i].advance = stb__consolas_14_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_14_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_14_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_14_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_14_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_14_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_14_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_14_latin1_LINE_SPACING
#endif

