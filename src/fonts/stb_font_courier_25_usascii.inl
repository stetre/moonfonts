// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_25_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_25_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_25_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_25_usascii_BITMAP_HEIGHT         66
#define STB_FONT_courier_25_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_25_usascii_FIRST_CHAR            32
#define STB_FONT_courier_25_usascii_NUM_CHARS             95

#define STB_FONT_courier_25_usascii_LINE_SPACING          12

static unsigned int stb__courier_25_usascii_pixels[]={
    0x50381aa0,0x20660501,0x4b32e061,0x06281ccc,0x12200012,0x5405bfb3,
    0x65403dec,0x20aaa201,0x6dc40aa9,0x9999700b,0x33b22079,0x42b2ea01,
    0x223b11aa,0x159730aa,0x019d9500,0x8aa23795,0x97000cc8,0x05999999,
    0x6a809930,0x207541a0,0x3406640e,0x3eb7550d,0x9734c1aa,0x640002c8,
    0x16cc7a62,0x0db98ee4,0x220571d8,0x76dc0ced,0x36a27762,0xaaaabd84,
    0xea8ae882,0x6d5fec42,0x7f33ce9f,0x2fb67b26,0x7d301fea,0xbee88313,
    0x10ceadeb,0x2f6003d5,0x04caaaaa,0x14406a98,0x055f7e44,0x1a20e893,
    0xd5981a68,0x41f11ec0,0x1a200068,0x25c6883b,0x1214c6a8,0x88b20688,
    0x00d81d02,0x6c688590,0x7c47e983,0x74c1fec2,0x3a00f4c0,0x3b04fb82,
    0x15c02e00,0xd3000d00,0x5887ee65,0x340b3074,0x106acc0d,0x1644d81f,
    0x1663c800,0x74068874,0xc80906a2,0x2e006882,0x3c4006c3,0x5c0f32c8,
    0x1b617c47,0x007a23c8,0xd827c0d5,0x00e80001,0x555531a0,0x0e40ec55,
    0x1660e8b1,0xacc0d168,0x8f309906,0x46880059,0x570e883b,0xa86c6b80,
    0x16434402,0x00d83b00,0x2e9505a8,0x0be1e203,0x7734407b,0x26407700,
    0x059731d8,0xcb982c40,0xcccb8d0a,0x4401a6cc,0x20b30745,0xacc0b158,
    0x0be05f06,0x43b8003b,0x43bb6a1c,0x223c401d,0x202a22cb,0x4401a22c,
    0xcecad85b,0x2b304b81,0x3e1e203b,0x4d1016c1,0x203c800c,0x7f93b04b,
    0x77003dd5,0x1dd59fb0,0x0cb9a00d,0x983a2c40,0x777f7545,0x6acc0eef,
    0x89b01f98,0x20740059,0x4361d11c,0x100e800e,0x9a205995,0x2ffcc02c,
    0x6d98bdd8,0xd558815c,0x20fc3dc0,0x5696e06d,0x06a83bdd,0x41f6c13a,
    0x206c00f9,0x007e983c,0x01bdeb8d,0x0770741f,0xb3025526,0x5c81ea1a,
    0x095000e8,0xb0d8ae39,0xca88f001,0xd159001c,0x00f66200,0x440ae1c8,
    0x1fa20ba5,0x105fb03a,0x98ed743d,0x7d40f42d,0x26c0fb04,0x20788d10,
    0x220d007c,0xd2fb85da,0x54a81fa1,0xb86acc07,0x12a1ae07,0xa8e40740,
    0x200e4363,0x0887326a,0x002ce880,0x4b3003c8,0x744b302b,0x86afc9ae,
    0x57756c0e,0x07742fd9,0x55bd3162,0x136095bb,0x50ea0698,0x6803cc09,
    0xd1743b80,0x7310b621,0x26039739,0x640f50d5,0x4a801d05,0x6cdf4390,
    0x04c80951,0x32012ef2,0x00d10006,0x12a0753c,0x4342f72e,0x7b951d80,
    0x03605901,0x8254b36e,0x3b03402d,0x803c02c8,0x89660116,0xd8b30745,
    0x3eeeeeee,0x1f30d598,0x02541360,0x2a1e407a,0xe807a2dc,0x014c3500,
    0x068000f2,0xc82ccd30,0x6c01a003,0x6c0ee001,0x36095000,0x86816a04,
    0x401e605a,0x88b20976,0x20b30745,0xacc0392b,0x7d01f886,0x05980740,
    0x0f44016a,0x48480ba2,0xb8001a20,0x744c8023,0x1a000e80,0xd3000ec0,
    0x16400d10,0x07b00fd8,0x403e212a,0x3aed007d,0x445da9ad,0x20b30745,
    0xacc0391c,0x1f107b06,0x01d81dc0,0xed8801e2,0x15401edc,0x201dc053,
    0x323541cd,0x2e07540d,0x1a0025c5,0x001d87d5,0x007911dc,0x6e6c03aa,
    0x1c817221,0x6dc43b50,0x2226d006,0x45881cfb,0x8ec1660e,0x8356600d,
    0x4405c879,0x4c806986,0x0ce88144,0x11333200,0x80bdfddb,0x81efcefb,
    0x00efcdea,0x200bd9d7,0xf94efeea,0x17bbfa6d,0x04fdec80,0x01bdddb1,
    0xbdf53ff5,0x5406809f,0x9fd4fdee,0x4c0d0680,0x20b10744,0xacc01d0d,
    0x03f0ba06,0x002c8590,0x307fb9d9,0xd979ddff,0x33300880,0x26200133,
    0x80098800,0x4cc00098,0x9982a099,0x09800099,0x8000cc40,0x20000099,
    0x04a80018,0x1d0b620d,0x0d0e82d8,0x0cfd6a62,0x200b5354,0x1001a268,
    0x88d54035,0x00000bb9,0x00000000,0x00000000,0x00000000,0x00000000,
    0x0b02d980,0x322120b6,0x3b6030c2,0x907ddd4e,0x2370005c,0x0000001a,
    0x00000000,0x00000000,0x00000000,0x00000000,0xdb000000,0x00005fdd,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00133100,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x5ed40000,
    0x039b9100,0x10000b2e,0x1e601557,0x2e003cb8,0x005004cc,0x801ceda8,
    0x97002dc9,0x5c00e601,0x83cccccc,0x188addb9,0x119bd730,0x90e66643,
    0x36e21999,0x3ae202de,0x6664c51c,0x22cccccc,0x0acccccc,0x30b332e0,
    0x3a609999,0xce82ea8b,0x4ca82da9,0x77bd1000,0xa81e6099,0x2aaa005b,
    0x002c400e,0x8172639b,0x02eb8adb,0xec887b66,0x3331007d,0xaeb8135d,
    0xb83eda88,0x3dec989d,0x99826b66,0x64c2fe1f,0xc98adc86,0x2666ee5e,
    0x264a999e,0x4eb999da,0x88139710,0x03b01da9,0x80d84a8d,0x05700049,
    0x16201440,0x22007400,0x2e079005,0x06886a84,0x0a98767a,0x2036000d,
    0x970f606a,0x01b0fe20,0x10e41a34,0x43b9720d,0x412624c6,0xc80d102c,
    0x8b20b102,0x4984981d,0x0000d000,0x3a000b10,0x55d75100,0x40698555,
    0x2c805c1e,0x3403b4a8,0x0e80d800,0xb80d0620,0x08d006c3,0x881d4b30,
    0x498d0ee4,0x2068824c,0x6881a01c,0x0b034590,0x40b2e693,0xaaaafaa8,
    0x402aa981,0x02aaa258,0xd99100e8,0x64199999,0x5001e401,0x80761d07,
    0x981b0006,0x001cc004,0x200d006c,0x54012249,0x93122342,0x04981620,
    0x4c3d8095,0x43cc0f47,0x4daadcc9,0xcccfcc98,0x0fccb83c,0xcee89620,
    0xb1003a02,0x59801d00,0x47903a00,0x4001a01d,0x20015c0d,0x00d8002c,
    0x907a601a,0x00d00039,0x805d1093,0xd8801b06,0x25c0edce,0x0fe6076c,
    0x80068076,0xeb96200e,0x4400e800,0x0d006805,0xd8d10f60,0x6c001a01,
    0x32000e40,0x200d8001,0x407b6606,0x801bdeb8,0xccce9806,0x42b801de,
    0xbed88058,0x99cd81ed,0x82cc1cae,0x2001a04a,0x2e56200e,0x58801d00,
    0x06880680,0x6c2d83c8,0x20281a01,0x6640e40d,0x00391ccc,0xb03401b0,
    0x17544005,0x2ba601a0,0xd1002fba,0x42e802b8,0x66dc40e8,0x504981b1,
    0x74003409,0x0177a200,0x058801d0,0x025c00d8,0x361660f6,0x02c41a01,
    0xaa83b81b,0x00770dca,0x903401b0,0x80d10001,0x74449806,0x0341b002,
    0x003b82cc,0x12a0930d,0x00e80068,0x800b6be2,0x402c400e,0xb01ec03b,
    0x33337607,0x20d02dec,0x9303a058,0x01663a80,0x03440b20,0x006c0380,
    0xd109300d,0x12695003,0x024c0ea0,0xa824c254,0x3a001a04,0x02d96200,
    0x058801d0,0x03a201d0,0x333101ec,0x1a015b33,0xd04882c4,0x0b21d403,
    0xa834c498,0x203f0004,0x4c034068,0x5a00d304,0x9068801c,0x980e8803,
    0x03409504,0x8b100740,0x800e802d,0x3a62980d,0x74407441,0x403b0002,
    0x3b07d106,0x1dc0ba20,0x07a60fa2,0x00e982f6,0x07be0bf7,0x806805b1,
    0x200b2049,0x0f2006ac,0x01ea80d5,0x6812a093,0x2200e800,0x3a017445,
    0xdcde9800,0x66f440ce,0x02e881dd,0x201d8053,0x66ef5c06,0x66f6c402,
    0xec880cec,0x3600decd,0x3600cdcf,0xee9d80ff,0xff903dec,0xffd0dfff,
    0x80df10bf,0x2e2003f9,0x66c0cede,0xffb00ced,0x87ffec1f,0xfffffffb,
    0x7ffffec2,0x8bfb0fff,0xffb2fffa,0x01ffffff,0x4c400544,0x3fffe200,
    0xfb04ffff,0x3ffea5ff,0x1304ffff,0x00353000,0x188004cc,0x10015100,
    0x00000013,0x20000000,0x00004c01,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xcc985997,0x261665c4,0x3332a4cc,0x333202cc,0x43332a3c,0x6543ccc9,
    0x999932cc,0x33225999,0x90b3321c,0x20599999,0xccccccc8,0x33320ccc,
    0x24cccccc,0x1bccccc8,0x99999910,0xccccc859,0x2cc980bc,0x931cccc8,
    0x41e64039,0x001cccca,0xa8026ee2,0x80000b20,0x066442c8,0x7d107aa2,
    0x221ea881,0x20099e99,0x2e209da9,0x026b621e,0x2621d331,0x20999e99,
    0x36e609da,0x4cced4c0,0x9bc984eb,0x21d99999,0x99999da9,0x4ccfcc69,
    0x4ecc1eca,0x4c3c9999,0xeda999da,0x303f6620,0x36e213d3,0x101bb505,
    0x200b7b33,0xb00dbbe9,0x00f6c4ff,0x440fae00,0xd101d80e,0x03403d01,
    0x01b50930,0x20588057,0x2609300e,0x07209304,0x4c1c80ee,0x441a1a04,
    0x1a21260e,0xc83a824c,0xb750d05b,0xd00b3d01,0x00720036,0x3a607ff4,
    0x6754000d,0x12e2d400,0x403c8b30,0xb7126006,0x45d11d40,0x4c03a049,
    0x12609304,0x901dc2c4,0x21604983,0x84992a06,0x3409301e,0x4340ece4,
    0x46cc4aba,0x03aa5405,0x393001e8,0x20067540,0x36000dd9,0x52e00d12,
    0x2006805a,0x93013249,0x407526dc,0x2609300e,0x43409304,0x9300623b,
    0x9a034028,0x9301e418,0x22721620,0x1d3a8686,0x3602c4ec,0x09500d11,
    0x07d70000,0x10003d91,0x6c003b1d,0x006800eb,0x44026d26,0x02b9a765,
    0x9824c03a,0x12e09304,0x4c04a8ee,0x80d01a24,0x980b301c,0x640f5444,
    0x3a868771,0x02c5a277,0xe801c8d1,0xd8800000,0x0005f71e,0x44004ea8,
    0x400d002f,0x403fcdd9,0x1c8eda68,0x7fcc03a0,0x304fffff,0x40764c49,
    0x404ffffb,0x406ffff9,0x7440e406,0x7fffcc00,0x743904ff,0x768ea1a0,
    0x43a81625,0x973a6049,0x8009983a,0x3b222ec8,0x00740002,0x3401b360,
    0x3625f300,0x7549b403,0x300e8036,0x7cc12609,0x2e02deee,0x493012a3,
    0x32034068,0x49802d81,0x0e40eb88,0x91d43495,0x5b02c4d5,0x201d3333,
    0x50ba590e,0x3eb803ff,0x0007b220,0x29700074,0x1a06804b,0xb403b093,
    0x803ab12c,0x2609300e,0xb8009304,0x89300623,0x21a03402,0x0498385a,
    0x1d83912a,0x1fc4750d,0x3bbe20b1,0x5882eeee,0x3f2167a2,0x0033aa04,
    0x20006ecc,0xc8d3000e,0x98d03403,0x23606884,0xd01a3a0e,0x24c12601,
    0x1dc00498,0x3a812600,0xe88d1034,0x40498680,0x35a60e46,0x0b1021d4,
    0x682c40ae,0x07fc17d4,0x8000674c,0x1d000cea,0x3d01d100,0x498d0340,
    0x1ab203b0,0x00e80d59,0x4c126093,0x001dc004,0x343a8126,0xd01d83d0,
    0x22cc0930,0xa86bc81c,0x0682c403,0xf516406c,0xdc82f983,0x3d700001,
    0x5b001d00,0x03403a20,0x0b30498d,0x0bb30f6e,0x209300e8,0x80093049,
    0x024c003b,0x2da86875,0x930d025c,0x03907a60,0x80750dd1,0x54049858,
    0x9dddd883,0x0041726f,0xc8044000,0xd06fffff,0xfffb8bff,0xffffff51,
    0x7ff4ffff,0x543fe85f,0x7d44f81f,0x94ffffff,0x7ff45fff,0x3ffffa0f,
    0xffff101f,0xfffe80df,0x13ffffff,0x39dfffff,0xffffffb0,0xffffe8ff,
    0x7f41dfff,0x2e3d42ff,0x7fcc4fff,0x13fff26f,0x220dfff3,0x00002201,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x80480000,0x8802cb98,0x26012cca,0x02a01bcb,
    0xa80de5c4,0x8155502a,0x9810aca8,0x10d5441a,0x0aa98555,0x2aaaaaa2,
    0x886aa21a,0xb98d441b,0x771a982c,0xaaa80e54,0x405554c2,0xa84cc018,
    0x9884cc3b,0x2a605009,0xaaaaaaaa,0x020675c2,0x03a00391,0xebabce98,
    0xb757d501,0x67ec43dd,0x7fd84fca,0x4fcadfb8,0x640676c4,0x2afae1ed,
    0x2edc3edb,0xfd993726,0x98bbae0c,0x3fccccce,0x5f64f726,0x3737665c,
    0x6ed45daa,0xeaccccad,0x066f6440,0x95039f97,0xfc97fd40,0xffaa7fc6,
    0xba84ea81,0xbbbbbbbb,0x987556e3,0x003ffa0e,0x1a20003a,0x8be603a6,
    0xfe87904d,0x91036a0f,0x15c05889,0x260f20b1,0x87b09305,0x5c24c0e9,
    0x087d9504,0x20ec27cc,0x4a93e0ea,0x81660750,0xb9bf204a,0xf99ff45f,
    0x16c74c0f,0x3a61c000,0x03fec1ed,0x1b0000e8,0x4c7203d8,0xc883e206,
    0x1f807e21,0x06c5f134,0x301101f1,0xa641260b,0x5a8300ea,0x2600bea0,
    0x43a89505,0x0681620d,0xca9bd83b,0x87fe0db8,0x897ec4fa,0x3d0f447f,
    0x44444444,0x01800888,0x00740026,0x3b33b322,0xdb8007c0,0xdaaaaaaa,
    0x32034c02,0x24da86c3,0x0abdfa86,0x024c1660,0x26001bb9,0x9801d406,
    0x43a89305,0x2b81620d,0x7edc4344,0x17e61bef,0x21fc87f3,0x3a216c6f,
    0xbbbbbb90,0x0000bbbb,0x3fbbba60,0x3ea3eeee,0x20ea99ac,0x336e0068,
    0x1ccccccc,0x12a02540,0x2c5a7657,0x01bd9510,0xa81260b3,0x01d3004f,
    0x0b3003a8,0x0d875126,0x64688162,0x5c0f7402,0x2e17c41f,0x04a97a0f,
    0x00000095,0x74cccc00,0x80741999,0xa8007c0d,0x06980005,0x5a3261ec,
    0x2e003aac,0x09305985,0x2202656a,0x003a800e,0x751260b3,0x901620d8,
    0x26f20343,0x81b04d86,0x8000d438,0xeeeeee80,0x3bba1eee,0xeeeeeeee,
    0x5403a05e,0x4d81d104,0x001e88c0,0x205d0726,0x33ae80f8,0x100d839b,
    0x12e0b10d,0x220b716e,0x03a8381e,0x51260b30,0x01620d87,0x5a80eab3,
    0x0000112e,0x542e8000,0xaaaaaaaa,0x44444440,0x74008888,0x3fa61a00,
    0x2605f440,0x220ba62e,0x983ffa2c,0xe81ed42e,0xbb03ba0d,0x206c0b20,
    0xb82dc4fc,0x50d02d85,0x4c166007,0x88361d44,0x00e8d805,0x00000606,
    0x07b10000,0x20000000,0x337aa00e,0x445fd8de,0x81cdcdfd,0x2eecdfe9,
    0x7f4c3fec,0x1b202fec,0x9b97b0d9,0x674c09db,0xfb5f9bfd,0x77fec1ff,
    0xffffff50,0x7ff76cdf,0xfffc86ff,0x7e57fee0,0x7c47f64f,0x0027d406,
    0x00000000,0x00003900,0x200d0000,0x26200099,0x80331000,0x006a2009,
    0x00130000,0x000000cc,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000800,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__courier_25_usascii_x[95]={ 0,5,2,2,2,2,2,5,6,3,0,1,3,2,
4,2,2,2,1,2,2,2,2,2,2,2,4,3,0,1,0,0,2,0,0,1,1,0,1,1,1,2,1,0,
1,0,0,0,1,1,0,1,1,0,0,0,0,1,2,0,0,0,2,0,4,1,0,1,1,1,2,1,0,2,
1,2,2,0,1,1,0,1,1,2,1,0,0,0,1,1,2,0,6,0,2, };
static signed short stb__courier_25_usascii_y[95]={ 18,4,4,3,3,4,6,4,4,4,4,6,14,11,
15,3,4,4,4,4,4,4,4,4,4,4,8,8,6,9,6,5,4,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,3,4,4,23,3,8,4,8,4,8,4,8,4,4,
4,4,4,8,8,8,8,8,8,8,5,8,8,8,8,8,8,4,4,4,10, };
static unsigned short stb__courier_25_usascii_w[95]={ 0,3,9,10,9,10,10,4,5,4,9,11,5,10,
5,9,9,9,10,10,9,10,10,9,9,10,5,6,11,12,11,8,9,14,12,11,12,12,12,12,12,9,12,13,
11,14,13,12,12,12,14,11,11,13,14,13,13,12,10,4,9,4,9,15,5,11,12,11,12,11,11,12,13,10,
8,11,10,14,11,11,12,12,12,10,11,12,13,13,12,12,9,5,2,5,10, };
static unsigned short stb__courier_25_usascii_h[95]={ 0,15,7,17,18,15,13,7,17,17,9,12,8,2,
4,17,15,14,14,15,14,15,15,15,15,15,11,13,12,5,12,14,16,13,13,14,13,13,13,14,13,13,14,13,
13,13,13,14,13,16,13,14,13,14,13,13,13,13,13,17,17,17,7,2,4,11,15,11,15,11,14,15,14,14,
19,14,14,10,10,11,15,15,10,11,14,11,10,11,10,15,10,17,17,17,4, };
static unsigned short stb__courier_25_usascii_s[95]={ 110,179,203,35,10,110,211,198,56,62,182,
1,192,229,247,77,156,128,107,134,118,145,196,233,1,11,49,222,241,223,229,
190,87,196,154,164,130,117,104,151,78,68,138,40,28,181,167,94,91,97,223,
199,211,176,238,54,14,1,143,51,67,46,213,240,223,13,220,25,243,37,36,
207,22,48,1,59,71,153,141,55,183,166,128,81,82,92,168,67,105,121,118,
29,26,20,236, };
static unsigned short stb__courier_25_usascii_t[95]={ 17,1,51,1,1,1,37,51,1,1,51,
51,51,57,51,1,1,21,21,1,21,1,1,1,21,21,51,37,37,51,37,
21,1,37,37,21,37,37,37,21,37,37,21,37,37,37,37,21,37,1,21,
21,21,21,21,37,37,37,37,1,1,1,51,57,57,51,1,51,1,51,21,
1,21,21,1,21,21,51,51,51,1,1,51,51,21,51,51,51,51,1,51,
1,1,1,51, };
static unsigned short stb__courier_25_usascii_a[95]={ 212,212,212,212,212,212,212,212,
212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,
212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,
212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,
212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,
212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,
212,212,212,212,212,212,212, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_25_usascii_BITMAP_HEIGHT or STB_FONT_courier_25_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_25_usascii(stb_fontchar font[STB_FONT_courier_25_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_25_usascii_BITMAP_HEIGHT][STB_FONT_courier_25_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_25_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_25_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_25_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_25_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_25_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_25_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_25_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_25_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_25_usascii_s[i] + stb__courier_25_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_25_usascii_t[i] + stb__courier_25_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_25_usascii_x[i];
            font[i].y0 = stb__courier_25_usascii_y[i];
            font[i].x1 = stb__courier_25_usascii_x[i] + stb__courier_25_usascii_w[i];
            font[i].y1 = stb__courier_25_usascii_y[i] + stb__courier_25_usascii_h[i];
            font[i].advance_int = (stb__courier_25_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_25_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_25_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_25_usascii_s[i] + stb__courier_25_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_25_usascii_t[i] + stb__courier_25_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_25_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_25_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_25_usascii_x[i] + stb__courier_25_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_25_usascii_y[i] + stb__courier_25_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_25_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_25_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_25_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_25_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_25_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_25_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_25_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_25_usascii_LINE_SPACING
#endif

