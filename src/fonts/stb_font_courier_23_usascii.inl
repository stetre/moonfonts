// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_23_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_23_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_23_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_23_usascii_BITMAP_HEIGHT         58
#define STB_FONT_courier_23_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_23_usascii_FIRST_CHAR            32
#define STB_FONT_courier_23_usascii_NUM_CHARS             95

#define STB_FONT_courier_23_usascii_LINE_SPACING          11

static unsigned int stb__courier_23_usascii_pixels[]={
    0x880a8760,0x40420280,0x00880aaa,0x08848003,0x01555007,0x44017bb7,
    0x0b2e03dc,0xb98015c4,0x2aaaa01c,0x301d40aa,0xcb881797,0x55555540,
    0x0005531a,0x93015510,0x00590039,0x5c404d54,0xa81991ce,0x86a87e03,
    0x4981ec3a,0x82caa837,0x2001b03a,0x0390e84a,0x3a20aae8,0xb81e988a,
    0x6d44c88c,0x46444c99,0x26fa2049,0x555d05c9,0x906d8155,0x6dc1335b,
    0x2aba4c9a,0xd515baaa,0x1d510000,0x04c9be98,0x5edc01ec,0x456dc4ca,
    0x7cc1dbea,0x8550303f,0x3a81263a,0xd50ae039,0x02d4359d,0xb32dc0d8,
    0x103d0680,0x0742c41d,0x82e1d81d,0x3901100a,0x21b200b0,0x86c2c03d,
    0x00687503,0x81903200,0x2002202c,0x0bd05805,0x54003ff1,0x40751d43,
    0x8ae0193a,0xf87d30bc,0x0f424c01,0x5a868036,0xb82b92e0,0x5c950952,
    0x930002e0,0x517200b0,0x4983a809,0x001a0e40,0x442c0c80,0x01cc0005,
    0x802dc0ea,0x20cccccc,0x0751d43a,0x5700d95c,0x97066162,0x434c0d80,
    0x0f61a049,0xb3036698,0x89620b25,0xc8004a9c,0x5b802582,0x2166006c,
    0x9b43402b,0x2e602dec,0x24c192de,0x16664458,0xcccedca8,0x05980643,
    0x1b333330,0x3a8ea1d4,0x9e9bc988,0x00b12b81,0xc85981e6,0x21a01d04,
    0x4cd3400e,0x203b2cce,0x032a1a86,0xdf826d44,0x44b81def,0x85ec06a5,
    0x212600ea,0x4ea8aeae,0xcd98be98,0x07cc340d,0x4c40ee66,0x540999cb,
    0x4000b703,0x4751260c,0xcdeca83a,0x915c0ccf,0x00f88039,0x2a07d039,
    0xb00b0d04,0x2570d9a1,0x32a0d00d,0x0fedc02c,0x507621b8,0x6674e4c9,
    0x0fffe81d,0x83740e40,0x7e41a22d,0x39b11e40,0x07300e60,0x3617a0b0,
    0x3a06405f,0x00754ea3,0x42b81a19,0x3f02deb8,0x80be0b10,0x4048680e,
    0x4ae69a78,0x6654d00d,0x02d88001,0x224a8910,0x3322c46d,0x1a00db88,
    0x2a5a81f4,0xd901f104,0x260371bb,0x5401cc03,0x85aeb8be,0x206400ff,
    0x075cea4d,0x2b81a1b0,0x07e0f220,0x5017c0b2,0x40330d07,0x572c9a6a,
    0x219a2072,0x34003cb8,0x7c188b00,0x70950d81,0x07412209,0x1b00e4d0,
    0x300d8220,0x20039807,0x4c589bda,0x260c804f,0xb0571d44,0x09dfddfd,
    0xf88b0057,0x07d03440,0x40b06868,0x75c4361d,0x0b50574f,0xb001cc32,
    0x82c03400,0x41a0391b,0x2203d02b,0x00f80ae6,0x00e60688,0x2c400073,
    0x506401b2,0x20ea3a87,0x09da9e98,0x9301b2b8,0x202b8798,0x1a15c04c,
    0x3225c254,0x1e42cc02,0x58802438,0x5900d300,0x1cc1d4b0,0x5c13a058,
    0x07d41664,0x07301640,0x2a000398,0x0c801743,0x1d4750ea,0x2b8126d0,
    0x1d5115db,0x540684b8,0x81a34406,0xa83eccd8,0x1a21d804,0x82b61c48,
    0x221741d8,0x3622642d,0x441b12a0,0x3a05880d,0x3607542d,0x803b660b,
    0x01cc04d8,0x754000e6,0xa8320000,0x40751d43,0xa95c0736,0xe80beeb8,
    0x0f401dc1,0x54068b20,0x060f401e,0x40179bb1,0x6c40cbc9,0xb902dddf,
    0x1ff03bb9,0x40eede98,0x501dddc9,0x3f6fd505,0x9f900eec,0x229d91dd,
    0xdb02ddcd,0x23dddddd,0x3eeeeeec,0x019ddd50,0x0ea0d800,0x58824c75,
    0x5415c075,0x00d0d503,0x34d1012e,0x99dddf90,0x766f441d,0x04001104,
    0x088004c0,0x00880220,0x10000044,0x00260013,0x00000031,0xd0000000,
    0xb0ea074c,0x20ae9105,0x03a82b98,0x2003a85b,0x9e8e400e,0x00cc0981,
    0x00000011,0x00000000,0x00000000,0x00000000,0x00000000,0x80b8f660,
    0x0081c418,0x14c0e65c,0x2000a828,0xcc944009,0x0000000c,0x00000000,
    0x00000000,0x00000000,0x00000000,0x77440000,0x000002de,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x500d5544,0x53260015,0x2602ceca,0x87953dec,
    0x1e64c009,0x0aa8b32a,0x056edc00,0x1002f2a0,0x10066035,0x07999999,
    0x05117b95,0x3139db51,0x9951e664,0x2fbae219,0x14b76a00,0x99999995,
    0x66666479,0x3332e01b,0x32266640,0x933220cc,0x3cccccca,0x2a03caa8,
    0x7d31002d,0x2a136a5b,0xaddd98be,0x322015c0,0x506d440b,0x2ba20059,
    0x9b00ea88,0x66c09b53,0x00f7b663,0x026f2666,0x13ae637b,0xbb5115b1,
    0x3104f4c9,0x5b517c3b,0xdd5117d0,0x4e5ccd64,0x26f26599,0xc880dc99,
    0x40da981b,0x21e982d8,0x099cb998,0x05700ea0,0x87905e80,0x5701f706,
    0x0720b100,0x40f400ae,0x6c1e40d8,0x263aca80,0x2b800751,0xd89702d8,
    0x20689b01,0x5162160d,0x50e4d307,0x20ae2c47,0x5c0b1049,0x0390b102,
    0x03a801d4,0x0ba0015c,0x220752cc,0x3377260f,0x41c81ccc,0x50057058,
    0x40e1e40b,0x03a8e849,0x42b80075,0x0930c049,0x0d81a14c,0x40320d80,
    0x223a8723,0x205815c5,0x3b80d00d,0x00750126,0x935700ea,0x007403bd,
    0x41b00e4d,0x9999bc98,0x80e45880,0xd8b3322b,0x4c016602,0x503a95c4,
    0x5c2b8007,0x0006e002,0x22006c0d,0x054024c6,0x415c2875,0x260ea058,
    0x01d0d804,0x075003a8,0x3d31ddb8,0x324c0ba0,0x2e03e207,0x2c472002,
    0x04f5c570,0xd006801d,0x20753441,0x215c003a,0x0036000d,0x7006c0d0,
    0x1579705d,0x2b807500,0x0d0076a2,0x59b10039,0x2a007500,0x2542dc03,
    0x681b06e8,0x05701f70,0x201cac40,0x01a0b72b,0xc85b0036,0x01d40ea1,
    0x301b0ae0,0x0006c333,0x9d00d81a,0x0ddb8801,0xdd700ea0,0x872009fd,
    0x016e0068,0x03a801d4,0xe82c415c,0x84ea8beb,0xddda8bea,0x64002b80,
    0x1eddc05a,0x406880b0,0x0ea2cc2d,0xb81cc1d4,0x332a0642,0x800391ed,
    0x03403606,0x075034c0,0x007a62b8,0x2003a926,0x00750039,0x105700ea,
    0x66dcda0b,0xc966d402,0x44002b80,0x1efdc01f,0x02540390,0x5557b05b,
    0x307501b9,0x05706e07,0x8007724c,0x0040b00e,0x3a80e403,0x007415c0,
    0x4c001b2c,0x20075003,0x4415c03a,0x40000d05,0x4002b80c,0x793b8058,
    0x81d81a20,0x999702d8,0x07505bb9,0x1a216073,0x50074498,0x004883c8,
    0x40360688,0x4415c03a,0x058ab805,0x3a801cc0,0x2b807500,0x000d0588,
    0x42c40640,0x70059018,0x85b81ec5,0x002e883b,0x883a81d4,0xdb81d41e,
    0x06cc4980,0x83d10b62,0x105b701d,0x5409507f,0x3b815c03,0x000e6c40,
    0x01d400e6,0x415c03a8,0x0000d058,0xcceb8064,0x006881de,0xd502d857,
    0x3d107b99,0x503a80e0,0x33376207,0x666f4c03,0xcde981dd,0x9bf301ed,
    0x42ffc059,0xbecdfbc8,0xeeeeed80,0x40f776c0,0x0036405e,0x81dddddb,
    0x4eeeeeeb,0x7777776c,0xa93bb61e,0xddd50efe,0xdd10005d,0x40cc09dd,
    0x01eeeee9,0xefe88bb6,0x74c03302,0x85eeeeee,0xdd73eee9,0x3109dddd,
    0x00998800,0x11000988,0x26003100,0x00000001,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xc8833320,0x33332a4c,0x8e666404,0x9950ccc8,0x96664c39,
    0x332a4cc9,0x33333223,0xcccc980b,0x320ccccc,0xcccccccc,0x59999930,
    0x99999501,0xccccc859,0x8399301c,0x9931ccca,0x2e0f2e01,0x2a003ccc,
    0x0016c1ac,0x05303b80,0x056f6544,0x262f76e0,0x066f6440,0x3d305d30,
    0x00ced4c4,0xea826ee6,0x30267621,0x86ee21d3,0x564c0e98,0xe985da99,
    0x1c999999,0x26666f26,0x33b510d9,0x9bb85d73,0x64c4b999,0x41eb999b,
    0x6cc45e98,0x260f7222,0xe99880ed,0xb9bc801d,0x000f6440,0x0ea03ea8,
    0x0b511b98,0x764c2ba2,0x2e22faa2,0x3616601e,0x5c009102,0x0e406cc2,
    0xb1057160,0x20ea0720,0x2b83700d,0xd8244190,0x01d10ae1,0x3a0b1057,
    0x55c0c82b,0x54059c86,0x02c4049b,0x3000dd88,0x03a8019d,0x02d81c80,
    0x2203a25b,0x09725406,0x45700244,0x6d8ae05a,0xb1057122,0x6c340720,
    0x02b83500,0x58824417,0x2e05b06e,0x075a0b02,0x45757032,0xd0d80b58,
    0x4c006880,0x19b100cd,0x4c00ea00,0x03c42b89,0x2c80ee11,0x202cd640,
    0x5cae0048,0x1bd15404,0xb1057126,0x6c340720,0x5c570120,0x86c09100,
    0x05702540,0x2255a0b3,0x72c55c0c,0x32588165,0x40015c02,0x077223ea,
    0x39733310,0x676cc133,0x024c2ecc,0xffffffc8,0x0ee803ff,0x57002440,
    0x339803f9,0x970ea559,0x20b75555,0xbd83d81c,0x565c06aa,0x409101da,
    0x5c06881b,0x00edbaac,0xb8190ecd,0x2059a392,0xd881622b,0x1eb80046,
    0x993005d7,0x45999db9,0x3442b80d,0x80002b80,0x024400ed,0x07d37d70,
    0x758aca44,0xaaaacb85,0xb99b905b,0x2aaf605d,0x6d565c06,0x15c09101,
    0x2b2e00ec,0x4d03dcaa,0x25703258,0x68163ac9,0x753d00d8,0x07d5016e,
    0x54003b91,0x0b205503,0x0d30807e,0x05abb800,0x3b838244,0x69ab00ec,
    0x5882b839,0x80333590,0x4570120d,0x6409100b,0x2e021dc0,0xc8d09702,
    0x362b8192,0x77cc160e,0x3983feee,0x6cc03636,0x066c400c,0x84981d40,
    0x81da82fc,0x2a03324c,0x03c96602,0x15c34122,0x258e81a2,0x415c0d9c,
    0x40039058,0x40ae000d,0x46812238,0x15c0d859,0x32d0d0d0,0x587315c0,
    0x33333590,0x2744750b,0x20006ec4,0x01d403e9,0xd75db9b9,0x999df50b,
    0xdb9bf705,0x36074407,0x21a09101,0x5b02b82b,0x15c2dcc7,0x001c82c4,
    0x02b80036,0x3b824493,0x2e06c074,0x2a1a1a02,0x2015c0cc,0x40e40b05,
    0x3d70fa65,0x02ea8000,0x00130075,0x13300198,0x1d103b00,0x2e1a0910,
    0x3bb05882,0x882b86e8,0x6c003905,0x4c0ae000,0x89711224,0x2b81b02c,
    0xb0682d88,0x2c02b81d,0x509301d4,0x0cbd5f9b,0x08060000,0x00000000,
    0x45dfd100,0xdd71eee9,0x8fdddddf,0x76c1eeed,0x22ec3643,0x3fae5eec,
    0xddddd10e,0x3bbfa607,0x3bbb602e,0xd34eeeee,0xd07bdddf,0x1fdddddd,
    0x7777776c,0x45efd82d,0x3bbae0f9,0xd92ff6c1,0x5fee83dd,0x00000130,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x0ea00000,0x3033b722,0x39950799,
    0x145eedc4,0x87990732,0x332a3cc9,0x33333262,0xc9932a3c,0x32672a0c,
    0xa8ca81ce,0x9107d73d,0x66654599,0x17710181,0x04cc2662,0x4df900c4,
    0xdddddddc,0x3300305d,0x55555500,0x4cccc155,0x19999999,0x00000000,
    0xce98ffe6,0x2e22eb89,0x20ca880b,0x44ea88ad,0x22ccc2b9,0x36e20dc8,
    0x26666ee0,0x3236622d,0x36e2499c,0xc883d31d,0x0ae9bb2f,0xe98827a6,
    0xf881c809,0x3e1ff31f,0xf00ed82f,0x4444445f,0x74c08888,0x7cc260dc,
    0xee88b52f,0x11eeeeee,0x77777777,0x00007777,0x7fc40000,0x83a207a1,
    0x22b86649,0x2a84883a,0x5a9320b0,0xd81dc1a8,0x206dc02e,0x96a3b84a,
    0x93057058,0x0ff80e40,0x20ff4ff1,0x6f9859ac,0xd30d8000,0x17fc4b93,
    0x000001b5,0x00000000,0x640b5000,0x064db2c3,0x550015d1,0x5acb8160,
    0x0ec09500,0xb85815c0,0x220b1261,0x566c1c86,0x1fa3dbac,0x9507ecdf,
    0x907ee25c,0xbbbbbbbb,0x882c880b,0x00003980,0x00000000,0x202b8000,
    0x1cd8ac59,0x7dd9710d,0x202c0aa0,0x80b5006d,0xb02b800d,0x1624c370,
    0x4c1621c8,0x36c0befc,0x1667c97a,0x1105d8b2,0x00111111,0x00000000,
    0x00000000,0x204a8000,0x4dd4dc4a,0x5b88058c,0x5c0b02a8,0x02cc04bc,
    0x815c006c,0xb1261b85,0x40572c40,0x45b80eda,0x00a9aa4c,0x00000747,
    0x00000000,0x00000000,0xf10cc000,0x36ea1740,0x204873d0,0x05882a86,
    0xe882d497,0x4006c140,0x4370b02b,0x43602c49,0x42cda206,0x00040418,
    0x00000000,0x00000000,0x00000000,0x32e2ff98,0x36216e20,0x05f0b725,
    0xe98b1093,0x45a84c85,0x0d8680e8,0x70b02b80,0x301624c3,0x70dc0759,
    0x00000003,0x00000000,0x00000000,0x80000000,0x6fdc2ff9,0x98fa04fd,
    0x6665ec0f,0xd9b700de,0x77ecbf1b,0x643bfaa4,0x17eeeeee,0x3ddddfdd,
    0x3a24eec8,0x4cbbae5f,0xdd017e4e,0x00000001,0x00000000,0x00000000,
    0x00000000,0x4c011000,0x31000001,0x00026200,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__courier_23_usascii_x[95]={ 0,4,2,1,2,1,2,4,5,2,0,1,2,1,
4,2,2,2,1,1,2,1,2,2,2,2,4,3,0,1,0,0,2,0,0,1,1,0,1,1,1,2,1,0,
1,0,0,0,1,1,0,1,1,0,0,0,0,0,2,0,0,0,2,0,4,1,0,1,1,1,2,1,0,1,
1,1,1,0,1,1,0,1,1,2,1,0,0,0,1,1,2,0,5,0,1, };
static signed short stb__courier_23_usascii_y[95]={ 16,3,3,2,2,3,5,3,3,3,3,5,13,9,
13,2,3,3,3,3,3,3,3,3,3,3,7,7,5,8,5,4,3,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,2,3,3,20,2,7,3,7,3,7,3,7,3,3,
3,3,3,7,7,7,7,7,7,7,4,7,7,7,7,7,7,3,3,3,8, };
static unsigned short stb__courier_23_usascii_w[95]={ 0,4,8,10,8,10,9,4,5,5,8,10,6,10,
4,8,8,8,9,10,8,10,9,8,8,9,4,5,10,11,10,8,8,13,12,10,11,11,11,11,11,8,11,12,
11,13,12,11,11,11,13,10,10,12,13,12,12,12,9,4,8,4,8,13,4,11,12,10,11,10,10,11,12,10,
8,11,10,13,11,10,12,11,11,9,10,12,12,12,11,11,8,5,2,5,10, };
static unsigned short stb__courier_23_usascii_h[95]={ 0,14,7,16,16,14,12,7,16,16,8,11,6,2,
4,16,14,13,13,14,13,14,14,14,14,14,10,12,11,5,11,13,15,12,12,13,12,12,12,13,12,12,13,12,
12,12,12,13,12,15,12,13,12,13,12,12,12,12,12,16,16,16,6,2,4,10,14,10,14,10,13,13,13,13,
17,13,13,9,9,10,13,13,9,10,13,10,9,10,9,13,9,16,16,16,4, };
static unsigned short stb__courier_23_usascii_s[95]={ 250,148,139,25,41,115,176,134,65,50,125,
208,157,197,187,56,106,116,97,126,107,137,153,172,163,206,1,250,197,164,186,
173,97,162,122,149,100,88,76,137,52,245,125,26,14,148,135,85,64,85,204,
182,193,160,218,39,1,232,112,80,71,36,148,208,192,219,181,231,194,242,227,
238,12,216,1,73,1,98,86,6,25,38,74,30,50,40,112,17,53,61,65,
19,16,10,176, };
static unsigned short stb__courier_23_usascii_t[95]={ 14,1,46,1,1,1,33,46,1,1,46,
33,46,46,46,1,1,19,19,1,19,1,1,1,1,1,46,1,33,46,33,
19,1,33,33,19,33,33,33,19,33,19,19,33,33,33,33,19,33,1,19,
19,19,19,19,33,33,19,33,1,1,1,46,46,46,33,1,33,1,33,1,
1,19,1,1,19,19,46,46,46,19,19,46,46,19,46,46,46,46,19,46,
1,1,1,46, };
static unsigned short stb__courier_23_usascii_a[95]={ 195,195,195,195,195,195,195,195,
195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,
195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,
195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,
195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,
195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,
195,195,195,195,195,195,195, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_23_usascii_BITMAP_HEIGHT or STB_FONT_courier_23_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_23_usascii(stb_fontchar font[STB_FONT_courier_23_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_23_usascii_BITMAP_HEIGHT][STB_FONT_courier_23_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_23_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_23_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_23_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_23_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_23_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_23_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_23_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_23_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_23_usascii_s[i] + stb__courier_23_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_23_usascii_t[i] + stb__courier_23_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_23_usascii_x[i];
            font[i].y0 = stb__courier_23_usascii_y[i];
            font[i].x1 = stb__courier_23_usascii_x[i] + stb__courier_23_usascii_w[i];
            font[i].y1 = stb__courier_23_usascii_y[i] + stb__courier_23_usascii_h[i];
            font[i].advance_int = (stb__courier_23_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_23_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_23_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_23_usascii_s[i] + stb__courier_23_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_23_usascii_t[i] + stb__courier_23_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_23_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_23_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_23_usascii_x[i] + stb__courier_23_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_23_usascii_y[i] + stb__courier_23_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_23_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_23_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_23_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_23_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_23_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_23_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_23_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_23_usascii_LINE_SPACING
#endif

