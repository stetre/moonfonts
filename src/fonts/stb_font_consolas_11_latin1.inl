// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_11_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_11_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_11_latin1_BITMAP_WIDTH         256
#define STB_FONT_consolas_11_latin1_BITMAP_HEIGHT         52
#define STB_FONT_consolas_11_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_consolas_11_latin1_FIRST_CHAR            32
#define STB_FONT_consolas_11_latin1_NUM_CHARS            224

#define STB_FONT_consolas_11_latin1_LINE_SPACING           7

static unsigned int stb__consolas_11_latin1_pixels[]={
    0x8ea0aa55,0xca85502a,0x71144542,0x2ee88200,0x7540bc80,0x5426440e,
    0x40dd8802,0x6dc16a03,0x206ec43b,0xd806205a,0x0e03cb82,0xb800b600,
    0x4dc00499,0x0e65c449,0x88a83193,0x05507502,0x87322055,0x8498753a,
    0x59074c0e,0x2299a8ae,0x22498058,0x40ee1605,0x3b825c0d,0x022221c8,
    0x3004403b,0x88088881,0x02209900,0x2c4026f2,0x980882ec,0x40821eee,
    0x82084eeb,0x2a2ccff8,0x14cd42c9,0x15dcc24c,0x34cf40e4,0x10ccea75,
    0x98762cc3,0x46219ac4,0x75c1a8d8,0x3ae1624f,0x0d824c5f,0x06aaa0e4,
    0x3b8ea1b1,0x2775c126,0xdd713bae,0xb8771d49,0x5c4eeb83,0x66c16405,
    0x3a3b8ea0,0x4cee3a80,0x9dd70b65,0x3165ffd4,0x0aa98155,0x2a60554c,
    0x10554c0a,0x753a966b,0x1342d966,0x5bec9c8d,0xde896cb3,0x376b30ea,
    0x48e98b12,0xc81b0588,0xd71e5541,0x43b8ea9f,0x25b2cc0e,0xb2ccb659,
    0x6c3b8ea5,0x745b2cc6,0x730d01eb,0x2771d417,0x9dc7504a,0x25992a2b,
    0x597ff32d,0x2ae35d5c,0x235d5c6b,0x5d5c6bab,0x983a7666,0x86874751,
    0xc9d8b51c,0x1343a5ab,0xd8ab964d,0xbe88b14a,0x0d817903,0xd13b812e,
    0x50ee3a96,0x5d2a2b87,0x9515d2a2,0x3623b8ea,0x34a8ae1d,0x07503a2b,
    0x71d4d757,0x71d412e7,0x2e598b27,0xcbea92a2,0xe980e982,0xe980e980,
    0x3b30e980,0xbb8ea01d,0x8932c84a,0x2e59cabd,0x2b9624ab,0x22b35559,
    0xd82ee985,0x816a0d82,0x54b1b33b,0x591a0ee3,0x5662cacc,0x71d5662c,
    0x591dddc7,0x0769b2cc,0xa874c01d,0xa82ccee3,0x95164ee3,0x320b3164,
    0xc83b3322,0x33320ecc,0x83b3320e,0x2b30eccc,0x8ea110ea,0x11e80de8,
    0x4aebad8d,0x258837a2,0x9519571d,0x0f55c162,0x390360b1,0x249e8ee0,
    0x8720ee3a,0x51652a2c,0x754a8b29,0x4d11b1dc,0xbd712a2c,0xd9990498,
    0x3e3b8ea1,0x54ee3a81,0x2a2c8765,0x45665904,0x43a2b30e,0x5661d159,
    0x3a2b30e8,0x3a9dcb30,0x6885d875,0x93919074,0x6fc45d81,0x8ed7663e,
    0x43b1b058,0x1c81b049,0xa7754770,0x96207659,0xb2d4765a,0xb31d96a3,
    0xfaaf88ec,0x540ecb50,0x8acc0e45,0x30ecb30e,0xd9663bdd,0xb50fbb21,
    0x3a1d80ec,0x377a0edd,0x83b77a0e,0x37a0edde,0xdd3b30ed,0x361d4ea1,
    0x72cc2d81,0x2c41d805,0x2c47df90,0x930fbfaa,0x20570360,0x3b20dc2c,
    0xec83604e,0x21f7643e,0x77643eec,0x8f6ab6e4,0x76643eec,0xdde81622,
    0x213bb20e,0x84eec83a,0x3eec814a,0x0002eedc,0x40000000,0x0f6a753a,
    0xc89dc12a,0x20f6a2bc,0x22072058,0x75c2c1ce,0x220764c1,0x81d9933e,
    0x0110000c,0x36000000,0x4cc01a61,0x00000440,0xd90000a8,0x00188009,
    0x00000000,0x044ea750,0x44088000,0x20080200,0x04404099,0x44100cc4,
    0x00000301,0x00000000,0x00000000,0x00000000,0x00000000,0x44220000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x20000000,0x1c4b223a,0x06326055,
    0x0a22a0aa,0x2015416c,0x224cdc28,0x85b00dd8,0x8933705a,0xaaa80dd8,
    0x82a816a0,0x26e2a82a,0x21dedc49,0x85b00dd8,0x1150a05a,0x1d40ea05,
    0x82a806a2,0x4644288a,0x0ef6e001,0x49804145,0x641cb46c,0x4c2c9a81,
    0x14cd42bb,0x20390044,0x881042ca,0x10088088,0x22204101,0x07566c08,
    0x0aee6022,0x10477072,0x11110260,0x20220110,0x414cd468,0x7d093049,
    0x8577305b,0x7f5c299a,0x982775c3,0x360e9620,0xb05543ed,0x155095b3,
    0x15501550,0x51ec1550,0xbe81550b,0x3bbba0ee,0xe83bbba0,0x3bba0eee,
    0xd1bbba0e,0x1b2ccddd,0x55437774,0x0ee13140,0x6c1b60db,0x1b60db06,
    0x54055414,0xbc13140a,0x2826283b,0x22fa8826,0x87d47668,0x4074b12b,
    0x89aaf668,0x6abd859b,0x7d075df4,0x75df41d7,0x3a0f4d10,0xb1950ebb,
    0x7703b857,0x41dc0ee0,0xb2541a06,0xd57b0341,0x8ee1b2c4,0x6ec41dd8,
    0x220eec41,0x0eec41dd,0xd1aaf634,0xd9621d77,0x96217760,0xb06cb10d,
    0xfa9d4d57,0x44ae9d53,0x4d2a03a5,0x4e42d99d,0x4b667660,0x7254ee4a,
    0x323b92a7,0x772544ab,0x70eaaaee,0x1dc0ee07,0x1a0683b8,0x1a0f9acc,
    0x896ccecc,0x771dc365,0x43bbb877,0x5ddc3bbb,0xb31dddc3,0x96cceccb,
    0xb2c4ee4a,0x8667ba21,0xb2c43658,0x771d9261,0x3b2a7599,0x3e2d12b8,
    0x754bba60,0x33261ccc,0x3999d54d,0x4773a8ee,0x11d4773a,0x2a3b81dd,
    0x7072bb33,0x1dc0ee07,0x5eee83b8,0x3762f774,0x97bba0db,0xb11cccea,
    0x2363a86c,0x23446c68,0x446c688d,0x1b3446c6,0x71cccea8,0x36589d47,
    0x45bd3590,0xb2c43658,0xf52c8ea1,0x5ddd4ee5,0x99bdf12b,0xd81a23a0,
    0x4c1a2b58,0x3b2cc765,0x25c1d966,0x7e43b2cc,0x7703b84e,0x41dc0ee0,
    0x06c01a06,0x1681a20d,0x57c4221d,0xf55f10fa,0x43eabe21,0xf10faaf8,
    0x10b61f55,0x21d9660d,0x5cb21d16,0x20e8b40f,0xe9661d16,0x3a874d10,
    0x4016257d,0x21bbf70e,0x7dc7bb2b,0x13bb20dd,0xeec89dd9,0xdd903b84,
    0x0ee02a89,0x703b81dc,0x80340d07,0xdfb81a0d,0x4377b20d,0x7b55b74c,
    0x5cf6ab6e,0x5b73daad,0x2ab6e7b5,0x5c3bd13d,0x3bb20ddf,0x886ef644,
    0x7644deee,0x377b20dd,0xd70fbb20,0x2eb9d47d,0x3bba20b1,0x00000002,
    0x00770000,0x77774010,0xe83bbba0,0x3bba0eee,0xd1bbba0e,0x3a040ddd,
    0x400006ee,0x30eda61d,0x3b69876d,0x1a61db4c,0x00000011,0x00000000,
    0x022f89d4,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x98000000,0x0005b01b,0x00000000,
    0x2e035551,0x03513000,0x86607102,0x91003318,0x75000e21,0x10c98550,
    0x00144547,0x85530000,0x432218c9,0x0000aa38,0xeee80000,0x322f6445,
    0x0baa25dd,0x3ddd3011,0xdb17774c,0x22775cbd,0xb8ea4ddc,0x407eaba3,
    0x3a21620d,0x3bb20ead,0xb2cc1625,0xede892e5,0x4c721b50,0x84981cdf,
    0x47622bb9,0xa8a66a1c,0x3bf20f25,0x56dc0d14,0xb5164d43,0xb8390721,
    0x4953aaaa,0x4ae1f53b,0x0683eef8,0x0e9a20b6,0x8dddd344,0x400e880e,
    0xb96cb359,0x4753b98b,0x543cd13b,0x55d730ea,0xd32c9a21,0xd06a3620,
    0x0ee089a1,0x2b324c64,0x206aa0e8,0x4de441aa,0x4f40d544,0xf88db068,
    0x3303c3ee,0x4498c815,0xa645c1aa,0xea9dc953,0x3c5a2574,0x236204f4,
    0x23557409,0x2541a5a8,0x759803b8,0xae8da545,0xd1dc7558,0xeacd89b9,
    0x2155d730,0x17c4b258,0x70756f44,0x391d4957,0x4b316260,0x2a132a2b,
    0x42c5cc4c,0x1dd984ca,0xb3446ba8,0x67441a23,0x542c4c6b,0x27371c4c,
    0x7654ee4a,0x1a2d12b8,0xbf993b2e,0x0bfe60eb,0x4b83417d,0x20fb6590,
    0xdacc5959,0x771d563a,0x4b302366,0x9621620d,0x88bb661e,0x0de88b26,
    0x166f4cea,0x557fa0e4,0x049824c4,0x64126039,0x27dd1b05,0x81e8b268,
    0x13903668,0x29938930,0x27dddd53,0xf12bbbba,0x30e803fb,0x88e89dc9,
    0x3bba1a1e,0x71dc1665,0xa8b2b307,0x2b17d1b4,0x77c4ee3a,0x06c950de,
    0x7dbf10b1,0x72c43a20,0x91dc5d85,0x47e72603,0x0930f259,0x3e726126,
    0x372224c1,0x1a7660ce,0x4c1d73d1,0x0d9626ee,0x930f2b26,0x24a9c538,
    0x4afa753b,0x34405968,0x259964d1,0xe81a062d,0x4770e981,0x1d96a970,
    0x2ccee677,0x33b92a3b,0x10d03e6b,0x2c47600b,0x1dc1d83b,0x33a36039,
    0x303a6b32,0x23612609,0x5424c2ce,0x2af20add,0x405e7c47,0x41b2c43a,
    0x4498590d,0x2e4a9c93,0x44bae753,0x3ddd0d16,0x76c4deb8,0x81a0fc5e,
    0x3aa1dec9,0x83bba2ee,0x6ee43eec,0xd3277644,0x676c1d99,0x88775c0d,
    0x49ddd505,0x36a3ede8,0xddf54b83,0x9ed4ae3d,0x7741def9,0x3bfba1ef,
    0xe8f6a571,0x33261efe,0x229dd341,0x96205406,0x8fae570d,0x5571efee,
    0x3b92a755,0x344be275,0x00000059,0x001bbba0,0x00000000,0x80000662,
    0x04400000,0x00000088,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x382cb800,0x710aa000,0x02ca8000,0x00cc0000,0x00000000,
    0x00000000,0x00000000,0xa8a60000,0x4502ee61,0x54055409,0x222b981b,
    0x9800299b,0x41a12e21,0x5c2feee9,0xef882c43,0x509cb84f,0x7db916cb,
    0xaecb106c,0x3e21a21e,0x74c5a444,0xef88db05,0x31776c3d,0x8f65fddd,
    0x8777745a,0x0761d158,0x26a9bbba,0x7dddd53e,0xdea9bbba,0x076e741c,
    0xb2c4d757,0x363556c1,0x1d6dc2ab,0x2697bb53,0x25db31dc,0x53424c5d,
    0x1aa83a01,0xd1054ec4,0x36036174,0x0e96659a,0x5c22c439,0x93360ee4,
    0x910d9ca8,0x43bb10b5,0xf1183a68,0x3a689a60,0xdac43b81,0x5c1a0761,
    0x1dc3d99e,0x0e89d41a,0x74c1a676,0xd986cb10,0x40ba2c88,0x562ee206,
    0xb11b3da8,0x4bb424c0,0x44ca8950,0x9a26bdf8,0x399f952d,0x49507744,
    0x9133391c,0x540d9a20,0x2f3264ac,0x5dc2cc2d,0x0345a23b,0x57907a0f,
    0x9b10ee09,0x70681d85,0x3b875997,0x8ae3a834,0x1d7991e7,0x9d50d962,
    0x1f644399,0x5eeedc1a,0x2b277573,0x3a126049,0x2603a04b,0x221b3444,
    0x3a626bae,0x222ec099,0x9572ebbe,0x3d15c93b,0x895688d1,0x859839ab,
    0x3be2688d,0x7707904e,0x2e01dd10,0x0ec37443,0xb392f774,0x743b893b,
    0x4a8ea5ee,0x15896af6,0x10e8b41d,0x03b1e00d,0xac98971b,0x06619911,
    0x205bf093,0x5889304a,0x81574436,0x41dd980e,0xb570d898,0x7735c75b,
    0xdcacc875,0x85bbbd71,0x7d57c459,0x2e16cd10,0x12e06984,0x25ec43b8,
    0x4e41a076,0x21dc49aa,0x89e47506,0x37a0ecce,0x377b20dd,0xe8377ae0,
    0x36ecc4ed,0x2e7b97b7,0x299974cc,0xeb424c5c,0x89300e82,0x03443658,
    0x1a67a03a,0xb55b52d4,0x1bd12547,0x21dcaaa8,0x45981b8c,0xd13daadb,
    0x3a0970f4,0x3b80ee01,0x0763dac4,0x8b30e41a,0x33a8343b,0x0098621d,
    0x00402000,0x11022000,0xd0f7f740,0xd04a87a2,0xd9623dfd,0x40e80d10,
    0xcde9324c,0x4be23e60,0x203740cb,0x740cac4a,0x4c3b1efe,0x4c7ddf16,
    0xdf52eeef,0xd03b85dd,0x45621ddd,0x23dddb1e,0x88766eee,0x541a1dc5,
    0x00001dee,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00aa8000,0x19806e93,
    0x26001a94,0x22a260a8,0x5405dc42,0x062aaa82,0x2633144a,0x40000621,
    0x93264419,0x05503107,0x02666620,0x54432e20,0x2a95c2aa,0x88982662,
    0x514c0aa2,0x54ca6aa5,0x3332991a,0x000ea4cc,0xd57d0000,0x5b10da81,
    0xd5bd0ea0,0xd12c4743,0x6e6dcd59,0x1957912b,0x6caa82a8,0x27a58872,
    0x0e4b30e8,0x072b1693,0x259310ea,0x2aae1d88,0x132132e3,0x26177771,
    0x339388ee,0x83aeee2b,0x5544bb6c,0x170a26a0,0xbba5c488,0x2e57734b,
    0x43333334,0x0000000a,0x12e2b92a,0x7bb73264,0xd30d43a3,0x21b3443b,
    0x3539baab,0x2aa25199,0x2e0e81aa,0x3a249bb9,0x2344741d,0x46542b8d,
    0x86b32a25,0x887b20e8,0x2624c1ed,0x2aaa21cb,0x5dd3370a,0x06416236,
    0x00000097,0x0eaae750,0x00000000,0x4751dc00,0x544b703d,0x440d0acc,
    0x0d9620ee,0x26735537,0x77319cca,0x542c8377,0x2ec3adda,0x23a1d5dc,
    0x30eacc1c,0x3a637bb7,0xbc8ee20a,0x5836a24b,0x555544b1,0x0eecc100,
    0x00001dc0,0x00000000,0x80000000,0x89707659,0x0687504c,0x2589a676,
    0x7355370d,0x0cc25ddc,0x666cc254,0x10f32e2d,0x58ca81bd,0x1d415c6c,
    0x5e54b32a,0x332a14c0,0x0004c312,0x00000000,0x00000000,0x00000000,
    0x540fbb20,0x20c40594,0x96208206,0x7355370d,0x88770088,0x3f10eeef,
    0x1e9a61f3,0x081082ec,0x0000a601,0x00000000,0x00000000,0x00000000,
    0x00000000,0x3ba60000,0x000001ee,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_11_latin1_x[224]={ 0,2,1,0,0,0,0,2,1,1,0,0,1,1,
2,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,
2,0,0,0,1,0,0,1,0,0,1,0,1,1,0,0,0,2,2,1,1,0,0,0,0,1,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__consolas_11_latin1_y[224]={ 8,0,0,0,-1,0,0,0,0,0,0,2,6,4,
6,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,2,0,2,0,2,0,2,0,0,
0,0,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,0,-1,0,3,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,2,-1,0,1,0,
-1,0,0,0,0,2,4,4,0,0,0,1,0,0,0,2,0,4,8,0,0,2,0,0,0,2,-1,-1,-1,-1,
-1,-2,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,0,0,0,0,
0,0,0,-1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,
 };
static unsigned short stb__consolas_11_latin1_w[224]={ 0,2,4,6,6,6,7,2,4,4,6,6,3,4,
2,6,6,6,6,6,6,6,6,6,6,6,2,3,5,6,5,4,6,6,6,6,6,5,5,6,6,6,5,6,
5,6,6,6,6,7,6,6,6,6,7,6,6,7,6,4,6,4,6,7,4,6,6,6,6,6,6,6,6,6,
5,6,6,6,6,6,6,6,5,6,6,6,6,6,6,6,6,5,2,5,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,2,5,6,6,6,
2,6,5,6,4,6,6,4,6,5,4,6,4,4,6,6,6,2,2,4,4,6,6,6,6,4,6,6,6,6,
6,6,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
 };
static unsigned short stb__consolas_11_latin1_h[224]={ 0,9,3,8,11,9,9,3,11,11,5,6,4,2,
3,10,9,8,8,9,8,9,9,8,9,8,7,8,7,4,7,9,11,8,8,9,8,8,8,9,8,8,9,8,
8,8,8,9,8,10,8,9,8,9,8,8,8,8,8,11,10,11,5,2,3,7,9,7,9,7,8,9,8,8,
11,8,8,6,6,7,9,9,6,7,9,7,6,6,6,9,6,11,12,11,4,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,11,8,7,8,
12,10,3,9,7,6,4,2,6,3,4,7,5,5,3,9,10,2,2,5,7,6,8,8,8,9,9,9,9,9,
9,10,8,10,9,9,9,9,9,9,9,9,8,9,10,10,10,10,10,6,11,10,10,10,10,9,8,9,9,9,
9,9,9,10,7,8,9,9,9,9,8,8,8,8,9,8,9,9,9,9,9,6,9,9,9,9,9,11,11,11,
 };
static unsigned short stb__consolas_11_latin1_s[224]={ 255,135,206,90,57,8,199,203,19,14,127,
110,172,211,176,156,228,97,118,249,83,1,8,15,15,57,252,71,8,146,14,
22,24,104,111,34,186,160,180,41,233,140,48,147,154,166,240,54,36,191,247,
103,173,68,75,64,50,132,125,52,100,70,139,219,191,200,110,228,82,214,43,
75,29,22,81,8,1,47,40,1,96,107,27,221,89,207,89,75,82,117,68,
75,4,64,153,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,
226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,255,124,87,
127,193,176,1,149,185,61,242,96,165,211,54,179,160,20,117,122,196,242,206,
216,227,134,247,103,134,212,162,173,166,159,152,145,138,135,183,177,114,27,100,
93,86,79,72,65,141,235,107,142,121,114,199,33,45,128,170,93,184,43,191,
248,241,227,234,213,220,163,235,198,15,1,121,178,219,148,155,169,221,205,51,
185,29,22,36,61,58,128,192,207,214,7,38,31, };
static unsigned short stb__consolas_11_latin1_t[224]={ 1,14,43,34,1,14,14,43,1,1,43,
43,43,43,43,1,14,34,34,14,34,24,24,34,24,34,34,34,43,43,43,
24,1,34,34,24,34,34,34,24,24,34,24,34,34,34,24,24,34,1,24,
24,34,24,34,34,34,34,34,1,1,1,43,43,43,34,24,34,24,34,34,
24,34,34,1,34,34,43,43,43,24,14,43,34,24,34,43,43,43,24,43,
1,1,1,43,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,1,24,1,
24,34,24,1,1,43,24,34,43,43,43,43,43,43,43,43,43,43,14,1,
43,43,43,34,43,24,24,24,14,14,14,14,14,14,1,24,1,14,24,14,
14,14,14,14,14,24,14,1,1,1,1,1,43,1,1,1,1,1,14,24,
1,1,1,1,1,1,1,34,24,14,14,14,14,24,24,24,24,14,24,14,
14,14,14,14,43,14,14,14,14,14,1,1,1, };
static unsigned short stb__consolas_11_latin1_a[224]={ 97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_11_latin1_BITMAP_HEIGHT or STB_FONT_consolas_11_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_11_latin1(stb_fontchar font[STB_FONT_consolas_11_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_11_latin1_BITMAP_HEIGHT][STB_FONT_consolas_11_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_11_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_11_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_11_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_11_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_11_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_11_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_11_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_11_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_11_latin1_s[i] + stb__consolas_11_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_11_latin1_t[i] + stb__consolas_11_latin1_h[i]) * recip_height;
            font[i].x0 = stb__consolas_11_latin1_x[i];
            font[i].y0 = stb__consolas_11_latin1_y[i];
            font[i].x1 = stb__consolas_11_latin1_x[i] + stb__consolas_11_latin1_w[i];
            font[i].y1 = stb__consolas_11_latin1_y[i] + stb__consolas_11_latin1_h[i];
            font[i].advance_int = (stb__consolas_11_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_11_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_11_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_11_latin1_s[i] + stb__consolas_11_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_11_latin1_t[i] + stb__consolas_11_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_11_latin1_x[i] - 0.5f;
            font[i].y0f = stb__consolas_11_latin1_y[i] - 0.5f;
            font[i].x1f = stb__consolas_11_latin1_x[i] + stb__consolas_11_latin1_w[i] + 0.5f;
            font[i].y1f = stb__consolas_11_latin1_y[i] + stb__consolas_11_latin1_h[i] + 0.5f;
            font[i].advance = stb__consolas_11_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_11_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_11_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_11_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_11_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_11_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_11_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_11_latin1_LINE_SPACING
#endif

