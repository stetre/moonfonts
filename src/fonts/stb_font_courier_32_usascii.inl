// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_32_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_32_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_32_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_32_usascii_BITMAP_HEIGHT        100
#define STB_FONT_courier_32_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_32_usascii_FIRST_CHAR            32
#define STB_FONT_courier_32_usascii_NUM_CHARS             95

#define STB_FONT_courier_32_usascii_LINE_SPACING          15

static unsigned int stb__courier_32_usascii_pixels[]={
    0x000075c0,0x20008400,0xaaa98208,0x20801201,0x01555500,0x0004d4c4,
    0x5400cc51,0x5cc02cec,0x198001bc,0x00198800,0x55555554,0x100c881a,
    0x95100037,0xca880059,0x1797102c,0x741f9000,0xad400001,0xa7e403fd,
    0x17bbb678,0x26a803c4,0x3eeef84d,0x9fdbdf90,0x03c96a00,0x1fe567e4,
    0x3fdbdfb8,0x6c47ffcc,0x402dfeff,0x0dffefe9,0xeee83fff,0xc85eeeee,
    0xdcadc84f,0xbced9800,0x6c400dfd,0x4c1dbcef,0x004fdcff,0x00b907e4,
    0x1e62e800,0x41e20e98,0x037f505a,0x81f51fc4,0x037a200f,0x5b801db1,
    0x40eb80f2,0x20fd42f8,0x4fccc2f9,0x817dc0ce,0x3f220bfb,0x01e81af9,
    0x1261fe40,0x82f98093,0x37a605d8,0x261fc400,0x1062002d,0x2a00001f,
    0x89902d86,0xea8b5078,0x40fdfecf,0x3e2f40fc,0xb9013a00,0x40b64b80,
    0xe89901f8,0x3fe0d703,0xf30be202,0x807fd403,0x1fdc001e,0x11016072,
    0x7c40fcc0,0x220b5003,0x2640000e,0xc83e8000,0x07887b03,0x220f54b5,
    0x5c27c0fd,0x35403e0f,0x93202e80,0x4c0b702e,0x7c403ea7,0x5b805f81,
    0x07e401ec,0x7dc001e8,0x002c0e43,0x026c1ec0,0x026407b0,0x0003e600,
    0x40f20f30,0x5a83c43d,0x507c40ba,0x7c7f103f,0x2a005f00,0x01e8f206,
    0xf73c407b,0x02f83d80,0x4007c788,0x003d00f9,0x224c2fa8,0x1f800049,
    0xf88007d4,0xff316600,0x85ffffff,0x1ec0003d,0x887b03c8,0x01e2b507,
    0xf3640db0,0xf800f101,0x80fc5b00,0x27edb82e,0x7c26405c,0x1e23d000,
    0x1e807c40,0x2fa80331,0x00dcadc8,0x1e43dc00,0x4401f100,0x99999986,
    0x003cc2e9,0x0f201f30,0x541e21ec,0x7c400ba5,0x07c7ee04,0x8ba00354,
    0xfaaceaa9,0xd107c2ab,0x01ecf59f,0x4007e16e,0x3001f10f,0x3fb7a01f,
    0x3f504fff,0xb5106e20,0x7ed4c403,0x06a21e81,0x03f603e8,0x03e82d80,
    0x1e409b00,0xa83c43d8,0x5002baa5,0xf9fd407f,0x6c004b80,0x3bbfbae3,
    0x3e0deefe,0x3a789b60,0x1fc2d402,0x00ba3cc0,0x5eec03ee,0xf30dd711,
    0x7db71003,0x0fffd801,0xfdfb11f0,0x2a0d903f,0x0b6001ee,0x3e2001aa,
    0x17c16e00,0x2a2d41e2,0x5c0acefd,0x7d3e202f,0x6c004b80,0x81e23f03,
    0x27887e0f,0x7c2d402e,0x2e1f400f,0x03fe200e,0x3e61fc00,0x17bb7100,
    0x0eda8800,0x911debc4,0x5c3bb03f,0x36002d8f,0xc8005d02,0xa8ef4404,
    0xb507885e,0x917edd40,0x1f5f801f,0x2e800d50,0xf81e61f0,0xd3c41f10,
    0xcf85a805,0xb06d881e,0x1f9d301d,0xf11b2000,0x05ef5c41,0x41fb8000,
    0x10d905df,0x3a3bfdfb,0x540b6001,0x007e2006,0x427e4ff6,0x200b5078,
    0x801f91fa,0x0f301f5f,0x0f880f80,0x7907c0d3,0xc807b3c4,0xcdfa8f85,
    0x7e404fdb,0x1f3fdcbd,0x1a1e6000,0x2db88151,0xfd132000,0x4407e601,
    0xb0007c0a,0xb8017405,0x4c0eb805,0x5a83c41f,0x0fdd3200,0x403e9f10,
    0x44d7002e,0xfdccfccc,0xf307c2cc,0x1321f77d,0x221f09d0,0x3001bcca,
    0x07c15997,0x000f8800,0x05b8ad98,0x02d8d300,0x0d300174,0x16e02d80,
    0x1e400fc0,0xa83c43d8,0x54b80175,0xf9fcc05f,0x3a00d500,0x33f73222,
    0x742ccedc,0x72edda81,0x0f82f80b,0x0f800000,0x000f3000,0x00037036,
    0x7404b8f1,0x00176001,0x00fc405b,0x81e401ae,0x5a83c43d,0x98fc409d,
    0x7cbea04f,0xbb017a00,0x409734c0,0x03e2002d,0x007c07cc,0x007c0000,
    0x88005b80,0xc8004885,0x0f3034c6,0x20007d40,0x202e402d,0x2079002e,
    0x5a83c43d,0x5d9819fd,0x7cf902f4,0x107ba200,0x92d401bb,0x2002dc09,
    0x3e09b04d,0xf8000000,0xf100ec40,0x2c00a883,0x880511d4,0x9903d82f,
    0x000bea00,0x01f100b6,0x03c801aa,0xb507887b,0x3f7faeb6,0x807dc0df,
    0x91003e4e,0x009ffdff,0xf101e4b5,0x21fcc003,0x001f00fc,0x901f0000,
    0x84fa817f,0x216407ff,0x20bba20d,0x19d104e9,0x98107f22,0x5b0002fd,
    0x0ba09900,0x87b03c80,0x2a0b5078,0x07f100af,0x8007c3f5,0x2e001cfa,
    0x1d700b64,0xdfd30510,0xfee981df,0x00003eee,0x3ddfddd5,0xffeefd98,
    0x880fff02,0xd502dcdc,0x805ffddf,0x81ffefd9,0x00cefeef,0x2200ba00,
    0x2003d40f,0x7887903d,0x01e20b50,0x1f1ba1f6,0x579bf900,0x9320ae21,
    0xacfc802d,0x2a602fcb,0x2aaaaa00,0x5100000a,0x40155555,0x054401a9,
    0x54c00300,0x00d44001,0x200002a6,0x89b001f8,0x807c003e,0x5a83c469,
    0x5f100f10,0x003e17cc,0xfd99bdfb,0x47901bff,0x7b93001e,0x00000015,
    0x00000000,0x00000000,0x00000000,0x2007b800,0x001f30f9,0x5dd017ee,
    0x5dccb9e2,0x9b200f10,0x2cccf85c,0x80260088,0x0000321a,0x00000000,
    0x00000000,0x00000000,0x00000000,0xb000fee2,0x1b800f67,0x971c5500,
    0x001c0799,0x66640547,0x0000002c,0x00000000,0x00000000,0x00000000,
    0x00000000,0xdddd5000,0x110005ff,0x00000002,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xaaaa8800,0x00000001,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x54000000,0x2200002a,0x65cc000a,0x5555501b,
    0x00355555,0x88002aa8,0x01aa8819,0x00055500,0x0015554c,0x4fffd800,
    0x00ffffa8,0x2a2001ae,0x65cc000a,0x154c001b,0x31000a20,0x01333333,
    0x0007f74c,0x3bfbfea0,0xfc89ff93,0x7c44febe,0xeeeeeeee,0x3ba6003f,
    0xfeb8800f,0xdd91ffff,0xfdd30009,0xddd10001,0x003c00fd,0x26013bb1,
    0x03e401eb,0xbfbbfd30,0xcdfe8805,0xdf1003ff,0x0ffb710d,0x7ffffd40,
    0xf802ffff,0x0bee0000,0x413999d3,0x1274c1ec,0x0007b00f,0x0772003e,
    0x00097031,0x880000f8,0x8003e007,0x01ec00f9,0x3fa803e4,0x7f102fa8,
    0x99007d50,0x9befc8d5,0x03c40007,0x980007c0,0x10ffa00f,0x383ea05f,
    0xf0001f80,0x000f8801,0x1f00012e,0x00f10000,0x1360007c,0x03100798,
    0x74c03f30,0x3ea05c81,0x1aa3e600,0x0003c411,0x03e001e2,0x2201f400,
    0x3e03543f,0x001e6002,0x02dc00f8,0xf00012e0,0x0f100001,0x260007c0,
    0x0007b00f,0xea803e80,0x0be00740,0x880d53d8,0x03c40007,0x026607c0,
    0x87d001f0,0x0017406a,0xf0330099,0x4005b801,0xf000cc4b,0x0f100001,
    0xffffffd8,0x0f606fff,0x500001e6,0x0017400d,0x2a6a81ec,0x0003c406,
    0x43e001e2,0x81efeffc,0x887b0079,0x800f501f,0xfdfb301e,0x2e03e1bf,
    0xffffffff,0x3f29705f,0x0f805fff,0x017fffe2,0xf33101e2,0x01333333,
    0x80f607cc,0x00fffff8,0x04b800f2,0x45d01e80,0x003c406a,0x3e001e20,
    0x3ee20de9,0x3d803c43,0x274c1ec8,0x3e60f300,0x3e3b220b,0x9dc99880,
    0xb7009999,0x02ed43bd,0x137f703e,0x7c00f100,0x4c7b0000,0x4ccc400f,
    0x800b600f,0x82e40059,0x2203545b,0x03c40007,0xf3027fc0,0x3f801f83,
    0x7ff9df70,0xf885b800,0x003fae01,0x4fb800b7,0x07c03f10,0x788005f7,
    0x40003e00,0x0007b0f9,0x000fc01f,0x075c00f1,0x01aa0fc4,0x788000f1,
    0xc806f800,0x3f2035c5,0xffbff703,0xc82e8005,0x400fd804,0x02dc005b,
    0xd90f80f6,0x00f10003,0x7b00007c,0x1f0001f3,0xf1000f40,0x6c03ee00,
    0x3c406a84,0x001e2000,0x21e200be,0x3deb80de,0x27542ec8,0x0e80f880,
    0x5c00f980,0x2025c005,0x3b67e04c,0x00f10000,0xf300007c,0x03e0009b,
    0x166002d8,0x7cc07ee0,0x3c406a80,0x07880790,0x3f001f80,0xecbdfd88,
    0x07cc3c8d,0x5a801f98,0x1f100788,0x5c005b80,0xdf026404,0x3c4000bf,
    0x80001f00,0x1f0000fd,0x97001e40,0x3a01fb80,0x7880d503,0x0f100f20,
    0x3a003f00,0x43797301,0x3602e43c,0x7882d803,0xb801f100,0x2025c005,
    0x2ecfe04c,0x20078800,0x26c0000f,0x5401f000,0xc80ba006,0x7fffc00e,
    0x02ffffff,0x201e40f1,0x02f80079,0x79000788,0x02dc03d8,0x800e807c,
    0x02dc00f9,0x099012e0,0x000bb07c,0x007c00f1,0x0001f100,0x00fa007c,
    0x076403aa,0x4cccccc0,0x1e201eb9,0x02dc03c8,0x35c02fc0,0x3642e800,
    0x0d500fa0,0x07e401e4,0x970016e0,0x03e04c80,0x078800bb,0xc8000ba0,
    0x007c0004,0x1e980be6,0x00001db0,0x207880d5,0x05d100dc,0x4c07ff00,
    0x0f98001f,0x1f980fcc,0x3f301e40,0x2007fd40,0x025c005b,0x440f8132,
    0x01e2005e,0x5d981ea8,0x80001f10,0x0bfa800f,0x0dd817d4,0x35400220,
    0xed881e20,0x2002f442,0xa84e9f98,0x3fa8003f,0x2e217d90,0x400f803f,
    0xf9eb83f9,0x6e4cc40a,0x93019999,0x0736603b,0x9f301f31,0x99998813,
    0x2009999f,0xbffeefec,0xdfdddd90,0x3331001d,0x013333f3,0x37fbbfa2,
    0x3333d902,0x80793333,0x4cc1eb98,0x81999f99,0x03feeffa,0x447ffcc0,
    0x01efeefd,0x7ff77744,0x7f7fd402,0x0069802f,0x1bfddfd3,0xffe8bffe,
    0x2fffffff,0x227fffd4,0xf33ffffb,0xffff01ff,0x7ffffccf,0x01ffffff,
    0x54c04d4c,0x802aaaaa,0xfffffff9,0x2201ffff,0xfffc802a,0x4fffffff,
    0x3ffffe20,0xffffffb2,0x2a209fff,0x98000009,0x2aaa001a,0x0d4c001a,
    0x2a200000,0x00000009,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x004d5440,0x3002aa60,0x99881333,
    0x1bba8819,0x01555100,0x4ccccccc,0x26199999,0x00199999,0x44026666,
    0x4ccc1999,0x98333100,0x13310099,0x99999988,0x19999800,0x98819988,
    0x33310099,0x99999981,0x09998199,0x4c409998,0x00019999,0x7feeff64,
    0x3fb205ac,0x24a9effd,0x746ffffd,0xfd55ffff,0x203dfd9d,0xcffdffd8,
    0x7ffffc5a,0x7fffffff,0xfffffff9,0x7fec07df,0xffff07ff,0x1fffee9f,
    0x5cbfffe2,0xff887fff,0xffff12ff,0xfc80dfff,0x3e63ffff,0x3fea3fff,
    0x7fd41fff,0xfffb1fff,0x49ffffff,0x7ec6fffe,0x3ffea7ff,0x04efffff,
    0x6cc0f6c0,0x981bb05f,0x03c45efc,0x302fe0f8,0x1de881f9,0x03e2fecc,
    0x5b8f30f1,0x7405fc98,0x3a0d5001,0x7c42e403,0xb0075c02,0x80b70007,
    0x007980dd,0x00f1007c,0x304c80b7,0x01dd710f,0x5d801d90,0x2fcc04d8,
    0xf07c01e2,0x1ee27401,0x207c5f88,0x2dc79878,0x04b813e0,0x03e607b0,
    0x0f9807cc,0x3d803f30,0xd105b800,0x1003c40b,0xb807880f,0x79826405,
    0x3ea02ec0,0x7d45a800,0x3c45d800,0x700a0f80,0x2dc03d8d,0xf30f103e,
    0x03dc05b8,0x0f8801f1,0x01f41ae0,0x00ba21ae,0x16e000f6,0x03e013a2,
    0x40698395,0x405b8078,0x980f304c,0x000f200f,0x851002c8,0x001f0078,
    0x200f63cc,0x21e207c0,0x2202dc79,0x2e016c07,0x35c3e805,0x026c4d80,
    0x5b8003d8,0x1e801fcc,0x016a27ec,0x80b700f1,0xd00f304c,0x0000f405,
    0x3c40001f,0x32000f80,0x2c0035c4,0x2e2443c4,0x2a025c05,0x4c017406,
    0x2003f10f,0x400d73e8,0x25b8003d,0x0b6002fa,0x405b8d7f,0x405b8078,
    0x880f304c,0x000f100f,0x220003c4,0x2001f007,0x0aed81fb,0x401e2000,
    0x007ee05b,0x003cc07e,0x3000f6b9,0x6c001f7f,0xf55b8003,0x263c8005,
    0x2025c1f6,0x405b8078,0xc80f304c,0x8001e606,0x3c400069,0x2e200f80,
    0x3f6a01ee,0x22001bde,0x555d7007,0x2001bdb7,0x8009904c,0xf70006de,
    0x003d8005,0x2fefbdb8,0xb4c93200,0x1e201e47,0x3ffffee0,0xf304ffff,
    0x9803f660,0x26666207,0x8000d309,0x401f0078,0x54c002ee,0x0f1004fc,
    0x3bbbbee0,0x83cc003f,0x0fcc001f,0x005fe800,0x7dc001ec,0x2009f70e,
    0xb2d4ba5b,0xb8078805,0x9999999d,0xdddf304d,0x88019ffd,0x3ffffe07,
    0x8000f16f,0x401f0078,0x6c40001e,0x70078805,0x8003f90b,0x4003542e,
    0xec8000f8,0x0f6003e8,0x40eb8150,0x15a802e9,0x01e9e21f,0x02dc03c4,
    0x557cc132,0x3e0009aa,0x1f8b5000,0x201e2000,0x003200f8,0x1003e200,
    0x5416e00f,0xb16e001f,0x01f10007,0x3f10fa80,0x5d00f600,0x01f305b8,
    0x2e8b5698,0x8078801f,0x9826405b,0x02e80007,0x003d8b50,0x1e600f40,
    0x20053000,0x803c402e,0x003ea05b,0x00f887c4,0x2000f880,0x007d41f8,
    0x70ba01ec,0x22026c0b,0x78cc87b7,0x5b807880,0x07982640,0x5006b800,
    0x7001f88b,0x05c80790,0x2007dc00,0x03c401f8,0x026c05b8,0x0016e790,
    0x7d0007c4,0x0f601b20,0x205b85d0,0x7c7c00f9,0x403c74c1,0x405b8078,
    0x000f304c,0x16a01360,0x6d8803ae,0x3f300fa8,0xf70154c0,0x8806c809,
    0x880b7007,0x3ad3001f,0x01f10002,0x09b01720,0x217403d8,0x201f405b,
    0x0d7f07be,0x0b700f10,0x00f304c8,0x40bb6200,0x05f905d9,0x3ae01bd3,
    0xf1027cc1,0x3fae07ff,0x101fb82c,0x0333f333,0xb8067726,0x0f9d001e,
    0x33f33300,0x027ee203,0x3105fd44,0x333339b3,0x6dcc5d33,0x013d5019,
    0x2f6c17b6,0x99f99998,0x04edcc19,0x53073662,0x0003333f,0xfeeeffb8,
    0x3faa00be,0xb803ffee,0x403ffeef,0x9503fff8,0xdfddffb1,0x7fffec03,
    0x7fe45fff,0x3fa03fff,0x004fb804,0x7fffffec,0xffffd85f,0xaffffcc1,
    0xfffffff8,0x92ffffff,0x207fffff,0x2fc80fff,0xffb09f70,0x9fffffff,
    0xb1bfffea,0x3ea7ffff,0x03ffffff,0x1aa98800,0x00554400,0x8004d4c0,
    0x262002a8,0x000001aa,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x99999998,0x26099999,0x99999999,
    0x4cccc199,0x99880099,0x09999999,0x4ccccccc,0x00998800,0x33106666,
    0x44026600,0x00099999,0x083bdda8,0x00100000,0x9f910000,0x00035300,
    0x30001331,0x15100015,0x3fffff20,0x5fffffff,0xfffffff9,0x361fffff,
    0xefffffff,0xffff700c,0x647fffff,0xffffffff,0xfff980cf,0xbffffb06,
    0x500fffe6,0xff885fff,0x4004ffff,0xe83ebbee,0x3c00001d,0x85f70000,
    0x6442fffb,0x02ffeffe,0xeffeffa8,0xffb102b9,0xf7007ffd,0x2e07ffdf,
    0x2dc5b804,0x103e07c0,0x09703f95,0x885b82e8,0x3fe00fdb,0x67407c02,
    0x803df406,0x3000f9f8,0x33f2200d,0x07880000,0x82eea800,0x6542fffa,
    0x803ea20a,0x7fdcc1ed,0x30adfa83,0x3ba20bf9,0x2e0774c1,0x2dc5b804,
    0x803e07c0,0x9025c0fa,0xbb016e0b,0xf007dfc0,0x205d3d01,0xb70078f9,
    0x01e400b6,0x000ff620,0x4c000f10,0x1f5c03fd,0xeb825c00,0xf10fea00,
    0x4d84e807,0x012e2ec0,0xf00b716e,0x26400f81,0x807d412e,0xf03cc05b,
    0x407c09b1,0x17905b9e,0x3547a00f,0x30004b80,0x220005fb,0xcfc88007,
    0x4c000000,0xd801f887,0x7d4036c3,0x3a201aa1,0x0a2012e2,0x1f0700b7,
    0x12e1f880,0x05b80be2,0xf11f03cc,0x47a03e03,0x3c47c41f,0x01f13cc0,
    0x40001f10,0x44001eea,0x067dc007,0x554c0000,0x06a87889,0x2005f010,
    0x5c00f63d,0x00d112e4,0xf80688b7,0xd803c800,0x3202dc04,0x82dc3e05,
    0x8991e80f,0x9900f15b,0x0b7003c8,0x03bf7000,0x7d401e20,0x4400001d,
    0xffeeeffc,0x10004b87,0xdddddddf,0x0f49dddd,0x112e6a80,0x788b700f,
    0x4b800f80,0x2dc035c0,0xf0076d44,0x407c1741,0x8fc1f11e,0x4c1f8078,
    0x42ffa806,0x7e440008,0x33332e0c,0x3cccccfc,0x20005dd5,0x6f440998,
    0x0990f501,0x2aafe200,0xaaaaaaaa,0x34c007a1,0x0ffffff7,0xffffff70,
    0xb5001f00,0x5c00fcc0,0xffffffff,0x0d507c01,0x9ec3d01f,0xd501e26a,
    0x9ec807a0,0x2003fc6a,0x66543fc8,0xccccfccc,0x005fd32c,0xd90fffe0,
    0x05a87880,0x40007a00,0x5c97003d,0x807a999d,0x07a999db,0x05a800f8,
    0x4edc00fa,0x3fca9999,0xf87b03e0,0x75a61e80,0x07b01e22,0x360f816e,
    0xfb800d54,0x00f1000c,0x98007baa,0x402f86ff,0x000f9879,0x2e000b90,
    0x25c5d006,0x116e01e2,0x7001f00f,0xb8017209,0xf8274405,0x01f07cc0,
    0x447ce83d,0x3337e207,0xa80fdccc,0x01ecfc46,0x4001dfa8,0x6fdc0078,
    0x81ffc800,0x41fa603d,0xe87a805c,0x1f418803,0x10971720,0x1010b700,
    0x82d800f8,0xb70d00f9,0x03e0f300,0x1e80f972,0x81e21fd4,0xcccccceb,
    0xb86982ec,0x775400fe,0x00f10002,0x4019f910,0x83d304fe,0x409fcfb8,
    0xfd981ee8,0x980cf982,0x06f443fc,0x09703b62,0x2a016e00,0x3e2007c5,
    0x1f017c40,0x03d005b8,0x3e5f101f,0x88181e80,0xd500ba07,0x817e07a0,
    0x40003fd9,0x36200078,0x00ff983f,0x37ffbfae,0xb80fff88,0x0cffeeff,
    0x3bbbf220,0xf9100cff,0x2e09fddd,0x00b70004,0x6c00f8b5,0x07c04d84,
    0x03e2016e,0x0fb5403e,0x0f1001e8,0x407c01e2,0x27fb21eb,0x0033f220,
    0x0001e200,0x2fb8bba6,0x00035100,0x4000d54c,0x22000aa9,0x12e009a9,
    0x5402dc00,0x0b9007c5,0x40f801d5,0xf06c805b,0x407df401,0x20f1001e,
    0x2099004b,0xfc8efeeb,0x000037a7,0x540000f0,0x0000b72e,0x00000000,
    0xdc980000,0xc9800999,0x9999999d,0x267e65b9,0xf06fc999,0x33333337,
    0x4ee4c1f3,0xeda99999,0x8099f980,0x57cc0ff9,0x3f531009,0x1009ae98,
    0x0d403d73,0x00000000,0x00000000,0x00000000,0x7e400000,0x01ffffff,
    0x3ffffff2,0x95ffffff,0x9dffffff,0x7ffffc05,0x90ffffff,0xffffffff,
    0xff9017bf,0x83f20dff,0xd07ffffb,0x3f29ffff,0xfff07fff,0x000009ff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x04d44000,
    0x2200cc00,0xf502ffff,0x27e44dff,0x40260620,0xff985ffb,0x7010004f,
    0xffffffff,0x3fffe27f,0x7fffe43f,0x21ffff46,0x0405fffb,0x0004cc40,
    0x200aaa88,0x37776a02,0xdddddddd,0x8300001d,0xddddd500,0x83dddddd,
    0xcffefec8,0x5d7fa22c,0x2205ffff,0x75cc01be,0x5cbffee0,0x8effd9ff,
    0x440dffe8,0x993305b9,0x221fffb0,0x36e2effc,0xfb999999,0x026be621,
    0x8813f531,0x74c409ed,0x201a600d,0xfff34fff,0x4c3ffea3,0x5f701fff,
    0x2aaaaa20,0xaaaaaaaa,0x081ffe40,0x6e43ffe2,0x77777540,0x22eeeeee,
    0xb510adf8,0xddeb887f,0x3c817661,0xffa87900,0x1bff312f,0x1ec53bb2,
    0x426405a8,0xde98f998,0x416e3f31,0x809901f9,0x2076404c,0x069804e8,
    0xf887ffcc,0x4fff30ff,0x7f307ff8,0x2000003f,0x20de98ec,0x7fff70e8,
    0x8000076c,0x20fa206b,0x03f105fa,0xe83f516a,0x5f83eb82,0x41a62fcc,
    0x2026405a,0x0c403fbf,0x0f3017c4,0x76400fc4,0x26009d10,0x21ffe406,
    0x237fc7ff,0x72e887ff,0x9800001d,0x754f6c0e,0x903ffe63,0xf500003f,
    0x35405401,0x23c40f60,0x0007c4fd,0xf103e07e,0x099016a0,0x10001ff8,
    0x207b007d,0x27b2005b,0x4c73604e,0x7f45b516,0x7f46fe87,0x26c37f45,
    0x99993176,0x99999999,0x3bd70039,0x12e01510,0x0df6c000,0x4c80b500,
    0x27af87e0,0x81f80069,0x5a83c40f,0x07e02640,0x5004e800,0x9000ba0d,
    0xffc9809f,0x10befdfd,0x8bfb07ff,0x227ec4fd,0x5cc9d06c,0xbbbbbbbb,
    0x0001bbbb,0x80000000,0x03dffedb,0x4099016a,0x5cbad52d,0xf81f8005,
    0x05a83c40,0x003e0264,0x3a002ec0,0x22003542,0xd3000ede,0x0df5019f,
    0x87f90fee,0x403ea3fc,0x000002f8,0x00000000,0x6f654400,0x26405a80,
    0xa5cf6970,0x81f8003c,0x5a83c40f,0x03e02640,0x2001b200,0x3001ec5b,
    0x2003ae7f,0x5f906cfa,0x3f70bea0,0x00722fb8,0x2aaaa693,0xaaaaaaaa,
    0x00001aaa,0x00000000,0xc80b509d,0x887da604,0x40a203d7,0x3c40f81f,
    0x026405a8,0x1d70003e,0x8fc40510,0x7f3000f8,0x3e201fb8,0x80bb09b2,
    0x7441c40b,0x37720000,0xdddddddd,0x004ddddd,0x80000000,0x5a879805,
    0x5f102640,0xf307ae8d,0xf81f81ff,0x0f883c40,0x0f809f90,0x4c03ea00,
    0x04ca6406,0x3ea05f30,0x17c49b01,0x00000000,0x00000000,0x40000000,
    0x436401f8,0x2026405a,0x837dc3fe,0x0fc3fffb,0xd81e207c,0x06ef6cc4,
    0x3e6001f0,0xb999999a,0x07cfc406,0x980e7d40,0x4c2c42fc,0x00000003,
    0x00000000,0x00000000,0xf502ff88,0x101db985,0x07e40199,0x7fcc13e2,
    0xf02be61f,0xd301f883,0x3f29ffdf,0x27e6661f,0xfd809999,0xffffffff,
    0x805fd806,0x643ffffb,0x0003ffff,0x00000000,0x00000000,0x20000000,
    0xeeefeae8,0x7ffd42ef,0x7fffcc4f,0xa8800000,0xf17fff20,0x027fc4bf,
    0xff700351,0xdfffffff,0x00000000,0x00000000,0x00000000,0x00000000,
    0x80000000,0x0001aaa9,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__courier_32_usascii_x[95]={ 0,6,3,2,3,2,3,6,8,4,0,1,4,2,
6,3,3,3,2,2,2,2,3,2,3,3,6,4,0,1,0,0,2,0,1,1,2,1,2,1,1,3,2,1,
1,0,0,0,2,1,1,2,1,1,0,0,1,1,2,0,0,0,3,1,6,1,0,2,1,1,2,1,1,2,
2,2,2,0,1,1,0,1,2,2,2,1,0,0,1,2,3,0,7,0,2, };
static signed short stb__courier_32_usascii_y[95]={ 23,5,5,4,4,5,8,5,5,5,5,7,18,14,
19,3,5,5,5,5,5,5,5,5,5,5,11,11,7,12,7,6,5,6,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,3,5,5,29,4,10,5,10,5,10,5,10,5,5,
5,5,5,10,10,10,10,10,10,10,6,11,11,11,11,11,11,5,5,5,12, };
static unsigned short stb__courier_32_usascii_w[95]={ 0,5,11,13,11,13,12,5,6,5,11,14,6,13,
5,11,11,11,12,13,12,13,12,12,11,12,5,7,14,15,14,11,12,17,15,15,14,14,14,15,15,11,15,16,
15,17,16,15,14,15,16,13,14,15,17,17,15,15,13,5,11,5,11,18,5,15,16,14,16,14,14,15,15,13,
10,15,13,17,15,14,16,16,14,13,13,15,17,17,15,15,11,6,3,6,13, };
static unsigned short stb__courier_32_usascii_h[95]={ 0,19,9,21,22,19,16,9,22,22,11,16,10,2,
5,23,19,18,18,19,18,19,19,19,19,19,13,15,16,6,16,18,20,17,17,18,17,17,17,18,17,17,18,17,
17,17,17,18,17,21,17,18,17,18,17,17,17,17,17,22,23,22,8,2,5,14,19,14,19,14,18,19,18,18,
24,18,18,13,13,14,19,19,13,14,18,13,12,13,12,18,12,22,22,22,6, };
static unsigned short stb__courier_32_usascii_s[95]={ 254,194,169,107,60,200,129,181,72,79,150,
157,162,241,229,24,134,223,197,214,210,180,228,46,34,241,49,187,172,199,142,
49,121,111,60,17,31,16,1,1,220,208,235,173,157,93,76,181,236,91,90,
61,75,33,107,190,141,125,46,85,12,54,187,199,235,195,1,211,59,226,76,
18,91,167,1,107,123,55,15,241,146,163,89,1,137,73,116,31,134,151,104,
43,50,36,215, };
static unsigned short stb__courier_32_usascii_t[95]={ 1,1,83,1,1,1,65,83,1,1,83,
65,83,83,83,1,1,26,26,1,26,1,1,26,26,1,83,65,65,83,65,
46,1,65,65,46,65,65,65,46,46,46,26,46,46,65,65,26,46,1,46,
46,46,46,46,46,46,46,65,1,1,1,83,90,83,65,26,65,26,65,26,
26,26,26,1,26,26,83,83,65,1,1,83,83,26,83,83,83,83,26,83,
1,1,1,83, };
static unsigned short stb__courier_32_usascii_a[95]={ 271,271,271,271,271,271,271,271,
271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,
271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,
271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,
271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,
271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,
271,271,271,271,271,271,271, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_32_usascii_BITMAP_HEIGHT or STB_FONT_courier_32_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_32_usascii(stb_fontchar font[STB_FONT_courier_32_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_32_usascii_BITMAP_HEIGHT][STB_FONT_courier_32_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_32_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_32_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_32_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_32_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_32_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_32_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_32_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_32_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_32_usascii_s[i] + stb__courier_32_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_32_usascii_t[i] + stb__courier_32_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_32_usascii_x[i];
            font[i].y0 = stb__courier_32_usascii_y[i];
            font[i].x1 = stb__courier_32_usascii_x[i] + stb__courier_32_usascii_w[i];
            font[i].y1 = stb__courier_32_usascii_y[i] + stb__courier_32_usascii_h[i];
            font[i].advance_int = (stb__courier_32_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_32_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_32_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_32_usascii_s[i] + stb__courier_32_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_32_usascii_t[i] + stb__courier_32_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_32_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_32_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_32_usascii_x[i] + stb__courier_32_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_32_usascii_y[i] + stb__courier_32_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_32_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_32_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_32_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_32_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_32_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_32_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_32_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_32_usascii_LINE_SPACING
#endif

