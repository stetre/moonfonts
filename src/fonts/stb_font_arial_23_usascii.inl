// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_23_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_23_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_23_usascii_BITMAP_WIDTH         256
#define STB_FONT_arial_23_usascii_BITMAP_HEIGHT         70
#define STB_FONT_arial_23_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_23_usascii_FIRST_CHAR            32
#define STB_FONT_arial_23_usascii_NUM_CHARS             95

#define STB_FONT_arial_23_usascii_LINE_SPACING          15

static unsigned int stb__arial_23_usascii_pixels[]={
    0x00000000,0x3e2037ee,0xb82fe983,0x0d70eb86,0x75c7bbae,0xd95101ee,
    0x32a0159d,0x80209701,0x54a8cedb,0x002fb6e9,0x159ddb71,0xdfb73100,
    0xfdc88059,0x654402ce,0x4c001bee,0x7cc7f04e,0x2e213a01,0x004e81bd,
    0xbdefeda8,0x501e8001,0x07f10bfb,0x1f883bfd,0x20ba0fc8,0xdf92feeb,
    0xbfff303d,0xf301fffd,0xe889f10b,0xdf9ffb03,0x37f7f2fb,0xfd300ffd,
    0x03fffdbf,0x76f7ff44,0xfff304ff,0x260bfffd,0x6ffeefff,0x2217e600,
    0xf881ee2f,0x7feffdc1,0xf5003643,0xffd99dff,0xffc9801d,0x81f902df,
    0x827cc3f8,0x6a85305b,0x0fe4bea0,0x5c42ff98,0x40fe80ef,0x41fcc1fb,
    0x5ff624fb,0x1be61ffc,0xf510ffe6,0x07fd101f,0x5ff09fb1,0x7cc4fd98,
    0x13f220af,0x7d42fcc0,0x47a81b60,0x5fb10df8,0x7e4007cc,0x1dd300ad,
    0x33b3fe20,0x40fb80ff,0x417cc3f8,0x1fc002f8,0x03f92fa8,0x7dc01ff1,
    0x3742fb86,0x07f41fcc,0x427e5fe6,0x00ff41fe,0x2fd81df5,0x9f507f40,
    0xff89be20,0x2007fa02,0x747c85f9,0x3f917604,0x017c4f98,0x744017f2,
    0x1d2fc81f,0x83f709f3,0x417d43f8,0x9032a07c,0x325f501f,0x804fa81f,
    0x32fc41fd,0xcdfda89f,0x5fe0df10,0x22fb82fc,0x2fc804fb,0x36a017e2,
    0x2b813ea0,0x393013e6,0x32ebf300,0xdfcccfec,0x0c43f80c,0x817627d4,
    0x9eed45f9,0xe86e88ca,0x541dc3a7,0x2a1fc41f,0x3204f82f,0x5417d40f,
    0xf903f92f,0xb07f7001,0xd703f21f,0x13e63ddf,0x980fcbec,0x2007f24f,
    0x00fea4fa,0x005ffc40,0x000017dc,0x3fbb2bf3,0x0eefeeee,0xfe8007cc,
    0x1db03dc2,0x6efef7ec,0x1fd0f70f,0x85f3003a,0x20fdc3f8,0x03f203f9,
    0x25f509f1,0x007e81fc,0x27f50bf3,0x887f306f,0x3f2fd06f,0x3f63fa81,
    0x326f8800,0x3ea0002f,0xfb01beff,0x7cc00003,0x0f717c45,0x3f66035c,
    0x881f982f,0xf88fee3f,0xf907e26f,0xf8801d1b,0x3f21fc43,0xf9017d40,
    0x5f50bf01,0x01fe07f2,0x9ef83fc4,0xf07f303f,0xf97f881f,0x3fc3f707,
    0x07f4ff00,0x1e666654,0x7ffff64c,0x00007f43,0x0fa8bf30,0x404e81b6,
    0x7d03ffeb,0x17e63f30,0xb09d17f6,0xc8017fff,0x5c4fe22f,0x201fb84f,
    0xa86e80fc,0xff03f92f,0x641be200,0x7f300fdf,0x7fb87f90,0x47f88bf9,
    0x4df000fe,0xfffb81fd,0x6dcc05ff,0x007f65ff,0x645f9800,0x2f882747,
    0x90df9100,0x0fdcf70d,0x40fe1fdc,0x404fffda,0x2a7f11fd,0x401fb04f,
    0xa87d80fc,0xfb03f92f,0x209f5001,0x3e605ff9,0xdadff883,0x5dff97ff,
    0x1fc83ff9,0x3ee4f880,0xfa999883,0x47fa6005,0x200002fc,0x9fd975f9,
    0x4199bf99,0x7f4000fa,0x97607d40,0x4c3f707d,0x7fe7402f,0x221bf705,
    0x903fd33f,0x407e403f,0xf92fa87e,0x9007f703,0x017f407f,0x3f6207f3,
    0x5f97eaff,0xf505bffd,0x4c7f7007,0x25f8805f,0xa9fd405d,0x12fcc03f,
    0xfb4f9815,0xffffffff,0x4002e41f,0x217c42fb,0x3ec1be5e,0x11d003ee,
    0x889f03fd,0x7d43743f,0x3e03f202,0x3f92fa85,0xcd81ff30,0x3600ff98,
    0x401fcc06,0x887e5fa1,0x803fe200,0x17fc0ff8,0x1fd97e20,0x7fc4fea0,
    0xfa93fa00,0x3f31fd44,0x207f03dc,0xd05fb07e,0x03fa7c89,0x427ccdf3,
    0x17dc3a19,0x87f10bea,0x01fcc0fb,0x84f881f9,0x203f92fa,0x3ff20efa,
    0x0fe602fe,0xe8007f30,0x4c001f97,0x2fe881ef,0xd303ff98,0x40f7d4bf,
    0x3bea0fe8,0x260ffb80,0xf517e46f,0x1f982ec1,0xff887f70,0x8fd47b80,
    0x53fa22fc,0x26f886f9,0xfb83f90e,0x3ea1fc41,0x3f205f81,0x7d417d40,
    0x7dc03f92,0xfffdbbdf,0x00febb80,0x800e77c4,0x8001f97e,0xfdbbdffa,
    0x3ffe602f,0x0cffedcd,0x6e677fe4,0xdffc83ff,0xd81fffcb,0x20efdcef,
    0x7b827c6c,0x7e567fc0,0x4c3f302f,0xf9bfd13f,0x01dfbffb,0x6f8747f6,
    0x1fc41fb8,0x81ba0bea,0x407dc0fc,0x803f92fa,0xbceffeca,0x0ffec4fe,
    0x003ffc80,0x0003f2fd,0x33bffae6,0xffdb8801,0x3aa01def,0x201dffff,
    0x0dfffeca,0x1bfffb10,0x40be25d8,0x7f5c405d,0x21fc01ef,0x5bfb30ee,
    0x4188fbf6,0xfebecffa,0x7c40fb83,0x7d417cc3,0x5f81f902,0x07f25f50,
    0x46b80880,0x00100018,0x08800000,0x0004c000,0x0c4000c4,0x04403100,
    0x20009806,0x98110008,0x7dc000ef,0xdfffea84,0xf881f901,0x5e817cc3,
    0x00fa8fb0,0x007f25f5,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x001ffb80,0x1e880bfb,0xf10df710,0x40aef887,0x17ea61f9,
    0x5f95309d,0x0002aff2,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x4def7f54,0x03ffeca9,0x3fee01d0,0xfb83f882,0x3fa5c82f,
    0x3203ea2e,0xfff92fff,0x00000005,0x00000000,0x00000000,0x00000000,
    0x00000000,0xfda80000,0x0cefffff,0x09980200,0x04c402a0,0x33033144,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00004cc4,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x2a33b6a0,0x037b9304,
    0xb710b900,0x001d7039,0x22017b50,0x09d00bec,0x0073b260,0x4c166d44,
    0x2076403e,0x4cccccc9,0xd71efd88,0x007d9001,0x00f6c3db,0x80f5cbb1,
    0x43b205ea,0x2eb801ec,0x3bbaa1d7,0xeeeeeeee,0x36001d70,0x87effdff,
    0x03ffeffc,0x3fa63f40,0x3f20ffee,0x3bfee000,0x56fc45ff,0x800fa85e,
    0x00ffcefb,0x27ff7fcc,0x3fb013ea,0xffffffc8,0x90defe87,0x3ff1001f,
    0x3ea2fdc0,0x543fd00e,0x03ffb03f,0x027d4df1,0x70fc87f4,0xffffffff,
    0x03f21fff,0x6c433ee0,0x88f7d47f,0x1fa002fc,0x927d43fd,0x0774001f,
    0xa87d43f9,0xdd004e87,0x3ba01fcc,0x7d45fb31,0x360fec04,0x4199999f,
    0x00fc86f8,0x3e20df70,0xc84fc80f,0xf82fc43f,0x24f984fd,0x2fcc07f8,
    0x0fe40153,0xff001f90,0x7f47f981,0x3a007f82,0x9f60fea7,0x7f5000fc,
    0x89b65f88,0x2003ea2f,0x817e25f8,0x2a6f82fb,0x20fec04f,0x09f3005f,
    0x7ec001f9,0x3a02fe83,0x7417ea2f,0x86eafa87,0x017e42fb,0xfc8003f9,
    0x1003f201,0xff1fe0df,0x36a07f20,0x1fa7e8ce,0x76dc7e40,0x443fa80c,
    0x1f99b26f,0x1ff8013a,0x83ec05f9,0x809f50fd,0x013e21fd,0xc8b3bf6e,
    0x440e5c0f,0x013ee1ff,0x1ff11ff3,0x1f907f20,0x987d81f9,0x951be05f,
    0x900fe401,0x439db71f,0x44fb04f9,0xd85f906f,0x27fefdff,0x9037516f,
    0x3ffdbfdf,0x3f20ef88,0x53d43e63,0x77d4001f,0x837404fd,0x809f51fb,
    0x26bea1fd,0x7f640bdc,0xd83f23ef,0x45bee04f,0xdfb800ef,0x0fea01fd,
    0xbf0beabd,0x3ea03fa0,0xf9007e43,0x6ff7e403,0x09f12ffe,0xf01ff1fa,
    0x8867dc7f,0x3ef7e7fd,0x3f20dfff,0x261bea1f,0xf83ffefe,0x00fa4fce,
    0x200bffa0,0x2a5f706f,0x70fec04f,0x3dffdfff,0x0fc84f98,0x5fb007f9,
    0x7f4003fb,0x12fc404f,0xf993e27f,0xfb05f703,0x3200fc81,0x83ff201f,
    0x221b65fa,0x7067e47f,0x207f47ff,0x9fff17f8,0x7e4bfb51,0x74c1fe84,
    0xb703ffef,0x80107dc3,0x404fffd8,0x25f505f8,0x0fec04fa,0x3f2619fb,
    0x7e427cc6,0xf1003fc8,0xfa8009ff,0x2a6e801f,0x1fb9fa1f,0x5f88bf10,
    0x3f200fc8,0x3e0bf201,0xff90fea7,0xffdffe88,0x20df12fc,0xf07ff17e,
    0x320bf23f,0x4477ea3f,0x27f005fc,0xf983ffc8,0xbb2ff8af,0x5f705f81,
    0x3fb013ea,0x22fe80c4,0xfdfc84f9,0x037dc006,0x01bffe20,0x2e3ec3f2,
    0xfd80fb1f,0x3f20bee0,0xc807f200,0x3a27d81f,0x07fffcff,0x3f53bfd9,
    0x8bec13e6,0x92fc80ff,0x6c9f501f,0x400fe80f,0xf53d90fb,0x3e62fc85,
    0x06f86faf,0x013e63f7,0x3ee001fd,0x3f213e63,0x26003fef,0x57ec005f,
    0x97cc04fd,0x4f97cc5f,0x0fd1fd40,0x1fc803f2,0x1f603f20,0xfd3bfd91,
    0xf887dc00,0x83fcfd05,0x701f92fb,0x5c1be27f,0xf8fe203f,0x50ff1364,
    0x0dd05fff,0x02fc43f2,0x3fa801fa,0x4ff213e6,0xbf3001fe,0xe8a7dc00,
    0x7ce7c02f,0x02f9cf82,0x209f36f8,0x07f200fc,0x07d80fc8,0xd04a8fd0,
    0x7c40ff8f,0x3f603f67,0x5fb05f91,0x02fc837c,0x322f99ee,0x7e407f47,
    0xe80fd80f,0xdf103fc7,0x41fb07e8,0x30fc84f9,0x17e600df,0xf3077cc0,
    0x7df6c01f,0x00fbed80,0x00fc9fc8,0x0fe401f9,0x4fb01f90,0x5c5f986e,
    0x321fd42f,0xf53fdc2f,0x3f27f889,0x3f637c45,0xf100ff82,0x71763f87,
    0x5ffe887f,0x27d44f98,0x1fec17f6,0x8bf10fee,0x20fc84f9,0x5f9803fc,
    0xc81ff880,0x1bbee05f,0x88036fdc,0x3f205ebf,0xc807f200,0x3f27d80f,
    0x81feb9ad,0x85fcabfe,0xffdadfe8,0x7dd6fec7,0x2b7ff21f,0x7fc42ffc,
    0x203ffbab,0x7f15d87c,0xfcbeff88,0xfd85febf,0xfd06fdae,0x0bff99bf,
    0x3ff2b3fe,0x7e427cc2,0x3007fe20,0x07fb00bf,0xff981ff4,0x009ff104,
    0xf9017ff4,0x900fe401,0xec8fb01f,0x9301efff,0x22017dff,0x87dafffd,
    0x642efffc,0x01effe9f,0x05ffffb1,0x77cc1fc4,0xffe880ef,0x20bb11ef,
    0x100cfffc,0x07bfffd9,0x0f7ff5c4,0x07e427cc,0xbf301bea,0x4c05fb80,
    0x03ff01ff,0xf5000ff4,0x200fc80f,0x03f201fc,0x000c41f6,0x40010002,
    0x00110008,0x024c004c,0x100c006a,0x01800180,0x00000880,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x43ae6e88,0xcdeeeeea,
    0xea9e400b,0xea876404,0x9f74403e,0x2ea802ea,0xec837ae0,0xeeeeeeee,
    0x1f4d7a24,0x2a203b20,0x774c0bdd,0x3eeeeeee,0xddddddd3,0x3baa3ddd,
    0x302cceee,0x9bdddddd,0xdddd5015,0x5400579d,0x5d30005e,0x99999990,
    0xdf930599,0x913c881b,0x87e4ff37,0xfffffffa,0x29f703ff,0x3f602ffb,
    0xb80dff70,0x007f74ff,0x3fee07f7,0x7ffffec1,0x3e26ffff,0xfd809f56,
    0x7ff7fe41,0x3fffe60f,0xf54fffff,0xffffffff,0x3fffea3f,0x542effff,
    0xffeeeeef,0x7ffdc1ef,0x004fffff,0xd0003ffd,0xfffff07f,0xfd87ffff,
    0x221ffecf,0xff3df16f,0x83fa87e4,0x7e41ffa8,0x01fff74f,0x7ffdc3f6,
    0x5d3ff601,0x83fb803f,0x44000ffb,0x55be22fe,0x70fec04f,0x327dc1bf,
    0x13ea009f,0x4c43fa80,0x13ea0ffc,0x3ee37e4c,0x01ff4c43,0x0013f3e6,
    0x33307ff9,0x41ff3333,0x12fcc5f9,0x3fcd5455,0x80fea1f9,0xfdfd34fb,
    0x417fbee9,0x7f9f70fd,0x5d3f7e20,0x43fb803f,0xd8000efb,0xfab7c44f,
    0xfb0fec04,0x27ccfd03,0x2004fa80,0x97ee03fa,0x07fc04fa,0x17e607f7,
    0x01fb1f90,0x00ff7e60,0x0fec2fd8,0x7c4007ec,0x1fd43f27,0x2ff6bf30,
    0xfd7f74f8,0x3ee1fb05,0xf5f706ea,0x2e00fee9,0x003bee3f,0x3e217f20,
    0xfd809f56,0x8fe412e1,0x9f5004f9,0x201fd400,0x809f51fe,0x40fee1fd,
    0xbb7c05f8,0xade8803f,0x09f5003f,0x007ee055,0x50fc9be2,0xa9fdc07f,
    0x2fee9f10,0x87ec0ff9,0xe81fcafb,0x07f74f9d,0x3bee7f70,0x0efa8000,
    0x09f56f88,0xff001fd8,0x54013e61,0x0fea004f,0x13ea5f90,0x1fdc6f88,
    0x3ea03fb8,0xfb00df13,0xf1007f51,0x3f44001d,0x87e4df00,0x1fd303fa,
    0x4fee9f10,0xb87ec5fb,0x7c43f9af,0x07f74f9a,0x7ff77f70,0x03ff3000,
    0x677d5be2,0xfecccccc,0x264fb801,0xaaaaaadf,0x2aab7ea1,0x3ea1aaaa,
    0xfaa7dc03,0xeba9999c,0x666fdc4f,0x6c04fdcc,0xa807f60f,0x9007f52f,
    0x7f44007f,0xfc97e002,0xdddddf50,0x3e20bfff,0x17f47f74,0x74bee1fb,
    0x74f9bdc6,0xfdf7007f,0x44001ffd,0x5be202fe,0xfffffffa,0x5401ffff,
    0x3ffe60ef,0x2a4fffff,0xffffffff,0x300fea5f,0x3fffeabf,0xb82dffff,
    0xffffffff,0xf517e202,0xfa93e209,0x000ff803,0xe8007fd1,0x7fd43f25,
    0x02deffff,0x31fdd3e2,0x5c3f61ff,0xaf43f72f,0x007f74f9,0xdf71dff7,
    0x2027ec00,0x809f56f8,0x3bea01fd,0x5556fcc0,0x33ea1aaa,0x09999999,
    0x9f500fea,0x36eab7ea,0x273ee05f,0x05fda999,0x01ff05f7,0x403fa8db,
    0x3f2004fa,0x324e8003,0x0007f50f,0x21fdd3e2,0x2e1fb5fb,0x3e27f32f,
    0x0fee9f32,0xfd837ee0,0x805fc804,0x809f56f8,0x1df701fd,0x2a009f30,
    0x0fea004f,0x13ea7f70,0x1fdc17f2,0xffd03fb0,0x87ffffff,0xfb999bfb,
    0x03fb009c,0x6f882fc0,0xfc936df1,0x20007f50,0xd07f74f8,0x3ee1fb5f,
    0xf33ddba2,0x2e00fee9,0x017fc43f,0xf1001df5,0xfb013ead,0x201df903,
    0x9f5004f9,0x201fd400,0x209f52fd,0x03fb84fd,0x9df30fee,0x8df99999,
    0xfffffffd,0x05f883ff,0x7c413e60,0xc866df16,0x0007f50f,0x41fdd3e2,
    0xf70feff9,0x3274fdc5,0x200fee9f,0x0ffa83fb,0x1001ff98,0xb013eadf,
    0x405fc83f,0x9f5004f9,0x301fd400,0x8827d4df,0x01fdc2ff,0x01fc87f9,
    0xaaa987fa,0x80adfcaa,0x2a2003fa,0x64016601,0x0007f50f,0x81fdd3e2,
    0x5f70fffb,0xf30fefcc,0x2e00fee9,0x88df903f,0x3e2002fe,0xfd809f56,
    0x26017ea1,0x09f5004f,0xea81fd40,0xb813ea2f,0x40fee0ff,0x03fc1ff9,
    0x3ea017ea,0x000bee03,0xff107900,0x03fa87e4,0x3ee9f100,0x5c3ffa03,
    0x263ff42f,0xddddf74f,0x0fee9ddd,0x3ff24fe8,0xeeeeeeee,0x27d5be26,
    0xeff87f60,0x31eeeeee,0x3fea009f,0xeeeeeeee,0xdddddf53,0x4fa87fff,
    0xdf727ec0,0x7ffddddd,0x7c404fa8,0x01fd400f,0x7d4001fb,0x3e209105,
    0x1fd43f27,0xf74f8800,0xb87fcc07,0x2627dc2f,0xfffff74f,0x0feebfff,
    0xff91ff98,0xffffffff,0x4fab7c4f,0xff98fec0,0x2fffffff,0x3ea009f3,
    0xffffffff,0xfffff54f,0x9f5039df,0xf71ff880,0x3bdfffff,0xf9003fb0,
    0x203fa807,0x2fd4007e,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x6776d400,0x0b7b2a01,
    0x212e032a,0x200cdeda,0x202deedb,0x000cdeb8,0x02011008,0x1ca84b80,
    0xb74a9644,0xb74a83bd,0x33b2619d,0x1e4032a1,0x45950991,0x223ec8ca,
    0xcccccccc,0x5305f882,0x35555555,0xbb0209b0,0x545d876e,0x90540bdd,
    0xddffa85d,0xdffc82ff,0x407e46fe,0x76ffe47e,0x77f440ef,0xfd83ffec,
    0x001fffdf,0x41ba0d93,0x1fc801ce,0x4bea27f4,0xffdefcfc,0x3f7f3f22,
    0xffdefaef,0x9f309f30,0x3be23fd8,0x9bff7f20,0xfeeeeee8,0x81ffc82f,
    0xfffffffe,0x219e466f,0x7edfe6f8,0x7ff45fe1,0x0fdcdfff,0x88dd1ba2,
    0x706fd46f,0x7407e45f,0xfa837ea7,0x3e61fe45,0xf506fdc6,0x4ffea80d,
    0x3ff20dd0,0x88fe602e,0xf93ec7ff,0xf937cc3d,0x517fec1f,0x7e43f47f,
    0xfe87fc41,0x04477e41,0xdf82fdc0,0xaaaa984f,0xdf11aaaa,0x3e21fdbd,
    0xf0fedfe6,0x32627a2f,0xf984ffff,0x83303be2,0x323c80fd,0x3fa7e80f,
    0x12a1fd81,0x203fe3f4,0x7fe442fe,0x81ba00bf,0x80cfffb8,0x83f3ea5f,
    0x3a0bf25f,0xdf70ff27,0x20fdcbf0,0xf7bf506f,0x4007f907,0x93f706fa,
    0xa880001f,0xd2cc0aff,0x06f83f2d,0x32000a98,0xbf00adff,0x3a03f200,
    0x2aaabfe7,0x73102fca,0x837c4ff9,0xbffb33fb,0x3a666205,0xb500999e,
    0x87e43bff,0x5f32f9fc,0x93ec0fe4,0xf84f983f,0x3fa93e26,0x6417ff20,
    0x1df3001f,0x01fc5ba0,0x4276ec00,0x23d5763c,0x2000004d,0x20dffffb,
    0x1f9005f8,0x3ffe6fd0,0x44ffffff,0x7fefffeb,0xa7cc13e6,0x7f400dfe,
    0x6fffffff,0xf537ec40,0xfcafd3a5,0x9f603f20,0x41fcc0fc,0x1f93ec6f,
    0xc817fc40,0x1ff8800f,0x23ec7f50,0xeeeeeeed,0x3e63e65e,0x22331221,
    0x00000d42,0x87ff5cc0,0x1f9005f8,0x27be2fd0,0x20999999,0x9fa1befc,
    0x27f505f9,0x2e01dffc,0xcccffccc,0x93ff6603,0xfb2f8cf8,0xb01f917a,
    0x3e607e4f,0x57d46f83,0x7fec05f8,0x400fc80e,0x3f601fe8,0xeec8bea0,
    0x44eeeeee,0x00000020,0x81a88000,0x6c1be2fc,0x9fe03f25,0x10a980ff,
    0xff1fe0df,0x6443fb01,0x7400beff,0x7ff5c406,0x0faed80c,0xfc87f5f7,
    0x03f27d80,0x88df07f3,0x2a02fadf,0xfc84facf,0x301fec00,0x000df09f,
    0x00000000,0x6437c000,0xf30bf21f,0x3ee1fe47,0x3fa0ff27,0xff70df10,
    0x7fc42fd8,0x39ffd500,0x7e4c1ba0,0x77dc03ef,0x903fbe26,0x7e4fb01f,
    0x37c1fcc0,0xf103efe4,0xf90bf61f,0x0027ec01,0x26666600,0x20999999,
    0x06666620,0x20000000,0x6fcabdfb,0x7e56ffc4,0x655ffcc7,0x3bfe27ef,
    0x7ec3feba,0x0fffca9c,0x3f2b7fe2,0x6fd9802f,0x37fa0dd0,0x89ff1001,
    0x80fc86fe,0xf303f27d,0xff30df07,0xf117ec09,0xb807e41f,0xcccccbef,
    0xfff98003,0xffffffff,0x3fe6df14,0x00000fff,0xffdb8000,0xffd880df,
    0xfffa81cf,0x7ec47c9e,0xfc883dff,0x42fb9eff,0x02dfffd8,0x03b81c40,
    0x5fd00017,0x0fc83fc8,0x303f27d8,0x3a0df07f,0x50bf701f,0xc807e4bf,
    0xffffffff,0x11110006,0x41111111,0x999916f8,0x00000019,0x3000c400,
    0x98002200,0x30003000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_23_usascii_x[95]={ 0,1,0,0,0,1,0,0,1,1,0,1,1,0,
1,0,0,2,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,-1,1,1,1,1,1,1,1,1,0,1,
1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,-1,0,0,1,0,0,0,0,0,1,1,
-1,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0, };
static signed short stb__arial_23_usascii_y[95]={ 18,3,3,3,1,3,3,3,3,3,3,5,15,11,
15,3,3,3,3,3,3,3,3,3,3,3,7,7,5,7,5,3,2,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,20,3,7,3,7,3,7,3,7,3,3,
3,3,3,7,7,7,7,7,7,7,3,7,7,7,7,7,7,3,3,3,9, };
static unsigned short stb__arial_23_usascii_w[95]={ 0,4,7,12,11,17,14,3,6,6,8,10,3,7,
3,6,11,6,11,11,11,11,11,11,11,11,3,3,10,10,10,11,20,15,12,14,13,12,11,14,13,3,9,13,
10,15,13,16,12,16,14,13,13,13,14,20,14,14,13,5,6,5,10,13,5,11,10,11,10,11,7,11,10,3,
5,10,3,15,10,11,10,10,7,10,6,9,11,15,11,11,10,7,3,7,12, };
static unsigned short stb__arial_23_usascii_h[95]={ 0,15,6,16,20,16,16,6,20,20,7,11,6,3,
3,16,16,15,15,16,15,16,16,15,16,16,11,14,11,7,11,15,21,15,15,16,15,15,15,16,15,15,16,15,
15,15,15,16,15,17,15,16,15,16,15,15,15,15,15,20,16,20,9,3,3,12,16,12,16,12,15,16,15,15,
20,15,15,11,11,12,16,16,11,12,16,12,11,11,11,16,11,20,20,20,4, };
static unsigned short stb__arial_23_usascii_s[95]={ 254,1,224,215,22,71,89,232,54,67,211,
81,220,218,214,228,104,23,117,235,212,130,36,224,59,13,252,248,70,200,92,
236,1,196,183,190,154,141,129,161,103,99,205,71,60,44,30,144,10,86,168,
176,231,116,212,191,176,161,85,80,247,74,189,200,249,46,48,12,25,34,142,
1,245,227,61,150,6,130,119,58,133,122,170,1,115,24,146,103,158,103,178,
46,42,34,236, };
static unsigned short stb__arial_23_usascii_t[95]={ 1,40,56,1,1,23,23,56,1,1,56,
56,56,64,64,1,23,40,40,1,40,23,23,40,23,23,40,40,56,56,56,
40,1,40,40,1,40,40,40,1,40,40,1,40,40,40,40,1,40,1,40,
1,23,23,23,23,23,23,40,1,1,1,56,64,56,56,23,56,23,56,23,
23,23,23,1,23,40,56,56,56,1,1,56,56,1,56,56,56,56,1,56,
1,1,1,56, };
static unsigned short stb__arial_23_usascii_a[95]={ 92,92,117,183,183,293,220,63,
110,110,128,192,92,110,92,92,183,183,183,183,183,183,183,183,
183,183,92,92,192,192,192,183,334,220,220,238,238,220,201,256,
238,92,165,220,183,274,238,256,220,256,238,220,201,238,220,311,
220,220,201,92,92,92,155,183,110,183,183,165,183,183,92,183,
183,73,73,165,73,274,183,183,183,183,110,165,92,183,165,238,
165,165,165,110,86,110,192, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_23_usascii_BITMAP_HEIGHT or STB_FONT_arial_23_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_23_usascii(stb_fontchar font[STB_FONT_arial_23_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_23_usascii_BITMAP_HEIGHT][STB_FONT_arial_23_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_23_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_23_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_23_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_23_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_23_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_23_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_23_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_23_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_23_usascii_s[i] + stb__arial_23_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_23_usascii_t[i] + stb__arial_23_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_23_usascii_x[i];
            font[i].y0 = stb__arial_23_usascii_y[i];
            font[i].x1 = stb__arial_23_usascii_x[i] + stb__arial_23_usascii_w[i];
            font[i].y1 = stb__arial_23_usascii_y[i] + stb__arial_23_usascii_h[i];
            font[i].advance_int = (stb__arial_23_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_23_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_23_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_23_usascii_s[i] + stb__arial_23_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_23_usascii_t[i] + stb__arial_23_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_23_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_23_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_23_usascii_x[i] + stb__arial_23_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_23_usascii_y[i] + stb__arial_23_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_23_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_23_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_23_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_23_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_23_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_23_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_23_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_23_usascii_LINE_SPACING
#endif

