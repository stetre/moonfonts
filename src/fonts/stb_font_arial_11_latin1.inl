// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_11_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_11_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_11_latin1_BITMAP_WIDTH         256
#define STB_FONT_arial_11_latin1_BITMAP_HEIGHT         52
#define STB_FONT_arial_11_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_arial_11_latin1_FIRST_CHAR            32
#define STB_FONT_arial_11_latin1_NUM_CHARS            224

#define STB_FONT_arial_11_latin1_LINE_SPACING           7

static unsigned int stb__arial_11_latin1_pixels[]={
    0x04000040,0x00400202,0x00404082,0xd802a000,0x58800003,0x9804c4c0,
    0xd980dc03,0x52812601,0x0406ae60,0x04000000,0x0d801000,0x23150000,
    0x6416e58c,0x44b71d42,0x21377a64,0x884dccc9,0x06e64913,0xd981d471,
    0x377a1fef,0x5c0baa81,0x3505d50e,0x5cd40350,0x40700e00,0x802e038b,
    0x80e6a073,0x8859b82a,0x983440cd,0x49b84ede,0x2881ddc8,0x13660ea0,
    0x1a081517,0x6c110421,0xb0745220,0x12a0ac45,0x9b452219,0x08ba85c2,
    0x75246ff4,0xddc88517,0x10750d85,0x85ddc889,0x2cc5ddc8,0x4b22ccb2,
    0xb9116459,0x164598bb,0x2e0bbb91,0xb5501301,0xb83a2060,0x75588084,
    0x0303a1e4,0x32d10222,0x4722c931,0x4458ea49,0xb7580934,0x962193bb,
    0x26037648,0x6c5b9d54,0x136648df,0x0d8970f4,0x22fcd875,0x43d12e1e,
    0x2591664b,0x45996459,0x24b87a2c,0x43d16459,0x8f73624b,0x6643dcd8,
    0x50ee644e,0x1dcc8d0b,0x43a06d26,0x20ee642c,0x4da21dcc,0x930e4394,
    0x1163a872,0x9b980ee9,0x24caaf14,0x2174d5ca,0xb334b558,0x1ee9891b,
    0x21b1a162,0x4aa7263a,0x21626858,0x26591666,0x64599645,0x2ccd0b12,
    0x1342c4b2,0xb3189663,0x8e6689d4,0x4c3a0ee5,0x81d49963,0xb1cc59e9,
    0xd344b1cc,0x474788d1,0x442d9d46,0x35188934,0x751d6257,0xb43452a0,
    0x12361a3a,0xe83b9a2e,0x751d4360,0x70e83b87,0x91661d07,0x26591665,
    0xe83b9645,0x772c8b30,0x337621d0,0xc9737625,0x4ccdb9a1,0x6dcf116a,
    0x74d264cc,0x36e07641,0x3336e4cc,0x43cb9a24,0x2a1e5c0c,0x3a291163,
    0x95dcc760,0x892648cb,0xb112b6e3,0x46c3456a,0xb32ceee4,0x3a86c788,
    0x2cd23326,0x3c4599e2,0x8b11d8b1,0x31d8b11d,0xb162788b,0x64f11663,
    0x69964d32,0x4932c4ea,0x26647a23,0x21931c93,0x24c24c49,0x344724c7,
    0xf88581f1,0x488b1d40,0xd88fb766,0x40bebdd8,0x83d31225,0x03dbd539,
    0x6f74491b,0xd8970f41,0x1dec8750,0x0f44b87a,0x1f10e897,0x3a0f8874,
    0x70f41f10,0x41f10e89,0xcd992e1e,0x1b33666c,0xddc83b97,0x27776c42,
    0xac98b772,0xc824c1dd,0x16ee42dd,0x4342c4d1,0x8363a858,0x4b80d848,
    0x44321d88,0x19126914,0x091b00ea,0x13bb6207,0x06a1d436,0x2213bb62,
    0xeea84eed,0x1777542e,0xb10bbbaa,0xddd509dd,0x04eed885,0x00000000,
    0x26000013,0x5a200004,0x2a2641ea,0xd50ecc1e,0x4072a244,0x40cdddd9,
    0x76e49148,0x403a8e21,0x2000048d,0x1c7d50fc,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x80000000,0x00042020,0x00400020,0x02ae6042,0x21b06d40,0x5018a83a,
    0x9806401b,0x18800003,0xb8062620,0x2012e029,0x880aa00d,0x02001000,
    0x00800040,0x9b307500,0x1bbbbd10,0x40e85a44,0x50350cd8,0xcbca83b9,
    0x23667443,0xb962029a,0xb8385128,0x20717038,0x9501c028,0x01d406c0,
    0x26205371,0x0537101a,0x501c00c4,0x1225ba85,0x222443b1,0x0751221d,
    0x4c2eee44,0x9880a84d,0x4bb0f441,0x4c0d9bb8,0x859cd541,0x55d47148,
    0x4cee399a,0x20e41f36,0x689a2589,0xeeef99a2,0x97bbbe65,0x265eeef9,
    0x0185eeef,0x2035c06c,0x2035c06b,0x2035c06b,0x2a02206b,0x43510324,
    0x190d440c,0x1e808ba8,0x4411112e,0x33623dcd,0x79c96a3d,0x447773ae,
    0x2b223dcd,0x2baa81ba,0x64958ca4,0x392f4da1,0x689773a2,0x166689a2,
    0x81660598,0x16e6c059,0x02ce80d8,0x2ce80b3a,0xce80b3a0,0x5c0b3a02,
    0x02aac542,0x8d406e35,0x2ecea82a,0xb9b1a162,0x312cc625,0x2393b966,
    0x3105d60e,0x55255166,0x4932bb20,0x9d46a5bd,0x3259936a,0x68966771,
    0x166689a2,0x81660598,0x2c4e6059,0x2ce4c0d8,0x93059c98,0x167260b3,
    0xc982ce4c,0xb885a859,0x88831489,0x4441a8b9,0x8ad43148,0x4c3a0ee6,
    0x33762b13,0xa9737625,0x75cf12bc,0x9bb11cec,0x96726e0b,0x91949a3a,
    0x26b9b712,0x391c8e8c,0x9a268962,0x3bbbe668,0x8fbbbe63,0x263eeef9,
    0x8723eeef,0xd1c81b06,0x203a3901,0x23901d1c,0x01d1c80e,0x06883a39,
    0x5609b0c8,0x3619059a,0x16668ea4,0x32d0e4f1,0x69964d32,0x9c497274,
    0x90699645,0x9a291256,0x4c7531b9,0x6d526930,0x8966771c,0x26689a26,
    0x59816605,0x13a81660,0x7c468e4d,0x67c43dcc,0x667c43dc,0x6e67c43d,
    0x1ee67c43,0x88f733e2,0x323703a6,0x0ee0c84b,0xb525e46e,0x25c3d162,
    0x66cda275,0x9b33666c,0x544edec9,0x666cc48a,0x89771b86,0x664c1ecb,
    0x86eec43c,0xdd87f249,0x2689a25c,0x59816668,0x05981660,0xdd30f6e4,
    0x51a23a89,0x88ea3447,0xa8d11d46,0x44751a23,0x261eedc6,0x45516ea3,
    0x751cc2dc,0x20ee6d4b,0xdc84eed8,0x0040001e,0x81000104,0x30000000,
    0x4400fc49,0x26689a26,0x3e66eeef,0x3be66eee,0x3bbe66ee,0x0e80006e,
    0x2c81d164,0x0745903a,0x1640e8b2,0x1002c81d,0x19981020,0x00000804,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00400000,0x00001004,0x01000000,0x20001000,
    0x00204000,0x08200008,0x400dcb81,0x00002000,0x00000000,0x080001c4,
    0x20776601,0x6ee40ddc,0x076eec42,0x40edc8e2,0x322cc49b,0xd1037722,
    0x21377a60,0x2160d83b,0x5e540ddc,0x3259b83c,0x226cc931,0x7cc1edec,
    0x69262eee,0x2540441b,0x6ee43b9b,0x20d70b11,0x1bddf34a,0x3bbbfba0,
    0x85dddf30,0x06d43a1d,0x3bbe65b7,0x9733a25e,0x9873391d,0x892c4b14,
    0x2351660e,0x3010b359,0x2a732c8b,0x20e88184,0x4421112d,0x44170888,
    0x5c5d4935,0x30822399,0x098c4729,0x9662ccb1,0x1b4930e8,0x54a16e6c,
    0x2c4ea313,0x9d90b3a0,0xca84a926,0x744b3049,0xd9255620,0x05984cc5,
    0x4c52ccee,0x99a2b84e,0x49009305,0xdcd8d13b,0x88591662,0x316e6c2c,
    0x5589d409,0xb11cd627,0xa8da4793,0xd2c4ea48,0x1589d4d1,0x7166017d,
    0x4c969265,0x05768b13,0x27260588,0x149a4cc5,0x0931d059,0xac859166,
    0x99a1220e,0xd2c47205,0x3a20aee4,0x073ee7c9,0x92266475,0xb1399a2b,
    0xd70b22cc,0x2e589cc3,0xaac4ea03,0x9b124b13,0x2a1c643d,0xcb962751,
    0x912c4ea3,0x2ced83dd,0x5b456675,0x39b46872,0x201e8871,0x34981d1c,
    0x5983dddf,0x2ccbddf3,0xcefca8ea,0x7ccd0910,0x4ce63eee,0x4dca55a5,
    0x03a2cdc4,0x26699966,0x87268ea3,0x103b1626,0x24cd0e4d,0x5589d462,
    0x4ee49627,0x45c65268,0xf12c4ea4,0x11589d41,0x5716634c,0x875bb7a6,
    0x3268d13a,0x887a20dc,0x0f733e26,0x46892693,0xb304eeed,0x2b6623b8,
    0x599a1621,0x2d2eee40,0x9447f13a,0x1e816249,0x5220b9e2,0x2344ea59,
    0x4ea1f10e,0x1344ea58,0x34a8ec1d,0x352cd2ab,0x1732c4ea,0x9a547337,
    0x26951625,0x26344b55,0x424c3a25,0xd07b720e,0x207a21c8,0x4c688ea3,
    0xb3344934,0x2259824c,0x0afaa60e,0x0166687d,0x76e4d2c4,0x837360ea,
    0x6c46eddd,0x2e162eee,0x0f6e40ed,0xb90bbbaa,0x41edc83b,0x3a23edd9,
    0xb79d15bc,0x83b991c4,0x7443ccc9,0x883d55bc,0x3bae5bce,0x7777cc1e,
    0x003a1261,0x7643b334,0x40e825ee,0x77cd262c,0xf98761ee,0xddf31eee,
    0x4003603d,0x1bbbbe66,0x0000d2c4,0x00010000,0x00000000,0x00020000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00440000,0x88044111,
    0x54020110,0x040821cc,0x88884010,0x00000000,0x00200001,0xdcb89ddd,
    0x00000000,0x00000000,0x4c3a1e40,0x3e1d9a26,0xf30499a2,0x77cc7ddd,
    0x373624ee,0xb336edc3,0x3af621d9,0x6e6c4cdd,0x58ea0841,0xb9b07732,
    0x2af6f663,0xa9262dce,0x4fbbbe25,0x3360753a,0x20ea752d,0x48d93a68,
    0x4c098816,0x2cc78805,0x41db44b2,0x9dddd91c,0x267f0be6,0x7754720f,
    0x1643a4ee,0x2570752e,0x24cb14ca,0x8b33c598,0xb166311d,0x4465c76e,
    0x223aa110,0xb32c730d,0x358ea7b7,0x89d4b117,0x96b62b31,0x222d5266,
    0x44ea7505,0x845a2750,0xd9b4413a,0x857b3040,0x3a63dcd8,0x46d80bcc,
    0x56896459,0x4c3b8689,0x74cfaa4e,0x83a20725,0x5bd059e9,0x2ad39498,
    0x22cc1263,0x221d1666,0x2ae65cdd,0x437ae1ba,0xcccecdd8,0x2b334391,
    0x5d627558,0x20ae4ccd,0x268eb639,0x05885ac9,0x0362ea75,0xcea9d566,
    0x0bb2d13e,0x125ce4cd,0x99d99663,0x26355c6a,0xd12d999d,0x87707534,
    0x4cef26c9,0x3d0392cc,0x3ee01d90,0x3272b680,0x674c1261,0x3fbe62dd,
    0x12ccae2e,0x771a967d,0x217354b2,0xb1ccd13a,0x239accea,0x399c4e63,
    0xd33456b6,0xeef881db,0x07654ea6,0x953a874c,0xd0b15962,0xb9bb1340,
    0xd489a2cc,0x2eccce98,0x80d964d1,0xd8de4c3b,0x91d1933b,0x09303d83,
    0x27616fa2,0x0498b754,0x2b3013b3,0x333661e8,0xb11eef46,0x333661b9,
    0x76e43ddb,0x9d158e61,0x216ee4b5,0x6c730dcc,0x5661edea,0x3a82c45b,
    0x43903bd5,0x2934753a,0x44e66858,0xb334cb25,0x55ecb933,0x2591662e,
    0x41632668,0x56464c3b,0x36a933ba,0x49812e1c,0xb50b63d0,0x09313625,
    0x22598166,0x0001000e,0x2c730000,0x3a800000,0xb11ec930,0x345d4ea0,
    0xd1d4ea04,0x64685884,0x333661cd,0x506f3a66,0x22cc5d55,0x2bd8d12c,
    0xbd498770,0x3f924cee,0x909301a6,0x1f107447,0x3bbe6174,0x2cc0b30e,
    0x0000012e,0x00000000,0x4c0ea000,0x82c43a24,0xb0ee753a,0x5a3a9d43,
    0x00d0b168,0x1a00b300,0x8d12c8b3,0x930ee06a,0x2499dd6e,0xddddb1f8,
    0x00000009,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x11000000,
    0x77754111,0x00220486,0x41041081,0x08888840,0x2a054081,0xb8818603,
    0x88937550,0x0517128b,0x8006a010,0x40400080,0x9a200800,0xeeeea808,
    0x1dddd500,0x1111102c,0x9169bb21,0x00059999,0x70101000,0xd9b30b07,
    0x376a3d77,0xb0f86d61,0x9951da54,0x224c725d,0x40cda80b,0x37663cad,
    0x90f2ba21,0x86ce41b1,0x036ea5bb,0x545ca837,0x3b125d46,0xf570c8ae,
    0x137125c4,0xbdb538ae,0x40b1003b,0x2e58c80c,0x0001bbbb,0x04000000,
    0xfd716204,0x35aa4cdd,0x9ab812a7,0x1e6439ad,0x47293254,0xf506eeeb,
    0x07aa5e81,0x3b1244e6,0x224ad889,0x75477264,0x86a90eee,0x512542bd,
    0xb964cae3,0x4c2aa66a,0x980830dd,0x83bbbaa1,0x00003200,0x00000000,
    0x0e408080,0x27339858,0x64407539,0x7cc1cc9b,0x85b42cc0,0x41cda80a,
    0x336a2dbc,0x90f2ba21,0x86ce41b3,0x076720d9,0x30cab837,0x5458a969,
    0x06220111,0x001d4433,0x00000000,0x00000000,0x68101000,0x9cce60e0,
    0x5d807539,0x44b5b0bb,0xa83cb80d,0x22805d40,0x7550c882,0x22515095,
    0x88eea28a,0x4c0dc08a,0xb88546a0,0x00000441,0x00000000,0x00000000,
    0x02000000,0xeeb84982,0x99cce66e,0xa64d0753,0xb3b9dc4c,0x07c47bbd,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x20000000,
    0x2e088889,0x00000002,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__arial_11_latin1_x[224]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,-1,
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,
-1,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__arial_11_latin1_y[224]={ 8,0,0,0,0,0,0,0,0,0,0,2,7,5,
7,0,0,0,0,0,0,1,0,1,0,0,2,2,2,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,2,0,2,0,2,0,2,0,0,
0,0,0,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,0,0,3,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,2,0,0,2,0,
0,0,0,0,0,3,3,5,0,-1,0,2,0,0,0,2,0,4,7,0,0,3,0,0,0,2,-1,-1,-1,-1,
-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,2,0,-1,-1,-1,-1,-1,0,0,0,0,
0,1,0,0,2,2,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,2,2,0,0,0,0,0,0,0,
 };
static unsigned short stb__arial_11_latin1_w[224]={ 0,2,4,6,6,9,7,2,3,3,4,6,2,3,
2,3,6,3,5,6,6,6,6,6,6,6,2,2,6,6,6,5,10,8,7,7,7,7,6,8,7,2,5,7,
6,8,7,8,7,8,7,7,6,7,7,10,7,7,6,3,3,3,5,7,3,6,6,5,5,6,4,5,5,2,
3,5,2,8,5,6,6,5,4,5,3,5,5,8,5,5,5,4,2,4,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,2,5,6,6,7,
2,6,3,8,4,5,6,3,8,7,4,6,4,4,2,5,6,2,3,3,4,5,9,9,9,6,8,8,8,8,
8,8,10,7,7,7,7,7,3,3,4,3,8,7,8,8,8,8,8,5,8,7,7,7,7,7,7,6,6,6,
6,6,6,6,9,5,6,6,6,6,2,3,4,3,6,5,6,6,6,6,6,6,6,5,5,5,5,5,6,5,
 };
static unsigned short stb__arial_11_latin1_h[224]={ 0,8,4,9,10,9,9,4,11,11,4,5,3,1,
1,9,9,8,8,9,8,8,9,7,9,9,6,8,5,3,5,8,11,8,8,9,8,8,8,9,8,8,9,8,
8,8,8,9,8,9,8,9,8,9,8,8,8,8,8,10,9,10,5,1,3,7,9,7,9,7,8,9,8,8,
11,8,8,6,6,7,8,8,6,7,8,7,6,6,6,9,6,11,11,11,3,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,10,9,5,8,
11,11,2,9,5,5,3,1,9,2,4,6,5,5,3,8,10,2,4,5,5,5,9,9,9,9,9,9,9,9,
9,9,8,11,9,9,9,9,9,9,9,9,8,9,10,10,10,10,10,5,9,10,10,10,10,9,8,9,9,9,
9,8,9,9,7,8,9,9,9,9,8,8,8,8,9,7,9,9,9,8,9,5,7,9,9,9,9,11,10,11,
 };
static unsigned short stb__arial_11_latin1_s[224]={ 179,47,156,24,81,38,1,149,49,63,166,
122,174,217,221,32,36,190,172,58,81,59,48,8,96,9,36,178,86,184,73,
32,38,181,194,72,213,238,16,23,88,96,136,8,165,114,123,240,172,207,180,
130,107,50,99,154,146,138,131,101,92,97,134,224,191,188,233,244,78,237,50,
64,41,38,18,26,23,22,250,218,1,246,31,202,229,231,60,39,48,118,54,
22,27,7,177,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,179,153,105,
16,93,221,53,56,205,103,117,100,195,217,55,209,161,15,112,140,171,147,74,
202,152,145,129,106,223,213,203,196,187,178,169,160,151,142,202,30,121,113,105,
97,93,89,84,252,138,70,111,153,88,170,120,80,15,129,137,145,162,230,73,
223,31,1,8,66,186,179,208,166,200,238,245,216,163,252,233,55,193,225,65,
129,249,156,43,66,195,86,80,124,112,12,67,1, };
static unsigned short stb__arial_11_latin1_t[224]={ 11,33,42,13,1,13,23,42,1,1,42,
42,42,42,42,23,23,23,23,23,33,33,13,42,23,23,42,23,42,42,42,
33,1,23,23,23,23,23,33,23,33,33,13,33,32,33,33,13,32,1,32,
23,33,23,33,32,32,32,33,1,23,1,42,42,42,32,13,32,13,32,33,
13,33,33,1,33,33,42,32,32,33,23,42,32,23,32,42,42,42,23,42,
1,1,1,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,11,23,1,
23,42,23,1,1,42,23,42,42,42,42,13,42,42,42,42,42,42,23,1,
42,42,42,42,42,13,13,13,13,13,13,13,13,13,13,23,1,13,13,13,
13,13,13,13,1,23,13,1,1,1,1,1,42,13,1,1,1,1,1,33,
1,13,13,13,33,1,1,32,23,1,1,1,1,23,23,23,33,1,32,23,
13,13,23,23,42,32,23,23,23,23,1,1,1, };
static unsigned short stb__arial_11_latin1_a[224]={ 44,44,56,88,88,140,105,30,
52,52,61,92,44,52,44,44,88,88,88,88,88,88,88,88,
88,88,44,44,92,92,92,88,160,105,105,114,114,105,96,123,
114,44,79,105,88,131,114,123,105,123,114,105,96,114,105,149,
105,105,96,44,44,44,74,88,52,88,88,79,88,88,44,88,
88,35,35,79,35,131,88,88,88,88,52,79,44,88,79,114,
79,79,79,53,41,53,92,118,118,118,118,118,118,118,118,118,
118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,
118,118,118,118,118,118,118,118,44,52,88,88,88,88,41,88,
52,116,58,88,92,52,116,87,63,86,52,52,52,91,85,44,
52,52,58,88,131,131,131,96,105,105,105,105,105,105,158,114,
105,105,105,105,44,44,44,44,114,114,123,123,123,123,123,92,
123,114,114,114,114,105,105,96,88,88,88,88,88,88,140,79,
88,88,88,88,44,44,44,44,88,88,88,88,88,88,88,86,
96,88,88,88,88,79,88,79, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_11_latin1_BITMAP_HEIGHT or STB_FONT_arial_11_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_11_latin1(stb_fontchar font[STB_FONT_arial_11_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_arial_11_latin1_BITMAP_HEIGHT][STB_FONT_arial_11_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_11_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_11_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_11_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_11_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_11_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_11_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_11_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__arial_11_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__arial_11_latin1_s[i] + stb__arial_11_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__arial_11_latin1_t[i] + stb__arial_11_latin1_h[i]) * recip_height;
            font[i].x0 = stb__arial_11_latin1_x[i];
            font[i].y0 = stb__arial_11_latin1_y[i];
            font[i].x1 = stb__arial_11_latin1_x[i] + stb__arial_11_latin1_w[i];
            font[i].y1 = stb__arial_11_latin1_y[i] + stb__arial_11_latin1_h[i];
            font[i].advance_int = (stb__arial_11_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__arial_11_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_11_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_11_latin1_s[i] + stb__arial_11_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_11_latin1_t[i] + stb__arial_11_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_11_latin1_x[i] - 0.5f;
            font[i].y0f = stb__arial_11_latin1_y[i] - 0.5f;
            font[i].x1f = stb__arial_11_latin1_x[i] + stb__arial_11_latin1_w[i] + 0.5f;
            font[i].y1f = stb__arial_11_latin1_y[i] + stb__arial_11_latin1_h[i] + 0.5f;
            font[i].advance = stb__arial_11_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_11_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_11_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_11_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_11_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_11_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_11_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_11_latin1_LINE_SPACING
#endif

