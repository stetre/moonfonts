// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_21_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_21_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_21_usascii_BITMAP_WIDTH         256
#define STB_FONT_consolas_21_usascii_BITMAP_HEIGHT         70
#define STB_FONT_consolas_21_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_21_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_21_usascii_NUM_CHARS             95

#define STB_FONT_consolas_21_usascii_LINE_SPACING          14

static unsigned int stb__consolas_21_usascii_pixels[]={
    0x400000fa,0x3bba0edb,0xa8e4406e,0x5103eeee,0x15b70159,0x2000d400,
    0x0377302a,0x2a2002a2,0x51353102,0x5c4002a2,0x0402981c,0x213004c0,
    0x443101aa,0x0aa000aa,0x04ccd54c,0x01510035,0x8a7c0d40,0x209d002e,
    0x3320cffd,0xb7ec07ec,0x982ccdfb,0x542fedfe,0x7f000ffd,0x221fcc00,
    0x80dffffe,0x86f9805e,0x56fffffd,0xddd1005f,0x442fc45f,0x3e03fffd,
    0x3fa7f707,0x64fd41ef,0xf000efff,0xffffe98d,0x009f15ff,0x3f2005f5,
    0x1fd27c0f,0xf982fd80,0x6407d805,0x4c03f74f,0x4c0fdc4f,0x5fd4403f,
    0x441f9000,0x6fc98aff,0x7cc00fb8,0x4c4eff45,0x7005f56f,0x0fc97a1f,
    0x2febbfd8,0x1fb05f90,0xa8bfee62,0x5fb8afef,0x1fe8df00,0x3e215fb1,
    0x002fa804,0x24f83ffb,0x13f206f8,0x3ec017d4,0x203f70c0,0x20bb05e8,
    0xfffd306e,0x4f8805ff,0x0fec17e4,0xbf3013e2,0xab7c27d4,0x327c802f,
    0xbf105f36,0x5f9827cc,0xff982fc4,0xfd81ff50,0x3e66f800,0x9f127cc3,
    0x2005f500,0x544f82c8,0x206f884f,0x47d801fb,0x70999999,0x403ee03f,
    0x887d80fb,0x1a9fcbff,0x1be0fdc0,0x03ec27d4,0x82fc97e6,0x2a25f56f,
    0x4e8fdc0a,0x993e60bd,0xb83fa03f,0x54bf202f,0x881fb83f,0x3ea6f9a9,
    0x9f127cc3,0x4bea1310,0x4f8000a9,0x0fec1fd8,0xfb003f70,0x7fffffcc,
    0x93a03f74,0x80f9a9a9,0xd92fc87d,0x3e237400,0xf30bf104,0xfd2fcc07,
    0x2beadf01,0x220efffc,0x0fc8fefe,0x3fa23fe0,0x7e8fea00,0x2fa8fdc0,
    0x3f222fa8,0x3e26ffff,0xf887f60e,0x7f52fdc4,0x001bfffb,0x11fcc27c,
    0x00fb80bf,0x4cccc7d8,0x303f74fa,0x33fff23f,0xd87c81f8,0x2600bb2f,
    0xf01fcc2f,0xf881ba0d,0xab7c1fa5,0x5fb8afef,0x1fcc5544,0x0bfbbee0,
    0x027cdbe0,0x417d4dd1,0x277f61fc,0x7fec6f98,0x27c44fee,0xeffa8bf7,
    0x2002fc8a,0x7dcbf04f,0xd8036c04,0xfba7c407,0x15f57b81,0xf505f17f,
    0x4eaefa85,0x7f50fb00,0x1fa83fc0,0x07ec9f10,0x07fd5be6,0x05e803f6,
    0x000eff98,0xb03f93f9,0x17d45ffd,0x84fa87f4,0x32ebea6f,0xf74f881b,
    0x441df50b,0x4f80984f,0x417ecfd0,0xb001eec9,0xf74f880f,0x4db6d903,
    0xf902f8af,0x2fffdc7b,0x7d427c40,0x5f81be04,0x17dc9f10,0x0feadfd1,
    0x07dc07ee,0x4bfbbe60,0xf9f303fa,0x2a0bfa0d,0xf92fcc2f,0x0fe4df05,
    0x2fde7c40,0x46e82fa8,0x827c0ffb,0x301fd1fc,0x360019fd,0xfba7c407,
    0x2a9f5d81,0xd501f89f,0xfffc98bf,0x2603f203,0x40bf105f,0x24f880fc,
    0xedfbbff8,0x5f505f56,0xbfb17f30,0xff98fe81,0x3fa02fb8,0x2a0dd03f,
    0x0ffdabef,0xa9be03f6,0x0bceeeff,0x403ffbe2,0x646e82fa,0xa827c2ff,
    0xe880fd2f,0x880fb006,0x9d03f74f,0x7cdee7f1,0x2603f980,0xbf04fecf,
    0x2fb83fc0,0x3e20fe20,0xea7ff4c4,0x3f705f56,0x3af7add0,0xefa8fe66,
    0x1fee00fd,0xfff505d8,0x07e819ff,0x777f44df,0x9f10fffe,0x0bea0bf7,
    0x87ff11ba,0x365f904f,0x007dc00f,0x53e203ec,0xf8ce81fb,0x5c1eafb3,
    0x7447d407,0x900fd40f,0x807f889f,0x7c08007d,0x1f905f56,0x71f99fb8,
    0xf90fea1f,0x03fb80df,0x8025f500,0xb37cc1fd,0x229f903f,0xf509f94f,
    0x3fd0dd05,0x23fb04f8,0x0fdc02fb,0x3e203ec0,0x29b03f74,0x4e8ff9de,
    0x27b80f90,0x203741fd,0xffcbdfe8,0xb82fa801,0x3eadf001,0x3e22fc42,
    0x43ea3f33,0x27fc46f9,0x5401ff10,0x7005f502,0xf37f447f,0x7c4fea0f,
    0x5f513f64,0x85fa8dd0,0x7ccff04f,0x400fdc04,0xba7c407d,0xff75d81f,
    0x3201dff5,0x7f9b6407,0x64401fcc,0x2001dfff,0x803fdc5e,0x757df56f,
    0x226d83ff,0x7ec6e9df,0x2ffffcbe,0x807feea2,0x2fa81ff9,0xfbcff880,
    0x2b3fa6ed,0xf10ffa99,0x3ea3fe89,0x9ff76e82,0xbf309f01,0x0fdc05f8,
    0x3e203ec0,0x4d903f74,0x7c803109,0xfeeedee8,0x0007e42f,0xf7000bf1,
    0xf8037d43,0xbffff916,0x7d41fb81,0x7fe440ef,0x50ff9aef,0xf8803dff,
    0x002fa80f,0x9b69ffd3,0xdfffffd8,0xfd113e21,0x5ba0bea5,0x213e00a8,
    0x00fec1fc,0x0fb003f5,0x03f73fa8,0x360003f5,0xefffeb87,0x0027c40c,
    0x100517f4,0x2600089f,0x04000100,0x04c40040,0x26201100,0x88004000,
    0x00000199,0x2a27c000,0x206f885f,0x07d804f8,0x01fb97ec,0x1be000bf,
    0x0fdc07f0,0x7fffcc00,0x00fc801f,0x00000000,0x00000000,0x00000000,
    0x00000000,0x03fe24f8,0x9fb027d4,0x27d99983,0x26fd99bb,0x2a099afb,
    0x107511df,0x7c407fb5,0x80006202,0x1001ccb8,0x00000003,0x00000000,
    0x00000000,0x00000000,0xfd93e000,0x9817e402,0x3ffe1fec,0x3ffff27f,
    0x3fffee0d,0x77fff544,0x404ffc82,0x000000a8,0x00000000,0x00000000,
    0x00000000,0x00000000,0x7c000000,0x3a005f14,0x4ccc0804,0x404cc419,
    0x10099998,0x00044013,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x093e0000,0x00000200,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x98000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x5515e5cc,0x59100555,0x20015100,0x55501bb9,
    0x26015555,0x553001bb,0x05775101,0x01577310,0x502af2ea,0x2a555555,
    0x22015102,0x54c0acb9,0xaa980acc,0x10aaaaaa,0xa8aa2055,0x102a600a,
    0x15501595,0x0a9854c0,0x0aa80a60,0x7fffec00,0x01ffffa5,0xf7003fee,
    0xfffe9803,0x7fffc0df,0x7f441fff,0xf9104fff,0xffa87fff,0xf501ffff,
    0x543fffff,0x42ffffff,0xd7ffffff,0x2e0fea0f,0x22ffffff,0x43ffffff,
    0xfffffffc,0x3607fa1f,0x4417ee2f,0x3ffee0ff,0x017e43ff,0x807ee3fb,
    0x1ffea87c,0x0837ee00,0xdf500fd0,0x4403f700,0x6fc98aff,0x0ccccefc,
    0x3fd897f4,0x4cd6ff44,0x5c47be20,0x8affb85f,0x5ff30c98,0x33302621,
    0x41fafd33,0x577e43fa,0x42a1c988,0x2620ffa8,0x46fa9999,0x42fcc6f9,
    0x23fb81fe,0x3ff51cf8,0x4df02fd4,0x99f201fa,0x001feffe,0x3f4007f6,
    0x26620080,0x21999bfc,0x21fd82fc,0x83fa805f,0x2017e47e,0x447e83fa,
    0x17e400ef,0x1fafd000,0x0bf31fd4,0x4017e400,0x23fc81fd,0x45fa80fe,
    0xfb8086f8,0x3fa83fc3,0x26d80bea,0x003fb3f9,0x0fd003f4,0xa80cccc4,
    0xffffffff,0x27d41fe7,0x81fb00bf,0x09f12fe8,0x5f889f30,0x7e401fe4,
    0x75fa0002,0x7f47f507,0x07ee0001,0x3e209f70,0x3a03fb8f,0x400bf22f,
    0x417e44fa,0x80be60fd,0x03fb046d,0xfd003f40,0x83ffff40,0x99bfc998,
    0x2209f119,0x3a017e5f,0xa9fffcc6,0x3a01311f,0x42fe88cf,0xffa800fd,
    0x3afd0002,0x37c7f507,0x80dd1000,0x6fd406f8,0x8b7cc06f,0x0fee005f,
    0x98df09f5,0x05e8f63f,0xee8807f6,0x2eeeeffe,0x4cc40fd0,0x01fb807e,
    0xf37c09f3,0xf839ffff,0x4febbee5,0xdffffcfc,0x77ffec40,0x2e007e81,
    0x74003eff,0x4fea0fd7,0x2aaa25f8,0x2fee540a,0x6c00fec0,0xafd801ff,
    0x3fa001fc,0x1fd47f80,0xd37d4fe2,0x100fec0b,0x999ff999,0x401fa039,
    0x01fb807e,0x53fc07f5,0x43ffd975,0xf15fd8df,0x266fbf69,0xfffb86fc,
    0x4006f82f,0x003fffc9,0x7d41fafd,0x7fc49f33,0x7f75c2ff,0x013ea04f,
    0x44007fe4,0x32004fef,0x643f903f,0xff93f80f,0x1fd813a3,0xe801fa00,
    0x700fd007,0x813e603f,0xf2fe406f,0x9fcc5ffd,0x21fc80fd,0x87ff54fd,
    0xf710007f,0x3afd007f,0x3e27f507,0x4405f505,0x0ef884fc,0x05fef980,
    0x2001ff90,0x93ea04fc,0x2fe9f06f,0x7ec09f4f,0x801fa001,0x00fd007e,
    0x17e203f7,0x3e2027c4,0xf507bfa7,0x3ea07f25,0xff889f53,0x80003f60,
    0xd7e807f8,0x6f8bea0f,0xfd005f50,0x3a003fb0,0x8802fd9f,0x09f9005f,
    0x40fe6ff0,0xf6d8f9cf,0x000fec07,0x03f400fd,0x2fb807e8,0x1fdc1fe0,
    0x03fb37c0,0x20bee1fb,0x903f92fb,0x0027e43f,0xdf003f60,0xd0fec1f6,
    0x005f503f,0x004fa8fd,0x03fe29f7,0xf900bf10,0x327f2009,0x2d9bd00f,
    0x3603fafa,0x01fa001f,0x0fd007e8,0x7dc0bf10,0x64037c44,0xf317e63f,
    0x7f42fc4b,0x1fd05f90,0x80017fc4,0x3ea047f8,0x7f885f95,0x3ea077cc,
    0xf12fcc02,0x1df3001d,0x3e202fdc,0x0027e405,0x6c0df9f5,0x5fbf13ee,
    0xd000fec0,0x803f400f,0x7bfb007e,0x5eff4475,0x2ae22ffc,0xfd85feba,
    0x641ffbad,0x23fdaadf,0xfdaacff9,0xbcdffa84,0x559bb1fc,0x67c45ff9,
    0xff11ffdb,0x905ff959,0x5fb77bff,0x3f6eaae6,0x3bbff60e,0x3fa2eeee,
    0x2202fe82,0x3bfea05f,0xf01eeeee,0x7fec07ff,0xc88bff60,0x0ccdfecc,
    0x55103f40,0x44555fd5,0x2aafeaaa,0x1bffb260,0x83bfffb1,0x02effff8,
    0x4037fff2,0x982efffb,0x203ffffe,0x0cefffd9,0x5bfffffb,0x83bfffb0,
    0x02efffd8,0x37ffff6a,0x7dffff50,0xfffffe81,0x0bf72fff,0x5f881bea,
    0x3ffffee0,0xff902fff,0x2a37e401,0x3ffe21ff,0x401fffff,0x3ffe607e,
    0x3e67ffff,0x07ffffff,0x30010010,0x20008003,0x00026000,0x00098801,
    0x20002001,0x00331008,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x35500000,0x05541510,0x55550554,0x22155555,0x2a0aa80a,0xaaaaaaaa,
    0x55555511,0x5440aa55,0x13555510,0x55555550,0x2aaaaaa3,0x1355551a,
    0x05445100,0x002aaaa2,0x5400154c,0xaaaa881a,0x000a9809,0x02035951,
    0x2a201000,0x5103500a,0xb04c0355,0x745f50ff,0xb1ffc44f,0xffffffff,
    0xbf50bea3,0x7fffffc4,0xfff34fff,0x1fabffff,0xfff997d4,0x7ff43fff,
    0xfff4ffff,0x3fa9ffff,0x201effff,0xf503ea7b,0x809dffff,0x2a002ffd,
    0xfffa85ff,0x0fe44fff,0x7ffffd40,0x8000fdc3,0x3ff620fc,0x07fe44ff,
    0x0bfffffb,0x1ffecdf9,0x47ff8bea,0x26623ffb,0x50fd9999,0x2077cc5f,
    0x99dfa999,0x37ea6609,0x2a0fd099,0x7339f32f,0x4cff45fd,0x33df0999,
    0x27fa1333,0x902ffb99,0x5fd43dcd,0x101fd999,0x22009fdf,0xbfa85fef,
    0x325fdb99,0x06fcc01f,0x1ff443fb,0xd87fd100,0x6c9f912f,0x4c6ae1ff,
    0x8ffec3fd,0x17d46efd,0x7e745f9f,0x2a4f8803,0x801fd12f,0x5f8805f8,
    0x25f507e8,0xd27dc4f9,0x7406f80f,0xdb06f887,0x21fd43e4,0xd5f505f8,
    0x3e7f600f,0x7c43fa85,0xd803f90f,0x222fc40f,0xfe9804fd,0x3f41fcc2,
    0xbf100591,0x7fb2ff88,0x7f17d45f,0x13e7e6bd,0x2fa83f20,0xbf1003fb,
    0xfd0bf100,0x27ccbea0,0x407e97e6,0xc83f406f,0x3ffffe2f,0xf50fffff,
    0x5f60bf07,0x5fd402fc,0x83fa85f8,0x803f92fc,0x320fb07e,0x3df500df,
    0x3f901f90,0x3e1be000,0xa9befb0f,0x1f77f12f,0xf1013ed9,0x2fbafa8b,
    0x100bf100,0x2a0fd0bf,0xfc89f32f,0x0df01fa3,0x49f507e8,0xeeaadfaa,
    0xf70fea2a,0x3e6bf107,0x7c5ba204,0xfd83fa85,0x7e803f91,0x3ea01f90,
    0x8077dc0e,0xfffffffd,0x7f64402f,0x27dc6fff,0x7d4beefb,0xf7f17f12,
    0x3f9013e7,0x004fdfa8,0x3e2017e2,0xeeeefe85,0x5bf32fee,0xafe8bfb7,
    0xdff0aaaa,0x1fa5dddd,0xd1fc2fcc,0xdb9bf509,0xf8bea05f,0x7c47f207,
    0x7c43fa85,0xf9007f27,0x201fd887,0x03fe66fc,0xaaaabfd8,0x5ff400aa,
    0xff76faaa,0x2df17d89,0x365f12fa,0x440bf0ff,0x4fefa85f,0x2017e200,
    0xeefe85f8,0xf32feeee,0xfd05ffff,0x3e5fffff,0xd2eeeeef,0xf117e20f,
    0x77d427c5,0xd81effee,0x2607f20f,0x2a17e23f,0x2ffdbacf,0xff1007f2,
    0x01fffb9b,0xff5037ee,0x000ff203,0x9b7c17cc,0x3f27d80a,0x25f32fa9,
    0xc817e5fa,0xfdafa81f,0x00bf1002,0x20fd0bf1,0x2a9f32fa,0x7c07e86f,
    0xf983f406,0x07f17cc5,0x0ffa87f5,0x09f517e2,0xa85f88dd,0x40dfffff,
    0xdc8801fc,0xfb07dace,0x417f4c09,0x5e9806f9,0x0df70bf2,0x56fc4fb0,
    0x3225f32f,0x2fc417a1,0x1fe8afa8,0x8805f880,0xf507e85f,0x4fa93e65,
    0x01be03f4,0x64fee0fd,0xffffffff,0x320fea4f,0x333bea2f,0x6fdc7fcc,
    0x4cefcccc,0xc8026fea,0x1ba0001f,0xb1007fd1,0x59ffb07f,0x8ffec775,
    0xffdbaefa,0x55555516,0x2fbfd8fb,0x837405f5,0x25f502fc,0x7c400ef9,
    0xe85f8805,0x3e65f507,0x0fd07f44,0x83f406f8,0x3f7310fe,0x54135f53,
    0x361fd83f,0xffffffff,0x3fffff21,0x3ea7ffff,0x001fc803,0x7fcc7f50,
    0x42fe4001,0x24fffffb,0x3fee0efb,0xff36d8df,0x98fbdfff,0x05f52fef,
    0x037c4374,0x02fdc5f5,0x3e2017e2,0x5f507e85,0x49f713e6,0x2037c07e,
    0x427ec47e,0x2a03ea7b,0x887fc43f,0x009f506f,0x07f50bf1,0x50003f90,
    0x000ea8df,0x04c01d70,0x98802008,0x87d99999,0x03f52ffd,0x017e4374,
    0x03fd85f5,0x664417e2,0xfd3ccefc,0x27ccbea0,0x407e87fc,0x2cccccff,
    0xbffb99fd,0x507b9b20,0x5ffd99bf,0x0ff01fd4,0x7f50bf10,0x999bf900,
    0x76e64499,0x000000df,0x00000000,0x2ff987d8,0x23ec03f7,0x17d406f8,
    0x7c407fa2,0xfffff305,0x541fabff,0xf709f32f,0xfff01fa7,0x3fa9ffff,
    0x3601deff,0x7fd41f26,0x7ec0ceff,0x1007f600,0x007f50bf,0xfffffff9,
    0x0b3bfe21,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x26000000,0x2aa601aa,
    0x0d554c00,0x26110131,0x98620a60,0x2151180a,0x016400a8,0x1884c013,
    0x26660c40,0x26609999,0x35009880,0x22203500,0x20888888,0x225712b8,
    0x205edc2b,0x080dd408,0x4ccccccc,0x00009999,0x30000000,0x889ffffd,
    0x40dffffe,0x0fffffe8,0x3edd05f5,0x23fffe8d,0xdfffdafa,0x23ffabe0,
    0x9f100ffe,0x3fb83fc0,0x13e403f7,0x9fffffff,0x3fa22fdc,0xfb807d00,
    0xffffc80f,0xdf50ffff,0x937cdbe6,0x2f41dfff,0xdf90bf62,0x3fffffe1,
    0x003fffff,0x80000000,0x2a98aff9,0x3222bfe2,0x3117ec5f,0xfb7417d4,
    0x27e99dfe,0xfc89effa,0x37e73be2,0x9f102f8c,0x7f417e40,0x36c05f50,
    0x3fa66666,0x5f917ec2,0x0ae5d1c8,0x5309f7f1,0x15555555,0x9afcdbe6,
    0x3ea9f15f,0xf904faae,0x9997ffc5,0x99999999,0x00000009,0x01fe8000,
    0x0fec17e4,0x82fa80df,0xfb89ff6e,0x7c41df51,0xf0ff9fe4,0x9813e209,
    0xf32fc45f,0x80bd16c7,0x8ff884fb,0x5fec44fa,0xb643febd,0x260001fb,
    0x3e2bf15f,0x7fcc5d35,0x3f2000ef,0x0000000e,0x88000000,0x507e805f,
    0x80e7ec5f,0xdf6e82fa,0x0bea3930,0x93e4f9ba,0x3eeaaa4f,0x7f41aaad,
    0x4f88bee0,0x3027cdf3,0x76fcc0bf,0x0fff6606,0x545e87e6,0xbbbbbbbb,
    0x53e2bf10,0x554404f8,0x00008000,0x00000000,0x200fe600,0x447f306f,
    0x2a0beffd,0x0df6e82f,0x4dd05f50,0x14f93e4f,0xffffffff,0x3a3fb89f,
    0x1ff95f86,0x3be207f1,0x00ffe400,0xe83bfff7,0xff917d45,0x41ffffff,
    0x01a86a1a,0x00000000,0x00000000,0x2017e600,0x307f306f,0x3ea1fff9,
    0x00df6e82,0x7cdd05f5,0x264f93e4,0x999df999,0x3f9b7c40,0x37f7f6d8,
    0x007f605f,0x3e20bff6,0x54fbad9e,0x001fb03f,0x00000000,0x00000000,
    0x20000000,0x07e807f8,0x4fb805f7,0x3edf07f5,0xe82fa806,0x3e4f93e6,
    0x9009f104,0xf901f93f,0x3f5db1f3,0xf9007f90,0x74503fd7,0x44022312,
    0x00000009,0x00000000,0x00000000,0x00bfa000,0x06e887f7,0xb17e5f98,
    0x2a01bedf,0x93e6e82f,0x7c413e4f,0x5fcf9804,0x3ead9f70,0x02fd40fc,
    0x0ef9afd4,0x00000fa0,0x00000000,0x00000000,0x00000000,0x32afbfe6,
    0x2eb3fa24,0x2af622fe,0x3f62feba,0xdf6efeac,0xdd05f500,0x27c9f27c,
    0xfd004f88,0x8ffea05f,0x67fc47ff,0x3e24cccc,0x9817ee0f,0x00000000,
    0x00000000,0x00000000,0xb1000000,0xd887ffff,0x7441efff,0x4c2effff,
    0xf6d8dffc,0xd05f500d,0x7c9f27cd,0x5c006a04,0x83fe607f,0x7ffd45fc,
    0x3fa7ffff,0x0003fd82,0x00000000,0x00000000,0x00000000,0x80040000,
    0x80133000,0x00000008,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_21_usascii_x[95]={ 0,4,2,0,1,0,0,4,3,2,1,0,2,2,
3,1,0,1,1,1,0,1,1,1,1,1,4,2,1,1,2,3,0,0,1,0,1,2,2,0,1,1,1,1,
2,0,1,0,1,0,1,1,0,1,0,0,0,0,1,3,1,2,1,0,0,1,1,1,1,1,0,0,1,1,
1,1,1,0,1,0,1,1,2,1,0,1,0,0,0,0,1,1,4,2,0, };
static signed short stb__consolas_21_usascii_y[95]={ 15,0,0,1,-1,0,0,0,-1,-1,0,4,11,8,
11,0,1,1,1,1,1,1,1,1,1,1,4,4,3,6,3,0,0,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,17,0,4,0,4,0,4,0,4,0,0,
0,0,0,4,4,4,4,4,4,4,1,4,4,4,4,4,4,0,-2,0,7, };
static unsigned short stb__consolas_21_usascii_w[95]={ 0,4,7,12,10,12,12,3,6,7,9,11,6,7,
5,9,11,10,10,10,12,9,10,10,10,10,4,6,9,10,9,7,12,12,10,11,10,8,8,11,10,9,8,10,
9,12,10,11,10,12,10,10,11,10,12,12,12,12,10,6,10,7,10,12,7,9,10,9,9,10,11,11,9,10,
8,10,10,11,9,11,10,9,9,9,10,9,11,12,11,11,9,9,3,8,11, };
static unsigned short stb__consolas_21_usascii_h[95]={ 0,16,6,14,19,16,16,6,21,21,10,11,8,3,
5,18,15,14,14,15,14,15,15,14,15,14,12,15,13,6,13,16,20,14,14,15,14,14,14,15,14,14,15,14,
14,14,14,15,14,18,14,15,14,15,14,14,14,14,14,20,18,20,8,3,5,12,16,12,16,12,15,16,15,15,
20,15,15,11,11,12,16,16,11,12,15,12,11,11,11,16,11,20,22,20,5, };
static unsigned short stb__consolas_21_usascii_s[95]={ 254,121,170,120,76,147,160,166,13,5,134,
75,248,248,198,87,68,242,205,157,157,58,80,25,91,191,233,247,212,155,202,
185,54,144,133,102,109,100,91,145,69,59,125,36,181,12,1,46,170,97,80,
114,47,134,216,229,179,192,168,47,110,30,144,204,190,238,136,1,204,222,1,
214,237,24,38,226,13,63,53,11,193,126,43,23,35,33,87,99,122,173,112,
20,1,67,178, };
static unsigned short stb__consolas_21_usascii_t[95]={ 1,1,55,40,1,1,1,55,1,1,55,
55,40,49,55,1,24,24,24,24,40,24,24,40,24,40,40,1,40,55,40,
1,1,40,40,24,40,40,40,24,40,40,24,40,40,40,40,24,40,1,40,
24,40,24,24,24,24,24,24,1,1,1,55,55,55,40,1,55,1,40,24,
1,1,24,1,1,24,55,55,55,1,1,55,55,24,55,55,55,55,1,55,
1,1,1,55, };
static unsigned short stb__consolas_21_usascii_a[95]={ 185,185,185,185,185,185,185,185,
185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,
185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,
185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,
185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,
185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,
185,185,185,185,185,185,185, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_21_usascii_BITMAP_HEIGHT or STB_FONT_consolas_21_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_21_usascii(stb_fontchar font[STB_FONT_consolas_21_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_21_usascii_BITMAP_HEIGHT][STB_FONT_consolas_21_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_21_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_21_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_21_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_21_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_21_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_21_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_21_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_21_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_21_usascii_s[i] + stb__consolas_21_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_21_usascii_t[i] + stb__consolas_21_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_21_usascii_x[i];
            font[i].y0 = stb__consolas_21_usascii_y[i];
            font[i].x1 = stb__consolas_21_usascii_x[i] + stb__consolas_21_usascii_w[i];
            font[i].y1 = stb__consolas_21_usascii_y[i] + stb__consolas_21_usascii_h[i];
            font[i].advance_int = (stb__consolas_21_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_21_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_21_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_21_usascii_s[i] + stb__consolas_21_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_21_usascii_t[i] + stb__consolas_21_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_21_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_21_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_21_usascii_x[i] + stb__consolas_21_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_21_usascii_y[i] + stb__consolas_21_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_21_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_21_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_21_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_21_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_21_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_21_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_21_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_21_usascii_LINE_SPACING
#endif

