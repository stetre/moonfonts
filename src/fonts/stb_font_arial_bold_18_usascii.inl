// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_bold_18_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_bold_18_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_bold_18_usascii_BITMAP_WIDTH         128
#define STB_FONT_arial_bold_18_usascii_BITMAP_HEIGHT         96
#define STB_FONT_arial_bold_18_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_bold_18_usascii_FIRST_CHAR            32
#define STB_FONT_arial_bold_18_usascii_NUM_CHARS             95

#define STB_FONT_arial_bold_18_usascii_LINE_SPACING          12

static unsigned int stb__arial_bold_18_usascii_pixels[]={
    0x83cb81d3,0x84ca80eb,0xca8e5c4c,0x099970cc,0x01579730,0x32a200a0,
    0x835502bc,0x260081a9,0x2552a89b,0xc89f01b9,0x207e44ff,0x17cc6ffa,
    0x7ffecbfa,0x220fffd1,0xffeefffd,0x02ff2204,0x7fffffd4,0x3a2fe40d,
    0x220f622f,0xd6fcfffd,0x81bfff9f,0x1bea20fc,0x0bfd81f9,0x88e5c3f4,
    0x35fd1fe9,0x7037dd10,0xffff509f,0xcfff981f,0x7c45ffda,0xfd8ff30f,
    0xfbaefc83,0xd57ffd6f,0xf85f987f,0x3f607e47,0x55427d41,0x1fe8ff40,
    0x1730ee88,0xfb0fe6aa,0xfd89fbf7,0x217fd40e,0x4c9f72fe,0x17f42dfe,
    0xa93fadf9,0x7f87f86f,0x07fa07e4,0x85fd05f9,0x903fd1fe,0x37fff23f,
    0x8ef8b96f,0x04ff8137,0xd5fb89ff,0x3fffec3f,0xb7d41ff3,0x03fe22fe,
    0x20ff81fd,0x207f40fc,0x42fe81fd,0xd03fd1fe,0x3e233ee7,0xcfe8f54f,
    0x205ff107,0x4ffc45fd,0x16ff4c6f,0xb7dc1ff1,0x21fe23fe,0x86fe42fd,
    0x0df710fc,0x85fd01fd,0x883fd1fe,0x7ec1fd2f,0x7fd41f33,0x07fcc0cf,
    0xefd86fc8,0xf83fd83f,0x7f5bfa2f,0x3f217ee5,0xfcaff443,0xf883ff70,
    0xfe85fd07,0x8fa83fd1,0xb8fec4f8,0x2fffe986,0x7ec0ffe2,0x80fff985,
    0xdffb83fd,0xdffd6ffe,0x5f905ffb,0x1f94ff98,0x1fe0ffee,0x47fa17f4,
    0xfbbdc1fe,0x207d3fc3,0x7fc6fcf8,0x0ffe2b65,0x3fd837f4,0xdf7dfd70,
    0x0bbfaffa,0x8bf60fec,0x21fe60fc,0x42fe80fe,0x983fd1fe,0x3ee5f99f,
    0x4d441f96,0x7dc1fd78,0xffffd8bf,0x3607fd00,0x6fa8403f,0xfd0023fd,
    0x3f20ff81,0x3f607f40,0x7f42fe81,0x27f03fd1,0xefffccfe,0xbcffc42f,
    0xefffd86e,0x6d445fff,0xbdf900ff,0x3fadf500,0xff0df001,0x0ff40fc8,
    0x0bfa0fee,0x207fa3fd,0x9cec98ed,0x64131cee,0x703fefff,0xdffdfffd,
    0x80bffe61,0x5400fff9,0x5003fd6f,0xfc8ff05f,0x3e20fec0,0x7f41ff85,
    0xdd103fd1,0x20ed8803,0x002effc8,0x2aa36c41,0x22001000,0x32003109,
    0x3237ed47,0x21f7e40f,0x43ff667c,0x7fd1ffa9,0x359fd105,0x01df7531,
    0x000001e2,0x00000000,0x5ff90fe2,0x7fcc0fc8,0xffc9fc46,0x747fff65,
    0x3f7207ff,0x00bdffff,0x00000122,0x00000000,0x015302a2,0x20a62053,
    0x9883511a,0x00666219,0x00000d44,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xca880000,0x5d4402bc,0x807b00bc,0x200bcca8,
    0xd74e82e9,0x44057103,0x45cc00ba,0x0b2a02a8,0xc98006e6,0xff503973,
    0x101bffff,0x1dfffffd,0x3fe606d8,0xf703ffff,0x1fb3f983,0x42fffec4,
    0x985ffff9,0x06fcfffe,0xfff993f2,0x6fa800ef,0xfff985fd,0x445ffdac,
    0xffbacffe,0x7c407dc4,0x0ffdabff,0xf2fb87d8,0xfeadfc8d,0x7f567f43,
    0x7dcf7f42,0xd93f206f,0x803fd9cf,0xd83976fa,0x17fd40ef,0xefa81ff9,
    0x3f60be60,0x5f83fe86,0x3f37fb2e,0x7d47fe3e,0x49f92e46,0x1bf61ff8,
    0x43fe4fc8,0x2a5305f9,0xff81556f,0x7f49ff04,0x7c27c004,0x7f10084f,
    0x7ffffff4,0x261ff15f,0x8bfa607f,0x037dc7f9,0x45fec9f9,0x7ff4c3fc,
    0x45fd6fde,0xbfb02ff8,0x333117fc,0x7c46d813,0x07ea002f,0xf30fdd7e,
    0x5407fccf,0x07fc43ff,0x27e40df9,0x3a13fff6,0xd6ffb9ef,0x80ffcc5f,
    0x43ff16fc,0x5c4ffffb,0x007fe20f,0xb3f987c8,0x3e27f98f,0x1efda80f,
    0x6fe89ff4,0xffa93f20,0x3fe21ffe,0x17f5bf61,0x3fa07ff1,0xeea93fe5,
    0x217cc4ff,0xbd0081ff,0xffcdfdb8,0x261ff33c,0x237d407f,0x6fffeffb,
    0x1ff93f20,0x23fccdf5,0xf85fd6fb,0x23ff985f,0x09fb06fd,0xe84fe89f,
    0xfd0fe23f,0x2bffffff,0x8ff50ff8,0x703fe219,0x2abf59dd,0x7cd3f63d,
    0xff887fc6,0x17f5bf20,0x75433fee,0x33fea0ff,0x3a13fea1,0xb85ffd46,
    0x107ea1ff,0x137f73dd,0x25fb97f4,0x8df50ff8,0x553ee09a,0x13ff88ef,
    0xd1be61ff,0xfeb7f45f,0xfefffd82,0xfffa82ff,0xc82ffffe,0xfffffd87,
    0x7c43e44f,0xff703f75,0xffc83ffb,0x77ec2ffd,0xff13feba,0x7ec1dfff,
    0x7dc3ffdf,0xfd6ffedf,0x3fffae05,0x3ff6a01d,0x3f500cef,0x07bffd70,
    0x367f30dd,0x077fee07,0x20b7fae2,0x45fffff9,0x441dffda,0xd503efec,
    0x3fadf5df,0x08000802,0x08802600,0x42620260,0x10008008,0x40155300,
    0x02001000,0x00000000,0x00000000,0x00000000,0x00000000,0x99037300,
    0x2aaaa001,0x40e5c42a,0x165c404c,0xcb82b980,0x5441cc81,0x99301cdc,
    0x33333225,0x01990ccc,0x3aa00e5c,0x0ffc5fff,0x7fffff80,0xf30fef6c,
    0x7f7fcc05,0x7fffec06,0x3fe0ffa1,0x3ffffa22,0xa7ffcc4f,0xfffffff8,
    0x7403ff1f,0x5e7f402f,0x007fe2ff,0x13333be6,0x36c7f19f,0x17e4ff60,
    0x5fcaefb8,0x8bfe0ffa,0xffc9aefd,0x2aa17ee0,0xf0fffbaa,0x017f403f,
    0xf37e4df1,0x7d406a3f,0xafcfe604,0xafe402f9,0x45fd02fd,0x3e0ffa2b,
    0xdb0bfa2f,0x02b7f6a5,0x3fe1ffc8,0x3fa15511,0x2fd41552,0x7e7fcff5,
    0x6fe40dff,0xf9cf80bc,0xff300db3,0x3fe20bfd,0x83fe8198,0x33fee2ff,
    0x3ffffd01,0xff0ffee0,0xcfe97fa3,0xff11fffe,0xfff87fe4,0x7ec3feaa,
    0x7dc2ffff,0x802f98ef,0x2605ffe8,0x21effdff,0x22ff83fe,0x0cfffff8,
    0x202b7f6a,0x9ff85ff9,0x57ff46fd,0x3bf64fe9,0x9ff0fffd,0x2fb237d4,
    0x21886fc8,0xf302ea6d,0x1531ffff,0x7e4f7fcc,0x3fe0ffa5,0xffffeb82,
    0x7c413f21,0xdfdff06f,0x3ee3fe81,0x3efbee25,0x7c45ff0f,0x00ffc00f,
    0x1fbbe5f3,0x3bbfa9fd,0xf8bfe62f,0xff07fb0f,0x27fdc403,0x3ffa09f9,
    0x3fffff00,0x17ee2fe8,0x8ffe7fa8,0x3a0c0ff9,0x7cdb602f,0x1ff11faa,
    0xf11fffe2,0xfd8ff43f,0xfd31ff84,0x3f26fb81,0x201ffc84,0x745fcfff,
    0xed97ee2f,0x2ffc9f90,0x8ffc4ff7,0x4be607f8,0x3e3f99fb,0x03bfee1f,
    0xc9fe29fd,0x83fee1ff,0x97fa24fe,0x1ffdc4fc,0x17fcbfe0,0xb2fdc5fd,
    0x7c1ffddf,0x43ffdeff,0x04ffdffb,0xfaaf99b6,0x3fb7ff21,0x3ea0efff,
    0x3e24ffef,0x44fffeff,0xfffefffa,0xffd13f22,0x27ffffff,0x74df51ff,
    0xd897ee2f,0x4ffc1eff,0xfd702efe,0x217cc09f,0xffc86ffe,0xa84e9aff,
    0x6cc0beff,0xf704ffff,0xfc83dfff,0x7fffff44,0x43ff3fff,0x5c5fd3fe,
    0x1000885f,0x0a600200,0x002200cc,0x00220010,0x000000c4,0x00000000,
    0x00000000,0x00000000,0x00000000,0x072e0000,0x66441997,0x65c0b320,
    0x6640f2e2,0x99999952,0x03326599,0x472e1993,0x02bccccb,0x82cb8e54,
    0x859971cb,0x3550ccc8,0x9fb3ca80,0x3ea1fff8,0x7c437e47,0x70bfea2f,
    0x3fff21ff,0x3a3fffff,0xfd2ff45f,0x3fffffa5,0x2ff980df,0x2fe81ffd,
    0xffb8dffd,0xc809fb1f,0x7ccdf76f,0x317f24ff,0x87fa83ff,0x8ffe26fd,
    0xabffbaa9,0x64bfea1a,0x74bfa0ff,0x4ffcaadf,0xfe97ffd4,0xfe97f45f,
    0x3fff60ff,0xfc809fb1,0x3ee1ff36,0x20ffa6fe,0x427ec3fe,0x0dfb3ff8,
    0xf9007fcc,0xfe85ff3d,0x6fc87fd2,0x74bffff2,0x4bfa1fff,0x3fe2fefe,
    0x809fb1fe,0x6c7fe6fb,0x07fe7faf,0x1ff89bf2,0x3ff5ff70,0x1007fcc0,
    0xfd0bffff,0xdf70ffa5,0xe97f466c,0x4bfa6fef,0xbf35fcfe,0x013f63fd,
    0xf9fecbf5,0x7f99fe8f,0x3ea3ff30,0x27fff407,0x5003fe60,0x5fd01fff,
    0x3eeab7fa,0xd2fe824f,0x3fa7ff7f,0x2eff5fd2,0x9fb1febf,0x3ee4fa80,
    0x77f76f9d,0xda7f40bf,0x37fcc04f,0x2007fcc0,0xfe80fffa,0xffffffd2,
    0x74bfa01d,0xfe8ffaaf,0xb3fd3fd2,0x3f63fd3f,0xf31fcc04,0x3be67f9f,
    0x3bee03fd,0xfe801ff8,0x00ff9803,0x217fffe2,0x99dfd2fe,0xd2fe8059,
    0x3fb7f65f,0xf7f73fd2,0x27ec7faf,0xfff0fe20,0x0ffffc3f,0x0df9ff10,
    0x2600ff60,0x3ff600ff,0x97f42ffa,0x7f4003fe,0x3fe25fd2,0xf33fd2ff,
    0x6c7fabff,0x742f804f,0x3ffec7ff,0x01fffec0,0xf9803fd8,0x25ff500f,
    0x4bfa0ffd,0x7f4003fe,0x7fdc5fd2,0x3fe3fd2f,0x3f63fd3f,0x3204c404,
    0x2ffdc5ff,0x007ffd40,0xf9803fd8,0x25ff880f,0x4bfa5ff8,0x7f4003fe,
    0xffe85fd2,0x3ffa3fd2,0x3ff63fd1,0xf72fffff,0x4c3ffa8b,0xff8803ff,
    0x00ff6005,0x3f203fe6,0xe97fd40f,0x8007fd2f,0xa85fd2fe,0x323fd2ff,
    0x7ec7fa7f,0x72ffffff,0x000000bf,0x00000000,0x00000000,0x00000000,
    0xcc82cb80,0x32e3970c,0xb981cc81,0xcccccb81,0x33332e4c,0x99972ccc,
    0x99970559,0x99703579,0xa8015799,0x065c004c,0xfb00bb88,0x3a2ffd87,
    0xff07fd2f,0x77fffcc5,0x3fffffa1,0xffffd0ff,0x3ffabfff,0x3a0dffff,
    0x4fffffff,0x7ffffff4,0x0bffa03f,0x2207fd40,0x40effffe,0x0bff23fd,
    0x20ffa5fd,0x2b3f62ff,0x2b7fa4fd,0x37fa2aaa,0xfd1aaaaa,0x4bff955b,
    0xfdaaadfe,0x2ab7fa1f,0xff307fda,0xfff100bf,0xd89dfc81,0xfb9fec3f,
    0xfd2fe83f,0x3e25ff07,0x7f4ff10f,0x201ff403,0x97fcc3fe,0x23fe83fe,
    0x0ffc43fe,0x007fefe4,0xfb03fff6,0x3f63fc41,0xfd03ffbb,0x3fe0ffa5,
    0xfe9fe602,0x201ff403,0xd4fd83fe,0x745ff07f,0x443fdc3f,0x204fe9ff,
    0x800ffbfb,0x7f7ec6fb,0x25fd02ff,0xfffffffe,0xe93fa02f,0x21eeeeef,
    0xfffffffe,0xbf907fd1,0x3bb33bfa,0x7ffff47f,0x6fb81eff,0x5be20ff5,
    0x7fdc00ff,0x7f7ffec1,0xfd2fe80f,0x5fffffff,0xfe83bf60,0x3a2fffff,
    0x1fffffff,0x2bf907fd,0x3ffffffe,0xffffffe8,0xf13fe84f,0x3e3fd05f,
    0x07fea00f,0x3fe2fff6,0x7fd2fe84,0xffb05ff0,0x7403fe81,0x41ff403f,
    0x939fd4fd,0x87fd05ff,0x3fe63fe9,0x5c5ffccd,0x0aff99df,0x3f605fd0,
    0xfd0bfee4,0x3fe0ffa5,0x74077ec2,0x01ff403f,0x4ffa0ffa,0x07ff23fe,
    0x4bf907fd,0xfffffffc,0x3ffff60f,0x7f884fff,0xdfd0ff60,0x3fe97f41,
    0x3ff22ff8,0xe807fd00,0x21ff403f,0x87fd0ffc,0x0ffa0efe,0x67fc9fd1,
    0x24feaaaa,0xcffcccca,0x7ec03302,0xfd27fcc3,0x3fe0ffa5,0xffffff12,
    0xd00ffa1f,0xffffffff,0x3ffffffa,0xf30ffa2f,0x7ffff49f,0xff51ffff,
    0xff01fee0,0x403fe201,0x1ffd83fd,0x20ffa5fd,0xffff52ff,0x0ffa1fff,
    0xffffffd0,0x3ffffaff,0x41ff41de,0xfffd1ffc,0x7ec3bfff,0x405ff104,
    0x1ff100ff,0x00000000,0x00000000,0x00000000,0x00000000,0x55511a98,
    0x80015555,0x106a60aa,0x5d440375,0x02ae200a,0x00002b88,0x15503771,
    0x41551a98,0x546a60aa,0xf70bb88a,0x3ffffeab,0x803b31ff,0xb97ee2fe,
    0x540fffff,0x442fffff,0x4c2ffffd,0x800efffd,0x7ffec4c8,0x3a2fe45f,
    0x7fc7f92f,0x67f47fa4,0x4ea9ffff,0xffb99993,0x40fbfe61,0x457ee2fe,
    0x43fc89ef,0x45fc9afe,0x0ffbaefd,0x17f273fa,0x324ffd98,0x22ffbbef,
    0x4ff30ff8,0x2dff35fa,0x2bffa7f8,0xfb004fe9,0xcfffeb85,0x5fb8bfa0,
    0x40159ff1,0x7c4df710,0x7cc26a1f,0xd503fe27,0x7fc39fff,0x7fb17ea2,
    0x2eff13f2,0x24fb8fff,0x017ee3fe,0xfc9813e6,0x5c5fd3ff,0x3fffee5f,
    0x7ff6441c,0x501fe67f,0x3ffdddff,0x20b7ffe2,0x07fc47f9,0xb07fedf5,
    0xb5f7fb3f,0xf717f43f,0x001fd00b,0x8bfa9ff7,0x7f64c5fc,0x273fe26f,
    0x83fe67f9,0x55577d40,0x1bff30aa,0xf983fe20,0x86fbff87,0xcf9dfcfa,
    0xf717f47f,0xbf50131b,0x6fffe4c0,0xafec7fd1,0x43fe63c9,0x89fea6fa,
    0xf87fa2ff,0x6445910f,0xff82dfff,0x3f213f23,0xfff883ff,0xfe89fff3,
    0x17ef7ee2,0x3fa207fa,0x7fe41cff,0xff15ffdc,0x7c49fb7b,0x647ffbcf,
    0x6c5fedff,0x704fecef,0x7dc7fffd,0x881ffeef,0xffb00fff,0xfd0bff63,
    0x2fdefdc5,0xbff9837c,0x5bffb100,0x77feccbf,0x57ff5c0c,0x7fed41fe,
    0x4fffc80c,0x544fda80,0x3600cffe,0xb9fee04f,0x2e2fe87f,0x5f98995f,
    0x00400510,0x40010010,0x30001000,0x00000205,0x0fa80000,0x000027dc,
    0x00000000,0x00000000,0x00000000,0x03fc8098,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x2a2a8000,
    0xe980ae62,0x5542a984,0x54aa5510,0x5555510a,0x2eeee235,0x4d982bbb,
    0x88770310,0x713b98bb,0x22008817,0x4bb31999,0x7dffc098,0x4fffcdff,
    0xff30bf30,0x5fa9bf27,0x2a3ffbff,0x33ffffff,0xbfffffff,0xfd01ffb0,
    0x4632e263,0x36fb9ff8,0x3ff221ff,0xff75a9be,0xfe97dcdf,0x7d4f7fc2,
    0x80ffb9ef,0x5ff705f9,0xfa7543ff,0x2aa24bff,0x9911ffea,0x88599999,
    0x1fe84fff,0x22bfddf9,0xf35fb9ff,0x3fffee1f,0xfff76fff,0x85fd2b8b,
    0xf8bfe2ff,0xffddd31f,0xfffd89dd,0x201ffc03,0x20002ffa,0xf80ffafc,
    0xfd0bfe60,0x53fc9f51,0x00676d45,0x7c3ff000,0x7d47fe1f,0x45ffffff,
    0xff806ff8,0x30ffea02,0x9fffffff,0x43fcbfc4,0x2366f45d,0x1dc3713a,
    0x99999800,0x7fc01999,0x1ff87fe1,0x55df9551,0x02fffb83,0xff980ffc,
    0xfffff984,0x453f25ff,0x4454147f,0x10000002,0xffffffff,0x3e1ff80f,
    0x2607fe1f,0xfbff105f,0xff84c41f,0x205fe881,0x40888888,0x002ee0bb,
    0x40000000,0x99999999,0xff0ffc01,0x7cc0ffc3,0x3fabfd05,0x0ffd7ea5,
    0x7fffffec,0x00000005,0x00000000,0x7c3ff000,0x2207fe1f,0x30ffb81a,
    0x7d7ea7ff,0xffffd81f,0x000005ff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_bold_18_usascii_x[95]={ 0,1,0,0,0,0,0,0,0,0,0,0,0,0,
1,-1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,1,1,0,1,1,0,1,
1,1,1,0,1,0,1,0,0,1,-1,0,0,-1,0,1,-1,0,0,-1,0,0,1,0,0,0,0,0,1,1,
-1,1,1,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0, };
static signed short stb__arial_bold_18_usascii_y[95]={ 14,2,2,2,1,2,2,2,2,2,2,4,11,8,
11,2,2,2,2,2,2,2,2,2,2,2,5,5,3,5,3,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,15,2,5,2,5,2,5,2,5,2,2,
2,2,2,5,5,5,5,5,5,5,2,5,5,5,5,5,5,2,2,2,6, };
static unsigned short stb__arial_bold_18_usascii_w[95]={ 0,3,7,9,9,14,12,4,5,5,6,9,4,5,
3,6,9,6,9,9,9,9,9,9,9,9,3,3,9,9,9,10,16,12,10,11,10,9,9,12,10,3,8,11,
9,12,10,12,10,13,11,10,10,10,12,16,11,12,10,5,6,5,9,11,4,9,9,9,9,9,6,9,8,3,
5,8,3,14,8,10,9,9,6,9,6,8,9,13,9,9,8,6,3,6,9, };
static unsigned short stb__arial_bold_18_usascii_h[95]={ 0,12,5,13,15,13,13,5,16,16,6,9,6,3,
3,13,13,12,12,13,12,13,13,12,13,13,9,12,10,7,10,12,16,12,12,13,12,12,12,13,12,12,13,12,
12,12,12,13,12,14,12,13,12,13,12,12,12,12,12,16,13,16,7,3,3,10,13,10,13,10,12,13,12,12,
16,12,12,9,9,10,13,13,9,10,13,10,9,9,9,13,9,16,16,16,4, };
static unsigned short stb__arial_bold_18_usascii_s[95]={ 127,123,88,53,66,31,46,96,25,1,81,
16,76,111,122,46,63,82,28,73,105,21,59,5,102,1,36,1,74,56,15,
115,49,92,81,34,58,48,38,14,17,13,93,1,113,100,89,1,71,76,69,
80,44,69,18,1,55,31,98,43,27,37,66,111,117,44,11,54,112,64,91,
83,118,122,31,109,67,1,119,84,117,107,40,34,100,25,95,105,26,90,47,
18,14,7,101, };
static unsigned short stb__arial_bold_18_usascii_t[95]={ 1,46,85,18,1,32,32,85,1,1,85,
85,85,85,85,18,18,46,59,18,59,32,32,72,18,32,85,72,72,85,72,
59,1,59,59,18,59,59,59,18,59,59,18,59,46,46,46,18,46,1,59,
32,46,32,46,46,46,46,32,1,18,1,85,89,85,72,32,72,18,72,32,
18,32,18,1,32,46,85,72,72,1,1,85,72,1,72,72,72,85,1,85,
1,1,1,85, };
static unsigned short stb__arial_bold_18_usascii_a[95]={ 72,86,122,143,143,229,186,61,
86,86,100,151,72,86,72,72,143,143,143,143,143,143,143,143,
143,143,86,86,151,151,151,157,251,186,186,186,186,172,157,201,
186,72,143,186,157,215,186,201,172,201,186,172,157,186,172,243,
172,172,157,86,72,86,151,143,86,143,157,143,157,143,86,157,
157,72,72,143,72,229,157,157,157,157,100,143,86,157,143,201,
143,143,129,100,72,100,151, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_bold_18_usascii_BITMAP_HEIGHT or STB_FONT_arial_bold_18_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_bold_18_usascii(stb_fontchar font[STB_FONT_arial_bold_18_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_bold_18_usascii_BITMAP_HEIGHT][STB_FONT_arial_bold_18_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_bold_18_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_bold_18_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_bold_18_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_bold_18_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_bold_18_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_bold_18_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_bold_18_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_bold_18_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_bold_18_usascii_s[i] + stb__arial_bold_18_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_bold_18_usascii_t[i] + stb__arial_bold_18_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_bold_18_usascii_x[i];
            font[i].y0 = stb__arial_bold_18_usascii_y[i];
            font[i].x1 = stb__arial_bold_18_usascii_x[i] + stb__arial_bold_18_usascii_w[i];
            font[i].y1 = stb__arial_bold_18_usascii_y[i] + stb__arial_bold_18_usascii_h[i];
            font[i].advance_int = (stb__arial_bold_18_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_bold_18_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_bold_18_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_bold_18_usascii_s[i] + stb__arial_bold_18_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_bold_18_usascii_t[i] + stb__arial_bold_18_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_bold_18_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_bold_18_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_bold_18_usascii_x[i] + stb__arial_bold_18_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_bold_18_usascii_y[i] + stb__arial_bold_18_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_bold_18_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_bold_18_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_bold_18_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_bold_18_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_bold_18_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_bold_18_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_bold_18_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_bold_18_usascii_LINE_SPACING
#endif

