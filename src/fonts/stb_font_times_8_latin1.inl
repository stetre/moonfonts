// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_8_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_8_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_8_latin1_BITMAP_WIDTH         256
#define STB_FONT_times_8_latin1_BITMAP_HEIGHT         32
#define STB_FONT_times_8_latin1_BITMAP_HEIGHT_POW2    32

#define STB_FONT_times_8_latin1_FIRST_CHAR            32
#define STB_FONT_times_8_latin1_NUM_CHARS            224

#define STB_FONT_times_8_latin1_LINE_SPACING           5

static unsigned int stb__times_8_latin1_pixels[]={
    0x00000000,0x01800000,0x00140440,0x03008806,0x00aa0cc0,0x01540c04,
    0x00030088,0x02200000,0x2da86a6a,0x181998e6,0x08800030,0xb8138600,
    0x31037100,0x8c04ccc4,0x88131861,0x3710302a,0x98331030,0x03019829,
    0x2221b80c,0x26111108,0x40c1442a,0x80c0540a,0x81b88098,0x2a218299,
    0x0d40c063,0x4ce0f7c3,0x19818712,0x20612038,0x3350c09a,0x895409b8,
    0x33188443,0x32431983,0x50e2751c,0x5429a853,0x2a14d429,0x51c4ea29,
    0x713a8e27,0x4266a398,0x4157099a,0x0a828398,0x05014054,0xa8605014,
    0x22950638,0x0edc0323,0x2e6b064e,0x70a6e629,0x2e638811,0x98a6e629,
    0x06d5c1c4,0x255063b1,0x09823252,0x53241143,0x4ce25314,0x9c4a6712,
    0x44a67129,0x45314533,0x22a28a62,0x8390720c,0x32206e1c,0x10e50541,
    0x10391039,0x88391039,0x044326a0,0x40370632,0x911b9c19,0x027104e2,
    0x922a1937,0x209c4138,0x545c2438,0x30636221,0x06a6a2a5,0x490110c3,
    0x560c8a29,0x2b06560c,0x2b06560c,0x8a298a29,0x43548a29,0x3220d41a,
    0x48985b30,0x98733054,0x98489848,0x0c489848,0x4418662a,0x04cd440c,
    0x54dc7066,0x64453910,0x29199c29,0xc88a7223,0x8170e229,0x6c4442ab,
    0x9b8994c2,0x70c6608a,0x451cc70c,0x44aa912a,0x95522554,0x4d225548,
    0x98a398a3,0x222a98a3,0x8aaa1442,0x5449a808,0x93512ae0,0x93509350,
    0x5c189350,0x812060aa,0x5c383303,0x40e20e23,0x432ea2aa,0x38838838,
    0x95405c18,0x18304c29,0x218e18cc,0x2a054e41,0x82a6a0a9,0x2a6a0a9a,
    0x9c82a6a0,0x2054e40a,0x05400a9c,0x7010202a,0x401892a1,0xa85c950b,
    0x172542e4,0x2200012a,0x8220100e,0x39308829,0x001ce4c7,0x32639c98,
    0x50212639,0x98198003,0x20821009,0x00000010,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x22000000,
    0x700a60c0,0x54cc1130,0x41b85311,0x02e0541a,0x4c37102a,0x70704429,
    0x20894c30,0x88c41118,0x355104c0,0x0d4418aa,0x10970ae2,0x86a014c4,
    0x15c4713a,0x8133302a,0x2638ea19,0x826660cc,0x10444298,0x32155547,
    0x18310a61,0x20b8330c,0x773060aa,0x11254661,0x0604c088,0x26090131,
    0x98a504c0,0x388604c0,0x0c606303,0x9b846e0c,0x4099b818,0x5330e209,
    0x5386e0c1,0x1850314c,0x510d554c,0x450862b0,0x26a1a899,0x388655c2,
    0x87120455,0x4930438a,0x498ea249,0x8c8661ca,0x9a926ab1,0x472864a4,
    0x941c8872,0x9a871ca3,0x4c3064a4,0x44cc4118,0x28226621,0x13326419,
    0x1c654113,0x26498325,0x543250a9,0x2298d520,0x49351d41,0x26e11b98,
    0x2280c5c4,0xa85b0438,0x8864a1a8,0xa41b3243,0x1c4710c3,0x331c4533,
    0xaa85cd47,0x520e0e70,0x4cc7331a,0x266244c3,0x1c98e663,0x0cc6a907,
    0x14621c4c,0x46a91c4c,0x3a898750,0x35487917,0xa4af2638,0x0a9c151a,
    0x071c0c53,0xa9c17353,0x86207221,0x22a088a9,0x5c215544,0x21c48711,
    0x471144ba,0x47115c38,0x710c64ab,0x98b26153,0xab8aa62c,0x93512ae4,
    0x12ae4ab8,0x553164c5,0x05cc63a4,0x93182a23,0x99a8aa61,0xbb9d4461,
    0x45530bda,0x2a60a1a9,0x42988aa2,0x86660a9b,0x0ccd42c9,0x0a090351,
    0x29982666,0x31514054,0x17951dc5,0x2388e238,0x07114c38,0x00000000,
    0x00950b80,0x26200060,0x00044000,0x00002000,0x00000030,0x00000000,
    0x00150000,0x0c150000,0x82224c93,0x00000049,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x53100000,0x348aa844,0x330541c3,0x1a822225,0x2550d4d4,0x00088038,
    0x310066a0,0x26008985,0x110c23ac,0x20462211,0x42a81001,0x44185508,
    0x0a94402b,0x4c313073,0x1c52a4aa,0x4dc531b3,0x029cb809,0x13056554,
    0x88886ae6,0x2e635950,0x08854e29,0x10c21ad2,0x33549431,0x0c350c21,
    0x40b863b1,0x88ea0c8a,0x9c4a6351,0x22a1840b,0x2215550c,0xa8e2e933,
    0x50d26a19,0x26a08832,0x22528224,0x88611ca0,0x88442229,0x0ab650ac,
    0xa818c837,0x980dc42a,0x22144c14,0xb388c543,0x7148b880,0x900b9b82,
    0x238b8672,0x390c438b,0x20191c5c,0x22a18d88,0x4488aa61,0x58323308,
    0x91c5c115,0x95186353,0x321c5563,0x2905d5c1,0x0e35531a,0x30d4386a,
    0x1724dc73,0x711a8d49,0x26126691,0x1b00c883,0x4540ad98,0x1056429d,
    0x9910c887,0x11ac8803,0x26488539,0x150e4ea1,0x5021c547,0x0371c543,
    0x9a8b6222,0xa870eea4,0xa446a331,0xa8e2a19a,0x442a6a2a,0x832e6913,
    0x54c49c0b,0x45930442,0x0cc72619,0x21c54957,0x4663309a,0x79371bc8,
    0x260902c1,0x204e4c49,0x88518489,0xbb894d43,0x0e21c401,0x9c188262,
    0xb9865cc4,0x4c288a0c,0x133510cb,0x22a298cc,0x9870c4a3,0x854d4331,
    0x032e60ca,0x272a1088,0x4000000a,0x0aa01aa9,0x64dc02a8,0xa954aa00,
    0x87379004,0x3c94c0e8,0x3662e0e4,0x40498039,0x2222394a,0x39c98950,
    0x80000000,0x2000000a,0x43510c9b,0x02a95449,0x00006cdc,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x26000000,
    0x498ea3ac,0x05ce60e6,0x53992611,0x73155cc7,0x0ae23853,0x000b800a,
    0x0c208880,0x08831311,0x10cc4222,0x1114c111,0x440514d4,0x94c53088,
    0x85453098,0x099c1318,0x13506233,0x435550ea,0x00000999,0x22000000,
    0x54322933,0x2ae20e24,0x22388440,0x0c9c4533,0x48473071,0x0cc40e44,
    0x82026617,0xb87221a8,0x9272ae49,0x21371999,0x2e154488,0x22a53313,
    0x31283111,0x44ce0c13,0x03044571,0x006a2200,0x00000000,0x38800000,
    0x24c5cc56,0x805b1071,0x8aa72238,0x8f225ac8,0x44c28388,0x20540d44,
    0x22355329,0x7150e43c,0x221c5454,0x988902a0,0x40202209,0x33330811,
    0x102098aa,0x00000620,0x00000000,0x10000000,0x92c85227,0x0e5c41c4,
    0x2711c466,0x88dce229,0x0506ddc3,0x41330935,0x4103310a,0x4362a0a8,
    0x37370c9b,0x770dc019,0x00000005,0x00000000,0x00000000,0x00000000,
    0x21539500,0x2659999a,0x1ed2a3ad,0x1dd2a498,0x12a19395,0x2e19971c,
    0x1b820950,0x00000401,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_8_latin1_x[224]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,
-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,
0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,
 };
static signed short stb__times_8_latin1_y[224]={ 6,1,1,1,0,1,1,1,0,0,0,1,5,4,
5,0,1,1,1,1,1,1,1,1,1,1,2,2,1,2,1,1,0,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,7,1,2,0,2,0,2,0,2,0,0,
0,0,0,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,0,0,3,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,2,1,1,1,1,
0,1,1,1,1,2,2,4,1,0,1,1,1,1,1,2,1,3,5,1,1,2,1,1,1,2,-1,-1,-1,-1,
-1,0,1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,2,1,-1,-1,-1,-1,-1,1,0,1,1,
1,1,1,0,2,2,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,2,2,1,1,1,1,1,0,1,
 };
static unsigned short stb__times_8_latin1_w[224]={ 0,2,3,4,4,6,6,1,3,3,4,4,2,3,
2,3,4,3,4,4,4,4,4,4,4,4,2,2,4,4,4,3,7,6,5,5,5,5,4,6,6,3,3,6,
5,7,7,5,4,5,5,4,5,6,6,7,6,6,5,3,3,2,4,5,2,4,5,3,4,4,4,4,4,2,
3,4,2,6,4,4,5,4,3,3,3,4,4,6,4,4,4,3,1,3,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,2,4,4,4,4,
1,4,3,6,3,4,4,3,6,5,3,4,3,2,2,4,5,2,2,2,3,4,6,6,6,3,6,6,6,6,
6,6,8,5,5,5,5,5,3,3,3,3,5,7,5,5,5,5,5,4,5,6,6,6,6,6,4,4,4,4,
4,4,4,4,5,3,4,4,4,4,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,4,
 };
static unsigned short stb__times_8_latin1_h[224]={ 0,6,3,6,7,6,6,3,8,8,4,5,3,1,
2,7,6,5,5,6,5,6,6,6,6,6,5,6,5,3,5,6,8,5,5,6,5,5,5,6,5,5,6,5,
5,5,6,6,5,7,5,6,5,6,6,6,5,5,5,7,7,7,3,1,2,5,7,5,7,5,6,6,6,6,
8,6,6,4,4,5,6,6,4,5,6,5,5,5,4,6,4,8,8,8,2,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,7,6,5,5,
8,7,2,6,3,5,3,1,6,1,3,5,3,3,2,6,7,2,3,3,3,5,6,6,6,6,7,7,7,7,
7,6,5,7,7,7,7,7,7,7,7,7,5,8,8,8,8,8,8,4,6,8,8,8,8,7,5,7,6,6,
6,6,6,7,5,6,6,6,6,6,5,5,5,5,7,5,6,6,6,6,6,4,5,6,6,6,6,7,8,7,
 };
static unsigned short stb__times_8_latin1_s[224]={ 254,227,139,23,120,125,132,254,1,43,89,
84,171,198,177,174,163,75,58,175,53,144,192,204,216,1,28,6,70,151,79,
27,23,63,42,41,1,249,48,230,35,31,237,21,15,7,47,76,244,209,233,
120,223,168,197,9,197,190,184,137,183,206,143,208,186,152,227,144,233,135,65,
60,55,70,19,82,73,104,99,125,221,246,116,229,159,108,113,118,94,31,120,
31,35,37,189,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,
239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,254,251,125,
241,97,204,41,9,194,209,130,162,134,198,185,202,163,130,156,160,180,149,200,
183,148,174,167,218,108,101,94,90,130,146,153,160,167,59,209,194,238,215,221,
244,1,250,5,14,102,11,54,66,72,60,78,125,28,98,91,84,47,187,173,
178,18,49,54,66,71,141,178,76,80,180,39,34,170,167,148,140,105,157,85,
115,44,139,154,111,92,17,22,36,87,110,5,115, };
static unsigned short stb__times_8_latin1_t[224]={ 5,10,25,10,1,10,10,1,1,1,25,
25,25,25,25,1,10,25,25,10,25,10,10,10,10,18,25,18,25,25,25,
18,1,25,25,18,25,18,25,10,25,25,10,25,25,25,18,18,18,1,18,
10,18,10,10,18,18,18,18,1,1,1,25,25,25,18,1,18,1,18,18,
18,18,18,1,18,18,25,25,18,10,10,25,18,10,18,18,18,25,18,25,
1,1,1,25,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,5,10,1,
10,18,18,1,10,25,10,25,18,25,25,10,25,25,18,25,25,25,10,1,
25,25,25,25,18,10,10,10,10,1,1,1,1,1,10,18,1,1,1,1,
1,10,1,10,10,18,1,1,1,1,1,1,25,10,1,1,1,1,1,18,
1,10,10,10,10,10,1,18,10,10,10,10,10,18,18,18,18,1,18,10,
10,10,10,10,25,18,18,18,18,18,1,1,1, };
static unsigned short stb__times_8_latin1_a[224]={ 29,38,47,58,58,96,90,21,
38,38,58,65,29,38,29,32,58,58,58,58,58,58,58,58,
58,58,32,32,65,65,65,51,106,83,77,77,83,71,64,83,
83,38,45,83,71,103,83,83,64,83,77,64,71,83,83,109,
83,83,71,38,32,38,54,58,38,51,58,51,58,51,38,58,
58,32,32,58,32,90,58,58,58,58,38,45,32,58,58,83,
58,58,51,55,23,55,63,90,90,90,90,90,90,90,90,90,
90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,
90,90,90,90,90,90,90,90,29,38,58,58,58,58,23,58,
38,88,32,58,65,38,88,58,46,63,35,35,38,67,52,29,
38,35,36,58,87,87,87,51,83,83,83,83,83,83,103,77,
71,71,71,71,38,38,38,38,83,83,83,83,83,83,83,65,
83,83,83,83,83,83,64,58,51,51,51,51,51,51,77,51,
51,51,51,51,32,32,32,32,58,58,58,58,58,58,58,63,
58,58,58,58,58,58,58,58, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_8_latin1_BITMAP_HEIGHT or STB_FONT_times_8_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_8_latin1(stb_fontchar font[STB_FONT_times_8_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_times_8_latin1_BITMAP_HEIGHT][STB_FONT_times_8_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_8_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_8_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_8_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_8_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_8_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_8_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_8_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__times_8_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__times_8_latin1_s[i] + stb__times_8_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__times_8_latin1_t[i] + stb__times_8_latin1_h[i]) * recip_height;
            font[i].x0 = stb__times_8_latin1_x[i];
            font[i].y0 = stb__times_8_latin1_y[i];
            font[i].x1 = stb__times_8_latin1_x[i] + stb__times_8_latin1_w[i];
            font[i].y1 = stb__times_8_latin1_y[i] + stb__times_8_latin1_h[i];
            font[i].advance_int = (stb__times_8_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__times_8_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_8_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_8_latin1_s[i] + stb__times_8_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_8_latin1_t[i] + stb__times_8_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_8_latin1_x[i] - 0.5f;
            font[i].y0f = stb__times_8_latin1_y[i] - 0.5f;
            font[i].x1f = stb__times_8_latin1_x[i] + stb__times_8_latin1_w[i] + 0.5f;
            font[i].y1f = stb__times_8_latin1_y[i] + stb__times_8_latin1_h[i] + 0.5f;
            font[i].advance = stb__times_8_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_8_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_8_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_8_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_8_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_8_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_8_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_8_latin1_LINE_SPACING
#endif

