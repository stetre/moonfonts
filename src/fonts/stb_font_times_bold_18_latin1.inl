// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_18_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_18_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_18_latin1_BITMAP_WIDTH         256
#define STB_FONT_times_bold_18_latin1_BITMAP_HEIGHT        100
#define STB_FONT_times_bold_18_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_bold_18_latin1_FIRST_CHAR            32
#define STB_FONT_times_bold_18_latin1_NUM_CHARS            224

#define STB_FONT_times_bold_18_latin1_LINE_SPACING          12

static unsigned int stb__times_bold_18_latin1_pixels[]={
    0x44000000,0x2a200009,0x00000002,0x55000000,0x4c000000,0x00aa001a,
    0x98000aa8,0x1544000a,0x1d500000,0x02aa01d5,0x05540aa8,0x81abed88,
    0x6dc42de9,0xff34acde,0x417e4005,0x0fe404e8,0x88ecb660,0x5dc1d84c,
    0x5dcc00cc,0xfb801aac,0x71006a02,0x2006f801,0xf3003ff9,0x5ff88009,
    0x4017dc00,0x00cdcdd9,0x80fdcfdc,0x89f102fa,0xf9703ff9,0x30fe60df,
    0xd36cc3ff,0x817c005f,0x00f406f9,0x741d87e6,0x7cd50ec4,0x2a03b104,
    0x6404b801,0x9801d103,0x26fa000e,0x00d3000e,0x001e8cc8,0x13ee00b6,
    0x020803fd,0x216e0b70,0x2080e9be,0xf98fe601,0x3f66881f,0x98051002,
    0x2e006200,0x8fd0761f,0x1e43f61d,0x06a006c4,0x03f10060,0x0013007d,
    0x400330cc,0x288e0009,0x3ea00600,0x307fcc0f,0x2e259dd9,0x030180ce,
    0xeda8c451,0x433b221e,0x81bf63f9,0x072abf62,0x0aa25555,0x7764c555,
    0x419d712c,0xdf0762fa,0x07bee1d8,0x26ae0744,0x7764c50a,0x819d712c,
    0x3007dc6d,0x3017b799,0x2e259dd9,0xbcc980ce,0x664c00bd,0x35000bdb,
    0xff06ff80,0x682ff989,0x996f764c,0xd932deec,0x7ffcc5bd,0xf8fe6340,
    0x9dfb005f,0x1ffc45fd,0x4c7fa83b,0xf98682ff,0x45f88763,0x417ff41d,
    0x3aafa22b,0x05ff30a7,0x7e87f20d,0x3fd13ee0,0x0d05ff30,0x03fd13ee,
    0x03fd13ee,0x7fc409d0,0xf98dfd05,0xff98582f,0x261ffcc3,0x7fec43ff,
    0x4cfe6246,0x7fb003ff,0x4bf91fea,0x7cc7f984,0x1f98582f,0x1c89d076,
    0xb0ffeaea,0x25fab741,0x2c17fcc2,0x0ff13fb8,0x3fe61fea,0x2c17fcc0,
    0x7fcc3fd4,0x7cc3fd40,0x03fe600f,0xfe81ffcc,0x2417fcc7,0x3e217fc4,
    0x217fc42f,0x124ffca8,0x13fe27f3,0xff897ec0,0x0a63fe21,0x5ff31fe6,
    0x6c2d9890,0x1f016c41,0x2e683fa2,0x2147f93f,0x70482ff9,0x7c1be69f,
    0x44ff886f,0xf8482ff9,0x44ff886f,0x4ff886ff,0x440fff20,0x8bfd04ff,
    0x88482ff9,0x17fc42ff,0x2510bfe2,0xf9892ffd,0x6c017fa3,0xfb07fe2f,
    0x31fe6079,0xca8905ff,0x825c0ec0,0x4c7e65f8,0x07fc7fa4,0x482ff985,
    0x1be6bf50,0x7fc17fe2,0x2417fcc6,0x7fc17fe2,0x7c17fe26,0xffb7106f,
    0xff827ec0,0x2417fcc2,0x3e217fc4,0x217fc42f,0x93ffd128,0x3ff23f98,
    0x897ec100,0x1ffcc0ff,0x7fcc7f98,0x20fa8482,0xb022e41d,0x2c43e1bf,
    0x199beeff,0x82417fcc,0x30df14fb,0x1ffa07ff,0x98905ff3,0x4ffd03ff,
    0xffd03ff9,0x0bfe6320,0x7fcc37d4,0x2417fcc0,0x3e217fc4,0x217fc42f,
    0x13bfe628,0x85fc87f3,0x7d53f63b,0x2603fd06,0x417fcc7f,0x0763f984,
    0x3621d89f,0xff2c1cef,0x0ca69f79,0x20905ff3,0x221fe2fc,0x8bfd04ff,
    0x44482ff9,0x4bfd04ff,0xbfd04ff8,0x037f4910,0x82fd85f9,0x88482ff8,
    0x17fc42ff,0x8510bfe2,0x1fcc7ffa,0x0ee6ff5c,0x03bf77f6,0x8ff30354,
    0xa8482ff8,0x8bf0763f,0x41ffc81d,0x3b65f90c,0x7fc4152a,0xb8fb0482,
    0xf04fd80f,0x82ff885f,0xff04fd84,0xff04fd85,0xfd99b705,0x5ef4c03f,
    0x0ffe00ce,0x10bfe216,0x2ff885ff,0x23fe4144,0x036203f9,0x440097ec,
    0x3e1be602,0x1fb8583f,0x1d8fd076,0x222fd462,0xff051004,0x10fe0b07,
    0x30df507f,0x07ff01ff,0xf30df50b,0x986fa81f,0xff8480ff,0x00ffd805,
    0x206e2fec,0x7fc42ff8,0x2617fc42,0x3f98fb03,0x7ec0be20,0x40e36602,
    0xfd86f8c8,0x0fd40dc5,0x0ec5e83b,0x261721f7,0xfd81c403,0x825c0dc5,
    0xd85fb069,0xb8bfb03f,0xfd85fb01,0xfd85fb03,0xffc82b83,0x00dfe801,
    0x816677ec,0x7fc43ff8,0xd51ffc43,0xf98d105d,0x00eb882d,0x67d407fd,
    0x05f3f303,0x80b33bf6,0x75c3b1dc,0x33f10ec0,0x42b2205d,0x7ec02bb8,
    0x03a82cce,0xbdeb824c,0x77ec01ed,0x6f5c02cc,0x75c01edb,0xfb81edbd,
    0x3bff661d,0x6f6dc401,0x93004c01,0x3f263bff,0xbff931df,0x00004003,
    0x807332a0,0x00d4c01a,0x7088004c,0x440b80c1,0xa98800aa,0x00098001,
    0x00188000,0x0c400098,0x0000c400,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x10055100,0x05bb9b97,0x54c00d4c,0x939d5001,0x01ecf600,
    0x51016cb6,0x006a6005,0x00002aa0,0x003aa3aa,0x40a001dc,0xd7109b4d,
    0x557db109,0x05d15d10,0x81000000,0x02a80198,0x2200fc80,0x80577fff,
    0x6ff800ee,0x05ffbb00,0x817e37e0,0x204f8df8,0xf8801ffc,0x02fc4005,
    0x5c02b722,0xb801fb9f,0x07100298,0xbf02fdba,0x20dff970,0x2e3f9bf9,
    0x801d01cb,0x372ccdb9,0x7cc03fb0,0xb0274c2f,0xbfffec07,0x003a601b,
    0x800ba36e,0x00100008,0x73f10041,0x001e600b,0xb9dc80b5,0x004100fa,
    0x700299b8,0x0bf00001,0x208200c1,0x3c87c9fa,0xfd067d40,0x9d026c09,
    0x407fb8d5,0x5ffffe01,0x4002201b,0x33260143,0x64c00bdb,0xaa80bdbc,
    0x1505512a,0x00980054,0x37f10060,0x01a806e7,0x64402640,0x66f764c5,
    0x05f81eee,0xeec9806a,0x5f91fb2d,0x3fea02cc,0x7007fdc0,0x2a298a20,
    0xe806a06f,0x4c377fff,0xeeecdeec,0x337bb261,0x4fb81eee,0x4fb80ff4,
    0x3fe20ff4,0x01a80763,0x3b37bb26,0x3bb6a1ee,0x4c77660b,0x40113bff,
    0x0274004e,0xf317eb36,0x7c174c5f,0xf3013a05,0x7e47e47f,0xbfd003a1,
    0x984ffc88,0x597302cb,0x13a04f98,0x377fffc8,0x3a62ff98,0xd317fcc2,
    0xf987fa85,0x4c3fd40f,0x92fe40ff,0x7cc04e80,0xf90ba62f,0xfe83b07f,
    0x0ff9805f,0x201ff300,0x446eb9fa,0x20aa12ff,0x01ff305f,0x3f317fc4,
    0x2201e4d9,0x7f5224ff,0x43fcae46,0x2f87f95c,0x6c01ff30,0xf88377ff,
    0xf10aa12f,0x3e15425f,0x44ff886f,0x4ff886ff,0x014c7fc4,0x7c401ff3,
    0x3a0aa12f,0x6c42446f,0x3f201eff,0x7ff9003f,0x022e7f60,0x808e5ff1,
    0x07ff905f,0x2e617fc4,0x9818d30a,0x7f4323ff,0x45fabfc7,0x0d8bf57f,
    0x9807ff90,0xff88376b,0x3fe20472,0xbff10472,0xff89bfe0,0xfb0dff05,
    0x3ffc8079,0x11cbfe20,0x0647ff50,0x220fff70,0xb8807fdb,0x1bff07fd,
    0x1a2bfe20,0xfb710bf0,0x017fc40f,0x1e9ea874,0xd0653fe2,0xfd8a98df,
    0x37ec54c6,0x3fedc412,0xf8837580,0x3e2068af,0xff3068af,0xf99ffa07,
    0x30ffd03f,0x6dc407ff,0x2bfe207f,0x8ffe8068,0x7fecc02a,0x2ff98c82,
    0x17fcc640,0xff1037ec,0x85f80ffd,0x102ff98c,0x23c805ff,0xdff8bf6e,
    0x6427fc1c,0xbdc86fbd,0x98c8046f,0x375802ff,0x07feff88,0x41ffbfe2,
    0xbfd04ff8,0xfe827fc4,0x6403fd05,0xf102ff98,0xf300ffdf,0x4c62099f,
    0xd2443fab,0xfd2440df,0x915ff50d,0x068aff88,0xfe9222fc,0x405ff106,
    0x3f5be269,0xff30bfee,0x6fa8fd83,0x237d47ec,0xdfd24409,0xf106eb00,
    0x7c40d15f,0x3f6068af,0xfd85ff04,0x2a05ff04,0x6fe92206,0x0d15ff10,
    0x4407ff60,0xb81f5735,0x01ffeccd,0x3ffd99b7,0x883dffb0,0x7c0472ff,
    0x7f666dc5,0x02ff881f,0x17edd03a,0x85fb0ffa,0x26fdaff8,0x26fdaff8,
    0x666dc6fa,0xbac01ffe,0x2397fc41,0x2397fc40,0x7cc37d40,0x4c37d40f,
    0x405100ff,0x1ffeccdb,0x0472ff88,0x2201ff70,0x481cdcde,0xf0905ff8,
    0x440270bf,0x7c2c12ff,0x42ffc245,0x07902ff8,0xc985f1f5,0x01ddbceb,
    0x45ff17fd,0x32ff8bfe,0x5ff848bf,0x7c41bac0,0x3e22c12f,0x7ec2c12f,
    0xfd81fec2,0x3661fec2,0x7fc24038,0x412ff885,0x003fee05,0x20ae0751,
    0x415c1ffc,0x006a1ffc,0x46b87ff1,0x320ae5f8,0x1ffc41ff,0x140a2028,
    0x00000062,0x7e415c08,0x20dd601f,0x235c3ff8,0x835c3ff8,0x01edbdeb,
    0x0f6def5c,0x5701e7d4,0xf883ff90,0xf7035c3f,0x7dc0001f,0x3bff661d,
    0x6cc3bf71,0x98071eff,0xffdceffc,0x7dd7ee25,0x3bff661d,0x03bff931,
    0x00000000,0x37ee0000,0x07bff661,0x3f260994,0x25ffdcef,0xfdceffc9,
    0x000c405f,0x00d400c4,0x7ecc3bf7,0xdff931ef,0x2a0bffb9,0x0001cffd,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x20000000,
    0x00cc4099,0x06a20662,0x50062000,0x00000005,0x00000000,0x00000000,
    0x54401310,0x98800001,0x98800000,0x00133001,0x3607db00,0xd06f8801,
    0x41fdc01f,0xb9b507fd,0x40aae607,0x2ea02ff9,0x59003a1d,0x7bbbd910,
    0x37726037,0x76dc402c,0x45644acd,0xaddca80b,0x05f5d443,0x7f405fb0,
    0x6de64c06,0x013ea00b,0x2016edc4,0x37c401fd,0x059bb930,0x8950d713,
    0x8075c0eb,0x20fa03e8,0x7d43d9e9,0x21705f93,0x20d77d04,0x01dcdf6c,
    0x41df503a,0x0bb81fd8,0x7fcc12a2,0xdd11b661,0x44d89ae0,0x7c0bf74c,
    0x0ba7aa02,0x07fa27dc,0x27d007a8,0x404d807e,0x417700eb,0x43e984a8,
    0x217f40e8,0x881c400a,0x32241503,0x9109f73f,0x14c51019,0x1666cb7c,
    0x0ffcc598,0xb89dc1e8,0x7cc4abba,0x2e66881f,0x445e84e8,0x0ff9b744,
    0x911c0288,0xff30ff50,0x26005401,0x0e00d93f,0x2aee0150,0x88952bac,
    0x320b60fc,0x80b2e60f,0xa80aa02a,0x5f73fd82,0x54059730,0x207f981b,
    0xfe87700e,0x2ab02606,0xd832b10f,0x7510a06f,0x20cff87f,0x26f98cc1,
    0x1aa89aa9,0x2aa26aa6,0x7c437fc1,0x226aa64f,0x1df501aa,0x0375003b,
    0xf9ac0dd4,0x26193f8a,0x7a8254d0,0x261fe572,0x47cc6a8f,0x3547cc6a,
    0x20fe6ff6,0xe987f95c,0x3ea22f8a,0xd02c81af,0x002ffc41,0x26117a73,
    0x54017fe2,0x7ec7fabf,0x1ec803ff,0x45fc9ff4,0x44bf93fe,0x8dff05ff,
    0x20bf93fe,0x2aa65ff8,0x0be2ba61,0x4c5f15d3,0x29f15f33,0x2233b729,
    0xf2c4260e,0x2db17eaf,0x7cdb62f9,0xb17cdb62,0xff13e67f,0x74fd17ea,
    0xfffff90f,0x98d10b30,0x26e004ff,0x7cd203f9,0x7cfd003f,0x3fff621f,
    0xb01d100d,0xfb17ee7f,0xff997ee7,0xfd8ffd03,0xb930bf73,0x3a1fc1ff,
    0x27e83fa7,0x3e6370fe,0xd8120dec,0x26087e62,0x3e26fd8a,0xdf14fcce,
    0x3be29f99,0x4ff64fcc,0x6c54c7f8,0xfe9fe26f,0x0d017ec2,0x44ff8877,
    0x531cccc9,0xf89cc17e,0x27f8804f,0xffea83fe,0x3f601506,0x3fd8bf73,
    0x27fc4bf7,0x9fec5fe8,0x447d45fb,0xf88b36ff,0x3fc4bfa7,0x7cca65fd,
    0x540e65ea,0xc807f224,0x1be66fbd,0x6f9837cc,0x7fc4ff60,0x537dee40,
    0x2e1ff4ff,0x3b0b201f,0xff70bff0,0x8c4f9483,0x2017fa1b,0x44bfa7fa,
    0x040ffdc1,0x17ee7fb0,0xb17ee7fb,0xb0bfe09f,0xfd17ee7f,0x0373fea1,
    0xa9ff4ff5,0x348ffa7f,0x06e5f55f,0x1f8c83a2,0x4df51fb0,0xff881ff8,
    0xb01ff881,0xfb07fc7f,0x27f8df51,0x51f2a0fe,0x5c1a24a8,0x0ffd40ff,
    0x88d6d472,0x0807fe45,0x88ff4ff1,0x0980fc86,0x17ee7f90,0x517ee7f9,
    0x81ff30df,0x4cbf73fc,0x17ff23ff,0x7c1fd3fc,0xb9c83fa7,0x059dd8ce,
    0x2ff75c5b,0x37ed7fc4,0xe8a637fa,0x3fa298df,0x2ff6298d,0x3fe26dbd,
    0xf3ec6fda,0x77feddcd,0x812a782f,0x0ffd44fd,0x406c40e4,0x363b85fc,
    0x42f89be7,0x906fa85c,0xf917f69f,0x3f617f69,0x7e41fec2,0xffe8bfb4,
    0x77bfff32,0x7d8df3ec,0x220721be,0x4c44a80d,0x17fd02fa,0x7ff445ff,
    0x227ff444,0x3e64ffe8,0x740ddbbf,0x222ff8bf,0x2ea0ecce,0xd80dffbe,
    0xdea803b1,0x700bedab,0x4019b99b,0x41dcdfeb,0x220eccd8,0x80cbbdde,
    0xbff105f9,0x7fc43ff9,0xeb81ffcd,0xf101edbd,0x4c3ff9bf,0xfc8cfffd,
    0x7667445f,0x07667440,0x0cdccdb8,0x00540150,0x00200400,0x40000001,
    0x20081008,0x19800108,0x40004400,0x44008801,0x00800801,0x01880010,
    0x40440020,0x10022008,0x00022001,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x4c0a9800,
    0x3bbbae01,0x44157101,0x5441d89d,0xdcc80bcb,0x4c032603,0x9bdc81bb,
    0x546cc002,0x41e6540d,0x881d89d8,0x81310766,0x542deec9,0x3203530a,
    0x8b2229bd,0x3221eeda,0x1f6dc0ce,0x40e80ed4,0xc83b01da,0x533eeeee,
    0xaa839515,0xa885512a,0x27fc451c,0x7ffc0fee,0x501d907f,0x7c87f57f,
    0x3eafb1b6,0xf307fd03,0x76cc3f93,0xecc981ff,0x87f27ee1,0x542f89f9,
    0x5a83fabf,0x101fd03e,0x25fb09ff,0xfed984fc,0xf31bee1f,0xeb8681ff,
    0x3ea22ffe,0x7d443c81,0xfff84a81,0x3bfa2fff,0x3fe22fec,0xb4f88763,
    0x07d6e4bf,0x266ea1b2,0x200fc809,0x21ff1020,0x22df11fb,0x80da80ff,
    0x3047f36d,0x0be77a01,0x7f9fa041,0x89dc0208,0xff00fcc6,0x3f25fb07,
    0xb1026084,0x46ffd885,0x89fb1444,0x982cc1f9,0x2607441f,0x6c7caabe,
    0xfc8ff53f,0x2e1fd125,0x38388e5f,0xf701acc8,0x42cb9809,0x21f95ff8,
    0x00bfe6fa,0x54026f88,0x405f981b,0x3fa7f82a,0x6541ba80,0x263edcde,
    0x6c1ffc01,0x2609f92f,0x951002cb,0x320249ff,0x3a0fcc1f,0x2d83f300,
    0x36264098,0x443ff12f,0x3e2298ff,0xaa997ee7,0x3e0554c0,0x7f40dfff,
    0xcae40bed,0x777fe43f,0x3fe9fe61,0x40ff3050,0x262f8ae9,0x8f982efc,
    0xfe9fe66a,0x8be2ba62,0x2cdabfa9,0x7fc01553,0x9f92fd83,0x70ff2b90,
    0x4bff6510,0x2613e204,0xf980f21f,0x2e8012a1,0x83ff17ec,0x3fd43cfd,
    0x83fe8bf7,0x3ff623fe,0x547fc4ff,0x5fabfc7f,0x741fffc8,0x5503fd1f,
    0x3f407fe0,0x3bf261fd,0x25f36d82,0xe8ffa7fa,0x26883fa7,0xf01ff41d,
    0x325fb07f,0xbf57f84f,0xe89440d8,0xff5049ff,0x45f5c47f,0xeb882659,
    0x0260e88b,0x897ec3cc,0x1ffcc0ff,0x2fdc3fe2,0x0ff60ff6,0xf987fdcc,
    0x8a987fa7,0x7df4c6fd,0x37f660ff,0x3607b87f,0xff1289ef,0x0bf517f4,
    0x29f99df1,0x44bfa7f9,0x5c4bfa7f,0x3609f99d,0x20ffe03f,0x2dfe9bfe,
    0x237ec54c,0xff31442e,0x3ff4c09d,0x07f743a0,0x80fcc5b0,0xf54fd85b,
    0x3a07fa0d,0xfd8bf92f,0x5403fd83,0x7ecff32f,0x137dee43,0x40bfe6bf,
    0x027dc5fa,0x7d49ff91,0x5fa8ffa7,0xff106f98,0x27fa8ffc,0xdddf73fe,
    0x21fec9df,0x3fa0ffe0,0xc82ff9df,0x0fe26fbd,0x07ffa851,0x3c807fc4,
    0x2a05f111,0x7407f224,0xefddfd82,0x3620d500,0x7ec5fddf,0xf803fd83,
    0x17ec3fe0,0x54df51fb,0x6c0bf64f,0x5c97fc0e,0x74ff0390,0x2217ea0f,
    0x7cff01ff,0x0fe9fe0f,0x7ec2d4b6,0x3fe2bf23,0x02208f82,0xa9bea3f6,
    0x7e41445f,0xb304d807,0x83a20b50,0x07981f8c,0x510025fb,0xd8bf7080,
    0x263fd83f,0x5f91223e,0x57fc43ba,0xdb2fc6fd,0x3fa03b20,0x21b60f93,
    0xbf51be7d,0x8a637fa0,0x6c4f88fb,0x321f1be7,0x3ee3fd83,0x7c40ff89,
    0xdaff8801,0x731fee6f,0x41b71f60,0x4881d01e,0x775c5b01,0xfb05b85f,
    0x01c6cc05,0x3fe8bf70,0x3fa23fe8,0xd7d903be,0xff8bfe83,0x072ef6a2,
    0x3ea01775,0x3d982c8e,0x40ecce88,0xffd106fa,0x10b9b909,0x3441d99d,
    0x447fd03b,0xf982fdbd,0xf17fd002,0xea9bee5f,0x7d46882e,0x07902cdf,
    0x44a89ddb,0x2e82fa98,0x7d407fd0,0x9bee003c,0x3e60dff9,0x800440df,
    0x10080000,0x000aa800,0x3f620220,0x1100202f,0x04100880,0x0406ffcc,
    0x500000a0,0x11008001,0xaaa88280,0x01500540,0x02aaa603,0x2a2001a8,
    0x000001aa,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x33bb2600,0x2e19d712,0x36a0beee,0x15ddd71d,
    0x6cc7ddd7,0x55dcc004,0x005db32a,0x909db300,0x66cc1329,0x05b3d839,
    0xdceeeda8,0x8bb664ee,0x64c03ed9,0x80abddee,0x32603ed8,0xdd901cee,
    0x99897227,0x93099999,0x8179dbdd,0xb31deed9,0x21d9817d,0x2a1deec9,
    0x03710bed,0xb0d05ff3,0xe85901ff,0x643fec7f,0x9fc83980,0x0bfa3efa,
    0xfb803d70,0x20dd7e85,0x7c44ffdd,0xcd805f8d,0xfd1720ff,0x9804fd87,
    0x01df52ff,0xff9809fb,0xc87fe202,0x7cc30061,0xa83ff72f,0x2a1e45ff,
    0x7fc41ffd,0x3ee17443,0x582ff986,0x8583ff98,0x3fea2ffa,0x21f44242,
    0xd8ff17f8,0x017ec02f,0x442217ee,0x04062100,0xff773001,0x0ff62421,
    0xff3009f9,0x320ffdc5,0x67fc404f,0x249fb01a,0x7fc43006,0x3f213fe2,
    0x3e20912f,0x11ffc41f,0x307d303b,0x360905ff,0xff81546f,0x8352ffc5,
    0xf30adfe8,0x2bf63fcd,0x302881c9,0x54cbf777,0x221aa89a,0x982c99aa,
    0xf74800aa,0x3f604e1f,0xaa9a7e43,0xf117fcc1,0xc9cfc89f,0xfbbff882,
    0x38bfd41e,0xff88600c,0x3a20ffe2,0x7fc048ff,0xc99ffc41,0x2ff98000,
    0x45ff5048,0x543ff204,0xd3090ffe,0x47ec15bf,0x5f7ec4f9,0x02aa63fd,
    0x8bff79f5,0xd8bf93fe,0xe83fedef,0xfb8dc03f,0x7fb04a8f,0x207e4fc8,
    0x37fc2ff9,0x0ffafbf2,0x1fee3ff1,0x0302ebfe,0x22bfe218,0xff500dfc,
    0x41ff801f,0x00fabff8,0x905ff300,0x029aff40,0x7c64ffe2,0x7fb038bf,
    0x360b3760,0xfe8ff32f,0x5fb87fc3,0x45fb9fec,0xb0bf75fc,0x4cec407f,
    0xb04fdffc,0x374fc87f,0x79bffb50,0x29f91ffa,0x8ffc44fb,0x6fe41ffa,
    0xf10c0184,0x803bfddf,0x7fc02ffc,0x7ff7fc41,0xff981404,0x3fee0482,
    0x8efd8049,0x2017dfb3,0x403c83fd,0x43ff12fd,0xb9fe23fd,0xfb9fec5f,
    0x5fba7e45,0x2b203fd8,0x4a8ffdaa,0xcfc87fb0,0x0bfe605c,0x74fc8ffd,
    0x71ff88bf,0x3f7321ff,0x30064cdf,0xff997fc4,0x03ffea03,0x7fc41ff8,
    0xf903ffcb,0x905ff10d,0x01effc40,0xfa877fd4,0x20ff605f,0x6c4deeff,
    0xfd87fe2f,0x5fb9fe63,0x45fb9fec,0xb0bf74fc,0xf70aa07f,0x3f608e1f,
    0x1fff7e43,0x7fc2ff98,0x5fba7e45,0x7f4d7fc4,0x181ff883,0x45ff10c0,
    0xf37307fd,0x20ffc0bf,0x3ffd3ff8,0xff01ff70,0xffc80b07,0xf89ff000,
    0x20ff602f,0x23fffffa,0xd8ff12fd,0x5c3fe23f,0xfb9fe45f,0x5fba7e45,
    0x84883fd8,0x8a210ffb,0x567e43fd,0x2ff980ff,0x9f907fe6,0xbff117ee,
    0xfccc8157,0x30064cdf,0xff917fc4,0x3ff24881,0xf883ff02,0x01fff13f,
    0x2e2fec16,0x0027cc01,0x00fc83f9,0xae886ff2,0x3f65d998,0x3fd89f33,
    0x37ec57f4,0x22fed3f2,0xd0bf74fc,0xf701b07f,0xfb0f441f,0xdf94fd87,
    0x3625ff30,0xf74fc83f,0x802ff98d,0x40181ff8,0x744bfe61,0x3a07444f,
    0x42ff80ff,0x3fea3ff8,0xfb014c0e,0x3600599d,0x26162000,0x11ff4c04,
    0x43b3117f,0xe84dbdcd,0x677fcc3f,0x37fe21ef,0xdfd11ffc,0x7cc3ffb1,
    0x17f910df,0x337ffaa2,0xbff30ffd,0x2a3bfa21,0xff930dff,0xd1039fbd,
    0x23ffb3df,0x201dffc9,0x541dffc9,0x19999999,0xbd9dff93,0x30bfea85,
    0x3263dffd,0xff911dff,0x3bffea5d,0x02600332,0x01000100,0xaa880002,
    0x2030409a,0x1180dff9,0x00000080,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x2eeb8000,0x3b263e80,0x806a02de,
    0xcdedceea,0x337ae1ee,0x36a3eedc,0x37660bee,0x05bdd931,0x5eef7654,
    0x9bdd9302,0x764c3ddd,0xeeeb8ade,0x9bdd930b,0x3b265ddb,0x64c2cdde,
    0xbdd505ee,0x6e7764c5,0xaaaa81cc,0x1a98aaa8,0x2a02aee2,0x0597301b,
    0xaa986ee6,0x4001aa89,0x05512aaa,0x405ffff7,0x1ffcc3fc,0x0da813a0,
    0xd8762bfd,0x3207ff43,0x4c1d83ff,0xffa803ff,0xf301df52,0x26174c5f,
    0x437f43ff,0x8f623ff8,0x4fd8aff8,0x6c0fff4c,0x2ff984ff,0xff887ff3,
    0x3a2cbfb2,0x2ba61e8a,0xfcae42f8,0x0fe4fcc3,0xc97f27fd,0x15baddac,
    0x220ec7ff,0x505ff98d,0x2ff887ff,0x5403fe60,0x21997fa1,0xe81ffdc4,
    0x7c42446f,0x2ff9802f,0xff103bee,0x3e215425,0x4437ec3f,0xf11c43ff,
    0x883fea5f,0x7d4c5ffb,0x22ff983f,0x74fc87fc,0x7cc511ff,0xe9fa198e,
    0x2fd5fe0f,0xfb1fcdb6,0x5dd17ee7,0x2fe41fb5,0x109f9009,0xff887fb9,
    0x40fff202,0x4102ff40,0x3ea06ff8,0x3e20323f,0x2ff9802f,0xff10ffe6,
    0x7fc408e5,0x7c437ec3,0xff104a3f,0xb887fe65,0x3e320ffc,0x22ff983f,
    0xbfcc0ffb,0xff83afeb,0xfe9fe21f,0x9bf62a62,0x7fb026f8,0x40f997ee,
    0x263fe20f,0xc82fc801,0x7fc43fd8,0x0ffb7102,0x6c017fa0,0x7ff401ff,
    0x5ff102a8,0xf85ff300,0x457fc45f,0xb0ffe206,0x27ff10df,0x92ff882b,
    0xff8b88ff,0x20ffe713,0x13f62ff9,0x6fdce7f4,0x51fffa83,0x321ff4ff,
    0x1fe66fbd,0x4bf73fd8,0x7ec3c85a,0x70bd003c,0xff10ff63,0x3fe63205,
    0x805fe802,0xf9804ff9,0x3fe204cf,0x42ff9802,0x77fc47fe,0x37fe207f,
    0x886feccc,0x882feeff,0x40cfdcff,0x42effb38,0xcff983ff,0xf700cfdc,
    0x110bfe2d,0xd3fc9fd1,0x7d47ec1f,0xfc80ffc6,0x4344bf73,0x017fcc1e,
    0xd8e6074c,0x417fc43f,0x201bfa48,0xffe805fe,0x03ffb000,0x4c017fc4,
    0x237f42ff,0x2068aff8,0x37ec3ff8,0x16c5ffc4,0x2201ffc4,0x7c95ff33,
    0xdaff983f,0x8fe201ff,0x9f14987d,0x7c4df3ec,0x7ec6fdaf,0x53f2289e,
    0x446745fd,0x100fd07b,0xffff901d,0x17fc47ff,0x7ff666dc,0x202ff401,
    0x70282ffb,0x7fc401ff,0x3fe60882,0x3e22ffc2,0x3e20472f,0x4437ec3f,
    0xf10533ff,0x3a38805f,0x20ffe1ff,0x6fe8aff9,0x10950740,0x7441d79d,
    0x5ff40ecc,0x3f222ff8,0x66ffc44f,0xffbd71ff,0x009709bb,0x6546e239,
    0x221dfecc,0xff8482ff,0x102ff405,0x20550bff,0x3e200ffb,0x3e60c82f,
    0x107fe62f,0x445825ff,0x437ec3ff,0x22023ff8,0x71c402ff,0x983ff8df,
    0x09ff32ff,0x80200404,0x00800008,0x02011004,0x3ffee004,0x10ff607f,
    0xc82b87ff,0x17fa01ff,0x7d41ffd8,0x401ff701,0x23cc3ff9,0x7fd12ff9,
    0x6b87ff10,0x3f61ffc4,0x403ff886,0x1cc02ff8,0x84ff88fe,0x3ff22ff9,
    0x00000002,0x00000000,0x3fea0000,0x3f606fff,0x477ff263,0x3f661dfb,
    0x7fdc41ef,0xceffa82f,0xa80ffecc,0xc981cffd,0x7fdcceff,0x3f7bff66,
    0xeffc981c,0x3225ffdc,0xfff52eff,0x3bff2217,0x5bff9302,0x0b8bb660,
    0x4c5dff91,0x3fa2dffc,0x0000002f,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x0aa00000,0x39710371,0x01b002ee,0x80c4e5cc,0x00210005,0xa88e20d4,
    0x5532aaaa,0xb1035515,0x93355101,0xb89aa885,0xa883970b,0x2000571a,
    0x0060c609,0x3661f6c0,0x3205d04e,0x260ed43e,0x9885d5c0,0x21999999,
    0x4c00dbb8,0x9aa3e601,0xfbadc6fb,0x3a02f8be,0xdf15f300,0x326003c0,
    0xf9805b97,0x464c7d11,0x5bf63ff8,0x2019102c,0x43fedefd,0xcdfdcefd,
    0x67e40ffb,0x205b86fd,0xb2ccae59,0x3d52e983,0xae89f266,0x437543d8,
    0x0fd46b89,0x65e61ff3,0xdddddd94,0x0fc654dd,0x807fc432,0x3a65f36d,
    0x0ff8bfc3,0xd80740bd,0x1e03fd0f,0x505f6d40,0x3e6017fb,0xfc84c3ea,
    0x01dffc46,0x3eebf900,0x7f9afe45,0x1ff907fe,0x815c8433,0x4d8d71f8,
    0xda7dc3f3,0x4952dc3f,0x41f4f469,0x30fcc3e9,0x35dee5ff,0x41faa800,
    0x2203fe5d,0x404fccef,0xd55ff72a,0x2203a01f,0x207fd97f,0x0b7ee207,
    0x503bf930,0x17fcc09f,0x3fa07fdc,0x25ffffff,0xc8bf74fc,0x7f4ff34f,
    0xef82fe41,0xbd10fdaa,0x27f30bea,0x2e7f50fd,0x5983621f,0x1f34b92a,
    0x0fcc1f70,0x2797885c,0xccccccca,0xa8be7ae4,0x0df3002d,0x1ff3b700,
    0x3fffff20,0x37ff37ff,0x3fffa7fb,0xbf75ffff,0x4df90001,0xfd01fce8,
    0x221ffc0b,0x09999999,0x22fdd3f2,0x74ff34fc,0x9827e42f,0x3ee1acca,
    0x2df01fd3,0x263f14fa,0xdb15dec7,0xc83e23d9,0xf3074263,0x154c4883,
    0x77777773,0x00dc5cc7,0x203ff100,0xff87e40a,0x5d333103,0x4bfe2333,
    0xf33312fd,0x3ae21333,0x9fb5002e,0x0fccfa21,0x220c3fea,0x07100ffd,
    0x45fba7e4,0x74ff34fc,0x9027e42f,0x11f90979,0xbd0fb89d,0xbbb52c58,
    0x21dc2981,0x88676e58,0x000143db,0x74000000,0xdf7298df,0x7f44ffc4,
    0x03a0499e,0x00ee8fec,0x39fb300f,0xb82eeb88,0x7ff12cc3,0x13fa9162,
    0x4fc807cc,0x34fc8bf7,0x3217fcff,0xf35f104f,0x83a27903,0x0810b51e,
    0x00000000,0x00000000,0x3ffa2000,0xffd17ea4,0x01dffb19,0x6edc4074,
    0x266621eb,0x2200999f,0x039f75eb,0xdcffc800,0xfb1bb34f,0xfe88005f,
    0xd11ffd8e,0x55ff91df,0x77f44bff,0x986c0001,0x0006c374,0x22222222,
    0x22208808,0x2ab51dc0,0x30eeeea5,0x33223059,0x10cccccc,0x77777777,
    0x30080401,0x01d00110,0xfffe8088,0x5005ffff,0x00000026,0x00000000,
    0x00000000,0x32000000,0x7eeeeeee,0x4df11fdc,0xb1f91ff8,0x9ffff21f,
    0xa9cfecd9,0x2aaaaaa3,0x777710aa,0x00017777,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x363c0000,0x1761f983,0x82222041,
    0x006764c2,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x80e3c000,0x00000019,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x07000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__times_bold_18_latin1_x[224]={ 0,1,1,0,0,1,0,1,0,0,0,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,1,0,0,0,
1,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__times_bold_18_latin1_y[224]={ 14,2,2,3,2,2,2,2,2,2,2,4,11,9,
11,2,3,3,3,3,3,3,3,3,3,3,6,6,4,6,4,2,2,3,3,2,3,3,3,2,3,3,3,3,
3,3,3,2,3,2,3,2,3,3,3,3,3,3,3,3,2,3,3,16,2,6,3,6,3,6,2,6,3,2,
2,3,3,6,6,6,6,6,6,6,3,6,6,6,6,6,6,2,2,2,8,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,14,6,3,2,4,3,
2,2,3,2,3,6,6,9,2,1,3,4,3,3,2,6,3,7,13,3,3,6,3,3,3,6,-1,-1,-1,0,
0,0,3,2,-1,-1,-1,0,-1,-1,-1,0,3,0,-1,-1,-1,0,0,5,2,-1,-1,-1,0,-1,3,2,2,2,
2,3,3,2,6,6,2,2,2,3,2,2,2,3,2,3,2,2,2,3,3,5,6,2,2,2,3,2,2,3,
 };
static unsigned short stb__times_bold_18_latin1_w[224]={ 0,4,7,8,8,15,13,3,6,5,8,9,4,6,
4,5,8,6,8,8,8,8,8,8,8,8,4,4,9,10,9,8,15,12,11,11,12,11,10,13,13,6,9,13,
11,16,12,13,10,13,12,9,11,12,12,17,12,12,11,4,5,4,8,10,4,8,9,7,9,7,7,8,9,5,
6,10,5,14,9,8,9,9,7,6,6,9,8,12,8,8,7,5,2,6,9,9,9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,4,7,8,8,9,
2,8,6,12,6,8,10,6,12,10,6,9,5,5,5,10,9,4,3,5,5,8,12,12,12,8,12,12,12,12,
12,12,17,11,11,11,11,11,6,6,6,6,12,12,13,13,13,13,13,8,13,12,12,12,12,12,10,9,8,8,
8,8,8,8,12,7,7,7,7,7,6,5,6,6,8,9,8,8,8,8,8,9,8,9,9,9,9,8,9,8,
 };
static unsigned short stb__times_bold_18_latin1_h[224]={ 0,13,7,12,14,13,13,7,16,16,8,9,6,3,
4,13,12,11,11,12,11,12,12,12,12,12,9,11,9,5,9,13,16,11,11,13,11,11,11,13,11,11,12,11,
11,11,12,13,11,15,11,13,11,12,12,12,11,11,11,14,13,14,6,2,4,9,12,9,12,9,12,12,11,12,
16,11,11,8,8,9,12,12,8,9,12,9,9,9,8,12,8,16,16,16,3,11,11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,14,13,9,11,
16,16,3,13,5,8,5,3,13,2,6,9,6,6,4,12,15,3,5,6,5,8,12,12,12,12,15,15,15,14,
14,14,11,16,15,15,15,14,15,15,15,14,11,15,16,16,16,15,15,8,13,16,16,16,15,15,11,13,13,13,
13,12,12,13,9,12,13,13,13,12,12,12,12,11,13,11,13,13,13,12,12,8,9,13,13,13,12,16,16,15,
 };
static unsigned short stb__times_bold_18_latin1_s[224]={ 251,251,172,120,123,203,194,252,115,109,145,
27,214,214,247,77,102,228,1,183,10,15,24,218,42,51,9,249,56,225,66,
141,80,26,203,110,88,101,127,83,113,19,135,235,76,149,170,170,138,190,166,
131,39,1,14,27,215,63,51,251,71,178,193,242,197,208,61,217,77,1,86,
52,162,71,32,138,132,122,112,199,227,246,137,192,45,225,244,179,93,237,85,
52,58,61,221,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,
193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,251,165,158,
62,235,183,68,71,207,97,236,154,180,214,226,231,186,46,180,202,191,145,14,
202,243,208,219,163,205,192,239,60,1,177,85,183,132,145,114,1,98,24,36,
166,217,224,231,196,149,238,149,122,163,48,62,76,219,96,39,136,204,110,172,
34,233,1,242,156,33,44,14,69,10,18,26,94,8,129,1,107,122,97,208,
217,53,77,111,102,37,184,150,160,87,23,13,76, };
static unsigned short stb__times_bold_18_latin1_t[224]={ 16,18,86,48,18,18,34,34,1,1,86,
86,86,93,86,34,48,61,74,48,74,48,48,48,48,48,86,61,86,86,86,
34,1,74,61,34,74,74,74,34,74,74,48,61,74,74,48,34,74,1,74,
34,74,61,61,61,61,74,74,1,34,18,86,93,93,74,61,74,61,86,48,
61,61,61,1,61,61,86,86,74,48,48,86,74,61,74,74,74,86,48,86,
1,1,1,93,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,16,48,18,
34,74,61,1,1,93,34,86,86,93,93,34,93,86,86,86,86,93,48,18,
93,86,86,86,86,48,48,34,48,18,1,18,18,18,18,61,1,18,18,18,
18,1,1,1,18,61,1,1,1,1,18,18,86,18,1,1,1,1,18,61,
34,18,34,18,48,48,34,86,48,34,34,34,48,48,48,48,61,34,61,34,
34,34,48,48,86,86,34,34,34,61,1,1,18, };
static unsigned short stb__times_bold_18_latin1_a[224]={ 65,87,144,130,130,260,217,72,
87,87,130,148,65,87,65,72,130,130,130,130,130,130,130,130,
130,130,87,87,148,148,148,130,242,188,173,188,188,173,159,202,
202,101,130,202,173,245,188,202,159,202,188,145,173,188,188,260,
188,188,173,87,72,87,151,130,87,130,145,115,145,115,87,130,
145,72,87,145,72,217,145,130,145,145,115,101,87,145,130,188,
130,130,115,102,57,102,135,202,202,202,202,202,202,202,202,202,
202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,
202,202,202,202,202,202,202,202,65,87,130,130,130,130,57,130,
87,194,78,130,148,87,194,130,104,143,78,78,87,150,140,65,
87,78,86,130,195,195,195,130,188,188,188,188,188,188,260,188,
173,173,173,173,101,101,101,101,188,188,202,202,202,202,202,148,
202,188,188,188,188,188,159,145,130,130,130,130,130,130,188,115,
115,115,115,115,72,72,72,72,130,145,130,130,130,130,130,143,
130,145,145,145,145,130,145,130, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_18_latin1_BITMAP_HEIGHT or STB_FONT_times_bold_18_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_18_latin1(stb_fontchar font[STB_FONT_times_bold_18_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_18_latin1_BITMAP_HEIGHT][STB_FONT_times_bold_18_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_18_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_18_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_18_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_18_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_18_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_18_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_18_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_18_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_18_latin1_s[i] + stb__times_bold_18_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_18_latin1_t[i] + stb__times_bold_18_latin1_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_18_latin1_x[i];
            font[i].y0 = stb__times_bold_18_latin1_y[i];
            font[i].x1 = stb__times_bold_18_latin1_x[i] + stb__times_bold_18_latin1_w[i];
            font[i].y1 = stb__times_bold_18_latin1_y[i] + stb__times_bold_18_latin1_h[i];
            font[i].advance_int = (stb__times_bold_18_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_18_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_18_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_18_latin1_s[i] + stb__times_bold_18_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_18_latin1_t[i] + stb__times_bold_18_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_18_latin1_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_18_latin1_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_18_latin1_x[i] + stb__times_bold_18_latin1_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_18_latin1_y[i] + stb__times_bold_18_latin1_h[i] + 0.5f;
            font[i].advance = stb__times_bold_18_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_18_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_18_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_18_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_18_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_18_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_18_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_18_latin1_LINE_SPACING
#endif

