// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_bold_16_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_bold_16_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_bold_16_latin1_BITMAP_WIDTH         256
#define STB_FONT_arial_bold_16_latin1_BITMAP_HEIGHT         88
#define STB_FONT_arial_bold_16_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_bold_16_latin1_FIRST_CHAR            32
#define STB_FONT_arial_bold_16_latin1_NUM_CHARS            224

#define STB_FONT_arial_bold_16_latin1_LINE_SPACING          10

static unsigned int stb__arial_bold_16_latin1_pixels[]={
    0x402a22a2,0x42a880a9,0x0a98cc2a,0x51000d40,0x9542a003,0x88033028,
    0x22722099,0x004ccc1c,0x15310000,0x4006f880,0x5fc800fe,0x0389c980,
    0x3203b9dc,0x04fa802f,0x3300bfe2,0x3ea01333,0x7d4fee04,0xffc81fa9,
    0x2ec1fb81,0x407fe5fe,0x300efffa,0x1bffdffb,0xf35d9ee0,0xfd80ff03,
    0x3e6fe65f,0x901fffc3,0xfa813605,0x2601dfff,0x03f5002f,0x805f7f50,
    0x7403fece,0x06c80dd6,0x676c05e8,0xfffe880f,0x80bd06ff,0x80c4624e,
    0xb03702ff,0x7f914c8b,0x09f53fd0,0x6cc159f3,0xbb27c40e,0x203fc2f4,
    0x13335f98,0x09ef8666,0xfff503a0,0xbdff983d,0x2ae607fd,0x009ba800,
    0x200d554c,0x4c00aa99,0x21981baa,0x218cc311,0x4c266618,0x6fffec19,
    0x803504fe,0x5441551a,0x82aa2fc1,0x2a8bb1a8,0x0ffa0fe6,0x13733f98,
    0x1fb8db35,0x7c1fb976,0xbf102b8f,0x23fd03fe,0x21b2a06f,0x745fddee,
    0x2a0f743f,0x503fffff,0x207fffff,0x03fffffa,0x07fffff5,0x0fffffea,
    0xf1fe81ff,0xff1fe81f,0x3fe1fe81,0x980fcbff,0x5dfe03ff,0xf88bf23f,
    0x5f91fdc5,0x7ccff176,0x80dffb84,0xfdddf74d,0x23ec1f57,0xff13e25d,
    0xf883fffd,0x1fe81ff5,0xffff50df,0x45e67c45,0x2003fe20,0xffdbeffa,
    0x6df7fd43,0x77fd43ff,0x7d43ffdb,0x43ffdbef,0xffdbeffa,0x3fd03fe3,
    0x23fd03fe,0xb0ff40ff,0x01f97fff,0xbfc0dff9,0xf31fa6f8,0x9fa6f889,
    0xbf13fc5d,0x2ffdcf98,0xff2fc4fc,0x6c6f8ba3,0x4ffe2fc5,0xfafc44fb,
    0x6f8ff40f,0x0fed9fe8,0x3e60fbfa,0x987fd006,0x30ffa0ff,0x21ff41ff,
    0x0ffa0ff9,0x1ff41ff3,0x07fc3fe6,0x207fc7fa,0xe81ff1fe,0x2fffe61f,
    0x777c40fc,0x7f4ff01f,0x3faa4f98,0x4f98fe81,0xfd8ff176,0x7fdcbee5,
    0xd83eef30,0x17e25d0f,0x41ff1be0,0xffafc47f,0x46f8ff40,0xf5068df8,
    0x3fcc19ff,0x7c07fc40,0xf01ff12f,0x203fe25f,0x01ff12ff,0x03fe25ff,
    0x207fcbfe,0xe81ff1fe,0xfe81ff1f,0x0fcbfb81,0x82fd67dc,0x3f2fea7f,
    0x7d417f21,0xf1761fcb,0xf30ff98f,0xadcbee3f,0x278b747d,0x47e804f9,
    0xf107f47f,0x3fd03feb,0x95bf51be,0x137fec40,0x30ba83ff,0x4cff60df,
    0x267fb06f,0x267fb06f,0x267fb06f,0x3e7fb06f,0xff8ff40f,0x0ff8ff40,
    0x5fcc0ff4,0x44ff40fc,0x227f80ff,0x7ec46eef,0x46eef883,0x3fa3fc5d,
    0x7ddffe41,0xf99f6d51,0x5c5f8bb4,0x47fe37c3,0xfafc46f8,0x6f87f40f,
    0x6dceffc4,0x20fdbc81,0x47fe24fd,0x27fb07f9,0x27fb07f9,0x27fb07f9,
    0x27fb07f9,0x27fb07f9,0xf87f40ff,0xff87f40f,0x7cc07f40,0x9be60fcb,
    0x647f83fd,0x04f884ff,0x45d89ff9,0x5c13e27f,0x23e23fff,0xddfeacfa,
    0x1763740e,0xebfff8bf,0xfeafc43f,0x86f87f40,0x30ffbffe,0x41f7799f,
    0x4ffdfff9,0xff107fe2,0xf107fe25,0x107fe25f,0x07fe25ff,0x3fe25ff1,
    0xfe97fc41,0x0fe87f40,0x40fe87f4,0xcbf980fe,0x3ffff20f,0x4c7f86ff,
    0x05f881ff,0x45d83ff3,0x8813e67f,0xeba745fe,0x088ceead,0x7ccbb1f6,
    0x5ffdffc3,0x3fdafc40,0xb06f9fe2,0xefe85bff,0xffd885fd,0x06ff40be,
    0x6ff41ff7,0xfe83fee0,0xe83fee0d,0x83fee0df,0x3fee0dfe,0x3fc47fb0,
    0xb3fc47fb,0x983fc47f,0x3fe0fcbf,0x41ffcccc,0xf037cc7f,0x361be60d,
    0x3f99be25,0xf31fe4c8,0x262fb80b,0x87b9761f,0x55f8807f,0x49ffbbff,
    0x2017906f,0x200cffd9,0xfff303ec,0xf985fffb,0x42fffdff,0xfffdfff9,
    0x7efffcc2,0x7ffcc2ff,0x3ea2fffd,0x2a4ffddf,0x24ffddff,0x4ffddffa,
    0x21f97f30,0x45fb85fa,0x05ff937f,0xfc986ff4,0xfd55d82f,0x320bfaeb,
    0xe884fcdf,0xfecaabce,0xe9764d82,0x65c07f83,0x3fffee5f,0xd073fe0c,
    0x5c00f200,0x3fff6207,0xfffb101e,0x3ff6203d,0xffb101ef,0x3f6203df,
    0xffb81eff,0x7fdc0cff,0x7fdc0cff,0x7f300cff,0x20bf61f9,0x4dfe0ff8,
    0x7f4c04ff,0x3609ff31,0x3f23df75,0x17dd7104,0x3bf72a20,0x21f500ac,
    0xbd01f35d,0x104eec80,0x488bbb60,0xec801300,0x8001001d,0x20004000,
    0x10004000,0x00400200,0x0075d74c,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x9007f600,0x4008807f,0x640ca8ca,0x1353102f,0xb807f600,
    0x03ff106f,0x9c980fee,0x1ff881c8,0x0e4ce4c0,0x40331750,0x2201a8bb,
    0x9880a88a,0x05502a0a,0xa8026a60,0xc8019802,0x15115103,0xa8022110,
    0x2ec01a82,0xd8807f10,0x2e3ee01d,0xfa85d80f,0x4c03ffff,0x3afe602f,
    0x00ecdd84,0x4d7d40d9,0x0ecde82f,0x0beabea0,0x80ffef44,0x200ffde9,
    0xfa83f57b,0x42fcefff,0x3fea02fa,0x7f503fff,0x07fffe60,0x7d40ddcc,
    0x7fc41fa9,0x05f701ed,0x5333309b,0x2a666133,0xcd880999,0x53353301,
    0x7d429813,0x43ffdbef,0x26208899,0x35535530,0x804cccc1,0x333100a9,
    0x13333013,0x04cccc40,0x031104cc,0xd8013311,0xeffa8f96,0x7505ffcb,
    0x36fbfea0,0x207503ff,0x205faafd,0x0623105d,0xb80aa2a6,0xfff0d902,
    0x3fe9ffff,0x984fffff,0xffff03ff,0x47f89fff,0x07fd43fe,0x0ff98df7,
    0x9fffffff,0x3fe607f8,0xf303fc03,0x7ff3007f,0x1fb0ffe0,0x2e07ff30,
    0x23fecefc,0x3ffe23fe,0x7fd02b80,0x5cc0ff98,0x9f57f82b,0xb80aee60,
    0x40aee602,0x0fa82bb9,0x55555ffc,0x55557ff1,0x20dff903,0x1aaaabff,
    0x01ff13fc,0x23fe85ff,0x2affe3fe,0x03fc1aaa,0x7f80dff9,0x201bff20,
    0xfff06ffc,0x7e407ec1,0xddfdb06f,0x43fe29df,0x2e2fede8,0x3e22efff,
    0x322ff80f,0xbfc4ffff,0xfffc81fd,0x77ffdc4f,0x27fffe42,0x113ffff2,
    0x200ff85f,0xef8800ff,0x00ff81fe,0x41bea7f8,0x47fcc3fd,0x007fc6fa,
    0xeef883fc,0x441fe01f,0x2201feef,0xff81feef,0xf103f65f,0x3ea03fdd,
    0x5bea2f99,0x747f95e8,0x3e67f88e,0x3227fb06,0xf7f8ff14,0xf14c881f,
    0x7f88ee8f,0x13fc5322,0x3a1fe299,0x4cccffc4,0x26667fe1,0x5facfb81,
    0x19999ff8,0x41fe67f8,0xfcfc83fc,0x4ccffc1f,0xf707f819,0x3fc0bf59,
    0x05facfb8,0x217eb3ee,0x1fb2feff,0x05facfb8,0xf883eaf7,0x4ff61db6,
    0x1feaadf9,0x0ff60ff3,0x7f8ffb71,0xb7101df7,0x556fccff,0x7edc41fe,
    0x87fdb887,0x7ffffc6c,0xfffff1ff,0x89fe83ff,0x7fffc0ff,0x13fc1fff,
    0x7f4263ff,0x84fff881,0x1fffffff,0x89fe83fc,0x20ff00ff,0x00ff89fe,
    0x81ff13fd,0xfd8ef9ff,0x7fc4ff40,0x7fffff40,0x83b7fa5f,0xdddf72ff,
    0x07fe23dd,0x77ec5ff1,0xfb3fc7fc,0x7fcefd8b,0x3bbbbbee,0x1ff3bf61,
    0x50ff9dfb,0x555ffc1f,0x557ff0aa,0xb37cc155,0xaabff87f,0x3a3fc0aa,
    0x1ffbfb4f,0x7fc1bea0,0x7c0aaaab,0x3f66f987,0xdf30ff03,0x37cc1fec,
    0xf97f87fb,0x37cc1fb9,0xadfa87fb,0x3ff22aee,0x7cc3fee1,0x1bfd0265,
    0x4fa87fdc,0xfe8ff1fe,0x33fc9f50,0x9f504cbf,0x7c9f53fc,0x3fe2f887,
    0x9003fe00,0x8dffffff,0x47f800ff,0xfffcfff9,0x7c17e603,0xc87f800f,
    0x06ffffff,0xffff90ff,0xfff90dff,0x17f8dfff,0x7e41fdff,0x446fffff,
    0xff909f3f,0xf85ffd9d,0x7cc6fbbf,0x22fffdff,0x0ffc9ef9,0x9fef63fe,
    0x0ffc9ef9,0x99beeffe,0x30ffc9ef,0x01ff93df,0xf007fc9d,0xccff801f,
    0x3fe1ffcc,0xd887f800,0x04ffefff,0x03fe0bf3,0x33fe1fe0,0xf81ffccc,
    0xccccff87,0x667fc1ff,0x9fe1ffcc,0x3fe0fffb,0x21ffcccc,0x4c2f89fa,
    0x1effecbf,0x81dffe98,0x81efffd8,0x21fddffc,0x42efd8ff,0x21fddffc,
    0x641dffe9,0x321fddff,0xc81fddff,0x3bbbbfe6,0xddddff4e,0x2e17ea9d,
    0x3bbbfe5f,0x203fc4ee,0x7cc0f620,0xddddff05,0x7d47f89d,0x7f85fb85,
    0x2fdc2fd4,0x4bf70bf5,0xa87ff47f,0x225fb85f,0x00214061,0x04002000,
    0x00080100,0x00100100,0x7ffffc31,0xfffff6ff,0x20bf6dff,0xffff0ff8,
    0x07f8dfff,0x417e6000,0x6fffffff,0x20bf63fc,0x23fc0ff8,0x0ff882fd,
    0x1ff105fb,0x21ff31fe,0x0ff882fd,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x5100aa00,0x22015405,0x100a6200,0x54002601,
    0x0d440351,0x08202600,0x20330188,0x13009809,0x20260130,0x801a8019,
    0x54c01098,0x2006a601,0x88a600a9,0xb880a88a,0x54c00550,0x4330a980,
    0x3ee04ffc,0x107fd901,0xf9819ff9,0x7f4c2fff,0x8037c0df,0xff10bf5f,
    0xf1009fff,0x44defd8d,0x81e86dfa,0x407443fb,0x407443fb,0x0be23fed,
    0x806fffa8,0xdf102dfd,0x01ba201d,0x2ec0ddf3,0xa85f55f5,0x226fcfff,
    0x7fff4c0d,0xbfcbf22e,0x700c99c8,0x12a72203,0xd13f33f6,0xfe8ff35f,
    0x037c4fbb,0xf9813098,0x03ffbbef,0x5cd237c4,0x507dcc40,0xc87d9509,
    0x643eca83,0x26b9f883,0x547f406c,0x3f76602f,0x80b27500,0x22ee00c8,
    0x4c47f01c,0x4ff40988,0x03fa6fd8,0x1ff759fd,0x733fc72a,0x2015c057,
    0x3e6f882b,0x215537c7,0xdf1be5f8,0x511540aa,0x3a627ec3,0x6f89b884,
    0xc8805d44,0x7401d10e,0x47d01a23,0xf73f3068,0xfe805f11,0x2a202fb9,
    0x175106ea,0xa805d440,0x3f106a22,0x7c42bb98,0x7fd5be65,0x3d91fe0b,
    0x7ffe5fe0,0x77ffdc4f,0x177ffdc2,0xd07f4bf3,0xfbafd80f,0x7fff7fc4,
    0x4bf33fc1,0xff7001ff,0x7fccdfdf,0x232a0dff,0x3e80772f,0x6c7d00b6,
    0x6576fe02,0x5fffa806,0x3ffffa60,0x6ffffcc3,0x6ffffcc0,0x8bf33fc0,
    0x7fffe47a,0x6f997ea4,0x7e47fffb,0x8ff801cf,0xee8ff14c,0x47747f88,
    0xe97ea7f8,0x3ddffb1f,0xf0dfff10,0xff13ee7f,0x26f9afcc,0x3a0aaaa8,
    0x3e6fd89f,0x223fc8bf,0xd00d14fd,0x4fa01a67,0x4ef54069,0xffc802f8,
    0x6cdfec07,0x645ffc6f,0x645ffc3f,0xbf33fc3f,0x453226c8,0xfb9fe27f,
    0x4413fd16,0x203ffffd,0x9ff6e27f,0x1feaadf9,0x3fd55bf3,0x71fe97ea,
    0xfd039dfb,0x0ff8bf77,0x7ccff1fe,0x7fc4ff15,0x54bf11ff,0x6f8df36f,
    0x80f716c0,0x401bf91e,0xd901ee1e,0xbfb077ae,0x441b79fd,0xf99fe26f,
    0x8df337c6,0xbf33fc6f,0xfdb884e8,0x7fef7ec7,0x64c03fa6,0x25f92ffe,
    0xff9dfb7f,0x777777dc,0xdddddf71,0x0fe97e63,0x27cc0bee,0x3a3fc1fb,
    0x5f99fe0f,0xfe998bfe,0xb7cc9f51,0x807f45fa,0xa81fe669,0x207d1b35,
    0x881fe65a,0x25daf8af,0xffff16f8,0x87f45f98,0xa87f45fa,0xff07f45f,
    0x85f12fcc,0x447fcefd,0x3a5f8bfd,0xf70aa20f,0x57fc7f2b,0x5f99fe4f,
    0x265f9826,0x27f9be20,0x97e606e8,0x447fe0fe,0xbf53fc5f,0xfd106fe4,
    0x2df737c3,0x817e27f8,0x40f5d11d,0xe80fd40e,0x640f5d10,0x4cf71f56,
    0x217fe65f,0xf897e67f,0x7f897e27,0x54ff17e2,0xfa83ea5f,0x4c551fe4,
    0xf883fa5f,0x0e97ee0f,0xf93df3ff,0x7ddffc1f,0x37ddffc6,0xd8ff73f6,
    0x21ecefef,0x7c5fccfd,0x743febff,0x745febcf,0x0fffddff,0x9bfefbf6,
    0x02ffbefd,0x27f7ecb5,0x407ee25c,0x13fbf64b,0x64fccbe2,0x7f5eff46,
    0x5f7e44ff,0x5f7ec2ff,0x5f7ec2ff,0x5e7f42ff,0xf31b25fe,0x6c1ff93d,
    0x3a2fecdf,0x33ff21cf,0x7c992ffd,0x3fbbff97,0x20efff4c,0x441dffe9,
    0x67dc3efb,0x3663fffd,0x5efc0cff,0xeff983ff,0x7f6445fa,0x7e440cef,
    0x7fe46faf,0x9883a02d,0x507441fa,0x0e887ddf,0x3207ea62,0x261ff746,
    0x3eacfffe,0x816ff5c4,0xf902dffc,0xdff305bf,0x64274bf5,0x221fddff,
    0x7dc3efec,0x3ffae23f,0x08ff022e,0x00000000,0x00000010,0x10008002,
    0x05100200,0x2620cc0c,0x300cc099,0x002606a0,0x80040081,0x01001000,
    0x0001004c,0x00040110,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x0a98004c,0x30310330,
    0x00c03333,0x53000a98,0x10054c01,0xa8d40153,0x15509801,0x20040d44,
    0x999881a9,0x13100999,0x008204c4,0x80066031,0x20198008,0x98199999,
    0x84c0660a,0xb80a88a8,0xb7466553,0x900cfff9,0xf83dd9df,0xf30ff40f,
    0xfd70ffff,0x33bf203d,0x17e201ee,0x3ea05f88,0x4f81dfff,0x75f9809f,
    0xb517e47f,0x1ba207df,0x3fffffea,0x7ec5fd02,0x1137bf62,0x7c1bfffb,
    0x7ff4c00f,0x07ff301d,0x3ffffffe,0x87f8bf21,0xf55f54fb,0x7efffd45,
    0x7fdfeff6,0x0dc83fdb,0x81ff0fcc,0x3bbea1fe,0x7defe46e,0x7cc0dc86,
    0x49807301,0x36f7fe60,0x0130987f,0x4df15f98,0x7f5ff47e,0xea819104,
    0xb80ffeee,0x48bf62ff,0x9bfd8173,0x2affe4fb,0xfbbfe819,0x20dff905,
    0x6fdaabff,0x5c7f872a,0x311314ff,0x7ec57f41,0x12b88996,0xff8da8bf,
    0x3fe798df,0x3f90ff40,0x4299fe20,0x26bfd35a,0x83511547,0x7fd00ba8,
    0x5d441ee8,0x3a5f9800,0x3e64f98f,0x22a8ff14,0x07f501a8,0x7e45fff3,
    0xb06e6552,0x3ffe7e89,0x9d30dfff,0x3be207f4,0x40ff81fe,0x4ff1a27f,
    0x1544fefe,0x56f99be2,0x7fb31fe5,0x4ba78ad8,0xfe81ff1d,0x30b77f61,
    0x5b0373df,0x21d964be,0xf997e67f,0x3e20dfff,0xfff9800f,0x97e600df,
    0x2a1fcbfa,0x7f83fe3f,0x82f417e6,0x3f22fcee,0x5fff9df1,0x7ff37d40,
    0x7c07fd75,0x7d67dc0f,0xb999ff85,0x7f83e65f,0xff13ea76,0x5be25f98,
    0x5fe8ff7f,0xfcaf88f8,0xd03fe770,0x7f7ffc3f,0x3ffffea5,0xb83cc7c4,
    0x25f99fe3,0x23fc8bff,0x7ff006f9,0x7cc07f91,0x11bbbe25,0x43ff51bf,
    0x2e17e67f,0xfb9fb81f,0x9ffc3ee2,0x1df505fb,0x0bf507fc,0x27fa13f6,
    0x7ffc0ff8,0x3ea0ffff,0x13ea1fe1,0x7d4ff0ff,0x7dcc0ff6,0x75fc4745,
    0x207fcee2,0xfe8aa0fe,0x1fa1ff50,0x7904f11d,0x26bf33fc,0xff337c6f,
    0x6f8df300,0xff917e60,0xfffff909,0x8bf33fc3,0x74f986f8,0xff87d45f,
    0xdf30bf30,0x3ee0ff81,0x4c0efc85,0xff0ff66f,0x21dfb999,0x2a1fe1fb,
    0x7e43fc4f,0x0ff6ffbd,0x45643fb0,0x747a1f37,0x9007f40f,0xfb9be67f,
    0x74e6cb22,0xf33fc3d3,0x1fd17eab,0x17507fe2,0x21fd17ea,0x98bf30a8,
    0xd15101ff,0xbf33fc1f,0xefd83f98,0x4f33efee,0x2e17e27f,0xeccff82f,
    0x077e42ff,0x7fffffe4,0x3f207fc6,0x43fc5f73,0x443fc4fa,0xff6fbffc,
    0x83fa4e98,0x2af269e9,0x7f88ff66,0x11fd9362,0x983f21ff,0xd73eb88e,
    0x457ea7f8,0xfb17e27f,0xf88ffc49,0x2fb97e27,0x86f989f7,0xf8df12b8,
    0x3f717ea7,0xffffffb0,0x227f8a29,0xf80a985f,0x5c3fffff,0x99ff00ef,
    0x7fc3ff99,0x3fc9fec0,0xf13ea1fe,0xf6f8840f,0x9fb9fd0f,0x75c43d50,
    0x3f77fea0,0x7e67ec4f,0x37e77e46,0x1d710f54,0x5febcfe8,0x0bfefbf6,
    0x9ffbfff3,0x2ffbefd8,0x4bff7fe6,0xfd02ffc9,0xcfe87fd7,0x07ec5feb,
    0x5f917dc0,0xb85f89fe,0x200ff83f,0x1eeeeff8,0x4bf70bf5,0xffeeeeff,
    0x43fc7f91,0x403fc4fa,0xb30ff6f8,0x36a019ff,0xfb80dfef,0x6c40cfff,
    0xfea80eff,0xfdfb500c,0x5dff301b,0x2dffc8bf,0x17dffb10,0x705bff90,
    0x7fcc7dfd,0x077faa04,0x17ebbfe6,0x8bee00fd,0x7c4ff2fc,0xff83fb85,
    0x3fffee00,0x105fb1ff,0x3fffe1ff,0x8bae1dff,0x7c4fa87f,0xff5e8807,
    0x00040000,0x02002001,0x00100080,0x10008002,0x10000100,0x00000100,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x10571550,
    0x33309883,0x33330133,0x00cc1333,0x01980a98,0x01a88154,0x05510375,
    0xa8033333,0x99998802,0x33309999,0x0d443333,0x22066351,0x26666621,
    0x31033099,0x4cc00c43,0x4cc19999,0x13109880,0x220c4330,0x3304c419,
    0x4ccc2620,0x7f77c099,0xc8ff21ff,0xffffff3f,0x7ffffc19,0x401fe4ff,
    0x407f82fc,0x3ffd43fa,0x913fffea,0xfffff03f,0x4ffb819f,0x3ffffe20,
    0xfff3ffff,0x3e61ffff,0x07fcfee5,0x7ffec7fa,0x1ff3ffff,0x1fd17fd4,
    0x7ffffcc0,0x31bee1ff,0x87fe61ff,0xc8bf65fc,0xd8bf61ff,0xff1fe83f,
    0x7fc9ffff,0x3e24fb8c,0x3fe1ff17,0x3e4ffcbb,0x21aaaabf,0x0395007f,
    0xc87500ff,0x44fec0bf,0x7c0721fd,0x24ffcbbf,0x900c99c8,0x5559fd9f,
    0x2aaffe15,0xfb97e62a,0x1fe81ff3,0x559fb553,0x7fcc3fe1,0x51007f42,
    0x81ffb555,0x70ffa3fe,0xb83fe6df,0xf8fffa3f,0xf31bea0f,0x7e5dffcd,
    0x3fc1ff3f,0xf8ff2ff2,0x7c7fe20f,0x553fc00f,0xff03d501,0xa8aa06e6,
    0x17e21bfe,0x83fe0550,0x01541ff8,0x80bf2ff1,0x97e600ff,0xe81ff3fb,
    0xf82fc81f,0xe83ff98f,0x3fe6000f,0xfa8ff982,0x7fd7fd06,0xfdf15f98,
    0x3fe1be2b,0x0ff93f20,0x3a3fd7ea,0x3ffbe20f,0x5f903fe0,0x066667fe,
    0x6c17f2ff,0xffdff80f,0xffd3fc2f,0x202fccbf,0xc81ff07f,0xf903fc2f,
    0x2666ff27,0xf9803fe1,0x4ffcfee6,0xc81fe999,0xffaff82f,0x2001fd03,
    0x3f203ff8,0xff301ffc,0x2aff10df,0x09f57ebf,0xf0ff47f9,0xffafdc1f,
    0x7f5cdf11,0x1ff2efff,0xffff4fc8,0x5ffc3fff,0x20bf906f,0xf8bf53ff,
    0xf02bf627,0x0ff0ed4f,0x323ddffd,0xf883fc4f,0xfffff90f,0x7fffffcf,
    0x3fc9fe62,0xffffffff,0xff05f903,0x3fa0bfff,0x80bfd000,0x6c04fff8,
    0x91fd01ff,0x5f93f93f,0x1be6df30,0x7ffb99ff,0x8ffafbfe,0x2eeffeeb,
    0xf3fc81ff,0x4155557f,0xfd81ffff,0x7cc3fe05,0x07f63fc5,0x83fef7f2,
    0xccffc87f,0x07f89f90,0x9fb33bf7,0x67fc5555,0x3fe61ccc,0x9ff3ffbd,
    0x903ff999,0xf9fff05f,0x001fd05f,0x3ea00dfb,0x1fffc406,0xf57fafc8,
    0x3fe01fd7,0x7ffc3fb9,0x2ffe4fff,0x2aa60bff,0x1ff1aaff,0x01ff2fd8,
    0x445ffff8,0x4ff0446f,0x363fc5f8,0xdfeb881f,0x0ff83fc2,0x41fe17ec,
    0x2ffffffe,0xf9803fe0,0xff3fdfee,0xfc81fe81,0xff53ff82,0x5c00fe81,
    0xbf3000ff,0x1ffefd80,0xf14fefa8,0x5fe40dfb,0x0cffc0fe,0x7fe407f8,
    0x1ff3ffff,0x0ff87fc4,0x17ec7fc0,0xf37c4df1,0x1fe2fc4f,0x176403fb,
    0x20ff83fc,0x43fc0ff9,0xfecccefa,0x9803fe02,0x81ff015f,0x82fc81fe,
    0xd17fa0ff,0x0ffd401f,0x540bf300,0x886fc8ff,0x3ffa2fff,0x17ffe604,
    0x07f803fe,0x3bfe1be0,0x3fe3ffee,0x3e4eeeee,0xefc8df17,0x89fe2ffc,
    0x3f63fc5f,0x3fc35c01,0xffeeeff8,0x2fe87f83,0x777777ec,0x7cc01ff3,
    0xfd03fe05,0xff05f903,0xfd17fcc1,0x3a3ddddd,0x2eeeeeff,0x3e20bf30,
    0x3a0ffa3f,0x0bff20ff,0xff05ffd0,0xf002f401,0xbfffff0d,0xffffff85,
    0x3fc9fe6f,0x3e16f654,0x8ff17e27,0x3bd901fd,0x3ffe0ff0,0x8ff02dff,
    0xfffd86fa,0x01ff4fff,0x1ff02744,0x2fc81fe8,0x77e40ff8,0xffffffd0,
    0x3fffffa5,0x0bf303ff,0x3ff31bf2,0x7fd46fc8,0x407fdc00,0x000000ff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x40ccc000,0x31033099,0x004ccccc,0x377301e4,0x9802ea20,
    0x015952cb,0x06ea015c,0x73015dcc,0x222a8913,0x3333331a,0x220bd053,
    0x5d46a0c0,0x99543950,0x8dcd541b,0x546a20aa,0x22a86a22,0x4c2aa1a9,
    0x931aaaaa,0x8012a001,0x23844e4b,0x43fff0a9,0x87ff6ffa,0xfffff0fd,
    0x837c05ff,0x4c2ffefe,0x5c0dffff,0xffffffff,0x77ffdc0e,0x27fffd42,
    0x313ffff2,0xf89ffffd,0x300d7e67,0x43ba0df0,0xfddf11fc,0x25fffbdf,
    0x22fffcef,0x7f73ffef,0x91fc97e4,0xf89be2bf,0x3ee6fa9f,0xff54ffff,
    0x407d803b,0xff75ffc8,0x3f25ffff,0x7e49fff2,0x6c1fff6f,0xb757ff0f,
    0x21be01ff,0xf85914f9,0x643fc8bf,0x3e69ff15,0x3fc47744,0x47f627f6,
    0xd8ff14c8,0x7f8dfd2f,0x0300d7e6,0x37bf2013,0x23ff10ef,0x3ebf55fe,
    0x7fcbf73f,0x7cdf109c,0xbff4fea7,0x7f7dc3fa,0x3ee6621f,0x3bff6a1f,
    0x3660fb02,0x3fa0beff,0x472a6fdd,0x3fba6eff,0x7ecbfff6,0x2fe81ff0,
    0x3ffffff2,0x3073ffa3,0xa886f8df,0x6faabffc,0x3faab7e6,0x7100bf11,
    0xbafc4ffb,0x99fe0fed,0xfc8c035f,0x643fffff,0x9fe20eff,0x3ebf33fc,
    0x3fcbf30f,0x44fa9fd8,0xc9fef8df,0x03ffd81f,0x2e205ff3,0xffff55fe,
    0x33feabff,0x1f65f881,0xf88fcff8,0x5fdff6fc,0x107fc3f6,0x7f75c1fd,
    0x3f662eef,0xd17ea5ff,0x7677ec1f,0x2e5eeeef,0x31eeeeef,0xcefd80bf,
    0x3ab3ea7f,0x99fe0fd8,0xeb8c035f,0x642eeeee,0x9be20eff,0x3ebf12fc,
    0x07f97e27,0xd83fb9f5,0x6fbfafbf,0xd105ff70,0x7fe4c07f,0xddffdd54,
    0x40bbfe69,0xff81fa5f,0x6fafaafa,0xfb1df3ff,0x3fffffe1,0x221be04f,
    0x10fea889,0xf32fc4ff,0x41317f4b,0xff0265f9,0x24fa8ed4,0x43bbe27f,
    0xbf53fc5f,0x00981806,0x21df9df9,0x44bf26f8,0x2fc4ff5f,0x37f7c0ff,
    0xffebffd4,0x0ffff884,0x2e213fa2,0xfb01dffe,0x33fff220,0x1bfbbfa1,
    0xfccf8ff8,0x3f2ff6f8,0xddff0fdc,0x86f801ff,0x46faaef9,0x22ffbefd,
    0xeffc9ef8,0x5ffc4fdb,0x5efe46fb,0x93df30ff,0x5efec1ff,0x5e7f42fe,
    0x40c035fe,0x321db06f,0x7e4df11f,0x89febf12,0xfb81be5f,0x75ff883f,
    0x95fd03ff,0x76ffe4bf,0x019ff55e,0xfeb807d8,0xfbffbf55,0xfbfcbf25,
    0x5fedf6fe,0xff0feff8,0x7901bf21,0x077ffaa0,0x320b7ff2,0xfffbbfff,
    0x1dffe984,0x216ff5c4,0x11fddffc,0x305bfdbd,0x06bf5dff,0x0205e818,
    0x5f937c41,0xf13fd7e2,0xff1037cb,0x7ccff601,0x3fa5fc87,0xdfffffb3,
    0x254002e6,0x0c0c7500,0x7e5fe5f9,0xb9fedf4f,0x41ff0fff,0x7775c4fe,
    0x00082eee,0x00101001,0x80200400,0x4c020021,0x02999999,0x00000000,
    0x00000000,0x00000000,0x3e000000,0x5be5ff57,0xf87ff47f,0xc8bfe60f,
    0x03ffffff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x45fe0000,0x1fedf0ff,0x03fe1ff3,0x7d000df7,0x014c03d3,
    0x188b91d5,0x5dddddcc,0xbb986a22,0x0542bbbb,0x50188098,0x31982601,
    0x8df0cc43,0x41a9841a,0x08888888,0xaa87332a,0xdc86a350,0x5dddddc3,
    0x0000003b,0x00000000,0x00000000,0x40db3f70,0x9cf882ff,0xa9b7e62f,
    0x35ffffff,0x3fea7fbf,0x3a15ffff,0x31ff6c09,0x3be61fbf,0xf897dc2f,
    0xf2fd4ff6,0x33bffa6d,0xff89b66c,0x2e7fffff,0x49f11fff,0x27a8bf5f,
    0xeeeeeee8,0x00000006,0x00000000,0x00000000,0x2e13e7ba,0xe8fd86ff,
    0x3135cc45,0x4c333333,0x333315ea,0x37bb2bf3,0x99a6d30f,0x32d91f89,
    0x7c4bb2a5,0x12fd4ff6,0x3ff6faed,0x8883224f,0x22088888,0x98950999,
    0x077b2331,0x00000000,0x00000000,0x00000000,0x43f4fe40,0x3e21fbee,
    0xec883fad,0x55555510,0x017b3ea3,0x1077d4bf,0x5e88b73f,0x17435d76,
    0x4f89babf,0x004c047a,0x00000000,0x00000000,0x00000000,0x00000000,
    0x3eb7e200,0x2fc5fd42,0xa83f67ee,0xfff52f8b,0x2bb2bfff,0xf8afc05f,
    0x0ef542ea,0x3ea13bd1,0x2a2e84eb,0x021a8531,0x00000000,0x00000000,
    0x00000000,0x00000000,0x3b200000,0xb0fe85e8,0x4f8ed83f,0xaa893b62,
    0x9911aaaa,0x461a8077,0x3fff2000,0x3602f6a2,0x00000002,0x00000000,
    0x00000000,0x00000000,0x00000000,0x05c4dc00,0x88111044,0x0000398b,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__arial_bold_16_latin1_x[224]={ 0,1,0,0,0,0,0,0,0,0,0,0,0,0,
1,-1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,1,1,0,1,0,0,1,
1,1,1,0,1,0,1,0,0,1,-1,0,0,-1,0,1,-1,0,0,-1,0,0,0,0,0,0,0,0,1,1,
-1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,
1,0,0,-1,0,0,0,0,-1,-1,0,0,0,0,1,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,1,1,1,1,-1,0,-1,-1,-1,1,0,0,0,0,0,0,0,1,1,1,1,-1,1,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__arial_bold_16_latin1_y[224]={ 12,1,1,1,0,1,1,1,1,1,1,3,10,7,
10,1,1,1,1,1,1,1,1,1,1,1,4,4,3,4,3,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,13,1,4,1,4,1,4,1,4,1,1,
1,1,1,4,4,4,4,4,4,4,1,4,4,4,4,4,4,1,1,1,5,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,12,4,1,1,3,1,
1,1,1,1,1,5,4,7,1,-1,1,2,1,1,1,4,1,6,12,1,1,5,1,1,1,4,-1,-1,-1,-1,
-1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,3,1,-1,-1,-1,-1,-1,1,1,1,1,
1,1,1,1,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,4,1,1,1,1,1,1,1,
 };
static unsigned short stb__arial_bold_16_latin1_w[224]={ 0,3,7,8,8,13,11,3,5,5,6,8,3,5,
2,5,8,5,8,8,8,8,8,8,8,8,3,3,8,8,8,9,14,11,9,10,9,8,8,11,9,4,7,10,
8,10,9,11,8,11,10,9,9,9,11,14,10,11,9,4,5,4,8,10,4,8,9,8,8,8,6,8,7,2,
4,8,2,12,7,9,9,8,6,8,5,8,8,12,8,8,7,6,2,6,8,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,3,8,8,8,8,
2,8,5,12,5,8,8,5,12,10,6,8,5,5,4,8,9,2,5,4,6,8,12,12,12,9,11,11,11,11,
11,11,15,10,8,8,8,8,5,4,6,6,11,9,11,11,11,11,11,8,11,9,9,9,9,11,8,9,8,8,
8,8,8,8,13,8,8,8,8,8,5,5,6,6,9,7,9,9,9,9,9,8,9,8,8,8,8,8,9,8,
 };
static unsigned short stb__arial_bold_16_latin1_h[224]={ 0,11,5,12,14,12,12,5,15,15,6,8,5,3,
2,12,12,11,11,12,11,12,12,11,12,12,8,11,8,6,8,11,15,11,11,12,11,11,11,12,11,11,12,11,
11,11,11,12,11,13,11,12,11,12,11,11,11,11,11,14,12,14,7,2,3,9,12,9,12,9,11,12,11,11,
15,11,11,8,8,9,11,11,8,9,12,9,8,8,8,12,8,15,15,15,4,9,9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,11,14,12,8,11,
15,15,3,12,6,7,6,3,12,3,6,10,6,7,3,11,14,2,3,6,6,7,12,12,12,11,13,13,13,13,
13,13,11,14,13,13,13,13,13,13,13,13,11,13,14,14,14,14,14,8,12,14,14,14,14,13,11,12,12,12,
12,12,12,12,9,11,12,12,12,12,11,11,11,11,12,11,12,12,12,12,12,8,9,12,12,12,12,15,14,15,
 };
static unsigned short stb__arial_bold_16_latin1_s[224]={ 239,157,131,151,119,144,158,139,65,74,99,
224,143,172,253,209,28,228,188,1,148,33,42,139,46,121,251,249,233,75,215,
169,50,197,209,83,20,30,129,74,147,223,104,167,178,1,12,181,247,46,22,
239,157,23,235,220,209,197,187,105,248,90,51,195,156,93,55,84,86,75,72,
224,58,250,29,39,253,148,161,51,1,241,169,42,233,112,176,185,198,112,207,
10,26,34,147,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,
121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,239,219,110,
37,242,11,71,41,183,51,84,60,90,172,10,161,106,33,113,69,178,138,229,
253,189,126,119,42,131,118,105,48,86,239,105,139,117,19,113,128,1,10,70,
31,40,251,79,98,94,129,139,151,163,175,187,139,160,199,209,219,95,58,179,
202,193,239,1,230,215,212,61,79,172,10,19,221,66,88,106,234,170,161,190,
73,180,95,94,130,102,130,64,200,65,17,80,1, };
static unsigned short stb__arial_bold_16_latin1_t[224]={ 15,44,79,17,1,31,31,79,1,1,79,
69,79,79,44,31,31,44,44,44,44,44,44,44,31,44,69,31,69,79,69,
44,1,44,44,44,57,57,57,31,57,44,44,57,57,69,69,17,57,17,69,
31,57,44,57,57,57,57,57,1,17,1,79,79,79,69,31,69,31,69,57,
31,57,44,1,57,31,69,69,69,57,44,69,69,31,69,69,69,69,44,69,
1,1,1,79,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,
69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,15,44,1,
31,69,57,1,1,79,44,79,79,79,79,44,79,79,69,79,79,79,57,1,
47,79,79,79,79,31,31,31,57,17,1,17,17,17,17,57,1,17,17,17,
17,17,1,17,17,57,17,1,1,1,1,1,69,17,1,1,1,1,17,44,
17,17,17,31,17,31,17,69,57,17,31,31,17,57,57,57,44,31,44,31,
44,31,31,44,69,69,44,44,31,31,1,1,1, };
static unsigned short stb__arial_bold_16_latin1_a[224]={ 64,76,109,127,127,204,165,54,
76,76,89,134,64,76,64,64,127,127,127,127,127,127,127,127,
127,127,76,76,134,134,134,140,223,165,165,165,165,153,140,178,
165,64,127,165,140,191,165,178,153,178,165,153,140,165,153,216,
153,153,140,76,64,76,134,127,76,127,140,127,140,127,76,140,
140,64,64,127,64,204,140,140,140,140,89,127,76,140,127,178,
127,127,115,89,64,89,134,172,172,172,172,172,172,172,172,172,
172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
172,172,172,172,172,172,172,172,64,76,127,127,127,127,64,127,
76,169,85,127,134,76,169,127,92,126,76,76,76,132,127,64,
76,76,84,127,191,191,191,140,165,165,165,165,165,165,229,165,
153,153,153,153,64,64,64,64,165,165,178,178,178,178,178,134,
178,165,165,165,165,153,153,140,127,127,127,127,127,127,204,127,
127,127,127,127,64,64,64,64,140,140,140,140,140,140,140,126,
140,140,140,140,140,127,140,127, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_bold_16_latin1_BITMAP_HEIGHT or STB_FONT_arial_bold_16_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_bold_16_latin1(stb_fontchar font[STB_FONT_arial_bold_16_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_arial_bold_16_latin1_BITMAP_HEIGHT][STB_FONT_arial_bold_16_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_bold_16_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_bold_16_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_bold_16_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_bold_16_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_bold_16_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_bold_16_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_bold_16_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__arial_bold_16_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__arial_bold_16_latin1_s[i] + stb__arial_bold_16_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__arial_bold_16_latin1_t[i] + stb__arial_bold_16_latin1_h[i]) * recip_height;
            font[i].x0 = stb__arial_bold_16_latin1_x[i];
            font[i].y0 = stb__arial_bold_16_latin1_y[i];
            font[i].x1 = stb__arial_bold_16_latin1_x[i] + stb__arial_bold_16_latin1_w[i];
            font[i].y1 = stb__arial_bold_16_latin1_y[i] + stb__arial_bold_16_latin1_h[i];
            font[i].advance_int = (stb__arial_bold_16_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__arial_bold_16_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_bold_16_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_bold_16_latin1_s[i] + stb__arial_bold_16_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_bold_16_latin1_t[i] + stb__arial_bold_16_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_bold_16_latin1_x[i] - 0.5f;
            font[i].y0f = stb__arial_bold_16_latin1_y[i] - 0.5f;
            font[i].x1f = stb__arial_bold_16_latin1_x[i] + stb__arial_bold_16_latin1_w[i] + 0.5f;
            font[i].y1f = stb__arial_bold_16_latin1_y[i] + stb__arial_bold_16_latin1_h[i] + 0.5f;
            font[i].advance = stb__arial_bold_16_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_bold_16_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_bold_16_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_bold_16_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_bold_16_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_bold_16_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_bold_16_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_bold_16_latin1_LINE_SPACING
#endif

