// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_bold_15_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_bold_15_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_bold_15_usascii_BITMAP_WIDTH         128
#define STB_FONT_arial_bold_15_usascii_BITMAP_HEIGHT         72
#define STB_FONT_arial_bold_15_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_bold_15_usascii_FIRST_CHAR            32
#define STB_FONT_arial_bold_15_usascii_NUM_CHARS             95

#define STB_FONT_arial_bold_15_usascii_LINE_SPACING          10

static unsigned int stb__arial_bold_15_usascii_pixels[]={
    0x6c2dc828,0x4f22e4c3,0x6e54405a,0x4333201b,0x42d42ccb,0x07372e00,
    0x0005badc,0x5987b300,0x0cfa8790,0x44e83ff2,0xf8afc5ff,0x979dfb02,
    0x43bfe0bf,0x22743fec,0xfffe886c,0x9d5d83ff,0x2fbefc88,0x85df99f1,
    0x40f63ebf,0x3ffff66f,0x24e87ea0,0x86d804f8,0xf0bb105d,0x7d47f30b,
    0x6fec37c1,0x2623ff51,0x7ec4f9cf,0xff12ffbc,0x3ea1fd7b,0x001f35d8,
    0x43b5b7f1,0xf893a2fa,0x87ea5f83,0xfd9fd56d,0x985f83f3,0xffb1b63f,
    0x903fe21f,0x3ffffa9f,0x6cbf11ff,0x7dcff12f,0x369b1f32,0x6fc5be03,
    0x3a3f980e,0x97e0fe64,0x3e63e3f9,0x87b5fd8c,0x3e3f985f,0x9867fdc5,
    0x715f985f,0x7d43f93f,0x37c4bee3,0x4ff749f3,0xd9be00f9,0x1ef80cff,
    0x207f669d,0xb4d3e25f,0x264fe66c,0x44fe617e,0x7d46f84f,0x5b26f985,
    0xfb2fc46c,0x2fa9fe25,0x02ea7d04,0x1fffa8df,0xf94eafd4,0x2bf17e09,
    0x8fd4bd5b,0x7cc2fc1d,0x8df07f33,0xb5fb87f9,0x43dffdff,0x12ffcbfd,
    0x01fd7bff,0x1b3ae3e6,0x89f7b0df,0x3a69d2ef,0xa7c5f80f,0x47ec9f5b,
    0xf985f87a,0x0df07f13,0x9ff445fd,0x0cdfcdfb,0x4bf3bf66,0x02efdef8,
    0x0fce74fa,0x2367aadf,0x4e8fe65e,0x897e0be6,0x2bf6f13f,0xf82fbffb,
    0x13e3f985,0xffa82bfa,0x3e26ffce,0x5c201f99,0x002bf12f,0x3e7361f5,
    0xceef9be0,0x4e8bea2f,0x4bf10fe6,0x322fe1fa,0x189dfcbe,0xb1fcc2fc,
    0x983ff90d,0x7d44fffe,0x5f7007a8,0x1f4017e2,0x26f8bdf5,0x7d43ffea,
    0x44f893a1,0xf31b25f8,0x3e1fcc07,0x3ea3f985,0x10080080,0x64c00623,
    0x2a200f21,0x1d000c40,0x13a0ffc8,0x93feabff,0xbdef982f,0xff83fdca,
    0xe87fd90e,0x00000003,0x00000000,0xb0b720a0,0x9d55d987,0xb9881661,
    0xdd00abdd,0x50bbb21d,0x00000009,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x400bdb88,0x5c00f23c,0x06e201cc,0xdca805cc,
    0x5d40000b,0x9801ca80,0x2aaaa21c,0x039b9701,0xcfe83950,0xf89fc05f,
    0x7fff4405,0x7ffdc0ef,0x22fffec6,0x41ffeffc,0x22fbcfd9,0x360fffea,
    0x7dc06fff,0x13fffea2,0x7fffffd1,0x3e22fc80,0x8fc40f95,0x67e405f8,
    0x76f89f90,0x7ed3e25f,0x45fa9be2,0x22ffcbfe,0xf13e88fe,0xfb807f29,
    0x02667f22,0x3fea3bfb,0xfd0bf201,0x13d40bf9,0x445bf7bf,0xf30540ff,
    0x8fdd3e69,0x42ffa4fa,0xfd97e219,0x9002bf32,0x667ecc3f,0x2067f62f,
    0x27e40ff8,0xffb85f90,0xff12e405,0x3e61fd79,0xf13fa806,0x2fdcfe6b,
    0xa85bfff5,0x7d4bee3f,0xff80cfee,0x7fe5ff43,0x83bfffe2,0x05f985f9,
    0xfefc8bf2,0x23e81b8e,0x54bee7f8,0x13fa805f,0x7feff4bf,0x27ffe446,
    0xa97ecbf1,0xc83fbaff,0x6c9f11ee,0xf539912f,0x7c42fd49,0x7c4bf206,
    0x887fdf75,0xf997e21f,0x4150ff14,0xb89f34fa,0x41315fac,0x37fa0fe9,
    0x4bf32ffd,0x2abf106f,0xf80bee3f,0xf309fe67,0x4cbf208b,0x503ff64f,
    0x3ee7f88f,0x5fa87fa2,0x89fd57e6,0x3e67f51a,0x3ae0ff45,0x4df12fba,
    0x3e25935f,0x97ec9f15,0xfd1be2c8,0xc8ff73e5,0x7fc3fb1f,0x20efffbb,
    0x5effc45c,0x6effd47e,0x75ff40ff,0xfd7df10f,0x7ee6fec1,0x1fc8aa26,
    0xf8bf33f6,0x3fa1fdbe,0x3fa2ffcc,0x7fd43fdb,0x7cc6ffdd,0x3260ffce,
    0x20ecaeff,0x7ee7c43e,0xdffe982e,0x42efc882,0x6440cfea,0x7f40dffe,
    0x7dc46fdd,0x1f7ecc3e,0x8befbf66,0xd304ffd9,0x41dfdfff,0x0201efeb,
    0x00400981,0x00800004,0x3b6e2008,0x8010000c,0x82000800,0x0000105b,
    0x00000000,0x00000000,0x00000000,0x59300000,0x43c82d81,0xbdca82c8,
    0x323dc881,0x33332203,0x3072e3cc,0x970f2679,0x459712e3,0x1032e2c9,
    0x33332a79,0x900f24cc,0xb1ffbf27,0x4f98df09,0x1fffffec,0x05f8f7f2,
    0x3fffffe6,0x3fd1bea5,0x37cc7fa2,0x737fc3fb,0x2e1fe45f,0xfffffb3f,
    0xf017e2ff,0x8beabf1d,0x7cc6f86b,0x7cc77f24,0x17e1f60f,0x6c1ff980,
    0xfa89f73f,0x9fdc3fd6,0x1fb0fffa,0x03fa37cc,0x0bf103fa,0x3eabf6f8,
    0x8df03e62,0x303fe4f9,0xf17fff43,0x2207fd5d,0x9ff883fe,0xfefd80ff,
    0xcfcafcc4,0x1fd0df2f,0x07f41be2,0x22fdd7e2,0x09fff36f,0x7cc6f85f,
    0x4cc4df34,0x415fd509,0x80feacff,0x3fea04fd,0x1fff102f,0x3e7badf0,
    0x3fb84f9c,0x03fa07f7,0xf0bf5bf1,0x07bf7f2d,0x7cc6f89b,0x7fe4bf34,
    0x9fe1fa4f,0x02fe41fc,0xff102fec,0x53e7f60d,0xf883faef,0x3fa01fb6,
    0x83ff7c40,0x9f13f9ef,0x2a3fc6b8,0xca99fe4f,0x9be1fa4f,0x03bea1fb,
    0xfd80fee0,0xfdfb84ff,0x203fbf92,0x3a05f9fe,0x7fffc40f,0x13faef82,
    0x3a0f98bf,0xfe8fee0f,0x0fd27d43,0xf98fdcbf,0x07f7001f,0x07fe3bea,
    0x3ea1fff3,0x3fbee07f,0xf103fa02,0x2df0df3d,0xf82fdbee,0x3f73bf22,
    0x33bfe20f,0x21fa3ffd,0x7f47ee5f,0x704cccce,0x23ff107f,0x26ff86fa,
    0x3e205ff8,0x03fa00ff,0xf0feebf1,0x40fbf66d,0x7fffe43d,0xdfffd982,
    0x72fc3f42,0x3ffffa3f,0x07f707ff,0x44fd89f9,0x01ff44fe,0x1fd017f6,
    0x83fa5f88,0x0220046f,0x00080044,0x00000000,0x00000000,0x00000000,
    0xc8000000,0xc8665c4c,0x99313204,0x2aaaaa21,0x07f43fb2,0x972c8899,
    0x66666641,0x33333322,0x0de66644,0x1accccc8,0x82ccccc8,0x5911323c,
    0xfff07ffc,0x27f81fe3,0x3fea2ff9,0x27f56fff,0x263fc5f8,0x7fc3fb4f,
    0x3fe4ffff,0x3e0fffff,0xf85fffff,0x41ffffff,0x24ffffff,0x893fe6f8,
    0x4cbffe4f,0x40ff1fff,0x887ff17f,0x3e2fc999,0x47f85f76,0x7c3fb4f9,
    0x7c037c07,0xff0bfa66,0x337c5fb8,0xf9be21ff,0x7c9f10ff,0x3fbf74fd,
    0xe8ff81fe,0x645e803f,0x47f87d9f,0x7c1fb4f9,0x7c037c07,0x1fe2fcc6,
    0x6c6f8bf3,0x7fcdf11f,0x6fc9f15f,0x23f9db7d,0x3fbfe07f,0x207dc00f,
    0xff84fcf9,0xf94feeee,0x45eeeff8,0x44eeeeff,0x7fc6f86f,0x7c2feccc,
    0x10ffba9f,0x57eefcdf,0x3ef7e4f8,0xff1fccf9,0x2fefffc0,0x3fa0bf10,
    0xeeeff81f,0xff8f74fe,0x77fc7fff,0x437c4eee,0x7ffffc7f,0xfffff81d,
    0xdf9be22f,0x3e4f9ff8,0xfcafdf9d,0x9ffc0ff1,0x03f702fe,0x23fc1bee,
    0x7f8d54f9,0x37c037c0,0x26ff1be2,0xaaff81ff,0xbf37c409,0x5f93f7ee,
    0x23f91fff,0xfa9fe07f,0x2e07c80f,0xf98ff03f,0x407f8734,0x5c6f806f,
    0xff53fc4f,0x7c406f81,0x4ffe97e6,0xfcb7ed7e,0x79999ff1,0xd0bfb1fe,
    0x01ffb30d,0x329f31fe,0xff01fe0e,0x7c199999,0x40ffdccf,0x3e2fec7f,
    0xbf37c406,0x2bf27fcc,0x3e3f94fb,0xff5fffff,0x2fc2ff88,0xff00ef4c,
    0x41fb4f98,0x7fffc07f,0x3ffe1fff,0x47f80def,0x01be1ff8,0x322fcdf1,
    0x0000004f,0x00000000,0x00000000,0x00000000,0xb8819300,0x0159301c,
    0x00000000,0x10000000,0x83f63f21,0x00bccccc,0x0793025c,0xff70ffc4,
    0xfffc8dfd,0x13bfae0f,0xa81bff91,0x6c40dffe,0x7e4c0cff,0x3ef3e22d,
    0x202ffd9f,0x91d91fc9,0x7ffffc1d,0x0ff500ff,0x7dc0ffec,0xfb9be1ff,
    0x53eabf12,0x21fc9cf8,0x224fbbfd,0x743fcadf,0x7747fccf,0x7ff12fdb,
    0x0ff79ff7,0x001bffb5,0x107f91fe,0x3fe20fff,0x1fccf84f,0x313fa826,
    0x77c57e21,0x352fc41c,0x4c9f9310,0x7ccbee5f,0x97e2bf13,0xfe99fa7f,
    0x3fc000be,0x3bb60bee,0x1fd7f707,0x2a03f908,0x45f900ef,0xf51efffb,
    0xfeffc807,0x4f98fea4,0x2dfffff7,0x7d9be5f8,0x4000bfea,0x84feeeff,
    0xfd07e9fa,0x3f207f91,0x900ef981,0xfc9898bf,0x51dcbf14,0xf993e69f,
    0x1fccbee5,0x4df27c41,0x67ff547d,0x83b23b21,0x1efeeeff,0x4c3f53e2,
    0x320df15f,0x700fc81f,0xb9dfa8bf,0x3ef3f63f,0x3f677ea4,0x3fde7f44,
    0x44ff2bbe,0x07d9be4f,0x3f23ffb3,0x31fe0fd8,0x7e67e4df,0x3bbf20cf,
    0x1fc81ffe,0x0bf504b8,0x9113bfae,0xffd81bff,0x7fec46fb,0x27ff4c1c,
    0xfb37c9f1,0x8f00c880,0xfb3fc47f,0x7c1fffff,0x84feeeef,0x40ec81fc,
    0x84eeeff8,0x00040000,0x00000100,0x9ff0b200,0x7409fd99,0x3e227d47,
    0x6c0fe40f,0x7fffdc0f,0x0000005f,0xbb880000,0x001bbbbb,0xfffff000,
    0x6c7e809f,0x003fc81f,0x00000000,0x44000000,0x2ccccccc,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xfc97e013,0x41f90011,
    0x2abf50fd,0x3fffee5f,0x8fecdb0f,0x104d81fb,0x4e811111,0x964c0034,
    0xfdbf12e9,0x27f567c3,0x64bf05f8,0x2019f51f,0xd8bf13fa,0x2e60ffaf,
    0x3f70ffdb,0x543ecffe,0x7ffd41ff,0x557e1fff,0xbf9129ea,0x93ea5537,
    0x8bbff16b,0x80ffacff,0x7e4bf05f,0x03bffd31,0xf107eedd,0x3fe205ff,
    0x3fe6fe21,0xbfdd09f5,0xcccccc98,0x77ed52a0,0xffffbf73,0x2230fe63,
    0x7e4ff07f,0x99df9931,0x83f92fc1,0x2e0effc9,0xff906e9f,0x3a0bfa20,
    0x2fafbfbd,0x207e57cc,0x74088888,0x2099b760,0x407a21ba,0x5cdf06f8,
    0xfffff71f,0x3fb37c3f,0x443ff710,0xff883fdf,0x703fd83f,0x0fdf3bdf,
    0xfa93e2fb,0x101fffff,0xd00002e7,0x2fc17e29,0x3e6623f7,0x5d7f419e,
    0x3ff661ff,0x80ffd82d,0x321fe9fe,0x261cccff,0x70bff3ff,0x77731d45,
    0x88001777,0x5532c8ac,0x0bf15f85,0xf81fb97e,0xf9bff505,0x8073fea3,
    0x33fb85fa,0x7fffecdf,0xfd8ffc2f,0x00000002,0xba7cefcc,0x17e207ff,
    0x903f72fc,0x17300807,0x00000000,0x00000000,0x9f39f100,0x0000eee6,
    0x00000000,0x00000000,0x00000000,0x00174b60,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__arial_bold_15_usascii_x[95]={ 0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,-1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0, };
static signed short stb__arial_bold_15_usascii_y[95]={ 12,2,2,2,1,2,2,2,2,2,2,3,10,7,
10,2,2,2,2,2,2,2,2,2,2,2,5,5,3,4,3,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,13,2,4,2,4,2,4,2,4,2,2,
2,2,2,4,4,4,4,4,4,4,2,5,5,5,5,5,5,2,2,2,5, };
static unsigned short stb__arial_bold_15_usascii_w[95]={ 0,3,6,8,7,12,10,3,5,4,5,8,3,5,
3,5,7,5,7,7,8,8,7,7,7,7,3,3,8,8,8,8,14,10,10,10,10,9,8,10,9,3,7,9,
7,11,9,10,9,11,10,9,8,9,10,13,9,10,8,5,5,4,8,9,4,8,8,8,8,7,5,8,8,3,
4,8,3,12,8,8,8,8,6,7,5,8,8,11,8,8,7,5,2,5,8, };
static unsigned short stb__arial_bold_15_usascii_h[95]={ 0,10,4,11,13,11,11,4,13,13,5,8,5,3,
2,11,11,10,10,11,10,11,11,10,11,11,7,10,8,6,8,10,13,10,10,11,10,10,10,11,10,10,11,10,
10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,13,11,13,6,2,3,9,11,9,11,9,10,11,10,10,
13,10,10,8,8,9,11,11,8,9,11,8,7,7,7,10,7,13,13,13,4, };
static unsigned short stb__arial_bold_15_usascii_s[95]={ 127,93,110,83,1,110,1,119,60,29,104,
17,100,117,123,12,38,36,51,81,16,98,73,66,1,46,124,1,115,91,35,
42,34,25,5,27,116,106,97,25,83,22,119,56,48,36,26,72,12,107,1,
54,106,15,95,81,71,60,51,49,9,55,82,102,123,76,18,67,89,94,36,
64,42,123,24,115,124,102,8,85,101,92,1,59,66,26,44,70,53,74,62,
18,15,9,110, };
static unsigned short stb__arial_bold_15_usascii_t[95]={ 1,38,66,1,1,1,15,61,1,1,61,
61,61,66,65,15,15,49,49,15,50,15,15,38,27,15,49,50,49,61,61,
49,1,50,50,15,38,38,38,27,38,39,15,38,38,38,39,1,39,15,39,
15,27,27,27,27,27,27,27,1,27,1,61,58,61,49,15,49,15,49,27,
15,27,1,1,27,27,49,61,49,1,1,61,49,1,61,61,61,61,38,61,
1,1,1,61, };
static unsigned short stb__arial_bold_15_usascii_a[95]={ 60,72,102,119,119,191,155,51,
72,72,84,125,60,72,60,60,119,119,119,119,119,119,119,119,
119,119,72,72,125,125,125,131,209,155,155,155,155,143,131,167,
155,60,119,155,131,179,155,167,143,167,155,143,131,155,143,203,
143,143,131,72,60,72,125,119,72,119,131,119,131,119,72,131,
131,60,60,119,60,191,131,131,131,131,84,119,72,131,119,167,
119,119,107,84,60,84,125, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_bold_15_usascii_BITMAP_HEIGHT or STB_FONT_arial_bold_15_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_bold_15_usascii(stb_fontchar font[STB_FONT_arial_bold_15_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_bold_15_usascii_BITMAP_HEIGHT][STB_FONT_arial_bold_15_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_bold_15_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_bold_15_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_bold_15_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_bold_15_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_bold_15_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_bold_15_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_bold_15_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_bold_15_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_bold_15_usascii_s[i] + stb__arial_bold_15_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_bold_15_usascii_t[i] + stb__arial_bold_15_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_bold_15_usascii_x[i];
            font[i].y0 = stb__arial_bold_15_usascii_y[i];
            font[i].x1 = stb__arial_bold_15_usascii_x[i] + stb__arial_bold_15_usascii_w[i];
            font[i].y1 = stb__arial_bold_15_usascii_y[i] + stb__arial_bold_15_usascii_h[i];
            font[i].advance_int = (stb__arial_bold_15_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_bold_15_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_bold_15_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_bold_15_usascii_s[i] + stb__arial_bold_15_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_bold_15_usascii_t[i] + stb__arial_bold_15_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_bold_15_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_bold_15_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_bold_15_usascii_x[i] + stb__arial_bold_15_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_bold_15_usascii_y[i] + stb__arial_bold_15_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_bold_15_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_bold_15_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_bold_15_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_bold_15_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_bold_15_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_bold_15_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_bold_15_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_bold_15_usascii_LINE_SPACING
#endif

