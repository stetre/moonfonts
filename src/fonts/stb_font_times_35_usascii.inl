// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_35_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_35_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_35_usascii_BITMAP_WIDTH         256
#define STB_FONT_times_35_usascii_BITMAP_HEIGHT        142
#define STB_FONT_times_35_usascii_BITMAP_HEIGHT_POW2   256

#define STB_FONT_times_35_usascii_FIRST_CHAR            32
#define STB_FONT_times_35_usascii_NUM_CHARS             95

#define STB_FONT_times_35_usascii_LINE_SPACING          23

static unsigned int stb__times_35_usascii_pixels[]={
    0x0b220053,0x971016e0,0xea807100,0x2aaaaaa3,0x6e5c4002,0x000bceee,
    0x8006a600,0x0aaaaaa8,0x980001c0,0x00c4001a,0xb3015300,0x02a0000d,
    0x01a880a2,0x26001500,0x01b500aa,0x5c03d910,0x200baa05,0x3ff400da,
    0x0ffdddd9,0x826fb660,0x000deca8,0xffdffd90,0xeffa807d,0x3a201eee,
    0xfec80009,0x403effee,0x2e004ff8,0x7f5c2cee,0x5f00006f,0x33f20d50,
    0x1ae000ef,0x3ff37aa0,0x001ea82f,0x416e01f7,0x0dd800fb,0x2a05fc80,
    0x176c407f,0x4007d300,0x2a20bfe9,0xdf500dfd,0x3bffae00,0x74c00bef,
    0x6fec40bf,0x00dff500,0x4cc03dd3,0x880006ff,0xfc84c80f,0x2600df11,
    0x5c35c01f,0x00fa84ff,0x0b706f88,0x0d900bf1,0x3fd40080,0x40009d30,
    0x1ffb803c,0x5417fec0,0x8bfe806f,0x01ffc88e,0xfb803ff9,0x07ffa82f,
    0xd8006fe4,0x7a80006f,0x46f987d0,0x03e800fd,0x7fe81fcc,0x3fa00bd0,
    0x3fb85b81,0x00017d40,0x7d41fea0,0x01e80003,0x2200ffea,0x37d40ffe,
    0x20e93f20,0x2ffa81fb,0xa81ffb00,0x1bf606ff,0x000dfb00,0x707e0b70,
    0x403fc89f,0x05fb805c,0x5f305ff7,0xb705ff00,0x7c409fb0,0xfa800007,
    0x0003f887,0x3fe20d10,0x17fe6006,0x7fc40df5,0x883d03a1,0x3e6006ff,
    0x82ffcc5f,0x6c000ffa,0x3d80006f,0x27ec0f98,0x0f9817ee,0x980ffb80,
    0x01df05ff,0x2dc1ffc4,0x9fb037ec,0xff500000,0x80000db0,0x02ffc80e,
    0xf517fec0,0xd17fcc0d,0x7fec1c81,0x17fec002,0xff109ff1,0x0df90005,
    0xd705f000,0x7fb89fd0,0x7c400fa0,0x03ff981f,0x7fcc09f9,0x7fc85b82,
    0x0001ff10,0x23fd4073,0xdc9801fb,0x42c87953,0x4000fff8,0x1bea6ffb,
    0x03a4ff88,0x07ffc415,0xf1bfea00,0x00dfd09f,0x3731bf20,0x3eeaaa20,
    0xaedaaaab,0xfb8bf90a,0x8800b906,0x203ff501,0xff500ffa,0xff70b701,
    0x400df701,0x2a06feb8,0x22027c7f,0x5ff571de,0x3ffd4498,0x87ffcc00,
    0x7ff406fa,0xffa801d3,0xfff98007,0xff70ffa0,0xfc800447,0x1dffff56,
    0xefeeeea8,0xeeefeeee,0x5fc8bf70,0x00000f98,0xff9817f6,0x2e0ff501,
    0xff07fa85,0x7fe6400b,0xfa9fea06,0x3a17a201,0xffb8d07f,0xfff88006,
    0xfb80df51,0x5c00ecff,0xf98006ff,0xb0bf61ff,0xfffd73ff,0xfaefc809,
    0x01ffffdd,0x440fc172,0x220ff47f,0x2600002e,0x3fe200ff,0x2dc1be03,
    0x7fcc27c4,0x06fe8004,0x406d9fea,0x05fe80fd,0x005ffd8d,0x3ea5fff0,
    0xffffc806,0x02ffec01,0xb1fffc40,0xbefff83f,0x00effda9,0x6c41bff9,
    0x20fa05ff,0x5cfe6079,0x0005c83f,0x7c017e40,0x203f204f,0xa81fa85b,
    0xfd8003ff,0x3f9fea06,0x3e20ff60,0xffe8d03f,0x9fff0004,0x7e401bea,
    0x3fa02fff,0xfff0005f,0xff107e49,0x413ff60b,0x3ffe06fc,0x0d703f01,
    0xa82ddc98,0x8001300f,0xdff004f8,0x2dc1ec40,0x3ffb81f4,0x206fc800,
    0x203f17fa,0x1ff306fb,0x5ffd8b30,0x27fff000,0x3a6006fa,0xffb04fff,
    0x3ffe000b,0x7ff51ee2,0x203ffe20,0x3fee06fc,0x4c80f983,0x417c4000,
    0x000eecfb,0x3ff400b7,0x4b70ed40,0x3ff200ca,0x06fc8002,0x407cdfea,
    0xdf701ff8,0xdff70ee0,0x5fff1000,0xf1001bea,0xfc81dfff,0xff88006f,
    0xff91aa1f,0x417ff405,0x3fe206fc,0x07d06a84,0xfa84d800,0x3a003ba3,
    0x03ff6000,0xcadc7e60,0x17fe400e,0x5037e400,0x3203eaff,0x413fa06f,
    0x03ffcc1d,0xa87ffcc0,0xfbe8006f,0x3fea0eff,0xfff98007,0x5ff71a60,
    0x641ffe40,0xaa7fc06f,0xeeeefeee,0x00eeeefe,0xff103aa0,0x26027dc1,
    0x07ff4003,0x25b832e0,0x3fee02c9,0x06fc8002,0xf83ddfea,0x05ff504f,
    0x03ffe21a,0x54dff500,0x88e8006f,0x3fe62ffe,0x7fd4000f,0x3fea2c46,
    0x20ffea02,0x9ffc06fc,0xaaadeaa8,0x0aaaafca,0xf303f100,0x5406fa8f,
    0x03ff4002,0xd0b707d1,0x00ffe609,0xfa81bf20,0x5ff10f57,0x2d41ffa0,
    0x4003ffe8,0x1bea2ffc,0x7fc43a00,0x001ffec5,0x1060bff2,0x7fcc09ff,
    0x2206fc82,0xb81f82ff,0x41360006,0x07fcc6fb,0xff800170,0x2e03f206,
    0xf882fa85,0x6fc8004f,0x07cdfea0,0x37603fe6,0x300e885f,0x7c400dff,
    0x1037d46f,0x7fe41d01,0x801bfe20,0x3e005ff8,0x03fe605f,0xff981bf2,
    0x26407cc0,0x3206b800,0x007fcc6f,0x0bff1000,0x885b837c,0x009ff05f,
    0x7d40df90,0xff883f17,0x227e4ec2,0x7fd403e8,0x83ff9003,0x212a06fa,
    0x703fea0e,0x3f2007ff,0x3fea000f,0x3209f500,0x213f206f,0x0005d06a,
    0x37d403f1,0x00001fe6,0x3ea05ff3,0xff50b707,0x000bfb01,0x3fd40df9,
    0x97ffd07d,0xea93f65d,0x77e405c3,0x40ffcc01,0x21ea06fa,0x6c1bee0e,
    0x7fd401ff,0xfb03d902,0x6403fa0b,0x20df106f,0x0003f04c,0x47f8809b,
    0x17aa06fa,0x2a07fa80,0xb85b81ff,0x06fb80ff,0x2a06fc80,0x3ea1aa7f,
    0x3fea1eff,0x02cc1ced,0x3ee05ff9,0x40df501f,0xfd0742fa,0x417fd405,
    0xf500efc8,0x45ff10df,0x3f201fc8,0x03ba20df,0x003cc1f4,0x1fd8035c,
    0xffe80ff6,0x409f9002,0x85b82ff9,0x3ff107fc,0x206fc800,0x440fc7fa,
    0x4037100b,0x7fe4401e,0x403ffecd,0x3fea06fa,0x027ec3a2,0x766ffec4,
    0x7fc403ef,0xf9dfb104,0xffb3001b,0x1f809fdd,0x7cc006b8,0x73dd1001,
    0x0ffc80bf,0x200ff880,0x85b83ff8,0x0fea06fd,0x540bf900,0x00035c7f,
    0xd3002d40,0x5001ffff,0x7f5c40df,0x01efdfdf,0x001aa880,0x0cc40144,
    0x01a98800,0x00066050,0xdb880079,0x0013003d,0x3fe013ee,0x4fd85b82,
    0x320036c0,0x21fea04f,0x2600004d,0x7ec4000e,0x6fa805ff,0x15f53100,
    0x00000000,0x00000000,0x00000000,0x20000000,0x03fd005e,0x807f70b7,
    0x3f2002f8,0x221fea03,0xea80002f,0x3fee0000,0x037d403f,0x2e200740,
    0xbbbbbbbb,0x03bbbbbb,0x00000000,0x00000000,0x00000000,0xbf1001d5,
    0x17e216e0,0x6c003ea0,0x41fea00f,0x2e0004e8,0xd980000e,0x1bea03ff,
    0x3a600a00,0xeeeeeeee,0x06eeeeee,0x00000000,0x00000000,0x80000000,
    0x1f7001eb,0x0fd416e0,0xdd106d40,0x3ea02743,0x00176407,0x000019d5,
    0xa82dfc98,0x0000006f,0x00000000,0x00000000,0x00000000,0x00970000,
    0x5b803722,0x2200fa60,0x99fff30d,0xffffe81b,0xcfc9807f,0xecba999a,
    0x4000000c,0xf51cdcb8,0x005fffff,0x00000000,0x00000000,0x00000000,
    0x88000000,0x00391001,0x04a88095,0x166e5450,0x19999988,0x3b2ea200,
    0x00009acd,0x4c420000,0x00099999,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x88000054,0x26200099,0x054c4000,
    0xa9880062,0x0004409a,0x0180d4c4,0x0ba00cc4,0x800b7000,0x033003ea,
    0x0b76e600,0x002aea20,0x000054c0,0xfff002a8,0x5007ffff,0x005bfdfb,
    0x3f77faa0,0x3ff6a01e,0x7f4c01ef,0x3cacefff,0xdeffda80,0x03b9befe,
    0x3bbffaa0,0x80e89bde,0x03ffdfe9,0x2e8000b7,0x3fffc880,0x1ff775c0,
    0xff739b00,0x2b3f201f,0x0ccccdfd,0xfffffc88,0x1bea0002,0x3ffffee0,
    0x77dc00ff,0x7000fb11,0x17ec417f,0x7fff77e4,0x17df701f,0x80fffee6,
    0xa80aefe8,0xe9803fff,0x7ec40bdf,0x867d40ff,0x7c40dfc8,0x00f30000,
    0x80ffee22,0x013ea2fd,0x09ff51b2,0xeffa85fb,0x7ff440ee,0x004fffff,
    0xf806ff88,0x02cccccc,0x3e60ffcc,0x41be6003,0x87660ff9,0xf984ffd9,
    0x07ff300f,0x10037fe6,0xffb809fb,0x21ffa803,0x09fd05f9,0x16e0007b,
    0x207ff100,0x03fd84fc,0x07ae13ea,0x9fd01ff5,0x5c4e7e40,0x4002fffe,
    0x35c06ffd,0x10ff7000,0x1fe400bf,0x41625fd0,0x5fd87ff8,0x7c41fcc0,
    0x17e2005f,0x2004ff98,0x407fa1fb,0x02dc0ffa,0xf8002e80,0x80ff983f,
    0x13f207f9,0xf906fd80,0x6407e20d,0x3ae006ff,0x017c06fd,0xa81ff900,
    0x13f6002f,0xfb002fd8,0xb009fd0f,0x001ffb07,0xfff105c8,0xf32e8001,
    0x22ffc01f,0x3cc000f8,0xd83ff800,0x40ffe06f,0x3fa003fd,0x501ff706,
    0x00ffe809,0x06fc9f98,0xc8000bee,0x003ec2ff,0x7fc03ff2,0xf09f7000,
    0xb87700ff,0x588004ff,0x0007ff90,0xd01fee57,0x8007b0ff,0x7ff0005b,
    0x3604ff88,0x007ff07f,0xffc83fe4,0xffc80280,0xdf93e800,0x16ffff40,
    0x457fee00,0x7d4002fd,0x004fa85f,0x3ff607f6,0xfb0a200e,0x4020003f,
    0x88001fff,0x6401ff92,0x002dc0ff,0x8ae600ba,0x1ffd43ff,0x2621ff70,
    0x0199cff9,0x7f40ffd4,0x1bee0005,0x06fc9720,0xbffffff7,0x3ffe2001,
    0x2aaa1eea,0xffe81aaa,0x400bf30e,0xfff501f8,0x3ffc005f,0x3fea0000,
    0xffd80007,0x10bfee01,0x01e6001f,0xf9d97ff5,0x02ffc87f,0x7fec7fee,
    0x00ffffff,0x3fe22fec,0x13f20000,0x37e41f30,0xfffeca98,0xffb001ff,
    0xdfff307f,0xdffd1017,0x744007f5,0x7fffe403,0x37fcc01e,0x3ff20000,
    0xffb80006,0x20bff202,0x4099003d,0x7ffcc3fb,0x5017fec3,0x07ff05ff,
    0xf97ff900,0xfe80003b,0xf90ba202,0x7ffdc00d,0x7fec400e,0x01df900f,
    0x03fffe88,0x07ffd710,0xcfffffc8,0x00bff700,0x2aaaaaa6,0x00bffb0a,
    0x40dff500,0x05b81ffc,0x1bea05d0,0x3f61ffdc,0x13fea01f,0xb1000ffe,
    0x00035535,0x5d80bf10,0x4c006fc8,0x3ea04fff,0xf905ffed,0x3ffe6003,
    0x7f64403f,0x74c05fff,0xd83fffff,0xd51005ff,0x3a15dfff,0xd00005ff,
    0x3ff605ff,0x4c00f880,0x4407fa07,0x0fff43ff,0xff09ff50,0x01f44007,
    0x01fc8000,0x1bf203ea,0x41ffa200,0x5fff34fd,0x3a200bd0,0x004fffcb,
    0x005fff91,0x8bfffff7,0x4c007ffd,0x7fec1fff,0xff300005,0xffd5117f,
    0x3201ec0f,0x401ff504,0x0ffec3ff,0xff09ff50,0x4efdc007,0xf3000019,
    0xc80fc407,0xff70006f,0x7ec3fd81,0x003e60ff,0xfffb93a6,0x17fea004,
    0x7fffe440,0x003fff24,0xfc81fff0,0x2600007f,0xfacffffe,0xd01aa04f,
    0xf01ff205,0x01ffc87f,0x3fe0ffee,0x3fff2003,0x0cffffff,0x36026c00,
    0x001bf204,0xff917fc4,0x74bfff30,0xa86f8802,0x36000fff,0x7f4c007f,
    0x5fff72ff,0xb87ff800,0x00000fff,0x3ffb0d44,0x79807c40,0xff01bf60,
    0x202ffc87,0x3ff82ffb,0x7fffec00,0x01ffffff,0xefa80d90,0xffeeeeee,
    0x74004eef,0x5c13fe0f,0x005cafff,0x3fee09f7,0x83fea003,0x4ffe8802,
    0x8009fff3,0xfff987ff,0x4c000001,0x03d806ff,0x03ff4099,0x5ff50ffe,
    0x7c07fe40,0x44ec003f,0xfcaaa999,0x400eb805,0xfffffffb,0x05ffffff,
    0x7ff53ec0,0x07ffff40,0x3602fe80,0x1fe6005f,0xdff3001d,0x20037fec,
    0x7ffd07ff,0xfd800000,0xd06a801f,0x007fec05,0x4ff887ff,0x7fc1bf60,
    0x400f6003,0x0075407a,0x5555554c,0x1aaffdaa,0xffb27400,0x77ffc40b,
    0x405ff000,0x3ea006fb,0xff801f45,0x00bffe25,0xff307ff8,0x0488003f,
    0x1003ff88,0x6407981f,0x0ffe03ff,0x4ff81bf6,0x2e007ff0,0x40b7001f,
    0x200000e9,0xf50006fc,0x007ffec1,0x501dfff9,0xf502fe45,0x20fec009,
    0x3ff8805e,0x80077fdc,0x3ff607ff,0x0036000e,0xd8009fd1,0x3ea02643,
    0x20ffe06f,0xff980ff9,0x2007ff00,0x1f8805ff,0x1b803d50,0x221bf200,
    0x42f980cd,0xd884fffb,0x0aefffcf,0x00ff88b3,0x880543fb,0x405fe84f,
    0xffa80efc,0x07ff800e,0x44037fe4,0x1ff4401d,0x07a35400,0x2617ffa0,
    0x07f905ff,0x3fe207fb,0x7dff9004,0x0bae6213,0x555567d4,0x4007daaa,
    0xfffa86fc,0xb01ecaad,0xf977dfff,0x3fffea1b,0xcfc82fff,0xff91fd40,
    0x40ff263b,0x260adffe,0x3a201ffc,0xfb881bef,0xfffb806f,0x3d9510ad,
    0x002ff980,0x01e61f10,0x55f7ffcc,0x83cfffdc,0x813ea0fd,0x32006ffa,
    0xffffffff,0xffff500d,0x9fffffff,0x906fc800,0x019dffff,0x7ffffe44,
    0xfffe983f,0x37fea03e,0x7fcc1efc,0x200dffff,0xeeffdbae,0xb7000dff,
    0xffd99ffd,0x76d40039,0x0bffffff,0x0bfeca88,0x4c9ec000,0x3fffa200,
    0x203bff3f,0x02dedfc8,0x9fffffb5,0xbb971007,0x7fcc0359,0xffffffff,
    0x7e4001ff,0x4000cc06,0x8800aa98,0x2662001a,0x004d4c00,0x09aaa818,
    0x2aa62000,0x98800019,0x4d4401aa,0x46600000,0x9a88000a,0x098002a0,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xfc880000,0x0faa0000,
    0x3315d440,0x09999988,0x10099998,0xa80ab985,0x0dfffffe,0xbfffffd5,
    0xdfffd703,0x3ffffee5,0x7fec04ff,0xffd72fff,0x2019ffff,0x1dffffec,
    0x00007dc4,0x02600db3,0x7ffffffc,0x8002ffff,0x7f5c0001,0x4c4fffff,
    0xfffd980b,0x1ffa0000,0xffb9dd30,0xfffb87fb,0xefeb82df,0xe9b7ed42,
    0xf901ffff,0x3ff203ff,0x05fb803f,0x400bfff9,0xf980dff9,0xf5000dff,
    0xfffd983d,0xffeb8000,0x40fecc06,0xfffffffa,0x4000ffff,0xf300007a,
    0xdff109ff,0x01ffd110,0x702fdc00,0x3ffe887f,0x200fff88,0x7fe640fc,
    0xfffeee8e,0x03fff01f,0x5c017ffc,0x13ffa00f,0x7401fd00,0x2fc002ff,
    0x007fec44,0x837fccc0,0xd81fffd9,0xcccccdef,0xfd8005fc,0xfff00002,
    0x40dff303,0x40000ffb,0x4c13e600,0x5ff703ff,0xffb02740,0x2fff543b,
    0x2e03ffc8,0x05d804ff,0x1003ffd4,0x1ffe805f,0xf701fc00,0x7ec0001f,
    0xffd9b886,0x2a00fc41,0x7fc4003f,0xffd00005,0xb8076e01,0x000000ff,
    0x7fc403fa,0x4c17fe03,0x07ff600f,0x2607ffe2,0x3fe606ff,0xe802f806,
    0x0f7001ff,0x8001ffb0,0x03fea03e,0x406fd800,0x00e41ffa,0x320007ec,
    0x80001fff,0x20000ffe,0x00000ffa,0xff80df50,0x207fee03,0x037e405c,
    0x3fa07ff9,0x07ffa00f,0xff7007a8,0x2013a009,0x74000ffd,0x003fea03,
    0x4c06fd80,0xf80041ff,0x7f7c4005,0xfe80004f,0x3ea0000f,0x9000000f,
    0x03ff80bf,0x0be22ffc,0x7d40df90,0x07ff904f,0x9b027fec,0x03ffe200,
    0xfb001f30,0x03e8001f,0x80003fea,0x7fcc06fd,0x03fa8001,0x7ffc7dc0,
    0x7ff40000,0x3fea0000,0x9800ae20,0x7c04fd83,0x07fdc03f,0x0df900d7,
    0xf982ffcc,0xffff106f,0xf90017c0,0x005d807f,0xe8001ffb,0x103fea03,
    0x36033333,0x0ffcc06f,0x0007e400,0x01ffe53a,0x003ffa00,0xd88ffa80,
    0x7100ffff,0x0bfd0dfd,0x7c403ff8,0x3200fa4f,0x0ffe206f,0xfa81ffe8,
    0x07a81ffd,0x103ffcc0,0x3ff6005f,0x501f4000,0xfffb81ff,0x06fd80bd,
    0x4000ffcc,0x87cc005f,0x40006ff9,0x20000ffe,0xbace9ffa,0xff9905ff,
    0xf80dfd0d,0x8ffc803f,0x6fc800f9,0xb80bfe20,0xfacd84ff,0x8004d84f,
    0x0d702ffe,0x0007fec0,0x0ffa80fa,0x3600f744,0x0ffcc06f,0x000fea00,
    0x01ffe8bb,0x003ffa00,0x41effa80,0x3fa01ffb,0x201ffc86,0xff8803ff,
    0xff9005cc,0x100ffcc0,0x89f88dff,0x00fc47ff,0xe837fd40,0x03ff6003,
    0x7d407d00,0x4017a20f,0x7fcc06fd,0x007e4001,0xffa83f10,0x3ffa0005,
    0x3fea0000,0x202ff881,0x5ffb86fd,0x2007ff10,0x9002fffc,0x02fd40ff,
    0x4d70ffec,0x01ea2ffd,0x4c1ffe80,0x3ff6000f,0x501f4000,0x013a21ff,
    0x7cc06fd8,0x02fc001f,0x7ffc1b20,0x1ffd0000,0x07fd4000,0xfb01ffc4,
    0x837ffa0d,0x1003ffd8,0x7e400dff,0x003fd01f,0x51f49ff5,0x0026cbff,
    0x5d89ff70,0x007fec00,0xffa80fe0,0x6c004e88,0x0ffcc06f,0x8007f300,
    0x07ff902f,0x203ffa00,0x3ea02ee9,0x03ff880f,0x7fd41bf6,0xff8eeeff,
    0x00ff6003,0x220effc8,0xff1003fc,0xfff07e2f,0x40003f11,0x5f10fff8,
    0x01ffd800,0xff5017c0,0xfb000df5,0x01ff980d,0xa8003f20,0xa999999f,
    0xfd0006ff,0x3fff901f,0x7c03fea0,0x81bf603f,0xf0dffff9,0x07d4007f,
    0xbf9ff900,0xd8005ff9,0xfc86b9ff,0x80006aaf,0x00d73ffc,0x8003ffb0,
    0x37fea02f,0x7ec004ff,0x00ffcc06,0xfe800df0,0xffffffff,0xfe8002ff,
    0x09fff707,0x7fc03fea,0x201bf603,0x01ffc0a9,0xfc800b90,0x00015516,
    0x20fb3fea,0x004ddff9,0x7d7ff980,0x05ff9000,0xf500fc40,0x005ffb1f,
    0x3e6037ec,0x07f3001f,0x2a007cc0,0xfe8005ff,0x41326606,0x7ff00ffa,
    0x00037ec0,0x3e2007ff,0x037e4001,0x3fffe000,0x03ffff00,0x37ff6000,
    0xffa8000f,0x501ea004,0x3ffd11ff,0x301bf600,0x3f2003ff,0x40176000,
    0x74000ffe,0x501e805f,0x0ffe01ff,0x20006fd8,0x0d9003ff,0x000df900,
    0x205ffc80,0x00006ffc,0x0017ffea,0x8803ff44,0x87fd404e,0xd800eff9,
    0x0ffcc06f,0x22006f80,0x9ff7001f,0x13fa14c0,0x7fd40d10,0x6c07ff00,
    0x3fe0006f,0x07e61303,0x001ff200,0x407ff300,0x00004ff9,0x0000fff4,
    0xe8809ff3,0x20ffa806,0xfd805ffa,0x017fcc06,0xd9001fcc,0x07ffc400,
    0x1ff1ffc4,0xf700f4c0,0x09ff103f,0x88003fec,0xeffe84ff,0xffb0003f,
    0x1fd00000,0x0001fe80,0x00037dc0,0x304effd4,0xf7001dd7,0x04ffc83f,
    0x3e6037ec,0x00fc802f,0xe8009f10,0xfff884ff,0x32e03f88,0x417fe400,
    0x3fe05ff9,0xffa8000f,0x05fffe86,0x03fff100,0x805c8000,0x8800006b,
    0xd500003f,0x9fffdfff,0x0bff2001,0x7c09fff1,0x3fee00ff,0x2006e803,
    0x7f4004fd,0xfffc82ff,0x2a00403d,0x99dffffd,0x22dffffc,0x04efffeb,
    0xdddddb30,0x000e64c7,0xdeeeeec8,0x03100000,0x00000310,0x1000002a,
    0x00135555,0x33ffff6e,0x9dffff91,0x677fff5c,0x3ffff720,0x2006a04e,
    0x04effffb,0x7fffff5c,0x000d441e,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x3ffff660,
    0xfffd7004,0x3ff663bf,0xdeefffff,0xffd5000b,0x6c0009ff,0xb31dffff,
    0xbdffffff,0x7ffecc00,0x3661dfff,0x81efffff,0xffffffd9,0xb302bcde,
    0x3bffffff,0xfffffdb8,0xfffd30ce,0x983dffff,0x25fffffd,0xffffffd9,
    0xffffffff,0xfffffb30,0xffffffff,0xfffd98bf,0xdeeeffff,0x8171002c,
    0x002fffc8,0x74403bea,0xfba9adff,0x3e2003ff,0x88000fff,0xb100efff,
    0x80003fff,0x7e406ffe,0xfe8800df,0xffecabdf,0x3bffa00d,0x27ffcc00,
    0x5ffff930,0x404ffa80,0x9999cffe,0xd80ffca9,0x99999dff,0xd106fba9,
    0x95359dff,0x4019fffb,0xfff906ff,0x2027c003,0xfe883ffb,0x3ff6005f,
    0xffc8004f,0x2ffdc04f,0x27fe4000,0x9000ffa0,0xdff907ff,0x013ff203,
    0x5c00fff4,0x7dc03fff,0x03ffc803,0x7fdc07d4,0x2e06a804,0x3fa603ff,
    0x7ff881ff,0x01ffff30,0xff700fe0,0x03ffe207,0x07fffdc0,0x7ffdf100,
    0x004ffa80,0x203ffb80,0xfb8002fc,0x09ffb03f,0x7400ffee,0xffb001ff,
    0x8027c40d,0x1d803ffb,0xd004ffa8,0x401ffdc0,0xda81fffc,0xdffdf302,
    0xf700be00,0x1fff407f,0x3ffceb80,0x3fefee00,0x027fd403,0x81ffdc00,
    0xf70002fb,0x1ffea07f,0xd801ffdc,0xfd1000ff,0x8017a09f,0x09803ffb,
    0x5004ffa8,0x801ffdc0,0x4000effe,0x04fff9f9,0x7fdc02f8,0x017ff203,
    0x037fc75c,0x07ff77d0,0x0004ffa8,0xfb83ffb8,0x3fee0002,0x05fff303,
    0x36007ff7,0x3e6000ff,0x007641ff,0x0007ff70,0x00027fd4,0x9801ffdc,
    0x4c003fff,0x807fff37,0x1ffdc02f,0x2007ffb0,0x005ffb6b,0x07ff71f5,
    0x0004ffa8,0x7e43ffb8,0x7fdc0002,0x05fff103,0x36007ff7,0x7e4000ff,
    0x0007ee6f,0x00c07ff7,0x05013fea,0x4007ff70,0x4c006ffc,0x807ffee7,
    0x1ffdc02f,0x000fff88,0x01bfe6d7,0x01ffdd3a,0x00013fea,0x2fc8ffee,
    0x3ffb8000,0x701fff70,0x3f6007ff,0xffe8000f,0xb8002f9c,0x809503ff,
    0x03404ffa,0x5001ffdc,0x4c003fff,0x807ffe47,0x1ffdc02f,0x2005ffd8,
    0x80bffa6b,0x07ff71fa,0x0004ffa8,0x5f93ffb8,0x3fee0000,0x20dffd03,
    0xfb003ffb,0xff30001f,0x2e0009ff,0x809b03ff,0x1e604ffa,0x800ffee0,
    0x2002fff9,0x06ffe879,0x3ffb805f,0x0027ff54,0x05ffa9ae,0x03ffb976,
    0x00027fd4,0x2fedffdc,0x7ff70000,0x00fffb88,0x33339ff7,0xffd33333,
    0x3fee0001,0xff70000f,0x9ff9999b,0xcceffa80,0x807feccc,0x7c003ffb,
    0x1e6003ff,0x3e17ffe2,0x777fdc02,0x001bfffe,0x0fff46b8,0x7ff70fcc,
    0x004ffa80,0xffeffb80,0xf700003f,0xfff957bf,0x7ffdc03b,0xffffffff,
    0x0000ffff,0x40013ffa,0xeeeeeffb,0x7fd404ff,0xfeccccce,0x03ffb807,
    0x0027ffc0,0x3ffe60f3,0x3ee017c3,0x1fff99cf,0xfa8d7000,0x7dc6c85f,
    0x27fd403f,0x5ffdc000,0x0004fffc,0xccacffb8,0xffb801ac,0x01ffb003,
    0x3fffe600,0x3ffb8001,0xffa80990,0x2e01e604,0x7fc003ff,0x81e6003f,
    0x0be2fffa,0x7d47ff70,0x0d70006f,0x17c41fff,0xf500ffee,0xf700009f,
    0x13ffee7f,0x07ff7000,0x01ffdc00,0x8000ffd8,0x0effbbf8,0x81ffdc00,
    0x27fd4049,0x3fee0160,0x3ffe2003,0x3cc0fb21,0x7c3fff20,0x21ffdc02,
    0xb8004ffc,0x324ffb86,0x403ffb86,0x80004ffa,0x3fee3ffb,0x3ee0004f,
    0x3ee0003f,0x1ffb003f,0x7f4bd000,0x7fdc004f,0xff500a03,0xfb803809,
    0x3fea003f,0x20fff10f,0xeffd8079,0x7fdc02f8,0x002ffe83,0x7ffc435c,
    0xffb83f88,0x027fd403,0x21ffdc00,0x0004fffb,0x40007ff7,0xfb003ffb,
    0x46c8001f,0x2001fff9,0x20003ffb,0x80004ffa,0x32003ffb,0x837fc6ff,
    0xffe88079,0x7fdc02fd,0x00fff983,0x7fe41ae0,0x7ff707bb,0x004ffa80,
    0x0ffee0a2,0x0013ffee,0x8000ffee,0xfb003ffb,0x07dc001f,0x80077fe4,
    0x20003ffb,0x04004ffa,0x8801ffdc,0x01442fff,0x3fe200f3,0x7fdc02ff,
    0x00bff703,0xfff8835c,0x07ff704f,0x2004ffa8,0x03ffb81c,0x8009fff7,
    0x20003ffb,0xfb003ffb,0x0be6001f,0x7004ffe8,0x540007ff,0x0ae004ff,
    0x6c00ffee,0xfa8005ff,0x5fff5000,0x203ffb80,0xd7004ffd,0x807ffec0,
    0x7d403ffb,0x20d1004f,0x3ee03ffb,0x3ee004ff,0x3ee0003f,0x3ffb003f,
    0x9809f300,0xfb802fff,0x3ea0003f,0x20f3004f,0xfb803ffb,0x06f440ff,
    0x2e000fb8,0x7fe402ff,0x0bffe204,0xff981b60,0x00fff204,0xd300bff7,
    0x013fee09,0x001dfff9,0x40009ff9,0xfd004ffb,0x06f8803f,0x801fff90,
    0x20004ffc,0xe8804ffb,0x407ff904,0xc80dffd8,0x05fb03ff,0x2202fd80,
    0x2a00effe,0xd100cfff,0x80fec03f,0x2206ffe8,0xaaabfffd,0x82ffcbaa,
    0x4c06ffe8,0x202fffff,0x0006ffe8,0x300dffd1,0x7dc07fff,0xfff9005f,
    0x3ffa203d,0x3ff60006,0x9999999e,0xfe881ffb,0xca989adf,0x3ea02fff,
    0x3fff222f,0x0ba004ef,0x3fffff66,0xfff901cf,0x3ff663df,0x85983dff,
    0xffffffd9,0xffff931c,0xffffffff,0xffd98fff,0x641cefff,0xfffffffe,
    0x3ffff665,0xd9801cff,0x1cefffff,0x7ffffedc,0xfffd70ce,0x3f6a05df,
    0x31efffff,0x9dfffffb,0xffd93003,0xffffffff,0xfd98ffff,0xefffffff,
    0x98009bcd,0x11000001,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xfffffd00,
    0xffffffff,0x3f663fff,0xefffffff,0xfa800bce,0xffffffff,0x2e6fffff,
    0xdfffffff,0xfffffb00,0x3ffb223b,0x1703efff,0x00059000,0x00000000,
    0x0a8d5440,0x88666662,0x4c099999,0x33310999,0x33330133,0x10666661,
    0x88013333,0x02601aba,0x5555eff4,0xdbaabffe,0x7ff442ff,0xfea999ad,
    0x677d403f,0xcaaaaaaa,0x7e441fff,0xf8800fff,0x3ff201ef,0x0007c01f,
    0x000001ec,0x01da8ed4,0x97bb1000,0x7fdc1fff,0x3ffae4ff,0x77f5c3ef,
    0x5dfffd51,0x2e3bfd70,0x7ecc7ffd,0x37f202ff,0x7dc0dffd,0xfd03e80f,
    0x705f301f,0x7fd407ff,0x100b700e,0x7ec07ffd,0x1ff000ff,0x406ffa80,
    0x3d8000fb,0xd7100000,0x177ec49f,0x36172000,0x437fc40f,0x3ee07ff8,
    0x202ffe80,0x20ffb06c,0xde882ffb,0xfb1bfe60,0x7f40f03f,0xf707700f,
    0x4ffb807f,0xffb00590,0x3fff880b,0x9802fa80,0x3fea05ff,0x003d8000,
    0x1f7e4400,0x017df910,0x1f107f00,0xf701ff90,0x4c0f601f,0x40ba03ff,
    0x5ff307fc,0xff701f90,0x2c0ffe47,0x2201ffd0,0x403ffb83,0x01907ff8,
    0x800fffa8,0x7400fffa,0x0bff3004,0x2667ffea,0x0007b000,0x0077f6a0,
    0x00cfeb88,0x0320df50,0x3e20bfe6,0x200f883f,0x40d306fe,0x5ff107fc,
    0xff305f88,0x4003fdcd,0x5c000ffe,0xffe803ff,0x7fc40181,0x3ff6002f,
    0x4003ae05,0xffb85ff9,0x002fffff,0xeb80007b,0x540000cf,0x7c401dfe,
    0xfd0041ef,0x70dff10b,0x81ffa80b,0x41ff203c,0x77dc2ff8,0xffeeeeee,
    0x2001be67,0x5c000ffe,0x7fc403ff,0xffd8000f,0x7ffc4005,0x2002f882,
    0x3ee05ff9,0x03d8000f,0x0befc880,0x7e4c0000,0x3fffa02e,0x0ffb800c,
    0x3a17ff5c,0x445ff801,0x41ff200f,0x5fe42ff8,0x99999999,0x20017e21,
    0x5c000ffe,0x7fd403ff,0xeffb8005,0xfffa8000,0x26002ec0,0x3fee05ff,
    0x99999880,0x9999cd99,0x6fecc199,0x88000002,0x6c40cffc,0x4403ffff,
    0x7f47c3ff,0x7e401a65,0xf9016e0f,0xb0bfe20f,0x07f0007f,0x001ffd00,
    0x2a03ffb8,0x4c001fff,0x20001fff,0x03ea4ffd,0x40bff300,0xffa80ffb,
    0xffffffff,0x51ffffff,0x000007ff,0x203ff200,0x00dfffea,0xf75b9bf2,
    0x4400f21f,0x9007a3ff,0x0bfe20ff,0x5b0009fb,0x01ffd000,0xaadffb80,
    0x0dffdcaa,0x04ffe800,0x57ffc400,0xf98003f8,0x03fee05f,0x26666662,
    0x99999cd9,0x177ecc19,0xea800000,0x7fdc01cf,0x47fe604f,0x3e7ff11e,
    0x4dff6000,0x107fc806,0x0ffc85ff,0x0002a0c0,0x70003ffa,0xffdddfff,
    0x90003dff,0x20000dff,0x005deffb,0x5c0bff30,0x3d8000ff,0xbffc8800,
    0x5c400000,0x81a80bff,0x7f407fe8,0x577ec6ac,0x57fd4005,0x07fb803c,
    0xffb85ff1,0x00016203,0x20007ff4,0xea883ffb,0xf3002eff,0x400003ff,
    0x0001fffd,0x7dc0bff3,0x03d8000f,0x0e7f5c00,0x3bf26000,0xfb82d402,
    0x3bfee00f,0x017ffd42,0x007f7f40,0x7cc07fd4,0x17ffc42f,0xd00002c8,
    0xfb8001ff,0x7ffec03f,0x1fff4402,0x3fe60000,0x3fe60005,0x003fee05,
    0x40000f60,0x4002dfda,0x5001dfda,0x80df303f,0xfff06ff8,0x13fee000,
    0x2a1ffcc0,0xffc84ffe,0x06da8acf,0x03ffa000,0x007ff700,0xfc80fffd,
    0x8800005f,0x260005ff,0x3fee05ff,0x003d8000,0x5f7e4c00,0x19fd7100,
    0x41efa800,0x3fd802fc,0x20009f90,0x3a001ff8,0xf9decdff,0x3fa23cff,
    0x02ffffff,0x03ffa000,0x007ff700,0x2a03fff7,0x00000fff,0x0005ff88,
    0xfb817fe6,0x03d8000f,0xff710000,0x0bbf2219,0xeffea800,0xf5001dec,
    0x0000fc40,0xff9800d9,0x39ff14ff,0x3bffff20,0x7f400001,0x7fdc000f,
    0x1fff9803,0x002fff88,0x7fc40031,0x3fe60005,0x003fea05,0x00000f60,
    0x0ed47aa0,0x53104000,0x28030001,0x000c4000,0x02a20a98,0x0000d4c0,
    0x000ffe80,0x5c01ffdc,0xbffb07ff,0x1000dc00,0x4c000bff,0x3fe605ff,
    0x0b200512,0x00000000,0x00000000,0x00000000,0x00000000,0x0ffe8000,
    0x01ffdc00,0x7dc27fec,0x01a000ff,0x000bff30,0xf102ffcc,0x0000b9ff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x0fffc000,0x00fff200,
    0xf881dff9,0x1b6001ff,0x00dff500,0x2037fcc0,0x0001dffa,0x00000000,
    0x00000000,0x00000000,0x00000000,0xfff30000,0x7ff44007,0xeb9899ad,
    0xbffd05ff,0x33333333,0x800bffb5,0x0000fffc,0x1001fff9,0x00000000,
    0x00000000,0x00000000,0x00000000,0x20000000,0xefffffeb,0x3fff6604,
    0xefffffff,0xfff702ce,0xffffffff,0x007fffff,0xffffff91,0xff91007b,
    0x007bffff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x22000000,0xba8802b9,0x5dc4001a,0x4cccc401,0x09999999,
    0x886a0b88,0x22199999,0x0e200999,0x71001571,0x98055c41,0x026c001b,
    0x10300180,0x33326003,0xcccccccc,0x2e0ccccc,0x035100bb,0x333330c0,
    0x00001333,0xd9df7000,0x7bfb01bf,0xeb805ffd,0x502ffdbd,0xffffffff,
    0x7ed45fff,0x32fff98f,0x5c9ffffb,0xfda83eff,0x1ffffb0f,0x643ff6a0,
    0x3e63ffff,0xf3006fff,0x1f98001f,0x3fe37e40,0xc9837f23,0xcccccccc,
    0x0ccccccc,0xf910ffea,0x58019fff,0x3ffffff6,0x0000001f,0x17fa176c,
    0x0ffc87f7,0xff985f70,0xf501ea84,0x7ffe5cbf,0x5c4ffdd9,0x07740fff,
    0x6c7ffe5c,0xa86ffdbd,0xacd9ffec,0xbe98fffc,0x4104ffeb,0x740047f8,
    0x87ff405f,0xfff15ff9,0xb800000b,0x4c4edc6f,0x540adffc,0x3fffff63,
    0x000001ff,0x3ee0bee0,0x883ff12f,0x04fa83ff,0x03a85ff7,0xf901dff1,
    0x202e61df,0x03ee4ffc,0xb83dff90,0xbff701ff,0x84eff983,0x0efc87fd,
    0x80bfe2bd,0x3a02f8eb,0xf93fe67f,0x00000fff,0x40b07e40,0xeecdffda,
    0x44444440,0x20000000,0x3fd106f8,0x3fe03fe2,0xf101ff83,0xfd01a8df,
    0x0bfee03f,0xf89ffe80,0x80ffb801,0xff502ffa,0x5c17fe03,0x77fd40ff,
    0x1fff9cc8,0x81ae5f10,0x127fc6fd,0x00001f15,0x00e25b00,0x000b76e2,
    0xb8000000,0x40cc005f,0x7fcc3ff8,0x00bff200,0xfb80fff2,0x3fe6000f,
    0xff7003ee,0x207ff101,0xbfd00ffa,0x2a07fe60,0xcefcdfec,0x09d17601,
    0x05fd13ee,0x66664cb3,0xcccccccc,0x7100cccc,0x00000000,0x7ec00000,
    0x6ed40004,0x03fdc3ff,0xf500ffee,0x0ffa80bf,0x037fdc00,0x3e01ff70,
    0x01ff503f,0x7fcc17f6,0x017fdc02,0x03e607cc,0x03fb0fea,0x66664c59,
    0xcccccccc,0x0000cccc,0x00000000,0x0dfd0000,0x7c73ee00,0x203fec3f,
    0x3e204ffa,0x7fd400ef,0x0ffe8000,0x201ff700,0x1ff503ff,0x7cc17f60,
    0xcefda82f,0x7d01cefc,0x07e21760,0x000b90f7,0x00000000,0x00000000,
    0x0007ff40,0x3ff83fd1,0xf3007ff4,0x0fff407f,0x0007fd40,0x401bffe2,
    0x7ff00ffb,0x6c03fea0,0x85ff305f,0x8bc8dffb,0x035c1ffe,0xa81f05f1,
    0x0000f626,0x00000000,0x00000000,0x1805ffb0,0x7ff03fd1,0x2601ffd8,
    0x7ff901ff,0x003fea00,0x07ff57b0,0x3e01ff70,0x01ff503f,0x7fcc17f6,
    0x2bf2fdc2,0x0be22fe8,0x51070d70,0x00000000,0x00000000,0xf9000000,
    0xfcac409f,0xfb87ff06,0x41fea03f,0x81105ffa,0x32000ffa,0x7007ff65,
    0x0ffe01ff,0xfd807fd4,0x105ff305,0xbb023fc4,0x0000fa00,0x00000000,
    0x00000000,0xff980000,0x3f65b01f,0xf889ff06,0x217ee06f,0x3500eff8,
    0x5000ffa8,0x037fc41f,0x7fc03fee,0x201ff503,0x5ff305fd,0x300ff980,
    0x0366001d,0x00000000,0x00000000,0x80000000,0xb88afffc,0x88bff26e,
    0x7dc74ffd,0xd01dd03f,0x20e403ff,0xf8801ffb,0x204ffa81,0xff880ffc,
    0x203ff704,0x5ff306fe,0x00009900,0x00000000,0x00000000,0x00000000,
    0xffffe880,0x3fe60fff,0xffeaeddf,0x317fe43d,0x7ff901fb,0xf903ee60,
    0x06e8807f,0x7ec0fffe,0x05ff982f,0xff105ff9,0x013fee0f,0x00000000,
    0x00000000,0x00000000,0xb0000000,0x701bffff,0x3ee1bffd,0xbfff703f,
    0xfff303bf,0xffffffff,0x3fffaa1f,0xfff982df,0x3fff620d,0xfffd51ef,
    0xfffb339f,0x3ff665bf,0xffd91dff,0x3ff6a9df,0x00001dff,0x00000000,
    0x00000000,0x00000000,0x2a620000,0x00809800,0x00003510,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_35_usascii_x[95]={ 0,3,2,0,1,1,1,1,1,0,2,0,1,1,
2,0,1,3,0,1,0,1,1,1,1,1,2,2,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,
0,0,-1,1,0,1,0,1,0,0,0,0,0,0,0,2,0,1,0,-1,1,1,-1,1,1,1,1,0,0,0,
-3,0,0,0,0,1,-1,1,0,1,0,0,0,0,0,0,0,4,2,2,0, };
static signed short stb__times_35_usascii_y[95]={ 28,6,6,6,5,6,6,6,6,6,6,9,24,19,
25,6,6,6,6,6,6,7,6,7,6,6,13,13,9,14,9,6,6,6,7,6,7,7,7,6,7,7,7,7,
7,7,7,6,7,6,7,6,7,7,7,7,7,7,7,6,6,6,6,33,6,13,6,13,6,13,6,13,6,6,
6,6,6,13,13,13,13,13,13,13,9,13,13,13,13,13,13,6,6,6,17, };
static unsigned short stb__times_35_usascii_w[95]={ 0,5,9,16,14,25,23,4,9,10,12,18,6,9,
4,9,14,9,15,13,15,13,14,14,13,14,5,5,18,18,18,12,28,23,20,19,22,19,17,22,23,10,13,24,
19,28,24,21,17,21,22,15,19,23,23,30,23,23,19,8,9,7,15,18,6,13,16,12,15,13,13,16,16,9,
10,16,9,25,16,14,16,15,11,11,9,16,16,23,16,16,14,9,2,10,18, };
static unsigned short stb__times_35_usascii_h[95]={ 0,23,10,23,26,23,23,10,29,29,13,17,10,4,
4,23,23,22,22,23,22,22,23,22,23,23,16,21,17,7,17,23,29,22,21,23,21,21,21,23,21,21,22,21,
21,21,22,23,21,29,21,23,21,22,22,22,21,21,21,29,23,29,12,2,6,16,23,16,23,16,22,22,22,22,
29,22,22,15,15,16,22,22,15,16,20,16,16,16,15,22,15,29,29,29,5, };
static unsigned short stb__times_35_usascii_s[95]={ 159,162,159,200,125,217,1,248,36,1,130,
107,169,221,250,137,163,184,209,39,225,241,168,194,25,112,250,247,126,176,145,
243,65,209,21,92,227,207,189,69,141,86,233,98,78,49,1,140,123,94,26,
53,1,133,109,78,165,62,42,116,127,57,143,140,195,14,183,1,147,234,178,
192,1,18,46,157,174,104,87,28,61,28,58,164,97,217,200,176,70,44,43,
26,23,12,202, };
static unsigned short stb__times_35_usascii_t[95]={ 25,1,123,1,1,1,31,101,1,1,123,
101,123,123,95,31,31,55,31,31,31,31,1,55,31,31,78,55,101,123,101,
1,1,55,101,31,78,78,78,31,78,101,55,78,78,78,78,1,78,1,78,
31,101,55,55,55,78,101,101,1,31,1,123,25,123,123,1,123,31,101,31,
31,55,55,1,55,55,123,123,123,55,55,123,101,101,101,101,101,123,55,123,
1,1,1,123, };
static unsigned short stb__times_35_usascii_a[95]={ 126,168,206,253,253,421,393,91,
168,168,253,285,126,168,126,140,253,253,253,253,253,253,253,253,
253,253,140,140,285,285,285,224,466,365,337,337,365,309,281,365,
365,168,197,365,309,450,365,365,281,365,337,281,309,365,365,477,
365,365,309,168,140,168,237,253,168,224,253,224,253,224,168,253,
253,140,140,253,140,393,253,253,253,253,168,197,140,253,253,365,
253,253,224,243,101,243,274, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_35_usascii_BITMAP_HEIGHT or STB_FONT_times_35_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_35_usascii(stb_fontchar font[STB_FONT_times_35_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_35_usascii_BITMAP_HEIGHT][STB_FONT_times_35_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_35_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_35_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_35_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_35_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_35_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_35_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_35_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_35_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_35_usascii_s[i] + stb__times_35_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_35_usascii_t[i] + stb__times_35_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_35_usascii_x[i];
            font[i].y0 = stb__times_35_usascii_y[i];
            font[i].x1 = stb__times_35_usascii_x[i] + stb__times_35_usascii_w[i];
            font[i].y1 = stb__times_35_usascii_y[i] + stb__times_35_usascii_h[i];
            font[i].advance_int = (stb__times_35_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_35_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_35_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_35_usascii_s[i] + stb__times_35_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_35_usascii_t[i] + stb__times_35_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_35_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_35_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_35_usascii_x[i] + stb__times_35_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_35_usascii_y[i] + stb__times_35_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_35_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_35_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_35_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_35_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_35_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_35_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_35_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_35_usascii_LINE_SPACING
#endif

