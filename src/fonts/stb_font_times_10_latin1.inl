// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_10_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_10_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_10_latin1_BITMAP_WIDTH         256
#define STB_FONT_times_10_latin1_BITMAP_HEIGHT         44
#define STB_FONT_times_10_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_times_10_latin1_FIRST_CHAR            32
#define STB_FONT_times_10_latin1_NUM_CHARS            224

#define STB_FONT_times_10_latin1_LINE_SPACING           6

static unsigned int stb__times_10_latin1_pixels[]={
    0x040102d4,0x3009b800,0x01305807,0xa810310b,0x04c00008,0x00000000,
    0x03660137,0x02a80c54,0x02202201,0x10602202,0x80640020,0x90100880,
    0x08200071,0x202b8084,0x80a9aa84,0x880600b8,0x0440b980,0x130a0dc4,
    0x20441881,0x3550311a,0x060a8314,0x51077355,0x89804201,0x05d40601,
    0x710aa0e2,0x54388970,0x20d24642,0x38819500,0x54540090,0xa8e2942b,
    0x01540a9a,0x2a244b10,0x43aa0a9a,0x221d50d8,0x9aa8530d,0xa820d40a,
    0x0e1c0a9a,0x46418447,0x314c1960,0x26a8a24c,0x221d50d8,0x3621d50d,
    0x102a6aa0,0x83301037,0x10081100,0xfa9a59c4,0x04441930,0x52e04404,
    0x12dc910b,0x2c421737,0x24cca893,0xd0ee174b,0x2c4932c4,0x5314588a,
    0x1a8932c4,0x8932c526,0xb8c4532a,0x20da8358,0x70c35064,0x88a5d805,
    0x228b1145,0xaa892658,0xa9962ae6,0x4cb1570c,0x219530ca,0x57730ca9,
    0x2214ee24,0x8eae23ab,0x22ac3ab8,0x5c43a52b,0xd0ee50b9,0x2ac1b2a8,
    0x21dcd0f2,0x2c451626,0xd0ee298a,0x43ba41a8,0x4a1ba4c6,0x8998691a,
    0x0540c334,0x4f2a015c,0x2c451622,0x17343b8a,0x22594c3a,0x896531c9,
    0x239311c9,0x96731c98,0x86419e82,0x643a190e,0x706541d0,0x9b89a135,
    0x8d0ee90b,0x20ca892a,0x43b96659,0x28b0a2c6,0x2343b8a6,0x343ba41a,
    0x5250dce6,0x236218aa,0x8a20c512,0xb2811260,0x16145855,0x1b9a1dc5,
    0x26a59ccb,0x9a96731a,0x2a35351a,0x432731a9,0xb2b85980,0x2cae595c,
    0x1c476224,0x45613755,0x53951265,0x17377090,0x468932c4,0x2298a342,
    0x83512658,0x2a24cb14,0x55c4c530,0x074419b9,0x418aa0cb,0x89409aa9,
    0x8d0a343e,0x22499622,0x3ab6229c,0x36279970,0x279970ea,0x79973ccb,
    0x9848b2ea,0x222ac884,0x0ab222ac,0xa9ac8831,0xaa9614a0,0x881540a9,
    0x5505d101,0xb9ba8153,0x305cdd40,0x40a9aa85,0x53551c1a,0x20a1c381,
    0x4914d408,0x710314c1,0x2a1c4930,0x4dd40b9b,0x054d540b,0x00000000,
    0x03ae0000,0x01dc0000,0x20000840,0xa803b84b,0x08010001,0x93001c98,
    0x04002aa3,0x26666044,0x184c1980,0x0062060c,0x00080100,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x18080404,0x0001df5c,
    0x83623130,0x2888910c,0x40aa0590,0x03100005,0x09b80c54,0x20580b50,
    0x0040002a,0x08041002,0x00000000,0x00830020,0x40ca8000,0x0e225c29,
    0x9c9855ff,0x054d543b,0x810c2313,0x1840c441,0x5c044010,0x5032ae29,
    0x88044c05,0x2011100b,0x9b80c008,0x22189261,0x22488664,0x477510a1,
    0x55c0a3aa,0x40999981,0x16409999,0x710c4130,0x13b9aa83,0x08084555,
    0xfb010444,0x8862cc55,0x11f89265,0x7c47e23f,0x4c955f31,0x2be64aaf,
    0x92abe64a,0x044ea939,0x20388122,0x880e2038,0x4aa0e203,0x23828644,
    0xa850a382,0x09a5209a,0x4c419c88,0x31109aad,0x81541391,0x3090a4bb,
    0x5d237289,0x4ae6258a,0x57312b98,0x98ee2a98,0x34687709,0x13468d1a,
    0x204d0268,0x2219b026,0x206a80ce,0xa81aa06a,0x6a81aa06,0x454cb1c8,
    0x9a40a902,0x87b10c40,0x3e018baa,0x27230c8a,0x4306a633,0x2aa64cba,
    0x22bca8a0,0x4d65702b,0xb8ccdcb2,0x03337199,0x4b11dc55,0x8d1a343b,
    0x06a7a346,0xa9e8353d,0x2a0d4f41,0x2a075c3d,0x2057502b,0x057502ba,
    0x15d40aea,0x31086c72,0x17331032,0x41419188,0x88ee503d,0x6c619dab,
    0x306a630c,0x1950d954,0x4d1b8621,0x2b39102b,0x708dcb39,0xa808dc23,
    0x22589662,0x468d1265,0x20c5a346,0x83168316,0x358d4316,0x0d7751d4,
    0x7750d775,0x50d7750d,0xd7750d77,0x2650b2a8,0x2815140a,0x26114173,
    0x0ba98985,0xb3313657,0x2e261391,0x24aa0989,0x4a61473a,0x2a811264,
    0x3a21d5b1,0x2239d11c,0x4c2a81ce,0x4d543a99,0x8d1a340a,0x04682346,
    0x2211a08d,0x1737529b,0x32283914,0x22839141,0x2839141c,0xa8555072,
    0x53145950,0x22ca84c1,0x88575518,0x5ed49711,0x26661cda,0x0ccccc19,
    0x2830a726,0x554c29b8,0x0000a609,0x0102a800,0x3e63f300,0x47e63f31,
    0x3e64aaf9,0x2abe64aa,0x012abe64,0x0db8ea04,0x3a86dc75,0xb71d436e,
    0x50db8ea1,0x04006dc7,0x104c4102,0x040c0808,0x00000002,0x00008080,
    0x00000008,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00800000,0x81100000,0xb88011ac,0x30036e0b,
    0x05e44dbb,0x0824ea81,0x3aa08040,0x43ea1b10,0x801020d8,0x2a020200,
    0x00325b8e,0x020429c8,0x0a720e5c,0x400644d5,0x640041cb,0x54c00029,
    0xd106e664,0xb3886e44,0xdc895d44,0x8a200cc1,0xb8498049,0x2a083822,
    0x4b920e0c,0x836ae217,0xd851638a,0x8a1cc310,0xb8b35138,0x340ae4cb,
    0x041c414d,0x080ea498,0x54526c00,0x26040bab,0x40aea239,0x73510ca9,
    0x98a849c4,0x711a8584,0x44210b96,0x8ae62044,0x41953240,0x4415c449,
    0x08432a62,0x56043b71,0x21624e62,0x21526145,0xb0a800ca,0x2a61b298,
    0x99d8ab80,0x8ab86a80,0x88273245,0x0e6a239a,0x0c514f2a,0x06549597,
    0x3124c217,0x4c2c2e39,0x510b80ae,0x522488d3,0x0a6046e5,0x93199b85,
    0x98726248,0x21414d44,0x10931c98,0x81751269,0xb076209b,0x29856828,
    0x458e4126,0x2564c929,0x40b26b22,0x4594c2ba,0x0b8a6e64,0xb28585cb,
    0x94c31453,0x11b96625,0x2e353524,0x22816091,0x22950b1b,0x19b11dae,
    0x46e1cc28,0x54d49120,0x3b9a8e61,0x90d4d438,0x4c5848e0,0x2342c3cd,
    0x14c0cb82,0xb5b34992,0x4a629c98,0x505d2d85,0x8b298b55,0x2370b664,
    0x894246e4,0x42eaea3e,0x11cdcb29,0x7972419b,0x388a7227,0xb1c81049,
    0x2880cce0,0x4e26e054,0x49120ce8,0x41793bcb,0x0a20ccaa,0x75247797,
    0x50622415,0x542c1311,0x10b1039b,0x160a241b,0x21653053,0x6450170a,
    0x483ab621,0x9c8836e6,0x930a7222,0x465401c4,0x02cc000e,0x51372a00,
    0xa8756c43,0x2203309a,0xb89336e1,0xd9966009,0x00530000,0x4b301660,
    0x21aca83b,0x000100e8,0x6c404b30,0x232a0ee0,0x71d4000e,0x2a59801b,
    0x00000d9c,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x41040400,0xb9810000,0x4c3ea6ba,0x0ea7d30c,0x7cc04101,0x0dded5c0,
    0x98dd6744,0xe9801cae,0x975d30ca,0x3e6194b8,0x0fcc7e20,0x00ec47cc,
    0x90f98fcc,0x98444449,0x55f33aae,0x825d74c7,0x775d3000,0x40010400,
    0x83000000,0x572abcaa,0x104c4cb1,0x81b04b37,0x0ab1052b,0x45dc2e95,
    0x11574175,0x1d4c0432,0xb988b368,0x54d255a2,0x51ec2ac5,0x81da068d,
    0x75346852,0x68268204,0x0c2d4d02,0x0d9a1a88,0xdaca8153,0x495970da,
    0x21732b98,0x3214c3bb,0x3109b988,0x2ca63379,0x1b337252,0x033b03b8,
    0xa41ac16a,0xc8776835,0x0e726a00,0x99b8591d,0xae9965a1,0x540bb8f1,
    0x740d1aa6,0x42aaa80c,0x11dccf46,0x3d0eba08,0x313c6835,0x206a6137,
    0x1a984a9e,0x29955673,0x98a1cc8b,0x44e09a82,0x573509b9,0x4a4594c2,
    0x0b3122f2,0x03b302cc,0xb9ac8177,0x0643bb40,0xe833ba98,0x7411b84a,
    0xaa9a3409,0x4aaea0ad,0x079d0346,0x74685353,0x41023b88,0x418b418e,
    0x13731346,0x263a06a6,0x398d4c0d,0x2594caab,0x23752b98,0x20451429,
    0x86755dc1,0x3130ead8,0x3614e4c1,0x26091020,0x98488589,0x9075d092,
    0x411cca01,0x0ce88596,0x5493341a,0x96ca0ada,0x79682346,0x268d0a50,
    0x8341023a,0x424cd046,0x93455101,0x19502a65,0x232a771d,0x4a82040e,
    0x15555400,0xc8040000,0x0da84aad,0x001bb2cc,0xd880f980,0x75b71c82,
    0x016c3e65,0x55d303e6,0x260da815,0x263f1174,0x43a64aaf,0x87c400ce,
    0x44c990f9,0x881d3188,0x2ba64aaf,0x2600102a,0x0000caae,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x20000000,0x80008810,0x00263002,0x09d40200,0x4d5cc6a6,
    0x54ca6311,0x267171aa,0x2aaa3aaa,0x06aaaa1a,0x00000000,0x00000000,
    0x00000000,0x00000000,0x29e98000,0x224cee6a,0x98266624,0x5530d4c4,
    0x25aa94d4,0x42e50e38,0x062081a9,0x400aaaaa,0x00000001,0x00000000,
    0x00000000,0x00000000,0x00000000,0xb8b10770,0x099988e0,0x943530ea,
    0x44999d22,0x000208a0,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xda800000,0x413306c0,0x10aa8284,0x221a8263,0x00000441,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x50000000,
    0x272e1b33,0x00001012,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__times_10_latin1_x[224]={ 0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,
-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,
0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,
 };
static signed short stb__times_10_latin1_y[224]={ 8,1,1,1,1,1,1,1,1,1,1,2,7,5,
7,1,1,1,1,1,1,2,1,2,1,1,3,3,2,4,2,1,1,1,2,1,2,2,2,1,2,2,2,2,
2,2,2,1,2,1,2,1,2,2,2,2,2,2,2,1,1,1,1,9,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,2,3,3,3,3,3,3,1,1,1,5,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,3,2,1,2,2,
1,1,2,1,1,3,4,5,1,1,1,2,1,1,1,3,2,4,7,1,1,3,1,1,1,3,0,0,0,0,
0,0,2,1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,3,1,0,0,0,0,0,2,1,1,1,
1,2,2,1,3,3,1,1,1,2,1,1,1,2,1,2,1,1,1,2,2,3,3,1,1,1,2,1,1,2,
 };
static unsigned short stb__times_10_latin1_w[224]={ 0,2,4,5,5,8,7,2,3,3,4,5,2,3,
2,3,5,3,5,4,5,4,5,5,4,5,2,2,5,5,5,4,9,7,6,6,7,6,5,7,7,3,4,7,
6,8,8,7,5,7,7,5,6,7,7,9,7,7,6,3,3,3,5,6,2,4,6,4,5,4,4,5,5,3,
3,5,3,7,5,5,6,5,4,4,3,5,5,7,5,5,4,3,2,4,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,2,4,5,5,5,
2,4,3,7,4,5,5,3,7,6,4,5,3,3,2,5,6,2,3,3,3,5,7,7,7,4,7,7,7,7,
7,7,9,6,6,6,6,6,3,3,3,3,7,8,7,7,7,7,7,5,7,7,7,7,7,7,5,5,4,4,
4,4,4,4,6,4,4,4,4,4,3,3,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,
 };
static unsigned short stb__times_10_latin1_h[224]={ 0,8,4,8,8,8,8,4,9,9,5,6,3,2,
2,8,8,7,7,8,7,7,8,7,8,8,6,7,6,2,6,8,9,7,6,8,6,6,6,8,6,6,7,6,
6,6,7,8,6,9,6,8,6,7,7,7,6,6,6,9,8,9,5,1,3,6,8,6,8,6,7,7,7,7,
9,7,7,5,5,6,7,7,5,6,7,6,6,6,5,7,5,9,9,9,2,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,7,8,8,6,6,
9,9,2,8,4,6,2,2,8,1,4,6,5,5,3,7,8,2,3,5,4,6,8,8,8,7,8,8,8,8,
8,8,6,9,8,8,8,8,8,8,8,8,6,9,9,9,9,9,9,4,8,9,9,9,9,8,6,8,8,8,
8,7,7,8,6,7,8,8,8,7,7,7,7,6,8,6,8,8,8,7,7,4,6,8,8,8,7,9,9,8,
 };
static unsigned short stb__times_10_latin1_s[224]={ 253,204,46,247,182,188,197,253,86,82,233,
194,58,64,77,233,148,54,34,18,68,89,237,74,89,250,253,139,200,80,213,
7,90,171,206,243,186,179,173,29,159,155,63,141,134,125,207,37,105,22,92,
94,75,115,123,161,47,39,32,54,178,66,247,103,51,242,221,233,12,100,110,
104,155,135,70,189,185,219,227,247,148,142,242,228,131,14,55,61,1,98,7,
105,109,112,68,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,
167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,253,253,228,
1,216,119,117,100,86,213,26,149,90,64,205,96,37,1,238,12,61,23,22,
74,54,16,42,20,170,162,154,40,140,132,124,116,108,100,82,120,82,75,68,
61,57,53,49,45,111,127,152,58,1,30,74,31,239,38,46,136,144,207,69,
198,193,188,183,80,58,172,7,29,7,17,12,45,50,94,85,238,160,222,221,
227,215,195,201,20,26,166,177,1,179,16,9,233, };
static unsigned short stb__times_10_latin1_t[224]={ 9,1,36,1,11,11,11,29,1,1,29,
29,36,36,36,11,11,20,20,20,20,20,11,20,11,11,20,20,29,36,29,
20,1,20,29,11,29,29,29,11,29,29,20,29,29,29,20,11,29,1,29,
11,29,20,20,20,29,29,29,1,11,1,29,36,36,20,11,20,20,29,20,
20,20,20,1,20,20,29,29,20,20,20,29,20,20,29,29,29,36,20,36,
1,1,1,36,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,9,1,11,
20,20,29,1,1,36,11,36,29,36,36,11,36,36,29,29,36,36,20,11,
36,36,36,36,29,11,11,11,20,11,11,11,11,11,11,29,1,11,11,11,
11,11,11,11,11,29,1,1,1,1,1,1,36,1,1,1,1,1,1,29,
1,1,1,1,20,20,1,29,20,11,11,11,20,20,20,20,20,1,20,1,
1,1,20,20,36,29,1,1,11,20,1,1,1, };
static unsigned short stb__times_10_latin1_a[224]={ 36,48,59,72,72,120,112,26,
48,48,72,81,36,48,36,40,72,72,72,72,72,72,72,72,
72,72,40,40,81,81,81,64,133,104,96,96,104,88,80,104,
104,48,56,104,88,128,104,104,80,104,96,80,88,104,104,136,
104,104,88,48,40,48,68,72,48,64,72,64,72,64,48,72,
72,40,40,72,40,112,72,72,72,72,48,56,40,72,72,104,
72,72,64,69,29,69,78,112,112,112,112,112,112,112,112,112,
112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,
112,112,112,112,112,112,112,112,36,48,72,72,72,72,29,72,
48,110,40,72,81,48,110,72,58,79,43,43,48,83,65,36,
48,43,45,72,108,108,108,64,104,104,104,104,104,104,128,96,
88,88,88,88,48,48,48,48,104,104,104,104,104,104,104,81,
104,104,104,104,104,104,80,72,64,64,64,64,64,64,96,64,
64,64,64,64,40,40,40,40,72,72,72,72,72,72,72,79,
72,72,72,72,72,72,72,72, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_10_latin1_BITMAP_HEIGHT or STB_FONT_times_10_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_10_latin1(stb_fontchar font[STB_FONT_times_10_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_times_10_latin1_BITMAP_HEIGHT][STB_FONT_times_10_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_10_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_10_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_10_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_10_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_10_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_10_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_10_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__times_10_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__times_10_latin1_s[i] + stb__times_10_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__times_10_latin1_t[i] + stb__times_10_latin1_h[i]) * recip_height;
            font[i].x0 = stb__times_10_latin1_x[i];
            font[i].y0 = stb__times_10_latin1_y[i];
            font[i].x1 = stb__times_10_latin1_x[i] + stb__times_10_latin1_w[i];
            font[i].y1 = stb__times_10_latin1_y[i] + stb__times_10_latin1_h[i];
            font[i].advance_int = (stb__times_10_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__times_10_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_10_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_10_latin1_s[i] + stb__times_10_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_10_latin1_t[i] + stb__times_10_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_10_latin1_x[i] - 0.5f;
            font[i].y0f = stb__times_10_latin1_y[i] - 0.5f;
            font[i].x1f = stb__times_10_latin1_x[i] + stb__times_10_latin1_w[i] + 0.5f;
            font[i].y1f = stb__times_10_latin1_y[i] + stb__times_10_latin1_h[i] + 0.5f;
            font[i].advance = stb__times_10_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_10_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_10_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_10_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_10_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_10_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_10_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_10_latin1_LINE_SPACING
#endif

