// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_15_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_15_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_15_latin1_BITMAP_WIDTH         256
#define STB_FONT_times_bold_15_latin1_BITMAP_HEIGHT         78
#define STB_FONT_times_bold_15_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_bold_15_latin1_FIRST_CHAR            32
#define STB_FONT_times_bold_15_latin1_NUM_CHARS            224

#define STB_FONT_times_bold_15_latin1_LINE_SPACING          10

static unsigned int stb__times_bold_15_latin1_pixels[]={
    0x00000000,0x00000000,0x88260000,0x4c000009,0xab880172,0x00100018,
    0x80100000,0x00021000,0x80000802,0x00000000,0xfb802f40,0x800fdc01,
    0x3f9802fd,0x5403fa00,0x1d703e8f,0xf98037cc,0x0fcf6c02,0x003ff6e0,
    0x06d64c15,0x3e402744,0x3a60fdc0,0xd980cfbe,0x20df10d1,0x6e5f6c46,
    0x64427c05,0x70076403,0x40bd109f,0x00760059,0x56cc01dc,0x200b3006,
    0x29304bcb,0xdf01b01b,0x0000b200,0x06c00420,0x6881ecba,0xd9805900,
    0x6e893ea0,0x2f61a3e8,0x1ba2683c,0x102d40f1,0x1007403f,0x1d101d5d,
    0x00100020,0x02218008,0x06180040,0x42622662,0x20988998,0x020098ef,
    0x136fb660,0x04dbed98,0x013dd0b7,0x30020008,0x320ffc43,0x30d2744f,
    0x03fd340c,0x3e600407,0x21300201,0xdb301008,0xdfb309b7,0x6cc37663,
    0x81bb31ef,0x204dbed9,0x984dbed9,0x1bb31efd,0xf50d9bea,0xbbdf06cd,
    0xa806a01f,0x2a1ba24f,0x361ba24f,0x4c2ff983,0x05fccefd,0x23fb006a,
    0x37dc0ff9,0x03506976,0x2007fc5a,0x3ae0dffa,0xfd983ea1,0x3665fcce,
    0x265fccef,0x49f51efd,0x44fb86e8,0x2627dc19,0xdd127d41,0x37449f50,
    0xb06627dc,0x21fb0e1f,0x05f9b7c3,0x07fe20bd,0x0ffc49f9,0x83f893f2,
    0x7dc3fd9d,0x80bd02c5,0x50ff51fc,0x41a3d8ff,0x1fea705e,0x06e37dc0,
    0x45fb81f1,0x7162fdc5,0x907fe2bf,0x4c4fb89f,0x86627dc1,0x27e41ff8,
    0x4fc83ff1,0x506627dc,0xcfa8139f,0x6f8b7c09,0xf980ff98,0xf337dc0f,
    0x2a6fb81f,0x8f934c2f,0x4c0655fb,0x47f200ff,0x25fb87f8,0x7fcc342b,
    0x801fe600,0x64c0e2fe,0x41957ee0,0xf70655fb,0xf703fe6b,0x0cc4fb8d,
    0x4c3313ee,0x337dc0ff,0x46fb81ff,0x740cc4fb,0xf07fd03f,0x32e1be2d,
    0xa87fa84f,0x2a1fea7f,0xf10be67f,0x237ee3c9,0x027e5c05,0x207f43f9,
    0x683622fd,0x7c04fcb8,0x2df5001f,0xfb87900b,0x1bf7058d,0x7d57ee0b,
    0x7dc7fa87,0x13ee0cc4,0x543fd433,0x2a1fea7f,0x2627dc7f,0xf702fb81,
    0x13e6df05,0x881ff351,0x225fb87f,0x7c5fb87f,0x42befb83,0x2206eefb,
    0xf900ff9a,0x1be1fd43,0x4d446932,0xbf5340ff,0x0b3fa090,0x777dc3cc,
    0x0dddf706,0x43fc57ee,0x227dc5fb,0x2627dc19,0x3ee1fe21,0x3ee1fe25,
    0x06627dc5,0x07c403e2,0x2076ef7c,0x3f60ff63,0x3f617e40,0x13217e40,
    0x3ee07fd4,0x7fb1c095,0xbb107f20,0x697607d7,0x4687fb1c,0x00ccbed9,
    0x07d40ff5,0xfb8257ee,0xd97ee095,0x2a17e40f,0x3ea0545f,0x03f60545,
    0x40fd85f9,0x22fd42fc,0x0380700a,0x2b2202df,0x3fa86fca,0x8fea1ba2,
    0x986986e8,0xafdc4e88,0x55644311,0x03f706fc,0x24e817ee,0x3f2ab226,
    0x80688346,0x07e607f9,0x70c46bf7,0xf70c46bf,0xdd11fd4b,0x9848df30,
    0x1fd4246f,0x47f50dd1,0x46f986e8,0x5c04edc4,0x40df009d,0x4c17f40c,
    0x300cdade,0x2019b5bd,0x44ba6c29,0x190e45fb,0x2f262fe8,0x273f200f,
    0x064d2640,0xf1068bfa,0x207f9801,0x22fdc0e9,0x3917ee1c,0x37a62fdc,
    0xbf500cda,0x37ea0377,0x5bd301bb,0x37a6019b,0xbf500cda,0x02e98377,
    0x3fea05d3,0x3a62fa82,0x000201ff,0xb8822001,0x5ffec44b,0x45f50fec,
    0x9911ffe9,0x01551005,0x317d5a57,0x541a3ffd,0x57fe4401,0x36205c40,
    0x10fecbff,0x1fd97ffb,0x0407bf62,0x00400100,0x00100020,0x00000004,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00400000,0x80018b98,0x2fc8298b,0x8676ff5c,0x17303538,
    0x201fb103,0x1b9c4009,0x400a62e0,0x26020403,0x4009880a,0x0c401100,
    0x01a80260,0x08000000,0x00988040,0x20fb8026,0x577104fa,0xffd80795,
    0x5f100984,0xfc8d90d9,0x3ea0c9ff,0x4ffd84e8,0x77301f50,0x1fc7dc01,
    0x806caf88,0xcbdd9819,0x84fe81bb,0x77b304e8,0x204e80b0,0x1ff700eb,
    0xb859df30,0x4fcc2f8e,0x4dae985d,0x22166d4c,0x405f303e,0x20f5741e,
    0x10071049,0xc8000e40,0x64ffff46,0x54010000,0x00bb980f,0x49800000,
    0x1ba24f98,0x2c4064ee,0x320facd8,0x1b016201,0x20ea3620,0x93984c9a,
    0x82a8c881,0x3e25f56d,0x20b10d48,0x8220402b,0x13131661,0x32ff5455,
    0xb33cc1bb,0x437663df,0x4ffff46c,0x07bf660c,0x01f500d4,0x77ecc0ae,
    0x06a05fcc,0x7c3fad88,0x413fa60f,0xf0151009,0x01263f39,0x31988151,
    0x998cc413,0x5100a880,0x13319881,0x2a3f56f8,0x806034bf,0x23dfb301,
    0x8961efd9,0xb871fdae,0x3e0a63ff,0x43313ee1,0x4fffe46c,0xd02fdc0c,
    0xe807d40b,0x0b17ee05,0xb5b902f4,0x5713fcc9,0x1e9da8df,0x3217d56c,
    0x5b0166ad,0xcbfc45f5,0x7e5fe22f,0x217d56c2,0x3e22faad,0x8ef85f97,
    0x03bfe23e,0x3951a72a,0xf717ee0d,0x3f57658b,0x32ffab85,0x27dc9f03,
    0xfc86c866,0x2fdc0c9f,0xf500ff98,0x201ff301,0x4c0655fb,0x07bf00ff,
    0x7d522ff5,0x227d9fc7,0xaa84f8bf,0xf10a2390,0x57e89f17,0x5f57e85f,
    0x127c5fc4,0x7e89f17f,0xf36f85f5,0x20f7f4c5,0xf97c3f2f,0x7dc5fb81,
    0x457d4e65,0x3f270a4f,0x26e8198f,0xd90cc4fb,0x2e064dc0,0x09f9705f,
    0x3f2e03ea,0x0b1bf704,0xff04fcb8,0xb92ff303,0x7e4fea5f,0x017f2621,
    0x83e7e693,0xbf45fc98,0xfabf42fa,0x22fe4c42,0xbf45fc98,0xf8b7c2fa,
    0x3e67fe85,0x59f32cac,0xb8bf7059,0x47e4aa5f,0x238312fb,0x5e819efd,
    0x643313ee,0x70326e06,0xff3510bf,0xa881f501,0xefb80ff9,0x3e6a206e,
    0x852fd80f,0x8ff20cff,0x641fb3fa,0x86c05f8d,0x3723f8ec,0xfabf45f8,
    0x42fabf42,0x6e45f8dc,0xfabf45f8,0x15f8b7c2,0x4fa8fe64,0x7dc04fa8,
    0x2712fdc5,0x050fcafd,0x40f7f447,0x3313ee3f,0x19370364,0x36385fb8,
    0x1c0fa83f,0x2bf707fb,0x83fd8e04,0x7d41eff8,0x4fe17e24,0x3e73e66d,
    0x8ec87205,0xbf39f32f,0xe85f77e8,0x67cc5f77,0x273e65f9,0x2fbbf45f,
    0xaa754f7c,0x77c4f391,0x0c3be230,0x17ee2fdc,0x2ba6bea9,0x7fc43852,
    0x17ea0f81,0x37036415,0x445fb819,0xa86fcaac,0x32ab220f,0x235fb86f,
    0x32ab2218,0x5008a86f,0x209b57d7,0x3e20cac9,0x4980ee9d,0xbf134f4c,
    0x6fdc1dd3,0x66fdc5fc,0x3a77e25f,0xdd3bf10e,0x2fe6fdc1,0x219b5df3,
    0x542cdbe9,0x27f544fe,0x2fdc5fb8,0x381300a6,0x22d41fa8,0x1b2246f9,
    0x7dc0c9b8,0x0bfa0645,0x3a0641f5,0x322fdc2f,0x85fd0321,0x00110c03,
    0x01300002,0x40040006,0x08000000,0x40488000,0x5fb80200,0x41542fdc,
    0x0674c1a8,0x3ea0706e,0x0d4c1bbd,0x3620c9b8,0x4c5f51ef,0x45511ffe,
    0x3ffa62fa,0xd97ffb11,0xe98bea1f,0x000021ff,0x00000000,0x00000000,
    0x00000000,0xfb100000,0x07bf623d,0x00aaaae2,0x00200600,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x42205500,0x00200980,0x10001530,0x10100013,0x01000020,
    0x05440620,0x08000010,0x20008010,0x04008000,0x00008000,0x00000800,
    0x81ff9804,0x20f70d1c,0x3e7360fc,0x64427f40,0x427440ba,0x115c1fb8,
    0xeb8390bb,0xd99302f8,0x1704e801,0xbd892607,0x22cef985,0x982b85d8,
    0xb102cbbc,0xe98bb97d,0x36a0365f,0x6d6540dc,0x2cbbc982,0x2ae0aea0,
    0x66564c2e,0x26df6cc2,0x6c1ecaa8,0x41a68589,0x2a1fd81c,0x64ea0c8a,
    0x880f5c40,0x85883a05,0x9cc24c5c,0x0fa7b00c,0x0eae0588,0x13a9b0dc,
    0x8b909935,0x2313a858,0x2237443b,0x4bf67227,0x5f97c42b,0x2a35cfe2,
    0x9075099c,0x1b67e60b,0x9f515c3d,0x457c3744,0xe988306f,0x23310da9,
    0x203f2099,0x21015101,0x501301fa,0x2e406c5f,0x7c013016,0x04c00e8d,
    0x44d00b88,0x0260fb3f,0x4881b172,0x4373917b,0xf50381fe,0x25f71623,
    0x71df30fe,0x6bbea44f,0xb807dc37,0x37e608af,0x20ffc460,0x6f8e44fc,
    0xdb734e54,0x5fe23bd9,0x951aa2fc,0x2faad8d3,0x2a2fd6d4,0x95c21e9d,
    0x0e4b902b,0xd01e9da8,0xa82aa29f,0x556c1e9d,0x7f52442f,0xe9da83f6,
    0x50572e41,0x13888f53,0x2e4001ff,0x3f69f516,0xa877bfa1,0x713f37d1,
    0x9105e77c,0x7fff039f,0x7dc0ff98,0x2f83f506,0x41c95c3f,0x2445f57e,
    0xbf88fcbe,0x6cfe24f8,0x2e7d9fc7,0x8844b11b,0x833498bb,0xf970fb3f,
    0x27f0f21d,0x3e2fe27d,0x27f715c4,0x3ecfe1fd,0x44b11771,0xaa417270,
    0x3ff6007f,0xd6f886e3,0x21fff88f,0x348fb7a3,0x764df19f,0xffe985ff,
    0xf50ff50d,0x9f30360f,0x2b366595,0x7d5fa1ae,0x959f31c2,0x52fe4c45,
    0x7d47f67f,0x43603f93,0x2eab02e8,0x3f27f52f,0x46fecfa1,0x1fc9fd45,
    0x8b17f262,0x2a1fb3fa,0x3603f93f,0x2a6a5d10,0x0ff33887,0x1266fa80,
    0xbd8bf993,0x5f46a7fc,0x4fee714d,0x013e20fd,0x1fe29ff7,0x541417ee,
    0xebaf984f,0x17d5fa1a,0x37209f50,0x6cfea5f8,0x3f67f50f,0x0b6e3b80,
    0x3ea3d072,0x53e61fb3,0x7d40efe8,0x46e41fb3,0x7f31625f,0xfb3fa9f6,
    0x96dc7701,0x2a539b48,0xb0007fe1,0x45f3068b,0x223fd1fa,0xa9f9cf8c,
    0x07f29f31,0x2219847d,0xf903f66e,0x877c4005,0x3a126d11,0x875c5f77,
    0x3e630ef8,0x4fe25f9c,0x86d9fc6d,0x313af258,0xd9fc3989,0x7d4bfe66,
    0x6cfe29df,0x97e73e66,0x89d4e82a,0x4b10db3f,0x44ea4ebc,0x85fa8750,
    0x641c8aa4,0x3e617441,0x19ca8d91,0xf95e8771,0x8ee6fe54,0x7f51e459,
    0x06b83744,0xba4c9fd5,0x5fcdfb82,0x4fea83f2,0x83ba77e2,0x64c0eada,
    0x220d80ca,0x3a22c3e9,0x032b264c,0xfd59dff7,0x20cac98b,0xb0ee9df8,
    0x81d5b301,0x0d80cac9,0x7950fa62,0x3b660597,0x37ee0ccb,0x75149829,
    0x072b3203,0x20b2ef2a,0x2ee1dae9,0x37a65fed,0x6f4c0cba,0x1fb00cda,
    0x00422040,0x00100801,0x44020040,0x20c41501,0x40081aa9,0x00020081,
    0x00801002,0x4402a031,0x01006000,0x00400108,0x08040044,0x01001802,
    0x00000020,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x40110000,0x221fffff,0x0310ffff,0x02880804,
    0x18054022,0x00130198,0x104c4260,0x2e131133,0x3f710cff,0xd51dffa8,
    0x206eccbf,0x2a037cc0,0x88215102,0x3ee09889,0x549ff74f,0x23dfb30e,
    0x00000dd9,0x4003fd88,0x22009998,0x6e5eec41,0x3bbbe62c,0xb27775c7,
    0x542ea83f,0x80fec5fe,0x544fa82e,0x03ea0fbc,0x806a03f5,0x7d45f76f,
    0x44fd8366,0xb87fb029,0xd10a63ff,0x7fd40df0,0x1f6cf540,0x41fbbdf3,
    0x88ff63fe,0x06627dc2,0x5ec133fa,0x447f501f,0x4eec6baf,0xfd9ba1df,
    0x45d0bf31,0x13b12a09,0x2fda8b50,0x98ffefa2,0x9105f904,0x42e8af83,
    0xbd00e43a,0x42fbb7c0,0x7f9870fd,0xb85fb01c,0x44332ffa,0x4dbe09fe,
    0xf124c6c0,0x2df0feeb,0xa9bea5f9,0x13ee0e6f,0x1db99833,0x440b8fa8,
    0x4ce43fa9,0x2374fe63,0x7f436a3c,0x87602981,0x800cfff8,0x4fa822fb,
    0x817ed404,0x98817d40,0x7cc02620,0x3eedf00f,0x404e7d42,0x6c0512fe,
    0x8ffc9c2f,0x82bfe619,0x221fdbff,0xfa9fd409,0x46f8b7c3,0x23ff71ff,
    0x0cc4fb83,0xb1026331,0xfd7d905f,0x7cc09887,0x804c4bf3,0x44000ff9,
    0x27ffecc7,0xfa817dc0,0x3eae21c1,0x04fa8702,0x837c4df1,0x2df04fcb,
    0x03fe82fb,0xfb00edf5,0x27bf6385,0x9b7c37c1,0xf51be25f,0x2df0fea7,
    0xba7e46f8,0xfb819cfc,0x9ff10cc4,0x1fecc1fd,0x21fd53e2,0xebdb86f8,
    0x7d41be20,0x204a8007,0x81d90fe8,0x88b902fb,0xc82faa45,0xf830ff83,
    0x4d4437c6,0xf96f80ff,0x202fb835,0x7ec039ff,0x3dfd11c2,0x3e6f86f8,
    0x57e237c6,0xf9b7c3fa,0x4c5ffcc4,0x89f704ff,0x2fabf419,0x4fea07e4,
    0xc86f83fa,0x7dcdf009,0x76d47f98,0x5402d80c,0xfb85fb0f,0x3d40e882,
    0x419f9577,0x0bfd507c,0x2386f8df,0xbdff83fd,0x007c40ef,0x29501df7,
    0x3e21c2fd,0x37c37c1f,0xea86f8bf,0x6f7c3fdc,0x25fe80ed,0x8bf503fe,
    0x3fabf40a,0x4fea07e4,0x446f83fa,0x37c2cddf,0xd07fe1f9,0x2e21e05f,
    0x5c1a8b10,0x6410c82f,0xfffff90f,0x22ddbe23,0x6f8df049,0x37e55644,
    0x0e008362,0x5f609f10,0x7d41c1fd,0x5be0bf41,0x2037c3f8,0x00b7c3fa,
    0x00fb87ea,0x7e848df3,0x40fc87f5,0xf07f75f8,0x3ffffb0d,0x5fa8237c,
    0x425417f4,0x1c43cff9,0x3bb217dc,0x2a07f66e,0x44bbf42f,0x6f8df078,
    0xa8bfa064,0x004edc06,0xfad98064,0x2e0674c3,0x37a27dc1,0x406f84cb,
    0x8037c3fa,0x3ea02c46,0x57e81bbd,0xa80fc87f,0x7c0cfdde,0xf8b62d46,
    0x556f4c06,0x200880de,0xbfd30100,0x97fffea3,0x42fa80db,0x0d40acc9,
    0xff98ffcc,0x7f4c5f51,0xe980b31f,0x01001002,0x01080000,0xeb807fe6,
    0x20037a64,0x40100080,0x25fc9ff9,0x80403fe8,0x2f221ff9,0x07fe62bb,
    0x000004c0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x9bffd300,0x81fe63fb,
    0x0cdbefd9,0x9ec46fec,0x3f6607f9,0xdf50001e,0x09999998,0x1bb9dfb3,
    0xaefd9800,0x3663ffc8,0xe81ddcef,0x50efecce,0x8f5c1bff,0x9f51fff9,
    0x4c7bf661,0x984dbefe,0x25fccefd,0xecefecfb,0x223ffb33,0xdfb30bfc,
    0x3f66dd99,0x1ffb302e,0xb30cff98,0x130599df,0x717ee401,0x3ee03f43,
    0x7c41dd14,0xb80fd126,0xf00d804f,0x2e18044d,0x320df34f,0x7c4bf701,
    0x3fe4fb87,0x85ff1240,0x2a0dc6fb,0xf70931ff,0xdd14fc8b,0x72c5fb81,
    0x71c53f23,0xfb81d8bf,0x80bf7245,0x7f5c4fdb,0x2fca7d41,0x2e0593d1,
    0xe8252fd8,0x49f70137,0x44fec5fb,0x4198bf43,0xb03ecefb,0x0089be01,
    0x7f8a7dc3,0x97ee0390,0x24fb87f8,0xbfb0c2fd,0x9038bfa0,0x3ee091df,
    0xbf927e45,0x08655fb8,0x3ee093f2,0x3ee01915,0x27dc3115,0xa89fe6e0,
    0xaa7d41fe,0x2067f55f,0x0735fb29,0xb81fd9fd,0xf51fea4f,0xd17e8159,
    0x7f94fb83,0x89be01b0,0xca7dc300,0x2e03903f,0x2e1fe25f,0x5403fa4f,
    0x2df500ff,0x1dfd100b,0x9f917ee0,0x37ee3fd4,0x827e4058,0x5c069dfb,
    0x4fb8175f,0x272fe9c0,0xca7d41fe,0x20bff13f,0x3fdfeaad,0x5c5f57e8,
    0xff8acefe,0xbf41ffc1,0xf74fb80b,0x3fffffab,0x0089be2f,0x67ef7dc3,
    0x3fffff60,0x2abbee3f,0xcefb87fb,0x0ffa01ee,0x98059fd0,0x8bf701ff,
    0x83fe64fc,0x6406eefb,0xffdf704f,0x7ef7dc07,0x4e027dc0,0x07fa76fa,
    0x885d9df5,0x4ccd44fe,0x7e838afd,0x24fb87f5,0xfb550ffa,0x767f4359,
    0x7f94fb80,0x89be01b0,0x8a7dc300,0x701c80ff,0x5c3fc4bf,0x900ffacf,
    0x0ff500df,0x2e0dfb50,0xf527e45f,0x8095fb8f,0x5bf704fc,0x57ee03ff,
    0x2027dc0c,0x7f433fe3,0x9a827d41,0xfb0e25e8,0x2afd0c65,0xf927dc3f,
    0x567ed54d,0x213effa1,0xb03ecefb,0x0089be01,0x7fd27dc3,0x97ee0390,
    0xb4fb87f8,0x83ff30bf,0x4c07f983,0xbf709fd2,0x17f24fc8,0x40c46bf7,
    0x2bf704fc,0x5fb80ffc,0x284fb813,0x3fa5fb8e,0xe9827d41,0x3f6121eb,
    0xf57e9222,0x3fa4fb87,0x7e82fc81,0x04fb85fb,0x3dddfddb,0x8601137c,
    0x01ff14fb,0x897ee039,0xd14fb87f,0x544fe87f,0x2207f984,0xf707fe64,
    0x3fa4fc8b,0x0722fdc0,0x2fdc13f2,0x5fb81dfb,0x45717ee0,0x1fe8be23,
    0x902027d4,0x3bfaa23d,0x3ff34fcb,0x77eccbf9,0xfe980cec,0x2a7fe60d,
    0x3dfb31ff,0x33333310,0x4c47fe61,0xb3199999,0x2037b9df,0x13dfb100,
    0x7ecc7ff7,0x2e5ff31e,0x3fdccdff,0x2057fe44,0xfff30cea,0x4c7bf623,
    0x40cecefe,0xfecbffd8,0x20f7f4c0,0xff91efd8,0x07bf623d,0x3733ff66,
    0x9219d31f,0xfb10cffa,0x0000003d,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x300c0000,0x09889988,
    0x81300544,0x31998998,0x04cc6621,0x544088a8,0x11988130,0x86226621,
    0x26331080,0x8cc41311,0x22005409,0x20809999,0x88a8cc00,0x82030311,
    0x10000800,0x00000000,0xdd900200,0x32a5dddd,0x9a72a0fb,0xad8367fa,
    0x74ed42fa,0x9fe5bea1,0x3f2ff10c,0x22f4ed42,0x3caefaac,0xe8afd7f4,
    0xd8f22b9f,0x7fb7fd12,0x67fc4dd7,0x0b7660fe,0x21fecdd4,0xd710171b,
    0x3b3ba619,0x2a81d80e,0x1f77c857,0x25e87ee2,0x1fd31eed,0x82f99722,
    0x910f104c,0x116dd475,0x457c007d,0xb0fcbe2e,0x8bf88e1f,0x47d9fc4f,
    0x875fb8fe,0x4f85f57e,0x7cfe21fd,0x9afd8f56,0x360f7ea1,0xf9bf43cb,
    0x47f41f94,0xbec882fa,0x2e37cc60,0xbec98955,0x001a2cc0,0x2fb0f47a,
    0x57e340fb,0x0f42b13a,0x2637d4b7,0x363220ed,0x89e32e39,0x653e64ca,
    0xaaeeeeee,0xcacf982f,0x102b3ea2,0x9fd4bf93,0x2ebee1fc,0xabf419fd,
    0x36efe62f,0x3bee221f,0x03f60cba,0x85f80fec,0x3ee9f17e,0x017d5fa1,
    0x43fd0bf6,0x320fa8fa,0x190ae03f,0x3bbbbbb6,0x43ee3ea1,0x1fa8d35b,
    0x258954f6,0x2242dc48,0x66645a8d,0xa9a32a3c,0x444404cc,0x509f5088,
    0x41ff409f,0x3ea5f8dc,0x7fc41fb3,0x57e86fa9,0x6477d45f,0x3fa36e1f,
    0x7d40fb00,0x743dbd85,0x87ee9f17,0x7105f57e,0x44fa839d,0x541f99f9,
    0x345982dd,0x75c75c00,0x2e124730,0x6e7446e2,0x2dc55b12,0x8764a82a,
    0x1aa84ad8,0x0000eaea,0x77c461ff,0x4c1fb830,0x9fc5f9cf,0x9f16d86d,
    0x88beefd0,0x9fc4fb4f,0x3ec153fd,0x322fda88,0xf17e8b63,0x57e87f29,
    0x81f64c7f,0xad470ff8,0x17d71059,0x03baf7e6,0x0e874076,0x00ddc104,
    0x2399504c,0x17010bb8,0x03a93144,0xd5000000,0x84fea8bf,0xe9df8868,
    0x032b260e,0xfb81c8ea,0x3b265fcd,0x37fe21ea,0x3e22efe9,0x7dcf4c1f,
    0x3e21010e,0xfe8efb9f,0xbf93ff33,0x37f200dc,0x1a8d44dc,0xa98a9540,
    0x15018198,0x0000002a,0x00000000,0x08000000,0x00008020,0x04010004,
    0x01020080,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x40000000,0x3bbb2098,0x0cc03eee,0x072e002e,
    0x443bbae3,0x13bbbbbb,0x0bdddddd,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xd1000000,0x24473007,0xb95f98fe,0x36eaa3f3,
    0x3332a5ce,0x2aaaaaa0,0x00000001,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x26016200,0x424c3e23,0x2191551b,0x00005440,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x0d400000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__times_bold_15_latin1_x[224]={ 0,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,
1,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__times_bold_15_latin1_y[224]={ 12,2,2,2,2,2,2,2,2,2,2,3,9,8,
9,2,2,2,2,2,2,3,2,3,2,2,5,5,4,6,4,2,2,2,3,2,3,3,3,2,3,3,3,3,
3,3,3,2,3,2,3,2,3,3,3,3,3,3,3,3,2,3,2,14,2,5,3,5,3,5,2,5,3,2,
2,3,3,5,5,5,5,5,5,5,3,5,5,5,5,5,5,2,2,2,7,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,12,5,3,2,4,3,
2,2,2,2,2,5,6,8,2,1,2,3,2,2,2,5,3,6,11,2,2,5,2,2,2,5,-1,-1,-1,0,
0,0,3,2,-1,-1,-1,0,-1,-1,-1,0,3,0,-1,-1,-1,0,0,4,2,-1,-1,-1,0,-1,3,2,2,2,
2,2,2,2,5,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,5,2,2,2,2,2,2,2,
 };
static unsigned short stb__times_bold_15_latin1_w[224]={ 0,3,6,7,7,13,11,3,5,4,7,8,3,5,
3,4,7,6,7,6,7,7,7,7,7,7,3,3,8,8,8,7,13,10,9,10,10,9,8,11,11,5,7,11,
9,13,10,11,8,11,10,7,9,10,10,14,10,10,9,4,4,4,7,8,4,7,7,6,8,6,6,7,8,4,
5,8,4,11,8,7,7,8,6,5,5,8,7,10,7,7,6,4,1,5,8,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,3,7,7,7,7,
1,7,5,10,5,7,8,5,10,8,5,8,4,4,4,8,8,3,4,4,5,7,10,10,10,6,10,10,10,10,
10,10,14,10,9,9,9,9,5,5,5,5,10,10,11,11,11,11,11,6,11,10,10,10,10,10,8,7,7,7,
7,7,7,7,10,6,6,6,6,6,5,4,6,6,7,8,7,7,7,7,7,8,7,8,8,8,8,7,7,7,
 };
static unsigned short stb__times_bold_15_latin1_h[224]={ 0,11,6,11,11,11,11,6,13,13,6,9,6,2,
4,11,11,10,10,11,10,10,11,10,11,11,8,10,7,4,7,11,13,10,9,11,9,9,9,11,9,9,10,9,
9,9,10,11,9,13,9,11,9,10,10,10,9,9,9,12,11,12,6,1,4,8,10,8,10,8,10,10,9,10,
13,9,9,7,7,8,10,10,7,8,10,8,8,8,7,10,7,13,13,13,3,9,9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,12,11,7,9,
13,13,3,11,5,7,4,2,11,2,6,9,6,6,4,10,12,3,4,6,5,7,11,11,11,10,13,13,13,12,
12,12,9,13,13,13,13,12,13,13,13,12,9,13,14,14,14,13,13,7,11,14,14,14,13,13,9,11,11,11,
11,11,11,11,8,10,11,11,11,11,10,10,10,10,11,10,11,11,11,11,11,7,8,11,11,11,11,13,13,13,
 };
static unsigned short stb__times_bold_15_latin1_s[224]={ 70,25,179,8,231,158,90,191,129,38,223,
95,211,121,243,118,123,33,40,172,52,21,211,13,192,184,252,29,145,247,121,
247,13,85,85,161,165,176,208,1,104,159,124,196,217,227,132,235,241,170,116,
227,186,196,113,181,148,137,127,54,179,85,215,136,78,23,149,1,223,8,216,
239,16,247,164,44,71,100,112,31,173,164,78,250,143,50,15,39,85,105,130,
182,187,224,112,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,70,48,122,
219,154,36,200,135,106,150,237,137,83,121,200,127,195,62,201,186,97,96,59,
102,92,206,231,171,139,71,60,60,153,94,189,74,111,90,1,202,143,230,240,
101,250,1,7,68,25,27,47,1,35,117,105,93,130,24,13,59,43,213,53,
223,150,172,36,198,206,110,67,67,239,246,1,29,74,80,157,232,44,207,52,
102,142,131,82,162,59,16,180,189,214,78,86,70, };
static unsigned short stb__times_bold_15_latin1_t[224]={ 15,30,64,30,16,16,30,64,1,16,64,
54,64,72,64,30,30,42,42,30,42,42,30,42,30,30,42,42,64,64,64,
30,16,42,54,30,54,54,54,42,54,54,42,54,54,54,42,30,54,1,54,
30,54,42,42,42,54,54,54,16,30,16,64,72,72,64,42,64,42,64,42,
42,54,42,1,54,54,64,64,64,42,42,64,54,42,64,64,64,64,42,64,
1,1,1,72,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,
54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,15,42,16,
30,64,54,1,1,72,30,64,64,72,72,30,72,64,54,64,64,72,42,16,
72,72,64,64,64,30,30,30,42,1,1,1,16,16,16,54,1,1,1,1,
16,1,16,16,16,54,16,1,1,1,1,1,64,16,1,1,1,16,1,54,
16,16,16,30,16,16,30,64,42,16,16,30,30,42,42,42,42,30,42,30,
30,16,30,30,64,64,30,16,16,16,1,1,1, };
static unsigned short stb__times_bold_15_latin1_a[224]={ 54,72,120,108,108,217,181,60,
72,72,108,123,54,72,54,60,108,108,108,108,108,108,108,108,
108,108,72,72,123,123,123,108,202,157,145,157,157,145,132,169,
169,84,108,169,145,205,157,169,132,169,157,121,145,157,157,217,
157,157,145,72,60,72,126,108,72,108,121,96,121,96,72,108,
121,60,72,121,60,181,121,108,121,121,96,84,72,121,108,157,
108,108,96,85,48,85,113,169,169,169,169,169,169,169,169,169,
169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,
169,169,169,169,169,169,169,169,54,72,108,108,108,108,48,108,
72,162,65,108,123,72,162,108,87,119,65,65,72,125,117,54,
72,65,72,108,163,163,163,108,157,157,157,157,157,157,217,157,
145,145,145,145,84,84,84,84,157,157,169,169,169,169,169,123,
169,157,157,157,157,157,132,121,108,108,108,108,108,108,157,96,
96,96,96,96,60,60,60,60,108,121,108,108,108,108,108,119,
108,121,121,121,121,108,121,108, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_15_latin1_BITMAP_HEIGHT or STB_FONT_times_bold_15_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_15_latin1(stb_fontchar font[STB_FONT_times_bold_15_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_15_latin1_BITMAP_HEIGHT][STB_FONT_times_bold_15_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_15_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_15_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_15_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_15_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_15_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_15_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_15_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_15_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_15_latin1_s[i] + stb__times_bold_15_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_15_latin1_t[i] + stb__times_bold_15_latin1_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_15_latin1_x[i];
            font[i].y0 = stb__times_bold_15_latin1_y[i];
            font[i].x1 = stb__times_bold_15_latin1_x[i] + stb__times_bold_15_latin1_w[i];
            font[i].y1 = stb__times_bold_15_latin1_y[i] + stb__times_bold_15_latin1_h[i];
            font[i].advance_int = (stb__times_bold_15_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_15_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_15_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_15_latin1_s[i] + stb__times_bold_15_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_15_latin1_t[i] + stb__times_bold_15_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_15_latin1_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_15_latin1_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_15_latin1_x[i] + stb__times_bold_15_latin1_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_15_latin1_y[i] + stb__times_bold_15_latin1_h[i] + 0.5f;
            font[i].advance = stb__times_bold_15_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_15_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_15_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_15_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_15_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_15_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_15_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_15_latin1_LINE_SPACING
#endif

