// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_9_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_9_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_9_latin1_BITMAP_WIDTH         256
#define STB_FONT_courier_9_latin1_BITMAP_HEIGHT         32
#define STB_FONT_courier_9_latin1_BITMAP_HEIGHT_POW2    32

#define STB_FONT_courier_9_latin1_FIRST_CHAR            32
#define STB_FONT_courier_9_latin1_NUM_CHARS            224

#define STB_FONT_courier_9_latin1_LINE_SPACING           4

static unsigned int stb__courier_9_latin1_pixels[]={
    0x00000000,0x00000000,0x20150000,0xaa860031,0x00001000,0x0040b810,
    0x000000d4,0x43180088,0x26000031,0x20502061,0x00006660,0x55419851,
    0x141404c0,0x20a20d4c,0x281440a9,0x81440a98,0x31054c42,0x04c18826,
    0x4c198853,0x5102a61b,0x441850a0,0x9861a982,0x0281440a,0x26144185,
    0x530c6152,0x26141441,0x0c198262,0xa8261128,0x14c1440a,0x944530a6,
    0x26155119,0x85ca6172,0x22261729,0x89862261,0x0c40c418,0x054e20c4,
    0x23855063,0x942aa8a2,0x20620620,0x98304c18,0x43144c0a,0x2054c0a9,
    0x8a1540a9,0x0c221519,0x2a1aa861,0x5146aa1a,0x04c2a8a2,0x85500c26,
    0x528a2aa9,0x0328a294,0x11142231,0x3185088a,0x44318318,0x2228c451,
    0x2088c451,0x31c19851,0xa8815514,0x5188a311,0x031428c4,0x061a8886,
    0x4c180c06,0x1114a141,0x18183086,0x98a28618,0x028a0cc1,0x450c6066,
    0x98a29452,0x21118828,0x21114222,0x418c18c2,0x86130c31,0xa884c309,
    0x43183829,0xbb89430a,0x55532841,0x5531554c,0x9a886185,0x118aa222,
    0x14d44535,0x43185351,0x0c221c41,0x30303063,0x3182650c,0x5370620c,
    0x21dc18c1,0x28a514a2,0x23118824,0x2310c621,0x55065541,0x50655419,
    0x5429a853,0x82802229,0xa99942ab,0x82e60661,0x214d429a,0x2172829a,
    0x30a0b999,0x4c2e6663,0x73330b99,0x831155c1,0x0c619b81,0x99860606,
    0x22ab851a,0xab828142,0x2a6604c2,0x26635331,0x2098141a,0x20cdc19b,
    0x0000019b,0x20660000,0x1a8dc198,0x40c02200,0x0c020100,0x0002a200,
    0x0351b800,0x540002e6,0xba86ea1b,0x06a37001,0xa8dc080c,0x00155731,
    0x33033100,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x30aa0000,0xa9831811,
    0x20c618c1,0x20dcc1a9,0x1c0aa819,0x0d441353,0x0003530a,0x06600318,
    0x55066604,0x380c44c5,0x00d4c02a,0x43570ccc,0x88ae2099,0x986a62aa,
    0x3306a609,0x31089985,0x2a055426,0xa898c01a,0x20a02a60,0x982a6089,
    0x2054c2aa,0x220621aa,0x2a15440a,0x31382a82,0x4c30a512,0x4c0c4151,
    0x82a81881,0x11099819,0x20cc4c26,0x22199831,0x1428c098,0x13305450,
    0x94300e11,0x4a131132,0x21102a22,0x40c218c3,0x5388c181,0x54c55531,
    0x0c0d4c2a,0x218180c6,0x228c4518,0x98198918,0x98ca3281,0x419c4300,
    0x8c409819,0x0ccc04c2,0x2aa01826,0x246618c1,0x98630a71,0x94cc5500,
    0x35718999,0x98ddc310,0x111cd460,0x51870c33,0x55418198,0x3088c462,
    0x46306306,0x21dc29a8,0x261829a8,0x309862aa,0x0c60c60c,0x50444cc2,
    0x8882a153,0x1830181a,0x06603026,0x3300a555,0x1450cab8,0x83182231,
    0x4cc60601,0x06065188,0x0c4ccca3,0x20998871,0x2083829a,0x22503061,
    0x2e0ee29a,0x999554c3,0x330260b9,0x4d418173,0x26614d42,0x2ae155c1,
    0x829b99c2,0x53110941,0x26a06030,0xa8330182,0x302a6e3a,0xb9a88283,
    0x9a853551,0x50cd40c1,0x98666233,0x8cd41829,0x06e61998,0x4428280c,
    0x55026a23,0x098089c3,0x26000098,0xba800aab,0x2e000041,0x0d46e351,
    0x35102004,0x575124a6,0x44015d44,0x040002ba,0x00020cc4,0x015d4400,
    0x00000000,0x09881980,0x80020662,0x5cc198c1,0x155730aa,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x4c089853,0x220ccc0a,0x40a02089,0x4d441889,0xaaa86a60,
    0x55302a21,0xa8cc1881,0x29826130,0x03306028,0xaa805033,0x06a60620,
    0x2a600351,0xa8862a20,0x44409982,0x55510108,0x51995543,0x1a854661,
    0x50d46a35,0x985554c5,0x50ccc152,0x22188994,0x10884c51,0x21ab8921,
    0x44318620,0x26194389,0x50880c31,0x229428c4,0x13030331,0x86250305,
    0x219820aa,0x114621aa,0x30528151,0x2a1a40c0,0x42004c1a,0x4c30c0a9,
    0x0ca14a18,0x184422a3,0x8844c618,0x50c31830,0x0630618c,0x9981870c,
    0x130c60aa,0x31544113,0x540dc455,0x04c3088a,0x81ba8195,0x2a20a981,
    0x826a662b,0x0554cc53,0x42aa9811,0x4c404c53,0xa8a6a219,0x04461ac9,
    0x21a81006,0x8388503b,0x04dc4c48,0x10606063,0x0c133061,0x088618c5,
    0x39a86a25,0x5433280c,0x453910ca,0x04ee29a8,0x2a0c2203,0x3205cc29,
    0x02a81838,0x8c332883,0x02218a21,0x50630a6a,0x99980153,0x4359350b,
    0x200c0a9a,0x30130a60,0x09981831,0x1130e2a6,0x30883030,0x0d4cc504,
    0x14d41955,0x30602a6e,0x100ea053,0x955c5c00,0x554c2ac8,0x00173001,
    0x19385751,0x9540aaa2,0x43701738,0x9c4081aa,0x0003000b,0x5d442c88,
    0x0a8c44c2,0x2ae20dc4,0x72982e63,0x41c24e21,0x702e61ba,0x014d4c33,
    0x08157500,0x00001510,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x4a600000,0xa835510a,0x230a511a,
    0x41540aa9,0x19840d41,0x4a146215,0x99815541,0x082a2228,0x84035501,
    0x33308630,0x00a98013,0x88262131,0x89c6c2c2,0x22b100c1,0x44433515,
    0x55554088,0x1ddc4631,0x22355000,0x8aaa61aa,0x4c2a1519,0x33303511,
    0x8c181318,0x98319221,0x43312441,0x2a0c60a8,0x29414c19,0x045ca333,
    0x429b88a7,0x54473188,0x41549119,0x21555108,0x9830a28a,0xc8c914a0,
    0x11ca8638,0x31044005,0x00000333,0x500aa981,0x10c6088c,0x41519867,
    0x0c307701,0x5c075706,0x50418c2a,0x418c0d46,0xab80c0b8,0x08c63352,
    0x8326a0c6,0x4642ee18,0x882466a4,0x0c155510,0x02621330,0x22108410,
    0x00006661,0x18000000,0x54330318,0x110ee0a9,0x044ccc35,0x430a2a03,
    0xb10c60c1,0x8aae088c,0x544eaa2a,0x64e61c41,0x10035710,0x27129c5c,
    0xc813330b,0x0517013a,0x00000000,0x00000000,0x40000000,0x0d5c1b98,
    0x13015066,0x94629888,0x2a731860,0xba855710,0x2602e711,0x2a370aab,
    0x18873051,0x00000000,0x00000000,0x00000000,0x00000000,0x40000000,
    0x2e218981,0xb985712a,0xb92530aa,0x2aae2551,0x00000001,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x30600000,0x00000667,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_9_latin1_x[224]={ 0,1,1,0,0,0,0,1,2,1,0,0,1,0,
1,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
2,0,1,0,0,0,0,0,0,-1,1,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__courier_9_latin1_y[224]={ 6,1,1,0,0,1,1,1,1,1,1,1,4,3,
5,0,1,1,1,1,1,1,1,1,1,1,2,2,1,2,1,1,0,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,7,0,2,1,2,1,2,1,2,1,0,
0,1,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,1,1,3,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,2,0,1,2,1,
1,1,1,1,0,2,3,3,1,0,0,1,1,1,0,2,1,3,5,1,0,2,1,1,1,2,-1,-1,-1,0,
0,-1,1,1,-1,-1,-1,0,-1,-1,-1,0,1,0,-1,-1,-1,0,0,2,1,-1,-1,-1,0,-1,1,1,0,0,
0,1,1,0,2,2,0,0,0,1,0,0,0,1,1,1,0,0,0,1,1,1,2,0,0,0,1,0,1,1,
 };
static unsigned short stb__courier_9_latin1_w[224]={ 0,2,3,5,4,5,4,2,2,2,3,5,2,5,
2,4,4,4,4,4,4,4,4,4,4,4,2,2,4,5,4,3,4,5,5,5,5,5,5,5,5,4,5,5,
5,5,5,4,5,5,5,5,5,5,5,5,5,5,4,2,3,2,4,6,3,5,5,5,5,5,5,5,5,5,
4,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,4,2,1,2,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,2,4,5,4,5,
1,5,3,5,3,4,5,5,5,6,3,5,3,3,3,5,5,2,2,3,3,5,5,5,5,3,5,5,5,5,
5,5,5,5,5,5,5,5,4,4,4,4,6,5,4,4,4,4,4,3,5,5,5,5,5,5,5,4,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
 };
static unsigned short stb__courier_9_latin1_h[224]={ 0,6,3,7,7,6,6,3,7,7,3,5,4,1,
2,7,6,5,5,6,5,6,6,6,6,6,5,5,5,3,5,6,7,5,5,6,5,5,5,6,5,5,6,5,
5,5,5,6,5,6,5,6,5,6,5,5,5,5,5,7,7,7,3,2,3,5,6,5,6,5,5,6,5,6,
8,5,5,4,4,5,6,6,4,5,6,5,4,5,4,6,4,7,7,7,2,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,5,4,5,
7,6,1,6,4,4,3,1,6,1,3,5,3,3,3,6,6,2,3,3,4,4,5,5,5,6,7,7,7,6,
6,7,5,7,7,7,7,6,7,7,7,6,5,6,8,8,8,7,7,4,6,8,8,8,7,7,5,6,7,7,
7,6,6,7,5,6,7,7,7,6,6,6,6,5,6,5,7,7,7,6,6,5,5,7,7,7,6,8,7,7,
 };
static unsigned short stb__courier_9_latin1_s[224]={ 255,71,204,107,113,120,126,198,99,220,212,
1,162,250,223,232,161,244,13,172,89,177,188,193,198,209,71,86,94,171,204,
232,149,80,74,131,54,24,209,30,65,60,236,48,42,36,30,13,18,24,7,
7,249,1,238,232,226,220,215,140,136,154,193,232,181,174,155,162,149,150,144,
220,132,166,22,114,108,126,132,90,250,36,111,66,42,54,99,102,105,226,144,
181,198,229,226,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,
198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,255,247,242,
77,117,96,196,214,246,203,149,153,165,250,182,239,177,120,185,189,216,143,137,
220,201,208,122,138,48,138,126,86,93,175,243,65,59,223,71,237,7,249,1,
24,210,205,200,36,83,90,1,6,11,102,215,158,74,39,27,33,190,184,186,
13,169,163,157,30,18,143,180,80,130,124,118,41,96,102,114,192,53,156,75,
69,63,47,108,168,60,57,51,45,18,16,81,87, };
static unsigned short stb__courier_9_latin1_t[224]={ 1,10,23,1,1,10,10,23,1,1,23,
25,23,23,23,1,10,17,24,10,23,10,10,10,10,10,23,23,23,23,17,
10,1,23,23,10,23,24,17,17,23,23,10,23,24,24,24,17,24,17,25,
18,17,18,17,17,17,17,17,1,1,1,23,23,23,17,10,17,10,17,17,
10,17,10,1,17,17,23,23,17,10,17,23,17,17,17,23,17,23,10,23,
1,1,1,23,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,1,10,10,
17,23,17,1,10,23,10,23,23,23,23,10,23,23,17,23,23,23,10,10,
23,23,23,23,23,17,17,17,10,1,1,1,10,10,1,17,1,10,1,10,
10,1,1,1,10,17,10,1,1,1,1,1,23,10,1,1,1,1,1,17,
10,1,1,1,10,10,1,17,10,1,1,1,10,10,10,10,17,10,17,1,
1,1,10,10,17,17,1,1,1,17,1,1,1, };
static unsigned short stb__courier_9_latin1_a[224]={ 76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_9_latin1_BITMAP_HEIGHT or STB_FONT_courier_9_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_9_latin1(stb_fontchar font[STB_FONT_courier_9_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_courier_9_latin1_BITMAP_HEIGHT][STB_FONT_courier_9_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_9_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_9_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_9_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_9_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_9_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_9_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_9_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__courier_9_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__courier_9_latin1_s[i] + stb__courier_9_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__courier_9_latin1_t[i] + stb__courier_9_latin1_h[i]) * recip_height;
            font[i].x0 = stb__courier_9_latin1_x[i];
            font[i].y0 = stb__courier_9_latin1_y[i];
            font[i].x1 = stb__courier_9_latin1_x[i] + stb__courier_9_latin1_w[i];
            font[i].y1 = stb__courier_9_latin1_y[i] + stb__courier_9_latin1_h[i];
            font[i].advance_int = (stb__courier_9_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__courier_9_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_9_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_9_latin1_s[i] + stb__courier_9_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_9_latin1_t[i] + stb__courier_9_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_9_latin1_x[i] - 0.5f;
            font[i].y0f = stb__courier_9_latin1_y[i] - 0.5f;
            font[i].x1f = stb__courier_9_latin1_x[i] + stb__courier_9_latin1_w[i] + 0.5f;
            font[i].y1f = stb__courier_9_latin1_y[i] + stb__courier_9_latin1_h[i] + 0.5f;
            font[i].advance = stb__courier_9_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_9_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_9_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_9_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_9_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_9_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_9_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_9_latin1_LINE_SPACING
#endif

