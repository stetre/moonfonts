// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_6_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_6_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_6_latin1_BITMAP_WIDTH         256
#define STB_FONT_times_bold_6_latin1_BITMAP_HEIGHT         24
#define STB_FONT_times_bold_6_latin1_BITMAP_HEIGHT_POW2    32

#define STB_FONT_times_bold_6_latin1_FIRST_CHAR            32
#define STB_FONT_times_bold_6_latin1_NUM_CHARS            224

#define STB_FONT_times_bold_6_latin1_LINE_SPACING           4

static unsigned int stb__times_bold_6_latin1_pixels[]={
    0x8502e153,0x0aa04310,0x82804c13,0x0c409829,0x318c60a6,0x21541888,
    0x4d42a82a,0x8a0c3731,0x1cc2a629,0x1884c471,0x140c46a2,0x88a0c471,
    0x4620cd41,0x04c26638,0x43124285,0x0994552a,0x098350aa,0x88711414,
    0x21151540,0x8a1150ac,0x4554662a,0x40998261,0x504d4099,0x30caa315,
    0x2319c413,0x23331319,0x826618aa,0x423718aa,0x221711cf,0x22288621,
    0x8cd42a61,0x0c4aae28,0x884c4655,0x2e0c8a22,0x44aea599,0x330a8621,
    0x8c546663,0xa954aa38,0x98aa6532,0xa98aa62b,0x4c288a22,0x21750441,
    0x9217558c,0x366711aa,0x58dc6a09,0x96372c6e,0xb84aa12a,0x23084cb1,
    0x21757318,0x52c6e12a,0x32e0ec25,0x42b253b1,0x323750ac,0x26e3750a,
    0x522e3753,0x641b10ac,0x27253929,0x3456c772,0x64a72377,0xb9cdc129,
    0x2ea73739,0x9d4ea751,0x5d41753a,0x0ba82ea0,0x70dd46ea,0x59243b87,
    0x864c7247,0x543d1128,0xd1c9a391,0x84aa68e4,0x1347212a,0x93198c65,
    0xc84aa157,0x730954d1,0x1ab8cc13,0x37915c57,0x771bc8ae,0x9d646f29,
    0x3571642b,0x50d5c6ae,0x43314dd4,0x263571ab,0x52ee9770,0x2a3794bb,
    0x9d4ea753,0xa872a1ca,0xbc872a1c,0x23543791,0x20c82a6a,0x8554220a,
    0x2370cca1,0x26a629a9,0xc88a6a62,0x26139109,0x18ce229a,0x88442215,
    0x4535309c,0x30a209c8,0x00000003,0x001dc000,0x00000000,0x9d4ea000,
    0x2b2a753a,0x32a35951,0x0035951a,0x07929e4a,0x00080022,0x00000004,
    0x00400000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x13300000,0x544330a6,0x02a06550,
    0x2102a251,0x8cd41309,0x5466631a,0x8a8a660a,0x19882660,0x862aa331,
    0x802e2099,0x7062131a,0xa85462e3,0x2a284c40,0x2a154660,0x8a0a0c41,
    0x35086109,0x42621135,0x18530329,0x26130b82,0x22188c18,0x061c8863,
    0xbc8e5433,0x26a655b1,0x84aa3731,0x2a23591b,0x42a21553,0x308dc660,
    0x646b2119,0xba823758,0x0ac96370,0x4276671b,0xb8d4cb1b,0x39142a2a,
    0x90aa8545,0x3ac866e1,0x12c8d5c5,0x20440881,0x45330408,0x0655cc52,
    0x062ee159,0xc85282b2,0x88e72150,0x185c5390,0x2e62a8ae,0x36a3311b,
    0x0ce65951,0x21709541,0x2a71b58c,0x984c2ae4,0x543b03b1,0x44eceb23,
    0x89a39243,0x2227573c,0xab9a391e,0xc8645153,0x98643570,0x912e190d,
    0xa4dc3235,0x43b87749,0x4331dc3b,0x53312898,0x3b10f4f4,0x95514d44,
    0x19144c45,0x4325e42a,0x30c7239d,0x5ccab659,0x11ab8a1b,0x4504d445,
    0x2e3709c8,0x36e95739,0x198dc751,0x70d41373,0x9b983257,0x2ab982a4,
    0x25488a2e,0x64535319,0x8641534a,0x74c3200c,0x812f2190,0xd509590c,
    0x2a3546a8,0x49a86ae6,0x438b8e26,0x8ee261aa,0xa4d44cbb,0x0c142a4b,
    0x1826a157,0x446ae135,0x0000a1ab,0x01000000,0x104000d4,0x00e44000,
    0x00000004,0x00000000,0x4f253c94,0x11e4a792,0x04002020,0x2a010000,
    0x00000001,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x555154c0,0x0aa2994c,0x32980a53,
    0x2624c535,0x15540510,0x84cc1102,0x26153199,0x4c53530a,0x20c35319,
    0x0a628a08,0x18110c26,0x85099826,0x0c451189,0x2662188a,0x04154510,
    0x8aaa2ab8,0x1933099a,0x18aa8caa,0x13044115,0xa84c66ea,0x4c2aa62a,
    0xaa82ea2a,0x4771d13a,0x220dd42a,0x26ea752a,0x06443224,0xdaa8554b,
    0x2c477060,0x1b962515,0x0b89326e,0x5caea757,0xa8a3310a,0x51426132,
    0x0cc2ea55,0x4e6e0111,0x2282b22b,0x54aee60c,0x8187751b,0x2aaa1ab8,
    0x2a21b753,0x1e883624,0x220802ea,0x1baa820c,0x52d54175,0x8a555439,
    0x50aa39ca,0x750aa8bb,0x5c512b2a,0x2a75161d,0x545950cc,0x56407666,
    0x66d64370,0x12564210,0x00108ccc,0x426a084c,0x77000208,0x642b86a9,
    0x8ed64770,0x54b751bc,0x70664c2c,0x3a1dc957,0x712a1640,0xa8321a80,
    0x1654d950,0x8d654375,0x57150ccb,0xba8ce5c9,0x2a75184b,0x4476e49b,
    0x2e0cd11c,0x792860cc,0x00000000,0x00000000,0x00dc0000,0x4b800032,
    0x2ee515d4,0xc806f2e2,0x8a8ee29c,0x2111102d,0x5dc07208,0x03b8753b,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x42660000,0x382552a9,0x26331c62,0x98ccae2a,0x0000002a,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x20000000,0x50553099,
    0x06154004,0x00000154,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_bold_6_latin1_x[224]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__times_bold_6_latin1_y[224]={ 4,0,0,0,0,0,0,0,0,0,0,0,3,2,
3,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,1,0,1,0,1,0,1,0,0,
0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,2,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,0,0,0,0,
0,0,0,0,0,1,1,2,0,-1,0,0,0,0,0,1,0,1,3,0,0,1,0,0,0,1,-1,-1,-1,-1,
-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,1,0,-1,-1,-1,-1,-1,0,0,0,0,
0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,
 };
static unsigned short stb__times_bold_6_latin1_w[224]={ 0,2,3,3,3,6,5,2,2,2,3,3,2,2,
2,2,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,5,4,4,4,4,4,4,5,5,2,3,5,
4,6,4,5,4,5,4,3,4,4,4,6,4,4,4,2,2,2,3,4,2,3,3,3,3,3,3,3,3,2,
3,4,2,5,3,3,3,3,3,2,2,3,3,4,3,3,3,2,1,2,3,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,2,3,3,3,3,
1,3,2,4,2,3,4,2,4,4,2,3,2,2,2,4,3,2,2,2,2,3,4,4,4,3,4,4,4,4,
4,4,7,4,4,4,4,4,2,2,2,2,4,4,5,5,5,5,5,3,5,4,4,4,4,4,4,3,3,3,
3,3,3,3,4,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
 };
static unsigned short stb__times_bold_6_latin1_h[224]={ 0,5,3,5,5,5,5,3,6,6,3,4,2,2,
2,5,5,4,4,5,4,5,5,5,5,5,4,4,4,2,4,5,6,4,4,5,4,4,4,5,4,4,5,4,
4,4,5,5,4,5,4,5,4,5,5,5,4,4,4,5,5,5,3,2,2,4,5,4,5,4,4,5,4,4,
6,4,4,3,3,4,5,5,3,4,5,4,4,4,3,5,3,6,6,6,1,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,4,4,
6,6,2,5,2,3,2,2,5,2,3,4,3,3,2,5,6,2,3,3,2,3,5,5,5,5,5,5,5,5,
5,5,4,6,5,5,5,5,5,5,5,5,4,6,6,6,6,6,6,3,5,6,6,6,6,5,4,5,5,5,
5,5,5,5,4,5,5,5,5,5,4,4,4,4,5,4,5,5,5,5,5,3,4,5,5,5,5,6,6,6,
 };
static unsigned short stb__times_bold_6_latin1_s[224]={ 255,186,182,174,42,46,53,220,13,20,239,
169,16,33,22,76,79,156,148,83,152,90,94,103,107,111,89,81,135,6,160,
120,76,173,164,154,112,107,97,172,142,139,64,129,124,117,196,201,102,182,92,
188,84,124,159,35,67,62,57,68,87,151,216,1,251,26,132,17,136,9,5,
164,249,246,28,237,234,194,204,222,168,192,190,253,129,1,72,52,178,178,186,
66,71,73,39,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,255,148,144,
140,211,230,69,16,10,115,36,212,28,33,98,246,223,35,229,243,19,71,103,
13,226,232,25,235,59,30,25,21,16,11,6,1,250,245,39,98,232,227,222,
217,214,211,208,205,47,23,32,38,44,60,87,200,168,50,55,82,93,147,30,
139,135,237,127,241,119,201,21,164,143,111,123,115,13,219,226,215,107,207,156,
160,152,178,182,208,242,189,193,197,131,9,5,1, };
static unsigned short stb__times_bold_6_latin1_t[224]={ 1,1,13,1,8,8,8,13,1,1,13,
13,19,19,19,8,8,13,13,8,13,8,8,8,7,7,14,14,13,19,13,
7,1,13,13,7,13,13,14,7,13,13,8,13,13,13,7,7,14,7,14,
7,14,7,7,8,14,14,14,8,8,7,13,19,13,14,7,14,7,14,14,
7,7,7,1,7,7,13,13,7,7,7,13,7,7,14,14,14,13,7,13,
1,1,1,19,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,7,7,
7,7,7,1,1,19,7,19,13,19,19,8,13,13,14,13,13,19,8,1,
19,13,13,19,13,8,8,8,8,8,8,8,8,1,1,14,1,1,1,1,
1,1,1,1,1,14,1,1,1,1,1,1,13,1,1,1,1,1,1,14,
1,1,1,1,1,1,1,14,1,1,1,1,1,14,7,7,7,1,7,1,
1,1,1,1,13,7,1,1,1,1,1,1,1, };
static unsigned short stb__times_bold_6_latin1_a[224]={ 22,29,48,43,43,87,72,24,
29,29,43,49,22,29,22,24,43,43,43,43,43,43,43,43,
43,43,29,29,49,49,49,43,81,63,58,63,63,58,53,67,
67,34,43,67,58,82,63,67,53,67,63,48,58,63,63,87,
63,63,58,29,24,29,50,43,29,43,48,38,48,38,29,43,
48,24,29,48,24,72,48,43,48,48,38,34,29,48,43,63,
43,43,38,34,19,34,45,67,67,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,22,29,43,43,43,43,19,43,
29,65,26,43,49,29,65,43,35,48,26,26,29,50,47,22,
29,26,29,43,65,65,65,43,63,63,63,63,63,63,87,63,
58,58,58,58,34,34,34,34,63,63,67,67,67,67,67,49,
67,63,63,63,63,63,53,48,43,43,43,43,43,43,63,38,
38,38,38,38,24,24,24,24,43,48,43,43,43,43,43,48,
43,48,48,48,48,43,48,43, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_6_latin1_BITMAP_HEIGHT or STB_FONT_times_bold_6_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_6_latin1(stb_fontchar font[STB_FONT_times_bold_6_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_6_latin1_BITMAP_HEIGHT][STB_FONT_times_bold_6_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_6_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_6_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_6_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_6_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_6_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_6_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_6_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_6_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_6_latin1_s[i] + stb__times_bold_6_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_6_latin1_t[i] + stb__times_bold_6_latin1_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_6_latin1_x[i];
            font[i].y0 = stb__times_bold_6_latin1_y[i];
            font[i].x1 = stb__times_bold_6_latin1_x[i] + stb__times_bold_6_latin1_w[i];
            font[i].y1 = stb__times_bold_6_latin1_y[i] + stb__times_bold_6_latin1_h[i];
            font[i].advance_int = (stb__times_bold_6_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_6_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_6_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_6_latin1_s[i] + stb__times_bold_6_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_6_latin1_t[i] + stb__times_bold_6_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_6_latin1_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_6_latin1_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_6_latin1_x[i] + stb__times_bold_6_latin1_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_6_latin1_y[i] + stb__times_bold_6_latin1_h[i] + 0.5f;
            font[i].advance = stb__times_bold_6_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_6_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_6_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_6_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_6_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_6_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_6_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_6_latin1_LINE_SPACING
#endif

