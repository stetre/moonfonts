// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_20_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_20_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_20_usascii_BITMAP_WIDTH         256
#define STB_FONT_consolas_20_usascii_BITMAP_HEIGHT         66
#define STB_FONT_consolas_20_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_20_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_20_usascii_NUM_CHARS             95

#define STB_FONT_consolas_20_usascii_LINE_SPACING          13

static unsigned int stb__consolas_20_usascii_pixels[]={
    0x0c0023f3,0x30400600,0x26621333,0x80764019,0x4401cedb,0x23d3000c,
    0x36a001e9,0x42eb83de,0x52ddeeca,0x5d44003d,0x202f3a01,0x41d904e8,
    0x96c43eea,0x1dfda8ea,0xec81e980,0xd10eeeef,0x003d5005,0x21dddb30,
    0x6c7e63fb,0x05f301cf,0x7d407ee0,0x9ffff15f,0x403ffff2,0xbed83ff8,
    0x1ea02fca,0x02f46d80,0xefecefc8,0xffc8fee0,0x3f72fecc,0x3fffee00,
    0x05ffdd03,0x25f881fd,0x321fcbf9,0x337f3ee6,0x17d400ff,0x3bf2aff6,
    0x7007f30c,0xffa8003f,0x4fff1dcd,0x0fd711f9,0x3ea007ec,0x417df305,
    0x3f94f999,0x40db8033,0x4c3e40ed,0x4402cfec,0x2007dc3f,0x727e44fa,
    0xf513e67f,0x22007ee5,0x401fd15f,0x1fdc1fe9,0x3e6b8bea,0x7fdc3f33,
    0xf500fea1,0x1f61fcc5,0x3f7007f3,0x700fe800,0x260fcc7f,0x40df102f,
    0x3f900ef8,0x00f94f80,0xf881fa80,0x3bffff62,0x2207e406,0xe83f404f,
    0x0fe4bee7,0x00fdcbea,0x03f71fcc,0x37c45f88,0x3a7c83f6,0x82fb89d3,
    0x717d405f,0x260fc83f,0x01fb803f,0x26002fc0,0x2604f81f,0x403f904f,
    0xf94f807c,0x3bbbba60,0x4d81760e,0x401367f7,0x440f904f,0x2e3f904f,
    0x5f50fd2f,0x37f6a7ee,0x0fb27c41,0x47f21fa0,0x667d44f8,0x7dc0fc9f,
    0x76d46e81,0x13e62fee,0x543f98fd,0x3aa7ee4e,0x013e00bf,0x09f03f30,
    0x27c40fc8,0x53e01b20,0x9999307c,0x5c7e23fd,0xfb5c9efe,0x3ea00fa1,
    0x2605f301,0x2a5f703f,0x5f50dd2f,0x3f37f3ee,0x7ed7f40f,0xf309f002,
    0x3ae07ee9,0xfb82f9ad,0x3ff26f81,0x7f42fecc,0x7cc2fecd,0xbf717ea3,
    0x544df99f,0x2aaadfba,0x2fc0fcc0,0x5f70bea0,0x4f806d80,0x8fdc00f9,
    0x1f97f57a,0x17cff2b9,0x1b602f40,0x2fa817d4,0x2e1ba5f5,0x543ff72f,
    0x0f7fcc3f,0x407fb2a0,0x3a00dd7e,0xf983f705,0x2fa89f35,0x07372fea,
    0x42fd4fe6,0x43f21ffb,0xfffffff9,0x40fcc07f,0x21fcc06d,0x02f400fd,
    0x2007ca7c,0x576b91fb,0x3fe2d77b,0x17cc01fe,0x3ea07ea0,0x3ea5f503,
    0x7fcc3f92,0x4bf05f72,0x12e5ffe8,0xfb802ffe,0x0fc803fb,0x2fb83f70,
    0x22fa83f9,0x57f3007c,0x50bee0bf,0xa813e05f,0x2a07e62e,0x8bf00acf,
    0x5f95107f,0x01f29f00,0x3e9b1fb8,0xc8972d93,0x1f203fff,0x1fcc27c0,
    0x23f51fb8,0xfdfcaef9,0x4dd03f72,0xdd4fc8fe,0xff1007f0,0x8af9801f,
    0x2b3ee1cc,0x21fa5fda,0x3bfee2fa,0x6fcc1ccc,0x307ee05f,0xf813e07f,
    0x5407e67f,0xf8fb02ff,0x005ff505,0x7003e53e,0x4be73a3f,0xdf50b95e,
    0x03f881df,0x6f881f70,0x50fd4fd0,0x25f35dff,0xf36e81fb,0x42fd7f47,
    0x0bf9003f,0xfbbf1bd0,0x3bfffee3,0x17d43743,0xffdddff1,0x0ff5fcc9,
    0x1fcc1fb8,0x93f204f8,0x0afb81f9,0x40df1fa0,0x4f803fa8,0x8fdc00f9,
    0x29f2f9be,0x9f76c83e,0xf1000fb8,0xfa85fb07,0xf5040623,0x57e07ee5,
    0x3ffe22fa,0xfb000982,0x7b8fb803,0x200fdcfe,0x362fb87e,0x987f440f,
    0xb81fe8bf,0xf81fcc1f,0x07e60404,0xb1be0176,0xf00bb00f,0xfb801f29,
    0x3eabe9d1,0x15d80f9c,0x4005e8bf,0xacff986d,0x00a20efc,0x20fdcbea,
    0xa89f32fb,0x800a80ff,0x9fc405fa,0x0fdd3a6c,0xff987f20,0x33f41be2,
    0x703fe27f,0xf03f983f,0x81f98009,0x227cc04f,0x03e401fb,0x2007ca7c,
    0x3f69b1fb,0x9d04ffbf,0x01fa93ee,0x6cc17cc0,0x7ec0cfff,0xfb97d404,
    0x745fc9ad,0x5fffcacf,0xca9837d4,0x536c00ef,0x3ee5f55f,0x65ffcc01,
    0x37f62fcf,0x263fda9a,0xb83be63f,0xf81fcc1f,0x40fcc004,0x217dc04f,
    0x03e403f9,0x2007ca7c,0x84cb91fb,0x77e6f419,0x01b60efe,0x5f502f40,
    0xf500ff20,0x3bfff665,0xdfffc883,0x1be64fc8,0x5c0277d4,0x727fe40f,
    0xdff5003f,0x7e445f15,0x7cc2dfff,0xfb877d43,0x4f81fcc1,0x7c0fcc00,
    0x6f837404,0xa7c03e40,0x43f6007c,0xfd9000fa,0x7c417dff,0x01f50003,
    0x10cc7be2,0x04000000,0x00000080,0x00400000,0x00000000,0x0fcc0000,
    0x05f9027c,0x07c813ea,0x400f94f8,0x20027c6f,0x00f901f9,0x3ea04f80,
    0x00005fff,0x00000000,0x00000000,0x00000000,0x98000000,0x981fcc1f,
    0x817e405f,0xca7c01fa,0xfd759907,0xa99cfa85,0x000f501c,0x75100000,
    0x00000005,0x00000000,0x00000000,0x00000000,0x47e60000,0xf880fec9,
    0x00fd800e,0x2aa239df,0x555f94fa,0x0bbffee1,0x0677fecc,0x00000298,
    0x00000000,0x00000000,0x00000000,0x00000000,0x30000000,0x4077f63f,
    0x1d1000e8,0x7c57ae60,0xfff94fff,0x0000001f,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x1f980000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xed800000,0x175403ee,0x6d4016a0,
    0xdddd03de,0x3b6a09dd,0x6e5c403d,0x0cefeb86,0x36e03fb8,0x76dc1dee,
    0x777744ef,0x3209b3ee,0xdeedb885,0x077bfb22,0xddddddd9,0x76413a69,
    0x3a203d90,0x0b7b7224,0xaa6c01d9,0x2a0ba00e,0xc83ec85d,0xbd307b65,
    0x809f9990,0x03e405fd,0x77f677e4,0x777777c0,0xfdcefb84,0xdddff704,
    0xffdcdfe8,0x7443ffc0,0x3a5edcef,0x746dcdef,0xbf4feeee,0xdfd31f60,
    0x6674ddb9,0x3bb22ffd,0x365feeee,0xf327d42f,0x74c7f20b,0x2e2ffcdf,
    0x2e7f302f,0xe98fe00f,0x87fe86ff,0xfb13fe6d,0x2027c40f,0x03e401d9,
    0x89f713ea,0x44f9804f,0x067dc1fc,0x1fdc3fa8,0x0bfa0fee,0x4001fdc6,
    0x360bf4f9,0x0607fe27,0xfe806f98,0x1fd1be21,0x2fcc2fd8,0x266f8832,
    0x2a1f905f,0x2e5f101f,0xfe86faef,0xfdf36c3f,0xf103f7c4,0x774c0009,
    0x22eeeeff,0x4f8fd07e,0x7c40fc80,0xf7017e25,0x7002fa83,0x00fd807f,
    0x0bf4f980,0x002fc9f6,0x3fb80dd0,0x05f73fb8,0x00fd8df1,0x41fa0fd8,
    0x4407ea6f,0x437c712f,0xf36c6dde,0x1efee5f7,0xddb04f88,0xfd99307d,
    0x3e239999,0x27c3f904,0x3fa22f40,0xf1007ea6,0x003f621d,0x3f2007ec,
    0xf4f98004,0x06f9f60b,0x4409f100,0x3ebfa06f,0x7ccbf205,0xfb8fb004,
    0x3f31fcc2,0x80fcc2a2,0x2fade86f,0xaf57c5b6,0xf100fbce,0x13f33209,
    0x1fcc0f90,0x33be2fb8,0x2a4f80bc,0x2bf27eef,0x7d40ceec,0x2001fecf,
    0xefe8806e,0x7d3e6002,0x93e2fb05,0x4c409998,0x3f600deb,0x03ffe601,
    0x01fb6f88,0x4f98bf10,0x25f307e4,0x203f32fa,0x4dd5e86f,0x3f75f16d,
    0x2201f53f,0x027c404f,0x02fa81f2,0x7f7745f5,0x653e23ff,0xfb0fc8df,
    0x83ff99bf,0x0204fffb,0xffc8017e,0xf4f9803f,0x1fcdf60b,0xfe8dfff7,
    0x7f700cff,0x700bfb00,0x36007fbf,0x3747e81f,0xaafecbe2,0xbd0df00f,
    0xf9b6cbee,0x1f56ef89,0xf1013e20,0x2a07c809,0x405f503f,0x3b7e0ff9,
    0x0fd9f23f,0x5bf72fcc,0x89f90bfd,0x75c4006f,0xfa7cc06f,0x8fe6fb05,
    0x4c46eaa8,0x7c40efb9,0x1fff9806,0x9006fe80,0x4c7ee07f,0xdf8bf83f,
    0xdf00fa8f,0x6db7cbd0,0x54ff63f3,0x809f101f,0x03e404f8,0x03ee07f3,
    0x77fc5f90,0x20fb3ec1,0xfc89f57e,0x1fa3ff43,0x203fc800,0x3a0df4f9,
    0x1ba09f17,0x1fd87f50,0x06f9fe80,0xfc803fb8,0x7dd3e604,0xf8fabf80,
    0x21be07bb,0x5b67ee5e,0x2a1d51f9,0x809f101f,0x07e404f8,0x0fd06f88,
    0x07ec5f50,0xd01f92fc,0x17e21f2d,0x17ec1ff3,0x204f8800,0x3e0dd3fa,
    0x1ba03fe5,0x1fd47f30,0x3fb9fdc0,0x32017d40,0xdd7e804f,0x76d373e0,
    0x3a1be07b,0x55b77e25,0x203f301f,0x27c404f8,0xfc80bea0,0x6c01fd42,
    0xf70fea0f,0x3e21fcc5,0x5f881fb4,0x077cc6f8,0x901fd400,0xf503f65f,
    0x37427d49,0x37c47f20,0x3fa37cc0,0xc80bea00,0xf7f7003f,0x5cbf7a07,
    0x21be06df,0xab77e45e,0x205f301f,0x27c404f8,0x0d55f7c0,0xdf959ff3,
    0xfebaaa88,0xfcabfe82,0xea9bfe85,0x757df50f,0x17e443fd,0x6dd67fe4,
    0xf95559b5,0x36b3e61d,0x2afbe66f,0x77ec0ffc,0x5536fbac,0x7ec9fb55,
    0x23cccccd,0x02fd41fe,0x3fee05f5,0x983ccccc,0xffb00fff,0x99137fc4,
    0x3a799ff9,0xfbb7fc45,0x5445f300,0x11aadfba,0x355bf755,0x0bfff6a0,
    0x309fffb1,0x203bffff,0x104fffd8,0xa81bfff9,0x321efffe,0x3faa02ff,
    0xfffb2dff,0x7ec419ff,0x7f4c0cff,0xfd700dff,0x3fea7dff,0x7ff42eff,
    0xf76fffff,0x540bf609,0xffff902f,0x3fa0dfff,0xfb13f606,0x7ffffccb,
    0xfb0bd5ff,0x7cc03eed,0x3ffffea3,0xffff53ff,0x01007fff,0x00988010,
    0x00100040,0x20004406,0x20026200,0x98001000,0x00009880,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xb0000000,0x9ddddddd,0x49d307aa,
    0xeeeeeee8,0xdddd30ee,0x41363ddd,0x9bddd35c,0xdddddb03,0x7777741d,
    0x9bddb0ee,0x2e4b8015,0x5ef77544,0x00276401,0xeea83dd3,0x03642cde,
    0x985bdb70,0xa8370003,0xedb83efd,0xfb700cef,0xdfb701bd,0x3d500009,
    0x776c2e98,0xf75feeee,0xd1077c43,0xddddfddd,0x3bfbba61,0x3a0dd1ee,
    0xffdddf57,0xeeeeff87,0x3bbbfe0e,0xdddff0ee,0xb2ec05ff,0xeeeefb8b,
    0x1fff104f,0x707ffa00,0x4bffd9bf,0x79fd007d,0x027e47fb,0xdfc93f20,
    0x66f46fca,0x7f446feb,0x7ec0eccd,0x200efdbd,0x83f702fa,0x7f3003f9,
    0x00fe87ee,0x7d4017d4,0x2fd06e82,0x83fe22fa,0x405f805f,0x80ff4c5f,
    0x3f713a4d,0xcfa80fd8,0xfcfc803f,0xfb10fdc1,0x3f201f67,0xbf707ec1,
    0x23fd8801,0x017d43f9,0x02fd87f2,0x13ea17dc,0x3f702fa8,0xfb003f98,
    0x01fc8fdc,0xfa802fa8,0x2fd06e82,0xf0fe42fa,0xf80bf00b,0x6645f985,
    0x2cefccef,0x82fa83f7,0xf980bf7d,0x0fdc1fbb,0x403ed7e6,0x543f986e,
    0x5fd100ef,0x05f80fc8,0x04f897d4,0x40dd06e8,0x83f702fa,0x3f9803f9,
    0x00fea7ee,0x7d4017d4,0x2fd06e82,0xf07ec2fa,0xf80bf00b,0x7744fb05,
    0x3eefeeef,0x40fc83f7,0x401fb4f8,0xfb83f76e,0x00fb6f81,0x309f10df,
    0x0ef983fd,0xcccccfd8,0x776dcc6f,0xf005f52f,0xfa81f60b,0xf983f702,
    0x7dc7d803,0x3ea004fb,0xe82fa802,0x7eaaaaae,0x13ee65f5,0x813333df,
    0x22aaaaef,0x881f905f,0xfb83f12f,0xa83fcaac,0x2e07f51f,0xfb83f71f,
    0x07da7d41,0x05f80fe8,0x3bea5fd1,0x9999fd00,0x667f4799,0x07f52fdc,
    0x89f60bf0,0xffffffff,0xf983f70f,0x2e1fcc03,0x2a000fff,0x82fa802f,
    0xfffffffe,0x7fffff57,0xdffffff0,0x7ffffff8,0x20fe417e,0xb81f31f9,
    0x81efffff,0x2217e27d,0xf707ee4f,0x6c3fae63,0xaaefa807,0x9f905feb,
    0x3fb04fc8,0x7d42f980,0xdd00bf32,0xaaa89ba0,0x50aaacfc,0x403f983f,
    0x7dfdc0fd,0x00bea006,0x27ba0bea,0xf57e9999,0xdf05fb59,0xdf855555,
    0x17e19999,0x43e60fe4,0x99afb87a,0x17e22fea,0x5c6d81fb,0x7fffdc1f,
    0x401f61ef,0x3fbeffea,0xfb81fec4,0x2027dc0d,0x897e40fc,0x0fe400ff,
    0x2fa80fe6,0x7f447f10,0x2e13e603,0x5004fa9f,0x05f5005f,0x7d5fa0dd,
    0x0bf03fa2,0x05f80bf0,0x77f75cfb,0x3ee6efee,0x9f52fc41,0x545fb555,
    0xcfcaaacf,0x1559f71a,0x4c000fb0,0x00bfa22f,0xefe81df5,0xbf71ba9b,
    0x545ffd73,0x20daadff,0xefbabff8,0xe80bea00,0x03feeabf,0x47ee03f6,
    0x2fa803fc,0x6e82fa80,0xa8beafd0,0x7c02fc4f,0x7cc2fc05,0x2abf6a65,
    0x07ee2aed,0x7ffecdf1,0x3f25ffff,0xffffffff,0x7d803f73,0x4c3f2000,
    0xfd3001ef,0x7fffe443,0x33fff21e,0x7ff542f9,0x7fec40ef,0x17d400cf,
    0xf19ffb30,0x5c13e607,0x5007fa1f,0x05f5005f,0x7d5fa0dd,0x0bf07f42,
    0x45f80bf0,0x26c81fe8,0x5c1fb85c,0x333bf14f,0x2621fd33,0x9bfb9999,
    0x7d803f70,0x5c7f7000,0x26c4000d,0x00040188,0x10004002,0x00110015,
    0x0fdc03f6,0x7d401ff1,0x9f955102,0x741ba155,0x3fa85f57,0x2bbe017e,
    0x9ff0aaaa,0x3605ffb9,0x33ee1365,0xf50efeba,0x700bee05,0x401fb83f,
    0x1aaaaafd,0x13fb32a2,0x00000000,0x00000000,0x3e600000,0xf507ee04,
    0xa817d40b,0x2fffffff,0x7d5fa0dd,0x017e7e82,0x3ffffffe,0x19dffff1,
    0x709d26c0,0x417dffff,0x0bf100fd,0x0fdc1fb8,0x3fffff60,0x33bbe64f,
    0x00000001,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xa8000000,0x3a63effe,
    0x10eeeeee,0xdb15f91d,0x6c41ec83,0x2deb9745,0x5ff54754,0x76413a20,
    0x83e80d70,0x500400e8,0xbbbb703b,0x0a887bbb,0x3ea9f5c0,0x3b2005d7,
    0x55555542,0x2222aaaa,0x00000088,0x00000000,0xbf900000,0x66447977,
    0xf10ffccc,0xddb9dbb9,0x0fec6f98,0x3fb3b73e,0x373f3ee2,0x2207f46f,
    0x4403ee5f,0x087c423f,0xddd03fd8,0x99999970,0x17ffdc79,0x54fee3d3,
    0x7ec5f94f,0x7fc7f903,0xffffffff,0x5fffff57,0x00000000,0x00000000,
    0x7000bf00,0x547fc45f,0x9f70f76f,0x17fe0fea,0x90ffdc9f,0x2a17dc1f,
    0x1447e62f,0xbcfe25f3,0x43ff40fb,0x0003f8eb,0x27fb3bf1,0x2a7f70fb,
    0x3e25f73f,0x002e607f,0x5ddddcc0,0x00000001,0x00000000,0x001ef800,
    0x29f113e6,0xb01f72f9,0x1be0bf5f,0x542fb9b6,0xfb17e22f,0x25f52f88,
    0x3fb660fa,0x47fa82ee,0x4c1f72f8,0x1aaaaaaa,0x7ffec3f3,0x9fccbea5,
    0x013f61fb,0x00000000,0x00000000,0x40000000,0x200beffa,0x33f886f8,
    0x2203ee3f,0x09f00ffe,0x3f983f70,0x84f887e4,0x1eebfb3f,0x4403bfa2,
    0x97a2e45f,0xfffffffc,0x30f2a024,0x754ba23d,0x00000040,0x00000000,
    0x00000000,0x3ae20000,0x01fd03ff,0x5c7e67f1,0x40dfd00f,0x41fb804f,
    0xb9fcc3f9,0xcf8ce81f,0x3f226c8f,0x220cfbfb,0x507e61fd,0x4444443f,
    0x00000008,0x00000000,0x00000000,0x00000000,0x07f4c000,0x9fc40bf2,
    0x901f71f9,0x13e09f9f,0x7f307ee0,0x6c1badd0,0x5dbf8fad,0x258bc362,
    0x814c1efc,0x0000002b,0x00000000,0x00000000,0x00000000,0xf7000000,
    0xf1027d43,0x07dc7e67,0x417e53ea,0x41fb804f,0xfbfb83f9,0x369bd902,
    0x01f104ed,0x00000011,0x00000000,0x00000000,0x00000000,0x00000000,
    0x3eeaab22,0x2aabfe26,0x267f11aa,0x7c41f71f,0x13e0ff46,0x7f307ee0,
    0x5c0fff10,0x07ff51ff,0x000002a2,0x00000000,0x00000000,0x00000000,
    0x00000000,0xffff1000,0x7ffd41bf,0x7f13ffff,0x887dc7e6,0x077cc1fe,
    0x83f7009f,0x09fb03f9,0x0bfe3fd4,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x0000cc40,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_20_usascii_x[95]={ 0,4,2,0,1,0,0,4,2,2,1,0,2,2,
3,1,0,1,1,1,0,1,1,1,1,0,4,2,1,1,2,2,0,0,1,0,1,1,2,0,1,1,1,1,
2,0,1,0,1,0,1,1,0,1,0,0,0,0,1,3,1,2,1,0,0,1,1,1,1,1,0,0,1,1,
1,1,1,0,1,0,1,1,1,1,0,1,0,0,0,0,1,1,4,2,0, };
static signed short stb__consolas_20_usascii_y[95]={ 14,0,0,1,-1,0,0,0,-1,-1,0,3,10,7,
10,0,1,1,1,1,1,1,1,1,1,1,4,4,3,6,3,0,0,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,0,-1,1,16,0,4,0,4,0,4,0,4,0,0,
0,0,0,4,4,4,4,4,4,4,1,4,4,4,4,4,4,-1,-2,-1,6, };
static unsigned short stb__consolas_20_usascii_w[95]={ 0,3,7,11,9,11,11,3,7,7,9,11,6,7,
5,9,11,9,9,9,11,9,9,9,9,10,4,6,8,9,8,8,11,11,9,10,10,9,8,10,9,9,8,10,
8,11,9,11,9,11,10,9,11,9,11,11,11,11,9,6,9,6,9,11,7,9,9,9,9,9,11,11,9,9,
8,10,9,11,9,11,9,9,10,9,10,9,11,11,11,11,9,8,3,8,11, };
static unsigned short stb__consolas_20_usascii_h[95]={ 0,15,5,13,18,15,15,5,20,20,9,11,8,3,
5,17,14,13,13,14,13,14,14,13,14,13,11,14,12,6,12,15,19,13,13,14,13,13,13,14,13,13,14,13,
13,13,13,14,13,17,13,14,13,14,13,13,13,13,13,20,17,20,7,3,5,11,15,11,15,11,14,15,14,14,
19,14,14,10,10,11,15,15,10,11,14,11,10,10,10,15,10,20,21,20,5, };
static unsigned short stb__consolas_20_usascii_s[95]={ 255,116,143,95,74,173,140,139,22,14,90,
231,100,177,151,84,54,222,188,144,129,44,66,1,76,160,250,86,180,117,171,
152,62,117,107,93,84,74,65,133,44,34,114,11,151,242,232,32,141,104,54,
104,22,123,198,210,164,176,154,46,94,39,107,165,157,199,130,209,195,189,238,
205,228,11,53,217,1,21,56,219,185,120,45,1,21,243,66,78,33,161,11,
30,1,5,127, };
static unsigned short stb__consolas_20_usascii_t[95]={ 1,1,52,38,1,1,1,52,1,1,52,
38,52,52,52,1,23,23,23,23,38,23,23,38,23,38,1,23,38,52,38,
1,1,38,38,23,38,38,38,23,38,38,23,38,38,23,23,23,38,1,38,
23,38,23,23,23,23,23,23,1,1,1,52,52,52,38,1,38,1,38,1,
1,1,23,1,1,23,52,52,38,1,1,52,52,23,38,52,52,52,1,52,
1,1,1,52, };
static unsigned short stb__consolas_20_usascii_a[95]={ 176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_20_usascii_BITMAP_HEIGHT or STB_FONT_consolas_20_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_20_usascii(stb_fontchar font[STB_FONT_consolas_20_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_20_usascii_BITMAP_HEIGHT][STB_FONT_consolas_20_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_20_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_20_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_20_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_20_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_20_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_20_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_20_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_20_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_20_usascii_s[i] + stb__consolas_20_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_20_usascii_t[i] + stb__consolas_20_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_20_usascii_x[i];
            font[i].y0 = stb__consolas_20_usascii_y[i];
            font[i].x1 = stb__consolas_20_usascii_x[i] + stb__consolas_20_usascii_w[i];
            font[i].y1 = stb__consolas_20_usascii_y[i] + stb__consolas_20_usascii_h[i];
            font[i].advance_int = (stb__consolas_20_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_20_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_20_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_20_usascii_s[i] + stb__consolas_20_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_20_usascii_t[i] + stb__consolas_20_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_20_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_20_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_20_usascii_x[i] + stb__consolas_20_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_20_usascii_y[i] + stb__consolas_20_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_20_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_20_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_20_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_20_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_20_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_20_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_20_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_20_usascii_LINE_SPACING
#endif

