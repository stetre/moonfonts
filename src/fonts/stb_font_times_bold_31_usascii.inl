// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_31_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_31_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_31_usascii_BITMAP_WIDTH         256
#define STB_FONT_times_bold_31_usascii_BITMAP_HEIGHT        122
#define STB_FONT_times_bold_31_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_bold_31_usascii_FIRST_CHAR            32
#define STB_FONT_times_bold_31_usascii_NUM_CHARS             95

#define STB_FONT_times_bold_31_usascii_LINE_SPACING          20

static unsigned int stb__times_bold_31_usascii_pixels[]={
    0x4001bd50,0xbdefedca,0x7b97e801,0x13b22003,0x400ae910,0x321ccccc,
    0x5401cccc,0x02bdeedb,0x00200000,0x97bbbbb2,0x0403eeda,0x00080008,
    0xacddcb98,0xd9730001,0x0dc39ddf,0xdf00675c,0xff004f88,0xdfc880bf,
    0x0f654c1a,0x0ff4cfd0,0x9007be60,0x4006ec1d,0x3fe2fff9,0x3fa600bf,
    0xefeb99be,0x01d91001,0x9bfdfd50,0x7fec3999,0x304f886f,0x3a69fdd9,
    0xaf7774c2,0x9803dfec,0xeb99befe,0xf91000df,0xf95339ff,0xff983fbf,
    0xa89f104f,0xfff8803f,0x0033ea05,0x47e81f4c,0xff101ffa,0xd80ed807,
    0x2ffc800f,0xff901ffe,0x7fff101f,0x776f7540,0x4ffc81be,0x45ddffd1,
    0x440ffff8,0x32ffa80f,0xf305ffdf,0xffbbbdff,0x7ffe407f,0x03fff880,
    0x301fffd4,0xffc83ffd,0xc85f506f,0x3ff7001f,0x4000bf60,0x7c47e82d,
    0x03ff704f,0xef881fe4,0xf17fe400,0x7ffe40ff,0x0fffe601,0xfaadd7f2,
    0x83ffea2f,0xff903ffc,0xf984a87f,0x17ffec5f,0x2e4ffff8,0xffc81fff,
    0x3ffee01f,0x0dfff503,0xfb83fd10,0x83f906ff,0x9004007d,0x7440003f,
    0x3fe63f40,0x205ffb06,0x37ec07fb,0xff8bff20,0x0dfff307,0x541fffd0,
    0x7d4b70ff,0xf71fff62,0x3ffe20ff,0x3fe20ec6,0x17ffdc2f,0x7c47fff8,
    0x7ffcc5ff,0x0fffe806,0x00ffffc4,0x7fd41f98,0xdf0fb04f,0x0bea0000,
    0xe8570010,0xc82ffd47,0x3ff883ff,0x9017fcc0,0x83ffc5ff,0xc803fffe,
    0x3ff66fff,0x3a2d8b71,0x7ffd47ff,0x25fffb01,0x1fffa868,0xf817ffdc,
    0x7ffe86ff,0x401ffff4,0x7ec5fffc,0x0ec005ff,0x7c0bffe2,0x54027c46,
    0x3e24eeee,0x23bfa605,0x3a241edc,0xa81ffe47,0x1ffb84ff,0x3206ff80,
    0x21ffe2ff,0x801ffffa,0xfd1ffffa,0x2a8b71df,0xff71fff2,0xafffcc0f,
    0x0fffb83b,0xf817ffdc,0xfffd86ff,0x03ffff50,0x23ffff50,0x003ffff9,
    0x8fff404c,0xfffffffb,0x403fffff,0x3ee5fff9,0x931df700,0x74581fff,
    0x9817fec7,0x0fff85ff,0x901ffe80,0x43ffc5ff,0x801ffffb,0xf72ffff9,
    0x980b9dff,0x3fee1fff,0x4ffff404,0x0fffd80e,0xf817ffdc,0xfffd86ff,
    0x03ffff71,0x25ffff30,0x002ffffa,0x754ff900,0xfeeeefee,0xff802eef,
    0x7d417a5f,0x217ffe2f,0xff91fa0c,0x513fe203,0x3f200fff,0x45ff904f,
    0xfffc87ff,0xfff9800f,0xfffff14f,0x27ff500d,0x5400dfe8,0xfd05efff,
    0xfffb81ff,0xb0dfff02,0x3ff21fff,0xff9800ff,0xffff93ff,0x3ea00003,
    0x7d83f905,0x9afffc00,0x26ff882f,0x1b83fff8,0x03ff31fa,0xff70bfe6,
    0x1bff200f,0xfff17fe4,0x00ffffd0,0xc97fffe2,0x01efffff,0x1f7f7f44,
    0x03ffff00,0xf703fff2,0x3ffe05ff,0x3a7ffd86,0xf1007fff,0x3ff6bfff,
    0x300000ff,0x3e1f607f,0xafffc006,0x45ffd07a,0x4481fff9,0x904fb87e,
    0x0dff909f,0x641ffee0,0x21ffe2ff,0x800ffffd,0x5c4ffff8,0x03ffffff,
    0x40006332,0x3e606ffb,0x7ffdc1ff,0xd0dfff02,0x7ffecdff,0xfff9800f,
    0x1ffffb4f,0x817c0000,0x0027c46f,0x43dd7ffe,0x7fdc7ff9,0x507e8b07,
    0x0fb663bd,0xb8037fec,0xffc80fff,0x3f21ffe2,0xf9801fff,0xfe983fff,
    0xfe84ffff,0x7fc40000,0x227ffc03,0xff02fffc,0x7ffc41ff,0x03ffff22,
    0x4ffffea0,0x501ffffb,0xbdddddd9,0x2a621e83,0xbfb999df,0xfff80099,
    0xbffb0d95,0x3884ffe8,0x2bd103f4,0x3ffa01ed,0x1fff7006,0x7fc5ff90,
    0x1ffffb87,0x2ffffa80,0x3fffff60,0x2af7fe60,0x32001aaa,0x7ffdc00f,
    0x2ffffd9c,0x13dffff0,0xffb8bffb,0xffb801ff,0xffff32ff,0xffffb805,
    0xfffb8b04,0xffffffff,0x5fff803f,0x47fff0b9,0x1a82fffa,0x43fd83f4,
    0xffd80dea,0x0fff7006,0x7ff8bff2,0x02ffff88,0x00ffffb8,0x8fffffae,
    0xfffffffa,0x59802fff,0x7ffff700,0x3e05fff7,0xffff9eff,0x7fffc40d,
    0x7fffc802,0x00ffffe2,0x005ffff1,0x3337fb26,0x01cccffc,0x8d75fff8,
    0xfd11fff8,0xe85881ff,0xf704fd87,0x00dff90d,0x7e41ffee,0x641ffe2f,
    0xfd805fff,0x4edc03ff,0x3fa26fff,0xffffffff,0x0016400f,0x2fffb866,
    0x14cdfff0,0x017fff20,0xf90ffff6,0xff880bff,0x3ec001ff,0x7fc0037c,
    0xff98f35f,0x0dff9b1f,0xfa8fd01b,0x87ff101f,0xf9006ffb,0x8bff20bf,
    0xfff107ff,0x7ffcc01f,0x556e0646,0x7ffc47ff,0x2ffffffe,0x00068bae,
    0xf02fffb8,0xf8800dff,0x3e600fff,0xfffd06ff,0x7fffc405,0x7c0dfc81,
    0x40027c46,0x43f15fff,0xcadefff9,0x110e44ff,0x03ff91fa,0xff317fe6,
    0x13ff600f,0xfff17fe4,0x027ffcc0,0x3c81dff9,0x26ff8adc,0x3fea06fa,
    0x0eadff11,0x3ffee000,0x00dfff02,0x409ffd30,0xf100effe,0x3e201fff,
    0x7fcc1fff,0xf513e24f,0xbfff0007,0x3fffa17c,0xd51bff34,0xc8fd0d85,
    0xbff502ff,0xd003ffd0,0x3ff201ff,0xd101ffe2,0xdff907ff,0xadc1d901,
    0x0ffa2ff9,0x7ff47e88,0xf700006b,0x3ffe05ff,0xffb10006,0x04ffc887,
    0x82dffc88,0x541ffff8,0x0bea5fff,0xff0003f9,0x3a6354bf,0x16775c3e,
    0xfb8fd154,0x09ff704f,0xff005ff5,0xf17fe40b,0x3f6a00ff,0x02dffddf,
    0x46dc3bf2,0x17fdc5fd,0xb307b662,0x6400007f,0xff883fff,0x6dc0007f,
    0x2dffddef,0x7ffecc00,0x0bdffecd,0x7e43ffd0,0xf8003ec0,0x001ec5ff,
    0x547e8b00,0x7ff905ff,0xf5017fa0,0x17fe403f,0xf9800fff,0xd9804fff,
    0x2effeeff,0xbffdd910,0x00000059,0x3fffff26,0x3ffffa65,0xa880003d,
    0x3100000a,0x4c003355,0x015414c0,0x445fff80,0x6c40001f,0x3fe63f41,
    0x203ffb05,0x3fa01ff9,0xf17fe404,0xff9000ff,0x4cc005ff,0x000000dd,
    0x00000000,0x00000000,0x00000000,0x47620000,0x1ea84ffe,0xd03b1000,
    0x703ff88f,0x27d403ff,0xfc804f98,0x001ffe2f,0x03ffffa2,0x00009500,
    0x00000000,0x00000000,0x00000000,0xfc800000,0x2605ffd5,0x0754003e,
    0x077dc7e8,0x5404fe88,0x802f442f,0x1ffe2ffd,0xffffd800,0x000009bd,
    0x00000000,0x00000000,0x00000000,0x80000000,0x00bfd5fa,0x2e6035d7,
    0xc8bf403e,0x7ec400ef,0x4cf6600c,0xffca802e,0x2b7ffe2f,0xeca88000,
    0x00003def,0x00000000,0x00000000,0x00000000,0x00000000,0x0017bfb7,
    0x37b76ea2,0x2fd002cd,0x5cc001bb,0x40032803,0x26099999,0x00009999,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xccb80000,0x990ccccc,0x09999999,0x32e79999,
    0x84cccccc,0x34ccccc8,0x99999999,0x66665419,0xa82fc03c,0xa80bcedc,
    0x00cccccc,0x05999995,0x002b7ae6,0x1ccccc88,0x42f72a00,0x003cccc9,
    0x333332e0,0xddda83cc,0x007f2003,0x16f6dc40,0xdeedb800,0x3fff2203,
    0x7ffd40ef,0x9f9102ff,0x3ffff221,0x77fd401f,0x3fffee21,0x1dfb301e,
    0x6c42fa80,0x2ffc89ef,0x5ffffe98,0x407bf6a0,0x1ffc8cfd,0x3fffa200,
    0x5ffe4402,0x06fff980,0xfffff100,0x5fd87fff,0x7f300bfb,0x2bbe6000,
    0x22006ffc,0xfffe98ce,0x1bfffe01,0x00ffffe4,0xfffb01f3,0xf81b600f,
    0x7cc04fff,0x740fc801,0x07ffc1ff,0x27ffffc4,0x3f203f30,0x003ffe27,
    0x202fffb8,0xff805ff9,0xff70006f,0x41ffffff,0x7ff73ffa,0x80037440,
    0x3ff62ff8,0x4c7fd002,0x3ee06fff,0xff880fff,0x412e03ff,0x802ffffa,
    0x3fffe01f,0x4007c403,0x43ffd45f,0xffd03ffd,0x07c05fff,0x3f637fd4,
    0x3fee006f,0x0bff702f,0x001bffa0,0x7ffffff4,0xa97ff45f,0x07f206ff,
    0x50ffdc00,0xff1009ff,0x01ffff8b,0x207ffff1,0x3a06fffd,0x1bfffa01,
    0xfff80b50,0x400f803f,0x7ffe43f9,0xe827fdc2,0x01fffffc,0x8dff901d,
    0x7001fffb,0xff505fff,0x37ff400d,0x0007c400,0x3fea5fff,0x0007f307,
    0xff11ffec,0x8fff1003,0x3602fffd,0xff506fff,0x80d303ff,0x201ffffa,
    0x7fffc01d,0x6400f803,0x2fffdc0f,0x4740bff2,0x80effffc,0x46ffe80e,
    0x8203fffa,0x7c42fffb,0x3fa002ff,0x2dc0046f,0x4cbffe00,0x06e887ff,
    0x537ff400,0x1fe400bf,0xa803fffa,0xf981ffff,0x03c85fff,0x304ffff8,
    0x7ffff00d,0x6e801f00,0x25ffff98,0x743a07fe,0x0e85ffff,0x7cc7fff8,
    0x7f6445ff,0x42fffbaf,0x2000fffc,0xdff96ffe,0x6f7ff407,0x4fffa00b,
    0x1fc86ffa,0x7ffec000,0x00003fb9,0xfd00bfff,0xffdb0bff,0x800f81ff,
    0xd80ffffc,0x3ffff802,0x3e600f80,0xdffffd03,0x87401bf7,0x43ffffe8,
    0x47fff80e,0x7f47fff9,0xfffedaaf,0x2f7ffe22,0x3fa01cdd,0xfffcdeff,
    0xfffff984,0x7ff703ff,0x7f30ffee,0xfff70000,0x2000019f,0xb800effa,
    0x3e20ffff,0x2a3ffff9,0xffff1005,0xff006887,0x01f007ff,0xfe880fdc,
    0xe806ffff,0x3ffffe60,0x3ffa03a2,0x9bffe61f,0x3fa24ffd,0x3ffee2ff,
    0x02ffffdf,0x7d45fffd,0x7ffe43ff,0x80efffff,0xd0bfb5fd,0x3ea0000d,
    0xffd82fff,0x5fe802ef,0x3fffe200,0x7ffed2e3,0xfd800b66,0x801e46ff,
    0xf803ffff,0xd101ba00,0x807fffff,0x7fffd40e,0xff701d0f,0xafffcc9f,
    0x7dc2fff9,0x3fff62ff,0x03fffd11,0xfff0dffd,0xffffed8d,0xb706ffff,
    0x03f907bb,0x6f644002,0xfc80ffff,0x009f3005,0x74dfffb0,0x13ffff50,
    0xfff9800f,0x7c003e2f,0x0f803fff,0xd8809f10,0x03ffffff,0x3fff203a,
    0x3fa01d6f,0xfffc9cff,0xb83fff74,0x3ffa2fff,0x17ffea1f,0x3fa1bffa,
    0x7fe4c07f,0x98003fff,0x7e7ec43f,0x7c57ea04,0x0fc85fff,0x20007b00,
    0x5a9ffffa,0x25e7fffc,0xaffff400,0x3ffe004b,0x700f803f,0x47fd403f,
    0x01fffffa,0x3fff601d,0x3f600edf,0x1fffefff,0xfb81fff9,0x3fffa2ff,
    0x21bffe21,0xffd86ffe,0xffc8801f,0x46e8004f,0x0dfb4fe8,0x7fdc3ff9,
    0x0017c3ff,0xffe8000d,0x7fe42ddf,0xa8001eff,0x00e9ffff,0x00ffffe0,
    0x303ec0f1,0x7ffd4bff,0x2201d04f,0x00fffffe,0x4dffd198,0x7dc0fffe,
    0x3fffa2ff,0x743fffc1,0xfffd86ff,0x1bff2001,0xfc83f900,0x4c7ff72f,
    0x7ff40fff,0x800992ff,0x7fdc0004,0xfff986ff,0x3fe0006f,0x74005eff,
    0x3c403fff,0x3f204f88,0x37ffdc4f,0x3fe600e8,0x26000fff,0x3ffa3fff,
    0x17ffdc1f,0xfe85fff9,0x86ffe87f,0xf8007ffd,0x13e6004f,0x7fdcbffe,
    0x30ffff26,0x1d7fffff,0x88000000,0xfd03ffff,0x640007ff,0x4001ffff,
    0x4c04fffc,0x7405f506,0x7ffc43ff,0xfa801d06,0x32000fff,0x7ffec5ff,
    0x517ffdc1,0xffe85fff,0xd86ffe85,0xfc8006ff,0x221ba002,0xfff52fff,
    0x542ffff4,0x003fffff,0xffb00000,0x3ffee01f,0x3fe20000,0xffa8006f,
    0xd826405f,0x427ff407,0x01d05ffd,0x001fff70,0xf703bfea,0xfffb85ff,
    0xd13ffe22,0xfffd07ff,0x1309ffd0,0xc8007e40,0x25fff01f,0x3ff67ffa,
    0xfffb83ff,0xf901c3ff,0xffa80009,0x017fe204,0x00bff600,0x07fffe20,
    0x05f80754,0x7f42ffe4,0x002f881f,0xf5001ffb,0xfff101bf,0x17fff44d,
    0xffd1bfee,0x88fffd01,0x7fec0eff,0x26005f03,0x4bffa04f,0x3fea5ffb,
    0x3e60bfff,0xebdfffff,0x05fff702,0x401fe800,0x980002fd,0x3e60006f,
    0xf730afff,0x200bea03,0x3fe61ffe,0x200bf503,0x2e200fe8,0x7fdc03ff,
    0xfffdeacf,0x997fe41e,0xfffd01ff,0x6c0ffe45,0x5b32efff,0x2a037400,
    0x83ff93ff,0xeffffffd,0xffffbcfe,0x3fee04ff,0x35c0003f,0x00003d40,
    0xd880007d,0x1dffffff,0x22003f20,0x2efdcffc,0x4efffea8,0xc980f880,
    0x3ee002ef,0xeffbafff,0xfcfec82c,0x2e37a01d,0x101dfddf,0x3bdffffb,
    0x400fe400,0x03fe8efc,0x9ffffff7,0x2ffff4c1,0x003ffe20,0x06003100,
    0x00018000,0x004d5440,0x54c00154,0x20000009,0x80001301,0x88006219,
    0x19883002,0x00054400,0x93001f44,0xa988039b,0x0054c00a,0x00000030,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x006e8000,0x99999997,0x36a01999,0xbb51002d,0xdfd93005,
    0xcc802a17,0x3ccccccc,0xbdedb980,0x6d409109,0x00c01ced,0x00199999,
    0xc983bb30,0x3ccccccc,0x33333326,0x06666641,0xccccc880,0x009aaccc,
    0xca807540,0xcccccccc,0x64c3cccc,0xcccccccc,0xf003f700,0xffffffff,
    0x31ff30ff,0x7fdc03ff,0xf902ffff,0xfdf9315b,0xfffd8801,0x3f6200df,
    0xfebabeff,0x2bfd04ed,0x0f100ffe,0x007fffcc,0x4c37ff40,0x81ffffff,
    0x980cffd8,0x2000ffff,0xdeffffa8,0x400cffff,0xf900ffeb,0xd55599ff,
    0x2a07ffff,0x401fffff,0x7fc403f9,0xffffffff,0x3f64fe84,0xfffff306,
    0x0df70dff,0x2a007fe6,0x2a02ffff,0xf500dfff,0x27ff909f,0x0fb00ffe,
    0x000fffe8,0xf307ffe8,0x2a01ffff,0x7ffec03f,0xfffe8000,0x03bffea4,
    0x1fffff91,0x7cc0ff60,0x7fc06fff,0x0dd005ff,0xffffffa8,0x7dc2ffff,
    0x113fea1f,0x3ffee23b,0x80ffe21f,0xff9801fb,0xfff501ff,0x84fa801d,
    0x03733fff,0xffb01ff2,0xff70001f,0x7fffe407,0xf9009d05,0xfb0001ff,
    0xfffc89ff,0x7ffe5645,0x7407d00f,0x7401ffff,0xf9004fff,0x0d676401,
    0xfff11fe2,0x707ffcc3,0x45fffb01,0x0f405ffa,0x0ffffcc0,0x00ffffc4,
    0x7ffcc4c8,0x07ffc803,0x0007ffec,0xffe80088,0x8035c2ff,0x8000fffc,
    0x7d44fffd,0x3ffe07ff,0x7dc0d00f,0xfe804fff,0x7f3004ff,0x9f700740,
    0x261fff98,0xfa801fff,0x3ffee0ff,0x26006e04,0xfd81ffff,0x126005ff,
    0xd807fff3,0x86eeffff,0x0000fffd,0x7fffcc00,0x2001d30f,0x0020fffc,
    0x2a27ffec,0xfd00ffff,0x440e01ff,0xd006ffff,0x7c009fff,0x5fb00205,
    0x260fffb8,0xfb802fff,0x7fffcc2f,0x3e60001e,0x7fc41fff,0x88c004ff,
    0x2eefffee,0xcffffc98,0x0fffd84c,0x98fbbbb6,0xb805eeed,0x1e8dffff,
    0x23fff200,0x6c04ffe9,0x7fd44fff,0x3fffa06f,0x7ffec000,0xfffd002f,
    0x007e4009,0x7e43fc40,0x3ffe60ff,0x817f4404,0x1dffffff,0xffff9800,
    0x17fffdc1,0xfffb9000,0x7ff4039d,0x07ffec07,0x3e2037f2,0xffd007ff,
    0xc8005fff,0xffdfcfff,0x3fff604f,0x01fffe44,0x4001fffd,0x005ffffa,
    0x8013fffa,0xfb8002fa,0x20fffd85,0x2605fff9,0xf981effe,0x0cffffff,
    0x3fffe600,0x0ffffec1,0x3ffe6000,0x07ffe803,0x3a07ffec,0x03fffc04,
    0x0fffff98,0x77ffe400,0x201fff90,0x3ea4fffd,0x3fa00eff,0xff1000ff,
    0x74001fff,0x7c004fff,0x82fd8005,0x3e60fffe,0xfffb06ff,0xff505fff,
    0x03ffffff,0x07fffe60,0x000ffffd,0x007fff30,0xfd80fffd,0x201320ff,
    0x2e007ffe,0x4005ffff,0x3ee1fffc,0xfffb01ff,0x07fffd7b,0x001fffd0,
    0x00fffff2,0x009fffd0,0x7c4007d8,0x41fffd07,0x2606fff9,0x306ffffd,
    0xfffffffd,0xffff3003,0x0ffffd83,0x7ffcc000,0x07ffe803,0x5c87ffec,
    0x00fffd00,0x02ffffe8,0xb83fff20,0xffb01fff,0x015799df,0x003fffa0,
    0x01bfffe6,0x013fffa0,0x54005f50,0x1fffb05f,0x402fffcc,0x200ffffb,
    0x4fffffea,0x1ffff980,0x00ffffdc,0x0fffe600,0xb01fffa0,0x1ff91fff,
    0x00fffd00,0x7fffff4c,0x1fff9000,0xd817ffdc,0x20004fff,0xe800fffe,
    0x8001ffff,0x4004fffe,0x3f6004f8,0x41fff902,0xb004fff9,0xb80a3fff,
    0x9807ffff,0x7cc1ffff,0x40003fff,0xe803fff9,0x7fec07ff,0x805fffdf,
    0xf1007ffe,0x0bffff73,0xb83fff20,0xffb02fff,0x7f40009f,0x7fdc00ff,
    0x405404ff,0x8004fffe,0x1ff1007d,0x987ffee0,0xf5002fff,0x880b21ff,
    0x32a2fffe,0x03fffe61,0x0013fffe,0x007fff30,0xfd80fffd,0x3fffdcff,
    0x403fff40,0x3fff62e8,0xfffc803f,0x40bffee0,0x0004fffd,0x8803fffa,
    0x400fffff,0x09fffd06,0x5003f700,0x7ffcc0bf,0x007ffe61,0x01327ff8,
    0x3ea3fff1,0x3fffe67f,0x06fffd80,0x1fffcc00,0x203ffec0,0xff88fffd,
    0x3ffa00ff,0x7c44d807,0x6400ffff,0x3fee0fff,0x9fffb02f,0x7fff4000,
    0x3ffff600,0xfe83d402,0xf88004ff,0x402fd804,0x3fe61ffe,0x9fd00446,
    0x3f600fe4,0x23fff90f,0xf107fff9,0x2e009fff,0x01fffcc2,0x8387ffec,
    0xff50fffd,0x3fff40df,0x7fd41720,0x7fe405ff,0x0bffee0f,0x0027ffec,
    0x201fffd0,0x805ffffa,0x9fffd06e,0x101ba000,0xffb801ff,0xf98bfee2,
    0x646f884f,0x93fe206f,0x3fea5ffb,0x3ffea04f,0x2076401f,0xa804fff9,
    0xd82ecfff,0x3ff60fff,0x0ffff03f,0xffb007dc,0x7fec07ff,0x0bffee1f,
    0x0027ffec,0x203ffff0,0x200ffffe,0xffd05fe8,0x3ee000bf,0x4017ea01,
    0x517fa5fc,0x3625dfff,0x0f7fe40e,0x3fa17f22,0x2017ff23,0x22cfffe9,
    0xfa80deb9,0xfd7005ff,0x3fffa07d,0x07fffe22,0x701ffff1,0xfffa80ff,
    0xfffd01ff,0x827ffe43,0x0005fffe,0x905ffff1,0x3107ffff,0xf109fff9,
    0x2000dfff,0x0bf603f9,0x3fedfc80,0xffffffb0,0x3f2b7207,0x103ffdce,
    0x19ffddf9,0x7ff65400,0xd902efff,0x003bffff,0xffffd802,0xfffff72e,
    0x3ffffa69,0xdffff71e,0xffffc819,0x7fec5fff,0xfffb9fff,0xffd913ff,
    0x0019bfff,0xffffff97,0x3fffe67b,0xffffffff,0x3263ffff,0xcdfffffe,
    0x500d4000,0x03300015,0x80135310,0x001aa981,0x00001531,0x000006a6,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x99993000,0x2e001999,0x33cccccc,0x99999999,0x99930039,0x90799999,
    0x41999999,0xcccccccb,0xccccb80c,0x99999933,0x99931999,0x01999999,
    0x202f7ae2,0xccccccc9,0xcccccccc,0x99999930,0x99999999,0xccccca89,
    0x00aaaccc,0x44cccc98,0xccccccc9,0x000aaacc,0xcc800e20,0xcccccccc,
    0x82cccccc,0x04fffffa,0xdfffff88,0xfffffa80,0xfffa8001,0x3fea02ff,
    0x7fd440bf,0x7cc03fff,0x7ffd40cf,0xfffa81ff,0x3ff601ff,0xf500efff,
    0x9999dfff,0x5443fffd,0xccceffff,0xb887ffed,0xeecdffff,0x7d402dff,
    0xffa887ff,0xfffecdff,0x0f70003f,0x6677ffc0,0xdcceffff,0xffdf04ff,
    0xffd700ff,0x7ffc05ff,0x3fa0005f,0x77cc05ff,0x7fffdc00,0x3a05e804,
    0x3fa05fff,0x3ff605ff,0x00efffff,0x2a0bfffd,0xfffe81fe,0x220ff704,
    0x7ec3ffff,0x3fe00dff,0x3fffe07f,0x17fffa23,0x400bfe00,0x7fff41ef,
    0xae827d43,0x7402ffff,0x202ffffa,0x0004fffe,0x8817fff6,0x3ffa005e,
    0x03e600ff,0x204fffe8,0xf305fffe,0xfffff959,0x17fff605,0xffe81f88,
    0xf81ea04f,0xffd83fff,0x1fffa05f,0x443fffe8,0x2002ffff,0x7f006ffb,
    0x907fffd0,0x3ffa3a09,0x3e3a606f,0x3fa01fff,0x360004ff,0x7f305fff,
    0xffffa800,0xfb00ba03,0x7fec09ff,0xf885b04f,0xffb05fff,0xe81d80bf,
    0x1e044fff,0xd03ffff8,0x3fa09fff,0x3fffa07f,0x04fffe83,0x007fffa0,
    0x1ffff41e,0xfa8e824c,0x15b01fff,0x7403ffff,0x20004fff,0xfb85fffd,
    0xfffb0001,0xb00d501f,0x7ec09fff,0x320304ff,0xffb03fff,0x40d470bf,
    0x06c4fffe,0x1ffffc09,0x80ffffc8,0x3fa07ffe,0xfffe83ff,0xffff5005,
    0x3fa0300b,0x3a0303ff,0x10bffff0,0x07fffe2f,0x004fffe8,0x917fff60,
    0x7cc0001d,0x0fc44fff,0x027ffec0,0x8009fffb,0xfb01fff9,0x80588bff,
    0x07c4fffe,0x03ffff80,0xd07ffff3,0x7ff40fff,0x7fffc43f,0xfffdb001,
    0x3fa0001f,0x874003ff,0x5c0ffffb,0x03ffff14,0x0027fff4,0x22bfffb0,
    0xfb00006e,0x02641fff,0x204fffd8,0x4004fffd,0x3f607ffa,0x402dc5ff,
    0x3e64fffe,0x7ffff000,0x17fffe20,0xfe81fffa,0x7ffe43ff,0xff1d3005,
    0x3a0009ff,0x74003fff,0x87ffff10,0x3ffff10e,0x027fff40,0x3bfffb00,
    0x00005fff,0x26bffff1,0xfffb000f,0xd333333b,0xc8009fff,0x3ff604ff,
    0x00bf715f,0x3a69fffd,0xffff000f,0x37fffc07,0xfd03fff4,0xffb759ff,
    0xc9e4005d,0x8000ffff,0x4003fffe,0x9ffff20e,0x3fffe25a,0x13fffa01,
    0xefffd800,0x001fffff,0x9ffffc80,0x3ff6003d,0xffffffff,0x4004ffff,
    0x7fec06fe,0x05fffeff,0xffffffe8,0xfff000ff,0x7fffc07f,0x207ffe87,
    0xfffffffe,0xf1001bef,0x01ffffcc,0x01ffff40,0xfff983a0,0x7fc45b2f,
    0x3ffa01ff,0x3f60004f,0xffffbeff,0x7c40000e,0x4006ffff,0x3604fffd,
    0x26004fff,0x7fec01ff,0x05fec9df,0xb9dfffe8,0xfff000ff,0x7fffc07f,
    0x207ffe86,0xd313fffe,0xb801bfff,0x037ffec4,0x01ffff40,0xfffd03a0,
    0xfff88d1d,0x3fffa01f,0x3ff60004,0xbffff95f,0xfff70000,0xffd8005f,
    0x3fff604f,0x00ff6004,0xbb17fff6,0x49fffd00,0xfff000fa,0x7fffc07f,
    0x207ffe85,0x7443fffe,0x07c05fff,0x00bfffea,0x007fffd0,0x7ffd40e8,
    0x7ffc43df,0x3fffa01f,0xffb05004,0x7fffecbf,0x7fc40004,0x7ec002ff,
    0x3ff604ff,0x07f7004f,0x317fff60,0x9fffd00b,0xfff000f8,0x3ffe207f,
    0x07ffe84f,0x2e0ffffa,0xb702ffff,0xfff33333,0xffe800bf,0x4074003f,
    0x440fffff,0x3a01ffff,0x49804fff,0x225fffd8,0x002ffffe,0x0bfffe20,
    0x09fffb00,0x4027ffec,0xfb0304f8,0xd00b0bff,0x40d89fff,0x3ffff819,
    0x05ffff30,0x7f40fffd,0xfff983ff,0xddddd04f,0x3ffffddd,0x1ffff400,
    0x3ee03a00,0xfff884ff,0x3fffa01f,0xfd83d804,0x7ffcc5ff,0xf10001ff,
    0xd8005fff,0x3f604fff,0x274404ff,0xfffd83a8,0xffe80185,0x40e40c4f,
    0xf903ffff,0x3ffa0bff,0x0ffffa07,0x20ffffe6,0x7fffc05a,0x3fffa004,
    0x440f4003,0xff881fff,0x3ffa01ff,0x417c404f,0xfa85fffd,0x8000efff,
    0x002ffff8,0xb027ffec,0xfd809fff,0x1fdccccc,0x005fffd8,0x809fffd0,
    0xffff80f9,0x0ffff883,0x740fffd0,0xffb83fff,0x402e82ff,0x000ffffc,
    0x8007fffd,0x20bf901e,0x202ffff9,0x2204ffff,0xfffe81fe,0xdffffb05,
    0xfff98001,0x7ff4002f,0x3fffa05f,0x3fffee05,0xe80fffff,0xd0005fff,
    0x7cc0bfff,0x07ffff07,0x7405fff9,0x3ffa07ff,0x7fff443f,0x4400fa85,
    0xf004ffff,0x4c009fff,0x205f304f,0x103ffffa,0x983dffff,0xff80ffeb,
    0xfff306ff,0x54001dff,0x4003ffff,0x3e06ffff,0xff506fff,0xdfffffff,
    0x01bfffe0,0x3bfffe20,0x1bff2621,0x237fffe6,0x00dffd98,0x4407fffc,
    0xa88effff,0xf884fffe,0xffff801f,0x7ffc401f,0xffc9805f,0xcb8584ef,
    0x3dffffff,0xfffffd93,0xffffffff,0x7fff64cf,0x3faa4eff,0x05ffffff,
    0x3ffff322,0x9300ccff,0x9dfffffd,0xffffd931,0x3fe219df,0xffffffff,
    0x3fffb265,0x4c01ceff,0xffffffec,0x4fffffff,0x3fffff2a,0x00bdefff,
    0x77ffff4c,0xffffd931,0x17bdffff,0x39dfff70,0xfffffb90,0xffd9509f,
    0x0019bfff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x98000000,0xcccccccc,0x0000aaac,0x000fd800,
    0x000000bb,0x01000004,0x00801040,0x80200800,0x320000ba,0xd8adeeee,
    0xd91deeee,0x0000009d,0x3bbbae04,0x0fbb665e,0x262b8800,0xfff710dd,
    0xfff9959f,0x1efd801b,0x003fee00,0x3ae00374,0xd9102dff,0x32019dff,
    0xfeeb81ef,0xeffe980d,0xbffd906b,0x3ddddb07,0x5c3bffb1,0xffb84ffe,
    0xffb0001d,0x7fffc49f,0x3bb62ec1,0xcffd98ee,0x8f777640,0x7fec3fea,
    0x004f887f,0x747ff930,0x7fffc5ff,0x17fff443,0x004fffa8,0x2001fff3,
    0x53f6006e,0x6fd44ffc,0xa81dff70,0x3f625fff,0x7c43ff34,0x441ff51f,
    0x0bfb0efe,0xfbd7fffd,0xfbdb1fff,0xffd507ff,0x7c40017d,0x7ffdc6ff,
    0x7ff416c3,0x4fffdfbf,0xfa9fffd8,0x7ffc46ff,0x4003cc0f,0x7c2effea,
    0x7fffc6ff,0x06fffa83,0x100bfff7,0x2001ffff,0x3ff9006e,0x7c43ffe6,
    0x13ffe25f,0x7e4bfff7,0xfa9bfa1f,0xfd83ea0f,0x913fe63f,0x3ea1dfff,
    0x3ffa3fff,0x3fff2607,0xfffb001c,0x137ffe43,0x9bfff60d,0x7e40fffc,
    0x5ffcebff,0x5c3fffc8,0xfff91003,0x17ffa039,0x3e07fffd,0xfe881fff,
    0xfffd801f,0x00dd000f,0xffe8fff1,0x7c3fff51,0x7ff445ff,0xfc8fff32,
    0x41dffb1f,0x41fff30d,0x3f21fff8,0x3ffe21ff,0x403ffec5,0x0beffeb8,
    0xe93ffe60,0x0751fffd,0xfb87fff2,0x7ffe41ff,0xf101730f,0x400e8dff,
    0x00beffda,0x3fa1ffe4,0xffff03ff,0x5c004c07,0x000fffce,0xdff900dd,
    0x3fa23c98,0x982fffc6,0xf917ff20,0x3ffff27f,0x07ffe412,0xffc8fffe,
    0x17ffe21f,0x4001fff9,0x01cfffd9,0x2b2afffd,0x201b4fff,0x3ee0fffc,
    0x7ffe42ff,0x3fff6004,0x3ee20b31,0x2a002dff,0x7fff41ff,0x2ffff883,
    0x647cc000,0x26620fff,0x99fe9999,0xffb09999,0xfd50c00d,0x3f600dff,
    0xfffeeeff,0x9fffff34,0x7c0fffe8,0x3fff25ff,0x917ffe21,0x10003fff,
    0xf707fff9,0x3fe3b5ff,0x3f2068ff,0x3ffee0ff,0x01fffe42,0x36bfff30,
    0x0cfffa81,0xe87f8800,0xffa83fff,0x220000ff,0x41fff92e,0xfffffffb,
    0x3fffffff,0x9800fffd,0x06fff9fe,0x333dffd0,0x7fe41333,0x3ffe5fff,
    0x327fff87,0x3fe21fff,0x0fffe45f,0x3fff2200,0xdfff981d,0x0f7fff26,
    0x2e0fffc8,0x7fe42fff,0x7ff4002f,0xffb3069f,0xbd00017f,0x887fffd0,
    0x0003fffe,0x1fff926c,0x6666664c,0xccccccff,0x003fffd1,0x7ffc3bf2,
    0x0fffd006,0x7ffffdc0,0xff0fffd2,0x0fffe4df,0xfc8bfff1,0xfb5001ff,
    0xfe8017ff,0x3ffe63ff,0x3fff200f,0x90bffee0,0xa8003fff,0x4402ffff,
    0x002dfffc,0x3fffa0f2,0xdfffdcac,0x1ae00801,0x2001fff9,0xfffd806e,
    0x22ffd803,0xd8106fff,0x30401fff,0x3f6bfffd,0x2fffc47f,0x7c43fff9,
    0x7ffe45ff,0x3ffae201,0x3fee002d,0x02fff40f,0xfb83fff2,0x7ffe42ff,
    0x7fff8001,0x77ff5400,0xfe80400b,0xffffcdff,0x0dfe9805,0x3ff207cc,
    0x00dd000f,0x103ffff7,0xff83ffe2,0x71efd86f,0x2510bfff,0x5bff621c,
    0x3e20fffa,0x3fff23ff,0x917ffe21,0xf9303fff,0x100039ff,0x5ff70bff,
    0x20fffc80,0x7e42fffb,0xfc8001ff,0xf930004f,0xe80039ff,0xfffb3fff,
    0xfffc805f,0x7fe41745,0x00dd000f,0xc83bfffa,0x939fff92,0xffa8dfff,
    0x9ffff15f,0x4c6c86c1,0x87ffa4ff,0x7fe46ff9,0x17ffe21f,0x74c3fff9,
    0x0000beff,0x7fc417ec,0x0fffec00,0xfc85fff7,0xf88001ff,0x5c40000f,
    0xd001effe,0x3fa27fff,0x3f600fff,0x3ffe67ff,0xffffffff,0x3006e806,
    0x7fdfffff,0x5fffffd4,0xf71dfffe,0x7ffd4bff,0x3f21fdff,0x4c1ff30c,
    0x07ff24ff,0x7cc5fffb,0x7ffec6ff,0x00077ee2,0xbb00fa80,0x45fffd00,
    0x7ec3fffc,0xbb0002ff,0xfc980000,0x7fffd003,0x02ffffcc,0x261fffd3,
    0xffffffff,0x6e806fff,0x3fffa600,0x0dffc83e,0xfe85dfd3,0x7fffd41f,
    0x6ff75c2e,0xdfe881ff,0x7fec0efd,0xffe9afff,0xfffd8eff,0x000112ff,
    0x01980a00,0x4f7fffec,0x93fffffb,0x007dffff,0x00000110,0x7ff40022,
    0x7fffe43f,0xd335c403,0xfffddddd,0x0dd00bdf,0x08015100,0x44018020,
    0x0544300a,0x0004cc40,0x00000000,0x00000000,0x00000000,0x20000000,
    0xfe83fffe,0x1ec01fff,0x00fffc80,0x00000110,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x3e000000,0xff883fff,0x03e606ff,
    0x007ffe40,0x3bb62000,0x3bbbb26e,0x77777641,0xdb35eeee,0xdb35bddd,
    0x005d80bd,0x201f2001,0x0eecc3ec,0x55555551,0x15555555,0x00888808,
    0x35002f2e,0x37777762,0xdddddddd,0xdddddd30,0x0000009d,0x27fffc40,
    0x85ffffb8,0x3f2001ea,0x000000ff,0xffe8ffff,0xd04f6c1f,0x7f445fff,
    0x00bee4ff,0x74c05ff5,0x3fe600cf,0x87ffea03,0x3fea6ffd,0xffffffff,
    0xfb13ffff,0x437fec1b,0x2dfffffa,0x3ffe63d0,0xffffffff,0xfff31fff,
    0x0009ffff,0xff930000,0xb09bffff,0x263dffff,0x7fe4000b,0xd000000f,
    0xfffc8fff,0x3ff20ec1,0xffff986f,0xff1005d0,0x1ffff401,0x201fffb0,
    0x3fe2fffb,0x2aaaa27f,0xaaaaaaaa,0x7fff71aa,0x6f40ffe8,0xcffffdba,
    0x44446da9,0x88888888,0x3ffe6088,0x0004ffff,0x00000000,0x00000000,
    0x1fff6000,0x4483fff7,0x901ffff8,0x20977fff,0x22bb0cd8,0x3fffa0dc,
    0x9f9bf506,0xd87ffea0,0x400005ff,0x7444fffc,0x2e21a63f,0x01effffe,
    0x00000000,0x00000000,0x00000000,0x3ff60000,0x00fffdc7,0x8813fff6,
    0x2a06ffff,0xf9ba9fff,0x3ffea2ff,0xff11fd07,0xb8fff103,0x400003ff,
    0xe880efe8,0x97300a65,0x00000005,0x00000000,0x00000000,0xb0000000,
    0xfffb8fff,0x3fffea01,0x2fffe400,0x377bbb20,0x13204eee,0x05fb93ee,
    0x1ff98bfd,0x3bbbbbaa,0xeeeeeeee,0x012200c2,0x00000000,0x00000000,
    0x00000000,0x00000000,0xffb8fffb,0x3fffa01f,0xffff8802,0x01bb1001,
    0x1ff107e0,0x3fc82fe8,0x777547f8,0xeeeeeeee,0x00002eee,0x00000000,
    0x00000000,0x00000000,0x00000000,0x7dc7ffd8,0xfff901ff,0x7ffdc00d,
    0xfaafb805,0x7e435403,0xfa86f983,0x00005d81,0x00000000,0x00000000,
    0x00000000,0x00000000,0x7ec00000,0x0fffdc7f,0x20ffffc4,0x3ffffa01,
    0x223ff201,0x81d704ff,0x0ff606f9,0x000ee0f1,0x00000000,0x00000000,
    0x00000000,0x00000000,0x90000000,0x7fdc1fff,0x4fffd81f,0xfabb82c4,
    0x97f605ff,0x902a85fd,0x42f4403d,0x00001100,0x00000000,0x00000000,
    0x00000000,0x00000000,0xfb800000,0xffff31ff,0x0ffffa85,0xfd34c26c,
    0x82e205ff,0x000000b8,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x3e600000,0xffdeceff,0x17fff43f,0x2f989f93,0x003bffee,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xfff70000,0x5ffff71d,0x3fbfffee,0xfb33ffff,0xfffd55df,0x000005df,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000150,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_bold_31_usascii_x[95]={ 0,2,2,0,1,1,1,1,1,0,1,0,0,0,
1,0,1,1,0,0,0,0,1,0,0,0,2,2,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,
0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,2,0,0,2,-1,0,1,0,1,1,1,0,1,0,0,
-1,0,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,2,2,1,0, };
static signed short stb__times_bold_31_usascii_y[95]={ 24,5,5,5,4,5,5,5,5,5,5,7,19,16,
19,5,5,5,5,5,5,5,5,5,5,5,10,10,8,11,8,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,28,4,10,5,10,5,10,5,10,5,5,
5,5,5,10,10,10,10,10,10,10,6,11,11,11,11,11,11,5,5,5,14, };
static unsigned short stb__times_bold_31_usascii_w[95]={ 0,5,12,14,13,26,22,5,8,9,12,16,7,9,
5,8,12,11,13,13,13,13,13,14,14,13,5,6,16,16,16,12,25,20,18,18,20,18,17,21,22,11,14,23,
18,26,20,20,17,20,21,14,17,20,20,28,21,20,19,7,8,7,13,16,7,13,15,11,14,11,12,13,15,8,
8,16,8,22,15,12,15,15,12,9,10,15,14,20,14,14,12,8,2,8,16, };
static unsigned short stb__times_bold_31_usascii_h[95]={ 0,20,10,20,22,20,20,10,25,25,11,16,10,3,
6,20,20,19,19,20,19,20,20,20,20,20,15,19,14,7,14,20,26,19,19,20,19,19,19,20,19,19,20,19,
19,19,20,20,19,25,19,20,19,20,20,20,19,19,19,25,20,25,10,3,6,15,20,15,20,15,19,21,19,19,
26,19,19,14,14,15,20,20,14,15,19,14,14,14,13,20,13,25,26,25,5, };
static unsigned short stb__times_bold_31_usascii_s[95]={ 252,231,140,237,113,190,217,250,57,66,105,
44,118,218,170,72,25,207,115,38,30,176,146,10,81,117,87,23,233,153,151,
240,10,215,196,82,166,147,129,209,92,239,67,47,28,1,96,188,189,92,1,
52,236,51,30,1,151,71,219,84,1,76,126,201,176,73,160,61,131,93,101,
127,173,142,1,125,187,128,189,115,172,156,205,105,114,61,218,168,90,141,77,
48,36,39,184, };
static unsigned short stb__times_bold_31_usascii_t[95]={ 1,1,106,1,1,28,28,90,1,1,106,
90,106,106,106,28,49,49,70,49,90,28,28,49,28,28,90,90,90,106,90,
28,1,70,70,49,70,70,70,1,70,49,49,70,70,70,28,1,49,1,90,
49,70,28,28,28,49,70,49,1,49,1,106,106,106,90,28,90,28,90,49,
1,49,49,1,49,70,90,90,90,1,1,90,90,49,106,90,90,106,1,106,
1,1,1,106, };
static unsigned short stb__times_bold_31_usascii_a[95]={ 112,149,249,224,224,448,373,124,
149,149,224,255,112,149,112,124,224,224,224,224,224,224,224,224,
224,224,149,149,255,255,255,224,417,323,299,323,323,299,274,348,
348,174,224,348,299,423,323,348,274,348,323,249,299,323,323,448,
323,323,299,149,124,149,260,224,149,224,249,199,249,199,149,224,
249,124,149,249,124,373,249,224,249,249,199,174,149,249,224,323,
224,224,199,176,99,176,233, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_31_usascii_BITMAP_HEIGHT or STB_FONT_times_bold_31_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_31_usascii(stb_fontchar font[STB_FONT_times_bold_31_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_31_usascii_BITMAP_HEIGHT][STB_FONT_times_bold_31_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_31_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_31_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_31_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_31_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_31_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_31_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_31_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_31_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_31_usascii_s[i] + stb__times_bold_31_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_31_usascii_t[i] + stb__times_bold_31_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_31_usascii_x[i];
            font[i].y0 = stb__times_bold_31_usascii_y[i];
            font[i].x1 = stb__times_bold_31_usascii_x[i] + stb__times_bold_31_usascii_w[i];
            font[i].y1 = stb__times_bold_31_usascii_y[i] + stb__times_bold_31_usascii_h[i];
            font[i].advance_int = (stb__times_bold_31_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_31_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_31_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_31_usascii_s[i] + stb__times_bold_31_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_31_usascii_t[i] + stb__times_bold_31_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_31_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_31_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_31_usascii_x[i] + stb__times_bold_31_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_31_usascii_y[i] + stb__times_bold_31_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_bold_31_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_31_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_31_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_31_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_31_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_31_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_31_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_31_usascii_LINE_SPACING
#endif

