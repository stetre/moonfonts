// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_10_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_10_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_10_latin1_BITMAP_WIDTH         256
#define STB_FONT_consolas_10_latin1_BITMAP_HEIGHT         46
#define STB_FONT_consolas_10_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_consolas_10_latin1_FIRST_CHAR            32
#define STB_FONT_consolas_10_latin1_NUM_CHARS            224

#define STB_FONT_consolas_10_latin1_LINE_SPACING           7

static unsigned int stb__consolas_10_latin1_pixels[]={
    0xc8010320,0x03880000,0x32604074,0x40dc642c,0x4400c0c8,0x00020080,
    0x2200c088,0x80400040,0x29804c08,0x00a80004,0x090d4c01,0x0100c088,
    0x0dd980c0,0xb8aa2088,0x64b10642,0x56ca8644,0x263b509d,0x22581404,
    0x20108325,0x2a059808,0xcc84ca84,0x20e4641d,0x82cc0da8,0x3226544a,
    0x036e21c8,0x904b9895,0x320ee641,0x425c41c8,0x3abd84ca,0x4c254032,
    0x4644ca85,0x0361661c,0x995d1254,0x1641906c,0xab40c872,0xecd98b03,
    0x441fdd12,0x555371ec,0x8ee68ee5,0x54415446,0xa882a882,0x7442a882,
    0x128223fa,0x44a08941,0x0e6744a0,0x82b83555,0x1500a858,0x20540720,
    0x42893049,0xa86aaa09,0x46aaa1aa,0x3b61aaa8,0x5c6aaa22,0x1924c3a2,
    0x0c8ae162,0x98b03ab4,0x10d8688e,0x3276195d,0x926d12ad,0x57449368,
    0x932ba24c,0x3a24cae8,0x32ba24ca,0xb9ae6ae4,0x2ed15da2,0x2ad15da2,
    0x0d5741bc,0x41b83ddb,0x84e884e8,0x44e884e8,0x4771602b,0xe86aba0e,
    0x46aba1aa,0x1931bea8,0x46faa27b,0x3268761c,0x01930750,0x45983ab4,
    0x54361a49,0x367362ab,0xb072762a,0x1d15c393,0x4570e8ae,0xb874570e,
    0x4dce43a2,0x2bb4570d,0x8aed15da,0x80d0bf26,0x355c2c49,0x355c355c,
    0x812a355c,0x21dc743a,0xd81a0d06,0x362c3a20,0x9a0d8720,0x5b10570c,
    0x6443ab40,0xd858a4c3,0x66c37b10,0x1b2a0bd9,0x6c391b2a,0x1c86c390,
    0x21b0e436,0xace4361c,0x2bb4570d,0x8aed15da,0x99f266c6,0x752e65c3,
    0x8d8391b0,0x20e46c1c,0x03a21c8d,0x7c365458,0x8733e1cc,0x206c1ccf,
    0x706c2dd8,0x32689a27,0x64550930,0x8b03ab40,0x0d81dcf9,0x64e4b3b2,
    0x7d03e83a,0x0e4361c8,0x90d8721b,0x361c86c3,0x5cd19950,0x2ed15da2,
    0xd8d15da2,0x4d261a68,0x73d10365,0x125cf449,0x4f44973d,0x4277544b,
    0x8341741b,0x806c0d06,0x37606c1c,0x20c92a1e,0xd0322b86,0x126340ea,
    0x0dc1b0d0,0x21a20d10,0x89dcd13b,0x77344ee6,0x8d13b9a2,0x44ea1edd,
    0x9d5a2756,0x55a27568,0x221a1dfd,0x70935cce,0x66dcd99b,0x9b336e6c,
    0x0c86ccdb,0x680d8b10,0x0d81a0d0,0x1b037322,0x83a22590,0x4390ee0c,
    0xb03ab40c,0x76cc24c1,0x665c4582,0x3b207b20,0xd83dbb01,0x0f6ec1ed,
    0xdbb07b76,0x3b760583,0xdd87b761,0x887b761e,0x003eef84,0x0d8e41b0,
    0x23906c72,0x0030720d,0x3eef80d8,0xeef8fbbe,0x447dfd13,0x21f7f440,
    0x641b8dc8,0x645c8640,0x13aad950,0x10000766,0x00000000,0x00000000,
    0x10000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x45ceb800,0x22000180,0x1b8c8080,0xc88325b5,
    0x0ea0c883,0x664c376e,0x6440ea2e,0x7990f220,0xb10dc643,0x10dc6437,
    0x81555055,0x6640c44a,0x9376e0ef,0x203a82da,0x40d440c8,0x1bcc81a8,
    0x2aa24526,0x22055541,0xda8aa21a,0xa981e442,0xd3ff33b1,0x41662654,
    0x42541c8c,0xb0421dcc,0x20210eb6,0xaac40808,0x08d11d33,0x20108110,
    0x2e5c0841,0x995d1042,0x0441daa8,0x8eab10ea,0x75a2b159,0x30220080,
    0xcae8973b,0x91498303,0x2ba1d9a8,0x446b6e0a,0x10ec4c9e,0x84eaf602,
    0x55169ffa,0x5440a835,0x220541aa,0x71ddb8a2,0x3bb70b7b,0xbb70eedc,
    0x4c367263,0x21eed9a4,0x3bb61eed,0xed87bb61,0x4c7b6e1e,0x0e8aeb14,
    0xd91cc1c8,0x367a29dd,0x3d2c4ea2,0xc83bb90b,0x2f6321dd,0x91a6751c,
    0x48a4c3bb,0x2c42c570,0x15c49ac4,0x424c3bb9,0x169fe88c,0x274437d5,
    0xe886faa2,0x93687d44,0x49839162,0x9ac526b1,0x8af26b14,0x0930b149,
    0x93093093,0xacd26930,0xd872b149,0x0b661c80,0x41ac9875,0x2b6cb73a,
    0x2953452a,0x9546f668,0x52a6dbab,0x22556668,0x866ec5c9,0x3ae2dcea,
    0xa543360e,0x8320ae68,0x55c0d8d0,0x6ab81b06,0x9b56a654,0x52664cb9,
    0x336ab99b,0x2b99b55c,0x9f32e8c9,0x72e65c3d,0x2e65cb99,0x665cb997,
    0x149b4575,0xc80d872b,0x221d41a1,0x5e743ecf,0x5cd79575,0xd9a2b9a2,
    0x7d72a9ba,0xf99a2b9a,0x25c40ecd,0x45a3aa5c,0x57164c9d,0x03b09534,
    0x646c0d8d,0x646c0d81,0x4da3aaa1,0x23773b05,0x59859859,0x424da498,
    0x4d26b349,0xa4d66935,0x55669359,0xacd62b13,0x8760d13b,0x1dc4981e,
    0xe8e5620d,0x75344ea4,0xd999c9a2,0x3a962930,0x4c024cd1,0xb4934985,
    0x9d419a3a,0x3b03a268,0xd106c588,0x441b0973,0x2aaa4b9e,0x64f3b26b,
    0x3b20dd89,0xc8f3b23c,0x9b5933ce,0x333a2126,0x22b99d15,0x99d15cce,
    0xd9733a2b,0x973761ed,0x3ba21edd,0x6ec36c44,0x207b9d33,0x1dbbd358,
    0x3760f6ec,0x216e641e,0x76ec1edc,0x6e441261,0x41bb910d,0xb9b11ddc,
    0x3b761e25,0x1da76d41,0x20d85d99,0x0d86ccdb,0x2a9b336e,0x000000dd,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x9f7f4408,0x7f44720d,0xa8e41b3e,0x00000f72,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x52206aa0,0x21551038,0x07911a3b,0x64190191,0x71914111,0x5c003a83,
    0x64415303,0x32e0c883,0x1b30311b,0x31b8c832,0x80351141,0x64d70aa9,
    0x35cf7660,0x8aaaa619,0x0d441aa8,0x88090772,0x41c43b02,0x6d42aaa8,
    0x8309850d,0x7b141109,0x126b1075,0xb442aba2,0x08808449,0x23b0fee4,
    0x20109a2b,0x42cce4c0,0x4229cb81,0x44300881,0x263a61ad,0x45660843,
    0x40b2b665,0x439ac2de,0x5473580e,0x2b6228b8,0x7076b24d,0x07640583,
    0x2a21220c,0x0ec2c5ca,0x2a37161b,0xdb81d5a2,0x25d9b35e,0x4393b05a,
    0x4526b149,0x6cd73755,0xbb934571,0x3a58a4c3,0x20f6c2ec,0x6c1ed80d,
    0x4777221e,0x3b54c9d8,0x9c83db0b,0xa858e60d,0x588b484b,0x32251690,
    0x3a869222,0x225d60dc,0x0f6c0dc9,0x1d03bbb1,0x4a867a62,0x21908c96,
    0x644e5a2a,0x74d62b34,0x50bb2688,0x2b1498d9,0x32aeb149,0xd15c3668,
    0x2933452a,0x5c1d5a58,0x702f3a61,0x9b443703,0x07234914,0xb0fa20dc,
    0x3a36167d,0x0340e40c,0x45972839,0x83909748,0xac256c1b,0x5a21b80d,
    0xf7515c49,0x64756877,0x9b50c9d8,0xab4c72d9,0x46926b13,0x261f44c8,
    0xac526b14,0xb864d5ba,0x4cd15da2,0x15c74b14,0x033d10dc,0xa4437037,
    0x992a9158,0x221b84ab,0x792a3dec,0x2606c644,0x1ef544bb,0x52949573,
    0x1dc1ef44,0x703b60dc,0x43703b15,0x82ccb148,0x5c191b06,0x22aa4cc9,
    0x4ab4b568,0x42c526b7,0x5621a258,0xd966b159,0x13a861ee,0xb1344ead,
    0x1eeec566,0x1b8160dc,0xac5221b8,0x646c3de8,0x5ed41b85,0x2e2d4e61,
    0x216584cc,0x52e46c0c,0x2e09114e,0x59d83703,0x2067665c,0xb2c5221b,
    0x2e541a01,0x2a97676e,0x3a6deb9a,0x3b9d15bd,0x7647b7aa,0x6cb9bb01,
    0x3a0325cd,0xdd87b761,0x9ae6ec1e,0x4eed88e1,0x3629bbf5,0x9ddb14ee,
    0x848ac522,0xb10eb89b,0x0ded49dd,0x1581bdd3,0x6ec6e39d,0x2e26e140,
    0x4977770e,0x5eef9848,0xaac9ddb1,0x76c41b05,0x5562914e,0x88345eef,
    0x26bb543f,0x00001a2a,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x43100000,
    0x328a20a2,0x01505555,0x0aa88355,0x806a2098,0x5c3db900,0x4f7661dd,
    0x6edc9148,0xda8776e1,0x006a25dd,0x35174190,0x45128528,0x261c0bbb,
    0x18988b35,0x36a3bb91,0x54555514,0x86aaa1aa,0x0d440888,0xa80820ba,
    0x309851aa,0x71431141,0xfa869aad,0x0af6a2b0,0xdad889d1,0x44b2b622,
    0x32b2a2ed,0x52601e82,0x2074b148,0x4c34b148,0x37190d14,0x20321662,
    0x321508d8,0x872321da,0x59530dbc,0x7715ee49,0x11c8d81b,0x515a926d,
    0x0ded4b75,0x5554355d,0xa8b27621,0x44b86cc0,0x34771aae,0xb49926b3,
    0xd2e4e5c3,0x19169950,0x5488d550,0x2249a449,0x0048aa2b,0x66d5372e,
    0x2910b15c,0x5c33aa58,0xddeda9a2,0x8190d771,0x5684deca,0xf124dcc5,
    0x51d6c547,0x443e819d,0x2c52258d,0x642b81d3,0x76f54340,0x8162570d,
    0x0d2d40da,0xb590ae3a,0x2e1de4c1,0x2a1a5bd9,0x406458da,0x33a21c8d,
    0x03b7a20d,0x5cb15457,0x4d265ddd,0x221a0b34,0x2a950b35,0xb83959a3,
    0x177b6e5c,0xbb509832,0x2360d8d8,0x4773912c,0x06ddc339,0x8a44ae6e,
    0x90d0bb75,0x322ccf81,0x2a3660c8,0x807442a6,0x54399f3c,0xe987f05c,
    0x0c8d8c85,0x8b75550d,0x25cf440c,0x8c88b3b1,0x45515c5a,0xcce88187,
    0xda8f3724,0xd973763d,0x877761dc,0x550cdbdb,0x1500c815,0x20aaa974,
    0xb8820810,0x59acc081,0x2c522108,0xd0320ae0,0x16ded411,0x23d96ae6,
    0x1d1e41d8,0xbb305d01,0x0640dc98,0x74aa1a19,0x336a0645,0x115d226c,
    0x54571a29,0x003b0b52,0x00200000,0x204ccc00,0x26eecc0b,0x00004ccc,
    0x00000000,0x0d0320d0,0x2e03b3b1,0x64760722,0xd0190341,0x2c64c591,
    0xbbd0c836,0x3235caa9,0x223906c0,0x6ef44d14,0x2a9ddd11,0x00000cee,
    0x00000000,0x00000000,0x00000000,0x221d4000,0x377e3ded,0x37622d63,
    0x34000ae3,0xd13b8190,0x00255261,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x6c400000,0x71b8b3ed,
    0xb15c97b7,0x0982dbd8,0x2ed4376a,0x83d50b80,0x22132a0a,0x49bbb30c,
    0x642e1b8c,0x77065911,0x41106ce4,0x192ddddd,0x00000000,0x00000000,
    0x00000000,0x40000000,0x1917190d,0x589672ae,0x88d1f893,0x9a15564c,
    0x4fa5ddd9,0x8017c1c9,0x104ccc08,0x64765d02,0x32185cc9,0x01bb70d9,
    0x00000050,0x00000000,0x00000000,0x00000000,0x5d370ec0,0x22c645cb,
    0x90341c8d,0x436b6391,0x1d9602d8,0x8800006e,0x4c003bbb,0x44c00980,
    0x00000001,0x00000000,0x00000000,0x00000000,0x543b8000,0x322e5dac,
    0x34365458,0x04c71288,0x5c203bdb,0x0003bae1,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xdf880000,0x4b91f33d,0x3f858c8b,
    0x00000068,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__consolas_10_latin1_x[224]={ 0,2,1,0,0,0,0,2,1,1,0,0,1,1,
1,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,
2,0,0,0,1,0,0,1,0,0,1,0,1,1,0,0,0,1,2,1,1,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__consolas_10_latin1_y[224]={ 7,0,0,0,-1,0,0,0,-1,-1,0,1,5,3,
5,0,0,0,0,0,0,0,0,0,0,0,2,2,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,8,0,2,0,2,0,2,0,2,0,0,
0,0,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,-1,-1,-1,3,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,2,-1,0,0,0,
-1,0,0,0,0,2,3,3,0,0,0,1,0,0,0,2,0,3,7,0,0,2,0,0,0,2,-2,-2,-2,-2,
-2,-2,0,0,-2,-2,-2,-2,-2,-2,-2,-2,0,-2,-2,-2,-2,-2,-2,2,-1,-2,-2,-2,-2,-2,0,0,0,0,
0,0,0,-1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,
 };
static unsigned short stb__consolas_10_latin1_w[224]={ 0,2,4,6,5,6,6,2,4,4,5,6,3,4,
3,5,6,5,5,5,6,5,5,5,5,5,2,3,5,5,4,4,6,6,5,5,6,5,4,5,5,5,5,6,
4,6,5,6,5,6,6,5,6,5,6,6,6,6,5,4,5,3,5,6,4,5,5,5,5,5,6,6,5,5,
5,6,5,6,5,6,5,5,6,5,5,5,6,6,6,6,5,5,2,4,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,2,5,5,6,6,
2,5,5,6,4,5,5,4,5,5,4,5,4,4,5,6,5,3,2,4,4,5,6,6,6,5,6,6,6,6,
6,6,7,5,5,5,5,5,5,5,5,5,6,5,6,6,6,6,6,5,6,5,5,5,5,6,5,5,5,5,
5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,5,5,5,5,6,5,6,
 };
static unsigned short stb__consolas_10_latin1_h[224]={ 0,8,3,7,10,8,8,3,11,11,5,6,4,2,
3,9,8,7,7,8,7,8,8,7,8,7,6,7,7,3,7,8,10,7,7,8,7,7,7,8,7,7,8,7,
7,7,7,8,7,9,7,8,7,8,7,7,7,7,7,11,9,11,4,2,3,6,8,6,8,6,7,8,7,7,
10,7,7,5,5,6,8,8,5,6,8,6,5,5,5,8,5,11,11,11,3,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,10,7,7,7,
11,9,3,8,6,5,4,2,5,3,4,6,4,4,3,8,9,3,2,4,6,5,7,7,7,8,9,9,9,9,
9,9,7,9,9,9,9,9,9,9,9,9,7,9,10,10,10,10,10,5,10,10,10,10,10,9,7,8,8,8,
8,8,8,9,6,7,8,8,8,8,7,7,7,7,8,7,8,8,8,8,8,6,8,8,8,8,8,10,10,10,
 };
static unsigned short stb__consolas_10_latin1_s[224]={ 148,51,185,19,142,45,162,170,9,1,226,
187,129,190,138,160,190,118,184,211,203,217,223,1,229,26,200,32,36,154,42,
235,55,98,112,247,124,13,47,1,249,7,131,66,80,73,85,124,178,249,105,
19,91,54,235,242,59,52,222,26,200,22,107,195,180,138,13,150,7,144,228,
149,216,210,43,196,190,86,245,168,76,156,100,162,143,156,93,79,232,25,73,
31,6,14,173,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,
171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,148,253,49,
86,73,129,19,237,160,183,182,239,123,190,220,142,113,194,118,251,148,204,1,
166,202,133,203,208,164,151,116,137,13,26,187,166,173,180,143,194,213,148,219,
225,231,243,7,20,136,33,76,83,90,97,104,214,111,118,124,130,136,206,110,
70,82,88,94,100,106,154,175,158,64,58,52,39,80,98,92,123,112,104,169,
176,240,197,60,131,44,67,38,32,118,69,37,62, };
static unsigned short stb__consolas_10_latin1_t[224]={ 11,23,39,32,1,13,13,39,1,1,31,
31,39,39,39,1,13,31,23,13,23,13,13,32,13,32,31,32,32,39,32,
13,1,31,31,13,31,32,32,23,23,32,13,32,31,31,31,13,23,1,31,
23,31,23,23,23,32,32,23,1,1,1,39,39,39,31,23,31,23,31,23,
13,23,23,1,23,23,39,31,31,13,13,39,31,13,31,39,39,31,23,39,
1,1,1,39,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,11,13,1,
23,23,23,1,1,39,13,31,31,39,39,31,39,39,31,39,31,39,13,13,
39,39,39,31,31,23,23,23,13,13,13,1,1,1,1,23,1,1,1,1,
1,1,1,13,13,23,13,1,1,1,1,1,31,1,1,1,1,1,1,23,
13,13,13,13,13,13,1,31,23,13,13,13,13,23,23,23,23,13,23,13,
13,13,13,23,31,23,23,23,23,13,1,1,1, };
static unsigned short stb__consolas_10_latin1_a[224]={ 88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_10_latin1_BITMAP_HEIGHT or STB_FONT_consolas_10_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_10_latin1(stb_fontchar font[STB_FONT_consolas_10_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_10_latin1_BITMAP_HEIGHT][STB_FONT_consolas_10_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_10_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_10_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_10_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_10_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_10_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_10_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_10_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_10_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_10_latin1_s[i] + stb__consolas_10_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_10_latin1_t[i] + stb__consolas_10_latin1_h[i]) * recip_height;
            font[i].x0 = stb__consolas_10_latin1_x[i];
            font[i].y0 = stb__consolas_10_latin1_y[i];
            font[i].x1 = stb__consolas_10_latin1_x[i] + stb__consolas_10_latin1_w[i];
            font[i].y1 = stb__consolas_10_latin1_y[i] + stb__consolas_10_latin1_h[i];
            font[i].advance_int = (stb__consolas_10_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_10_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_10_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_10_latin1_s[i] + stb__consolas_10_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_10_latin1_t[i] + stb__consolas_10_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_10_latin1_x[i] - 0.5f;
            font[i].y0f = stb__consolas_10_latin1_y[i] - 0.5f;
            font[i].x1f = stb__consolas_10_latin1_x[i] + stb__consolas_10_latin1_w[i] + 0.5f;
            font[i].y1f = stb__consolas_10_latin1_y[i] + stb__consolas_10_latin1_h[i] + 0.5f;
            font[i].advance = stb__consolas_10_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_10_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_10_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_10_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_10_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_10_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_10_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_10_latin1_LINE_SPACING
#endif

