// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_22_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_22_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_22_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_22_usascii_BITMAP_HEIGHT         58
#define STB_FONT_courier_22_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_22_usascii_FIRST_CHAR            32
#define STB_FONT_courier_22_usascii_NUM_CHARS             95

#define STB_FONT_courier_22_usascii_LINE_SPACING          10

static unsigned int stb__courier_22_usascii_pixels[]={
    0x20000060,0x3309702c,0x0170170e,0x30008848,0x483bfe03,0x8001ffd8,
    0x01000200,0x80400002,0x01551098,0x98000030,0x2621310a,0x400ccc09,
    0x86a205fb,0x001bea19,0x0002cf30,0x12206457,0x40e458dc,0x447700ad,
    0x36e05dcb,0xd82c1ecb,0x65c43701,0xcb87d00c,0xbb300cdd,0x1f6e4c99,
    0xb884edb8,0x5764c4ec,0x200eebcf,0x2003201f,0xdbcebcd9,0xec859d33,
    0x36616005,0x0ce9edad,0x9620002c,0xa8d0002b,0xb1c81542,0x32faa1c8,
    0x83a0f86e,0x2d83c83a,0x1b834c16,0x47d0382e,0x6dc24c3a,0x22541b00,
    0x43d12a2c,0x4c0df84b,0x0c803606,0x0fdc0d80,0x2002c0ea,0x2f440d85,
    0x68000058,0x1543a800,0x458640aa,0xa8d0b11c,0xb3160ae5,0x3a059a20,
    0x09121b81,0x983600fa,0xb160ea05,0x1a12a3b0,0x000ec0be,0x2666b662,
    0x81f81d40,0x2a603a85,0x32073161,0x4014cb05,0x2e099999,0x2a074002,
    0x88d81542,0x803a8e45,0x3634162d,0x702cb603,0x88d43709,0x1b007b03,
    0xb057006c,0x64e60e61,0x50341c82,0x95019987,0xd89999bd,0x87503900,
    0xdb5bd105,0xb300c8b1,0x36f3e760,0xcccc880c,0xa801626c,0x215c2a84,
    0x4efeefec,0x3e00f439,0x46dc99a1,0x02cea00e,0xca8370d5,0x016c510b,
    0x20248991,0x599660e8,0x5501b4a8,0x4c1900f8,0x03201ecc,0x407a0570,
    0x03a20ea5,0x702a8bd3,0x9503ba0b,0x00722c00,0x886c406c,0x90e6d00d,
    0x2166dc43,0x161b2c78,0x40b4880b,0x7101b879,0xe816c179,0x6f4dcc5f,
    0x776fcc2d,0x2bb10740,0x84f87506,0xc806e058,0x7cc2c400,0x5c167501,
    0x20b0b904,0x1605f05e,0x402c4580,0x2ed76049,0x0390e6b0,0xac7996e2,
    0xb8091649,0x5c3c40b3,0x402f2e21,0xa92e201c,0x643b10dc,0x74c1ebad,
    0x20b58ebb,0x456e743a,0x806e01db,0x8adb800c,0x2b601cdb,0x16601b03,
    0x2faa2b6e,0x015c0f05,0x6c01d858,0x21c89300,0xcddcfcc8,0x12b80390,
    0x22cb2c1f,0x02cb600a,0x2e2370d5,0x0b817710,0x81f12b80,0x81d09549,
    0xb82d61a8,0x02dcaac2,0x003201b8,0x0dc5edc4,0x80e40f50,0x2736a059,
    0x2e01f058,0x0930b001,0xa85502c4,0x5e4eccc2,0x5c123909,0x36a687e1,
    0x441220fd,0xb85b8166,0x00911901,0x2b059220,0x5402b80d,0x583b0393,
    0x64037000,0x806e0000,0x6c12a03a,0x7c162005,0x82c00b03,0x5403900d,
    0xba441542,0x10de8e41,0x0763c8d5,0x8b60ee02,0x06e0b205,0x800298a6,
    0x2910362b,0x7400c81b,0x581d0750,0x54037000,0x01b00183,0x50b6006c,
    0x82c400bb,0x001dc1de,0x1621260b,0x882a8550,0x371c8394,0x4d305dd9,
    0x3366003b,0xf882c1ec,0x23881b80,0x41c8b20a,0x47224c59,0x881620d8,
    0x8950742d,0x5c0009e9,0x7666ec01,0x3d999884,0x400cb998,0xf8ceced8,
    0x06ccc00e,0xb9dd1dd5,0x36058005,0x0ae00e40,0x03273075,0x74039039,
    0x00c45d11,0x5c160199,0x2ee03704,0xd99be63b,0xea80cdce,0x6e6d42dc,
    0x3773260c,0x43cce980,0x200cccc9,0xeeeeeee8,0xca802604,0xccc981cc,
    0x0031004c,0x01999930,0x05800044,0x540688ea,0xb3985b06,0x40390390,
    0x3b7ba659,0x9dddfd02,0x1d0aba5d,0x0401daa8,0x30018044,0x00620080,
    0x0000000c,0x00000000,0x00000000,0x20254000,0x01500ae6,0x0c0420a2,
    0x440c00a8,0x504c0c00,0x5540c155,0x0000000a,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00eb9998,0x0000284c,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x88000000,0x0000bccc,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00026000,0x3fe20080,0x3ffe4fff,
    0x2621ffff,0x00000002,0x01300198,0x00000330,0x00000000,0x8ef764c0,
    0x00001fe8,0x00000000,0x40000000,0x982dcbeb,0x37aa01eb,0x2c04883d,
    0xd77b91c8,0xb1f7ec49,0xddd309fd,0xcdb81bdf,0x6dc0dbcb,0x6e43cccb,
    0x360dbfcb,0x4bfa60df,0x3a60defb,0x3bdf51ee,0xfb07775c,0x41774c1b,
    0x0072021d,0x37bbbf62,0x3bbbb20b,0x85fd51fe,0x1fd54fed,0x3ae1df50,
    0x3b604eee,0x87fd50de,0x3321d83c,0xa89501ca,0x68002443,0x20b07216,
    0x2e0d0048,0x1260f984,0xfb82b8fa,0x20ec1640,0x0b03602a,0xd82b82b8,
    0x1c802a81,0x4b303600,0x7742c40c,0x425e4580,0x003a82bd,0x4c0d9839,
    0x0720d105,0x0244582c,0xb1032440,0x20091058,0x82e05986,0x0b32a80d,
    0x7706c06c,0x64244160,0xb01b86e0,0x32621d41,0x9c80999b,0x03601aa8,
    0x0760646e,0x391612b6,0xa82bc98b,0x6cc39003,0x07603d80,0x43900072,
    0x801cdbd8,0x162c402b,0xb8680244,0x7006e002,0x35880403,0x0dc0e40b,
    0x325d88dc,0x2162b300,0x1cccdeca,0x3dbbdbc8,0x0a7501b0,0x20ed6077,
    0x191d4e45,0x20075057,0x0740b51c,0x00390750,0x22f62344,0x202c05c8,
    0x4882c1e9,0x001b0d00,0x0580dec4,0x80376a00,0x25506849,0x570165aa,
    0x400dc03b,0x6c0740ec,0x2c40ec40,0xc8b162b0,0x415d62b1,0xd739003a,
    0x42440680,0x0076001c,0x20588064,0x910581dd,0x00161a00,0x0b16edc4,
    0x5803e800,0x1b3981cc,0x13a01637,0x03900370,0x7557b037,0x5803605d,
    0xb8e458ae,0x750571ba,0x372f7200,0x83a80b00,0x005b001c,0x102a81cc,
    0x24882c09,0x90b0d029,0x59009fdd,0x56400036,0x1915c01d,0xb49b5220,
    0x1b803900,0x82b81c80,0x3202aabd,0x459a2c02,0x15cbb11c,0x320c41d4,
    0x00641663,0xb003903b,0xb0398005,0x20d00c01,0x4340aa48,0x0083201c,
    0x54002656,0xac401d14,0xd24ec058,0x803900b1,0xb81c801b,0x49800d82,
    0x27516244,0x5c570e45,0x43983a82,0x2cc1dc1c,0x40390688,0x0c8001d8,
    0x0ec000b0,0x910550dc,0x98640930,0x81a29105,0x1662c408,0xd80571b0,
    0x2012b22b,0x400dc01c,0x0d82b81c,0x16207440,0x1c8b3b0b,0x20ea0ae0,
    0x8340e439,0x3901d83c,0x7d007620,0x03a82cc1,0x06d4032e,0x640d98b1,
    0x43607900,0x2a1c82f9,0x36074c1d,0x2e603b80,0x6d45d805,0x5c01c803,
    0x2b81c801,0x40ec00d8,0x2ecc2c58,0xa82b8072,0x40e43983,0xb99d702b,
    0x6c40e403,0x3f620981,0x01900cdc,0x9f501ffc,0x9bd30199,0xbceb8059,
    0x3b3264ec,0xefa82ddc,0x3fa20ddc,0x813fae1e,0x445d804e,0x3bbb602f,
    0x77776c4e,0x177ec0ee,0x3fa27dd9,0xeef81eee,0x3f65eeee,0xdd72e44e,
    0x97774c1d,0xeeeeeeeb,0x83bbb63e,0x402605e8,0x1eeefeec,0xddddddd5,
    0x20000605,0x00130018,0x19880011,0x44004c40,0x00000001,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00007fa2,0x7ec00000,0x00fffcc0,0x03001002,0x00284c00,
    0x01551004,0x98822a88,0x10199809,0x2a620235,0xb01a9801,0x039ddddd,
    0x3dddddd7,0xeed8fbaa,0xddfddd90,0x3bfa63dd,0x366eeeee,0x5eeeeeee,
    0x37bbbba6,0xb1003902,0x03bbdddf,0x4017fbb6,0x07200dba,0x6dc0ffa8,
    0x007200ed,0x17549b10,0x9307fd40,0x3207d95b,0x266ccbbf,0x84ec82de,
    0x21edbacd,0x81dbacdb,0x82dcbed8,0x3202cc1c,0x45703901,0x41b8720c,
    0x20391a05,0x41e41cc5,0x1072001c,0x06d5c01b,0x3200dac0,0x883fee01,
    0x40072005,0xdc881dc8,0xd83fee01,0x41e42d80,0x5811d47a,0x401d82b8,
    0x3c82d848,0x901d40e4,0x8ae07203,0x41b8720c,0x20391605,0x40d81cc5,
    0x6406661c,0x55604981,0x00d95c03,0x98130072,0x20072004,0xcd8802eb,
    0x81cc1300,0x4381e268,0xa858fa48,0x4680040d,0x1c8f105a,0x40720398,
    0x8322b81c,0x44b06e1c,0x11439021,0xc8930398,0x9019dd11,0x92607503,
    0x00d96205,0x03400072,0x17540390,0x401ecc00,0xeeeeeeec,0x2b001267,
    0x2a0935c9,0x5c40bddd,0x15c6deed,0x260e43b0,0x6407200e,0x02c9999a,
    0x533d0072,0x34cd6409,0x322c0730,0x9ac80b71,0x3900db99,0x361c80e4,
    0x40007200,0xfddd503d,0x3ee1bddd,0x036c0000,0x02440072,0x2726e360,
    0x1ea8802a,0x0551a076,0xfddd906c,0x32039007,0x02dccccd,0xb99d0072,
    0x3666e409,0x322c0730,0xcdc803c9,0x8d00cedc,0x06c49849,0x176c0390,
    0x816c36b6,0x00faa01c,0x8220f660,0x0016005a,0x032e6b57,0x02ba4c0e,
    0x91e60b0d,0x0e402643,0x202b81c8,0x0732c01c,0x1cc0b0e4,0x00eec8b0,
    0x986981c8,0xd87cccce,0x201d999a,0xa8df101c,0x640b1b13,0x802ea801,
    0xffa80cd9,0x50e20b60,0x4c0d8819,0x0fc1764d,0x6c43a8e4,0x3620bb86,
    0x012a0e42,0x2e072039,0x0b007202,0x4c280e40,0x8ac87303,0xa80e400d,
    0x4cccce42,0x6666642b,0x203900ce,0xb715c2fb,0x7000e405,0x01b9103b,
    0x3f207fd4,0xfb81edcc,0x3f01cccd,0xcccd82e4,0x6e6e43dc,0x7e42ee9d,
    0x81c81cdc,0x6407202c,0x07202b81,0x80e400b0,0x06c0e60c,0x9006c472,
    0x20b0aa03,0x200d8058,0xb10bb01c,0x039007d4,0xb70dc880,0x98022003,
    0x00013001,0x26004400,0xc8026000,0x80e40d01,0x3202b81c,0x39002c01,
    0x44398320,0x3661c81d,0x1d103900,0x801b0154,0x7407200d,0xd59bb700,
    0x98000207,0x00000030,0x00000000,0x74000000,0x97540eee,0x1eeeeeec,
    0x776c9ddb,0x2777f743,0x81bbbfa6,0xeeeeeeee,0xbdddd50f,0x543fd03b,
    0x777f45ee,0x3f20deee,0x3bbaa0ee,0x10efeb82,0x9ddddddd,0x00000800,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x98000000,0x3104cc41,
    0x98833333,0x11882a20,0x22310355,0x2660530a,0x10666209,0x80cc4133,
    0x3ed80004,0xa9766bb3,0x5555547f,0x8221aaaa,0x8888880a,0x20eec408,
    0x77777710,0x00177777,0x00000000,0x00000000,0xc987b200,0x3333722d,
    0x5db2e1fc,0xb7d51dbd,0xdea87b77,0x45bccdbc,0x36e1cfc9,0x716f544e,
    0x900b01bd,0x4c3fe203,0x7ccff36f,0x55555546,0x1ff51aaa,0xfff98366,
    0x4366ffff,0x5554793d,0xaaaaaaaa,0x00000000,0x00000000,0x06e00000,
    0x1641c8ae,0xd7043de8,0x92640e81,0x406c0e49,0x541b102b,0x17158dc4,
    0xfa80dbb8,0x37c57e24,0x54000bf1,0x883620ff,0x04088888,0x00000b6e,
    0x00000000,0x00000000,0x5c0dc000,0x74077022,0x15c0dc02,0x0ae1b872,
    0xb101a126,0xdd930973,0xb15985bb,0x24f81f90,0x2ee27c4f,0x1bbbbbbb,
    0x00022022,0x00000000,0x00000000,0x00000000,0x0ae06e00,0x20160254,
    0x0e42b81b,0x0d815c37,0x13a200ea,0x1b109d30,0x3a0fe254,0x987d0fa3,
    0x99999999,0x00000000,0x00000000,0x00000000,0x00000000,0x260ae06e,
    0x1b805805,0x370e42b8,0x363a815c,0x01dcb800,0x1c83b1d1,0x054122b8,
    0x0001b813,0x00000000,0x00000000,0x00000000,0x40000000,0x2cc2b81b,
    0x2e016022,0x70e42b81,0x26d015c3,0x3b13c804,0x00162390,0x00000000,
    0x00000000,0x00000000,0x00000000,0x40000000,0xb117dc49,0x80583981,
    0x0e42b81b,0x57015c37,0xd83c8019,0x00000001,0x00000000,0x00000000,
    0x00000000,0x00000000,0x37600000,0xdb2ebbec,0x267ddddd,0x44eeefee,
    0x3bae3eed,0x3ae3df72,0x3a205d71,0x9177f405,0x000007fd,0x00000000,
    0x00000000,0x00000000,0x00000000,0x40000000,0x00000018,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__courier_22_usascii_x[95]={ 0,4,2,1,2,1,2,4,5,2,0,1,2,1,
4,2,2,2,1,1,2,1,2,2,2,2,4,2,0,0,0,0,2,0,0,1,1,0,1,1,1,2,1,0,
1,0,0,0,1,0,0,1,1,0,0,0,0,0,2,0,0,0,2,0,4,1,0,1,1,1,2,1,0,1,
1,1,1,0,1,1,0,1,1,1,1,0,0,0,0,1,2,0,5,0,1, };
static signed short stb__courier_22_usascii_y[95]={ 16,3,4,3,3,3,5,4,4,4,4,5,13,9,
13,2,3,3,3,3,4,4,3,4,3,3,7,7,5,8,5,4,3,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,4,3,20,3,7,4,7,4,7,4,7,4,3,
3,4,4,7,7,7,7,7,7,7,4,7,7,7,7,7,7,4,4,4,9, };
static unsigned short stb__courier_22_usascii_w[95]={ 0,3,8,9,8,9,8,4,4,5,8,10,5,9,
4,8,8,8,9,9,8,9,8,8,8,8,4,6,10,11,10,7,8,12,11,10,10,11,10,10,10,8,11,12,
10,12,11,10,10,11,12,9,10,11,12,12,11,11,8,4,8,4,8,13,4,10,11,10,11,10,9,10,11,9,
7,11,9,12,10,10,11,11,10,9,10,11,12,12,11,11,8,4,2,4,9, };
static unsigned short stb__courier_22_usascii_h[95]={ 0,14,6,15,15,14,12,6,15,15,8,11,6,3,
4,16,14,13,13,14,12,13,14,13,14,14,10,12,11,5,11,13,15,12,12,13,12,12,12,13,12,12,13,12,
12,12,12,13,12,15,12,13,12,13,12,12,12,12,12,15,16,15,7,2,4,10,13,10,13,10,12,13,12,13,
17,12,12,9,9,10,13,13,9,10,13,10,9,10,9,13,9,15,15,15,3, };
static unsigned short stb__courier_22_usascii_s[95]={ 253,111,106,37,50,101,142,115,59,90,82,
151,100,142,132,18,152,12,21,115,116,31,125,41,134,143,184,135,162,120,173,
50,64,103,91,103,68,56,45,82,23,14,70,242,231,218,206,1,186,73,1,
93,34,58,126,139,114,152,197,85,9,96,91,162,137,234,241,200,217,189,164,
194,174,173,1,79,125,44,33,245,161,229,22,224,183,1,57,211,70,205,13,
32,47,27,152, };
static unsigned short stb__courier_22_usascii_t[95]={ 1,1,46,1,1,1,33,46,1,1,46,
33,46,46,46,1,1,19,19,1,33,19,1,19,1,1,33,33,33,46,33,
19,1,33,33,19,33,33,33,19,33,33,19,19,19,19,19,19,19,1,33,
19,33,19,19,19,19,19,19,1,1,1,46,46,46,33,1,33,1,33,19,
1,19,1,1,33,33,46,46,33,1,1,46,33,1,46,46,33,46,1,46,
1,1,1,46, };
static unsigned short stb__courier_22_usascii_a[95]={ 186,186,186,186,186,186,186,186,
186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,
186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,
186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,
186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,
186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,
186,186,186,186,186,186,186, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_22_usascii_BITMAP_HEIGHT or STB_FONT_courier_22_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_22_usascii(stb_fontchar font[STB_FONT_courier_22_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_22_usascii_BITMAP_HEIGHT][STB_FONT_courier_22_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_22_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_22_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_22_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_22_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_22_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_22_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_22_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_22_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_22_usascii_s[i] + stb__courier_22_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_22_usascii_t[i] + stb__courier_22_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_22_usascii_x[i];
            font[i].y0 = stb__courier_22_usascii_y[i];
            font[i].x1 = stb__courier_22_usascii_x[i] + stb__courier_22_usascii_w[i];
            font[i].y1 = stb__courier_22_usascii_y[i] + stb__courier_22_usascii_h[i];
            font[i].advance_int = (stb__courier_22_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_22_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_22_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_22_usascii_s[i] + stb__courier_22_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_22_usascii_t[i] + stb__courier_22_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_22_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_22_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_22_usascii_x[i] + stb__courier_22_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_22_usascii_y[i] + stb__courier_22_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_22_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_22_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_22_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_22_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_22_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_22_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_22_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_22_usascii_LINE_SPACING
#endif

