// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_11_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_11_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_11_usascii_BITMAP_WIDTH         128
#define STB_FONT_courier_bold_11_usascii_BITMAP_HEIGHT         44
#define STB_FONT_courier_bold_11_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_bold_11_usascii_FIRST_CHAR            32
#define STB_FONT_courier_bold_11_usascii_NUM_CHARS             95

#define STB_FONT_courier_bold_11_usascii_LINE_SPACING           5

static unsigned int stb__courier_bold_11_usascii_pixels[]={
    0x00400008,0x43106a16,0x21304048,0x2a6a0008,0x4406a661,0x94419880,
    0x066a20a8,0x04044022,0x2e0e9966,0x816c3a62,0x91f74c4a,0x4b80f45d,
    0xcc93a5d9,0x27f6f441,0xee8d9dfb,0x71f7743e,0x6cc5f31f,0x217f542b,
    0x99a60ded,0x2c8b20aa,0x3d0698ae,0x0b2499e8,0x2c87a0b5,0x2e1c649d,
    0x2e6983a3,0x03a34422,0x3ae2d4f4,0x2e69b44d,0x47d99004,0x42c8b22c,
    0x7642d40f,0x03a0b20b,0x47b2c8d3,0x27664cd9,0x26be60fa,0x3a1f641e,
    0x0f6d43ef,0x221bddb1,0x42dde9e5,0x3ee3b818,0xd07e6590,0xb9881d83,
    0x512e0b26,0x22592c8b,0x6edc0ccc,0x0b77a60e,0x43411ae2,0x176e445e,
    0xd39d3cd1,0x323b81c8,0x742c8b23,0x27a21a60,0x0740b26a,0x9012c8b3,
    0xb3074091,0xd041f040,0xfde983d0,0x5b2cc7c4,0x4770483a,0x22c8b22c,
    0x64416c78,0x5c0b20de,0x72c83e23,0xfd03cb85,0x74c2ff4d,0x3bba23fe,
    0x320fff23,0x0f7d40ea,0x32009df3,0x71643d12,0x80d11e4b,0x440e642b,
    0x02d99e46,0x00800000,0x166e0002,0x2ffc0000,0x51409851,0x39501000,
    0x0e546200,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x40088088,
    0x20a9a808,0x01999808,0x201cd983,0x20080220,0x04071008,0x75c0cd98,
    0x4100981d,0x21776408,0x4772a05e,0xd52fece8,0x3f77cc7d,0xa9e887dc,
    0xd92eec86,0x2ed81ee0,0x1d81adb8,0x3a354f44,0x1776c699,0x5e1e47e6,
    0x40d6cc68,0x3c4ee934,0xb318f11d,0x4570e9a8,0xd06bea2c,0x0331d053,
    0x4ced8857,0xb8ae054c,0x44e26b82,0xbb00f746,0x6def989d,0xa5536b22,
    0x03ee767a,0x7f6744b2,0xf91dc3b0,0x45cdf899,0x82b84fae,0xc85d9049,
    0x01b70ee1,0x01ccb932,0x4d31733a,0x491b912c,0x3ba67ffd,0x4770f80f,
    0x1d11b50f,0x3a3cd068,0x9305702f,0x1b30ae04,0x360081d1,0x64f6fe25,
    0x263c5a23,0x3d9d8b26,0x425c3444,0x07c4ee5a,0x20d05df9,0x01d7d1e6,
    0x0ffba057,0x05dd7057,0x444d8857,0x3f204ecc,0x277ff43f,0x5df70436,
    0x15c06f74,0x64bffdb1,0xfff12cdf,0x9fdd7e4b,0x3e65fb7b,0x4c080fff,
    0x0000ffff,0x2e37ffdc,0x1000005f,0x000003bb,0x02999804,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x3b220220,
    0x7b75b90c,0x36a4ddd8,0x1376a0ce,0x66edc151,0x8eeeedc1,0x24d98dd8,
    0x362da9db,0xbb34da9d,0x26eec45b,0x6c3b75b5,0x37667b74,0x362623dd,
    0x6c4f4c2f,0x83d11b52,0x13d30da8,0x13ccf43d,0x54f445bd,0x165e5e46,
    0x3d1174b7,0x4cde41b7,0x8b66f23c,0x23a20bc9,0x745fd478,0xb92a6b61,
    0x02b85733,0x2c407493,0x26fa0459,0x54f41a20,0x0d55cd46,0x774c345a,
    0x16675dc0,0x0570f239,0xed98f55f,0x23af60d8,0x642b8360,0x4933dd89,
    0xc962330e,0xa9b6e201,0x3fbe0dbf,0x2b205702,0xa86e882c,0x3f21deed,
    0xcf82b85f,0x6ed64c7c,0x7061f760,0x25b34b85,0xa9dcd168,0x98cc36a4,
    0x2f4f43a4,0x02b8355a,0x2eba0dd1,0x07e5fcc5,0x3415c039,0x41fb498f,
    0x82b8009d,0x3ee1eefd,0x03bba62e,0x3a61ddf9,0x3ffae4ee,0xb1aebf90,
    0x213607ff,0x224fbafd,0x3fe6798f,0x937ffc45,0x7ec7f97f,0xbff50f8b,
    0x837ffc40,0x20040100,0x00000100,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xb86eeedc,0x6eec0cdd,0x2214c664,
    0xa8db82dd,0x24c9362d,0x07bb5019,0x2b36e130,0x4c06a62d,0x6dc1981a,
    0x80a981cd,0x4f45641a,0xd73b50e9,0x5ae4c9e8,0x886e987c,0x3f20da9e,
    0x37a63f98,0x30065c40,0x363a21bb,0xb0f7360c,0x33a23f9b,0x1a67a25d,
    0x6f44d99d,0x65fcae5d,0x2a1d9661,0x2e1e6869,0x0ee982db,0x416ee6dc,
    0x40ea0cea,0x4df82ec8,0x9665edb8,0x3f99d70a,0x3b635d7c,0x51d8ee1c,
    0x4b3177e1,0xf063a22c,0x1773a1e2,0x7755c1e4,0x545f902b,0x81fdc313,
    0x276a0ecf,0x5089625b,0x67c1555b,0xf51510ed,0x2d03d254,0x3a2b32c8,
    0xdb074ba0,0x5decc5fd,0xab82b80e,0x67542baa,0x443a9d40,0x24ab42ed,
    0x322ffee9,0x3bb21eef,0xf13c9a0e,0x4ffc89dd,0x92ffffc8,0x7fcc5dff,
    0x7c4040ff,0x7e46fa9f,0x7d4ffc3f,0x3ee036e6,0x3b303fff,0x022f57f2,
    0x3f204010,0x00040eff,0x00000000,0x00000000,0x00000000,0x00000000,
    0x2a198098,0x98511510,0x06662289,0x8a98aaaa,0x26a661a8,0x98808001,
    0x01a5c199,0x262cac86,0x04444199,0xd82b8000,0x7f54e99e,0x3bf623d9,
    0x8b9bf52c,0x27f26fcf,0x3bbba3fa,0x9b02b81d,0x32eeeeb8,0x51e4dd79,
    0xcc8ae6e7,0xfffff34c,0x2620001d,0x676cc1bc,0x303be60e,0x263cd01d,
    0x254ec0ea,0x88eeaeae,0x6e645eee,0x02aaaa63,0x09898002,0xa8000000,
    0x77c1deed,0x21f6e46e,0x2e3cd059,0x076cc28e,0x30eeaeae,0x492441df,
    0x002cccca,0x00000000,0x2b605700,0x3f2bf24b,0x647fff33,0xff12fabf,
    0xdf09d0ff,0xcaa8d7d7,0x00000001,0x00000000,0x000001b8,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__courier_bold_11_usascii_x[95]={ 0,2,1,0,0,0,1,2,2,1,0,0,1,0,
2,0,0,0,0,0,0,0,1,0,0,1,2,1,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,2,0,1,0,-1,1,0,-1,0,0,0,0,0,0,0,
0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,1,2,1,0, };
static signed short stb__courier_bold_11_usascii_y[95]={ 8,1,2,1,1,1,2,2,1,1,1,2,6,4,
6,1,1,1,1,1,1,1,1,1,1,1,3,3,2,3,2,2,1,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,9,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,2,3,3,3,3,3,3,1,1,1,4, };
static unsigned short stb__courier_bold_11_usascii_w[95]={ 0,2,4,6,6,6,5,2,3,3,6,6,3,5,
2,6,6,6,5,6,5,6,5,5,6,5,2,4,7,6,6,6,5,8,6,6,6,6,6,6,6,6,6,6,
6,8,7,6,6,6,7,6,6,6,8,7,6,6,6,3,6,3,6,8,3,6,7,6,6,6,6,6,6,6,
5,6,6,8,6,6,7,6,6,6,6,6,6,7,6,6,6,4,2,4,6, };
static unsigned short stb__courier_bold_11_usascii_h[95]={ 0,8,3,8,9,8,7,3,9,9,5,6,4,2,
3,9,8,7,7,8,7,8,8,8,8,8,6,7,6,4,6,7,8,6,6,7,6,6,6,7,6,6,7,6,
6,6,6,7,6,8,6,7,6,7,6,6,6,6,6,9,9,9,4,2,3,6,8,6,8,6,7,8,7,7,
10,7,7,5,5,6,8,8,5,6,7,6,5,5,5,8,5,9,9,9,3, };
static unsigned short stb__courier_bold_11_usascii_s[95]={ 123,57,95,103,31,60,43,125,49,20,60,
1,124,100,88,24,110,1,111,82,117,89,117,35,1,29,123,123,68,74,54,
104,16,29,104,29,8,1,117,8,102,95,22,76,61,45,109,97,88,48,49,
36,57,15,64,80,73,38,15,38,42,53,67,106,91,83,8,90,41,97,55,
22,62,90,1,69,76,51,30,118,74,67,23,111,83,22,44,8,16,96,37,
15,12,7,81, };
static unsigned short stb__courier_bold_11_usascii_t[95]={ 9,1,36,1,1,1,21,29,1,1,36,
36,21,36,36,1,1,21,12,1,12,1,1,12,12,12,12,1,29,36,29,
12,12,29,29,21,29,29,21,21,21,21,21,29,29,29,21,12,21,12,21,
21,21,21,21,21,21,29,29,1,1,1,36,36,36,29,12,29,12,29,12,
12,12,12,1,12,12,36,36,29,1,1,36,29,12,29,36,36,36,1,36,
1,1,1,36, };
static unsigned short stb__courier_bold_11_usascii_a[95]={ 93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_11_usascii_BITMAP_HEIGHT or STB_FONT_courier_bold_11_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_11_usascii(stb_fontchar font[STB_FONT_courier_bold_11_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_11_usascii_BITMAP_HEIGHT][STB_FONT_courier_bold_11_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_11_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_11_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_11_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_11_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_11_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_11_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_11_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_11_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_11_usascii_s[i] + stb__courier_bold_11_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_11_usascii_t[i] + stb__courier_bold_11_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_11_usascii_x[i];
            font[i].y0 = stb__courier_bold_11_usascii_y[i];
            font[i].x1 = stb__courier_bold_11_usascii_x[i] + stb__courier_bold_11_usascii_w[i];
            font[i].y1 = stb__courier_bold_11_usascii_y[i] + stb__courier_bold_11_usascii_h[i];
            font[i].advance_int = (stb__courier_bold_11_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_11_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_11_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_11_usascii_s[i] + stb__courier_bold_11_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_11_usascii_t[i] + stb__courier_bold_11_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_11_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_11_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_11_usascii_x[i] + stb__courier_bold_11_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_11_usascii_y[i] + stb__courier_bold_11_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_11_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_11_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_11_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_11_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_11_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_11_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_11_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_11_usascii_LINE_SPACING
#endif

