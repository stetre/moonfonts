// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_13_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_13_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_13_latin1_BITMAP_WIDTH         256
#define STB_FONT_times_bold_13_latin1_BITMAP_HEIGHT         62
#define STB_FONT_times_bold_13_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_times_bold_13_latin1_FIRST_CHAR            32
#define STB_FONT_times_bold_13_latin1_NUM_CHARS            224

#define STB_FONT_times_bold_13_latin1_LINE_SPACING           8

static unsigned int stb__times_bold_13_latin1_pixels[]={
    0x00000a88,0x006a0000,0x8800014c,0x001a800a,0x5dc01500,0x000fea4a,
    0x40d42640,0x201504c8,0x64c50029,0x1ba99220,0xb92206a0,0x2980cbcd,
    0x2a0c4030,0x00002a22,0x5b702ee4,0xf983e80d,0x8034c04d,0x0e77402d,
    0xe9809bb0,0x07e3e200,0x26aa04b8,0xf300fe23,0x261dc09b,0xa85c80ee,
    0x2007a205,0x74912d42,0x01d105a8,0x273ff291,0x3205dd01,0x20742440,
    0x0d5b703c,0x22015388,0x40e60289,0x0a801b89,0x54440280,0x201ca602,
    0x00528009,0x8d4aaa05,0x1302abf8,0x70aa2037,0x50b90511,0x5c403100,
    0x74912dc1,0x4402600d,0x0339fff4,0x22540e35,0x0280c41d,0xb8805131,
    0x9f6cc3ca,0x54aaa3c8,0x3221db31,0x03cab883,0x22079571,0x76cc3cab,
    0x76cc7913,0x57107913,0x13ed9879,0x0b9fcc79,0x407f5df1,0xed9b6c03,
    0x9ae44dbb,0x264dbbed,0x5c4dbbed,0x912646db,0x0700f75c,0x4e7ff522,
    0x47980e01,0x98fb660f,0x500e03ed,0x3f62743f,0x73f986a0,0x19877e41,
    0xa89d0fd4,0x3f513a1f,0xa83f6274,0x83507ec1,0xfb13a1fa,0x15b60d41,
    0x541ba7f1,0x3fb36c07,0x1fd97224,0x2243fb12,0x06c43aaf,0xa83ed261,
    0x3fea9107,0x40f5019c,0xd81f51f8,0xa80fec1f,0x3f237407,0x40983f60,
    0x5fca856d,0x7e46e813,0x41f91ba0,0xfb07e46e,0x83f604c1,0x3f237409,
    0x40983f60,0x4fe21bfa,0x405fd07d,0x0467f26d,0x119fc972,0x4c119fc8,
    0x2a0ae05f,0x5fd03d0e,0x4e544910,0x2205fd01,0x3f90f52f,0x5fd01fc8,
    0x7f713e60,0xa81307ec,0xbfd941bf,0xf713e609,0x7f713e67,0x47f713e6,
    0xfb0260fd,0x89f304c1,0x983f63fb,0x9fc46e80,0x06f9985e,0x05afc9b6,
    0x82d7e4b9,0x2df05afc,0xee8a25c0,0x86f99849,0x9819c848,0x21f306f9,
    0x20fe40f8,0x6f9981fc,0x4fa89f50,0xe80983f6,0x17fd1286,0x53ea27d4,
    0xaa7d44fa,0xfb27d44f,0x83f604c1,0xf513ea09,0x01307ec9,0xfcdf8877,
    0x203fb381,0x41aff26d,0x41aff25c,0xdf706bfc,0xb1225c87,0x07f6705f,
    0x70339091,0xd16a07f6,0x7e41fc83,0x103fb381,0x361fb8df,0x0ee02a0f,
    0x220ff98a,0xf88fdc6f,0x6f88fdc6,0x41fb0fdc,0x1507ec0a,0x87ee37c4,
    0x2602a0fd,0x8805fc40,0xdb05fcac,0x6410cfe4,0x20867f25,0x028219fc,
    0x22a489ae,0x7e56446b,0x0ce42445,0x217f2b22,0x3f21d42c,0x3220fe41,
    0x1fb05fca,0x387ee36c,0xfa870130,0x8db07ec0,0xfb1b60fd,0x87ee36c1,
    0x20e1fb83,0xf71b60fd,0x20b321c3,0xfd0e03f8,0xfb266cc1,0x6cbb05c3,
    0x1fd82e1f,0x8f20282e,0x71667a48,0x21220fe8,0x3fa1c19c,0xb04c0620,
    0x1c1fd83f,0x56e403fa,0xbbed80dc,0x74c16641,0x56e40641,0xcadc80dc,
    0xdcadc80d,0x01bbed80,0x320377db,0xed80dcad,0xa81441bb,0x10ea80bc,
    0x11541bfb,0x44fb79fd,0xb79fd109,0x6de7f44f,0x45013007,0x887542a8,
    0x2a0a0dfd,0x6c43aa08,0x108010df,0x1ff447fd,0x37f621d5,0x80400200,
    0x04000028,0x00100080,0x08004002,0x00000100,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x33201510,0x5c405300,
    0x307501cb,0x80077799,0x2aaa6029,0x0044001b,0x00188000,0x00000110,
    0x26000020,0x2ea00000,0xb1bac000,0x91065d49,0xda877590,0x065e4c2b,
    0x0af6a0a6,0xd01ec0f2,0x7447ee05,0x17d43c44,0x84cbd8d1,0x981b82ee,
    0xf11e7aa1,0xe805d10d,0x2603fb03,0x5437c41f,0xa83f300f,0x9503b887,
    0x7d417577,0x6b807d44,0x3ae05170,0x4dd2d220,0x20323e9f,0x65d42a9a,
    0x643f9fc1,0x501cba87,0x20280f60,0xf107e46e,0x4c286f81,0x438cc198,
    0x124a6a1b,0x075390a3,0xa81cc091,0x9037048b,0x20550733,0xb885501b,
    0x13a0fb83,0x02a81919,0xd816601b,0x47ab72a0,0x27b3f14d,0x4c0a602a,
    0x81f9fc42,0x700aa880,0x1eea8f60,0x227cc32e,0xf50fc3fb,0x5df6cc09,
    0x90fb664d,0x30ab6cf4,0x985307db,0x2a61a99a,0x26a61a99,0x882981a9,
    0x055440aa,0x06602aa2,0x37c41571,0x81981fb3,0x2a033029,0x64435307,
    0x64570d9a,0x3a0488db,0x2d5745aa,0x301b57f1,0xf50bb788,0x45fb0f60,
    0xf513ea1a,0x13ee24c9,0x36243fb0,0xeae4a61f,0x741fd834,0x22fe25aa,
    0x3e2fe24f,0x13e2fe24,0xdbc4b55d,0xf12ede25,0x2593d176,0xafd4bb78,
    0x27a3faa8,0xd16aba2c,0x05fd0593,0x473587f1,0x7119041a,0x3e63e617,
    0x23f31f31,0x0c8bb3f8,0x743ec6c4,0x7c43d82f,0xc8df10e6,0xbf306e1f,
    0x8119fc80,0x5fc6a1fc,0x1fc832f9,0xf87e63e6,0x9f3f89f3,0x7cc9f3f8,
    0xb1b11f98,0x13ec6c4f,0x4fccfb1b,0x4fb1b15c,0x9f538cfb,0x7cd727e6,
    0x93f31f98,0x886f998b,0x3bfbf23f,0xbc954013,0x5f31f74c,0x44be63ee,
    0x826cdb3f,0x7ccc7dca,0xbfc83d86,0x3741fb03,0x503f607c,0xfc82d7e4,
    0x32be2661,0x21fc8317,0x3e2f98fb,0x9f3f89f3,0x7dc9f3f8,0x372a2f98,
    0x2a3ee547,0x26bee7dc,0xf99f72a1,0x7dcbee3d,0xf31f719a,0x7066bee5,
    0x47f107f6,0x882a8b48,0x7cdaefa4,0x51f30fa8,0x32afe21f,0x4cd17f35,
    0xfd9c7d9f,0x7fc41ec1,0x0f2b6a02,0x5df640fc,0x41aff20b,0x674e21fc,
    0x321899e9,0x3ea3e61f,0xf13e33e0,0x8cf89f19,0x3ea3e64f,0x4cfb3f30,
    0x27e67d9f,0x984fe67d,0x07ec7d9f,0x309fccbd,0x3e61f51f,0x7e564413,
    0x2551fc45,0x50642f45,0x15ddc599,0xbfa8aeee,0x3353e1ce,0x3223f99f,
    0x81ec5fca,0x37c400fd,0x03600f88,0x320867f2,0x8500541f,0x15ddc1fc,
    0xdb17efb6,0xfbed8bf7,0xf315ddc5,0x33e63f99,0xf99f31fc,0xf98efdc3,
    0x372e1fcc,0x1dfb85ca,0xbf70aeee,0xa83fa1c3,0x8800825f,0x00000881,
    0x000aa880,0x1360fe87,0x6cc007ec,0x880ec0be,0x2e1fd81d,0x86a07f60,
    0x01fd8298,0x10020040,0x00000000,0x01040008,0x54080008,0x01bfb10e,
    0x00000000,0x54000000,0x21bfb10e,0x5ff4c098,0x10180000,0xb79fd101,
    0x881ff44f,0x7fd1019a,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xa8991000,0x0370b222,0x6dd40fa6,
    0x20b39500,0x302ee60c,0x350a8597,0x74c1dda8,0x40aa81ee,0x3bbba229,
    0x2a0aeea2,0xcba81bbb,0x36aa0cc1,0x81bbba82,0x64ec3bac,0x81aa9802,
    0x543bbcc9,0x06a0983b,0x81999751,0x5911deb8,0x2a6a62a8,0x10315502,
    0xb09124c4,0x13e024c5,0xb981ede2,0x4f44b038,0x3267a26a,0x47f17f11,
    0x7645fab8,0x6c0ec45e,0xfddf54d9,0x83e23e21,0x4c5519ab,0x12f46b8f,
    0x31b83f2f,0x2a9a8571,0x0d90dc5c,0x45f50b73,0x51e76e68,0x3f52f49f,
    0x2fc40744,0x7c4488b6,0x45ec3fae,0x9ae1cc4f,0x4162d80c,0xfa84f9b8,
    0x99a980c9,0x1f51c41a,0x26fee1f5,0x7f17f108,0x203b0fa0,0x2337984e,
    0x8cfa9a21,0xf1d3530f,0x7d47dc71,0x9f270261,0x3aa8caa9,0x0cc05544,
    0x13662064,0x0b6c50df,0x2088dc64,0xf880985e,0x881916c5,0x8fd4dd3f,
    0x5cb7e64f,0x4b605548,0xfbbe881b,0x5916fa84,0x227c5fc4,0x3ea3ee1b,
    0xf889fd12,0x1fb83f8b,0xf88bbfea,0x803ee3ec,0x7177ec3a,0x4663e3a6,
    0x002f99fa,0x4c2e9c3d,0x3d176f11,0x360d4c59,0x09f50fba,0x26057f4c,
    0x27cc261a,0x2d8bf100,0x367f1055,0x327c3ee7,0x2442219f,0x32666219,
    0x7c7ea5d8,0xd9fe55c4,0x2c4f9fc0,0x88bea3ee,0x22fe26fd,0x13fdc0bf,
    0x3ee1fd73,0x29f30fb9,0x7f5c1d80,0x89ef4ce6,0x41f9bb12,0xf9c0a82c,
    0xd8d89442,0x89727e67,0x3e63ea3f,0x64c09f72,0x51fc40bf,0x99893ee5,
    0x2625f881,0x7c432489,0xf97ccbd3,0x8640fe24,0x3a1580fa,0x993e1f70,
    0xf039fd1f,0x544893e7,0x6cc1fa8f,0xdd7df12f,0xf101f701,0x8be67ee5,
    0x54681dfb,0x26665f97,0x440a8f8e,0x4043fc6c,0x15134b99,0x5f73ee54,
    0xf71fc433,0x17e65f31,0x8fe20f10,0xfe8bf33c,0x413e2220,0x3e21f50c,
    0x5f641fcd,0x2a0fe24f,0x1b83d552,0x9f1f98e2,0xaff8afd4,0x727c67c1,
    0x27a9f883,0x731e998a,0x124c2601,0x8af98643,0x1d40e41f,0x590fc5ae,
    0xd3075515,0x90370701,0x4c731531,0x4fe67d9f,0x8fa8fe20,0x503f60fa,
    0x88aebf2a,0x0fd97a3f,0xf9dd83f6,0x3d552a83,0xf0802fe2,0x32443f89,
    0xd124c3f5,0x6fe76459,0x3ab3bf60,0x2fdf6c3f,0xa8b72e0b,0x816e4bbd,
    0x3ea0abfc,0x1dedc1ad,0x6c0ec164,0xbabb83ba,0x4c05d443,0xbb81fc40,
    0x667cc3ba,0x8877ee1f,0x41e5e43f,0x970bbbec,0x1fc41dfb,0xe9adc8df,
    0x207664c5,0x447ea648,0xd89f003f,0x3020260d,0x40081988,0x10080408,
    0x3106a000,0x00040080,0x02008044,0x00000020,0x80800020,0x010005fa,
    0x32fd4042,0x01002203,0xbca82026,0x00665400,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x40000000,
    0x47910ed9,0xb88352aa,0x9aa883ca,0x98aeeea0,0x547913ed,0x2c36e1de,
    0x76cc6f5c,0x0baa3912,0x65f6dc40,0x2f3b663d,0x2a3b1b03,0x880fa62e,
    0x262e83cd,0x05db303e,0x6400f2e2,0x2662752e,0x20700999,0xdea8bed9,
    0x2a2d4001,0x4c9500de,0x740ccced,0x3f25ebac,0x9fcc330e,0x4e87ea0b,
    0x447f27e2,0x41fb0e66,0x3307f41a,0xf93fc05c,0x007f11c5,0x4488fe5c,
    0xc81db0fd,0xf87f10b8,0x20b2a604,0xfb027c1d,0x10677201,0x42a7f309,
    0x40f50100,0x2c1be1fc,0x33626fa8,0x6c4f885f,0x8e26f88f,0x57f2a2fd,
    0x742b6c09,0x8fb87e46,0x0c9f30fa,0x540983f6,0x90730e3f,0x1457e65f,
    0x980537f1,0x41899fc9,0x989f50fd,0x9f0fe21a,0x299a98aa,0x273e0d4c,
    0x0debfd82,0x09103dd3,0x02011dba,0x0fe40bfa,0x6e8160df,0x4eb85e82,
    0x826f87e4,0xbfd945fa,0x30dfd409,0xd13fb89f,0x1efe8b93,0x20260fd8,
    0x10b0316f,0x0a3faebf,0x407f3bf1,0xa81b7f93,0x46f8abfe,0xf0fe23f8,
    0xf7df0329,0x3be1fc47,0x4c7ec3fa,0x441dd14f,0x2e099da9,0x2040229f,
    0x5f906f99,0x4cc4df33,0x8374099d,0x22745c3e,0x881dcbfc,0xfe8940ff,
    0x7d46e80b,0x35727d44,0xd87ff910,0x3f20260f,0xfb01903a,0x8877f553,
    0x2ea0db3f,0x440dbfda,0x47f88afd,0xf0fe23f8,0x3e9f0199,0x29f0fe24,
    0x7cc7ec4f,0xb75517a4,0x3beea155,0x2702012b,0x9afc81fd,0x3aaaa6f9,
    0x4c3741aa,0x644e8cc5,0xfc84fb9f,0x03fe6283,0xb8df10ee,0x4599f31f,
    0x1fb1fa61,0x177c4054,0x8efa8398,0x9fc41ff8,0x3f22887d,0x87ec1099,
    0x11fc45fa,0x84fef87f,0x1fc49f4f,0x3f627d3e,0x417a0eda,0x0117a048,
    0x5fcac882,0x41be1fc8,0x0321ba05,0x645ffffb,0x7cc3fb0f,0x07d438c6,
    0xb07ec04c,0x53feee8d,0x87ee2d47,0x0b01f603,0xf886c93e,0xfc870bb3,
    0x90fd82e1,0x223f883f,0x17d67c3f,0x7f127d3e,0xfd89f4f8,0x65c5e809,
    0xf551ccec,0x7040255d,0x0fe40fe8,0x6e8160df,0x9886e6e4,0x43f60de9,
    0x987fa0fd,0x90641e9b,0x656e4059,0x52b92e0d,0xdb03759b,0x01cc0377,
    0x39872032,0x40eace88,0x59fb30dc,0x6e7f44f9,0x2a5fa81d,0x7f57e65f,
    0x4bf3bf31,0x277e65fa,0x20bfa66f,0x26620ef8,0x3fe60999,0x26666661,
    0x3f621d51,0x517fd10d,0x260103ff,0xffff51ff,0xcfe893a0,0x2bbee1cc,
    0x22002fcb,0x5d401002,0x0800881a,0x00010000,0x00000040,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x76cc0000,
    0xeea8b6e3,0x774c32e1,0x76cc7b33,0x75edc3bc,0x7db32dbd,0x8fb669b7,
    0x6f543ed9,0x3017db31,0x981997db,0x264dbbed,0x5442bced,0x2a66a60a,
    0x4c298151,0x0d4c331a,0x30151151,0x1a8aa885,0x19811530,0x15554466,
    0x54451351,0x4554c298,0x4a26650a,0x266a200a,0x19801733,0xc87f2193,
    0x06a2fd80,0x361229f9,0x42e1bd0f,0x0fe4516f,0x3ee0fec9,0x3f62fe47,
    0x7ec3f601,0xc890fec0,0x2d12fa8f,0x3e2be65d,0x25aae874,0x566173f9,
    0x21fcfe24,0x32d14d9d,0x556c4b9f,0x5e964f47,0xdf89f315,0x17d77c6c,
    0xbea8a3ba,0x05b930fc,0x3ab7e7be,0x2a17b505,0x0713f92f,0x3a0737c4,
    0x21fb03af,0x137c14fa,0x32098fe4,0x997e5c1f,0x007ec5fa,0x907f21fb,
    0x1f90233f,0x36362bf1,0x47ecef46,0x87e63e61,0x067d456d,0x2f31fcfe,
    0x5f91b119,0x7dcfccd7,0x22b93f32,0x82fc3740,0x4fa87f3f,0xb883715c,
    0xaf53e0bd,0x40b7226d,0x01f7f919,0x2603bfc8,0x21fb00ff,0x906f86f9,
    0x1fc8575f,0xf8bb7c5c,0xfb007ec5,0x5f90dd11,0x3ee7f20b,0xf71f72a2,
    0x8fb89f37,0x06fea2f9,0x7f3f8bf9,0x5e4c07dc,0x2fee089f,0x113f72f9,
    0x13e0bea0,0x6e84f9fc,0x930550dc,0xb5ea7c3b,0x4405f54d,0x03bf3f21,
    0x6c02ff88,0x221fb04f,0xf906f86f,0x41fc85b7,0xbf153fb3,0x3f600fd8,
    0xd7f906fc,0x982aff20,0x97c47d8f,0x7cc7c44e,0x3dc62f40,0x7f11fcfe,
    0x9fcc7c42,0x47e67e61,0x44ae13f9,0xf04f855f,0x7f7113e7,0x5074cecc,
    0x3a9f019b,0x39b30db5,0x2fdcfe40,0x99803f60,0x50fd82fe,0x320df0bf,
    0x0fe4289f,0x5f8b7cce,0xfd8607ec,0x9fc83fc8,0x980fc821,0x86c1fccf,
    0x82bbb81b,0x225e542b,0x7dc5fbed,0xf95df31d,0x1e664c5b,0xcaf437ee,
    0x37e25ccf,0x2fcefcc0,0x2e3fd1b3,0x0592abca,0x477c6fc4,0x057100fe,
    0x01fec7f2,0x44a601fb,0xc87ec0ff,0xf906f81f,0x4707f603,0xfd8bf13e,
    0xd0fd86a1,0x2e1fd83f,0x00003f20,0x80400000,0x00408000,0x00000001,
    0x00000000,0xfe880000,0xd309ff53,0x12fa817f,0x3fa61bfd,0xffa81ddb,
    0x205ff441,0x47a63fe8,0x223df50a,0x10fcacfe,0x43be65fd,0x27dbcfe8,
    0x00003fe8,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x02080000,0x40808206,0x3d98b720,0x82c89322,
    0xbd857058,0x4407a1e8,0x31099999,0x2a613333,0x0082ee25,0x221b1040,
    0x2e13330c,0x000003aa,0x00000000,0x00000000,0x00000000,0x0e20dd22,
    0x476064aa,0x4432573b,0x0b624c68,0xaab88f32,0x44be33a3,0x5dd4aa2f,
    0x77751bbb,0x43aa6797,0x21f33bab,0x1198bed9,0x7cc7e63f,0x26a7dd91,
    0x0000002a,0x00000000,0x00000000,0x10000000,0x4cccb51d,0x267a0999,
    0x46e3cd86,0x8d506a0c,0x10da442d,0xe9647797,0x534a83a0,0x44015555,
    0x2ea1d773,0xb50caa1b,0x00000dc7,0x00000000,0x00000000,0x00000000,
    0xb5c00000,0x2eeeea2e,0x217d720b,0x8f7221eb,0x89150dea,0x24986c2d,
    0x1c2a1cca,0x5ddd410e,0x4c6201bb,0x00066098,0x33330000,0x44444433,
    0x00000000,0x00000000,0x00000000,0x8ad80000,0x51d02885,0x803b3b89,
    0x31022198,0x11304083,0x00000001,0x00000000,0x3bbbbb80,0x01333332,
    0x00000000,0x00000000,0x00000000,0x4429a400,0x83070a82,0x00000001,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_bold_13_latin1_x[224]={ 0,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__times_bold_13_latin1_y[224]={ 10,2,2,2,2,2,2,2,2,2,2,2,8,6,
8,2,2,2,2,2,2,2,2,2,2,2,4,4,3,4,3,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,1,4,2,4,2,4,2,4,2,2,
2,2,2,4,4,4,4,4,4,4,2,4,4,4,4,4,4,2,2,2,5,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,10,4,2,2,3,2,
2,2,2,2,2,4,4,6,2,0,2,2,2,2,1,4,2,5,9,2,2,4,2,2,2,4,-1,-1,-1,-1,
-1,0,2,2,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,3,1,-1,-1,-1,-1,-1,2,2,1,1,
1,2,2,1,4,4,1,1,1,2,1,1,1,2,2,2,1,1,1,2,2,3,4,1,1,1,2,1,2,2,
 };
static unsigned short stb__times_bold_13_latin1_w[224]={ 0,2,5,6,6,11,10,3,4,4,6,7,3,4,
3,4,6,5,6,6,6,6,6,6,6,6,2,4,7,7,7,6,11,9,8,8,8,8,7,10,9,5,6,10,
8,11,9,9,7,9,9,7,8,9,9,12,9,9,8,3,4,3,6,7,3,6,7,5,7,5,5,6,7,4,
4,7,4,10,7,6,7,7,6,5,4,7,6,9,6,6,6,5,2,4,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,2,6,6,6,6,
2,6,4,9,4,6,7,4,9,7,5,7,4,4,3,7,7,3,3,4,4,6,9,9,9,6,9,9,9,9,
9,9,13,8,8,8,8,8,5,5,5,5,9,9,9,9,9,9,9,6,9,9,9,9,9,9,7,6,6,6,
6,6,6,6,9,5,5,5,5,5,5,4,5,5,6,7,6,6,6,6,6,7,6,7,7,7,7,6,7,6,
 };
static unsigned short stb__times_bold_13_latin1_h[224]={ 0,9,4,9,9,9,9,4,11,11,5,8,5,2,
3,9,9,8,8,9,8,9,9,9,9,9,7,9,6,4,6,9,11,8,8,9,8,8,8,9,8,8,9,8,
8,8,9,9,8,11,8,9,8,9,9,9,8,8,8,11,9,11,5,2,3,7,9,7,9,7,8,9,8,8,
11,8,8,6,6,7,9,9,6,7,9,7,7,7,6,9,6,11,11,11,3,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,11,9,6,8,
11,11,2,9,4,6,4,2,9,2,5,8,5,5,3,9,11,3,4,5,4,6,9,9,9,9,11,11,11,11,
11,10,8,11,11,11,11,11,11,11,11,11,8,12,12,12,12,12,12,6,10,12,12,12,12,11,8,9,10,10,
10,9,9,10,7,9,10,10,10,9,9,9,9,8,9,8,10,10,10,9,9,6,7,10,10,10,9,12,11,11,
 };
static unsigned short stb__times_bold_13_latin1_s[224]={ 254,206,176,199,60,209,29,182,227,222,169,
210,252,240,236,48,53,218,224,75,231,82,89,102,109,126,186,133,244,190,225,
138,65,190,238,181,32,95,50,206,200,58,217,1,76,64,1,18,104,25,85,
35,41,43,53,68,22,12,247,11,63,147,162,240,216,112,81,157,21,180,161,
28,145,140,133,124,119,233,203,129,234,242,196,143,250,149,136,119,211,11,189,
35,201,176,220,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,
182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,254,203,169,
190,218,175,181,184,245,145,206,112,198,240,116,248,141,167,147,152,228,67,204,
232,186,157,211,127,224,11,1,242,1,191,212,123,244,184,89,41,160,151,138,
50,238,232,59,77,103,28,38,48,1,58,88,134,155,98,78,68,11,15,153,
235,128,135,121,249,155,148,163,96,142,178,165,162,168,194,197,113,174,132,171,
114,83,228,221,119,173,90,98,106,40,21,115,108, };
static unsigned short stb__times_bold_13_latin1_t[224]={ 1,14,54,14,26,14,26,54,1,1,54,
36,46,54,54,26,26,36,36,26,36,26,26,26,26,26,46,26,46,54,46,
26,14,36,36,26,46,46,46,26,36,46,26,46,46,46,36,36,46,14,46,
36,46,36,36,36,46,46,36,14,36,1,54,57,54,46,36,46,26,46,36,
36,36,36,1,36,36,46,46,46,26,26,46,46,26,46,46,46,46,36,46,
14,1,1,54,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,1,26,1,
26,46,36,1,1,54,26,54,54,54,54,26,57,54,36,54,54,54,26,1,
54,54,54,54,54,26,26,26,14,14,1,1,1,1,14,36,14,1,1,1,
14,1,1,14,14,36,1,1,1,1,1,1,54,14,1,1,1,1,14,36,
14,14,14,14,14,26,14,46,26,14,14,14,26,26,14,26,36,26,36,14,
14,14,14,14,54,46,14,14,14,26,1,1,1, };
static unsigned short stb__times_bold_13_latin1_a[224]={ 47,63,104,94,94,188,156,52,
63,63,94,107,47,63,47,52,94,94,94,94,94,94,94,94,
94,94,63,63,107,107,107,94,175,136,125,136,136,125,115,146,
146,73,94,146,125,177,136,146,115,146,136,104,125,136,136,188,
136,136,125,63,52,63,109,94,63,94,104,83,104,83,63,94,
104,52,63,104,52,156,104,94,104,104,83,73,63,104,94,136,
94,94,83,74,41,74,98,146,146,146,146,146,146,146,146,146,
146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,
146,146,146,146,146,146,146,146,47,63,94,94,94,94,41,94,
63,140,56,94,107,63,140,94,75,103,56,56,63,108,101,47,
63,56,62,94,141,141,141,94,136,136,136,136,136,136,188,136,
125,125,125,125,73,73,73,73,136,136,146,146,146,146,146,107,
146,136,136,136,136,136,115,104,94,94,94,94,94,94,136,83,
83,83,83,83,52,52,52,52,94,104,94,94,94,94,94,103,
94,104,104,104,104,94,104,94, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_13_latin1_BITMAP_HEIGHT or STB_FONT_times_bold_13_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_13_latin1(stb_fontchar font[STB_FONT_times_bold_13_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_13_latin1_BITMAP_HEIGHT][STB_FONT_times_bold_13_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_13_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_13_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_13_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_13_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_13_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_13_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_13_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_13_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_13_latin1_s[i] + stb__times_bold_13_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_13_latin1_t[i] + stb__times_bold_13_latin1_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_13_latin1_x[i];
            font[i].y0 = stb__times_bold_13_latin1_y[i];
            font[i].x1 = stb__times_bold_13_latin1_x[i] + stb__times_bold_13_latin1_w[i];
            font[i].y1 = stb__times_bold_13_latin1_y[i] + stb__times_bold_13_latin1_h[i];
            font[i].advance_int = (stb__times_bold_13_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_13_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_13_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_13_latin1_s[i] + stb__times_bold_13_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_13_latin1_t[i] + stb__times_bold_13_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_13_latin1_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_13_latin1_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_13_latin1_x[i] + stb__times_bold_13_latin1_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_13_latin1_y[i] + stb__times_bold_13_latin1_h[i] + 0.5f;
            font[i].advance = stb__times_bold_13_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_13_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_13_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_13_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_13_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_13_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_13_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_13_latin1_LINE_SPACING
#endif

