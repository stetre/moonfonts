// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_17_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_17_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_17_latin1_BITMAP_WIDTH         256
#define STB_FONT_times_bold_17_latin1_BITMAP_HEIGHT         92
#define STB_FONT_times_bold_17_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_bold_17_latin1_FIRST_CHAR            32
#define STB_FONT_times_bold_17_latin1_NUM_CHARS            224

#define STB_FONT_times_bold_17_latin1_LINE_SPACING          11

static unsigned int stb__times_bold_17_latin1_pixels[]={
    0x0aa98104,0x04039700,0x19801e44,0x010cccc0,0x0f220000,0x08006600,
    0x0012e002,0x001881e4,0x80260099,0x980a80cb,0x01040150,0x42662000,
    0x55100998,0x20197001,0x7c1fabf9,0x409f001f,0x401f7019,0x7dc6b9e8,
    0x0661eaef,0x2017afb0,0xbb801fed,0x200ba89b,0x9804cffa,0x0fd4002f,
    0x7dc01d50,0x00fa203f,0xf503a07f,0x6ff403ab,0x55fcc01c,0x53fa881f,
    0xaed8817f,0x3e200dda,0x19139103,0x4a801fe8,0x05700ee0,0xf72f9ae4,
    0x0ee16bff,0x980794b8,0x0ec0598d,0x36ae0150,0x0093001e,0x04f801c8,
    0x5c0d11d1,0x1d025407,0x301d2d88,0xb1009d75,0x3e201b33,0xff883f53,
    0x9803fa20,0x47fa0005,0x41f30000,0x31099998,0x2197ec13,0x20b5fffe,
    0x2666622f,0x26213310,0x133309a9,0x11c041d8,0x09988133,0x20013310,
    0x2fc00998,0x20099888,0x266620fc,0x3a133109,0x98807400,0x13310009,
    0x1fa9fc40,0x2fe42fec,0x33333331,0x7d4ffee1,0x93fb3fa1,0x43f53ffb,
    0x57fe446c,0x7c41b910,0xaffff44f,0x7e449b05,0x21b910af,0x910affc8,
    0x7d115c1b,0xfd88a7f9,0x1037222f,0x01bb55db,0x376abb62,0xd883f880,
    0xb80ddaae,0x2bff221f,0x03a1b910,0xb103abfb,0x201bb55d,0x0ddaaed8,
    0x43f53f88,0xffa84ff8,0x957ff710,0x389ff4df,0x22fda7f4,0x6e8713fe,
    0x14c0ffa8,0x6c37fb26,0x360b5fff,0x2607fd47,0x2607fd42,0xd4e886c2,
    0xff98623f,0xff10a60f,0x2207fc41,0x03fe20ff,0x0ff885f1,0x1f503fe2,
    0x14c0ffa8,0x1d5fa81d,0xff107fc4,0x220ff881,0xa9fc40ff,0x20bfea1f,
    0x3fe62ffa,0x76fa9620,0xbf71fe81,0x220bb7d4,0x40ffa85f,0x4fc87c29,
    0x416bffd3,0x03fea1fc,0x40ffa853,0x23f93429,0xfb98267f,0xfd8510ef,
    0x7ec5fc85,0xda85fc85,0x3f217f60,0x3ea0f625,0x81d14c0f,0x0bfb05fa,
    0x85fd8bf9,0xa9fc45fc,0x20bfe61f,0x3fe60ffa,0x73fd0a50,0x1bea3fd0,
    0x4f9873fd,0x14c0ffa8,0x713645f3,0x17dc16bb,0x42981ff5,0x314c0ffa,
    0x24fabfc9,0xaffd4cc2,0x213fe228,0x9ff10ffb,0x9701ff70,0x3ee13fe2,
    0x3ea0790f,0x81d14c0f,0x4ff885fa,0xff10ffb8,0x441ff709,0xfe83f53f,
    0x7cc6fb83,0xdf70488f,0x3ee3fd05,0x7c177dc5,0x4c0ffa85,0x05a9ff42,
    0x507e416b,0x542981ff,0x9114c0ff,0x517ed7e6,0x17ff7198,0x5417fd45,
    0x05ff52ff,0x24c85ff5,0xffa82ffa,0x3fea16e2,0xa81d14c0,0x17fd415f,
    0xffa97fd4,0x222ffa82,0xfb83f53f,0x7cc3fc84,0xff104ecf,0x17e4bfa0,
    0x436c1fe2,0x214c0ffa,0xb00cdfe8,0x3ea36c16,0x3ea14c0f,0x4d614c0f,
    0x270fccef,0xbffd8660,0x2a0bfe62,0x05ff30ff,0x17c41ff5,0xff505ff3,
    0x3ea0fd41,0x81d14c0f,0x3e61d5fa,0x30ffa82f,0x1ff505ff,0x41fa9fc4,
    0x37e20fd8,0x2657fcc0,0x37fa0990,0x209904fd,0x40ff987b,0x05fd881a,
    0x4c4e82d6,0x260d40ff,0x320d40ff,0x57d31dd0,0x7f4198a2,0x5c1ff42f,
    0x5c1ff46f,0x3a27c46f,0x5c6fb83f,0x207fcc1f,0xbf503a1a,0xb83fe83a,
    0x5c1ff46f,0xfa9fc46f,0x5d99d501,0x11c3fe60,0x13fd00a8,0xf8805401,
    0x2e0ffc41,0x02fc8c41,0x107e216b,0x441b83ff,0x220dc1ff,0x41985004,
    0x27dc2ff8,0x13ee1fe4,0x717e0ff2,0xc87f909f,0x5c1ff887,0x2bf503a1,
    0x3213ee0e,0x6427dc3f,0xfa9fc43f,0x813fa201,0x2e610ff9,0x0ff40759,
    0x48807598,0x64243fe8,0x85ac0be7,0x487fd01b,0x50487fd0,0x1541c407,
    0x3fa217cc,0xd103be20,0x4077c41f,0x107f443f,0xd07b81df,0x8874487f,
    0x441d4f9c,0x03be20fe,0x77c41fd1,0x1fa9fc40,0x405ffc40,0x27621ff9,
    0xff101cfa,0x0073ea05,0x337fa214,0x5b9e980c,0x80262d60,0x00ccdfe8,
    0x0199bfd1,0x554cd5c4,0x40f74c0a,0xb79d902b,0xdbcec809,0x3204c884,
    0x3204dbce,0x66ff440c,0xbf98740c,0x9d901d0f,0xcec809b7,0x2eb884db,
    0xa88019d5,0x3ff263dd,0x010ffdcd,0x100aaa98,0x800c0000,0x0018c009,
    0x00300060,0x10000310,0x44000880,0x01100000,0x0a806000,0x44015062,
    0x00044000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x40000000,0x082002c9,0x15300000,
    0x80199004,0x2c9800cb,0x800f2200,0x00072a00,0x44001320,0x2204c83c,
    0x403c9800,0x03c88008,0x00440791,0x100c0b2a,0x50088403,0x36401839,
    0x04cffa80,0x6405ebec,0x01eecacf,0xefa805f3,0x007ee804,0x0cc003ae,
    0xcf880bd0,0x41f982f9,0x541fbaf9,0x217fdc1f,0x202ccdb9,0x3fe20174,
    0x03f700de,0x3e60bfb2,0x77c40def,0x41747cc6,0xdd1f901d,0x09f717a0,
    0xdab801d8,0x3ca5c01e,0x3f10bf60,0x27600b20,0x5cee00d8,0x4001b003,
    0x6c016203,0x89301d8a,0x6c0d99d8,0x23447441,0x20599aae,0x2e6a04bb,
    0x4c07602d,0xb7350b35,0xc8ee5905,0x203b8dd7,0x0b307549,0x00080bf9,
    0x90020004,0x4c46a0bf,0x20999999,0x99999998,0x44042100,0x04cc1999,
    0x10040398,0x13333333,0x884cccc4,0x33109999,0x26666133,0x2359f309,
    0x44007402,0x42100400,0x21080200,0xd13edfa0,0x50100200,0x000e807f,
    0x00e8003a,0x2e200ffe,0x26fcabff,0xfcabffb8,0xe9807406,0x20fd41ff,
    0x3a00edba,0x57ff7100,0x7fdc4df9,0x17ff710b,0x442ffee2,0xff10bffb,
    0x07f3003f,0x442f56d4,0xbc884dbc,0x4dbc884d,0x2e2dac88,0x200ec9d7,
    0x6442dac8,0x807e62da,0x7f3003f9,0x4c0fe600,0xff3002ff,0x3fe62c41,
    0x3f981620,0x550bfea0,0x03fd8fa8,0x7fcc07f3,0x3ff31620,0x7cc1ff98,
    0x20ffcc1f,0x6c02fffa,0x7e57e06f,0x44f9b6c2,0x6d89f36d,0xd76d89f3,
    0x3b865e44,0xd8d76d80,0x200f8d76,0xdfb006fd,0x4c1bf600,0xff3002ff,
    0x3fe614a1,0x6fd80a50,0x21237ec0,0xb00aa8fc,0x87fcc0df,0x40ff9852,
    0x7fcc0ff9,0x4407fcc0,0xf9303ffe,0x7ecf205f,0x37c5be23,0x89be2df1,
    0xdf8df16f,0x9a201fb9,0x4efc1cbb,0x2e77e1fb,0xfc98161f,0x7fe4c02f,
    0x17fe4c02,0xf3003ff8,0x3e60911f,0x64c0488f,0x3fe602ff,0x09ff0173,
    0x302ffc98,0x260911ff,0x07fcc0ff,0xff303fe6,0x41bfaa01,0x6dc0dfb4,
    0x457ea3fd,0x7c57ea7f,0x3fc57ea7,0x01333bf5,0x6c9fa8ec,0x426677ea,
    0x20999dfa,0x037ed201,0x52037ed2,0x0dfb06fd,0x13b3fe60,0x02767fcc,
    0x32037ed2,0x9fd039ff,0x20dfb480,0x304ecff9,0x0ff981ff,0x3e607fcc,
    0x6cd4220f,0xffa9c40f,0x47f96d81,0x44df15f8,0x7c4df15f,0x3fc4df15,
    0x23f23b80,0x20ff10fc,0x440207f8,0x2203ff53,0x2203ff53,0xd103ff53,
    0x7cc5887f,0xff304caf,0xa9c40995,0x3fe201ff,0x267bee06,0x1ffa9c42,
    0x04caff98,0xff981ff3,0x2607fcc0,0x4d5260ff,0xfaabb85c,0x74f7c45f,
    0x3f9b6c3f,0x6c3f9b6c,0x4fe87f36,0xfb8d1015,0xaa7f47c8,0xa8553fa0,
    0xfaabb84f,0xf557705f,0x2aaee0bf,0xdd9105ff,0xff981999,0x1ff30470,
    0x555dc08e,0x2fec05ff,0x2e17ffa0,0x985ffaab,0xf30470ff,0x40ff981f,
    0x7fcc0ff9,0x33337a20,0xfb999c80,0x7d57740f,0x176f220e,0x22176f22,
    0xff985dbc,0xe883b02f,0x7ffcc3ea,0x517ffcc2,0x7333907f,0x333901ff,
    0x33901ff7,0xb801ff73,0x843fe603,0x843fe639,0x5ccce439,0x17f600ff,
    0x39008b88,0x981ff733,0x98e610ff,0x07fcc0ff,0xff303fe6,0x2e037101,
    0x0004ff81,0x80110022,0x31004008,0x801004c0,0xf0370100,0xff81b89f,
    0x27fc0dc4,0xff981ea0,0xff987621,0x81b87621,0x17f604ff,0x206e00a8,
    0x0ffcc4ff,0x0ffcc3b1,0xff307fe6,0x001ff983,0xff5067dc,0x0000007f,
    0x00000000,0x2e000000,0x3ffea0cf,0x7d419f73,0x419f73ff,0x9103fffa,
    0x37ff2607,0xf930ffdc,0x21ffb9bf,0x3fea0cfb,0x7ffd443f,0x3ee0280a,
    0x4fffea0c,0xfdcdffc9,0x19ff930f,0x4c33ff26,0xf930cffc,0x0000019f,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x0f260000,0x79101530,
    0x22079100,0x1008203c,0x10104079,0x40208079,0x40440a18,0x80c0a018,
    0x01403018,0x0cb80144,0x82039700,0x2e004c00,0x4c00001c,0x98098141,
    0x64082200,0xf9ce880f,0x5c00fb84,0x05fd901f,0x701f95f5,0x15e5c06a,
    0x5f500fb8,0x229501f9,0x64c1fd05,0x6443b85e,0x6441d80f,0x6403b80f,
    0x7c401fcb,0x203f8803,0xe883f9df,0xbdf304ca,0x07f47fa0,0x66d5fec4,
    0xfe98d01c,0xedbdd84f,0x1fc82c82,0x807701fd,0xb31b301d,0x20931910,
    0xd9700cab,0x19103b80,0x254b2093,0x42d80fe8,0xa81f5059,0x5981f504,
    0x1fc47cc0,0x254034c0,0x640e4ae0,0x23b05f36,0xfd1fe81d,0x220fe881,
    0x6c5980ff,0x9f60ffb9,0xfb0082fe,0x02203f63,0x44420110,0x35002200,
    0x102f4260,0x3a620100,0x2000bc9a,0xa80744fa,0xfa81a20f,0x3f200740,
    0x00000f8a,0x36f80000,0xe80810bf,0xfd81fd1f,0x5c2ff4c4,0x221fd022,
    0xc88bf66f,0x54ff42da,0x2f56d42e,0x542f56d4,0xada85ead,0x5eada85e,
    0x887fb970,0xbc884dbc,0x777f644d,0x260301ef,0x0fa80ee7,0x20fa8076,
    0xcefb803b,0x26bfe600,0x2bfe61ff,0x3fe61ff9,0x3e61ff9a,0x7fccdf36,
    0x7f41ff9a,0x3ff81fd1,0xd03feb22,0xfa8be201,0x76d8bf65,0x6d89fe8d,
    0x7c2fcafc,0x95f85f95,0x5f95f85f,0xe85f95f8,0x36d8bf36,0x9f36d89f,
    0x1b81e688,0x0599566c,0x0254bf22,0x01665f91,0x5fb1ffe4,0x83fd2fd8,
    0xd83fd2fd,0x7d43fd2f,0x2fd8ff36,0xd1fe83fd,0x897fcc1f,0x2c43ff54,
    0xf30dfea8,0x3bf17ecf,0xb8ff43f7,0x1fecf23f,0x321fecf2,0xb3c87fb3,
    0x7fb3c87f,0x27f8b7c4,0x44df16f8,0x4a8df16f,0x401ae0b1,0x68812e0e,
    0x0e805dd3,0xf71d312e,0x3f60b23f,0x2fd83fd2,0xd2fd83fd,0xf9b7d43f,
    0x1fe97ec7,0x4ffccff4,0x4325ff31,0x40ee1ffa,0x3fe3ffc8,0x37ea5fd0,
    0x47fa0999,0x7eedc5fb,0x83fddb83,0xdb83fddb,0xfddb83fd,0x3fc57ea3,
    0xa9fe2bf5,0x7ecff15f,0x2e2fffff,0x2a3b802f,0x44c7604e,0xea8ee05d,
    0x3dfb3744,0x7f4bf609,0x1fe97ec1,0x21fe97ec,0xd8df36f9,0xfe83fd2f,
    0xf10efccf,0x3fdc197f,0x4bf70036,0x12feced9,0xa8ff40ff,0x1fe5b64f,
    0x361fe5b6,0x96d87f96,0x7f96d87f,0x26f8afcc,0x44df15f8,0x1d8df15f,
    0x3a1ff059,0x36a65983,0x05b09504,0x24da9966,0xfff10ff9,0x7f4bf601,
    0x1fe97ec1,0x21fe97ec,0xd8bf36f8,0x8e83fd2f,0x07bf2020,0x403449f9,
    0x5fb082f8,0x3a0aa7f4,0xf12f9d9f,0x7c47fd3d,0x3e23fe9e,0x3e23fe9e,
    0x3e23fe9e,0xb743fe9e,0xf9b6c3f9,0x43f9b6c3,0x47fa0767,0x3360e83e,
    0x207440ee,0xcd83a02a,0x47bfe0ee,0x644aeffc,0x641ff8af,0x641ff8af,
    0x641ff8af,0xafc83f57,0x03e61ff8,0xf983fe20,0x86541d45,0x317ec068,
    0x7fcc5fff,0x57744cd9,0x2bba0efa,0x2bba0efa,0x2bba0efa,0x2bba0efa,
    0x2fa20efa,0x5dbc884d,0x445dbc88,0x56f541e5,0x2621dc0c,0x7cc1d85d,
    0x4c43b86e,0x77ff545d,0x4c0ffe9a,0x4c4fecff,0x4c4fecff,0xd84fecff,
    0xcff983db,0x007ea4fe,0x36efb2e6,0xffb81d84,0x1ff4009b,0x00000004,
    0x00000000,0x40088008,0x20041008,0x0cc05008,0x0aaaa0a2,0x1101980a,
    0x10008030,0x00400200,0x0c006004,0x04008022,0x00199880,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x31000000,0x40300333,0x4cc401a8,0x80130199,0x01a88009,0x99988040,
    0x210a9809,0x31099998,0xa8013013,0x10cccc40,0x33104333,0x13333113,
    0x09988662,0x19884cc4,0x00266200,0x00804cc4,0x1054c000,0x0d4c400a,
    0x1bfffa01,0x6c405e4c,0xfd03cbac,0x7541ffff,0x4f4c1eba,0x759b104e,
    0xd9ff3079,0x7ff9109f,0x76d56cc1,0x215ff911,0x26ea0dc8,0x7d6540ef,
    0x887bfe61,0x269f72fa,0xffb88dff,0x6c49910c,0x437222ff,0x6c401ff8,
    0x400ddaae,0x57542fe8,0x7ff71efd,0x33f207ea,0x03b1eeca,0x75ce7e44,
    0xeeee984d,0xb101f982,0x22254333,0x745eeeff,0x75f897e6,0x4225887f,
    0xfb4fe84a,0xd81ff305,0x1ff50ec3,0xfca74298,0x227c67c4,0x51cc0ffc,
    0x3e37ec7f,0x3e605c4f,0xfd0a60ff,0x107fc403,0x2fd801ff,0x21fddbe2,
    0xfb0713fe,0x0751f885,0x13a07fa2,0x09f30072,0x54d9fcac,0x98b60d45,
    0x7d4dd0ff,0xb358df55,0xe8553b35,0xf30bf71f,0x3077c41f,0x2607fd43,
    0x24fb9e42,0xf88155f9,0x7cc0243f,0x091ff21f,0x221dff73,0xd808ff42,
    0x105fc85f,0x55fa8bf6,0x176fa89f,0x23505fc8,0x20bf9068,0x0dfff848,
    0x440abfd8,0x243eaf53,0xffe81f10,0x4dbea1fa,0x11f4e27f,0x2a3fd121,
    0x40ff986f,0xff503fff,0x3f602981,0xf901bea1,0x74141c4d,0x4cbff25f,
    0x5ffa9981,0xfccfe851,0x2e13fe25,0x377a60ff,0xfbb7c2fe,0xf839fe82,
    0x881b003f,0xf30203ff,0xff81ffff,0x546e2feb,0xa8125eaf,0x43ffe885,
    0x5cff17f8,0xe8901f99,0xf30bf71f,0xefff981f,0x2607fd41,0x75c1d102,
    0xff303eff,0x2e1602e5,0x5fdb88ff,0x7fdc6609,0xc97f428b,0x505ff53f,
    0xe8bf45ff,0x165f442f,0x7cc2efb8,0x9877002f,0xb98002ff,0x55be64fe,
    0x5fd46a6f,0x83d8121f,0x5c3ffdd8,0x26a5fddf,0xfe8902f9,0xff305f92,
    0x3fffb101,0x0a607fd4,0x3fe6205c,0x257f6009,0x5ffc40f8,0x039ffa8b,
    0x15ffec33,0x9afdc7fa,0x0ffa82ff,0x217ecdf1,0x87f8802c,0xd1002ff9,
    0x4cc2ff98,0x53ec0099,0x443fe2df,0x24bd1f73,0xb4f881f0,0x7f9310df,
    0x4824e9c4,0x827eeff4,0xa8220ff9,0x03fe65fe,0x7c806035,0x80cffa80,
    0x4efc82f9,0x0cc03bfe,0x3fd0bffa,0x83fe9bea,0xd9bea6fb,0x6777fc2f,
    0x3fe09902,0xff03a003,0x00dff887,0x7cff12d4,0x4d75c6c7,0x0d502bae,
    0x81fe27f5,0xcc98d85e,0x9fe8571a,0x7cc7e408,0x97e224c7,0x80dc1ff8,
    0x044d9300,0x7f505fe8,0x7e45ff30,0xff106605,0x9f71fe85,0x1fe427dc,
    0x217ecdf1,0x80fffffb,0x00dfb00a,0x217f615c,0x716cc4fe,0x4f89fd85,
    0x01dc06c4,0x7c9f107b,0x3620bb04,0x1fe83b80,0x8df51f90,0x3a0fc0f9,
    0x3fa8243f,0x3f77f5dc,0x3f203f70,0x2f98dd05,0x0be60aa0,0x887ee3fd,
    0x03be20fe,0x45fd11fd,0x4c7e61e9,0x1ff44075,0xd1166162,0x444fe85f,
    0xbb01bdfe,0x2f3220b7,0x807c02cc,0x540cbada,0x5e64402b,0x2ff882cc,
    0x81db7b10,0x83cacdd9,0x00ccdfe8,0xcdbb87f5,0x81a203ff,0xd07704fb,
    0x207ba601,0x756e742b,0x9b79d902,0x3fb7b620,0x2e66fa24,0x10073ea4,
    0x01999dd9,0x2b3b203a,0x01101dfb,0x00200110,0x01008018,0x33100200,
    0x88008803,0x02003000,0x00200104,0x00010003,0x20010408,0x80210008,
    0x00010199,0x88010011,0x00000009,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x19998800,0x04cccc40,
    0x81970220,0x98899998,0x33310999,0x02013333,0x26666662,0x03333109,
    0x26666600,0x26621999,0x220cb800,0x8004cc41,0x882a2009,0x20009999,
    0x02666200,0x3310cccc,0x10a00133,0x26213333,0x32e00999,0x4ccc1040,
    0x7e441310,0x440decbf,0x1efcbffc,0x21fcc1d8,0xb88bffb8,0xff710bff,
    0xe88df957,0x3fee24fb,0xf916ebab,0x001bd97f,0x32b7ffe6,0x00bfa27e,
    0x21fe87f1,0x7cc02fe8,0xfcdc84ff,0x017ff910,0xfc880740,0x1fff985f,
    0x400bfee2,0x3fee20fb,0xb7ff710b,0x24efa89f,0xf73f9cf8,0xf507a21f,
    0x26077ccf,0xc8ff70ff,0xf985981f,0x307fe61f,0x362c41ff,0x7fcc1f96,
    0x21ff52c1,0xa9800ef9,0x3f6343fe,0x6dc1dc02,0x3a017ec0,0x3e61ffdb,
    0x07fcc38c,0x4c07f300,0x7ee40ffd,0x800ff985,0x7fcc0ff9,0xfe87fcc1,
    0x390ec762,0x90ffc191,0x6fd8ff50,0xffa87fcc,0x00bdff70,0xff987fe6,
    0x5287fcc1,0x4c28a7c4,0xf98a31ff,0x201bf60f,0x214a7fd4,0x400002fd,
    0x411012fd,0x413ee2ff,0x36000ff9,0x3fea606f,0x4c2fe5c4,0x901ddcff,
    0x0ff981ff,0x5fc87fcc,0x3f200102,0x8ff50354,0x3fe60ffc,0x1fd8bf90,
    0x3e60ffcc,0x307fe61f,0xf50911ff,0x48ffcc0b,0x3ee0ff98,0x7f42e00f,
    0x64bf60b3,0x987fe63f,0x6e7ec1ff,0xa87ec05f,0xff983ffe,0x5ff93000,
    0xa9fee660,0x7f985fc8,0xf8c85ff1,0x207fcc0f,0x49fd0ff9,0x7fcc1ff9,
    0x504bfcc1,0x22ffa8ff,0x82fedff9,0x41fe81fd,0xfdccdff9,0x767fcc1f,
    0x300ff884,0xdb8f97ff,0xff99ccff,0x6ff47102,0x325fb06d,0x7f41fe81,
    0x1fea7ec1,0x09f713e0,0xa4003fe6,0xf13306fd,0x42fe527f,0xa97f67f9,
    0xff981ff2,0x7dd7fcc0,0x740ff40d,0x03afe81f,0x2ffa8ff5,0x3f663fe6,
    0x7f40fec5,0x4cd7fcc1,0x7fcc1ffa,0x19fd04ca,0x5d7fcc13,0x260ff987,
    0x999902ff,0x360d59ff,0x3fd02caf,0x97ec1fe8,0x70d501fd,0x03fe609f,
    0x0ffd4e20,0x29efc8cc,0x4ff30bf9,0x7fc914fd,0x2607fcc0,0xfd009bff,
    0x6643fd03,0x542cdffe,0x307fd47f,0x8bfe21ff,0x41fe81fd,0x3fe61ff9,
    0x2387fcc1,0x30fff220,0x3e6163ff,0x207fea0f,0x239ff41a,0x41bfbf60,
    0x20ff41fe,0x105fb2fd,0x209f701d,0x5c180ff9,0x985ffaab,0x7e4bff31,
    0xff17f985,0x3ffbbb23,0x2607fcc6,0x0ff400ff,0x3fcc0ff4,0x5fc8ff50,
    0x7ff07fcc,0x3fa0d7ec,0xf30ffcc1,0x10ff983f,0x260360e6,0xff3031ff,
    0x24437e41,0xd8e09ff4,0xfe84fdaf,0x3f60ff41,0x41905fb2,0x7cc13ee3,
    0x2721c40f,0x4c0ffb99,0x5fc8ffa1,0x0accff98,0x1bffbbae,0xff981ff3,
    0x740ff400,0x3ff7321f,0x87fd42cc,0x7fcc0ef9,0x7cc1ff50,0x260ff42e,
    0x07fe61ff,0x0ec43ff3,0x0ffcc26c,0x3e61ff50,0xfe80c81e,0x15fb1644,
    0x41fe85ff,0xd97ec1fe,0x7fffdc2f,0x7cc13ee4,0x0371e41f,0x2a2989ff,
    0x2617f60f,0x1ff000ff,0x7cc1ff98,0x40ff400f,0x07f981fe,0x7ddbffb3,
    0xb9bffb30,0x3fe60017,0x233ff224,0x930cffc8,0x1ffb9bff,0x7e441da8,
    0xffd980cf,0xfc80bedd,0x33bfee23,0xbff11fec,0x7fcc7ff6,0xe893fe64,
    0x2a5ff9df,0xb13fffff,0xffd983df,0xf72feccd,0x9fffd419,0xea921dd9,
    0x3ff262ff,0x20ff800b,0x930cffc9,0x3e6039ff,0x227fcc4f,0x000bffd9,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x18000000,0x26666202,0x33310999,0x33109983,0x82666133,
    0x02666620,0x4ccc4180,0x31099999,0x26621333,0x33066209,0x10333333,
    0x08800021,0x00020040,0x10040000,0x80420040,0x00200208,0x40404008,
    0x0f7ff600,0x3feaafb6,0x507ffa66,0x2fffa23f,0x3ee19f30,0xd97ff913,
    0x71faa05f,0xd79ff79f,0x42ffee29,0x3e20bfb8,0x2218061f,0x3ee3dcbc,
    0x6d43f33f,0xfbe885ea,0x716d6444,0x27ff33ff,0xf35ff33d,0x4dbc883f,
    0x02cc27dc,0xbc98d999,0x103dbdde,0x32bfa20d,0xfd9fd13f,0x0ba24c8b,
    0x6c066d54,0xf50bfee0,0x7c42a85f,0x9f712a5f,0x3ff33fd4,0x95c7fca8,
    0x4c912ff8,0xe80ec1ff,0x3618061f,0x3fe89f17,0x5f95f871,0x6c1f96d8,
    0xd2fe8d76,0x25fb0e7f,0xf9b6c1fe,0x16613ee4,0xaf449fcc,0x101f55fb,
    0x6d6fe40d,0x0ff53f61,0x400fa336,0x2ffc4500,0xb8246fd8,0x81048bff,
    0x41ff47f9,0xff10c7f9,0x23ff30c5,0x87fa00c8,0xf96f8601,0x8176fa8f,
    0x7c47fb3c,0xb9df8514,0x3237ee1f,0xd2fd876f,0xf8b7c43f,0x10598046,
    0x93c819ff,0x105f53bf,0xd827e40d,0xfb03fb2f,0x3b3fa207,0x07fec05f,
    0x0173ff98,0x80067fec,0x40ffc7f9,0x3fe207f8,0x933ff302,0x00c3fd00,
    0x3e2fbe63,0x81cff40f,0x3ea3fddb,0x333bf505,0x745ffc41,0xe97ec1bf,
    0x7c57ea1f,0x3b732e07,0x3ff20ccc,0x9dfbda85,0xf9995099,0x1fe43999,
    0x85fb2fd8,0x3f604ee8,0x3ea03fd4,0x4ffe403f,0x02ffc403,0xd99ff981,
    0x40ff104f,0xff302ff8,0xfe801df9,0xff318061,0x3bee1fe3,0x47f96d80,
    0x7f880ff8,0x6fba7ec0,0x43fd2fd8,0x18df15f8,0x2abb2aaa,0x87fea10a,
    0x307f98fc,0x3555f755,0x2fd817e4,0xd9f445fb,0x3f65fb04,0x100dfd01,
    0x3f200dff,0x264fc83f,0x204ffbff,0x3fe207f8,0xff7ff302,0x061fe80b,
    0x27c5fa18,0x77c42fc4,0x67f43fe9,0x553fa098,0x3f88fd40,0x1ff8afc8,
    0x2e3f9b6c,0x7305984f,0x9b7c47ea,0xd10373ff,0xfd817ec0,0x21e45fb2,
    0xfb2fd82d,0x183ff905,0x5300bfb0,0x6fc81ffb,0x0ffddfe6,0x3e207f88,
    0x53ff302f,0x0ff409ff,0xceb98c03,0x740b205c,0x220efaae,0x7fcc3ffc,
    0x80e8d02f,0x44fecff9,0x7d45dbc8,0x9d305983,0x57ff44b9,0xd103fff9,
    0x1037fa20,0x0bff3bff,0x7ecbf600,0x2c27fcc2,0xa4405fd8,0x4c905ff8,
    0x203ff67f,0x3fe207f8,0x323ff302,0x43fd02ff,0x00220601,0x00200001,
    0x20040801,0x82011000,0xfffffffe,0x08080441,0x00003440,0x25fb0000,
    0x07fec2fd,0x02fec172,0x43ffa8b1,0x443fea1b,0x07f985ff,0x7cc0bfe2,
    0x207ffa1f,0x2666a1fe,0x00002999,0x00000000,0x00000000,0x00000000,
    0x00000000,0x3fe77fe2,0x333bfea5,0x7d444fec,0x77540aff,0x4cfffee2,
    0x433ff660,0xf930cffa,0xffc8817f,0x67fe441d,0x4c7fffb0,0x000004ff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x2a020c00,0x0d42a130,0x20006200,0x8800001a,0x201882e4,0x40911a82,
    0x01300c41,0x20c02066,0x8604c418,0xd7044018,0x45dddddd,0x060221b9,
    0x36e2b984,0x22dddddd,0x8d554c10,0xfffffff8,0x99999915,0xfd100079,
    0xffb3dfb9,0x776f7541,0x005dd50e,0x75c401aa,0xd1bff31d,0x7fddf547,
    0x264b8f42,0x81f984ec,0x7c88790e,0x1f413f66,0xdf32ef6c,0xfe874744,
    0x7dcf5950,0xf10d8ff2,0x4ccccc4f,0xf8976099,0x473fba27,0x9989b60a,
    0xfb3b9999,0x2fffe5ba,0x81111111,0x1aaaaaaa,0x329fb000,0x7c47f75f,
    0x3f2612e0,0x64c0001c,0x9ffa80cf,0x45fc8543,0x5901f55d,0x1d70d9d0,
    0x427a87f1,0x54dce45c,0xf9964b52,0x74f6d51f,0x5cf7310f,0x13d8fd2f,
    0x55554cdf,0x41d10aaa,0xfb88a6f8,0xa800d84f,0x4c4ae953,0x00000199,
    0x325f9000,0x2549f73f,0x3bd71034,0x3333332e,0x005dd50c,0x7fcc0bfb,
    0x17e2bee1,0x369713ea,0x0fdafc42,0xbb0761ea,0xb8ea5d79,0x4b6d5243,
    0x99e7666c,0x0654bb0f,0x99999970,0x00000059,0x0000a600,0x40000000,
    0x2e7f92fc,0x0d11664f,0xaa867e44,0x30aaaaaa,0xf98017db,0xb09fd00f,
    0x9a603eab,0xfb8d30e8,0x23d43f88,0x65d4099b,0x30755740,0x930c9c87,
    0x4d07d75c,0x0000003a,0x00000000,0x00000000,0xf92fc800,0x43f13ee7,
    0x0beda84c,0xf9100620,0x13fa2039,0x3a043bea,0x14e64971,0x43a3c879,
    0xa97e443b,0x64fc47ff,0x310e6446,0x22800c00,0x00000008,0x00000000,
    0x00000000,0xf93fd800,0xeea93ee7,0xbd50edfe,0x801ae003,0x23221eea,
    0x4bfe21ff,0x41724429,0x911a8000,0x0c460000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x3a37fa20,0x30efd8ef,0x0150c261,0x46600000,
    0x0eff8cd9,0x03fb7ff9,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_bold_17_latin1_x[224]={ 0,1,1,0,0,1,0,1,0,0,0,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,0,0,0,0,
1,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__times_bold_17_latin1_y[224]={ 13,2,2,2,2,2,2,2,2,2,2,3,10,8,
10,2,2,2,2,2,2,2,2,2,2,2,5,5,4,6,4,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,15,2,5,2,5,2,5,2,5,2,2,
2,2,2,5,5,5,5,5,5,5,3,5,5,5,5,5,5,2,2,2,7,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,13,5,2,2,4,2,
2,2,2,2,2,6,6,8,2,1,2,3,2,2,2,5,2,6,12,2,2,6,2,2,2,5,-1,-1,-1,-1,
-1,0,2,2,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,4,2,-1,-1,-1,-1,-1,2,2,2,2,
2,2,2,2,5,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,5,2,2,2,2,2,2,2,
 };
static unsigned short stb__times_bold_17_latin1_w[224]={ 0,3,7,8,8,14,13,3,5,5,7,9,4,5,
4,5,8,6,7,7,8,8,8,8,8,8,3,3,9,9,9,7,14,11,10,11,11,10,9,12,12,6,8,13,
10,15,11,12,9,12,12,8,10,11,11,16,11,11,10,4,5,4,7,9,4,8,8,7,9,7,7,8,9,5,
5,9,5,13,9,8,8,9,7,6,5,9,8,11,8,8,7,5,2,5,9,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,3,7,8,8,8,
2,7,5,12,5,8,9,5,12,9,6,9,5,5,4,9,9,4,3,4,5,8,12,12,12,7,11,11,11,11,
11,11,16,11,10,10,10,10,6,6,6,6,11,11,12,12,12,12,12,7,12,11,11,11,11,11,9,8,8,8,
8,8,8,8,11,7,7,7,7,7,6,5,6,6,8,9,8,8,8,8,8,9,8,9,9,9,9,8,8,8,
 };
static unsigned short stb__times_bold_17_latin1_h[224]={ 0,12,6,12,13,12,12,6,15,15,7,9,6,3,
4,12,12,11,11,12,11,12,12,12,12,12,9,11,8,4,8,12,15,11,11,12,11,11,11,12,11,11,12,11,
11,11,12,12,11,14,11,12,11,12,12,12,11,11,11,14,12,14,7,2,4,9,12,9,12,9,11,12,11,11,
15,11,11,8,8,9,12,12,8,9,11,9,9,9,8,12,8,15,15,15,4,10,10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,12,14,12,8,11,
15,15,3,12,6,7,4,3,12,2,6,9,7,7,4,12,15,4,4,7,6,7,12,12,12,12,14,14,14,14,
14,13,11,14,14,14,14,14,14,14,14,14,11,15,15,15,15,15,15,8,12,15,15,15,15,14,11,12,12,12,
12,12,12,12,9,11,12,12,12,12,11,11,11,11,12,11,12,12,12,12,12,8,9,12,12,12,12,15,15,15,
 };
static unsigned short stb__times_bold_17_latin1_s[224]={ 222,250,150,90,154,219,146,140,28,64,114,
217,129,218,162,232,190,63,140,238,205,1,10,32,41,50,184,46,44,167,24,
111,94,167,13,223,1,50,69,241,37,214,81,81,156,179,161,182,221,232,50,
90,70,99,128,144,34,22,11,227,235,222,86,234,197,128,173,137,195,145,148,
205,130,124,187,108,95,1,235,175,72,246,227,198,24,165,119,153,54,214,63,
166,184,147,187,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,
101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,222,140,95,
119,15,245,193,46,212,59,144,71,202,218,19,224,122,188,108,80,177,209,54,
182,158,103,134,94,133,120,107,99,1,103,71,13,25,163,91,37,245,49,60,
115,126,140,147,133,79,109,121,134,153,196,209,245,219,34,172,82,70,83,195,
9,18,27,36,175,45,54,205,61,1,242,211,234,30,118,231,238,63,1,72,
184,193,202,81,34,110,160,170,199,180,19,10,1, };
static unsigned short stb__times_bold_17_latin1_t[224]={ 16,17,82,32,17,17,32,82,1,1,82,
70,82,82,82,32,32,70,58,32,58,45,45,45,45,45,70,70,82,82,82,
45,1,58,58,45,58,58,58,45,58,58,45,70,58,58,45,45,58,1,70,
45,70,45,45,45,70,70,70,1,45,1,82,82,82,70,45,70,45,70,58,
45,58,58,1,58,70,82,70,70,45,32,70,70,58,70,70,70,82,45,82,
1,1,1,82,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,16,45,17,
45,82,58,1,1,82,45,82,82,82,82,45,82,82,70,82,82,82,32,1,
82,82,82,82,82,32,32,32,32,17,17,17,17,17,17,58,17,1,17,17,
17,17,17,17,17,58,1,1,1,1,1,1,70,32,1,1,1,1,17,58,
32,32,32,32,17,32,32,70,58,32,17,17,17,58,58,58,58,32,70,32,
17,17,17,32,82,70,32,32,32,32,1,1,1, };
static unsigned short stb__times_bold_17_latin1_a[224]={ 61,82,136,123,123,246,205,68,
82,82,123,140,61,82,61,68,123,123,123,123,123,123,123,123,
123,123,82,82,140,140,140,123,228,177,164,177,177,164,150,191,
191,96,123,191,164,232,177,191,150,191,177,137,164,177,177,246,
177,177,164,82,68,82,143,123,82,123,137,109,137,109,82,123,
137,68,82,137,68,205,137,123,137,137,109,96,82,137,123,177,
123,123,109,97,54,97,128,191,191,191,191,191,191,191,191,191,
191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,
191,191,191,191,191,191,191,191,61,82,123,123,123,123,54,123,
82,183,74,123,140,82,183,123,98,135,74,74,82,142,133,61,
82,74,81,123,184,184,184,123,177,177,177,177,177,177,246,177,
164,164,164,164,96,96,96,96,177,177,191,191,191,191,191,140,
191,177,177,177,177,177,150,137,123,123,123,123,123,123,177,109,
109,109,109,109,68,68,68,68,123,137,123,123,123,123,123,135,
123,137,137,137,137,123,137,123, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_17_latin1_BITMAP_HEIGHT or STB_FONT_times_bold_17_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_17_latin1(stb_fontchar font[STB_FONT_times_bold_17_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_17_latin1_BITMAP_HEIGHT][STB_FONT_times_bold_17_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_17_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_17_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_17_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_17_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_17_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_17_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_17_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_17_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_17_latin1_s[i] + stb__times_bold_17_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_17_latin1_t[i] + stb__times_bold_17_latin1_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_17_latin1_x[i];
            font[i].y0 = stb__times_bold_17_latin1_y[i];
            font[i].x1 = stb__times_bold_17_latin1_x[i] + stb__times_bold_17_latin1_w[i];
            font[i].y1 = stb__times_bold_17_latin1_y[i] + stb__times_bold_17_latin1_h[i];
            font[i].advance_int = (stb__times_bold_17_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_17_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_17_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_17_latin1_s[i] + stb__times_bold_17_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_17_latin1_t[i] + stb__times_bold_17_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_17_latin1_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_17_latin1_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_17_latin1_x[i] + stb__times_bold_17_latin1_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_17_latin1_y[i] + stb__times_bold_17_latin1_h[i] + 0.5f;
            font[i].advance = stb__times_bold_17_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_17_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_17_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_17_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_17_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_17_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_17_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_17_latin1_LINE_SPACING
#endif

