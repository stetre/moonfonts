// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_27_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_27_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_27_usascii_BITMAP_WIDTH         256
#define STB_FONT_arial_27_usascii_BITMAP_HEIGHT         96
#define STB_FONT_arial_27_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_27_usascii_FIRST_CHAR            32
#define STB_FONT_arial_27_usascii_NUM_CHARS             95

#define STB_FONT_arial_27_usascii_LINE_SPACING          18

static unsigned int stb__arial_27_usascii_pixels[]={
    0x01930988,0x25c02b26,0x26039710,0x32aa2004,0x2662001b,0x26666219,
    0x4000ec00,0xca801ba8,0x300f2603,0x20001595,0x06600019,0x82542c88,
    0x0ca802b9,0x0006e600,0x98004d4c,0x5026200a,0xfb8274bf,0x107d80ef,
    0x13a07fff,0x3ffff6a0,0x201cefff,0xf50ffffb,0x36a05fff,0x64400aef,
    0x3dfffffe,0x3201ff30,0xffff703f,0xb1007dff,0x0017dfff,0xfa80ffc4,
    0x7fd43742,0x017e03ff,0x0f7fff54,0xfffffa80,0x3fffea03,0x545fa82d,
    0x2203ea5f,0x07d84fda,0xf7017df7,0x7fff4401,0xffdb99bd,0xff55303f,
    0x02abbea1,0xfffffff5,0x37ffa205,0x03fffdbb,0x03fe05fd,0x957bffd1,
    0x74409fff,0x06ffcbef,0x6407fe20,0x3a17e21f,0xb81fd88e,0x37ff001f,
    0xff500df9,0x90bffb7d,0x5ffb7fff,0x04c45fa8,0x86f9813a,0x205fb07d,
    0x3fa203f8,0x4ffa801d,0x5fa87fc0,0x5f19ff10,0xdfb03ff9,0x20ffea01,
    0x85fa85fb,0xff501efe,0xd117f209,0x3fe2003f,0x3f98fb01,0x89f527c4,
    0x9f7005f8,0x7fc01fe8,0xf30ffcc3,0x20ff987f,0x3f700098,0x1f61be20,
    0x0fc807f4,0x8007fd10,0x3fe03ff9,0x3ee0bf50,0x227f47e6,0xffb806fd,
    0x3607fc42,0x007fdc2f,0xff10ffea,0x200bf501,0x8bf01ff8,0x117dc1fb,
    0x001fb8bf,0x02fd87fb,0x3f603fe6,0x7e41bf23,0x442c9805,0x361be05f,
    0xf101fd07,0x4c1fe40b,0x225512cc,0x543fe07e,0x7c7f905f,0x7fc45931,
    0xb0bfb001,0x223fc47f,0xdf7002ff,0x00004fc8,0x332e3ff1,0xfecccefc,
    0x445f70cc,0x8017e25f,0x0ff10efb,0x7f907f98,0x7f981ff4,0x0bf50f26,
    0x21fe03fd,0x901fd07d,0x117e605f,0xf39fffff,0xff80fdcd,0x3f20bf50,
    0x6fa807e4,0x2a1fea00,0xf513ee6f,0x07fcc00f,0x000085fb,0x3ff63ff1,
    0xffffffff,0x549f50ff,0x8003f24f,0x3ffadfe8,0x7c42fe80,0x4407fe1f,
    0xa8bf51ff,0xf03fb85f,0x1fe0fb0f,0x1fc807f4,0x3222ffa2,0x0fe64fef,
    0x05fa87fc,0x807e1df5,0x3e2004fb,0xfd0ff80f,0x4006fb83,0x267fa1ff,
    0x4004fffe,0xb3311ff8,0x3bf3335f,0x6c4f7c43,0x0009f11f,0x005ffff3,
    0x3ae73fea,0xa81ff44f,0xa8bf51ff,0xd04fa85f,0xff07d81f,0x47e81fe0,
    0x2ffd83fd,0x50ff82fc,0x3ffa20bf,0x0ff601fb,0xf905ff00,0xbf90df17,
    0x3e3fe800,0xfffeffbf,0x07fe2006,0x207f31f6,0x322effea,0xffb8000f,
    0x7fc4003f,0x6fc83fff,0x3ea5ffb0,0x7cc2fd45,0x7d87f905,0x6f884fa8,
    0x06fa97e0,0x07d81ff7,0x817ea1ff,0x1cefffe8,0x74003fe8,0xfbef983f,
    0x4004fd83,0x37ffe4fd,0x400ffaa1,0x45f81ff8,0x214c01fb,0x80aa24f8,
    0x1ffdffd8,0xd9ffd300,0xcff985ff,0x25fff711,0x42fd45fa,0x7fd107f8,
    0xffb89f61,0xf305fa81,0xf981fe47,0x1ff06e87,0x326017ea,0x7ec4ffff,
    0x817fc003,0xfc80fefe,0xf1ff4004,0x0ff701ff,0xf107fe20,0x8000fd89,
    0xfffd30fc,0x3a1dfd07,0x983df0ef,0x1ff4c2ff,0x3ffbffee,0x8bf51fdc,
    0x01ff05fa,0x53ecbfa2,0x17ee01df,0x03fd0fdc,0x0bf117ea,0x02fd43fe,
    0x47ffb7f0,0x3e2005fb,0x0bff701f,0xff001bea,0xf882ff43,0x1ff8800f,
    0x5559f953,0x200555ff,0x22bf24f8,0x11bea2fc,0x90df5bff,0x21bee0bf,
    0xfd3dffe9,0xbf517ea3,0x7dc0ff10,0x7fccfb1f,0x320bf503,0x640ff10f,
    0xf81fd43f,0x400bf50f,0x7ccff71f,0x81fe6006,0xff102ff8,0xd1fe2001,
    0x20ffc05f,0xfb0ff880,0xffffffff,0xfb001fff,0x4bf12fc1,0xfff983fd,
    0x202fe83f,0x3fe001ff,0x5fa8bf50,0xbf506f98,0x83fd87d8,0x43f706f8,
    0x2ff880ff,0x7fc03fa2,0x2040bf50,0x7c3ff11f,0x7f43883f,0x3e03fc05,
    0x8bfb004f,0x1ff104fd,0x9fe21fe6,0xb999fe98,0x980199bf,0xdf13e64f,
    0xffb81ff4,0x201ff80f,0x4c0221ff,0xf517ea6f,0x3609f50b,0x7c43ec1f,
    0x3e60ff06,0x3f20ffa1,0xf80bfa0f,0x3a0bf50f,0x1ff87e1f,0xff703fee,
    0x5c01ff97,0x0ffcc04f,0xf307fea0,0xf89bee0d,0x7c37cc1f,0x2000fdc5,
    0xf0fea0fd,0xf8837dcf,0x03fd82ff,0x17ee1ff5,0x8bf51fe4,0x03fc85fa,
    0xf07d81ff,0x2207f60f,0xc87bee4f,0x5fd98fff,0x5fa87fc0,0xa8fc9fb0,
    0x43ffb87f,0x082fffea,0xf5001fd3,0x0bff207f,0x3fa627f4,0xe8867f43,
    0x3627cc5f,0x21fcc007,0x89be25f9,0x3fe60cff,0x7fd42fff,0x3a2ff442,
    0x2a2fdc0f,0x6c2fd45f,0xfb0ff01f,0x17e41fe0,0x77fec7e8,0xfffffbff,
    0xf50ff804,0x7cbfee0b,0xf905fd89,0xfffdbdff,0xfffc819f,0x3ffee003,
    0x02fffede,0x3f6fbfe6,0xefffa84f,0x17d40fff,0x1fb001be,0x0ff23fd0,
    0xffd9fff9,0xc83ffd1b,0xeffdbdff,0x6deffdc0,0x22fd40ff,0x207f85fa,
    0xfd07d87f,0x2e09f501,0x86775c3f,0x2622dffc,0xbf50ff80,0x6feffec0,
    0x2e600fff,0xdabdfffe,0x13bee3ff,0x3ff6e600,0xd8801bdf,0x2a04efff,
    0xc81dffff,0x8013e20f,0xffd303f9,0x3ffea09f,0x41b623ef,0x04fffffa,
    0x073bff6a,0x8bf517ea,0x21be04fa,0x201fd07d,0x05fb00fe,0x407fd400,
    0x80bf50ff,0x0dfffffc,0x75406200,0x06000004,0x40013000,0x4c0c4018,
    0x0032a000,0x13100173,0x02620040,0x70000880,0x100fe89f,0x360fb0df,
    0x207f500f,0xc8003ff8,0x21ff01ff,0x7f3005fa,0x02000001,0x00000000,
    0x00000000,0x00000000,0x00000000,0x547fb000,0x217ee03f,0x407fb07d,
    0x3bfa607e,0xfb5100ac,0xa87fc05d,0x007e005f,0x00000000,0x00000000,
    0x00000000,0x00000000,0x20000000,0x1b61ffed,0x6c17ffd4,0x05dff307,
    0xfea805f3,0xfeecefff,0xfff703ff,0x3fffea1f,0x00005402,0x00000000,
    0x00000000,0x00000000,0x00000000,0x7fc00000,0x5c0be62e,0x40fb03ff,
    0x0db03ffb,0x3ffb72a0,0x2a00acde,0xdd30eeee,0x000003dd,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x32000000,0x0abb9802,0x80002620,0x3c88bdca,0x2ea20000,
    0x0260009b,0x20131000,0xa8800098,0x00ee01ac,0x02620033,0x4c46f2a2,
    0xdca88000,0x2622c88b,0x99999999,0x00662099,0x02660988,0x09884cc0,
    0x2f980131,0xfffffb70,0x0bf501df,0xfffff100,0xfff8df7f,0x884fffff,
    0xdffffffe,0xffffb300,0x17ea0005,0x05dfffb5,0xffffec88,0x207d82ef,
    0xfd800ff8,0x97fffc43,0x7c4005fa,0x5faeffff,0x3fffffee,0x2a6fffff,
    0xff9802ff,0x9007fee2,0xfda7dcdf,0x2207e403,0xcbbceffe,0x2fd42ffe,
    0x4577f400,0x3e66fffb,0x4fffffff,0x65efffcc,0x7c40effe,0x03ffcbff,
    0x3ea5fa80,0x02ffdbdf,0x36f3bff6,0x0fd43fff,0xd800ff88,0x55f7ec3f,
    0xe800bf50,0xbfff71df,0x77777754,0x6c6ffeee,0x2ff400ff,0xff5037f4,
    0x3fda7dc1,0x7ff43740,0xa83ff602,0x2fe4005f,0x13ea6ff8,0xd105fd80,
    0x4c4fd8bf,0x7d4000ff,0xff507fa5,0x6403bf60,0x413e21ff,0xfd800ff8,
    0x7d417f43,0x217ee005,0x5c005ff8,0x27fc41ff,0xf101ff90,0x85ff109f,
    0x407fb4fb,0x07fdc4f8,0xbf51fec0,0x701fd800,0x001fe4df,0x3fdc03ff,
    0x0ff20ff3,0x3eebf500,0xfc83fd06,0x17fa200f,0x03fe20dd,0x3fd0ff60,
    0x6c00bf50,0x00bf902f,0xfa81ffd4,0x01ff982f,0x9fd07fea,0x0ff69f70,
    0x1ff41fa8,0x3ea4fa80,0x2037bb75,0x4df300ff,0xff1001fd,0xf70cd801,
    0x441be609,0x5fa8bdca,0x0bfa0351,0x9d5005ff,0xff880fc8,0x973fd800,
    0x7d459bff,0xf059d955,0x017ea01f,0x36027fcc,0x027f40ef,0x6fc877ec,
    0x0ff69f70,0x00ff87d8,0x3f77ea00,0x7c43ffff,0x7f9be207,0x5fe806a6,
    0x8817e400,0xffff887f,0xa805fcef,0x01fe60ff,0xf105f300,0x27fb001f,
    0x24fffffd,0xffffddfa,0x981fe24f,0x6fe8805f,0x2e4ff880,0x9fd1006f,
    0x3ee03ff5,0x2fc07fb4,0x50001fe6,0xfb319fff,0x807fc43f,0xf9ff16f9,
    0xf503dfff,0xd80159ff,0xd03fe02f,0xfff715df,0x1ffdcc0b,0x20001bea,
    0x00ff885f,0xfd313fd8,0x7ffd4135,0x22ffc98b,0x0bf300ff,0x2001ffb0,
    0x1ff89ffa,0x3fffe600,0x7ed3ee03,0xfb87f303,0x7fd40006,0x7fc6fb82,
    0x3eadf501,0xfffdbdff,0xfffffa81,0x01fe81ce,0x85fb83fe,0xff905ff8,
    0x00bf907f,0xff10fb00,0xe87fb001,0x82ffa81f,0x407fa3fd,0x7fe405fa,
    0x6f7ec001,0xffc8004f,0xfda7dc05,0xfc81f703,0x3bbbba05,0x40df51ee,
    0x413f20ff,0x81df56fe,0xb7106fe8,0xf89fffff,0xd87fa01f,0x20bf902f,
    0x6c3ffecc,0xfb80004f,0x4007fc41,0x40ff43fd,0x4bf707fa,0x0bfb04fc,
    0x40017fd4,0x0006fff8,0xfb80dff9,0x1b607fb4,0xfff81bee,0x9f51ffff,
    0xff10ff40,0x1bff6619,0x4007fd40,0xd0effeb9,0xf07fc03f,0x017ea01f,
    0x5fb93fa6,0x43f88000,0xfd800ff8,0x7d40ff43,0x7c4bf506,0x82ffdc3f,
    0x20004ff9,0xa8001ffb,0x2e04ffff,0xf107fb4f,0x201ff309,0x1ff99999,
    0x17ec09f5,0x3ffbffea,0xff1006fd,0x2ffb8005,0x13fc05fb,0x02fcc0ff,
    0x1fea6fb8,0x7c2f4000,0x42fe801f,0x05fa81fe,0xfffb8bf5,0x885ffffc,
    0x4c0005fe,0xff88007f,0xf701ffab,0x3ea0ff69,0x4003ff02,0x40bf51ff,
    0xfec982fe,0x2005fa9d,0x003972fe,0x40bf69f9,0x807fc6f8,0xff1005f9,
    0x2003fe23,0x0fc81df8,0x7fc017f4,0x7d40ff41,0xd30bf505,0x0bf57fff,
    0x80001dfb,0xfd8007f9,0x2e03ff66,0xf907fb4f,0x8017f601,0x40df51ff,
    0x3ea000ff,0x3e203995,0x7009f91f,0x5413f2bf,0xa80ff45f,0x2203d75f,
    0x00ffe1ff,0x3ea03ff2,0x2201fe42,0x40ff40ff,0x0bf505fa,0xc8bf50c4,
    0x980001ff,0x7fdc007f,0x2e17fe20,0xbd07fb4f,0x402ffd40,0x0ff51ff9,
    0x03d91fea,0x837ecff6,0x07fe67fb,0x1fe67fb0,0x13f21fe4,0x05fdafec,
    0x2ffa8ff7,0x4417fe60,0x0077dc4f,0x03fd0ff9,0x17ea0bf5,0x3ea5fa80,
    0xf300002f,0x17fcc00f,0x3ee1ffd4,0x3f887fb4,0x056ffe40,0x23fffb31,
    0x7f4c5ffa,0x2e077dc2,0x85ff50ff,0x7ff43fea,0x07fec40b,0x86f989fb,
    0x7fdc2ff9,0xe985ff55,0x0affc84f,0x803bfae2,0x0f7f446d,0x7f417fdc,
    0xf505fa81,0x9afd400b,0x200003ff,0xfd1007f9,0x707fe409,0xf70ff69f,
    0xffff7003,0x19ffffdd,0x6e77f7d4,0xffe885ff,0x641fffde,0x5ffebeff,
    0xeffffd88,0x7cc1efff,0x01ffdbdf,0xdff9dff5,0x677fe4bf,0x3f606ffe,
    0xffffdeff,0x2207dc01,0xffeeffff,0x503fd03f,0x017ea0bf,0xfff75fa8,
    0xffffffff,0x7f9801ff,0xd00dfb00,0xfda7dcdf,0x71003ec3,0x3bdfffdb,
    0xfff59f50,0x7654407f,0xff701cdf,0xeb807dff,0x00ceffff,0x05bfffd1,
    0x9bfffda8,0x7fffd45f,0xffeb803f,0x9800cfff,0xffec983f,0x3fa02cef,
    0xf505fa81,0xba75400b,0xffffffff,0x400fffff,0xffb807f9,0x74ff9801,
    0x110ff69f,0x000c4000,0x00000088,0x440004c4,0x00620009,0x98800620,
    0x09988000,0x98009800,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x26004c40,0x884c4009,0x42620009,0x17b972c9,0x33333310,
    0x43333333,0x26600098,0x01999999,0x33333330,0x202e0033,0x09880099,
    0x98800666,0x26000cc1,0x20998801,0x40066099,0x30a60098,0x33333333,
    0x4cccc133,0x99999999,0x2b2e5970,0x3fe206fb,0x64bfe00f,0x53f6006f,
    0xffffdcfa,0x7fffdc2f,0xffffffff,0x200bf51f,0xfffffff8,0xf103efff,
    0xffffffff,0x03fa019f,0xfb00bff1,0x00fffe67,0x7cc7ffe2,0x01fe6007,
    0x7fc1dff3,0x36007fe5,0xf8ff103f,0xffffffff,0xffff14ff,0xffffffff,
    0x67f53fa5,0x3fea07f9,0x4cff302f,0xff8801ff,0x119fff51,0x77543ff9,
    0xeeeffeee,0x0bf51eee,0x3337fe20,0x4fffeccc,0xeeeeff88,0xf06ffeee,
    0x2fff881f,0xff99fec0,0xfffa806f,0x4c00ff31,0x3bfe607f,0x3ff2ffc0,
    0x3a07fb00,0x7777fc7f,0x13eeeeee,0xddddddff,0x3b65dddd,0x07fe7d93,
    0xb827e7ec,0x4027f45f,0x0bfea6fb,0x3f601bee,0x802fd404,0x32200ff8,
    0x07fc41ff,0xff07ff70,0x0ffff881,0x7fccff60,0x7fec00fe,0x400ff31f,
    0xbff307f9,0x7fcbff01,0x4c3fd801,0x0ffc7ffe,0x003ff100,0xf03fd800,
    0x3f60df1f,0x7403fd43,0xf81bea3f,0x404fd807,0xff1005fa,0x43ff8801,
    0x7e400ff8,0x333ff2a5,0x0bfdff10,0xcff99fec,0x3b7e203f,0x400ff31f,
    0x5ff987f9,0x1ff97fa0,0x3f23fd80,0x0ffc7fef,0x003ff100,0x985fb800,
    0xff01fd5f,0x201ff883,0x17ea0ff8,0x7ec01fe8,0x4c2fd404,0x01ff10cc,
    0xff889fb0,0xf93fd400,0x3e23ffff,0xfb02ff9f,0x1be7fe67,0x31feafa8,
    0x3fcc00ff,0xfd017fe6,0x6c00ffc9,0xf17ff53f,0x2001ff8f,0x00001ff8,
    0x97dc3fc4,0x83fc43fc,0x13f204fc,0x17ec09f5,0xf5013f60,0x223ff98b,
    0x2ff800ff,0x32007fc4,0x27fe627f,0x7fe5fe21,0xff33fd80,0x47ec03fa,
    0x00ff31fe,0xbff33fcc,0x7fc9fb00,0x953fd801,0x3ff1fe21,0x00ffc400,
    0x20ff4000,0xa8bf50fe,0x40ff305f,0x027d41fe,0x4fd803fb,0xff32fd40,
    0x400ff885,0x0ff886fd,0x7fc2ffc0,0xbfd3fc40,0x5fe67fb0,0xd5f883fc,
    0x801fe63f,0x0bff37f9,0xaff8ff60,0x99999999,0x8ff103fe,0x3e2001ff,
    0xc800001f,0xff1be22f,0x3fa02fc8,0xfa86f982,0xb003fa05,0x35fa809f,
    0xbff105ff,0xffdb9999,0x01ff107f,0xf03ffb33,0x267f881f,0x99fec2ff,
    0xf70df37f,0x3fcc7fa5,0xff3ff300,0x7f9001ff,0x7ffffffc,0x03ffffff,
    0xffff8ff1,0x22ffffff,0xfffffff8,0x4005ffff,0xb13ea4fa,0x7007f43f,
    0x507f90bf,0x0df301ff,0xfa809fb0,0xf102ff9d,0xffffffff,0x3fe203bf,
    0xffffffff,0x881ff03f,0xb07fe47f,0xfe9fe67f,0x23fd3ec0,0x3e6007f9,
    0x05fecfff,0x3bfe2fc8,0xeeeeeeee,0x8ff103ff,0xffffffff,0x3ffe22ff,
    0xffffffff,0x937c4005,0xf13fb83f,0x20ff880d,0xffa80ff8,0x00ffa60d,
    0xdf5013f6,0x3e201dff,0xffcaaabf,0x7fffc403,0x00cdefff,0x0ff103fe,
    0x99fecbfd,0xf88ff27f,0x3fcc7fa4,0x29fff300,0x7dc03ff9,0x36007fe2,
    0xf8ff103f,0x999999af,0x007fe209,0x06aa3550,0x261fe1fd,0xb009f55f,
    0xa82fd45f,0xffdcffff,0x809fb004,0x04fefffa,0xff301ff1,0x007fc409,
    0xf881ff00,0xfb2ff987,0x6f99fe67,0x31fe8bee,0x7fcc00ff,0x700ffdc4,
    0x400ffc3f,0x8ff103fd,0x3e2001ff,0xa7f4001f,0x4d7e44fe,0x3f2ff05f,
    0x365fa801,0xf5bf502f,0x6c007dff,0x4ffd404f,0xff881ff9,0x207ff500,
    0x20000ff8,0x83fc40ff,0x33fd8ffc,0xfd0fe8ff,0x0ff31fe8,0xfd83fcc0,
    0x7c3f500e,0x03fd801f,0x01ff8ff1,0x0007fe20,0x513fa9fd,0x3607f79f,
    0x3e007e8f,0x2a06f88f,0x2000225f,0x2fd404fd,0xff881df7,0x207ff200,
    0x20000ff8,0x03fc40ff,0x267fbbfd,0x7c5fdc7f,0x7f98ff44,0x441fe600,
    0x41d305ff,0x3fd801ff,0x1ff8ff10,0x007fe200,0xbf100f60,0x2fea03fb,
    0x2ff2005f,0x17ea03fb,0x013f6000,0x44fe8bf5,0x3a200ff8,0x00ff886f,
    0xf107fa00,0x7fffcc0f,0xef98ff33,0x98ff41fb,0x1fe6007f,0xf003ffa8,
    0x07fb003f,0x03ff1fe2,0x000ffc40,0x40d547e2,0x3e206ffe,0x3e2003fe,
    0x3ea00fed,0x4fd80005,0x3e62fd40,0x003fe22f,0xff887ff5,0x3ff60000,
    0xc80ff11e,0x0ff33fff,0x3fd0fdfd,0xf9801fe6,0x20ffec07,0x007fe1aa,
    0x3fc40ff6,0xf88007fe,0xb26c001f,0x09ff709f,0x4001ffe8,0x7d405ffd,
    0x4fd80005,0x7e42fd40,0x001ff10e,0x7fc41ffb,0x3fa60000,0xd00ff13f,
    0x21fe67ff,0x1fe84ffb,0xfffffff3,0x1fe69fff,0xfe8dff10,0x36007fe4,
    0xf8ff103f,0x3fe2001f,0xffffffff,0x4fd816ff,0x6402ff98,0xffa8007f,
    0x00275402,0x2a027ec0,0x229fd05f,0xff8800ff,0x0003fe25,0x07f88220,
    0xff33ff98,0xfd03ff30,0x3ffffe63,0xf34fffff,0x49ff300f,0x007fe4fe,
    0x3fc40ff6,0xf88007fe,0xffffffff,0x00006fff,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x20000000,
    0x26000019,0x00999999,0x00033100,0x4c004d4c,0x26602bca,0x80199999,
    0x059302c9,0x059bb951,0x01bdeca8,0x00bceca8,0x801bdb98,0x980bddca,
    0x10adc89c,0x2a393000,0x0e5c2cec,0x0cb81e4c,0x964c0595,0x3fd40099,
    0x7ffffff4,0xff32ffff,0x9fffffff,0x02ffd800,0x7ffffdc0,0xfffd880d,
    0x7fc42eff,0xdfffffff,0x2a09f701,0x7fffd45f,0xffd05fff,0x2607ffff,
    0x2ffffffe,0x3fffff60,0xfffd880f,0x5fd42fff,0x7d90fffe,0x32fea001,
    0x325fffff,0x40ffc83f,0x81be67f8,0x407fd2fd,0xffe87ff8,0xffffffff,
    0xddddff31,0x001dfffd,0x400dfff1,0xffdbeffc,0x4e7fec0f,0x3e21ffeb,
    0xffeeeeef,0x04fb84ff,0x5ffc4bf5,0xc85ff731,0x3ff511df,0xb517dfd0,
    0x7dfb03ff,0xfd0bf931,0x3ffb317d,0x25e7ffd4,0x8039fff9,0xb89cfffa,
    0xd0df52ff,0x44fa85ff,0x27f881fe,0x3ff603fe,0x25fd8007,0x3fe607f9,
    0xfebfb803,0x41ff9801,0x3fea5fe8,0x3e26fd81,0x0bff600f,0x97ea09f7,
    0x89fb05fb,0x43ec81fe,0x8df706fb,0x43fd06fa,0x5fb80ffa,0xc980bfea,
    0xf502dfff,0x7c9f905f,0x13fbe20f,0x84fb85fb,0x40ffa4fb,0x4007fdfb,
    0x1fe60efa,0xfd00bf70,0xf9009f73,0xfd9fea0d,0x221ff305,0x7fec00ff,
    0x7d413ee0,0x7dc02625,0x8006fec5,0x87fe02fe,0x415303fc,0x1ff104fd,
    0x5c401fea,0x2a0bfffe,0x6cbf707f,0x1befee2f,0xd0ff10ff,0x4c0fec3f,
    0x2007f9ef,0x3fcc1ff8,0xf301bea0,0x2e01fe2f,0x21ff102e,0x43fe01ca,
    0xfe800ff8,0x7d413ee3,0x3f72a205,0x6fffd45f,0x803fe00b,0x007fa2fd,
    0xaaaacfe8,0xdf51ffaa,0xfffb3000,0x7d41bea7,0x8fd93ea5,0x20bf30fe,
    0x91be62fe,0xf11fd01f,0x427ec00f,0x27e407f9,0x2fe93f20,0x03fdc000,
    0x7fc4df50,0x2e5fb800,0x98bf504f,0xfefffffd,0xffffe985,0x203fc42e,
    0x003fe3fc,0xfffffff8,0xbf52ffff,0xaffcc000,0x4bf505fa,0x7e5be6f8,
    0x3ea05f92,0x0b50ff25,0x01fe27f9,0x7f983fd4,0x00efc988,0x0df70ffc,
    0x004fe800,0x7fc45ff3,0x2e6fa800,0x4cbf705f,0xf51bceff,0x7ff5cc0b,
    0x803fe23f,0x007fe2fd,0x9999aff8,0xbf509999,0xfffb5000,0x7d417ea7,
    0xa7ccfec5,0x201fd4fa,0x01fd0ff8,0x3fc4bf30,0xf303fe80,0xffffffff,
    0x46fa801d,0x70001ff8,0xff3001ff,0x800ff887,0x417ee7f9,0x413fa5fc,
    0xfb1005fc,0x3a01ff8d,0x4c0bfa0f,0x800ffa2b,0xd71005fa,0x5fa85dff,
    0xbfb8bf50,0xf1df12fb,0xf9afc80b,0x20fe8805,0xff9807f8,0xfffff300,
    0x809fffff,0x04fd83fd,0x802ffb80,0xff884ff9,0x50ff9800,0xf97fa0df,
    0x44bfb01f,0x0ff880fe,0x3fcc13f6,0x27ec13f2,0x3be60dfb,0xd980bf50,
    0xf501dfff,0xf317ea0b,0x67f41fbb,0x66fcc03f,0x42fd802f,0x5fc807f8,
    0x54c1fe60,0x5ff106fe,0x1ff73333,0x017fe400,0xff104fe8,0x4cff5001,
    0x2ffdc2ff,0xbff907fb,0x5fb84fc8,0x3a61ffcc,0x217fc44f,0x3fe21ff9,
    0xf51ff40b,0x67ffe40b,0xa82fd400,0x46ffe85f,0xe800fffb,0x5fa807ff,
    0xff807f88,0x101fe601,0xfff705ff,0x7fffffff,0x00bff600,0xff103fc4,
    0xd8df7001,0xfcfecdff,0x32f7fea5,0x7c46fdfe,0x1ffeccff,0xfecfffc8,
    0x9fff705f,0xff709ffb,0xa8dffb9f,0x00bb205f,0xbf505fa8,0xf987ff90,
    0x9ff7006f,0xfffffb00,0x03ffffff,0x7f980df5,0xfe84fc80,0xeeeeeeee,
    0x1ffd806f,0x8817ea00,0x5fd800ff,0x8aefffc8,0x7ffedc5f,0xe983ff1e,
    0x201dffff,0x03efffea,0x0e7fff4c,0x7dfffd30,0x0205fa81,0x5417ea00,
    0x81ff985f,0xff1003ff,0xdddd9003,0x3ddffddd,0xf9807fb0,0x4c5fc807,
    0x0ffc407f,0x000efd88,0xff101f54,0x02ff9801,0x01880026,0x40019880,
    0x0c400098,0x00004c00,0x00000000,0x00000000,0xfe80ff10,0x203fcc02,
    0x27e43fe8,0xfd827f40,0x1000000e,0x6fd801ff,0x00000000,0x00000000,
    0x00000000,0x00000000,0x40000000,0x07fc07f8,0x5441fe60,0x0ffc0ffe,
    0x2a07fd40,0x530000ff,0x207fc405,0x01ffeb98,0x47260198,0x2e61bdca,
    0xcccc80bd,0x00cccccc,0x03993080,0x32603991,0x33333102,0x10133333,
    0x26133039,0xa9835509,0x82a98201,0x00aaaaaa,0xf881fe20,0xffff9807,
    0x2fffffff,0xf8803fd4,0x7ffffc3f,0x00ffffff,0x7fc40df9,0xffffffff,
    0x40ff002f,0xffffdbfa,0xfffff98f,0x7fffffc4,0x2000ffff,0x21bf65ea,
    0x1ff605fd,0x7fffffe4,0xf885ffff,0x5ff3fe82,0x7ffd4ffa,0x99a61cff,
    0x3ffe21ff,0x22001fff,0x01bea07f,0x3fffffe6,0xfd80ceef,0x89bf2004,
    0xffffffff,0xdf900fff,0x7ffffc40,0x000bdeff,0xfffa81fe,0xdfefea8a,
    0x261ffb8a,0xff999999,0xfffc8804,0xfa8ffe25,0x7fff100f,0xdddddd70,
    0x8e49dddd,0x7fd0c9af,0xf9ff4bfe,0xefffffff,0x12fd47ff,0x03dddddd,
    0x00000000,0x00000000,0x00000000,0xa81fe000,0x37fcc2ff,0x7ec01fec,
    0x7ffed405,0x88ffa81c,0x2fee02ff,0xf100006f,0x25ffdfdf,0x6c5ff3fe,
    0x7f5cc3d3,0x1fb83fff,0x00000000,0x00000000,0x00000000,0x3e000000,
    0x7c1fea07,0x404fc83f,0xeb880efc,0x6400beff,0x7c04fddf,0x00003f97,
    0xb0577ecc,0x1f87f65f,0x004d4c01,0x00000000,0x00000000,0x00000000,
    0xca800000,0xcccffccc,0x3e0df53c,0x204fb81f,0xffb80ffb,0x7f4001df,
    0x9a7dc06f,0x2600005f,0x87dc3fcf,0x0009b0fc,0x00000000,0x00000000,
    0x00000000,0x40000000,0xfffffffc,0x0bf55fff,0x13ee03fe,0xfc80ffd4,
    0xff50002f,0x3a0fe807,0x3ffff20f,0x25ffffff,0x4c5f96f8,0x000096a6,
    0x00000000,0x00000000,0x00000000,0x40000000,0xbffaaaa9,0x0bf52aaa,
    0x13ee03fe,0xfa80bfe6,0x74002eff,0xbf500fff,0x3ff24fa8,0xffffffff,
    0x00070d45,0x00000000,0x00000000,0x00000000,0x00000000,0x40ff0000,
    0x01ff05fa,0x4ff889f7,0x9fffb500,0xfcdfc801,0xff05fb05,0x00000001,
    0x00000000,0x00000000,0x00000000,0x00000000,0x1fe00000,0x1ff05fa8,
    0x7f449f70,0xffc98005,0x8ffa82df,0x2f442ff8,0x00002eb8,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x82fd40ff,0x24fb80ff,
    0x440005fd,0x3e25fffb,0x003fea2f,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x7f800000,0x7fc17ea0,0xff74fb80,0xdddddddd,
    0xb2ed4007,0x4cdfb0bf,0xdddddddd,0x003ddddd,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x2fd40330,0x4fb80ff8,0xfffffff7,
    0x10009fff,0x3e203fee,0xddddd33f,0xdddddddd,0x00000009,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_27_usascii_x[95]={ 0,2,1,0,0,1,1,1,1,1,0,1,2,0,
2,0,1,2,0,1,0,1,0,1,0,1,2,2,1,1,1,1,1,-1,1,1,1,1,1,1,1,2,0,1,
1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,-1,1,0,1,0,0,0,0,0,1,1,
-2,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,1, };
static signed short stb__arial_27_usascii_y[95]={ 21,3,3,3,2,3,3,3,3,3,3,6,18,13,
18,3,3,3,3,3,3,3,3,3,3,3,8,8,6,8,6,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,24,3,8,3,8,3,8,3,8,3,3,
3,3,3,8,8,8,8,8,8,8,4,8,8,8,8,8,8,3,3,3,10, };
static unsigned short stb__arial_27_usascii_w[95]={ 0,3,7,14,13,20,15,3,7,7,9,12,3,8,
3,7,12,8,13,12,13,12,13,12,13,12,3,3,12,12,12,12,23,18,14,16,16,14,13,17,15,3,11,16,
12,18,15,17,15,17,17,14,15,15,16,23,16,16,15,6,7,6,11,15,5,13,12,12,12,13,8,12,11,3,
6,11,3,18,11,13,12,12,8,12,7,11,12,18,12,12,12,8,3,8,13, };
static unsigned short stb__arial_27_usascii_h[95]={ 0,18,7,19,22,19,19,7,24,24,8,13,7,3,
3,19,19,18,18,19,18,19,19,18,19,19,13,17,13,9,13,18,24,18,18,19,18,18,18,19,18,18,19,18,
18,18,18,19,18,20,18,19,18,19,18,18,18,18,18,23,19,23,10,2,4,14,19,14,19,14,18,19,18,18,
24,18,18,13,13,14,18,18,13,14,18,14,13,13,13,19,13,24,24,24,5, };
static unsigned short stb__arial_27_usascii_s[95]={ 252,190,212,173,84,188,209,252,38,8,202,
106,220,244,252,1,81,210,62,107,1,53,147,15,225,239,252,248,151,189,195,
76,46,43,28,120,89,233,219,9,194,249,161,173,160,141,125,129,101,98,83,
66,55,145,25,1,228,211,195,77,137,70,177,177,238,118,27,159,94,172,161,
40,170,252,1,71,245,119,208,145,42,182,186,132,117,106,239,220,164,116,138,
29,25,16,224, };
static unsigned short stb__arial_27_usascii_t[95]={ 20,46,80,1,1,1,1,65,1,1,80,
80,80,80,60,26,26,46,65,26,65,26,1,65,1,1,46,46,80,80,65,
65,1,65,65,26,65,46,46,26,46,26,1,46,46,46,46,1,46,1,46,
26,46,26,46,46,26,26,26,1,26,1,80,91,80,65,26,65,26,65,26,
26,26,1,1,46,26,80,65,65,46,26,65,65,46,65,65,65,80,1,80,
1,1,1,80, };
static unsigned short stb__arial_27_usascii_a[95]={ 107,107,137,215,215,344,258,74,
129,129,150,226,107,129,107,107,215,215,215,215,215,215,215,215,
215,215,107,107,226,226,226,215,393,258,258,279,279,258,236,301,
279,107,193,258,215,322,279,301,258,301,279,258,236,279,258,365,
258,258,236,107,107,107,181,215,129,215,215,193,215,215,107,215,
215,86,86,193,86,322,215,215,215,215,129,193,107,215,193,279,
193,193,193,129,100,129,226, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_27_usascii_BITMAP_HEIGHT or STB_FONT_arial_27_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_27_usascii(stb_fontchar font[STB_FONT_arial_27_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_27_usascii_BITMAP_HEIGHT][STB_FONT_arial_27_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_27_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_27_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_27_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_27_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_27_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_27_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_27_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_27_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_27_usascii_s[i] + stb__arial_27_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_27_usascii_t[i] + stb__arial_27_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_27_usascii_x[i];
            font[i].y0 = stb__arial_27_usascii_y[i];
            font[i].x1 = stb__arial_27_usascii_x[i] + stb__arial_27_usascii_w[i];
            font[i].y1 = stb__arial_27_usascii_y[i] + stb__arial_27_usascii_h[i];
            font[i].advance_int = (stb__arial_27_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_27_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_27_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_27_usascii_s[i] + stb__arial_27_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_27_usascii_t[i] + stb__arial_27_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_27_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_27_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_27_usascii_x[i] + stb__arial_27_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_27_usascii_y[i] + stb__arial_27_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_27_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_27_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_27_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_27_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_27_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_27_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_27_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_27_usascii_LINE_SPACING
#endif

