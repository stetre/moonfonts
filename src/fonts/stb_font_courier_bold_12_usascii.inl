// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_12_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_12_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_12_usascii_BITMAP_WIDTH         128
#define STB_FONT_courier_bold_12_usascii_BITMAP_HEIGHT         50
#define STB_FONT_courier_bold_12_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_bold_12_usascii_FIRST_CHAR            32
#define STB_FONT_courier_bold_12_usascii_NUM_CHARS             95

#define STB_FONT_courier_bold_12_usascii_LINE_SPACING           6

static unsigned int stb__courier_bold_12_usascii_pixels[]={
    0x143d0130,0x370a2040,0x210370c8,0x06203220,0x4264cb2a,0x32f72601,
    0x50b73321,0x31099159,0x64950aa0,0x20a82e80,0xa87ae01f,0x26a83a65,
    0x6468f86a,0x1076fe44,0xd107aab9,0x37eafe20,0x936b7ee0,0xfc89d1f9,
    0x3f7ba1ed,0x260e4f90,0x971e6646,0x547f7ae0,0xf85d16a5,0x95167e21,
    0x5a8972cc,0xccfc88b5,0x4c4b8ee1,0xf1791e27,0x24972cc1,0x5b01b25b,
    0x3e26baa8,0x2d432e80,0x1ec0f8b7,0x2d45fdfb,0x56a3c459,0x0aafb85a,
    0x313aaba2,0xf889939f,0x8f11643d,0x22b70fc8,0x8d1034c3,0x24fe984c,
    0x3c47f15a,0x1b7d5264,0x223c97cc,0x885aad46,0x13776a06,0x9017dbd3,
    0x1a23b81f,0x3ba541d3,0x88d101ec,0x52d8940f,0xb03e2d4b,0x83b7b627,
    0x3227a65a,0x885aad44,0x4c4a8067,0xe883d806,0x24003c89,0x90d101e2,
    0x8f5dfc47,0x47b16a5a,0xbddb11f8,0x3fea2541,0x05aad40c,0xd701bff9,
    0x4077f45f,0xfd505feb,0x2545a819,0x435403c8,0x5176dc78,0x4d5074cb,
    0x21e65c5b,0x2e77dc4c,0x40baab93,0x220cc400,0x01331019,0xf8040400,
    0x205fdb00,0x0a22d42d,0x702a3837,0x205c4597,0x32a1baaa,0x00009932,
    0x00000000,0x00c40100,0x00000402,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x33100000,0x409a8813,0x66ecc2db,
    0x30454c0c,0x41ec4017,0x2026c1db,0x665c2dd9,0xc8976444,0x37221ccc,
    0x5c08a982,0x2622621d,0xefec8e61,0xc9bb3b21,0x75d10f9d,0x6fced89f,
    0x89901232,0x1ae0facc,0x6c1d37b0,0x273a22ac,0x45d55b11,0x3b20f9bd,
    0x9a2723fd,0x30eeacfc,0x12cc1d07,0x773c8f49,0x2ccb516c,0xdc982959,
    0x22d87c4d,0x2602dce9,0xb82f361e,0x3f1e201c,0x58ae787a,0x09734cd5,
    0x701e41d0,0x236abf7b,0x880f22f8,0x75d11cdc,0x4793c49f,0xb83dacf9,
    0x87e6e46f,0x5b80efed,0x3b237fdc,0x32e56c2c,0x8ea225cd,0x7ff4f20e,
    0xfc93b6e0,0xc80f22ff,0x4c8ee3cb,0x13cc593c,0x3c81ec0f,0x0b60f2bb,
    0xb983d37f,0x996ef63e,0x5beb92e6,0x987541f1,0x5b01fa86,0x5c388f4c,
    0x362b51b8,0x307c5744,0x64116a3f,0x2992d863,0x87c3c44b,0x9321d32d,
    0x47e21976,0x7fecc41d,0x24fffc82,0x77541dfd,0x43fffb86,0x7ffe45c9,
    0xf0bfe62f,0x7443bfff,0xffd10eff,0x2077f44b,0x0dffb84a,0x641bffd3,
    0x04ffa832,0x00804004,0x00010026,0x40100002,0x00010000,0xdd880802,
    0x00000103,0x00000000,0x00000000,0x00000000,0x6dc40000,0x84c42b83,
    0x1984cc19,0x509984cc,0x2666203b,0x70133119,0x7019980b,0x0cc3307b,
    0x26218866,0x33198819,0x56645ea8,0x5fdc1983,0x457746f8,0x15fd11fd,
    0x407a25fd,0xf76efeeb,0x03cc1ddd,0x987fddd1,0xe99fd85b,0x7ec3fa0e,
    0xf90bfd51,0x19f8df3b,0x970737f2,0x70d5b907,0x698d1957,0x5993b0f2,
    0xf34655dc,0x0f73e1e4,0x2cc3c4ee,0x5c4ab7c4,0x2cc7f8bf,0x5f09d1f0,
    0x4c0aaf98,0x501fb04c,0x5b0b5fb9,0x17f9b03e,0x3e2a544c,0x4e7c1fcb,
    0x364e5c1e,0x667442cc,0x667e5c4a,0xddf02cc7,0x7499dd70,0x3a212a00,
    0xecfe982e,0xd85ada85,0x3e12a04f,0x0b2785ec,0xb3019df7,0x899f1d10,
    0x4c78fdbb,0x89b7f125,0x03a0fcad,0x45f40da8,0x7ce7c41f,0x7b05df04,
    0x3e16a07d,0x590f87d0,0x06d404b8,0x2e27d5a6,0x6d478a9b,0x7447c788,
    0x233ffea0,0x3e61ffff,0x17fb3fff,0x7f2f81ff,0x27ee1ae0,0x3ffe46fa,
    0x64be2ff9,0x3e67f9df,0x7ffc41ff,0x26d7f63f,0x7ff17ff1,0xd9ffffee,
    0x0083f77f,0x00000000,0x00000000,0x00000000,0x88000000,0x99983309,
    0x02622621,0x4cc13333,0x26662199,0x88333109,0x06660199,0x80eecc00,
    0x2600003c,0x1caa5c3b,0xf15f7054,0x51dfed8d,0xef8bf39f,0xdddd32fe,
    0x3bbbee1f,0x64dddf94,0x6c40eeef,0x80ed40ff,0x540eaaf8,0x4404985f,
    0xf317765c,0xc8698b62,0xf0b3069c,0x22dde164,0x5e0d88ac,0x1e4d13a9,
    0x6fc41e4f,0x180cfa83,0x30b9d07a,0x2067dc0b,0xc8b27859,0x2603fd01,
    0x42ecdf85,0x77640e98,0x3447df82,0x0feefcb3,0xf7034e5c,0xcb8b9019,
    0x2fb6e659,0x4c077aa2,0x22d88f85,0x59816a02,0x442dabf8,0x3732189f,
    0x2237bf82,0xdbbf9666,0x81feee85,0x45d83fc8,0x730edcf8,0x6f5457db,
    0xff90b301,0x816a00df,0x8590f85a,0x2f24b8be,0x2d311f00,0x3e3d88e8,
    0x4f4c7988,0x067dc4c9,0xb88237a2,0x02cc0edb,0x05a819f7,0x7ffc8001,
    0xf92ffff8,0x7fc4ff5b,0x1fff34ff,0x96ffffc8,0x7fec9dff,0x2ffe23ff,
    0x03b52ff8,0x30bfffea,0x404983ff,0x3fffe5c8,0x00000002,0x00000000,
    0x00000000,0x00000000,0x9b930000,0x2e16e4c1,0xcdb882dd,0x321ee4c2,
    0x2002dbdc,0x3323dacc,0x1440cc9b,0xa8f26f26,0x0cc83dcc,0x66664199,
    0x47777751,0x84513329,0x7f11d9be,0x755547d5,0x12ecdf40,0x6e45d55d,
    0x83986aeb,0x3e63aefa,0x2ea0ce89,0xf7bb109c,0x0f4e7c43,0xd1aeeb6e,
    0x2ee61db5,0x65d6a3bb,0x3baed759,0x934c970c,0x22cc1fff,0x97fbbee1,
    0xe88f59bb,0x3320782e,0x1effd869,0x593c0ff4,0x43cfde88,0x2eea0ea8,
    0x5d5263bb,0x6c522248,0x55721d53,0x3a21f88d,0x999e98a0,0x23d66ee1,
    0x3e21f8be,0x107bf100,0xebdc85df,0xe82c87c0,0x4fd41fcf,0x77777319,
    0xf1061118,0x7fdc1dff,0xdfffd10d,0x644fffb8,0x2bfe4ffe,0x098a3faf,
    0x320ffff3,0x64715307,0x3f27f9cf,0x9cd86f8d,0x03ffff87,0x40110000,
    0x80100100,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xddddd300,0x05dddc9d,0x00000000,0x00000000,
    0x00000000,0x5729afd8,0x09999998,0x0002eeee,0x00000000,0x00000000,
    0x22000000,0x00e1fe8b,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__courier_bold_12_usascii_x[95]={ 0,2,1,0,0,0,1,2,2,1,0,0,2,0,
2,0,0,0,0,0,0,0,1,0,0,1,2,2,-1,0,0,1,0,-1,0,0,0,0,0,0,0,0,0,0,
0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,2,0,1,0,-1,2,0,-1,0,0,0,0,0,0,0,
0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,1,2,1,0, };
static signed short stb__courier_bold_12_usascii_y[95]={ 8,1,1,0,0,1,2,1,1,1,1,1,6,4,
6,0,1,1,1,1,1,1,1,1,1,1,3,3,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,10,0,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,1,3,3,3,3,3,3,1,1,1,3, };
static unsigned short stb__courier_bold_12_usascii_w[95]={ 0,2,4,6,6,6,5,2,4,3,6,6,3,6,
2,6,6,6,6,6,6,6,5,6,6,5,2,3,7,7,7,5,6,8,7,6,6,6,7,7,7,6,7,7,
7,8,8,7,7,7,7,6,6,7,8,8,7,7,6,4,6,3,6,8,3,7,8,7,7,6,7,7,7,6,
5,7,6,8,7,6,8,7,7,6,7,7,7,8,7,7,6,4,2,4,6, };
static unsigned short stb__courier_bold_12_usascii_h[95]={ 0,8,4,9,10,8,7,4,9,9,5,7,4,2,
3,10,8,7,7,8,7,8,8,8,8,8,6,7,7,4,7,8,8,7,7,8,7,7,7,8,7,7,8,7,
7,7,7,8,7,9,7,8,7,8,7,7,7,7,7,9,10,9,5,2,3,6,8,6,8,6,7,8,7,7,
10,7,7,5,5,6,8,8,5,6,8,6,5,5,5,8,5,9,9,9,4, };
static unsigned short stb__courier_bold_12_usascii_s[95]={ 124,121,120,45,21,38,122,117,36,41,70,
92,122,21,125,1,53,107,78,69,85,76,83,89,96,17,125,124,99,109,70,
115,110,61,53,31,46,39,31,9,16,9,1,114,106,97,88,107,73,57,57,
103,50,117,33,24,16,1,24,69,14,65,47,12,8,15,60,23,45,31,1,
23,65,9,8,42,81,38,85,8,90,82,54,1,74,114,62,93,77,99,102,
31,28,52,1, };
static unsigned short stb__courier_bold_12_usascii_t[95]={ 9,1,37,1,1,12,21,37,1,1,37,
29,29,44,37,1,12,29,29,12,29,12,12,12,12,12,12,1,29,37,29,
1,12,29,29,12,29,29,29,12,29,29,12,21,21,21,21,1,21,1,21,
12,21,12,21,21,21,29,29,1,1,1,37,44,44,37,12,37,12,37,21,
12,21,21,1,21,21,37,37,37,1,1,37,37,1,29,37,37,37,1,37,
1,1,1,44, };
static unsigned short stb__courier_bold_12_usascii_a[95]={ 102,102,102,102,102,102,102,102,
102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,
102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,
102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,
102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,
102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,
102,102,102,102,102,102,102, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_12_usascii_BITMAP_HEIGHT or STB_FONT_courier_bold_12_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_12_usascii(stb_fontchar font[STB_FONT_courier_bold_12_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_12_usascii_BITMAP_HEIGHT][STB_FONT_courier_bold_12_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_12_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_12_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_12_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_12_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_12_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_12_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_12_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_12_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_12_usascii_s[i] + stb__courier_bold_12_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_12_usascii_t[i] + stb__courier_bold_12_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_12_usascii_x[i];
            font[i].y0 = stb__courier_bold_12_usascii_y[i];
            font[i].x1 = stb__courier_bold_12_usascii_x[i] + stb__courier_bold_12_usascii_w[i];
            font[i].y1 = stb__courier_bold_12_usascii_y[i] + stb__courier_bold_12_usascii_h[i];
            font[i].advance_int = (stb__courier_bold_12_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_12_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_12_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_12_usascii_s[i] + stb__courier_bold_12_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_12_usascii_t[i] + stb__courier_bold_12_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_12_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_12_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_12_usascii_x[i] + stb__courier_bold_12_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_12_usascii_y[i] + stb__courier_bold_12_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_12_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_12_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_12_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_12_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_12_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_12_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_12_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_12_usascii_LINE_SPACING
#endif

