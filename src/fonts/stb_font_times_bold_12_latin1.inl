// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_12_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_12_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_12_latin1_BITMAP_WIDTH         256
#define STB_FONT_times_bold_12_latin1_BITMAP_HEIGHT         56
#define STB_FONT_times_bold_12_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_times_bold_12_latin1_FIRST_CHAR            32
#define STB_FONT_times_bold_12_latin1_NUM_CHARS            224

#define STB_FONT_times_bold_12_latin1_LINE_SPACING           8

static unsigned int stb__times_bold_12_latin1_pixels[]={
    0x002a6042,0x81331015,0x260080c8,0x44088880,0x30109881,0x800e4402,
    0x8825402b,0x01101081,0x004c4022,0x2100ea06,0x064c0400,0x4c098862,
    0x200c8804,0x1008c02b,0x81cc0111,0x206441c8,0x07e63dbd,0x5ffcc598,
    0x1882b80c,0x5ec1d8d8,0x9b11c43d,0xeeb83d53,0x22012a02,0x4166c405,
    0x827f4c38,0x5cc4e81d,0x0e881732,0xea80eec4,0x1640a06a,0x320f6174,
    0x95015c01,0x0bbae01b,0x3b01edec,0x0ee16f20,0x0300fcc0,0x4c475ffd,
    0x32098899,0x44667e21,0x22131199,0x223517a3,0x20131119,0x44008801,
    0x84388188,0x82213201,0x26a87039,0x01351a98,0x310e4011,0x0f426233,
    0x100220f6,0x08402180,0x33331000,0x0d4d4c43,0x2ff23331,0xbbbf30d8,
    0xe86c5fe4,0x13f43aff,0x17e44a8b,0x4e2589fa,0x3fa203f9,0x8bc98b11,
    0xb8bc983b,0x3b8bc983,0x717931c4,0x4f887b07,0x4d75ec52,0x44fd1e21,
    0x1dc5e4c5,0x4b13f43c,0x15c1ec1e,0x05700ae0,0x815c02b8,0x3a1da9fe,
    0x3fa1da9f,0x5f3153e0,0x22a7c5f3,0x3743affc,0x55c4d50e,0x4471ba3f,
    0xfb805f72,0x224e850f,0x3f12741f,0x887e24e8,0x41f893a3,0x2534e83a,
    0x4c30f9bd,0x9d0e3745,0xd0f30fc4,0x7b07a38d,0x05e80bd0,0x017a02f4,
    0x445f60bd,0xb0c45f61,0x7cc2fb8f,0x417dc7f1,0x23743ada,0x35a87cc3,
    0x540e374d,0xafd5403f,0x49f0fe62,0xf327c3f9,0x4ce24f87,0x0e427c3f,
    0x4fc45d3a,0x2064116c,0x87f31c6e,0x1ba1ae4f,0x50f60f47,0x3f2a03f9,
    0x203f9501,0xf9501fca,0x360efb03,0xf88fb077,0x17c4fcc4,0x0ea209f1,
    0x135438dd,0x237473bf,0x046e8a23,0xf7167dca,0x0bee7e85,0x3a17dcfd,
    0x217dce27,0xa741dc7e,0x53e8fa9a,0x8e374588,0xf33f42fb,0x07a38dd0,
    0x05f8b87b,0x22e0bf17,0x0bf1705f,0x3f617e2e,0x84cfd84c,0x7cc1c87d,
    0x101c85cd,0x21c6d875,0xb07f444b,0xd88e238d,0xfb142bad,0x93e27cc9,
    0xf327c4f9,0x4ce24f89,0x0f627c4f,0x57ce453a,0x23cc32cc,0x89f31c6d,
    0x236c3c4f,0x4c7b07a3,0x64c0feac,0x564c0fea,0x7564c0fe,0x7f564c0f,
    0x7d82bec0,0x8284fb05,0x028409f9,0x28f90ea2,0x91ece0e4,0x220e228f,
    0x744e8505,0x4dd0be66,0xf33742f9,0x4cdd1c45,0x27425c2f,0x8d50a017,
    0x99ba147c,0x1f215c2f,0x38f60f45,0x7cc713e6,0x389f31c4,0x7cc713e6,
    0x7d8e3ec4,0x0e64fb1c,0x0e640fcc,0xde887510,0x47404c3a,0x0eb7a21c,
    0xd30b3071,0x33622441,0xacd882da,0xdacd882d,0x59b11c42,0x221d885b,
    0x44e5c2dc,0x221d80a9,0xcd883ade,0x441302da,0x11f43ade,0x7c436a7d,
    0x3e21b51f,0x3e21b51f,0x3e21b51f,0x3e21b51f,0xd77fd11f,0x3aeffa27,
    0x0623fd13,0x00c4154c,0x800080c4,0x06201009,0x00100000,0x18804002,
    0x04c02010,0x10100330,0x04000200,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x200aa000,0x1006201c,0x22220002,0x64080ea0,0x02103221,
    0x081440c6,0x07701981,0x000330a6,0x26021033,0x02602101,0x42042039,
    0x0a203500,0x811000e4,0x11060441,0x01801818,0x412602c4,0xf03d9bc9,
    0x20ee03f3,0x39b15bdb,0x66c498a0,0x7107cfc4,0x3f20f216,0x6cc3440e,
    0x3441e80d,0x2f60eab8,0x4416c46b,0xf83d5d06,0x3f2172e4,0x20f5740e,
    0x70790289,0xc893a0b9,0x20f88e64,0x3983e229,0x220ef2e2,0x999886ac,
    0x44666219,0x1f897a09,0x40666662,0x5199883b,0x4c450533,0xa800c219,
    0x21018489,0x40c30100,0x96981101,0x83e67e23,0x0011069a,0x204463e8,
    0x03500010,0xa8088c06,0x1d091ec1,0x4483a122,0x1b7053db,0x36a7fa0d,
    0x30d8ff31,0x7f44f87f,0x02b81da9,0x507f41fd,0x707f45d7,0x2e4ab895,
    0x5910ddce,0x40dab83d,0x32bea4ab,0xc892ae0f,0x221ee1ea,0x75543c9f,
    0x2e06d5c4,0xc896c0da,0x3ab221ea,0x887ab221,0x6d5c1eac,0x0406d5c0,
    0x0e81bac2,0x06e1d019,0x3ee01ff3,0x5f60988b,0x4cbee188,0x8fd0bee1,
    0xbd03117d,0xf8fb1f60,0x699f62ca,0xb0eda63b,0x47f6982e,0xdb4cb979,
    0x21f55f11,0x7da63b69,0xf8847e63,0x32f50f89,0xf32e5e66,0x5a617172,
    0x31fda63f,0x7f698fed,0x5e65cbcc,0x44d4485c,0x4c545138,0x222a0b8a,
    0x0ffd4513,0x21d5beea,0x1dba077d,0x44f893e6,0x3f2a077d,0x33ec7d81,
    0x7dcfb09f,0x355f71aa,0x983bfbf2,0x3ddee4fb,0x3e2355f7,0x55f70faa,
    0x3227dcc3,0x3e3f10cf,0x7b9f2f72,0x47bbdcf7,0x2627dcc1,0x27dcc4fb,
    0x77b93ee6,0x6c7bbdcf,0x483d9203,0x1ec90795,0xf5799bae,0x099fb079,
    0x9ba037ea,0x267ec1fa,0x7d85f8b8,0x829f13ec,0xa847ea7d,0x22ce211f,
    0xcbcc9d79,0xf8847ea5,0x23f50faa,0x3213af30,0x4be2be20,0xcbccb97a,
    0x2a2e5e65,0x7993af30,0x24ebcc9d,0xcbcc9d79,0xf32e5e65,0x971b8953,
    0x702e0c89,0x9b9532e3,0xa7e4bee6,0xbf015f60,0x40ed6640,0xd593057d,
    0x3ec7d81f,0x47d877f2,0x527e44fc,0xdbfa8913,0x320e5645,0x17e6f44f,
    0x6dfd49f9,0x5f506c45,0x41dad89b,0x65641cac,0xdbfa9f41,0xa976fea5,
    0x2fea5dbf,0x20e5645d,0x567c1cac,0x24ca8e22,0x388f6e29,0x5e65532a,
    0x32f7f622,0x071f60ef,0x03fa80bf,0xf98e38fb,0x51f63ec4,0x4000fb01,
    0x00000020,0x00000004,0x00000040,0x00000000,0x81813000,0x41330608,
    0x101c0881,0x5dff4408,0x00f7cc3e,0xfe88736a,0x21b53ebb,0x3fd11ff8,
    0x40c47fa2,0x00001fe8,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x02606000,0x881500a2,0x21880999,
    0x0c044441,0x3104c430,0x4c042a01,0x20303100,0x40201998,0x43333018,
    0x21333198,0x81098809,0x31008809,0x13119988,0x00c40980,0x000100cc,
    0x31099880,0xd80cc001,0x03b02469,0x21fdc166,0x40dc9be8,0x6cec4ccc,
    0x47fa2480,0x545e4458,0x307fec3d,0x82437337,0x0bb85ffc,0x30dccdcc,
    0xafd4ffff,0xd882e5f9,0x2361ea9c,0x30f27a2f,0x227e8797,0xe8e89fc5,
    0xf5007e61,0x1dc5e4c1,0x5c2fab62,0x17e65ddf,0x06e5dc1b,0x7c41d53b,
    0x180191f8,0x117d4030,0x800fd4bd,0x4398b979,0x5d850ffb,0x4be211cc,
    0x1a9bcbb8,0x81337035,0x9a8b884c,0x953551ab,0x429fa7e8,0xd698d45e,
    0xb1aa3eab,0x1c6e8539,0x25db5c2a,0x07cc01f8,0xf70fc49d,0xf9af9936,
    0x26283f62,0x1d30fa8f,0x26f3d02a,0x1f95f503,0x503f2bea,0xa9a7d45f,
    0x3f2bea4f,0x171b2f70,0x4455faa8,0x94d3003f,0x0e275acb,0xcf885bf3,
    0x0e31e943,0x365f706e,0x0fe628af,0x77c47e20,0x207ba21d,0x7b861c6e,
    0x2ee7c4f9,0x7cc3f736,0x36f327c3,0x31fc7e63,0x26f70a7f,0x205ff30f,
    0x82a69098,0xf10faaf8,0x2fa81f55,0x3f4a2bee,0x321f55f1,0x72848f97,
    0x017dc59f,0xb739ff44,0x64c48e1d,0x3a3ea3fe,0x20e1e2e5,0xf99df886,
    0x4017dc2d,0x70ffdc1a,0x38dd09fd,0x6dbf985c,0x54be27e2,0x0bee1f57,
    0x4c1ab8fd,0xb742f89f,0x07cc7d42,0x6401bff5,0x3e259e88,0x55f10faa,
    0x517d421f,0xf12fc77f,0x65ee1f55,0xfd8a0e26,0xcfb8fea4,0x97155e80,
    0x900b8e79,0x2a7cbdcd,0x930e11e8,0x1fe4ff20,0x30200fea,0x06a8df3d,
    0x116c38db,0xf8fc47d5,0x4c3e6f73,0x9d327c4f,0x2e6fcc37,0x362067dc,
    0x32230fcc,0x3aa7302f,0x3eabe279,0x21f55f10,0x3741facd,0x557c45f3,
    0xb932f30f,0x3a274281,0x2e08fe65,0x79177712,0x2c111c41,0x5c4d71f3,
    0x1b8171a8,0x07e65f30,0x417011ba,0x764cd95b,0xd0a3e439,0x4fc45a87,
    0xf51f51f8,0x45f33741,0xf30feee8,0x2027c013,0x16c370f9,0xd12ba248,
    0x66f45f9b,0x70bb752f,0xbd05b57b,0x06d645f9,0x2441d309,0x87ae7362,
    0x5dc42aec,0x3ea480bb,0x0e6640ac,0x202eeee2,0x44162c06,0x7cc2badd,
    0xb8727621,0x6f444fdc,0x7514f83a,0x44979d10,0x3622fddc,0x45dc2dac,
    0x900be658,0xb51fa801,0x20220937,0x10040100,0x00400820,0x20000101,
    0x10000201,0x40000800,0x00800000,0x02008000,0x00400098,0x0d440100,
    0x20000aa6,0x000042aa,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x26200000,0x01331009,0x1309986a,
    0x40026620,0x20999998,0x310d8bfc,0x88203333,0xc8802621,0x801310c0,
    0x3f30c408,0x130310f5,0x0000ccc4,0x44ccc453,0x86662199,0x4cccc410,
    0x99981081,0x42662099,0x21331098,0x33331099,0x02666213,0x26202662,
    0xbb5fd019,0x96607e81,0x1f4191fb,0x9009b5dd,0x4f8b73bf,0x1da9fe85,
    0x31f98fee,0x1266405f,0xd00be63f,0xf98f5dc5,0x742d87a9,0x36bba0ff,
    0x3b02b80e,0x85f90fe8,0x83e7e0fe,0x2e1d99fe,0x267a22ee,0xb1fe61fe,
    0x1dc3fe21,0x4b59f579,0x741ec9ee,0x07f43eaf,0xfb1ba7d8,0x7c430157,
    0x9ba1b853,0x57e6605f,0x6c17dc28,0x23f83117,0x405f11f8,0x0be20831,
    0x30fa2fb8,0xdfb8f53f,0x6c7f3131,0x0bd05f56,0x1fb9f606,0x17d803ec,
    0x84c08431,0x32fb84fa,0x1875fa83,0x26e867f3,0x0fcbec5f,0x367d81f6,
    0x236db60f,0x027b61fb,0x807ecdd0,0xf1051bf3,0x7c0efb09,0x57c47e23,
    0x70fdc1e8,0x1b73e23f,0x3bea5f35,0x83ea7e60,0x6c3f02f8,0xfca81d96,
    0x9f60fdc1,0x2e3ec1fb,0x543bec1f,0x6f886ddf,0xfc81dba0,0x3a0fe604,
    0x97d87f16,0xfd507d8f,0xb6c5f735,0x4c7e20fc,0x86e09cfb,0x2e0bf26e,
    0x902defab,0x2099fb03,0x7c47e23f,0x21f880ba,0xf55f11f8,0xf8be2a21,
    0x1fe6fcc3,0xd8b505f1,0x45c0becf,0x360fc45f,0x6c1feccf,0x3f60fc47,
    0x7d57c46c,0xf5017e40,0x03fe201b,0x67f41fcc,0x0cbfd84f,0x6cdb03ec,
    0x17a3b61f,0x33e663f1,0x374bf109,0x3e1881fb,0x36050855,0xf88fe057,
    0x103fbf11,0xf88fc43f,0xfddb0f9a,0x80aa1fcd,0x6c0c82f8,0x564c9f16,
    0xb07e20fe,0x1f60fdcf,0x877d83f1,0x260f9af8,0x02fc025f,0x3e60bf73,
    0x86f8ee83,0x411f607d,0x5fb17e6d,0x2ea3f103,0xdd1c0adf,0x97e1c2fc,
    0x36039919,0xf88fe1c7,0x10db5f11,0xf88fc43f,0xf7530f9a,0x012e1fc9,
    0x1d5e417d,0x2393e2db,0xb07e24f9,0x1f60fdcf,0x107d83f1,0x7f41f35f,
    0x982fc120,0x7f305f92,0xb0feadd0,0x44e3ec0f,0x7444dbfe,0x547f501f,
    0xff30c0df,0x4c9907b7,0x310fbaef,0x3aeffa20,0x7d437ea3,0x89f39f33,
    0x4cfea3fa,0x7c42fbcf,0x0088bf12,0x8a7ffd40,0xb50bcbfe,0x7d47fe21,
    0x3627fa23,0xa87fa23f,0x207fa23f,0xf72fbcf9,0xf30db75b,0xf31ea83d,
    0x20cfb83f,0x25fb1ff8,0xfe881fe8,0x00004dab,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x40cc4000,
    0x42662198,0x00000198,0x00000220,0x26666200,0x00620001,0x5c000000,
    0x9800c8af,0x3f70fb9f,0x2aa553f7,0x40c042fb,0x4c2e482a,0x86042acf,
    0x81ce2041,0x44144540,0x110260c1,0x7fc45fd0,0x83d07f40,0x255c0dab,
    0x212b3aae,0x20eab81a,0x75643dab,0x404ef221,0x0fa4b880,0x981cb853,
    0x26daedcf,0x9f33ebf9,0x6453f8bb,0x3f10dcdc,0x2afe21f3,0x437422af,
    0x4007e20d,0x17e43bc9,0x7aaf83a2,0x3a8d8ee2,0x1dac45b8,0xa654ef26,
    0x216aa69b,0x21f6a6ea,0x7981717d,0x31db44b9,0x2a0f576d,0xf11cb4c1,
    0x47d699b6,0x410119eb,0x20dc1cc9,0x42db8829,0x0f9af8bf,0x9af8233e,
    0x750bee0f,0xf99f8922,0x0b767b20,0x6674c3f5,0x666643e4,0x7c43644c,
    0x267a0e83,0xf8dc9e46,0x3615e440,0x52c3279b,0xd9c9aa65,0xda8fdd40,
    0x7048fd87,0xaafb9eef,0x2abb6e60,0x299bb990,0x7bafb87b,0xfd11f5cc,
    0x0f642025,0x2676e5c0,0xf15f2ec4,0x41fc1f33,0x3e20f9af,0x7c4b05c3,
    0x27e60faa,0x0d3e20fa,0x08848773,0x64449bb8,0x1c90740f,0x43b8d961,
    0x646c4b0c,0x644ef262,0x15449572,0x7d96fc54,0x981fefd8,0x08fd4b97,
    0x5409f2f1,0x3ea0fcc1,0x1f5e66b8,0x8202bb13,0x20dc2dc8,0x41cc9829,
    0x0f99f8af,0x3e6be0be,0x4d2606c0,0x217e6f44,0x797f9165,0x30105c5c,
    0xd984c503,0x086e25f9,0x4e209a82,0x22a13143,0x2ea08828,0x3f250002,
    0xf1fb0fb3,0x8395901f,0x2b3ea3fc,0x332aa4ee,0x4c33f22a,0x2fe61dbd,
    0x04aeea5d,0x0fa5a804,0x980bc853,0x2fbbfacf,0xbbf989f3,0xcdbb802f,
    0x00000004,0x00000000,0x00000000,0xf3280000,0x4df61f61,0x8100006f,
    0x0cccccc0,0x41000080,0x00199999,0x00000220,0x00000000,0x00000000,
    0x00000000,0x00000000,0x8a436600,0x47fa21fe,0x00000dfd,0x00000000,
    0x00000000,0x4711c400,0xbbbb90a8,0x4c110a2b,0x9bb90422,0xaaaaa8b9,
    0x42aaaaa1,0x00030bc8,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x3ee37000,0x10ee1f51,0x43ea1111,0x21d11ffd,0x31202dad,
    0x55413333,0xb5150aaa,0x0000005b,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x41805457,0x024ccccb,0x40008811,0x00000003,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x0c400000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__times_bold_12_latin1_x[224]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__times_bold_12_latin1_y[224]={ 9,1,1,1,1,1,1,1,1,1,1,2,7,5,
7,1,1,1,1,1,1,1,1,1,1,1,3,3,2,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,2,4,4,4,4,4,4,1,1,1,5,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,9,3,1,1,2,1,
1,1,1,1,1,4,4,5,1,0,1,2,1,1,1,4,1,4,8,1,1,4,1,1,1,3,-1,-1,-1,-1,
-1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,3,1,-1,-1,-1,-1,-1,1,1,1,1,
1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,1,1,1,1,1,1,
 };
static unsigned short stb__times_bold_12_latin1_w[224]={ 0,3,6,6,6,11,9,3,4,4,5,6,3,4,
3,4,6,5,5,5,5,6,6,6,6,6,3,3,6,6,6,5,10,8,7,8,8,7,7,9,9,4,6,9,
7,11,8,9,7,9,8,6,7,8,8,11,8,8,8,3,4,3,6,7,3,6,6,5,6,5,5,6,6,3,
4,7,3,9,6,6,6,6,5,4,4,6,6,8,6,6,5,4,2,4,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,3,5,6,6,6,
2,5,4,8,4,6,7,4,8,7,4,6,3,3,3,7,6,3,3,3,4,6,8,8,8,5,8,8,8,8,
8,8,12,8,7,7,7,7,4,4,4,4,8,8,9,9,9,9,9,6,9,8,8,8,8,8,7,6,6,6,
6,6,6,6,8,5,5,5,5,5,4,4,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
 };
static unsigned short stb__times_bold_12_latin1_h[224]={ 0,9,5,9,9,9,9,5,11,11,5,7,4,3,
3,9,9,8,8,9,8,9,9,9,9,9,7,8,7,3,7,9,11,8,8,9,8,8,8,9,8,8,9,8,
8,8,9,9,8,10,8,9,8,9,9,9,8,8,8,10,9,10,5,2,3,7,9,7,9,7,8,9,8,8,
11,8,8,6,6,7,9,9,6,7,8,6,6,6,5,8,5,11,11,11,2,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,9,10,9,6,8,
11,11,3,9,4,5,3,3,9,2,5,7,5,5,3,8,11,3,4,5,4,5,9,9,9,9,10,10,10,10,
10,10,8,11,10,10,10,10,10,10,10,10,8,11,11,11,11,11,11,5,9,11,11,11,11,10,8,9,9,9,
9,9,9,9,7,9,9,9,9,9,8,8,8,8,9,8,9,9,9,9,9,5,7,9,9,9,9,11,11,11,
 };
static unsigned short stb__times_bold_12_latin1_s[224]={ 255,159,203,78,238,1,245,174,167,38,168,
95,113,136,117,58,51,71,131,82,106,102,109,125,159,186,91,30,84,125,102,
153,132,145,137,144,34,63,180,72,159,169,27,13,247,1,63,207,239,18,230,
247,222,173,231,132,213,204,195,181,97,185,221,166,141,65,193,52,200,30,112,
217,99,95,127,81,77,109,125,23,224,240,119,72,126,146,132,153,192,56,162,
143,109,122,174,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,
77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,255,182,55,
166,139,23,58,43,145,116,244,214,150,136,88,158,235,45,240,210,121,118,22,
132,109,199,249,228,229,220,211,205,189,198,207,216,225,36,43,61,1,234,242,
28,250,61,50,45,1,70,79,89,99,112,157,185,34,29,172,148,49,9,10,
131,118,85,163,170,177,184,36,125,99,112,66,72,18,154,89,174,138,188,145,
191,198,92,152,178,58,13,20,105,44,15,8,1, };
static unsigned short stb__times_bold_12_latin1_t[224]={ 1,13,43,13,13,24,13,43,1,1,43,
43,50,50,50,24,24,34,34,24,34,24,24,24,24,24,43,34,43,50,43,
24,1,34,34,24,34,34,34,24,34,34,24,43,34,43,24,24,34,13,34,
24,34,24,24,24,34,34,34,1,24,1,43,50,50,43,24,43,24,43,34,
24,34,34,1,34,34,43,43,43,24,24,43,43,34,43,43,43,43,34,43,
1,1,1,50,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,1,24,13,
24,43,34,1,1,50,24,43,43,50,50,24,50,43,43,43,43,50,34,1,
50,50,43,43,43,13,13,13,13,1,1,1,1,1,13,34,1,13,1,1,
13,1,13,13,13,34,1,1,1,1,1,1,43,24,1,1,1,1,13,34,
13,13,13,13,13,13,13,43,13,13,13,13,13,34,34,34,34,13,34,13,
13,13,13,13,43,43,24,24,13,24,1,1,1, };
static unsigned short stb__times_bold_12_latin1_a[224]={ 43,58,96,87,87,173,144,48,
58,58,87,99,43,58,43,48,87,87,87,87,87,87,87,87,
87,87,58,58,99,99,99,87,161,125,116,125,125,116,106,135,
135,67,87,135,116,164,125,135,106,135,125,96,116,125,125,173,
125,125,116,58,48,58,101,87,58,87,96,77,96,77,58,87,
96,48,58,96,48,144,96,87,96,96,77,67,58,96,87,125,
87,87,77,68,38,68,90,135,135,135,135,135,135,135,135,135,
135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,
135,135,135,135,135,135,135,135,43,58,87,87,87,87,38,87,
58,130,52,87,99,58,130,87,69,95,52,52,58,100,94,43,
58,52,57,87,130,130,130,87,125,125,125,125,125,125,173,125,
116,116,116,116,67,67,67,67,125,125,135,135,135,135,135,99,
135,125,125,125,125,125,106,96,87,87,87,87,87,87,125,77,
77,77,77,77,48,48,48,48,87,96,87,87,87,87,87,95,
87,96,96,96,96,87,96,87, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_12_latin1_BITMAP_HEIGHT or STB_FONT_times_bold_12_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_12_latin1(stb_fontchar font[STB_FONT_times_bold_12_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_12_latin1_BITMAP_HEIGHT][STB_FONT_times_bold_12_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_12_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_12_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_12_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_12_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_12_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_12_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_12_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_12_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_12_latin1_s[i] + stb__times_bold_12_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_12_latin1_t[i] + stb__times_bold_12_latin1_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_12_latin1_x[i];
            font[i].y0 = stb__times_bold_12_latin1_y[i];
            font[i].x1 = stb__times_bold_12_latin1_x[i] + stb__times_bold_12_latin1_w[i];
            font[i].y1 = stb__times_bold_12_latin1_y[i] + stb__times_bold_12_latin1_h[i];
            font[i].advance_int = (stb__times_bold_12_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_12_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_12_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_12_latin1_s[i] + stb__times_bold_12_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_12_latin1_t[i] + stb__times_bold_12_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_12_latin1_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_12_latin1_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_12_latin1_x[i] + stb__times_bold_12_latin1_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_12_latin1_y[i] + stb__times_bold_12_latin1_h[i] + 0.5f;
            font[i].advance = stb__times_bold_12_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_12_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_12_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_12_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_12_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_12_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_12_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_12_latin1_LINE_SPACING
#endif

