// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_16_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_16_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_16_latin1_BITMAP_WIDTH         256
#define STB_FONT_courier_16_latin1_BITMAP_HEIGHT         70
#define STB_FONT_courier_16_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_16_latin1_FIRST_CHAR            32
#define STB_FONT_courier_16_latin1_NUM_CHARS            224

#define STB_FONT_courier_16_latin1_LINE_SPACING           8

static unsigned int stb__courier_16_latin1_pixels[]={
    0x00000000,0x188c4000,0x00000254,0x20850006,0x00812600,0x00000000,
    0x0082c008,0x80000072,0x00000110,0x08000310,0x01540281,0x80488019,
    0x4407300c,0x40070532,0x0903200c,0x642e1c40,0x40c8ab80,0x7303bcba,
    0x71015400,0xbbbbb807,0x88488382,0x0dc03a8c,0x53398370,0x07200e40,
    0x0c805170,0x20391290,0x8064402b,0x400c8048,0x08e00049,0x87201c80,
    0x00170029,0x20044000,0x403a8049,0x702e0399,0x99577005,0x40390010,
    0x5c00201c,0x7700dc01,0x29006401,0x00002444,0x04000020,0x8b911dc8,
    0x002dbdab,0x24802400,0x27d71ce8,0x47d71ce8,0x0003dbc9,0x38026000,
    0x93332a10,0x7b7930c4,0x79300000,0x0800807b,0x20080080,0x3a21b094,
    0x3a27d71c,0x64c7d71c,0x88ee43db,0x1ede4c5c,0x89702e24,0x999bb11b,
    0x33b3221d,0x81700a63,0x11c24384,0x764c1b87,0x817b2605,0x07105ec9,
    0x22032480,0x9bb10dc3,0x33221d99,0x1b8713ce,0x441cbcb8,0x6440bbbb,
    0x979704bb,0x16d6d443,0x24384872,0x41b8711c,0xb87105c4,0x370905c1,
    0x170a6388,0x09012070,0x23848709,0x3390580b,0x64019c80,0x40038819,
    0x0b85e544,0x02e14c58,0xa8b0170e,0x0902e241,0x120d4288,0x48ae0e32,
    0x171c2438,0x7120b8b0,0x02e90b01,0x94c530ae,0x0d40e011,0x438481a8,
    0x42412384,0x494c0929,0x06824a60,0x09488240,0x80465312,0x42448243,
    0x2aaab61a,0x1e65cc0c,0x64c46a12,0x090e40ba,0x41238487,0x04817484,
    0x2e093709,0xac98910c,0x20901c05,0x84870904,0x71c24123,0x700b8e01,
    0x2615405c,0x2906a902,0x5ac98904,0x224121c0,0x26721984,0x42ae0999,
    0x88cc2438,0x06c0baba,0x23848709,0x09370904,0x80741209,0xb9817953,
    0x3501c049,0x381702a8,0x80b8e05c,0x02a99c85,0x32055339,0x7b702a99,
    0xbcaa4079,0x8b0171cb,0x21c049b9,0x20d4580b,0x890405c4,0x3120d43a,
    0x5c588335,0x4702e1c0,0x01d0580b,0x8120b017,0x0c429803,0x4091201c,
    0x70e61c39,0x7506e1c4,0x57509555,0x55750955,0x48048095,0x370e2244,
    0x1c0c4298,0x970370e2,0x75770397,0x5555d419,0x0e5e5c2d,0x83706a66,
    0x70e61c39,0x2406e1c4,0x5c0dc388,0x0a600e00,0x0b807051,0xbbcb8053,
    0x40bbcb80,0x8482dbc9,0x2054240a,0x37300a84,0x4c1c15c0,0x42982dbc,
    0xbc983828,0x0c00402d,0x98040020,0xcb81c0a9,0xbbcb80bb,0x816de4c0,
    0x36f2600b,0xa82665c2,0x9bb302cc,0x33265b99,0x400003ce,0x80400800,
    0x477264eb,0x477264eb,0x077264eb,0x0b32a062,0x36601004,0x932dcccd,
    0x001079d9,0x00000000,0x20020000,0xccb80400,0x00000804,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x0dc00000,0x00221000,0x824c0000,0x00040618,0x2e0100b8,0x4a80821c,
    0x0664a218,0x00b20082,0x04c26001,0x4c28a008,0x37000004,0x00000053,
    0x20000000,0x4065c01c,0x1c805339,0x15700c80,0x50e0c819,0x36e01979,
    0xccbc8380,0x321714c1,0x38322ae0,0x32170492,0x81d46440,0x2a03bcba,
    0xbbca8170,0x59871c1c,0x05b103a8,0x1ee2e64c,0x0190032e,0x032e00e4,
    0x20040190,0x0000191b,0x00064037,0x8351c588,0x48191b84,0x0014c040,
    0x002491c0,0x20010000,0x00dc2980,0x30298b30,0x53040ea7,0x0646e0c4,
    0x01b800c8,0x06403237,0x05d326c4,0x02f64c02,0x37620000,0x8570eccc,
    0x00066123,0x7d71f549,0xcecc894c,0x479d9913,0x6ec44923,0x3260eccc,
    0x17b2605e,0x20bbbb88,0xc896c403,0x00001225,0x4013332a,0x00800800,
    0x92008008,0x5dddc429,0xb1033900,0x2d897225,0x5c298b91,0x071183b0,
    0x5c896c4e,0x43832e24,0x20e03829,0x42984923,0x4019c80b,0x4817019c,
    0x490a6012,0xc8266448,0x7443704c,0x4bbc88e0,0x884bbc88,0x79704bbc,
    0xbbbb8839,0x17092980,0x20929848,0x90a62429,0x0d823298,0x298e0710,
    0x48b92e24,0x4070530e,0x4245b383,0x4a602329,0xd824a604,0x530caaaa,
    0x890a6188,0x90480903,0x88122570,0x22014402,0x17120d42,0xb0199048,
    0x38195555,0x890a602e,0x2b262429,0x090c0d85,0x91214c33,0x530e5538,
    0x91c1c070,0x02d64c24,0x2e3805c7,0x99999c80,0x30eeb2e0,0x80900485,
    0x22150704,0x41e65cc4,0xb983ccb9,0x0d4243cc,0x0195555b,0x26672091,
    0x54ce4099,0x26242982,0x126e6242,0x10dc70ae,0x12242989,0x414c3a47,
    0x248e0e03,0x2049b984,0x3902a99c,0x10170553,0x598e2090,0x82404804,
    0x5cb31c0a,0x0ab8710a,0x710ab871,0x27219848,0x07009999,0xaba8202e,
    0x263884aa,0x98b31c45,0x1c488c42,0x71032f6a,0x447122cc,0x01c14c3b,
    0x30924707,0x2aea1885,0xaaba84aa,0x9757704a,0x7900b981,0x41ee5b79,
    0xbb882404,0x449661ba,0x90ea243a,0x120d43a8,0x80e01017,0x120cbabb,
    0x2f2f202a,0x6de5e42d,0x6c510a62,0x215b10e0,0x16de5e41,0x2625c389,
    0x8e0e0382,0x510a6124,0x21205424,0x0880600a,0x65410040,0x9950ccec,
    0x2020199d,0x2aaaea38,0x2aaaea2d,0x2aaaea2d,0x0e5e5c2d,0x2065d5dc,
    0x0601cecb,0x1dc993ae,0xb3008008,0x445b999b,0x975570a2,0x98320103,
    0x1cc9a1ce,0x2679d993,0x98a3cecc,0x376619b3,0x9d72dccc,0x4eb8ee4c,
    0x00007726,0x00000000,0x08008000,0x00100080,0x00000003,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x8a000000,0x40180102,0x035502b8,0x0c001410,0xb9859710,0xb980202c,
    0x33320bbb,0x2199701c,0x083cccca,0xcb82cb88,0x03100402,0x0080f2e2,
    0xb8010008,0x100103aa,0x00020000,0x838e0eb8,0x995704f9,0x98731903,
    0x65e54051,0x5701262c,0x351c8399,0x644298a2,0x2973d9bb,0x6c02409a,
    0x83848283,0x550c86a4,0x41babb88,0x51c1cabc,0x2bbbbb83,0x406eaee2,
    0x1c2cbabb,0x07b7930a,0x950b7777,0x2baa19d9,0x5dc42dbd,0x1d70cbab,
    0x20054010,0x261c5300,0x6986a051,0x70080498,0xa8712048,0x2409a965,
    0x14c00ae0,0x2490e21c,0x22355712,0x10c490a2,0x38ae05c7,0x1b851133,
    0x4402e154,0x58530dc3,0x712e0e20,0x80f105c3,0x4004bbc8,0xa984bbc8,
    0x31aa81c8,0x03391241,0x21cbcb80,0x0dc42419,0x351d960e,0x581cbc81,
    0x65417001,0x154323cb,0x2222a589,0x15240728,0x21038f2e,0x90e7098a,
    0x70373700,0x02144b01,0x441b8388,0x100120e3,0x0a200705,0x30195153,
    0x191c4157,0x3504cc92,0x98902a48,0x12c4485c,0x0a813779,0x2cbcc875,
    0x26287120,0xcb8e45df,0x4ca6a270,0x2a716441,0x2700e271,0x00711982,
    0x20905cc7,0x20055d44,0x14c2b838,0x4c498d09,0x01dc3ccb,0x29879973,
    0x83115324,0x241c3738,0x8351a848,0x21b89104,0x8013505b,0x22090f44,
    0x50c806a3,0x70c9cb87,0x20cc2aa2,0x44e15385,0x19829c03,0x21e65471,
    0x48242e1b,0x220c7710,0x8910cb83,0x1f91aa2a,0x191c42ae,0x438855c0,
    0x44cc1c29,0x03314dc2,0x4c661209,0x930901c2,0x004d4125,0xb80a8912,
    0x20cc0e20,0x088a9a04,0x42e060e5,0x1501a4cb,0x0b0e7153,0x51173053,
    0xb809602e,0x53838890,0x17930179,0x8ea24107,0x87512044,0x450718a9,
    0x241225c2,0x992241a8,0x09007011,0x1c09826a,0x5090482e,0x88e25759,
    0x19b85703,0x0aa060aa,0x2714c2a8,0x41c85318,0x388b2029,0x2481b0dc,
    0x001c0544,0x555d4038,0x22c572da,0x32daaaba,0x220af2bb,0x5e5e41ab,
    0x65c0900c,0x25e541cb,0x801979b3,0x4413502a,0xbc80cbcd,0x1220702b,
    0xcb832f2a,0xbaba882e,0x0d81fc81,0x3cbdb811,0x80dd5d44,0x0a1cbbdb,
    0x2dbc9815,0x3165dde4,0x00e07779,0x200801c0,0x00101cba,0x08260004,
    0x0ccecca8,0x11008010,0x4c1664c0,0x0080b9ba,0x40700004,0x01000880,
    0x199b1008,0x40020060,0x2baaa809,0x08020020,0x400b32a0,0x0000ccc8,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x54000000,0x00002544,0xa8261300,0x03118804,0x003ba80c,
    0x00c00000,0xa8000400,0x911dc804,0x5c896c4b,0x26666662,0x12a0b321,
    0x441d4000,0x2a00001c,0x000001cc,0x44038380,0x1c7d71ce,0x1c0b8540,
    0x70299440,0x03303995,0x6ccedc88,0x06666744,0x199d5070,0xb112f260,
    0x007174c9,0x42981712,0x03818064,0xccceb807,0x29814c5c,0x33337620,
    0xdc80d40e,0x52dd883d,0x20e0805f,0x21c24023,0x81c02003,0x4c020003,
    0x26a05c0c,0x0910e0e4,0x01aac81c,0x214c9009,0x905c1503,0x80648530,
    0x90070381,0x094c0090,0x240b8530,0x229806a0,0x6666400c,0x2cbd9b83,
    0x99d91c24,0x39797039,0x32064c38,0xb799b04c,0x07265103,0x83818a4e,
    0x2726660a,0x32a67209,0x494c01c0,0xa40e4438,0x3242980b,0x2381c0c0,
    0x823241de,0x799303cc,0x8232983b,0xa83ccec8,0x0322a601,0x5c3c4190,
    0x870905c5,0xa920d403,0x02abc8ac,0x54912609,0x838bb8aa,0x5b507794,
    0xaaa8a615,0x71120aad,0x32015ed4,0x5c56540c,0x049b838b,0x4032cc73,
    0x0ae70381,0x0701dd64,0xac989126,0x03501205,0x24016dcc,0x8e20dc2c,
    0x1201c384,0x2319506a,0x85304828,0x8770c984,0x910549c8,0x03814c33,
    0x014c3889,0x2606b6aa,0x03a0771c,0x96de5f4c,0x5c0e0601,0x0e67202d,
    0x44853038,0x012049b9,0x5d660835,0x5c2c2403,0x38171c41,0x8661201c,
    0x0480a82b,0x51dc4853,0x4499a873,0x3805c1c0,0x81b53390,0x56d54019,
    0x07331d41,0x300a9812,0x8b81c0c0,0x0e00901c,0x8531214c,0x06a02418,
    0x401714c9,0x12e1e20c,0x70e1cc17,0x0120d401,0x2982402e,0x836b2024,
    0x21c29924,0x56406048,0x0c41701a,0x1b590038,0x80a600b8,0x1c0e0601,
    0x0e009019,0x8531214c,0x06a02428,0x880e14c9,0x50cccccd,0x70597b5d,
    0xac881779,0x65e5c1cb,0xa955ec01,0xb10ccecc,0x300baa3b,0x3ae7ae1b,
    0x33a62dcc,0xcccc83cc,0x199d51cc,0x19999d70,0x1004eca8,0x81332e1b,
    0x26666018,0xd9952999,0xea9aa199,0x50333ae4,0x22199d99,0x267d70dd,
    0x32dcccdd,0xdc8599d9,0xbb34cccd,0x02202647,0x20040040,0x00004008,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x99300000,0x2602b883,0x00000003,
    0x35100000,0x00000000,0x06080000,0x04008001,0x20020040,0x80400380,
    0xb99b30eb,0x2e549b59,0x2e79d991,0x5437663e,0xea86ec2e,0x524cfae3,
    0xc80e6e63,0x982f64c4,0x3625cccd,0x26c4ba64,0xb8ee45d3,0x10a7221e,
    0xe83999bb,0xd73ccecc,0x6ec45999,0x67540ccc,0xcbcb83cc,0x3276f21d,
    0x2a07101b,0x3221cbbc,0xbbcb84bb,0x05dddc44,0xbcb80591,0x18875c1c,
    0x81c42392,0x640b8483,0x1970ee64,0x0709031c,0x0ce4122e,0x4903714c,
    0x85324429,0x80a62429,0x13922429,0x2986e1c7,0xa8a62424,0x93c41721,
    0x0dc29800,0x0e1c4510,0x1c984817,0x900241a8,0x0535ba41,0x9090660e,
    0x170e3235,0x707101c9,0x4a612710,0x20730884,0x22e60929,0x24242984,
    0x71c38530,0x264838a2,0x92424242,0x99514ce4,0xaaa8955b,0x20070aaa,
    0x65c3ccb9,0xaaaad81b,0x2419500c,0x205c00d4,0x20331594,0xa414c903,
    0x5538738c,0x8382440e,0x00b8e124,0x40199012,0x5559305a,0x9892cb89,
    0x0e00dbac,0x3373241c,0x21c89057,0x0e4a6394,0x9998333b,0x70090999,
    0x5440e215,0x4cccce44,0x42419500,0x2a89f119,0x0ab8ca4a,0x81c2e070,
    0x470e1974,0x1c091074,0x99c848a6,0x8801902a,0x4c066404,0x2b271242,
    0x64ccdcc2,0x920e0700,0x5902cac9,0x21cb8195,0x00279924,0x12188530,
    0x71205c75,0x81c98101,0x98d5241a,0x5375ccce,0x710380f2,0x0e38a412,
    0x1221dc47,0xeccca870,0x12aaaea2,0x80e038aa,0x4853092a,0x14c344e2,
    0x9070381c,0x0903714c,0x21cbbcb8,0x4ccdcbc9,0x2b2e0930,0x5555d43b,
    0x5975772d,0x21975770,0x5e5c02c9,0xb800b21c,0x203812e4,0x0e0901ac,
    0x11264b87,0x42448070,0x4071220a,0x22447103,0x32ee2429,0x0e214c4c,
    0x305c381c,0x22048485,0x00408021,0x00801002,0x02818008,0x2000c040,
    0x9931665a,0x20b5079d,0x47b264eb,0xcd9a1ce9,0xd9935ccc,0x2e5d9079,
    0x5c77264e,0xcb86cccc,0xa93a61ce,0x2e3bb14e,0xdd98043e,0xecb83ccc,
    0x3333ae1c,0xd88f7661,0x00199d50,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x51000000,0x08000060,0x17222e98,0xb912d880,0x2245cd54,
    0x243d70dc,0x4c081017,0xe9818912,0x8109d70c,0xa88d5c40,0x5555531a,
    0x92a00015,0x5c55c2a8,0x55555101,0x02880035,0x4c9300c4,0x130aaaaa,
    0xccccc986,0x770003cc,0x2f6e0e01,0x6640ccbc,0x189c1dbc,0x64de4c35,
    0xd870a22b,0x91b81c8a,0x83b0d881,0x8ad4191c,0x42981c0d,0x99b14f84,
    0x266704e0,0x733a9999,0x715dcc57,0x7f3f870f,0x2666661c,0x06399109,
    0x361b86f2,0x87e4320f,0x50aaaaa9,0x000002a1,0x40e00654,0x1221c565,
    0x40eb5389,0x4385103e,0x065c0e23,0x41e88e98,0x74d6a0cc,0x032f6ee0,
    0x43ea0d49,0x42c8890b,0x7513800a,0x1aa151c9,0x4cbe5d0e,0x2666660b,
    0x2165c319,0x98dc190b,0x000102e3,0x2eeeeee0,0x1c9801bb,0x2ab6aaa0,
    0x510e38e0,0x4d5ccc38,0x21440903,0x32053243,0xd11d301b,0x56e1cc83,
    0x817440e9,0x4c99091a,0x05c705ac,0x39219380,0x21c2cc2a,0x30623b1d,
    0x00333333,0x000070a6,0x00000000,0x99980726,0x238e099c,0x710e1443,
    0x101c0ee7,0x2f362cc5,0x8570c82d,0x0c83b0d8,0x0d9a5439,0x46403232,
    0x214c0d82,0x55751ab8,0x372ee300,0x21857711,0x00822ca8,0x00000000,
    0x00000000,0x400ca800,0x8871c703,0x2c8741c2,0xbcbb8070,0x1142132d,
    0xc8bae1bd,0x40810190,0x08849129,0x00000b50,0x00000000,0x00000000,
    0x00000000,0x5c000000,0x3d70700c,0xdc886c3a,0xa8005d50,0x0101cceb,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x000c0a20,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__courier_16_latin1_x[224]={ 0,3,1,1,1,1,1,3,4,2,0,0,2,1,
3,1,1,1,1,1,1,1,1,1,1,1,3,2,0,0,0,0,1,0,0,0,1,0,1,0,0,1,1,0,
0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,3,0,0,1,0,0,1,0,0,1,
1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,3,0,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,3,1,0,1,0,
3,0,2,0,0,0,0,1,0,-1,2,0,2,2,3,0,1,3,3,2,2,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,1,1,1,-1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,
0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,
 };
static signed short stb__courier_16_latin1_y[224]={ 11,2,2,1,1,2,3,2,2,2,2,3,8,6,
9,1,2,2,2,2,2,2,2,2,2,2,5,5,3,5,3,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,14,1,4,2,4,2,4,2,4,2,2,
2,2,2,4,4,4,4,4,4,4,2,5,5,5,5,5,5,2,2,2,5,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,4,1,2,4,2,
2,2,2,2,1,5,6,6,2,1,0,2,2,2,1,5,2,5,10,2,1,5,2,2,2,4,-1,-1,0,0,
0,-1,2,2,-1,-1,0,0,-1,-1,0,0,2,0,-1,-1,0,0,0,4,2,-1,-1,0,0,0,2,2,1,1,
1,2,2,1,4,4,1,1,1,2,1,1,1,2,2,2,1,1,1,2,2,3,4,1,1,1,2,1,2,2,
 };
static unsigned short stb__courier_16_latin1_w[224]={ 0,3,6,7,6,7,7,3,3,3,6,8,3,7,
3,6,6,6,6,7,6,7,7,6,6,7,3,4,7,8,7,6,6,9,8,8,7,8,7,8,8,6,8,9,
8,9,8,8,7,8,9,7,8,8,9,9,8,8,7,3,6,3,6,10,3,8,8,7,9,8,7,8,8,7,
5,8,7,9,8,8,8,9,7,7,7,8,9,9,8,8,6,3,2,3,7,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,3,6,8,7,8,
2,8,5,9,5,7,8,7,9,10,5,8,4,4,3,8,7,3,3,4,5,8,9,9,9,6,9,9,9,9,
9,9,9,8,8,8,8,8,6,6,6,6,9,8,8,8,8,8,8,6,8,8,8,8,8,8,7,8,8,8,
8,8,8,8,9,7,8,8,8,8,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
 };
static unsigned short stb__courier_16_latin1_h[224]={ 0,10,5,11,12,10,9,5,11,11,6,8,6,2,
3,12,10,9,9,10,9,10,10,10,10,10,7,8,8,4,8,10,10,9,9,10,9,9,9,10,9,9,10,9,
9,9,9,10,9,11,9,10,9,10,9,9,9,9,9,11,12,11,4,1,3,8,10,8,10,8,9,10,9,9,
12,9,9,7,7,8,10,10,7,8,10,7,6,7,6,9,6,11,11,11,4,9,9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,9,6,9,
11,10,2,10,5,6,5,2,10,1,5,9,5,5,3,9,10,3,4,5,5,6,9,9,9,10,12,12,11,11,
11,12,9,12,12,12,11,11,12,12,11,11,9,11,13,13,12,12,12,6,10,13,13,12,12,11,9,10,11,11,
11,10,10,11,8,10,11,11,11,10,10,10,10,9,10,9,11,11,11,10,10,8,8,11,11,11,10,13,12,12,
 };
static unsigned short stb__courier_16_latin1_s[224]={ 255,223,172,243,166,35,113,163,101,251,105,
9,122,223,219,87,69,54,47,76,61,101,109,117,131,138,252,244,1,183,227,
156,163,68,121,170,139,217,192,189,104,11,224,243,234,28,38,207,157,108,147,
216,130,20,18,1,95,86,78,164,80,139,200,237,207,201,11,193,1,218,226,
84,208,200,160,183,175,18,28,235,233,242,47,210,29,55,112,37,72,148,249,
160,157,126,192,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,
166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,255,252,124,
120,64,129,105,198,231,179,151,97,142,223,146,237,126,103,137,132,215,157,93,
211,179,167,157,81,138,46,73,10,121,131,177,187,64,141,83,151,64,182,92,
168,73,191,150,143,93,130,37,19,173,112,198,90,43,10,1,103,94,46,112,
26,19,10,1,17,1,225,174,206,216,37,55,197,52,227,235,56,243,64,207,
234,28,60,37,184,165,74,83,117,214,28,55,46, };
static unsigned short stb__courier_16_latin1_t[224]={ 1,14,59,1,1,27,49,59,14,1,59,
59,59,59,59,1,27,49,49,27,49,27,27,27,27,27,27,49,59,59,49,
27,27,49,49,27,49,38,38,27,49,49,27,38,38,49,49,27,49,14,49,
27,49,38,49,49,49,49,49,14,1,14,59,59,59,49,38,49,38,49,38,
27,38,38,1,38,38,59,59,49,27,27,59,49,38,59,59,59,59,38,49,
14,14,14,59,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,1,14,27,
38,59,38,14,27,59,27,59,59,59,59,27,61,59,38,59,59,59,38,27,
59,59,59,59,59,38,38,38,27,1,1,14,14,14,1,38,1,1,1,14,
14,1,1,14,14,38,14,1,1,1,1,1,59,27,1,1,1,1,14,38,
27,15,15,15,27,27,1,49,14,1,15,14,14,27,14,14,38,14,38,1,
1,15,27,38,49,49,14,14,14,14,1,1,1, };
static unsigned short stb__courier_16_latin1_a[224]={ 136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_16_latin1_BITMAP_HEIGHT or STB_FONT_courier_16_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_16_latin1(stb_fontchar font[STB_FONT_courier_16_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_courier_16_latin1_BITMAP_HEIGHT][STB_FONT_courier_16_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_16_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_16_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_16_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_16_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_16_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_16_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_16_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__courier_16_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__courier_16_latin1_s[i] + stb__courier_16_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__courier_16_latin1_t[i] + stb__courier_16_latin1_h[i]) * recip_height;
            font[i].x0 = stb__courier_16_latin1_x[i];
            font[i].y0 = stb__courier_16_latin1_y[i];
            font[i].x1 = stb__courier_16_latin1_x[i] + stb__courier_16_latin1_w[i];
            font[i].y1 = stb__courier_16_latin1_y[i] + stb__courier_16_latin1_h[i];
            font[i].advance_int = (stb__courier_16_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__courier_16_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_16_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_16_latin1_s[i] + stb__courier_16_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_16_latin1_t[i] + stb__courier_16_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_16_latin1_x[i] - 0.5f;
            font[i].y0f = stb__courier_16_latin1_y[i] - 0.5f;
            font[i].x1f = stb__courier_16_latin1_x[i] + stb__courier_16_latin1_w[i] + 0.5f;
            font[i].y1f = stb__courier_16_latin1_y[i] + stb__courier_16_latin1_h[i] + 0.5f;
            font[i].advance = stb__courier_16_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_16_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_16_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_16_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_16_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_16_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_16_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_16_latin1_LINE_SPACING
#endif

