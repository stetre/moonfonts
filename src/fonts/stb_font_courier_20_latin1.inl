// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_20_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_20_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_20_latin1_BITMAP_WIDTH         256
#define STB_FONT_courier_20_latin1_BITMAP_HEIGHT         96
#define STB_FONT_courier_20_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_20_latin1_FIRST_CHAR            32
#define STB_FONT_courier_20_latin1_NUM_CHARS            224

#define STB_FONT_courier_20_latin1_LINE_SPACING           9

static unsigned int stb__courier_20_latin1_pixels[]={
    0x40300110,0x7d502e19,0x1000a800,0x3002a005,0x800b8005,0x80994038,
    0x0080b11d,0x40a0005c,0x870391c3,0x2a0bd92b,0x88048000,0x22003301,
    0x20240703,0x0b6004ee,0x915c0790,0x88009101,0x25ecc01d,0x90076f20,
    0x200b2007,0x1bac01d8,0x260510a8,0x3b100ecc,0x92036200,0x55242c59,
    0x03b790b0,0xd8807620,0x1a0cbcbc,0x05a80640,0x1aa2c037,0x016c0370,
    0x00048800,0x49922019,0x20064390,0x800dc02b,0x0195800c,0x22498062,
    0x32012205,0xd921edbc,0x0c9205c1,0x0190dc58,0x40d80390,0x100f21f8,
    0x5883980b,0x000f5160,0x82aa6008,0x5c6442aa,0x006201bc,0x00031000,
    0x00001880,0xbcd884ac,0x0058584c,0x482e1540,0x248170d1,0x0000580c,
    0x82e05700,0x000e4068,0xd3160190,0x22aaaa88,0x8aaa0aa9,0x216441e8,
    0x2da8bdd8,0x2265e6c4,0xd950ced8,0x265e6c47,0x65433b62,0x32f3623e,
    0xa8676c44,0x276623ec,0x7507609d,0x9106c458,0x0dc01dd9,0x05c25d20,
    0x22580c92,0x2200eecc,0x0900eecc,0x8b101e80,0xcccccec8,0x4c582445,
    0x6ccccc46,0x2c883d10,0x7c42c154,0x50760e81,0xd8b03887,0x40e21d41,
    0x10ea0ec5,0x9db91607,0x6c0ee79d,0x06dec911,0x362039d8,0x20f2300a,
    0xb01b241b,0x6c00e760,0xd800b039,0x41603702,0x4c580c85,0x0aa0c805,
    0x20ae2c16,0x0ee55068,0x960710ec,0x1c43b03b,0x0ec0ee58,0x4e616071,
    0x13a80ec5,0x4c0646e9,0x7b9300b3,0x8ba20b60,0x261609b4,0x167300b3,
    0x40f2002c,0x4c1c1605,0x402c4584,0x40ae2c0c,0x82c4162a,0x8ea03b2a,
    0x80ecb038,0xb2c0e23a,0x0388ea03,0x1d9bb88b,0x2915881a,0x2190190c,
    0x20ae001b,0x8a44a82d,0x2e190b05,0x81b86401,0x20b6001d,0x01a9602a,
    0x0b11606c,0x162a8190,0x7c40aab0,0x5881a580,0x40d2c0e2,0xd2c0e258,
    0x20712c40,0x3b377265,0x8ac40d2c,0xb03b7b14,0x39818244,0x20dc2652,
    0x96160324,0x0912c048,0x07a04095,0x3b99b016,0x042c3980,0x2aac0640,
    0xb102d540,0x068f265b,0x4b038962,0x03896206,0x44b1034b,0x91370b03,
    0x347501d8,0x585502a6,0x906c43f0,0x4902e166,0x2154580c,0x20b0aa05,
    0x1a0ec42d,0x933b00ea,0x0058b003,0x0b550190,0x8c880ba0,0x80ec0bdb,
    0xb2c0e23a,0x0388ea03,0x23a80ecb,0x1370b038,0x43b04b89,0xcccd800d,
    0xddbc82dc,0xb81d241d,0x8b019240,0x02dccccd,0x05b9999b,0x50372ff2,
    0x44b00b09,0x8b154010,0xd00c8039,0x91016005,0x07609700,0x825c710d,
    0x71c4341d,0x10d07609,0xb0731907,0x06cc3a85,0x80b04883,0x321dc904,
    0x4b037240,0x0910b048,0x3a019016,0x82c01cc0,0x6459601b,0x5806401f,
    0x48805500,0x83a85b00,0x0b60642c,0x0c859075,0x320ea16c,0x29a40642,
    0x20997db0,0x0dc3ddfb,0x241200c8,0x22484b96,0x0dcd551d,0xc80dc0c8,
    0x1260aa00,0x5c160036,0x1574ae01,0x0aa0d001,0x00aeaa98,0xb0035b73,
    0x6ec0997d,0x97db02cb,0x165eec09,0x204cbed8,0x0002cbdd,0xf90000c4,
    0x0f76c47d,0x02081028,0x91988404,0x776c47df,0x6c47df91,0x81bc81ee,
    0xfd880300,0x01eeeeee,0x2200998c,0x2a61ebaa,0x55100aea,0x2aa20155,
    0x0031001a,0x00620022,0x00c40044,0x00000088,0x00000000,0x00000000,
    0x00000000,0x00000000,0x204d5440,0x000aaaa8,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x4401c400,0x88071002,0x1c028801,0x2c405100,0x01dc4095,
    0x30088e54,0x00000600,0x20030003,0x030cb800,0x4a962008,0x200400c0,
    0x883cccc8,0x0ba812a5,0xd98032a0,0x025ecc00,0x66c40366,0x97b303db,
    0x6cc02d40,0x40311400,0x45c40333,0x00b205db,0xbbb300b2,0x8801e401,
    0x02dc802d,0x813b22a6,0x188a02dc,0xdc805b10,0x140e1202,0x01ca2031,
    0x402407fb,0x24412648,0x88950360,0x03981264,0x2000006c,0x18800cba,
    0x77007700,0x02c43a20,0x007600ee,0x0012e3b1,0x012e3b10,0x6c403b00,
    0x020e0971,0x00eb2000,0x00000001,0x01b03b80,0x44000000,0x7d950ced,
    0x33620020,0x000804cb,0x03907201,0x10008008,0x507e5408,0xc80807d9,
    0x082ccecc,0x6dc40800,0x333b2201,0x00205ccc,0x3333b220,0x33b225cc,
    0x6645cccc,0x03a2ccec,0x9d9991dc,0x67666459,0xc88fb22c,0x22c0e22e,
    0x200eecc8,0xca81d41d,0x05995101,0x1544e61a,0x42a886aa,0x50aa21aa,
    0x585d8835,0x09003950,0x440b32a2,0x2a382cca,0x22c1600c,0x1c02cca8,
    0x20b0b058,0x102c1205,0x81201209,0x0e20e41c,0x2073b02c,0x6dc3b03b,
    0x55c0db8a,0x88584a88,0x87531664,0x261d4c59,0x3221d4c5,0x2b6e2c1b,
    0x41200db8,0xb84a88ab,0x1544a88a,0x4382c0ae,0x504a88ab,0x2c1c160b,
    0x02c12038,0x12012091,0x22126588,0x2ce60b03,0x247501d8,0x2c240244,
    0x0e616244,0x2160e616,0x2c5a4439,0x04812212,0x4c240120,0xa961260c,
    0x9b112001,0x201a9601,0x412006a5,0x1207700c,0x16750120,0x190581c4,
    0x5881a06e,0x2e212035,0x442c0dbc,0x2c1cc2c4,0x1cc2c1cc,0x54b1d522,
    0x10240901,0x7101b797,0x57101b79,0x373360cc,0x36f2e201,0x99b00320,
    0x6e66c03b,0x07504801,0x2402403a,0x3880e640,0x848960b0,0x80656206,
    0x2666f61b,0x21d42c0d,0x98583985,0x44398583,0x0192c364,0xbd82406e,
    0x5ec0d999,0x2600d999,0xc99d83bc,0xb3337b01,0x4cec02c1,0x3267601c,
    0x0b604801,0x24024095,0x07102c40,0xb0b0aa16,0x81ccea03,0xb03206e5,
    0x4c2c2c81,0x58398583,0x91244398,0x40b03996,0x20c81b84,0x4400c81b,
    0x20844b03,0x06e0c81b,0x02112c35,0x24010896,0x00f6fae0,0x12009009,
    0x9b0710d0,0x4b85b999,0x2e06c3b0,0x81f506e2,0x82e1664a,0x220b83e8,
    0x3a20b83e,0x16722443,0x1202b81b,0x5c1f506e,0x20e07d41,0x5c6e0b03,
    0x9b107d41,0xb82c1b75,0x901b82c1,0x8042d980,0x09004804,0x220642c8,
    0xa85b0b04,0x16e6dc43,0x326ef362,0x06e6dc2e,0x74d65ec4,0x4d65ec42,
    0x565ec42e,0x361222e9,0x16e6dc45,0x2f362120,0x9b12ec9b,0x6c5d9377,
    0x0b00cbaa,0x5de6c46e,0x05442ec9,0x82c1b82c,0x74c0901b,0x902eddcd,
    0x01200900,0x2e0b2f76,0x7db01901,0x44008099,0x30011000,0x03000c00,
    0xd50f7f44,0xfddb0040,0x800885dd,0x04ccc008,0xeeeefd88,0x000441ee,
    0xeeeefd88,0xddfb11ee,0x76c3dddd,0x0002eefe,0x45ddfddb,0x42eefeed,
    0x405efee9,0x47df9008,0x1881eed8,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x18000000,0x00400c00,0x11d80000,
    0x011ca80b,0x000000c0,0x026e6e5c,0x00000000,0x6d40511c,0x4005100b,
    0x80a22418,0x40d542a8,0x51440a23,0x03000601,0x803c80e6,0x16e402d8,
    0x8819bb50,0x0a81cccb,0x5c5c4051,0x01d8805d,0x32226edc,0x397440dd,
    0x803bca87,0x597002cb,0x0752c400,0x6cc2ccea,0x9b105bdb,0x6cc395b7,
    0x45985bdb,0x932c43a9,0x501c8ea0,0x640f2009,0xb00ee01f,0x4b8ec403,
    0x37162498,0x000002c4,0x36201d80,0x22c43602,0x1701ce5b,0x4c005300,
    0x8b000002,0x1b00c01b,0xb00c05d8,0x00000730,0x0b202d40,0x08010010,
    0x40c80800,0x9115401b,0x64401dd9,0x00800eec,0xb85300ec,0x10738ee3,
    0x2982209b,0x20298260,0x201ca808,0x66544245,0x4c987702,0x42c03950,
    0x81cb8839,0x00d542a8,0x20000801,0x2e201cb8,0x072e201c,0x90072064,
    0x400e7603,0x1ca8039d,0x40640488,0x039c3a64,0x4c197072,0x02989902,
    0x456dc1b7,0x9d5580db,0x09511570,0x21bac41d,0x80db8adb,0x4e643985,
    0x22cc0cb8,0x0d54c3a9,0x14035530,0x065c4e64,0x032e2732,0x81971399,
    0x105a89d9,0x2ce607b5,0x2e059cc0,0x2a0db8ad,0xa8750551,0x43a664c6,
    0x416cc6a0,0x4c0ed429,0x42416c42,0x12e25848,0x21b16120,0x21221248,
    0x20e63985,0x43985839,0x26205998,0x398b1059,0x260e6398,0x20e60e63,
    0x7300fefb,0x0dc3203b,0x480dc320,0x2f672488,0x4c7620da,0x2a1ce05c,
    0x8e6992bc,0xabc8abba,0x5caeea3b,0x406a398d,0x443a8584,0x92c0dbcb,
    0x901aa445,0x91f441b0,0x09333333,0x02c0730b,0x9c8b1058,0x32499999,
    0x24999999,0x4999999c,0x00d98654,0x0912c0e4,0x06a12258,0x1c41d724,
    0x702cf722,0x911d980e,0x4a676a09,0x912d9838,0x41b80649,0x4cdecb05,
    0x254640d9,0x1b8064ee,0x74d65eec,0x555555b2,0x40730b05,0x1a60b005,
    0x5555555b,0x5555556c,0x2aaaab62,0x01542c2a,0x05855122,0x0190b0aa,
    0x02c1cc6e,0x220e7024,0x2224644c,0xcc85303d,0x03992320,0x0dd60b0b,
    0x216e6064,0x2160730e,0x00154035,0x02c0730b,0x2a8d3058,0x2a802a80,
    0x80730b00,0x66666c48,0x9999b02d,0x4b03985b,0x15c05858,0x50620e70,
    0x2a013125,0x24a60c43,0x2b057036,0x506e7339,0x5c2f881f,0x20ae06c4,
    0x1501b005,0x80fa20b8,0x1ea0b005,0x0d82a036,0x2a0360a8,0x544b0aa0,
    0x20910640,0xb0b04885,0x30642b81,0x4e025c07,0x1b553003,0x26005700,
    0x36e20daa,0x9fec42dc,0x79b10dcd,0x56c5d937,0xb883dbdb,0x00b02dcd,
    0x0b72f2e2,0x3a6b2f62,0x41600b02,0xcbcb887a,0x65e5c42d,0x65e5c42d,
    0x2dcdb82d,0x216e6f5c,0x1b81901b,0xcdb88190,0x8799b02d,0x2a03dcba,
    0x54005b5a,0x5565c00d,0x201b5003,0x08804000,0x20030a20,0x4c000400,
    0x3a201800,0x225eefee,0x45eefeee,0x4c004c01,0x08009800,0x77e40440,
    0x647bb623,0x3bb623ef,0x40100101,0x10988008,0x00000003,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00800000,0x00b9ac98,
    0x21980262,0x0000000a,0x5c401310,0x3aa0002b,0x40605eee,0x2eeeeee8,
    0x20300188,0x00c40198,0x8554b2e2,0x0aaa0aa9,0x05d88000,0x25513793,
    0x1bcb89a9,0x0faa0620,0xdb801100,0x0f764c04,0x0cbaaca8,0x350723a8,
    0x45333333,0xd950ced8,0xcbaaca87,0x6402a380,0x00d40bde,0x3732f722,
    0x44550711,0x2404cbcd,0x20ee56e4,0x0cbcbcd8,0x37326732,0x59107a21,
    0x333b32e0,0x8cc85800,0xb510ccda,0x885b517b,0x224bcbcc,0x90254004,
    0x85c416a5,0x3901b848,0x41803000,0x01b8b038,0x20663839,0x0351622d,
    0x00f441d8,0x1d41d832,0xd8b0b090,0x8398fc40,0x0582a86c,0x22c00190,
    0x7c43e839,0x90320e81,0x26002449,0x98010202,0x22aa399b,0x51122aac,
    0x18030599,0x4aa581c4,0xa892aaa9,0xb838848a,0x02b806a1,0x0ee58013,
    0x337260ec,0x2e19010a,0x20321702,0x02b8b068,0x332a0190,0x877048b1,
    0x42c55068,0x16552228,0x06aa6000,0x5ddabdb8,0x0d426292,0x18951157,
    0x2c0e20c0,0x06a311c9,0x500ea253,0x0eef6d45,0xb1cc0009,0x0c98ea03,
    0x092c03d1,0xa8344120,0x80c80162,0x45bc99cc,0x05887705,0x22005c55,
    0x42da8bdc,0x26201aa9,0xf5091059,0x44733524,0x30062403,0x8a4b0388,
    0xba887101,0x222c400b,0x002c3221,0xb1034190,0x2a022064,0x1cc0162e,
    0x0aab035c,0x41d40c80,0x1f41546c,0x711603e2,0x03f10379,0x0049988b,
    0x87c02e0b,0x3886e6a4,0x306de5c4,0x581c4180,0x13881452,0x36002177,
    0x88b39800,0xd1602aaa,0x200b2c40,0x3600584a,0x205db88b,0x320305aa,
    0x434c06c0,0x43cc98bd,0x07932dd8,0x0d10ed44,0x5802406e,0x248640b0,
    0x7b0d42a2,0x00c1b333,0x49607106,0x1035188e,0x07620957,0x4c41b580,
    0xd87102c9,0x00647501,0x000ec0cc,0xd0167b93,0x03206e05,0xcd98340b,
    0x5c644399,0x896000bd,0x01207305,0x4b00a82c,0x22e2c8a9,0x183206e4,
    0x1c4340c0,0x48eee253,0x36214470,0x1dca6001,0xb83701b8,0x8ecc3b04,
    0x095000c8,0x1602c004,0x1c8481b8,0x853006a8,0xb02a8048,0x806407c4,
    0x06c0b004,0x910570ee,0x83ea0dc1,0x21640c01,0x64415c0c,0xb1144700,
    0x1b032201,0x580dc0ec,0x703a85b0,0x2077017d,0x400ec42d,0x3b80aa05,
    0x106cc1cc,0x107200db,0x750d5009,0x81262744,0x5cc0b004,0x79502bbb,
    0xcd881995,0x032ec9bb,0x597bb018,0x332af2a0,0x892ae200,0xbd50440d,
    0xcfd883b9,0x04880cdb,0x90132fb6,0x6403fe60,0x5400dcbf,0xd5530aea,
    0x65ed4015,0xd99d300b,0xaaa81bd1,0x0d6dcc3d,0x9b7bd750,0x6e756754,
    0x7441200b,0x205eefee,0x10031000,0x4cccd401,0x02202999,0x02000c40,
    0x7dddddd7,0x03300110,0x20031000,0x26002204,0x45555000,0x800aaaa8,
    0x20022001,0xaa880aaa,0x0011001a,0x7f774406,0x000005ee,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x31000000,0x00500000,0x00000000,0x41f75400,0x326004d8,0x441c1504,
    0x8000005d,0x0001ceda,0x00000000,0x00014400,0x20000000,0x1d797005,
    0x76447d90,0x33360902,0x2a2dccec,0x23bb51ce,0x3b2a0fca,0xbd30bd53,
    0x00581201,0x4720937b,0x44016058,0xb800eecc,0xccec8842,0x66f543dc,
    0x676444dc,0x32a5cccc,0x25ccccce,0x42cceccc,0x705bdbd9,0x1d999dbb,
    0x20b33b26,0x37264cea,0x4b00580d,0x1c839018,0xa922c120,0x221cc2c2,
    0x0dec585d,0x20480af2,0x00048005,0x39d80058,0xb8580580,0x216605c2,
    0xb0488b05,0x40180120,0x1606458b,0x4c2a8160,0x40aaaaea,0x4cb10038,
    0x24582404,0x43985855,0x362c1bc8,0x80ab2258,0x0aaa9604,0x0d54c120,
    0x005e5d60,0xeaa81673,0xb0581aaa,0x2c2b80b8,0x03824438,0x5e5caa09,
    0x2122d600,0x2c0bdeef,0x2620d4b5,0x0b01999d,0xca859d40,0x50cccecc,
    0x30b02648,0x458b4887,0x0aa6e195,0x1dc96048,0x59988240,0x6cc56ec0,
    0x406e1900,0x80999d98,0x805c3a85,0x220352c5,0x441200e4,0x80d98add,
    0x45806b48,0x1cc86458,0x97016017,0x9b00199d,0x3b333103,0x36024033,
    0x443dcccc,0x4562c754,0x0480aab4,0x04801dd6,0x2a0ec058,0x20244b02,
    0xecccd805,0xd8b00b85,0x9d101dcc,0x6c0900d9,0xd9541541,0x550b00ec,
    0x0939d8dc,0x2b26202c,0x67665400,0x2401200c,0x2a666760,0x161b2443,
    0x02a9564b,0x003dd812,0x0b016012,0x05855073,0x4ccec02c,0x5805c4b9,
    0x880e4cec,0x0480599c,0x4320e616,0x30b00c9d,0xb59cd547,0x00b802c0,
    0x00480240,0x43985809,0x962d2248,0x0480aa79,0x240036ba,0x261602c0,
    0xdccccd83,0x41601602,0x12202e2a,0x2440844b,0x42c09003,0x06cce839,
    0x5306c458,0x58163237,0x2a600b00,0x1200aadb,0x26160240,0x16722443,
    0x0901540b,0x4800d8ac,0x4c2c0580,0x20582443,0x47305805,0x82c2b80b,
    0x9001221b,0x261cc2c0,0xef853163,0x2dc40cde,0x04240b55,0x48032126,
    0x01200100,0x8488730b,0x05502c5d,0x06c4b024,0xb0160120,0x901b8730,
    0x41601601,0x07502e1d,0x04886e0b,0x730b0240,0x873161b8,0x6c4bb005,
    0x372f6604,0xddddf30c,0x3bfb609b,0x777775c2,0x3fba61ee,0x71efd85e,
    0x3bfa27dd,0x3efb9aa1,0xee98f76c,0xdb14eefe,0x3b62ff44,0xdd12eefe,
    0xfd8bddfd,0x327dd50d,0x3bb623ef,0x3bbbfb61,0x3bbbf621,0x3bbaa1de,
    0x77ec43de,0xd51eeeee,0x3b603ddd,0x3f62eefe,0x2e5dd10d,0xddddfb5f,
    0x0bbbfa67,0x401f42e8,0x00000018,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00003000,0x00000000,0x00000000,0x19654000,0x00007a60,0x30098000,
    0x800a2980,0x03932cb8,0xa8059951,0x072a032c,0x55502aa6,0x26039710,
    0xb99d9102,0x3b7b103b,0x2dccccd8,0x2ec88fb2,0x2fc88fb6,0x36259d91,
    0x88f3ae2f,0x9d911ddc,0xd9705b99,0x9d930199,0xad983999,0x2b607c98,
    0x2a00d302,0x6440772c,0xfe80900c,0x35005b53,0x70b236f2,0xb3095115,
    0xdb8f9315,0x3620db8a,0x32164409,0x740cb89c,0xd889103f,0xb0b005c0,
    0x40e41c81,0x22c0e40d,0x901b80d8,0x20390b01,0x4588b005,0x2aae0d04,
    0x5b700202,0x6dc09d51,0x36e02401,0x8800edc1,0x2120120f,0x48848d04,
    0x316388d4,0x1db87307,0xb8b10910,0x10391601,0x0d8824cb,0x0d996075,
    0x20b10910,0x40160905,0x00713985,0x0002aac4,0xa85cb891,0x0009001d,
    0x54406644,0x84999ebc,0x220dbcb8,0x8901a803,0x9161d738,0x09333333,
    0x41904880,0x04982058,0x32602cea,0x02cd6058,0x8581542c,0x1600b039,
    0x9000d4e6,0xaaa98aa3,0x86e0aaaa,0x0b66194a,0x55b75530,0x9b100015,
    0x3a66b6a1,0x2f60aaaa,0x06a0d999,0x20dc0320,0xd89175b5,0x02aaaaaa,
    0x8b33b320,0x265b911b,0xcc805881,0x200eb801,0x2a803ead,0x9533b02c,
    0x45802c09,0x200910d9,0xaa98aa49,0x960aaaaa,0x1eccaa4a,0x2b6eaa60,
    0x2026442a,0x81e163d9,0x1220c81b,0x6c2c0e60,0x2a855b48,0x9ca88000,
    0x58dc6e09,0x1003903b,0x8077200b,0x4b00b74d,0x36ab6048,0xce802c04,
    0x40e40cdc,0x02a8361b,0x58955500,0x09002da8,0xcc881fdc,0x45f70e40,
    0x0fa8370a,0x1b0dc0e4,0x91cb82b8,0x1501b019,0x048817ec,0x509932cb,
    0x20120387,0x51601b3a,0x0190c807,0x85812e2c,0x5c402c48,0x3e22ccbd,
    0x301eeeee,0x01d44e80,0x204803b7,0x203b706d,0xcdcbdbd8,0x2ef3623e,
    0x36e22ec9,0x6dc42ccb,0x4cd302dc,0xb9797107,0x9103fe85,0x5d0d4910,
    0x12058588,0x582c4930,0x05a44058,0x85815c2c,0x12002c48,0x0d302a80,
    0x16de66d4,0x48066440,0x1da83f10,0x20181100,0x40060008,0x13000000,
    0x88910040,0x756e640d,0x48160363,0x09503620,0xad80550b,0xb0582c02,
    0x40058910,0x0055002b,0x100010e0,0x424c0601,0x00000002,0x00000000,
    0xdd100000,0x02019bdd,0x777777c4,0x2f7f74c5,0xfe893ba2,0xe87dfb14,
    0x4403ea05,0x8f4c3efd,0xeeeeefec,0x05ddfd34,0x6c401bc8,0x000001ee,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x38000000,0x40209910,0xca800098,0x47b21992,0xaaaaaaa9,
    0x00b6e20a,0x37761804,0x062ddddd,0x0195004c,0x22115973,0x550d542a,
    0x540e54ee,0x2205730a,0x15544621,0x55545553,0x2aa60aaa,0x95415530,
    0x060c0bcb,0x00e211c4,0x2e3bc980,0xa8240642,0x0e5e5c4f,0x22059593,
    0x1fd2fb84,0x5554c7f2,0x321caaaa,0x0bf61d9b,0x20003b07,0x716de42c,
    0x272a1ff4,0x31662ea8,0x5c6ec475,0x54c0c8cd,0x442a9cba,0x2623d11e,
    0xd876621d,0x221e9999,0xb10f222d,0x5c1b315b,0x6edc16a4,0x2ee60ddc,
    0x0b812ea3,0x2570ecb2,0x83f62b8c,0x2aa22438,0xfa877b04,0x007dcfb1,
    0x24a9a1a8,0x3b1542fe,0x88888888,0x64313b80,0xb032a1dc,0x4c2c1981,
    0x154d06c3,0x3d10174c,0x70360ba2,0x440e4385,0x0760771d,0x16e5c855,
    0x70c58926,0x84c88481,0x7edc41dc,0x0a627c2c,0x424cddc9,0x87cc391c,
    0xa801ea6c,0x30762b61,0x32021bc8,0x2ccccccc,0x98002008,0x30b01acd,
    0x0552c587,0x997cc073,0x0587303e,0x0b36015c,0xdd839858,0x20e41d90,
    0x0484880c,0x205bb06e,0x407cc2cd,0xc8ac771d,0x443615c5,0x006992a7,
    0x02ec886a,0x00000000,0x6e544000,0x161cc2c0,0x014c154b,0x803f21d9,
    0x03a80e65,0x21601dc8,0xf32f9839,0x26161545,0x86a08903,0xb2b8591d,
    0xca880c41,0x0dcde4c1,0x0c005107,0x00001100,0x00000000,0x2c498080,
    0x54b161cc,0x2e402982,0x0d9540d9,0x2c808950,0x0e616039,0x10be25f1,
    0x3a8b715d,0x45775120,0x4430641b,0x00000001,0x00000000,0x00000000,
    0x98598000,0x87d105c3,0x530552c5,0x02dcb900,0x2166091b,0x20b21644,
    0x47a23985,0x5cec42e8,0x2ef23bac,0x0179750b,0xbb980000,0x2663bbbb,
    0x99999999,0xbb1288e0,0xbbbbbbbb,0x00000001,0x00000000,0x36f2f620,
    0x9acbd884,0x9fcbf72e,0xddb931ea,0x751dc0bd,0x77403ae0,0x3fa4eeee,
    0x6c7fd50d,0x25dd10df,0x8040721c,0x00000000,0xbbbbb980,0x2eeeee3b,
    0xb12bbbbb,0x000001cc,0x00000000,0x30000000,0x00000300,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__courier_20_latin1_x[224]={ 0,4,2,1,1,1,2,4,5,2,0,1,2,1,
3,1,1,1,1,1,1,1,2,1,1,2,3,2,0,0,0,0,1,0,0,1,1,0,1,1,0,1,1,0,
1,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,1,0,3,1,0,1,1,1,1,1,0,1,
1,1,1,0,0,1,0,1,1,1,1,0,0,0,0,1,2,0,4,0,1,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,4,1,1,1,0,
4,1,2,0,0,0,0,1,0,-1,2,1,2,3,3,0,1,3,3,3,2,1,0,0,0,0,0,0,0,0,
0,0,0,1,0,0,0,0,1,1,1,1,-1,0,0,0,0,0,0,2,0,0,0,0,0,0,1,0,1,1,
1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,1,0,1,
 };
static signed short stb__courier_20_latin1_y[224]={ 14,2,3,2,2,3,4,3,3,3,3,4,11,8,
11,2,2,3,2,2,3,3,2,3,2,2,6,6,4,7,4,3,2,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,18,2,6,3,6,3,6,3,6,3,2,
2,3,3,6,6,6,6,6,6,6,3,6,6,6,6,6,6,3,3,3,7,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,6,2,3,5,3,
3,3,3,3,2,6,8,8,3,1,1,3,2,2,2,6,3,7,13,2,2,6,2,2,2,6,0,0,0,1,
1,0,3,3,0,0,0,1,0,0,0,1,3,1,0,0,0,1,1,5,3,0,0,0,1,0,3,3,2,2,
2,3,3,2,6,6,2,2,2,3,2,2,2,3,3,3,2,2,2,3,3,4,5,2,2,2,3,2,3,3,
 };
static unsigned short stb__courier_20_latin1_w[224]={ 0,3,7,8,8,8,7,3,4,4,7,9,5,8,
4,8,8,8,8,8,8,8,8,8,8,8,4,5,9,10,9,7,8,11,10,9,9,10,9,9,10,8,10,11,
9,11,10,9,9,10,11,8,9,10,11,11,10,10,8,3,7,3,8,12,4,9,10,9,10,9,9,9,10,9,
7,10,8,11,10,9,10,10,9,8,9,10,11,11,10,10,7,4,2,4,8,10,10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,3,8,9,8,10,
2,9,6,11,6,9,10,8,11,12,6,9,6,5,4,10,9,4,4,5,7,9,11,11,11,7,11,11,11,11,
11,11,11,9,10,10,10,10,8,8,8,8,11,10,9,9,9,9,9,7,10,10,10,10,10,10,9,9,9,9,
9,9,9,9,11,9,9,9,9,9,9,9,9,9,9,10,9,9,9,9,9,9,10,10,10,10,10,10,10,10,
 };
static unsigned short stb__courier_20_latin1_h[224]={ 0,13,6,14,14,12,11,6,14,14,7,10,6,2,
4,14,13,11,12,13,11,12,13,12,13,13,9,10,10,4,10,12,14,11,11,12,11,11,11,12,11,11,12,11,
11,11,11,12,11,14,11,12,11,12,11,11,11,11,11,14,14,14,6,1,4,9,12,9,12,9,11,12,11,12,
16,11,11,8,8,9,12,12,8,9,12,9,8,9,8,12,8,14,14,14,4,12,12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,12,12,11,8,11,
14,13,2,12,6,8,6,2,12,2,5,11,7,7,4,12,13,3,4,7,6,8,12,12,12,12,14,14,14,13,
13,14,11,14,14,14,14,13,14,14,14,13,11,13,15,15,15,14,14,7,12,15,15,15,14,14,11,12,13,13,
13,12,12,13,9,11,13,13,13,12,12,12,12,11,12,11,13,13,13,12,12,10,10,13,13,13,12,16,15,15,
 };
static unsigned short stb__courier_20_latin1_s[224]={ 254,250,179,105,145,77,13,187,157,213,141,
158,149,149,209,218,125,106,86,40,118,95,83,114,31,92,248,168,148,224,174,
142,124,136,158,150,169,179,190,104,52,200,182,52,88,74,63,123,98,32,76,
225,42,54,64,242,41,30,21,246,238,175,170,178,235,196,234,206,193,238,148,
204,125,245,1,95,86,21,84,216,214,160,33,1,1,10,53,226,73,171,65,
170,167,162,240,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,254,250,133,
11,105,21,154,217,171,65,163,43,191,149,21,158,202,32,114,127,219,198,101,
249,214,121,155,95,135,123,111,248,133,191,179,61,49,83,220,203,227,1,12,
227,52,23,43,188,1,167,42,84,63,95,114,133,177,73,94,52,72,61,232,
157,115,197,207,167,33,238,184,108,1,11,21,209,230,240,1,115,11,209,105,
73,178,188,147,127,137,134,145,156,219,9,31,20, };
static unsigned short stb__courier_20_latin1_t[224]={ 1,1,84,1,1,47,73,84,1,1,84,
73,84,91,84,1,18,60,47,33,73,47,33,47,33,33,73,73,73,84,73,
47,1,60,60,47,60,60,60,47,60,60,47,73,73,60,60,47,73,18,73,
47,60,47,73,60,73,73,73,1,1,1,84,91,84,73,47,73,47,73,60,
47,60,47,1,60,60,85,85,73,47,47,85,85,60,85,85,73,85,47,85,
1,1,1,84,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,
47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,1,33,47,
60,85,60,1,18,91,47,84,85,84,91,47,91,84,60,85,84,84,33,33,
84,84,85,84,85,33,33,33,18,1,1,1,33,33,18,60,1,1,18,18,
18,18,18,18,18,73,18,1,1,1,18,1,84,33,1,1,1,18,18,60,
33,18,18,18,33,47,18,73,73,33,33,33,33,33,33,47,60,47,60,18,
33,18,33,33,73,73,18,18,18,33,1,1,1, };
static unsigned short stb__courier_20_latin1_a[224]={ 170,170,170,170,170,170,170,170,
170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,
170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,
170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,
170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,
170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,
170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,
170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,
170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,
170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,
170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,
170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,
170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,
170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,
170,170,170,170,170,170,170,170, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_20_latin1_BITMAP_HEIGHT or STB_FONT_courier_20_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_20_latin1(stb_fontchar font[STB_FONT_courier_20_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_courier_20_latin1_BITMAP_HEIGHT][STB_FONT_courier_20_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_20_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_20_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_20_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_20_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_20_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_20_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_20_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__courier_20_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__courier_20_latin1_s[i] + stb__courier_20_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__courier_20_latin1_t[i] + stb__courier_20_latin1_h[i]) * recip_height;
            font[i].x0 = stb__courier_20_latin1_x[i];
            font[i].y0 = stb__courier_20_latin1_y[i];
            font[i].x1 = stb__courier_20_latin1_x[i] + stb__courier_20_latin1_w[i];
            font[i].y1 = stb__courier_20_latin1_y[i] + stb__courier_20_latin1_h[i];
            font[i].advance_int = (stb__courier_20_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__courier_20_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_20_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_20_latin1_s[i] + stb__courier_20_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_20_latin1_t[i] + stb__courier_20_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_20_latin1_x[i] - 0.5f;
            font[i].y0f = stb__courier_20_latin1_y[i] - 0.5f;
            font[i].x1f = stb__courier_20_latin1_x[i] + stb__courier_20_latin1_w[i] + 0.5f;
            font[i].y1f = stb__courier_20_latin1_y[i] + stb__courier_20_latin1_h[i] + 0.5f;
            font[i].advance = stb__courier_20_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_20_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_20_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_20_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_20_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_20_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_20_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_20_latin1_LINE_SPACING
#endif

