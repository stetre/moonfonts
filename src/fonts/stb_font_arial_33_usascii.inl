// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_33_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_33_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_33_usascii_BITMAP_WIDTH         256
#define STB_FONT_arial_33_usascii_BITMAP_HEIGHT        136
#define STB_FONT_arial_33_usascii_BITMAP_HEIGHT_POW2   256

#define STB_FONT_arial_33_usascii_FIRST_CHAR            32
#define STB_FONT_arial_33_usascii_NUM_CHARS             95

#define STB_FONT_arial_33_usascii_LINE_SPACING          21

static unsigned int stb__arial_33_usascii_pixels[]={
    0x10001330,0x01357753,0x200d5cc0,0x5d4c04c8,0x3c8b2200,0x26200000,
    0x26661999,0xa9880099,0xa98009ab,0x00aa800a,0x01357510,0x00009800,
    0x64009988,0x2203c984,0x791001aa,0xf0199000,0x3ee2007f,0xffffffff,
    0xfffa802d,0xd81fe604,0x3f600fff,0x90007f21,0xffff700d,0x3ffffe3f,
    0x3fff6a05,0x201cffff,0x7d404ff9,0x3ff6201f,0x01dfffff,0x3ffff6a0,
    0xff50000c,0x6437cc07,0xffff704f,0x02fd801b,0xff83fc40,0x7ffe4403,
    0xfffdcdef,0x3a601eff,0xff302fff,0x03bfff20,0x1be227d4,0x33ff2e20,
    0x3fffee01,0xbfffff1f,0x3fffff20,0x03ffffff,0xdfb01bfa,0x7ffffd40,
    0x04ffffff,0xffffffd8,0xfa8000ef,0x217ee03f,0xcff982fd,0x3e605feb,
    0x04fa8006,0x7f4405dd,0x36e602df,0xfe803fff,0x3a0ff305,0x3fe200df,
    0x2a04fb80,0xefffffff,0xf8ffcc02,0x7fff404f,0x3ff6e61b,0x03ff704f,
    0x7e40ffe2,0xb7109cff,0x7ec0bfff,0xbffb51cf,0x07ff5000,0x0ffc1fe4,
    0x3ff11fe4,0x2000bf60,0xf30002fd,0xd88003df,0x37dc03ff,0xff887f98,
    0x8827e402,0xfff980ff,0x1fffdfdd,0x7fc7fe60,0x03bff204,0x105fff50,
    0x3fee09ff,0x01effa80,0x4c1fffcc,0x3ff905ff,0x03ffa800,0x0ff107fa,
    0x07fd03fa,0x3e000df3,0xff88000f,0x3ee0000d,0x41fea01f,0x1ff887f9,
    0xc807fe20,0x91ffe84f,0x981ffe6d,0x209ff1ff,0x2e006ff9,0x7fd80fff,
    0x3fa0bfd0,0xfff5000f,0x300efd83,0xfa8007ff,0x81ff103f,0x87f886fa,
    0x02fd84fc,0x2a06f980,0x205fd81a,0x86620ac9,0x1fea06fd,0x7fc43fcc,
    0x501bee01,0x27fcc1ff,0x80ffecd9,0x09ff1ff9,0x9000bff2,0x5ff505ff,
    0xfc82ff98,0x7fdc003f,0x300bfe24,0x7ff50001,0x3feeaaa6,0xadfdaaaa,
    0x3ee1fe62,0x80037cc5,0x0ffe03fb,0xff901ff5,0x9bf67fff,0xff501ff8,
    0x3e61fe60,0x013fe01f,0x1ffa8ffe,0x01bc99b2,0x13fe3ff3,0x440037f4,
    0x8bff04ff,0x0fff07fc,0xfa9ffe00,0x5000000f,0x3fff67ff,0xffffffff,
    0x3fe27fff,0x3fa27e41,0x03fd0002,0x0bfa1ffc,0x3fb3bff2,0x7f44ffaf,
    0x301ff505,0x03ff30ff,0x36007fe6,0xc87fea5f,0x8ffcc006,0x4ff884ff,
    0x20dff000,0x13fe0ffc,0x40017fe2,0x4df72ffe,0x000acca8,0x764ffea0,
    0xeeeeffee,0x746eeffe,0xf517f43f,0x1fe2000d,0x3fcc7ff0,0x3ea1ffdc,
    0x3fdc3fff,0xf980ff98,0x500ff987,0x9fee00ff,0x01b24ff8,0x3fe3ff30,
    0x002ff984,0xf301ffb0,0x207fe65f,0x90004ff9,0x65bf27ff,0x02ffffff,
    0x207ff500,0x03fc41fe,0xdfb37ff5,0x50001fe8,0x23ff80bf,0x1ffd44fc,
    0x4c1fffc8,0x03ff307f,0x0ff50ff3,0xfa8037dc,0x653ffa0f,0x8ffcc006,
    0x1ffb84ff,0x03ff9000,0x837e57fa,0x50003ffa,0x337f67ff,0xfffeceff,
    0x3ffa8002,0x7d40ff88,0x7fffe405,0x0017ea0e,0x7fc02fc8,0xffd07fa3,
    0xf83ffcc0,0x309ff00f,0x40bfb0ff,0xff3005fd,0x77fffcc3,0x8ffcc006,
    0x1ffd84ff,0x07ff7000,0x0ffe3fee,0x80017fdc,0xfffd4ff9,0x0fff985b,
    0x41ffd400,0x04fc86f9,0xfe82cb98,0x2004d441,0x9ffc00ff,0x1ffc47f8,
    0x3e21bfe0,0x85ff500f,0x3fee27f9,0x4013fa02,0x7f4c3ff8,0x802dffff,
    0x09ff1ff9,0x20003ff9,0xff101ffc,0x3ea01ff9,0xff50002f,0xa81bffa7,
    0x7d4004ff,0xe84fb83f,0x7d40002f,0x17fffe45,0xff806f98,0xffa8df33,
    0x5427fc00,0x3ffd406f,0x3ffe2ff3,0x0027fc02,0x3f2609ff,0x200dffff,
    0x09ff1ff9,0x20007ff7,0x3f600ffd,0x3fe205ff,0x7ff70004,0xfd00bff6,
    0x3ffa800d,0x0ff83fd8,0x70ff4000,0x05ffb9ff,0x7ff009f7,0x0ff91bea,
    0xfc82ff98,0x267fd805,0x807ff17f,0x3e003ff8,0x7e7e405f,0x3fe606ff,
    0xff509ff1,0x1ffa0009,0x805fff50,0xf90005ff,0x007ff23f,0xfa800ffb,
    0xfffffb3f,0xffffffff,0x5fa800ff,0x0df70ff4,0x7ff003fb,0x0dfd17ea,
    0xfe80ffa8,0x97ff6203,0x7ffb17f9,0x8027fc40,0xb6404ff8,0xf303ffd8,
    0x7c13fe3f,0xff88006f,0x807ff806,0x44000ffd,0x03fee7ff,0x0988ff90,
    0x3f65ff50,0xffffffff,0x007fffff,0x8df10ff4,0x03fc1ff8,0x8df13ff8,
    0x3ff407fd,0x3f2037e4,0x223fcc0f,0x17fe03ff,0x2027fcc0,0x417fe26c,
    0x09ff1ff9,0x0c80fff6,0x7401ffec,0x4ffb804f,0x527fe400,0x5fd805ff,
    0x7dc0ffe2,0x3df7311f,0x339fb333,0x2fdc0033,0x8bfe17ee,0x7ff005fa,
    0x07fee3fc,0x3ea2ffdc,0x417fc02f,0x06fc87f9,0x7d401ffa,0x8d90623f,
    0x3ff307fe,0x7fcc13fe,0x8cff980f,0xf9805ffa,0xfff8801f,0x1fff1001,
    0x3e027fc4,0xb827fc3f,0x427dc0ff,0x3e0002fe,0x742fdc1f,0x400ff22f,
    0x987f63ff,0xfffa84ff,0x3017fe63,0x0ff301ff,0x3f601ff5,0x1ffb800f,
    0x6c6c8ffd,0x23ff307f,0x3fee04ff,0x7ffe441f,0xfd800fff,0x3ffea005,
    0x1fffd402,0xfb817fe4,0x207ff41f,0x3fd87fe8,0x70000ff8,0xf0ff50bf,
    0x800ff43f,0xb13ee3ff,0xdf933bff,0xbffb7dff,0x80ffa801,0x0ff987f9,
    0xb003ff70,0x90ffdcff,0x982ffc4d,0x809ff1ff,0x89adfffc,0x03ffffb9,
    0x05ffb553,0xadfffb80,0x9fffb531,0x70bffe20,0xfff509ff,0x09ffd537,
    0x07f983fd,0x301ff100,0x87fcc1ff,0x3fe006f8,0x3fa1fea3,0xff8dffff,
    0x5003ffff,0x21fe60ff,0xff101ff9,0x4cbfd005,0xfb9b25ff,0x23ff303f,
    0xffb804ff,0xffffffff,0x7d40cfff,0x50004fff,0xffffffff,0xe9805fff,
    0x5fffefff,0x3fffffa0,0x87f885ff,0xf70005fa,0x54efec09,0x013ee4fe,
    0x27f43ff8,0xa8b7fae2,0x4c41cefe,0xf307fa80,0x403ff10f,0x7fc404fe,
    0x64f7ff42,0x206ffc8e,0x09ff1ff9,0x3ffff220,0xffc8beff,0x13ffe63f,
    0xffd71000,0x00159dff,0x3bffff62,0xffffc803,0x90df504e,0xff10009f,
    0x7fff4c01,0x00bf60df,0x7fc43ff8,0x3f200003,0x307fa81f,0x03ff10ff,
    0xf7007fd4,0xffffd10d,0x403fffff,0x09ff1ff9,0x01353100,0x00307fb1,
    0x01531000,0x00131000,0xa8801530,0x8000aa81,0xdb8803ea,0x000aa82c,
    0xff507ff1,0xfd880007,0x20ff703f,0x1ff887f9,0xff027ec0,0x3fff2205,
    0x4c00dfff,0x009ff1ff,0x000a8000,0x00000000,0x00000000,0x00000000,
    0xff980000,0x03dff902,0x09ffd300,0x7f9837dc,0xf9807ff0,0x005fb80f,
    0x20013fb3,0x09ff1ff9,0x00000000,0x00000000,0x00000000,0x00000000,
    0xfd888000,0x3ffaa01f,0x4c41acef,0x102effeb,0x3e609ff5,0x015dfd07,
    0x0ff41fe4,0x3100d900,0x3fe3ff73,0x0000099d,0xfffffff0,0x0013fe6d,
    0x00000000,0x00000000,0x00000000,0x006ffff8,0xfffffff5,0x7fffffff,
    0x0ffffd40,0xff507f98,0x1be201ff,0x6c8009f5,0xfffffb80,0x2bfffff1,
    0xfffffffa,0xffffffff,0x3ffffe5f,0x09ff36ff,0x00000000,0x00000000,
    0x00000000,0x3bffe600,0x76e54000,0xacdeffff,0x17ffd400,0x7d40ff30,
    0x8bee00ff,0x000000fe,0x23ddddd5,0xd54eeeed,0xdddddddd,0x9ddddddd,
    0x66666664,0x0009ff34,0x00000000,0x00000000,0x00000000,0x44000018,
    0x01310001,0x06200660,0x00098260,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x0d54c000,0x000c4000,
    0x009aa980,0x40001100,0x0000aa98,0x55437951,0x00002660,0x40000088,
    0x80098019,0x4c0000cc,0x88009aaa,0x0cc40019,0xaa855530,0x80179510,
    0x3f620099,0x4001efff,0x1effffd8,0x3ff6e600,0x800bffff,0x0bdfffd9,
    0xfffff900,0xb1001bff,0xf1bfffff,0x001ffc7f,0x3bfff220,0x7cc0001d,
    0xfffe981f,0x05fb00ce,0xfffd7100,0x6409dfff,0x3fa000ff,0xfffff887,
    0x3fea7fe0,0xff01efff,0x3bffe209,0x5001fffe,0xffffffff,0xffff9009,
    0x3fffffff,0x7ffffdc0,0x36200fff,0xffffffff,0x7ff401ff,0xffefeccd,
    0x8000ffe3,0xfffffff8,0x3e60001f,0x7fffdc1f,0xfb81ffff,0x7ffd4004,
    0xffffffff,0x00ffc81e,0x3fa1ffa0,0x6ffc7fff,0xfffcacff,0xf904ff80,
    0x02ffcc3f,0x445fffc4,0x3602ffeb,0x2e60bfff,0xfa80fffe,0xdfd30aff,
    0x273ffa01,0x0bfff260,0x7ec17fe4,0x00ffe3ff,0x30affc80,0x20003ffd,
    0x3fea1ff9,0xffeb88be,0x7003fc40,0x4435bfff,0x641fffda,0x3fa000ff,
    0x806ffcc7,0x7440efff,0xf03ee86f,0x00ffb0bf,0xff105ff9,0x03bfee0d,
    0xe88dff90,0x0bfb00ff,0xf9809ff3,0x03ff985f,0x3ff8fffa,0x03ff5000,
    0x20009ff1,0x3ffa1ff9,0xe83ffa80,0xfff9801f,0x45ffb802,0x3a000ffc,
    0x017fd47f,0x3e603fff,0x2ffc003f,0x7f4037ec,0x303ff607,0x36003fff,
    0x0ffea1ff,0x7e42ff98,0x0ffc800f,0x3ea03fdc,0x000ffe3f,0xff9037f4,
    0x3ff30001,0xfe813fe6,0xe803fc86,0x3f2001ff,0x003ff21f,0x7fdc7fe8,
    0xd017fe00,0xffd800bf,0x74027fc0,0x03fee06f,0x54007ff9,0x03fee3ff,
    0x7fd89ff0,0xd83df300,0x1ffc406f,0x2f2a27ff,0x07ff3009,0x5101ffcc,
    0x47fe6179,0x3f600ca8,0x4c05fa87,0x7c4004ff,0x003ff24f,0xf9537fe8,
    0x7ff0557f,0x5546fc80,0x22dff501,0xfc800ffe,0xf0dfd01f,0xb01000ff,
    0x8dfd00ff,0x40002ffb,0x3ff805fe,0x3ffeaffe,0xffa81eff,0x4427fc01,
    0x9cfffffd,0x7f4001ff,0xfb80ff04,0x40a8000f,0x3a000ffc,0xfffffb7f,
    0x02ff81ff,0x9ff07fdc,0x7ff7fe40,0xbff3001f,0x4c4ffb81,0x900006ff,
    0x8ffd00ff,0x000cfff9,0xff009ff0,0x6fff7fc7,0x642fffdb,0x2ff400ff,
    0x7e66fff4,0x2001ffef,0x5fb02ffc,0x0003fec0,0x4001ff90,0xffdd97fe,
    0x2ff81ddd,0xff07fdc0,0x7fff4409,0x7fd4000e,0x84fffcdf,0x00004ffa,
    0xff801ff7,0xeffffb87,0xbfd000ac,0x3e3ff880,0x7f4c1eff,0x7403fe47,
    0x217fe46f,0x201fffd8,0x02fffda8,0x6ff813ee,0x3ff20000,0x71ffa000,
    0x17fc01ff,0x9ff1fee0,0x17fffdc0,0xffff8800,0x7ff703ff,0x3fea0000,
    0x03ffee04,0x3fffffea,0x3f600bef,0xf1ffcc06,0x3fea03ff,0x3601ff63,
    0x40ffe66f,0x2e01fff8,0x4c03ffff,0x09ff106f,0x07fe4000,0xfb8ffd00,
    0x00ffe00f,0x84ff8bf9,0xfffeffd8,0x7ffd4000,0xb83fffee,0x200002ff,
    0x7cc0cffe,0xb7100fff,0x5fffffff,0xc80bfee0,0x017fe3ff,0x03fecdfd,
    0x1ff73fe4,0x900ffdc0,0x809fffdd,0x3ffa80ff,0x77777640,0x1ff90eee,
    0x2e3ff400,0x1bfe00ff,0x7fc4ff88,0xc9fffcc4,0x39d30eff,0x4c3bff90,
    0x3e60effc,0x2600003f,0xfdbdffff,0x51007fce,0x09ffffd9,0x3e603bfa,
    0x00ffe3ff,0x03fe4ff9,0x0df93fec,0x3001ff98,0x3201fff9,0x05ffa82f,
    0x7ffffff4,0x01ff90ff,0x3ee3ff40,0x0bffe00f,0x3fe0ffdc,0x3617fec4,
    0x83ff95ff,0x3ea06ff8,0x017fe22f,0xfffd3000,0x0ff91dff,0x3fff2200,
    0x9beffa82,0x23ffffc9,0x7fdc02ff,0xfb00ff90,0x2602ff4d,0x7e4001ff,
    0x30bf502f,0xeec80dff,0x90fffeee,0x7f4001ff,0xf007fdc7,0xffc85fff,
    0x3e24ff83,0xbffe884f,0x2ffa86ff,0x3fa2ff40,0x20098006,0x361cecb8,
    0x7cc0006f,0xffff505f,0x45ff7dff,0x7fdc02ff,0xe801ff70,0x1017fe6f,
    0xf88003ff,0x10ff105f,0x90001fff,0x03ff21ff,0x7dc6ff80,0x3fbfe00f,
    0x04fffeff,0x0ffdc9ff,0x2fffff98,0xfc807fc8,0x4003fec7,0xfd0006ff,
    0x0007f5cb,0x6e4c0ffb,0x2ff98cef,0xff900bfe,0x3e007fd4,0x101bf65f,
    0xfd0003ff,0x6c0ff40f,0xfc8001ff,0x003ff70f,0xff71bfe2,0x74dffc01,
    0x3e03dfff,0x807ff24f,0xfb07fffa,0xb8ffb00f,0x3ea004ff,0xff88004f,
    0x800ffe63,0xf30007fc,0x201ffc3f,0x0bfe66fd,0x3f23ff88,0xa8ffcc07,
    0x3fec00ed,0xff507f70,0x1ff9000b,0x4c00ffea,0x07fdc4ff,0x04c47ff0,
    0xff727fc0,0x0fffe809,0x2201ffb8,0x7ffc46ff,0x1ffe8802,0xfb80bfe6,
    0x0037fc1f,0x02ca8bff,0xdff07fdc,0x3a2ffc40,0x87fee05f,0x3f201ffa,
    0x807ff71f,0x1be605ff,0x2002fff4,0xdff10ffd,0x85ffb001,0x3fe00ffb,
    0x49ff0003,0xfb00fff9,0xf981dfff,0x13fee05f,0x8807ffee,0x6ff85ffd,
    0xf90bff10,0xffd801df,0x8817fd42,0x17ffc6ff,0x7dc1ffc8,0x44fe880f,
    0xff105ff8,0x81ffe23f,0x7fc02ffc,0x05fff980,0x20fffe98,0x7d405ffd,
    0x07fdc0ef,0x20007ff0,0x77fe44ff,0xddffb511,0xffc81dff,0x1bff661d,
    0x9bdfffd8,0x0efffb98,0x260cffc8,0xfe880fff,0xba99bcff,0xff885ffe,
    0xffd711bf,0x42ffff83,0xfff04ffc,0x407ff443,0x3a60dffa,0x3ff21fff,
    0x17ffaa2d,0x7d40bf60,0xa9acefff,0x42ffffec,0x9acefff8,0x80fffda9,
    0x3fe00ffb,0x09ff0003,0xfffffffb,0x17ffa2bf,0x3fbffff6,0x7e401eff,
    0xffffffff,0x3ffa00ef,0x01ffffef,0x7fffffec,0x2604ffff,0xffffffff,
    0xffcff81f,0x00dfffef,0xffdffff3,0x7ffdc05f,0x1ffbfffe,0x7fffffec,
    0xfa800eff,0x3fffa204,0xffffffff,0xffff500c,0x3fffffff,0xf803fee0,
    0x9ff0003f,0x3ffffaa0,0x500fd82e,0x09ffffff,0x7fffe4c0,0xf9002eff,
    0x0017bfff,0x3ffffb6e,0xfc8802df,0xf01bdfff,0xffffd35f,0xfffb1007,
    0xfb5005df,0x3ff15dff,0xffffff50,0x03fc4007,0x7ffffed4,0xc8800cef,
    0xcfffffff,0x803fee01,0xff0002ee,0x80198809,0x00a98801,0x00d4cc00,
    0x00015300,0x40001530,0x26200018,0x01530000,0x20002600,0x50000998,
    0x0a998005,0x4d4cc000,0x00000001,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x0004cc00,
    0x32a200a0,0x3302aa1b,0x33333333,0x4c433333,0x99880009,0x00026620,
    0x00cc4133,0x30009988,0x00066213,0x33304cc4,0x33333333,0x4c133333,
    0x4cc40009,0x09999999,0x4c426600,0x01999999,0x0cc42660,0x4c426200,
    0x0007ff09,0xfe881f62,0x3ff4ffff,0x7fffffc4,0xffffffff,0x001bfee7,
    0x7dc1fff3,0x3ff2006f,0x200bfee3,0xfa806ffe,0x005ff92f,0x3e63ff90,
    0xffffffff,0x3fffffff,0xf90013fe,0xffffffff,0x2201bfff,0xffffb3ff,
    0x7fffffff,0x369ff301,0x3f6003ff,0x3febff76,0x0ff90003,0x765efff4,
    0x3e21ffdf,0xffffffff,0x747fffff,0x3fa004ff,0x04ffd82f,0x7cc5ffa8,
    0x7ffc404f,0x87fe400f,0xf8005ff9,0x3fffe66f,0xffffffff,0x3fe3ffff,
    0x7ffe4004,0xffffffff,0xff881fff,0xffffffb3,0x7fffffff,0xffb4ff98,
    0x5bf6003f,0x07ff5ffb,0x6c1ff200,0x7fec42ff,0x2aaaa21f,0xeaaaaaaa,
    0x7ffc45ff,0x04ffb801,0x4403fff1,0x6ff80eff,0x17fffd40,0xffd1bfa0,
    0x1ffd4001,0x95555551,0x55555bff,0x0027fc15,0x26667ff2,0xffda9999,
    0xd9ffc41f,0xaaaaabff,0x21fffeba,0xfffb4ff9,0x5dbf600d,0x007ff5ff,
    0x3e61ff20,0x07ffe04f,0x07ffd400,0x26037fdc,0x3ea00eff,0x3ffd00ef,
    0xd803ff20,0x2205fdcf,0x1ffdc3ff,0x001ffb00,0x7c00ffea,0x7fe4004f,
    0x89ff9000,0x0ffb3ff8,0xf99bff20,0x9ffffb4f,0x3eedfb00,0x8007ff5f,
    0x1aaffda9,0x7dc01ff7,0xff98001f,0x0fffa01f,0xc801ffe8,0x3ffc85ff,
    0xf807fea0,0x2a07fbaf,0x37fc41ff,0x004ff880,0x7c00ffea,0x7fe4004f,
    0x8dff1000,0x0ffb3ff8,0xf987ffc0,0xffdffb4f,0xf76fd803,0x544ffebf,
    0xffb80acb,0xdf94ffff,0x001ff980,0x2017ffc4,0xfb80fff8,0x3ffa004f,
    0x1017fea2,0x3fe607ff,0xf901ff98,0x003ff60f,0xa8007fee,0x9ff003ff,
    0xfc8aaa20,0x3ff6000f,0x7ecffe20,0x47ff2007,0x5ffb4ff9,0x6fd80dff,
    0x2ffebff5,0x4ffffff9,0x777fff54,0xf880bfd3,0x7ff4001f,0x8bff7004,
    0x4c006ff8,0xeff88fff,0x705fe800,0xe81ffcdf,0x07ff305f,0xa800dfd0,
    0x9ff003ff,0x643fff10,0x3fa000ff,0x6cffe20f,0x3fee007f,0x3f69ff32,
    0x6c09ff97,0x3e9ff56f,0xfeceffef,0x87fc83ff,0x1ff805fe,0x017ff200,
    0x7ec5ffd0,0xffb8001f,0x9001ffdd,0xd93fa0ff,0x03ff886f,0xff301bfa,
    0x3ffa8007,0xf889ff00,0x07fe41ff,0x446ffa80,0x00ffb3ff,0xff987fec,
    0x3fe2ffb4,0x26dfb01f,0x3ffff4ff,0xfc87ff98,0x4406fd87,0xff7001ff,
    0xff98001d,0x003ffa8f,0x0fffff60,0x441ffa80,0x03fea1ff,0x7dc01ff5,
    0x03ff201f,0x007ff500,0xffe893fe,0x400ffc81,0x442fffb8,0x00ffb3ff,
    0xff99bfea,0x7fd4ffb4,0x3e6dfb06,0x203fff3f,0x3fe40ffd,0x3e603fe4,
    0xfff9801f,0x9ff70001,0x88000dff,0x44005fff,0x23fd43ff,0x37e42ff8,
    0xf813fe20,0xffa8005f,0x229ff003,0xff901ffe,0xfddddddd,0xf109ffff,
    0x441ff67f,0x22fffca9,0x8ffb4ff9,0x6fd84ffc,0x1bfe7ff1,0x7e41ffa8,
    0x202ffb87,0x7c401ffc,0x740002ff,0x0000ffff,0x0077ffc4,0xbf913fa0,
    0x4fe89fd0,0xf507fd80,0xff50003f,0x233fe007,0x3f200ffe,0xffffffff,
    0xf101dfff,0x3ffff67f,0xffffffff,0xda7fcc4f,0x0fffc47f,0xf2ff9bf6,
    0x17fc40bf,0x37f41ff2,0x401fff88,0x80004ffe,0x0003fff9,0x05ffffd8,
    0x3fa37e40,0x3e27fc83,0x1ffa802f,0x50006fd8,0x3fe007ff,0x6402ffec,
    0xfcccccff,0x7c400dff,0xfffffb3f,0x3dffffff,0x3f69ff30,0x6c6ffa87,
    0x7fc7fe6f,0x90bfe204,0x37fea0ff,0x07fffa60,0x0005ffc8,0x0001ff60,
    0x3ffaffee,0x43fe6002,0xffa81ff9,0x2001ff50,0x1ffc44ff,0x03ffa800,
    0xdffffff0,0x807fe401,0x2200effc,0x57ffb3ff,0x80335555,0x0ffb4ff9,
    0x6fd93ff6,0x01ffc7fa,0x7fc85ff1,0x3fbffee0,0x701ffdff,0x00001dff,
    0x20003fec,0xfff36ff9,0xb97fc001,0x64bfe06f,0x1ff2006f,0x20001ff7,
    0xff003ffa,0x409ff7df,0x3f200ffc,0x4ffe206f,0x4c0007fd,0x20ffb4ff,
    0xdfb1fff8,0x03ff87f4,0xff90bfe2,0xefffe980,0xf981ff9a,0x400001ff,
    0x220007fd,0x3fee1fff,0x6d3f6006,0x753f604f,0x3fe6003f,0x80017fa2,
    0xff003ffa,0x407ff61d,0x7ec00ffc,0x27ff104f,0x4c0007fd,0x40ffb4ff,
    0x4dfb6ffa,0x407ff0fd,0x3fe42ff8,0x3e609880,0x17ffc41f,0x3fec0000,
    0x07ffb000,0x2e007ffd,0x5c05ff6f,0x8003ff5f,0x05ff15fe,0x01ffd400,
    0x3fe24ff8,0x00ffc80e,0x4417ffc4,0x00ffb3ff,0xfb4ff980,0xdcffd80f,
    0x3ff9b26f,0xf70bfe20,0x3e60001f,0x027ff41f,0x07fd8000,0x20bff700,
    0x9801fff8,0x200ffaff,0x007f9ff9,0x7fb8ffb8,0x1ffd4000,0x7dc4ff80,
    0x00ffc84f,0x440fffb8,0x00ffb3ff,0xfb4ff980,0xffff880f,0x80ffe06f,
    0x7fdc2ff8,0x7cc0009c,0x013ff21f,0x07fd8000,0x00fff980,0x2003bfea,
    0xf806fdff,0x88005fdf,0x004feaff,0x801ffd40,0x1ffe84ff,0xd8007fe4,
    0x9ffc45ff,0x4c0007fd,0x00ffb4ff,0x40dffff5,0x3fe203ff,0x2ffffcc2,
    0x547fe600,0xaaaabfff,0xaaaaaaaa,0x00ffb000,0x801ffe88,0xfd805ffd,
    0xffd803ff,0xdf90003f,0xa80001ff,0x9ff003ff,0x641dff30,0xff1000ff,
    0xd9ffc45f,0x7cc0007f,0x200ffb4f,0xff56fffd,0xf880ffe9,0x6ffea82f,
    0xa8ffcc00,0xffffffff,0xffffffff,0x00ffb001,0x1004ffd8,0xfb805fff,
    0xffa801ff,0xff30000f,0xf50000bf,0x13fe007f,0xff927fdc,0x77fdc001,
    0x3f67ff10,0x7fcc0007,0x2200ffb4,0x9ff56fff,0xff880ffe,0x20002202,
    0xfff51ee9,0xffffffff,0x003fffff,0xfb801ff6,0x7fd4006f,0x1ffe600f,
    0x0037fc40,0x000bffa0,0x400ffea0,0x3ffa04ff,0x8001ff92,0x7ff14ffe,
    0x30001ff6,0x01ff69ff,0xff56ffa8,0x00000009,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x0004ccc4,
    0x4c426662,0x01988001,0x20066620,0x00066218,0x2a620331,0x3331009a,
    0x33333333,0x26662133,0x99999999,0x26620999,0x00019999,0x26203300,
    0x00999999,0x00666000,0x3bbbba60,0x001eeeee,0x1aa88031,0xffd03551,
    0xffc8009f,0x000ffd2f,0x3e600ffd,0x3fcc04ff,0x74001ff9,0xffffb87f,
    0x7fe40dff,0xffffffff,0xfff95fff,0xffffffff,0x7fec9fff,0xffffffff,
    0x7d40001d,0xffffe80f,0x0cdeffff,0x5fff1000,0xffffb800,0x01ffffff,
    0x3bffff66,0xf54ffa83,0xffffd09f,0x2ffff800,0xfd000ffd,0x7fff300f,
    0x327ff880,0x3fa000ff,0x6f7fff47,0x3f22ffff,0xffffffff,0xff95ffff,
    0xffffffff,0x7ec9ffff,0xffffffff,0x8001dfff,0xfe80fff8,0xffffffff,
    0xb8001eff,0x6c005fff,0xccccccef,0xfff900cc,0x41dfffff,0x9ff54ffa,
    0x03ffffd0,0x4bfffe60,0xfe8007fe,0x1fffcc07,0xc9fffa20,0x3fa000ff,
    0x8877ff27,0xff90fffb,0x55555557,0x3ff23555,0xaaaaaaab,0x3f61aaaa,
    0xbaaaaabf,0x000efffc,0x7407fff4,0xbaaaaaff,0x001fffdc,0x007feff4,
    0x20009fd0,0xa88bfffa,0x33265ffd,0xfd059932,0x32009ffd,0xffd2ffef,
    0x40ffd000,0x5403fff9,0x3f27ffff,0x5ffa000f,0xf900fff8,0x007ff29f,
    0x0003ff20,0xe8807fd8,0x3ee005ff,0x7fe80fff,0x004ffb80,0x13fe3fe6,
    0x001ffc40,0x3f606ff8,0x3fa0002f,0xff007fce,0x1ffa5ff9,0x4c1ffa00,
    0x36203fff,0x327fefff,0x3fa000ff,0x4409ff57,0x03ff95ff,0x001ff900,
    0x8803fec0,0xf9802ffe,0xfe80ffdf,0x00dff007,0x07fcb7ec,0x0003ff30,
    0x7cc05ff3,0x3fa0004f,0x5401ff9e,0xfd2ffaef,0x0ffd000f,0xd805fff3,
    0x27fc8eff,0x3a000ffc,0x801db57f,0x03ff96fe,0x001ff900,0x1003fec0,
    0x7fd00fff,0xffd01ff7,0x401ff600,0x5ff34ff8,0x000ff700,0xff003fee,
    0xb7f4000b,0x67e404fe,0x0ffd2ffa,0xf98ffd00,0x3fd802ff,0x0ffc9ff2,
    0x001ffa00,0x0ffe53fe,0x007fe400,0x800ffb00,0x3f200ffd,0xfd01ff76,
    0x017fa00f,0xbff0ffdc,0x326df900,0x00802def,0x00027fc4,0x01ff2dfd,
    0x25ff53ff,0xfe8007fe,0x00bffe67,0xf93fe40c,0x3ff4001f,0x64bff200,
    0xfc8001ff,0x3f60000f,0x0ffd4007,0xff70ffa8,0x500ffd01,0x3fa007ff,
    0x2007fe46,0xfffffffe,0x20000dff,0x20003ffc,0x03ff36fe,0x97fd5bea,
    0xfe8007fe,0x009fff37,0x3f27fc80,0xaaaaaabf,0x07feaaaa,0xfc93fee0,
    0x999999af,0x4ffe4199,0x99999999,0x03fec099,0x220ffe60,0x03fee3ff,
    0x26667ffa,0x04ffdaa9,0xf987ff30,0x7fffc04f,0x5fffcaac,0x03ffe000,
    0x3a6fe800,0x2a7fb04f,0x00ffd2ff,0xfff3ffd0,0x640003ff,0x3ffff27f,
    0xffffffff,0xf7007fff,0xffffc8bf,0xffffffff,0x3fffff20,0xffffffff,
    0x2003fec6,0x5fd84ff9,0x7f407fdc,0xffffffff,0x3f2003ff,0x207fe80f,
    0xe880eff8,0xfd8002ff,0x7f40002f,0x7fc1ff26,0x3fa5ff50,0xfffe8007,
    0x006ffcff,0xffc9ff20,0xffffffff,0x807fffff,0x7e40effb,0xffffffff,
    0x3ff20fff,0xffffffff,0x3fec6fff,0x717fe200,0x0ffb81ff,0xffffffe8,
    0x02ffffff,0x3ee0bff0,0x8026202f,0x64006ff9,0xe80005ff,0x507fe66f,
    0xe97fd4df,0xffe8007f,0x09ffb1ff,0xfc9ff200,0x1ffa000f,0x901dff30,
    0x555557ff,0xffc85555,0xaaaaaaab,0x3fec2aaa,0x893fe600,0x0ffb82ff,
    0x9999ffe8,0x5ffecaa9,0x8817fd40,0xd80006ff,0x3ff6007f,0xdfd00005,
    0x1fec4fe8,0x1ffa5ff5,0x87fffa00,0x8002fff8,0x03ff27fc,0x6c07fe80,
    0x3ff900ff,0x01ff9000,0x003fec00,0x4fe8ffea,0xfd01ff70,0x5ffb100f,
    0x6667fec0,0x1fffcccc,0x07fe4000,0x417ffa20,0x9ff54ffa,0x7fc8dfd0,
    0xffa83fe2,0xd000ffd2,0xfff503ff,0x27fc8001,0x3a000ffc,0x027fc07f,
    0x90003ff9,0x6c0001ff,0x7fe4007f,0x5557ff72,0x557ffb55,0xf8803ff4,
    0xffff105f,0xffffffff,0xfc80009f,0x3ffa200f,0x553fea04,0x46fe84ff,
    0x8bf51ff9,0x0ffd2ffa,0x640ffd00,0x7e4006ff,0x8003ff27,0x3fe207fe,
    0x007ff202,0x0003ff20,0x74007fd8,0xffff90ff,0xffffffff,0x003ff4ff,
    0x3fee0ffd,0xcccccccc,0xdca87ffc,0x103fec00,0xfa807ffd,0xd09ff54f,
    0x369fd0df,0xe97fd43f,0x7fe8007f,0x0027ff40,0x07fe4ff9,0x440ffd00,
    0x3ff201ee,0x0ffc8001,0x01ff6000,0x3f25ffa8,0xffffffff,0x3fa7ffff,
    0x41ffa007,0xff9006fe,0x203ffb85,0xff305ff8,0x01fc005f,0xffc86fe8,
    0x7fd40ff8,0xd000ffd2,0xfff980ff,0x64ff9001,0x3fa000ff,0xffc80007,
    0x0ffc8001,0x01ff6000,0x4001ffe8,0x7fe80ffb,0x30bff100,0x3e2009ff,
    0x03ffcc6f,0xff103ff9,0x0fcc003f,0xf986fe80,0xffa85fcf,0xd000ffd2,
    0xfff700ff,0x64ff9001,0x3fa000ff,0xffc80007,0x0ffc8001,0x01ff6000,
    0x001bffa6,0x3fa03fee,0x3ffe8807,0x2001ffc8,0x7fe41ffe,0x17ff622d,
    0x1000ffec,0x37f400fb,0xa82fffe8,0x55ffd2ff,0x55555555,0x6c01ffa1,
    0x7fc805ff,0xe8003ff2,0x13fea07f,0x8001ffc8,0xaaaabffc,0x2aaaaaaa,
    0x2aaafff6,0xefffedcb,0x0ffb8000,0xaaaaffe8,0x5fffdcba,0xa800dff0,
    0xfffe84ff,0x504fffef,0x55555bff,0x3a655555,0x41bfa000,0xfa80fffb,
    0xfffffd2f,0x5fffffff,0x7c401ffa,0x3fe403ff,0x74001ff9,0x13fea07f,
    0x8001ffc8,0xfffffffc,0xffffffff,0xffffffb0,0x1bffffff,0x03fee000,
    0x3ffffffa,0x0effffff,0x4003ffa8,0xfb80fff8,0x203effff,0xfffffffe,
    0x006fffff,0x7cc1bfa0,0x25ff505f,0xfffffffe,0xfd2fffff,0x7ffd400f,
    0xfc9ff201,0x1ffa000f,0x3204ffa8,0xfc8001ff,0xffffffff,0xb0ffffff,
    0xffffffff,0x800017bd,0xffe80ffb,0xeeffffff,0x03ff601c,0x80fff200,
    0xfff00198,0xffffffff,0x00000dff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xd7000000,0xdddddddd,
    0x2601dddd,0x2001accb,0x001acca8,0x02af2ea6,0x2a201aa8,0x2f2e600a,
    0x59751001,0x310aa803,0x55301597,0x54155100,0xaaaaaaaa,0x05541aaa,
    0x2e603773,0x50aa80ac,0x15544159,0x2aa8aaa0,0xa880aa60,0x88c40002,
    0xffff9019,0xffffffff,0xfffd881f,0x2201efff,0xeffffffc,0x3fffa200,
    0xf884ffff,0x07fe603f,0x3ffffff2,0x3ffee00d,0xff00dfff,0xffffff33,
    0x402ffa89,0x3ffa0ffb,0xffffffff,0x7d4ffc4f,0xf30fffff,0x443fffff,
    0xffffc9ff,0x5c0bff60,0x81ff23ff,0xdf901ffe,0x53f66000,0xcca81ffd,
    0xdccccccc,0xeffe85ff,0x81fffecc,0xdcceffe8,0xff982fff,0xfffeccef,
    0x301ffc44,0xeffc83ff,0x80effecc,0xfdcdfffe,0xfcff81ff,0x4fffecff,
    0x3fa02ffc,0x777776c5,0x43fffeee,0xfdeffcff,0xcfff9eff,0x3fe27ffe,
    0x445ffffc,0x7fcc0fff,0x440ffd45,0x7ff03fff,0xfffea800,0x0003ffb4,
    0x3ea077f4,0x84ffa82f,0xff983ffc,0x407ff40f,0x3e20fff9,0x87fe603f,
    0xffb83ffb,0x2067fdc4,0xfff86fe9,0x23ffcc2e,0xff300ffc,0x5ffa8005,
    0x220ffff8,0x642efffd,0xdfff12ff,0xff503515,0x207ff44b,0xffa83ff8,
    0x01ff985f,0xeffffc88,0x003ffb0b,0x3207fee0,0x313b607f,0x7fd409ff,
    0xc813fe64,0x0ffe21ff,0xff11ff98,0xf13ff40b,0x1ffd40df,0x7dc07ffe,
    0x40ffe21f,0x7cc007fc,0x03fff06f,0xf103fff5,0x07ffe29f,0xfc97fec0,
    0xb0dfb02f,0xdf70ffdf,0xffffda80,0x01ffc81d,0x703ff980,0xfc8007ff,
    0x23ff400f,0x3fea00a9,0x980ffe22,0x03ff31ff,0x7ff70dcc,0x7fc5ff80,
    0xd0bfea06,0x013fe0df,0xf00eff88,0x1bfe20df,0xdff15ff8,0x57ff4400,
    0x3fee04ff,0x0ffd7fc0,0x3ae213fa,0x200befff,0xfd0007fb,0x77ffc40d,
    0x06fd801b,0x3000ffc8,0x7c45ffb5,0x47fe603f,0xfc8007fb,0x9999999f,
    0x2ffc7fd9,0xfb85ff30,0x00ffd40f,0x201ffe88,0x17fe05ff,0xbff15fe8,
    0xffff9800,0x317fc406,0xf88ffaff,0x7fffcc1f,0x0df5002d,0x803ff700,
    0xdffffffa,0x700bfd02,0xdb9303ff,0x45ffffff,0x3e603ff8,0x000ff91f,
    0xfffffffb,0x41ffffff,0x3fe604ff,0x361ffc42,0x3ffa006f,0xf027fc02,
    0x8aff409f,0xfc8004ff,0x4fe800ff,0x52fe57ee,0x3dff50ff,0x005f8800,
    0x98037fc4,0xeffffffc,0x5402ffc0,0x3ffa61ff,0xffcdffff,0x980ffe22,
    0x00dfd1ff,0xffffffd0,0x1fffffff,0xff301ffc,0x7c4dfb05,0x7ffb003f,
    0x7c07ff00,0x457fa04f,0xfb8003ff,0x6fb801ff,0xb3fd4ff6,0xffff509f,
    0x00d40039,0x000bfee0,0x3ffff6e6,0x2e017fa0,0xbffd11ff,0x17fd4137,
    0x7d407ff1,0x000ffb1f,0x7c000dfb,0x0bfe603f,0x7fd47fe6,0x04ffc800,
    0x7fc07ff0,0x7c57fa04,0x7fcc003f,0x7cc00eff,0x3e23ff0f,0x2205ff1f,
    0x02dffffc,0x0ffd0000,0x5ffb1000,0x7e4037ec,0x407ff90f,0x3fe22ffb,
    0x647fee03,0x8564407f,0x3e0007fc,0x0bfe603f,0x05fea7f4,0x2005ffb8,
    0x13fe03ff,0x7ff15fe8,0xfaffe800,0x9bff804f,0x7d5ff47f,0xfffd5007,
    0x3331017f,0x013fe600,0xff9817b2,0xf007ff24,0x203ff4df,0x27fc2ffc,
    0x3ea3ff90,0x47ff202f,0x76c02ffb,0xf301ffc4,0x23bf205f,0x7fd402ff,
    0x0ffe000e,0x3fa04ff8,0x4007ff15,0x5ff92ffc,0x5fbdfc80,0x02fe77e4,
    0x3ffff660,0x03ffe21d,0x2003ff20,0xff501ffd,0x702ffc45,0x07ff47ff,
    0x7c2fffa8,0xfff980ff,0xff81bfa1,0xb81bfe27,0x01ffc4ff,0x3e205ff3,
    0x7cc07fdf,0x7fc000ef,0xe813fe03,0x007ff15f,0xffd17fe6,0x7f7fd401,
    0x17fffd43,0xfffc8800,0x013fe64f,0x2a00bff1,0xd510aeff,0x1bff70ff,
    0x322ffe44,0x3ea20cff,0x7fe43fff,0xffff511d,0x306ffd43,0xffa85ffb,
    0x3ffee21e,0xf301ffc0,0x7fff405f,0x2bffe204,0x99999999,0xff01ffc1,
    0xf8aff409,0xffe8803f,0x202ffcc0,0x7c40ffff,0x80000fff,0x7fd44fea,
    0x00bfee00,0xfeffffc8,0xff901fff,0x0bfffdff,0xfddffff1,0x889ff5ff,
    0xffffffff,0x7fe41ff9,0x04ffffef,0xffdffff9,0x07ff03ff,0xf5017fcc,
    0x7fd403ff,0xffffffff,0x0ffe0fff,0x3fa04ff8,0xb007ff15,0x3ff205ff,
    0x41bff603,0x00005ffe,0x0175c14c,0xd5000ffb,0x01bfffff,0xdffffea8,
    0x3fff6203,0x0ff90cff,0x1bffffb1,0x3fa607fe,0x4c02efff,0x0cfffffe,
    0x7cc07ff0,0x1bfe202f,0xffffff50,0x1fffffff,0x9ff01ffc,0xff8aff40,
    0x02ffd403,0x2a01ffd1,0x7ff704ff,0x00000000,0x10002ff4,0x26000153,
    0x054c4001,0x00033000,0x4c0004cc,0x0000001a,0x00000000,0x00000000,
    0x00000000,0x00000000,0x000027fc,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x007ff300,0x20000066,
    0xc88002a9,0x8164c004,0x98662198,0xeeeeeeee,0xf53eeeee,0x1bdca89f,
    0x00000140,0x00000000,0x00000000,0x00000000,0x7fd40000,0x05bf5001,
    0x037e4000,0x0017fe40,0x3ff209f5,0x3ea1ffd1,0xffffffff,0xff54ffff,
    0x3ffffa29,0x1f221cff,0x00000000,0x00000000,0x00000000,0x00000000,
    0x4003fee0,0x00bffffa,0x0037e400,0x82037ffc,0xffc823f9,0x3261ffd1,
    0xcccccccc,0xff52cccc,0x3fffff69,0xffeeffff,0x00000007,0x00000000,
    0x00000000,0x00000000,0x2a000000,0x01cffffd,0x800df900,0x201ffefb,
    0xdabf9bec,0x3a3ff90f,0x400000ff,0x5115db3f,0xfffffff9,0x00000009,
    0x00000000,0x00000000,0x00000000,0x30000000,0x05dffff9,0x4006fc80,
    0x205fcbfe,0xfffffffe,0x3a3ff91f,0x4c00007f,0x6d40171f,0x00001cee,
    0x00000000,0x00000000,0x00000000,0x00000000,0xfffea800,0x6fc800cf,
    0x263fea00,0x3aa200ff,0x7fdc0bff,0x0000df90,0x00003ec4,0x00000000,
    0x00000000,0x00000000,0x00000000,0x30000000,0x267ffff9,0xffeccccc,
    0xd82ccccc,0x7013fa4f,0xff30bfbf,0x55512fdc,0x55555555,0x003a6355,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x53ffa200,
    0xfffffffa,0x44ffffff,0x3fea1ff9,0x3f2df300,0x7f337c44,0x7fffffd4,
    0x4fffffff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x3ee20000,0xddd33fff,0xdddfffdd,0x86fc87dd,0x25f703ff,0x10d40ef8,
    0x7fffd415,0xffffffff,0x0000004f,0x00000000,0x00000000,0x00000000,
    0x00000000,0xd9800000,0x801cffff,0xff8806fc,0x0606fc83,0x00000003,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x7f5c4000,
    0x2000bfff,0xffb806fc,0x002ff980,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x3fff2600,0xf90002ef,0x409ff00d,
    0x000005fd,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x50000000,0x0039ffff,0x0006fc80,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xf5000000,0x2000017f,0x000006fc,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00530000,0x00795000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_33_usascii_x[95]={ 0,2,1,0,1,1,1,1,1,1,0,1,2,0,
2,0,1,3,0,1,0,1,1,1,1,1,2,2,1,1,1,1,1,-1,2,1,2,2,2,1,2,2,0,2,
2,2,2,1,2,1,2,1,0,2,0,0,0,0,0,2,0,0,0,-1,1,1,1,1,1,1,0,0,1,1,
-2,1,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,0,2,0,1, };
static signed short stb__arial_33_usascii_y[95]={ 26,4,4,4,2,4,4,4,4,4,4,8,23,17,
23,4,4,4,4,4,4,5,4,5,4,4,10,10,8,11,8,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,29,4,10,4,10,4,10,4,10,4,4,
4,4,4,10,10,10,10,10,10,10,5,10,10,10,10,10,10,4,4,4,13, };
static unsigned short stb__arial_33_usascii_w[95]={ 0,4,9,17,15,24,19,4,8,8,11,15,4,9,
4,9,15,9,15,15,16,15,15,15,15,15,4,4,15,15,15,14,28,21,17,20,18,17,15,21,17,4,13,18,
14,21,17,21,17,21,19,18,18,17,20,28,20,20,18,6,9,7,14,18,6,15,15,14,14,15,10,15,14,4,
7,14,4,22,14,16,15,14,10,14,8,14,15,22,15,15,15,10,3,10,16, };
static unsigned short stb__arial_33_usascii_h[95]={ 0,22,9,23,28,23,23,9,29,29,10,15,8,3,
3,23,23,22,22,23,22,22,23,21,23,23,16,21,15,9,15,22,29,22,22,23,22,22,22,23,22,22,23,22,
22,22,22,23,22,24,22,23,22,23,22,22,22,22,22,28,23,28,13,3,5,17,23,17,23,17,22,23,22,22,
29,22,22,16,16,17,22,22,16,17,22,17,16,16,16,23,16,29,29,29,5, };
static unsigned short stb__arial_33_usascii_s[95]={ 135,251,76,203,82,221,1,247,64,73,64,
33,102,132,142,246,125,57,226,156,153,210,173,1,21,58,247,242,231,86,17,
85,9,188,170,37,134,116,100,182,67,228,189,38,23,1,233,151,210,113,185,
74,151,204,130,101,80,59,40,106,172,98,49,113,247,49,109,80,141,95,222,
93,1,249,1,170,205,158,111,32,233,25,181,17,16,65,126,208,192,135,142,
53,49,38,107, };
static unsigned short stb__arial_33_usascii_t[95]={ 25,55,119,1,1,1,31,101,1,1,119,
119,119,26,26,1,31,78,78,31,78,78,1,101,31,31,78,78,101,119,119,
78,1,78,78,31,78,78,78,31,78,55,1,78,78,78,55,1,55,1,55,
31,55,31,55,55,55,55,55,1,31,1,119,26,111,101,31,101,31,101,31,
31,55,31,1,55,55,101,101,101,31,55,101,101,55,101,101,101,101,1,101,
1,1,1,119, };
static unsigned short stb__arial_33_usascii_a[95]={ 131,131,168,263,263,420,315,90,
157,157,184,276,131,157,131,131,263,263,263,263,263,263,263,263,
263,263,131,131,276,276,276,263,480,315,315,341,341,315,289,368,
341,131,236,315,263,394,341,368,315,368,341,315,289,341,315,446,
315,315,289,131,131,131,222,263,157,263,263,236,263,263,131,263,
263,105,105,236,105,394,263,263,263,263,157,236,131,263,236,341,
236,236,236,158,123,158,276, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_33_usascii_BITMAP_HEIGHT or STB_FONT_arial_33_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_33_usascii(stb_fontchar font[STB_FONT_arial_33_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_33_usascii_BITMAP_HEIGHT][STB_FONT_arial_33_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_33_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_33_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_33_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_33_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_33_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_33_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_33_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_33_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_33_usascii_s[i] + stb__arial_33_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_33_usascii_t[i] + stb__arial_33_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_33_usascii_x[i];
            font[i].y0 = stb__arial_33_usascii_y[i];
            font[i].x1 = stb__arial_33_usascii_x[i] + stb__arial_33_usascii_w[i];
            font[i].y1 = stb__arial_33_usascii_y[i] + stb__arial_33_usascii_h[i];
            font[i].advance_int = (stb__arial_33_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_33_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_33_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_33_usascii_s[i] + stb__arial_33_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_33_usascii_t[i] + stb__arial_33_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_33_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_33_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_33_usascii_x[i] + stb__arial_33_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_33_usascii_y[i] + stb__arial_33_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_33_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_33_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_33_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_33_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_33_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_33_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_33_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_33_usascii_LINE_SPACING
#endif

