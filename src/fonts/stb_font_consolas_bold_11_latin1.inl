// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_bold_11_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_bold_11_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_bold_11_latin1_BITMAP_WIDTH         256
#define STB_FONT_consolas_bold_11_latin1_BITMAP_HEIGHT         52
#define STB_FONT_consolas_bold_11_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_consolas_bold_11_latin1_FIRST_CHAR            32
#define STB_FONT_consolas_bold_11_latin1_NUM_CHARS            224

#define STB_FONT_consolas_bold_11_latin1_LINE_SPACING           7

static unsigned int stb__consolas_bold_11_latin1_pixels[]={
    0x201dcee0,0x1950399a,0x22002cb8,0x00bc8004,0x2ee9800c,0x75c083b8,
    0x0b91000e,0x77440910,0x22744000,0x3b20ccb8,0xdd103100,0x33000001,
    0x09d10080,0x00007640,0x9665c419,0x2993a83b,0x5570574c,0xdc83b309,
    0x0fff22d9,0x2ef6c0f3,0x235407b1,0x27aa6abe,0x44784c80,0x643b81f9,
    0xd1aafa0d,0xb0222205,0x90310bbd,0x8098175d,0x44440dd8,0x742ef6c0,
    0x0dd886ab,0x442ffe98,0x886abe80,0x506abe80,0xa76ffc4f,0x4c8fcc5d,
    0x1a87e699,0x2530d4a6,0x4fd56669,0x2e7e62fa,0x3540a841,0x2262ffe4,
    0x5511aa18,0x437fe435,0x361ec41f,0x2e0c44c2,0x09365b86,0x43ffc815,
    0x3ffc81ed,0x3f206f44,0x980a843f,0x10990188,0x96e1119f,0xb862264d,
    0x18899365,0x67fdc7b0,0x23e8b94c,0x73dc994c,0x3a6ba74d,0x2f9fd794,
    0xef99365c,0x0fff21fc,0xfe9fa8d3,0x6aa6cb73,0xfaaf6644,0x2e1f81db,
    0x321746ff,0x20fc43ff,0x97dd365b,0x5f53f54c,0xfa93f7e6,0x2f2a2fa9,
    0x0bea7ea1,0x03fe01ff,0x41ea07fc,0xfff9365b,0x8a6cb71f,0x7c41ffff,
    0x5333fee0,0x2a83e65c,0x3f11f899,0x227e21f1,0xf79b9d0f,0x3e66c936,
    0x2a7ea9d0,0xcc86ec2f,0x6cb75ce9,0xaae40d54,0x263f04df,0x1d910eaf,
    0x217d4fd4,0x29b2dc4c,0x972996fb,0x4fe6f74d,0xcac9365c,0x526cb90f,
    0x5fd505fd,0x6b85fd50,0x5f26cb70,0x3226cb70,0x9fb09905,0x06b93299,
    0x66c7d132,0xd2de6c5b,0x972d7b99,0x94d9e65c,0x17f126cb,0x5daeef36,
    0x90355365,0x7c2ffdcb,0xeb89af51,0x4c4d9720,0x74d96e0f,0x936993fb,
    0x9d3df15c,0x54c5c936,0x92e49b1f,0x9b9909b9,0x7b89b990,0x7f26cb70,
    0x89b2dc33,0x101f885c,0x6b8ee991,0x1ec4c8cc,0xef985df3,0x577b73a2,
    0x262f9afa,0xc9365f17,0x3d991aa5,0x54d96eb9,0x2f62e40d,0xbf88fc3f,
    0x49b1740d,0x96e3d85c,0x99b9b73d,0x3625c96e,0xae4b70ef,0xb71fcde8,
    0x0f55f2e4,0x55f0f55f,0x098cf88f,0xfff1ecb7,0x43d96e1f,0xd806b85c,
    0x907cc534,0xe85f1329,0xdae8fd07,0x13fee0ca,0x2dc9fff3,0x3ea354b9,
    0x6cb72f8e,0x9ae40d53,0x0fc2fae9,0x22d8dff7,0x9aa1725b,0xb72f88fa,
    0x2be69bf1,0x266c82f9,0x2f52f9af,0xf35f31f9,0x87eefe65,0x261fbbf9,
    0x7d41fbbf,0xf11f52ff,0x47d417c5,0x742e42f8,0x5d9f4102,0x9329917c,
    0x20fe20f9,0x2025c3f8,0x41e618dc,0x2e2f9af9,0x2a4ffd85,0x0d52f88f,
    0x3efeaa6c,0x642541f8,0x0be6be64,0x49ffb174,0x75c9fb5b,0x0ffbaa4f,
    0x7f449fd7,0x93fae1ed,0x2e4ecceb,0x3ae4ecce,0x85a84ecc,0x4dfc4ffd,
    0x6427fec1,0xfd703cc5,0xc87d401d,0xc8fa2994,0x885fc85f,0xfe884dee,
    0xfeb81e65,0x0b607f64,0xdf527fec,0x883fbaa5,0x5c1feb86,0x3ae5e982,
    0x2002204f,0x2009f35b,0x00800099,0x74d91f40,0x323e9b23,0x7c001a86,
    0xf8801fff,0x80111fff,0x32970018,0x1116e994,0x01300220,0x01000300,
    0x4cc4000c,0x20620660,0x20098198,0x00000000,0x00000000,0x00000000,
    0x00000000,0x42200000,0x00000008,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x88000000,
    0x4c0b224e,0x419501cc,0x195029ca,0x564c0b22,0x32a03b83,0x10e25910,
    0x89d101dd,0x399a80ec,0x2a207744,0x403b20ac,0x950e203b,0x2399a853,
    0x1dd102c8,0x3b213a20,0x3350e200,0x2a016447,0xb80ae20c,0xb8399a83,
    0x206e6003,0xf81d9808,0x0ecc0fbc,0x3660f6ae,0x7ec0ecc1,0x41664c4f,
    0x6daf61d9,0x44044442,0x55701100,0x22088889,0x0441fbde,0x2e21664c,
    0x21ed5c4d,0x0ecc4aab,0x08804444,0x1fa80220,0x3b312aae,0xcf887660,
    0x42cc983e,0x664c4aab,0xb32ffdc2,0x25d9769f,0x23e60bb8,0x02ee20fa,
    0xbca81771,0x260de541,0x05dc45fb,0xfbc82ee2,0x7fffc45a,0x23ffff11,
    0x221ffff8,0x7fffc0bb,0xff0fcd71,0x0de543ff,0x541ffbf1,0x0de541bc,
    0x3fe02ee2,0x3e01ff00,0x7710600f,0x22151441,0x4cbcc2a2,0x8a215144,
    0x982ee20a,0x7d42f88f,0x11f89f88,0x3e63fbbf,0x377e21f8,0x3fbbf11f,
    0x5907e564,0x337e21f9,0x3fbbf10f,0xb887def4,0x20b900ea,0xf88b905c,
    0x20be1fdd,0x02f87e6c,0x3ae1f959,0x32b23de9,0x83f2b20f,0x3aa0fbde,
    0x82fea82f,0x8f302fea,0x4f30fbde,0xd0fcf31f,0x3e7981dd,0xbd0fcf31,
    0x7dd721f7,0xcdd9f264,0xf33e9ae5,0x7d35c5f3,0x54c3e9ae,0xb8fd4c1f,
    0x7d35cfe7,0xb0feafe6,0x64172015,0x26b8b905,0xa866fe3e,0x2fe1fb8f,
    0x91fa9819,0xa989979b,0x98fd4c1f,0x3323fabf,0x84dcc84d,0x6fc84dcc,
    0x4cfeafe6,0x3f3cc7e7,0x98aabfa6,0x3f3cc7e7,0x6cfeafe6,0x37e5dddd,
    0x6c87fe61,0x2fbbcd36,0x26ca6cd9,0x3f9bd14d,0x647f37a2,0x9b364fa6,
    0xa87333ea,0x05c83edd,0xd91720b9,0x1ffff26c,0xff0feff4,0x337a21ff,
    0x5d3df51f,0x447f37a2,0x9f51fcde,0x3d57c399,0x57c3d57c,0x2a17c47a,
    0x4f31cccf,0xd8fcf31f,0x9e63efac,0xa8fcf31f,0x7f91cccf,0x5d80d932,
    0x997c4fd4,0x44fd5767,0x5f13f52f,0x7a8fcdea,0x267ea3f3,0x5f13f51f,
    0x23a207e6,0x905c869f,0x3f51720b,0x4017c5f1,0x5ea0be1f,0x93ff61f9,
    0x5ea3f37a,0x303f31f9,0x7cc3f77f,0x2fe61fbb,0x30efc1fb,0xf73f303f,
    0x47ee7e63,0x7cc3f94d,0x73f31fb9,0x2a07e63f,0x0322f88f,0x93ff6132,
    0x361ffaf9,0x27fec4ff,0x223dbfd1,0x3f61edfe,0x227fec4f,0x2590fffb,
    0x905c83ec,0x3f61720b,0x00cdfc4f,0x10cdfc3f,0x1e43dbfd,0x88f6ff44,
    0x3ee1edfe,0xd99d70ff,0x276675c9,0x989d99d7,0x3ffee3fe,0xe87b7fa0,
    0xdff31edf,0x1edfe8bd,0xfb87b7fa,0x93ff20ff,0x004c82f8,0x01000000,
    0x08000004,0x7fffc400,0x23ffff11,0x001ffff8,0x0603ffff,0x0083ffff,
    0x00200801,0xe9b23e81,0x323e9b23,0x04020206,0x02004010,0x00004008,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x80000000,0x00102a28,0x74402000,0x00040104,0x2e200000,
    0x001901ab,0x02039351,0x2986a091,0x0c981055,0x19300071,0x88e543b8,
    0x001cd543,0x87750000,0x432629ca,0x00016438,0x1f9e6330,0xfff13ffe,
    0x6c7fd88f,0x980885ff,0x3fea2ffe,0xc9bffe3f,0x277643ff,0x97f26cb7,
    0xf887e03f,0x0fe77cc0,0x83ccfff9,0x12ed3a6b,0x47aa3ffd,0x0fbfea2d,
    0x59930762,0x5c2d9ecc,0x4e9ae49b,0x0f35ffd8,0x5706e7e4,0x2d8f547b,
    0x33720ec4,0x9ecd74cc,0x10fcf36e,0x8335f1ee,0xf87cc1ce,0x447fffe1,
    0x7f3088cf,0x2ad70311,0x1952fa9f,0x4d96e795,0x9511e2f3,0x2afee63f,
    0x553a1f30,0x5cfcc11f,0x43e27e21,0x360d7208,0x547545a9,0x2a0aaa2f,
    0x2d6e4c2a,0x55f41554,0x262ef887,0x07e24fff,0x3b0726a2,0xc85550b5,
    0x4d749dea,0xf9e6333d,0x7f172621,0x20a9f983,0x3e0fbcf8,0x0d907a82,
    0x4d972d70,0x2ed19f3b,0x4eef9365,0x547ef7a2,0x4f30ccfd,0x9819f34d,
    0x3361fcef,0x03d9325b,0x1eb81d15,0x6437649b,0x074ddc6e,0x77d43764,
    0x30becb82,0x07ccfe6f,0x507ef7cc,0x8dd901d1,0x3ae9790c,0x9f983e99,
    0x13faa1fc,0x3ee1dfdd,0x3fee1fee,0xd70cdfc4,0x427fd760,0xeae49b6b,
    0x9b2dda69,0x4d7027e6,0xf303e61f,0x5ffb8be2,0xf32743e6,0xffca645d,
    0xff82d85f,0x835c5d8f,0x5c05b06b,0xe81ee986,0x74f35fe9,0x4c2233e3,
    0x56c1f88f,0xd8c8d700,0xffff749d,0x67fcd2e7,0x882f886e,0x9a74f52f,
    0x3fe2fa9f,0x320f70ff,0x5dae1365,0x67ced725,0x89ecb768,0x4d91efff,
    0xf303e61f,0x4bea09ff,0x8fd13679,0x6d40f65c,0x4f9aa2fa,0xa86b835c,
    0x46b82fad,0x261effe8,0x2be62eaf,0x3ffa61fc,0xb50fcf30,0xc8d709b5,
    0xd9ae9138,0x201e6db3,0x11fa82f9,0x3ea7d13f,0x4417c5d0,0x5f5098cf,
    0x35d8c9d1,0x32e5f35f,0x11f53ca8,0x54d9ae5f,0x7c43f71f,0x31983cc1,
    0x17c5e65f,0xd15c87f1,0x23a21339,0x327aa3ce,0x6b835c1f,0x41e74744,
    0x6776446b,0x98bf3720,0x44b81cdf,0x87447e79,0x4e46b82d,0x3d9ae917,
    0xfff30798,0x217ffc49,0x3f625feb,0x20cdfc5f,0x3ee2fffa,0x87bfe3ff,
    0x77644feb,0xf327fec4,0x6ff43dbb,0x98ffec1e,0x49fff507,0x3f24fff9,
    0xfff95d85,0x36a2b27f,0x9877fea3,0xff32ffff,0x2a2b25ff,0x3fffe63d,
    0x1f077662,0x203cdbfa,0x23f3cc1a,0x7ccbf92c,0xddd92fff,0x03d9ae9d,
    0x00000803,0x07fffe00,0x00000100,0x00198800,0x00803010,0x00880440,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00488799,0x009112e0,0x00165c40,0x00000000,0x00019800,0x00000000,
    0x00000000,0x2eea0000,0x7105dc41,0x4577105c,0x7730ae4a,0x7ccfdd54,
    0xa89ffb13,0x4c07cc6d,0x44b84eff,0xffff5079,0xf71add87,0x97ea0fe2,
    0x7fd5a62d,0x35c9d3ff,0x2b513ff6,0x07fc3f47,0x5c7fffe2,0x4de63eff,
    0xcaecbb2f,0x3fe4ffff,0xf305f0ff,0x47ea89ff,0x3e6992fb,0x7fffc4ff,
    0xe83f2f21,0x7cf30fbd,0xf88eb3e1,0x33f21fee,0x77f7990d,0x07d45c7f,
    0x511f31ae,0x50fcde61,0x1c9f9855,0xf03f2662,0x10d77f05,0xb316cbdd,
    0x5c7ea662,0x98eb9366,0x5f7b931f,0x0bfaa0cc,0x2a36e2e4,0x893af32f,
    0x2e41f89f,0x4c17c17c,0xbd31fb8f,0x2996fb8f,0x17c7f379,0x3e63f530,
    0x7cf32eaa,0x2fa077e1,0x3207e27b,0x84ceecbc,0x2635c0f9,0x27e65d8f,
    0x31bb20fa,0xf881fbdf,0x8737f2a3,0xbdc82ffa,0x16aeab65,0xf89f9972,
    0xd32f9b21,0xcc807dbb,0x5b8b904d,0x435fcd36,0x85c85cdd,0x7982f82f,
    0x5c7a81f3,0x4f34c9fd,0x8866fe3e,0x9f51fcde,0x1f9e6399,0x21f1bf66,
    0x6401f30f,0x4e84beeb,0x76fcc6b8,0x037fbe60,0xf88f98d7,0x3ea62ec1,
    0x21fe21ac,0x2f25b8f9,0x0fc45aed,0xdf31eafe,0x255647fd,0x0f55f176,
    0xaecb7172,0xff983ff9,0xfff85c81,0x3fe60be7,0x6dc7a82f,0x75f34cdc,
    0x87fffc3f,0x3e63f37a,0x1fb8f981,0x79d07cc2,0x40467c4d,0x6c5bbcbc,
    0xdf98d705,0x43f8bcc5,0x43f3cc6b,0x705f00fb,0xeced87fd,0x99dd993e,
    0x4cdc86c8,0xf92f9a88,0x87e45fdd,0xc81fbbf9,0x269f2dc5,0x05d80faf,
    0x4337f0b9,0x4e8f982f,0x7c6dc7a8,0x839df34d,0xedfe882f,0xe83ffee1,
    0xfdf11edf,0x0feefcc9,0x32e1ffd5,0x9ed96a2d,0x3e635c09,0x7cde64e8,
    0xf9e635c2,0x81339f11,0x7dd7c42f,0x4fbb32e0,0x224fbbeb,0x82efa82f,
    0x2ba26c99,0xeb9ae0cc,0x45c84ecc,0xf31fc9eb,0x641321b6,0x9bf82f85,
    0x83eaf309,0x2b709fb9,0x7c0f34fd,0x0400819b,0x8ea02008,0x2d8a802b,
    0x7fffcd6a,0x25ffff33,0xf32f98f9,0x7ffcc9df,0xb8fcf32f,0x17c3ffff,
    0xb705e9b2,0x91fccfdc,0x2207fc0d,0x647c0dff,0x23e83322,0x3fffe26c,
    0x4c3bff71,0x04c87f17,0xff05f0b9,0x3f9e65ff,0x2e7ffff1,0x81e69f35,
    0x0001ffff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x40000000,0x020b9ab8,0x05dc4154,
    0x080ae4a8,0x2b8b8298,0x4106e6a2,0x000e6440,0x30bbbb80,0x40ee0d47,
    0x5c5ccc29,0x1a9c4150,0x936a00a6,0x33260cc8,0x100ee200,0x80417777,
    0x570bbbb9,0xc982ec75,0x9a86aa60,0x5d459139,0xdddddd2b,0x99dd5500,
    0x8970bb6a,0x5c0fddf8,0xd513e61f,0xef84b87f,0xfbdf32fc,0x43e67e21,
    0x2a1dccd8,0xb1d10e8d,0x87f66445,0x5c0f9bf8,0x90cbbc83,0x8ba9bdbd,
    0x21ecd769,0xd97ccc5d,0x8faa66bb,0xdb17ae4d,0xa85dddc4,0x993499ff,
    0x96ef63f9,0x4c1d886e,0x92aae1bb,0x279951d9,0x00199999,0x2e2d5b91,
    0x59dd933d,0x3b63e9ae,0x27a5e880,0x37bb7369,0x1f32b97c,0x17fd43f1,
    0x7491bb17,0x7cedc4c9,0x3ea17cc0,0x2eeee62f,0xbc8ffea1,0x99795acb,
    0x3e27e2b5,0xe88b72a0,0xa8f33d1f,0x8b71f21f,0x2aaaa26d,0x05ff5590,
    0x02dde47a,0x00000000,0xbdddc800,0x2a2797b3,0x6cd70add,0x3601bd14,
    0x2ab77b0e,0x07e2ceec,0x3e61f9e6,0x23766e1f,0xa87b1f14,0x82740f8d,
    0x3332a0ff,0x1dbbd12c,0x5d6aeeb2,0x3364bfec,0x8744745b,0x5ff54d99,
    0x4b70e7d4,0x32201ed9,0x01881ccc,0x00000000,0x3a000000,0x15e545c9,
    0xf13f512e,0x3a20ed85,0x2e066445,0x27981f84,0x1f55f11f,0xb836ab62,
    0xb1f10f8d,0x6408ed87,0x882a85dd,0x2eeb20bb,0x7fbbf55a,0x431177cc,
    0x80179709,0x419b2cca,0x00002cca,0x00000000,0x80000000,0xb94eecfb,
    0x204c449b,0x4b704ffd,0x44ddc84c,0x7981f83a,0x7106187e,0x04021017,
    0x547fffe2,0x2643f88f,0xb5775900,0xd0beabe6,0x0000000f,0x00000000,
    0x00000000,0x08000000,0x7fcc2662,0x000001ff,0x00001331,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__consolas_bold_11_latin1_x[224]={ 0,2,1,0,0,0,0,2,1,1,0,0,1,1,
1,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,
2,0,0,0,1,0,0,1,0,0,1,0,1,1,0,0,0,1,2,1,1,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__consolas_bold_11_latin1_y[224]={ 8,0,0,0,-1,0,0,0,-1,-1,0,2,5,4,
6,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,2,0,2,0,2,0,2,0,0,
0,0,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,0,-1,0,3,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,2,-1,0,1,0,
-1,0,0,0,0,2,4,4,0,0,0,1,0,0,0,2,0,3,8,0,0,2,0,0,0,2,-1,-1,-1,-2,
-2,-2,0,0,-1,-1,-1,-2,-1,-1,-1,-2,0,-2,-1,-1,-1,-2,-2,2,-1,-1,-1,-1,-2,-1,0,0,0,0,
0,0,0,-1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,
 };
static unsigned short stb__consolas_bold_11_latin1_w[224]={ 0,2,4,6,6,7,7,2,4,4,6,6,4,4,
4,6,6,6,6,6,6,6,6,6,6,6,2,4,6,6,5,5,6,7,6,6,6,6,6,6,6,6,5,6,
5,6,6,6,6,7,6,6,6,6,7,6,7,6,6,4,6,4,6,7,4,6,6,6,6,6,6,6,6,6,
5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,2,5,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,2,5,6,6,6,
2,6,5,6,4,6,6,4,6,5,5,6,4,4,6,6,6,4,2,4,4,6,7,7,7,5,7,7,7,7,
7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
 };
static unsigned short stb__consolas_bold_11_latin1_h[224]={ 0,9,4,8,11,9,9,4,12,12,6,6,5,2,
3,10,9,8,8,9,8,9,9,8,9,8,7,8,7,4,7,9,11,8,8,9,8,8,8,9,8,8,9,8,
8,8,8,9,8,11,8,9,8,9,8,8,8,8,8,11,10,11,5,2,3,7,9,7,9,7,8,9,8,8,
11,8,8,6,6,7,9,9,6,7,9,7,6,6,6,9,6,11,12,11,4,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,11,8,7,8,
12,10,3,9,7,6,4,2,6,3,5,7,5,5,3,9,10,4,2,5,7,6,8,8,8,9,9,9,9,10,
10,10,8,10,9,9,9,10,9,9,9,10,8,10,10,10,10,11,11,6,11,10,10,10,11,9,8,9,9,9,
9,9,9,10,7,8,9,9,9,9,8,8,8,8,9,8,9,9,9,9,9,6,9,9,9,9,9,11,11,11,
 };
static unsigned short stb__consolas_bold_11_latin1_s[224]={ 254,251,202,108,91,71,214,253,1,12,115,
45,166,236,207,237,243,183,8,8,72,15,22,86,29,101,252,115,27,181,34,
250,31,120,29,43,135,204,163,50,245,128,57,142,170,1,190,63,197,38,176,
112,156,77,93,79,64,149,50,80,122,98,143,241,231,211,119,246,91,218,57,
84,43,36,85,22,15,122,59,20,105,114,52,232,98,225,136,129,101,126,94,
109,9,60,188,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,
238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,254,133,103,
136,239,187,6,150,225,70,8,80,195,236,73,219,155,13,161,150,212,1,244,
176,253,171,40,87,143,223,172,187,179,171,163,178,186,194,194,202,121,36,107,
216,93,86,79,230,151,136,157,143,171,53,115,66,66,223,209,129,73,1,202,
15,43,36,128,142,149,164,1,209,156,64,236,193,231,158,165,180,50,216,8,
22,57,29,100,108,135,200,207,222,229,24,46,17, };
static unsigned short stb__consolas_bold_11_latin1_t[224]={ 1,1,43,34,1,14,14,34,1,1,43,
43,43,43,43,1,14,34,34,24,34,24,24,34,24,34,24,34,43,43,43,
14,1,34,34,24,34,34,34,24,24,34,24,34,34,34,34,24,34,1,34,
24,34,24,34,34,34,34,34,1,1,1,43,43,43,34,24,34,24,34,34,
24,34,34,1,34,34,43,43,43,24,14,43,34,24,34,43,43,43,24,43,
1,1,1,43,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,1,24,1,
24,34,24,1,1,43,24,43,43,43,43,43,43,43,43,43,43,43,24,1,
43,39,43,43,43,24,24,24,14,14,14,14,1,1,1,24,1,14,24,14,
1,14,14,14,1,24,1,1,1,1,1,1,43,1,1,1,1,1,14,24,
14,14,14,14,14,14,1,43,24,14,14,14,14,24,24,24,24,14,24,14,
14,14,14,14,43,14,14,14,14,14,1,1,1, };
static unsigned short stb__consolas_bold_11_latin1_a[224]={ 97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_bold_11_latin1_BITMAP_HEIGHT or STB_FONT_consolas_bold_11_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_bold_11_latin1(stb_fontchar font[STB_FONT_consolas_bold_11_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_bold_11_latin1_BITMAP_HEIGHT][STB_FONT_consolas_bold_11_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_bold_11_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_bold_11_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_bold_11_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_bold_11_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_bold_11_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_bold_11_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_bold_11_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_bold_11_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_bold_11_latin1_s[i] + stb__consolas_bold_11_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_bold_11_latin1_t[i] + stb__consolas_bold_11_latin1_h[i]) * recip_height;
            font[i].x0 = stb__consolas_bold_11_latin1_x[i];
            font[i].y0 = stb__consolas_bold_11_latin1_y[i];
            font[i].x1 = stb__consolas_bold_11_latin1_x[i] + stb__consolas_bold_11_latin1_w[i];
            font[i].y1 = stb__consolas_bold_11_latin1_y[i] + stb__consolas_bold_11_latin1_h[i];
            font[i].advance_int = (stb__consolas_bold_11_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_bold_11_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_bold_11_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_bold_11_latin1_s[i] + stb__consolas_bold_11_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_bold_11_latin1_t[i] + stb__consolas_bold_11_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_bold_11_latin1_x[i] - 0.5f;
            font[i].y0f = stb__consolas_bold_11_latin1_y[i] - 0.5f;
            font[i].x1f = stb__consolas_bold_11_latin1_x[i] + stb__consolas_bold_11_latin1_w[i] + 0.5f;
            font[i].y1f = stb__consolas_bold_11_latin1_y[i] + stb__consolas_bold_11_latin1_h[i] + 0.5f;
            font[i].advance = stb__consolas_bold_11_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_bold_11_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_bold_11_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_bold_11_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_bold_11_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_bold_11_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_bold_11_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_bold_11_latin1_LINE_SPACING
#endif

