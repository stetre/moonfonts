// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_17_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_17_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_17_usascii_BITMAP_WIDTH         128
#define STB_FONT_times_17_usascii_BITMAP_HEIGHT         86
#define STB_FONT_times_17_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_17_usascii_FIRST_CHAR            32
#define STB_FONT_times_17_usascii_NUM_CHARS             95

#define STB_FONT_times_17_usascii_LINE_SPACING          11

static unsigned int stb__times_17_usascii_pixels[]={
    0x20a02603,0x27301009,0x54c02aa8,0x0353001a,0x40006aa6,0x000601a9,
    0x0a186000,0x1215405c,0x2a026019,0x710d5314,0x980d4415,0x6c1eb9ce,
    0x301c809b,0x983d939d,0x1eedd42f,0x033f2baa,0x480e48e2,0x412648d0,
    0x11a6000c,0x7cc1a809,0x05b0fcc0,0x4c5d5995,0xf30fc40f,0xf09d0e45,
    0x3507f31b,0x570298e2,0x5b920f88,0x34c005a8,0x1c2081b1,0x5b36c13a,
    0xe8a671d0,0x0fc4d904,0x22e84c8d,0x8350b86c,0x4798f304,0x40b21aa4,
    0x3734c6c8,0x452eaab8,0x23f702f9,0x31cfc42d,0x0fd40be6,0x0991aa1f,
    0xd953d45d,0x81c39d99,0x992340f8,0x1ae01e84,0x4c722cd3,0x07ea150f,
    0xd82d97d4,0x301fa85f,0x41f3345f,0x16a2e84c,0xf0298492,0x0b921a85,
    0x8d5007c4,0x2a5b9669,0x302fa8e5,0x7e40b65f,0xf9817d44,0xd119f162,
    0x21647d09,0xf8241238,0x02e91a82,0x46a803ea,0xb0f47369,0x207f11c7,
    0xfc80b67a,0x2a07f30e,0x9fd50e1f,0x755dd099,0xcddcdda8,0x640f81c1,
    0x7c42a920,0x2d31aa00,0x8fccf148,0x5c82f419,0x4e9b80b6,0x022e417a,
    0x0ae84c84,0x5301a920,0x92344688,0x2a01f859,0x3e2934c6,0x827179aa,
    0xb074c1f8,0x9aa70885,0x207cc1f9,0x17426c02,0x22404920,0xa923cc4a,
    0x1aa03c86,0x0cb864d3,0xb3066579,0x85b09b5b,0xb10ee738,0xf881bb5b,
    0x7f117a01,0x17012480,0x483e20ec,0xa816216a,0x007134c4,0x07fd4051,
    0x333a216c,0x100600ba,0x3304cc40,0x80104013,0x91620a20,0x501a82c4,
    0x02446985,0x1db30091,0x009102d8,0x00000000,0x22022000,0x406a240a,
    0x4c2efe1a,0xabb886dc,0x4c001aa9,0x059bb0ab,0x00000001,0x80000000,
    0x20020300,0x06200008,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x1100c000,0x98801500,0x00981999,0x13310133,
    0x0004ccc4,0x80260098,0x2201302a,0xb003001b,0x880903b3,0x3f601c9e,
    0x26e26fff,0x40fe983b,0x3ea21dc8,0x332ae21d,0x1667261c,0xb09d3024,
    0x05f50755,0x322feea8,0x1712ed35,0x20932c80,0x1e8ea0c8,0x21be607a,
    0x3c87f039,0x321d81f3,0x226c0382,0x0ba0764b,0x2532ec70,0x01ccb55a,
    0x0101c9f4,0x0771e239,0x0298bf93,0x0be2e85f,0x06a16c7d,0x321f8990,
    0x2a002e85,0x48eed302,0x9139d900,0x3e668079,0x26e61ae1,0x17c0a63f,
    0x7d43c572,0x550483ab,0x707c49d7,0x19f55d0f,0x32ee01c0,0x3f200170,
    0x87501723,0x4e61ae3f,0x3e0532fb,0x700abd82,0x8b20e0bf,0xfa83ea4e,
    0x27546740,0x3000fecc,0x910b3225,0x00321fb3,0xeacea839,0x23f23984,
    0x1c85f029,0x544fbc80,0xa9360f81,0x8ba1ee0f,0x21fb106b,0x8ad92019,
    0x9df89747,0x22206802,0x7743982f,0xfc85f029,0xa9644fff,0x91ea122f,
    0x0d70fc49,0xf007cc5d,0x83203fa5,0x87e61f1f,0x039805fb,0x443982dc,
    0x383f02ef,0x20f83266,0x3f30715b,0x4c8ba264,0xb01ea2e8,0x85502e21,
    0x93e6789e,0x90333fe9,0x7302d403,0xf9545f30,0x5b0e16a0,0x9d01a954,
    0x0e92e26c,0x410f22e8,0x0910e258,0xefc89597,0x209ff93d,0x44075306,
    0x2e2a81ed,0x6fec42bf,0x555c40bc,0xdee98123,0x166641ed,0x4c2bbeb8,
    0x2060ccdf,0x04033009,0x02010044,0x00204000,0x01010031,0x00080210,
    0x00000801,0x00000000,0x00000000,0x00000000,0x33000000,0x2014c013,
    0x466010a9,0xa8802880,0x98ccc421,0x42662199,0x26209998,0x30333109,
    0x98015413,0x8666622b,0x7fcc0999,0x101d982f,0x87db337b,0x5c6daad9,
    0xbd883d99,0xfd11eca9,0xd887fe63,0x415fb10b,0x7fd31ec8,0x0fa63f70,
    0xb89f4aa0,0x033e61ff,0x0b503339,0x6c4a82e8,0x3d4d12c1,0xa8b60ba2,
    0x0b03ee0f,0xf30e60f7,0x03d87505,0xfb8111e8,0x81260e62,0x81b600f8,
    0x688a1fc2,0x105d83e6,0x0be23f85,0x0e60f709,0x0f61217a,0x1fb003e0,
    0x2fff2091,0x441466c0,0x37f2004f,0x1fc4b800,0x2fccd900,0x260f7035,
    0x1220fa83,0x8856c4f6,0x3e202bfb,0x2fd400dc,0x987f6b3e,0x42ccb82f,
    0x07402ffc,0x7cc005f3,0x4121f790,0x3e07307b,0x64f602e4,0xf5001f01,
    0x4c3e2007,0x2f99760f,0x3fa60dd0,0x2f983505,0xf8c9fc00,0x20f7048a,
    0x161f7039,0x1f0065ec,0x001fd500,0xf707ccb6,0x08bb04f8,0xf8141fdc,
    0x94f64003,0x0f501add,0x55fc40a6,0x403fbb02,0x7c64c00f,0x3e239005,
    0x20d916a1,0x426c1c5d,0x4040bb01,0x817ea5f9,0x201b80f9,0x2ef604ec,
    0x4401f00f,0x8860bea4,0x88792644,0x0745d85e,0x2605107a,0x9d00a84f,
    0x21f404f8,0x027cc058,0x3e21b27b,0x1fb03601,0xc82677c4,0x7b9103bb,
    0xbdd85b75,0x207a83cb,0x00bbced8,0x8803906e,0x800ccbcd,0x33bf500e,
    0x33f223bf,0xb10f7540,0x080085df,0x10806200,0x03000801,0x06000400,
    0x00000100,0x00000000,0x00000000,0x00000000,0x00000000,0x26662000,
    0x4c426620,0x10999999,0x20001333,0x35009998,0x06623980,0x26213310,
    0x26620099,0x30133109,0x99999887,0x01333109,0x74419fd3,0x9f57b70d,
    0x33f22d95,0x87100eeb,0x24ebcfc8,0x124c03fa,0x57f405f9,0x4019f910,
    0x9f30bfc8,0x66c6d883,0x712fdaaa,0xf89ae19f,0x8be1c584,0x06e83ea3,
    0x221f507b,0x2000f64f,0x0df306fa,0x1f3003f3,0x38d501dc,0x87e227c4,
    0x370fd429,0xf9817c08,0xbd503f20,0x9b60f985,0xfb98003d,0xf986cd82,
    0x770f9801,0x36046a80,0x400fc40e,0x5f00916d,0x05e83e60,0x7c1f307b,
    0x11baef64,0x46da98d9,0x1f986cb9,0x03b8f980,0x07ea06a8,0x3e2007e2,
    0x205f004b,0x00cdbaf9,0x913f307b,0x2e86ec3d,0x3e6a635c,0x261b2321,
    0x6df9801f,0x3e20d500,0x2003f104,0x05f002fb,0x803f2be6,0x1aaf983d,
    0xd50f63d8,0x522bb298,0x801f986c,0xa805fbf9,0x7c40db06,0x0fcc0621,
    0x1f302f80,0x983d817a,0x4d8f600f,0x7d4a6354,0xf30d90c9,0xf31f3003,
    0xfb86a80b,0x6c87e201,0x3e003f30,0x3e21f302,0xf9829b03,0x44d8f600,
    0x9bd14c6a,0x40fcc364,0x5f987cc1,0x07f31aa0,0x4020fc43,0x07f001f9,
    0x81fa87ea,0x00fd43fb,0x1aa26c7b,0xf90fd455,0x43883f30,0x037e60fa,
    0x920bd1aa,0xfd9801f9,0x3bf2200d,0xb067ecc1,0xfd98017f,0x99df980c,
    0x25fb11ee,0xea961dd9,0x9dfb30bf,0x7ecc5fb9,0x17dff30c,0x6fe4bf62,
    0x914fdccc,0x000003bf,0x00000000,0x00000000,0x00000000,0x4ccc4000,
    0x22133310,0x10999999,0x83333333,0x54009998,0x0803624e,0x40060100,
    0x4cccc428,0x00000000,0xb885fe44,0x57f910cf,0x2ff22d95,0x3220eaaa,
    0x80dedacf,0x0d00e24d,0x7f543fa8,0x222e403f,0x83ecabfc,0x5440dcba,
    0x1cbb81db,0x2f881f30,0xf98e07d4,0x83ea0cc1,0x87cc1fc8,0x00bee00b,
    0x03ee387b,0x07d42ed4,0x7b3c47f1,0x43b1aa48,0x440f983f,0x3007cc2f,
    0x01f3003f,0x0127b0dd,0x23d80d9b,0x64417c40,0x6c0f985b,0x224e88c6,
    0xf31eccce,0x40f986c8,0x707cc2f8,0x20a21f98,0x40fa80f9,0x2a602af9,
    0x80f601f9,0x0b7480f8,0x227441f3,0x1aa4c9c9,0x4c3d47a8,0x2fbaaabf,
    0x226e67cc,0x82eccdf9,0x82f980f9,0x09d2406e,0x709701ec,0x33e616e3,
    0x93444ecb,0x4c207c49,0x3e61aa1f,0x42f9999a,0xf98710f9,0x03e60a61,
    0x80ea0be6,0x6c03ea38,0xb8e21603,0xf930f985,0x0cd8bd47,0x9d0e2bba,
    0x207cc1e4,0x107cc2f8,0x4c041f98,0xb81fb80f,0x33333200,0x2e07b03f,
    0xfeeeed81,0xf903e60e,0x3af3ba21,0x107bf660,0x3e6097b9,0x3e617c40,
    0x0607e600,0x88bd01f3,0x36424048,0x301a83d8,0x985db555,0x000fdc0f,
    0xf5002004,0x7d42f881,0x9107e600,0x3b660fa8,0x3701bee0,0x87b05f30,
    0x203999ba,0x740fa85b,0x80000006,0xf910cfd9,0x033f663b,0x33337f22,
    0x337f662e,0xa80303dd,0x17fdc0bf,0x3fea3dd5,0x16e03fff,0x9bb9bfb3,
    0x00000001,0x00000000,0x00000000,0x00000000,0x00000000,0x4c020000,
    0x2005b32d,0x73ea801b,0x5402647d,0x36219b51,0x50000000,0xecbbd881,
    0x6caa8082,0x9016dd44,0x547b1740,0x36e0fdbe,0x45d1f402,0x9072e204,
    0x77d51c4b,0xebbda8dd,0x461fea8e,0x6c1108ac,0x9621e885,0x207a86c4,
    0x43d8ba04,0x795028de,0x8b6cd501,0x300bc983,0x3bd02e1f,0x361bd0ba,
    0x5f64b90d,0x80eb82ea,0x233e248c,0x24011a20,0x361ec5d0,0x81993003,
    0x0a9fb99f,0x9ec00b2a,0xb0f63d83,0xa8d52647,0x81f980de,0x7f4c5339,
    0xaa981aa2,0x3a0aaada,0x007b0f62,0x79902f2a,0x39910f32,0xb035d500,
    0xc8f62647,0xabdd9aa4,0x240fa22e,0x11fc8232,0x9988441f,0x360999d9,
    0x03d87d14,0x7f30165c,0x6dc40be6,0x3d82fc02,0x2647b132,0x08ac84d5,
    0x106a5176,0xdd0f4737,0x50240713,0x6c3bb5df,0x001cc883,0x7950068d,
    0xb1ec0ae0,0xa9723d89,0x67dc0986,0xf9802dbb,0x6fecc4ab,0x21101200,
    0x2a0f7cc0,0x00204000,0x7cc00330,0xf31ee99d,0xb13dd33b,0x0000005f,
    0x48008022,0x00000000,0x00000000,0x00000000,0x00000000,0x99995000,
    0x00d43999,0x5555504c,0x00000355,0x00000000,0x74c774c0,0x20c184c1,
    0x8b77220a,0x26a80009,0x49b3fffa,0x1aaaaaaa,0x00000000,0x4c000000,
    0x9af82a9f,0x26f8f50f,0x88f76a22,0x09999999,0x2111105c,0x00000000,
    0x00000000,0xe81f6400,0x88f30f8a,0xbbba8004,0x0000bbbb,0x00000000,
    0x00000000,0x43607f00,0x000a62c6,0x00000000,0x00000000,0x40000000,
    0x0e381f9b,0x00000087,0x00000000,0x00000000,0x23500000,0x0000006b,
    0x00000000,0x00000000,0x80000000,0x01bf50ea,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_17_usascii_x[95]={ 0,1,0,0,0,0,0,0,0,0,1,0,0,0,
1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,
-2,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,2,1,1,0, };
static signed short stb__times_17_usascii_y[95]={ 13,2,2,2,1,2,2,2,2,2,2,3,11,8,
11,2,2,2,2,2,2,2,2,2,2,2,5,5,4,6,4,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,15,2,5,2,5,2,5,2,5,2,2,
2,2,2,5,5,5,5,5,5,5,3,6,6,6,6,6,6,2,2,2,7, };
static unsigned short stb__times_17_usascii_w[95]={ 0,3,6,8,7,13,12,3,5,5,6,9,4,5,
2,5,8,5,8,7,8,7,8,7,7,8,2,3,9,9,9,7,14,11,10,10,11,10,8,11,11,5,6,12,
10,14,12,11,8,11,11,8,9,11,11,15,11,11,9,4,5,4,7,9,4,7,9,7,8,7,7,8,8,4,
5,8,4,12,8,8,9,8,6,6,5,8,8,11,8,8,7,5,1,5,9, };
static unsigned short stb__times_17_usascii_h[95]={ 0,12,5,12,14,12,12,5,15,15,7,9,5,3,
3,12,12,11,11,12,11,12,12,12,12,12,9,11,8,4,8,12,15,11,11,12,11,11,11,12,11,11,12,11,
11,11,12,12,11,15,11,12,11,12,12,12,11,11,11,15,12,15,7,2,4,9,12,9,12,9,11,12,11,11,
15,11,11,8,8,9,12,12,8,9,11,8,8,8,7,11,7,15,15,15,4, };
static unsigned short stb__times_17_usascii_s[95]={ 78,90,10,113,70,1,15,17,21,1,105,
16,21,51,57,82,97,66,72,116,81,1,9,28,74,36,124,124,64,36,42,
39,38,54,90,47,33,22,13,18,1,118,58,90,79,64,45,78,41,53,23,
30,13,74,86,58,115,1,108,65,122,33,120,60,46,101,106,8,88,109,107,
65,50,59,27,98,103,92,83,117,103,94,35,1,35,26,74,52,1,45,112,
15,13,7,26, };
static unsigned short stb__times_17_usascii_t[95]={ 14,1,77,1,1,17,17,77,1,1,67,
67,77,76,76,17,17,55,55,17,55,30,30,17,17,17,43,17,67,76,67,
30,1,55,55,30,55,55,55,30,55,43,17,43,43,43,17,1,43,1,43,
30,43,30,30,30,30,43,43,1,1,1,67,76,76,55,17,67,17,55,30,
17,43,43,1,30,43,67,67,55,1,1,67,67,43,67,67,67,77,55,67,
1,1,1,76, };
static unsigned short stb__times_17_usascii_a[95]={ 61,82,100,123,123,205,191,44,
82,82,123,139,61,82,61,68,123,123,123,123,123,123,123,123,
123,123,68,68,139,139,139,109,226,177,164,164,177,150,137,177,
177,82,96,177,150,218,177,177,137,177,164,137,150,177,177,232,
177,177,150,82,68,82,115,123,82,109,123,109,123,109,82,123,
123,68,68,123,68,191,123,123,123,123,82,96,68,123,123,177,
123,123,109,118,49,118,133, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_17_usascii_BITMAP_HEIGHT or STB_FONT_times_17_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_17_usascii(stb_fontchar font[STB_FONT_times_17_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_17_usascii_BITMAP_HEIGHT][STB_FONT_times_17_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_17_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_17_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_17_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_17_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_17_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_17_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_17_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_17_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_17_usascii_s[i] + stb__times_17_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_17_usascii_t[i] + stb__times_17_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_17_usascii_x[i];
            font[i].y0 = stb__times_17_usascii_y[i];
            font[i].x1 = stb__times_17_usascii_x[i] + stb__times_17_usascii_w[i];
            font[i].y1 = stb__times_17_usascii_y[i] + stb__times_17_usascii_h[i];
            font[i].advance_int = (stb__times_17_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_17_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_17_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_17_usascii_s[i] + stb__times_17_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_17_usascii_t[i] + stb__times_17_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_17_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_17_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_17_usascii_x[i] + stb__times_17_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_17_usascii_y[i] + stb__times_17_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_17_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_17_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_17_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_17_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_17_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_17_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_17_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_17_usascii_LINE_SPACING
#endif

