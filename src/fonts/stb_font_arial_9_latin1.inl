// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_9_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_9_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_9_latin1_BITMAP_WIDTH         256
#define STB_FONT_arial_9_latin1_BITMAP_HEIGHT         38
#define STB_FONT_arial_9_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_arial_9_latin1_FIRST_CHAR            32
#define STB_FONT_arial_9_latin1_NUM_CHARS            224

#define STB_FONT_arial_9_latin1_LINE_SPACING           6

static unsigned int stb__arial_9_latin1_pixels[]={
    0x02010044,0x40200400,0x20a89008,0x40d640bc,0x70350cc0,0xb8950109,
    0x0406e331,0x66654098,0x001664c0,0x00808818,0x02204081,0x06600399,
    0x98951011,0x00881eec,0x2541cc80,0x81e40ddc,0x32017019,0x7101981c,
    0x11110ee0,0x99304104,0x9216e447,0x8385819b,0x2453241b,0x2e1c164c,
    0xb10c8889,0x4405c064,0x0b80b81a,0x22531e44,0x0a731dc2,0x214c1991,
    0x21714c0b,0x017049fe,0x12531326,0x4c188133,0x1714c2e2,0x3260b8a6,
    0x21e64c3c,0x664c3cc9,0x23724323,0x2b86c90c,0x70b85537,0x0d85897b,
    0x229920dc,0x22981b04,0x38dccab8,0x881d0037,0x3bba64cc,0x269ddd34,
    0x26534eee,0x89b114c2,0xc94c2e39,0x19154320,0x06c127f6,0x1a9a81b0,
    0xbc88ef22,0x550c8aa3,0x8322a864,0xb86c570d,0x1b15c362,0x7155ccae,
    0x154aae63,0x9541ecd6,0x262c191b,0x4570dc3c,0x79306e29,0x4562a1b8,
    0x93006e74,0x2a0b9b87,0x82a82a82,0x23987339,0xc8f54b34,0x23aac420,
    0x4e44322a,0x9303c984,0x2e499a87,0x5242e5bb,0x322a8645,0x2a864550,
    0x2aac2aac,0x9b2c2aac,0x1b9361b8,0x1b8bb12c,0x8c8b1657,0x4c550dc5,
    0x8b190322,0x5d562e2a,0x20dc930a,0x1555c58c,0x32a35595,0x355951aa,
    0x8e61cce6,0x56aa49d9,0x2ddc110c,0x26a0c8aa,0x19058c84,0x2e731a8b,
    0x52c2e189,0x322a8645,0x1b864550,0x1bac1bac,0x972c1bac,0x4992e1b8,
    0x22d4552a,0x5879b70e,0x1b8b6ba2,0x22245324,0x99662dae,0x5c2dccba,
    0x6d7443cc,0xca8f3a22,0x355951aa,0x9cc6ab2a,0x3621cc39,0x43326aa3,
    0x8e607429,0x3a224d46,0x6d7442da,0x44732aa2,0x8f3223cc,0x9a399a39,
    0x2a499a39,0x49a54934,0x49524d2a,0x81705c0b,0x37664ddb,0xb01b9623,
    0x372ccdd4,0x2244a648,0x22c599ba,0x530ae22c,0x38b33750,0xa82a82a8,
    0x98733982,0x2552ca63,0x058530ec,0x49a87bb9,0x2a2ccdd4,0x0000599b,
    0xdc87bb90,0x21eee43d,0x6edc4ddb,0x2e26edc4,0x710ea4dd,0x214001d4,
    0x8ae02609,0x544986c5,0x8b06e311,0x9930260d,0x8b037017,0x336a060d,
    0x2999b54c,0x2734ccda,0x32e1cc39,0x88744aa1,0x44c002c1,0x458362c2,
    0x0000000d,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x2624cc00,0xa8110902,
    0x5641b981,0x21204441,0x3bcc981a,0x75020e2a,0x144911c1,0x4ae23891,
    0x540e5409,0x0541ac84,0xcb810453,0x332065c1,0x32e0e544,0x2ea065c1,
    0x0e2a042b,0x2240b326,0x530d644a,0x54159120,0x5641bb84,0x98f33661,
    0x3bd98503,0x04065414,0x0289af26,0x27b0d885,0x41c0d9c8,0x71c4171b,
    0x8a82e388,0x2612b074,0x42380809,0x2a923509,0x0e258ccb,0x96531ca6,
    0x4dd54b1a,0x81903129,0x88883248,0x08231310,0x510a20a2,0x414c0aa8,
    0x65415418,0xc8ef225a,0x88ef2210,0x8ef223bc,0x8ef22b0c,0x5cae3bc8,
    0x81b7b558,0x40d55543,0x06670153,0xd7035773,0x223bc881,0x2171c3bc,
    0xb0b92355,0x0e654570,0x5e443977,0x3372c2e3,0x43b980e7,0xbac2e01b,
    0xcaac2eb0,0x996b2a5a,0xca96b2a3,0xa96b2a5a,0x9aea1aac,0x942e5bbb,
    0x242e5bbb,0x685cb777,0x490b9217,0x322b1b8c,0x4441d439,0x55444173,
    0x05ce221b,0x64c2e6e1,0x7242e2ac,0x42e19921,0x90c96555,0x25844b30,
    0x255d4b2c,0x5cdcb991,0x22c64073,0xbac2e01b,0x752c2eb0,0x0e66ba8d,
    0x46ba8d75,0x2ab2a6ba,0x4dcb1591,0x5cb32218,0x72c2e189,0xb5e44313,
    0x2585cb0b,0x32e751d9,0xa40910bd,0x835240ca,0x48a81954,0x171742e7,
    0x21cb0b96,0x9b36ab1b,0x2584cb1a,0x25854909,0x2484490b,0x5329a8ab,
    0x8e61dae8,0x1bac6e1b,0x8acac6eb,0x39962b25,0x8ac962b2,0x2a962b25,
    0x3225bca8,0x9911c43c,0x91165c47,0x91584c79,0x31e64479,0x245c9b99,
    0x21506526,0x65c2e2cb,0x2165c2a0,0x33225573,0x88f3225c,0x7b30e3cc,
    0x332206ab,0xc88f3222,0x88f3222b,0x0b3223bc,0x50c47777,0xccb89337,
    0xd9adecc3,0x2ab7b35b,0x96f2a5bc,0xa96f2a39,0x96f2a5bc,0x0004ccda,
    0x2000006a,0x00000cb8,0x020e5400,0x01044410,0x00000410,0x00013000,
    0x00000000,0x00064580,0x4c000000,0x00000003,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x64400000,
    0x51664c2c,0x08831101,0x19b70444,0x31a92a24,0x02608203,0x088c4575,
    0x6408151c,0x666ecc1a,0x4c026152,0x20261308,0x3621ccd9,0x02222041,
    0x0666cc11,0x26064031,0x22330332,0x88733664,0xc9857752,0x70b8663c,
    0x5c330208,0x1b04702c,0x2b8644ae,0x4ada8317,0x35ac98ea,0x260c4e27,
    0x5e6d4609,0xcbbac2e0,0x55d43112,0x22e62bbe,0x010ef225,0x2a17091b,
    0x887d6c11,0x12a83350,0x77911d4b,0x7b304444,0xcaa4c6a7,0x4c3b985a,
    0xb1350353,0x5ccb1541,0x9129aa9a,0x4322a9cc,0x95448643,0x24888729,
    0x85758552,0x8d497975,0x2b0c92e4,0x10e20bd8,0x98aa9c47,0x2daac2e5,
    0xeb996b2a,0x7066c5bb,0x5cc38921,0x2170aad8,0x75531c9a,0x2d6546a5,
    0x65c6e177,0x804b7770,0x32aea10c,0x2321aea1,0xa81a9cc5,0x589540ea,
    0x2222aee6,0xc8aa0553,0x155cc350,0x260654aa,0x20dca6bc,0x1bac4375,
    0x8a658d49,0x13ca8b0b,0x54e23887,0x26b1b962,0x656354a8,0x654311d2,
    0x896170ce,0x556d56c3,0xa8baa170,0x2a350b9c,0x1b9664b1,0x10c4dc53,
    0xaba942e0,0xd0b1593b,0x1a9443b5,0x6d43bda8,0x4aee60bc,0x32e37388,
    0x87064554,0x5d52a84d,0x49a4b0c8,0x3baa4cea,0x3cda9237,0x76cc88a6,
    0x1c438ac3,0x87336a71,0x59935bd9,0xbccaac6a,0x2f72a1cc,0x1c479910,
    0x17095593,0x4ce896aa,0x2a58d46a,0x9114c362,0xcc880479,0xbcaac352,
    0x124cdd45,0x646a06a3,0x5dcc0aa1,0x89328bb8,0x70e2c735,0x0712a9c9,
    0x36e59619,0x976edc4d,0x206a2ccb,0x3362b058,0x2388712d,0x80005538,
    0x38800b1a,0x88647100,0x2a172cce,0x46a01499,0x6eed4b1a,0x22600a62,
    0x6e6d4018,0x98645802,0x2a199b52,0x40aa1b11,0xa8777739,0x37321dcd,
    0xca82e1c3,0x2199990d,0x00165bd8,0x0002600c,0x00000005,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00007500,0x00000070,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x52400000,0x482e7b99,0x1b8e38a6,0xa8170e33,0x4cf372e1,
    0x799932c4,0x9b326654,0x87336679,0x66442a39,0xb8b33662,0x10b8661c,
    0x21c08884,0x08210998,0x11188841,0x0eaaa084,0x80aa1071,0x445750b8,
    0x2e044408,0x3189c541,0x23a88dd4,0x221751b9,0x85370624,0x5621b06c,
    0x70e46c2a,0x1b85d321,0x8b03b116,0x154d50ea,0x0aa4881b,0x3d52c4aa,
    0x2658d42e,0x154b1a82,0x5caeea19,0x4c3b312c,0x22b2b3ca,0x5e552193,
    0x56b2a5ad,0x32a249c9,0x23ca8a21,0x52ea1cc8,0x9951dcca,0x97126419,
    0x86a1e641,0x1b8e749c,0xb86e6271,0x1642c42a,0x0fa212ee,0x89295353,
    0x81ac8534,0x24c9dd45,0x0d8599ba,0x1546ab2a,0x05d6aa37,0x02ac9922,
    0x06d5654b,0xd730dc99,0x91724417,0x46aa6359,0x8d42eb1a,0xdb992555,
    0xda86dc02,0x8d4255c2,0x7350aaa8,0xeb82f223,0x39c832e1,0x38aaa575,
    0x80847773,0x80e81d45,0xb8bc83d8,0x2e0ca448,0x4d4581a8,0x75e54974,
    0x2b2a2440,0xa95c551a,0x22c0bb99,0x06c42ac9,0x6c1b3375,0xb11202e5,
    0x6c4cbc88,0x50bac6a4,0x22665563,0x4072a038,0x108800ca,0x20821555,
    0x88e7128a,0x08053108,0x2c007104,0x8d82c093,0x2c9a641c,0x372e2554,
    0x5dcd4585,0x22ccaa49,0x1541540b,0x06e46a1b,0x1b10530a,0x4dc322a8,
    0xbb001749,0x22547479,0x0bac6a4b,0x99701635,0x000014c9,0x00000000,
    0xb0000000,0x161e66ec,0x8ee2c46e,0x3501e80f,0x9689a8b0,0x42c57154,
    0xbb54ccda,0x0e88d45b,0xb90530e2,0x01915499,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x88000000,
    0x4a60170a,0x908921a8,0x8dd4a653,0x44a610a8,0x7711bbbb,0x00000377,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x25d30000,
    0x3518920c,0x8c031045,0x1b955099,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x22200000,0x0301cc11,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_9_latin1_x[224]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,-1,
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,
-1,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__arial_9_latin1_y[224]={ 7,1,1,1,0,1,1,1,1,1,1,2,6,4,
6,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,2,1,2,1,2,1,2,1,1,
1,1,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,1,1,3,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,2,1,
1,1,1,1,1,3,2,4,1,0,1,2,1,1,1,2,1,3,6,1,1,3,1,1,1,2,-1,-1,-1,-1,
0,-1,1,1,-1,-1,-1,0,-1,-1,-1,0,1,-1,-1,-1,-1,-1,0,2,1,-1,-1,-1,0,-1,1,1,1,1,
1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,
 };
static unsigned short stb__arial_9_latin1_w[224]={ 0,2,3,5,5,7,6,2,3,3,3,5,2,3,
2,3,5,4,5,5,5,5,5,5,5,5,2,2,5,5,5,5,8,7,5,6,6,5,5,6,6,2,4,6,
5,7,6,6,6,6,6,5,5,6,6,8,6,6,5,3,3,2,4,6,2,5,5,4,4,5,3,4,4,2,
3,4,2,7,4,5,5,4,3,4,3,4,4,6,4,4,4,3,2,3,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,2,5,5,5,6,
2,5,3,6,3,4,5,3,6,6,3,5,3,3,3,5,5,2,3,2,3,4,7,7,7,5,7,7,7,7,
7,7,8,6,5,5,5,5,2,3,4,3,7,6,6,6,6,6,6,5,6,6,6,6,6,6,6,5,5,5,
5,5,5,5,7,4,5,5,5,5,2,3,4,3,5,4,5,5,5,5,5,5,5,4,4,4,4,4,5,4,
 };
static unsigned short stb__arial_9_latin1_h[224]={ 0,6,3,7,8,7,7,3,8,8,3,5,3,2,
1,7,7,6,6,7,6,7,7,6,7,7,5,7,5,4,5,6,8,6,6,7,6,6,6,7,6,6,7,6,
6,6,6,7,6,7,6,7,6,7,6,6,6,6,6,8,7,8,4,1,2,6,7,6,7,6,6,7,6,6,
8,6,6,5,5,6,7,7,5,6,7,6,5,5,5,7,5,8,8,8,2,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,7,8,7,5,6,
8,8,2,7,4,4,4,2,7,1,3,5,4,4,2,7,8,2,3,4,4,4,7,7,7,7,8,8,8,8,
7,8,6,8,8,8,8,7,8,8,8,7,6,8,9,9,9,9,8,4,7,9,9,9,8,8,6,7,7,7,
7,7,7,7,6,7,7,7,7,7,6,6,6,6,7,6,7,7,7,7,7,4,6,7,7,7,7,8,8,8,
 };
static unsigned short stb__arial_9_latin1_s[224]={ 255,230,250,115,71,151,159,124,121,77,120,
129,131,152,162,178,193,1,107,199,42,205,211,69,217,223,177,236,186,202,180,
95,125,222,210,247,81,75,101,8,113,253,31,239,233,54,88,50,246,57,62,
85,48,15,35,26,19,12,6,98,22,87,208,165,149,216,64,205,42,193,189,
91,176,173,55,162,159,152,160,140,70,80,125,115,76,110,147,140,120,26,135,
102,106,109,156,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,
199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,255,47,149,
36,165,133,198,185,145,1,192,213,196,152,229,172,134,171,224,237,138,187,215,
142,127,241,233,228,143,135,127,121,90,221,113,229,239,141,150,134,161,155,167,
50,173,176,180,28,181,191,29,36,43,22,64,218,108,15,8,1,208,201,103,
237,16,22,32,38,44,56,125,68,73,62,243,85,100,91,95,146,79,120,102,
96,166,249,172,244,167,182,1,6,11,50,81,59, };
static unsigned short stb__arial_9_latin1_t[224]={ 1,18,27,10,1,10,10,33,1,1,33,
27,33,33,33,10,10,27,27,10,27,10,10,27,10,10,27,10,27,27,27,
27,1,18,18,10,27,27,27,19,27,18,19,18,18,27,27,18,18,18,27,
18,27,19,27,27,27,27,27,1,19,1,27,33,33,18,18,18,19,18,18,
10,18,18,1,18,18,27,27,18,18,18,27,18,18,18,27,27,27,19,27,
1,1,1,33,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,1,19,1,
19,27,18,1,1,33,19,27,27,27,33,10,33,33,27,27,27,33,10,1,
33,33,27,27,27,10,10,10,10,1,1,1,1,10,1,18,1,1,1,1,
10,1,1,1,11,18,1,1,1,1,1,1,27,10,1,1,1,1,1,18,
1,11,11,11,11,11,10,18,10,10,10,1,10,18,18,18,18,10,18,10,
10,10,1,10,27,18,10,11,11,11,1,1,1, };
static unsigned short stb__arial_9_latin1_a[224]={ 36,36,46,72,72,115,86,25,
43,43,50,75,36,43,36,36,72,72,72,72,72,72,72,72,
72,72,36,36,75,75,75,72,131,86,86,93,93,86,79,100,
93,36,64,86,72,107,93,100,86,100,93,86,79,93,86,122,
86,86,79,36,36,36,60,72,43,72,72,64,72,72,36,72,
72,29,29,64,29,107,72,72,72,72,43,64,36,72,64,93,
64,64,64,43,33,43,75,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,36,43,72,72,72,72,33,72,
43,95,48,72,75,43,95,71,52,71,43,43,43,74,69,36,
43,43,47,72,107,107,107,79,86,86,86,86,86,86,129,93,
86,86,86,86,36,36,36,36,93,93,100,100,100,100,100,75,
100,93,93,93,93,86,86,79,72,72,72,72,72,72,115,64,
72,72,72,72,36,36,36,36,72,72,72,72,72,72,72,71,
79,72,72,72,72,64,72,64, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_9_latin1_BITMAP_HEIGHT or STB_FONT_arial_9_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_9_latin1(stb_fontchar font[STB_FONT_arial_9_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_arial_9_latin1_BITMAP_HEIGHT][STB_FONT_arial_9_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_9_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_9_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_9_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_9_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_9_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_9_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_9_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__arial_9_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__arial_9_latin1_s[i] + stb__arial_9_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__arial_9_latin1_t[i] + stb__arial_9_latin1_h[i]) * recip_height;
            font[i].x0 = stb__arial_9_latin1_x[i];
            font[i].y0 = stb__arial_9_latin1_y[i];
            font[i].x1 = stb__arial_9_latin1_x[i] + stb__arial_9_latin1_w[i];
            font[i].y1 = stb__arial_9_latin1_y[i] + stb__arial_9_latin1_h[i];
            font[i].advance_int = (stb__arial_9_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__arial_9_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_9_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_9_latin1_s[i] + stb__arial_9_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_9_latin1_t[i] + stb__arial_9_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_9_latin1_x[i] - 0.5f;
            font[i].y0f = stb__arial_9_latin1_y[i] - 0.5f;
            font[i].x1f = stb__arial_9_latin1_x[i] + stb__arial_9_latin1_w[i] + 0.5f;
            font[i].y1f = stb__arial_9_latin1_y[i] + stb__arial_9_latin1_h[i] + 0.5f;
            font[i].advance = stb__arial_9_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_9_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_9_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_9_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_9_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_9_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_9_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_9_latin1_LINE_SPACING
#endif

