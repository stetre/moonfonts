// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_19_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_19_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_19_usascii_BITMAP_WIDTH         128
#define STB_FONT_courier_19_usascii_BITMAP_HEIGHT         86
#define STB_FONT_courier_19_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_19_usascii_FIRST_CHAR            32
#define STB_FONT_courier_19_usascii_NUM_CHARS             95

#define STB_FONT_courier_19_usascii_LINE_SPACING           9

static unsigned int stb__courier_19_usascii_pixels[]={
    0x08800490,0x10026600,0x42000800,0xba809980,0x40000cc0,0x0aa20098,
    0x004cccc4,0x31544b9e,0x5512901b,0x0530580b,0x1d4e600b,0x99c886ba,
    0x4eb9720d,0xdbda9764,0x9cb84dbd,0x555e41da,0x5120c01a,0x59c40645,
    0x4c1cc0b0,0x00aa2bed,0x2160e83a,0x44c8e60a,0x3e61cc0c,0x12021d41,
    0x44800019,0x59cc122a,0x2a0640b0,0x4058d50c,0x70b1dc59,0x12225cb0,
    0x0b059819,0x4c00c8b0,0x5125cccc,0x09298245,0x42424416,0x85901540,
    0x22711668,0x320ee5cc,0x20930730,0x590f2204,0xc9600399,0xed848aa0,
    0x82c1efee,0x5803a80c,0x459e07a0,0x3a963739,0xf3019388,0x17ae0910,
    0x012e22ea,0x2550d996,0x0713504b,0xc9812216,0x1e03703c,0x59cc5874,
    0x93902a96,0x6cc73660,0x24024c00,0x2a1952c0,0x266e0b52,0x00370b03,
    0x7c162166,0x398b0e80,0x8044b377,0x937300f8,0x00dc005b,0x064b006a,
    0x3b262455,0x42c0cddc,0x20320205,0x2781e81c,0x09532c45,0x03981220,
    0x19006e00,0x45512580,0x2c06a904,0x2234406e,0x85909105,0x301a1659,
    0x39803203,0x32441880,0x2c024417,0xac122a89,0x2058b01b,0x00cddcc8,
    0x2c8b3032,0x2088ee16,0x13b32a7e,0x200e6ecc,0x5c0cccec,0x5800ccce,
    0x405c5512,0x2a960175,0x91005500,0x416341b0,0x8221dceb,0x31009998,
    0x00200133,0x793a8002,0x90762298,0x2cb97032,0x32005500,0x742aa440,
    0x0000002c,0x20000000,0x0005dcc9,0x02098800,0x11000880,0x00099800,
    0x00000000,0x004cc000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x03300000,0x04c01530,0x9885d440,
    0x4004c000,0x202a602a,0x40199999,0x7bb50098,0x13026600,0x81ccdc00,
    0x5c0d9bd8,0x42daedbd,0x77319acb,0x336f6e00,0x2ab621cc,0x06d5e41d,
    0x0d555593,0x0dd82c98,0x5de540b5,0x38016a24,0x4910e40e,0x3217c439,
    0x2600e602,0x10643d43,0x089614c9,0x54298058,0x00903a83,0x2071c00b,
    0x32032586,0x27301262,0x21e09018,0x17032585,0x30981cc0,0x10d00e85,
    0x0262b009,0x4330bb88,0x2e0b0c85,0xb98042e2,0x82c3dbdc,0xc92a2b85,
    0x83701640,0x42addbeb,0xecc83605,0xccd80ccc,0x5dcc02db,0x542e1222,
    0x36322e81,0x20fcc2dc,0x0f106e2b,0x49317bb6,0x951603c9,0x90242f88,
    0x1e804881,0x80ddc42c,0x4b60b848,0x83722dc8,0x224834c4,0x950db31d,
    0xcda85913,0xd891038b,0xd02c2d80,0x90b00910,0x215dcc10,0x66d40d85,
    0x530ae299,0xda8481cc,0x0585848c,0x2c1a80d4,0x440dc2a8,0x85804885,
    0x85871c04,0x0e629806,0x04834c53,0x00c84848,0x06c24036,0xb076216c,
    0x0b009103,0x570e3809,0x214c01d4,0x85f30645,0x5c2c401b,0x16cc1220,
    0xe9893090,0x1dbdd882,0x90b00910,0xc82bb980,0x6e4403dc,0x8b33622d,
    0x2dbecbda,0x101b9990,0x5d419999,0x406a01ee,0x3daddbea,0xc8822da8,
    0xec84ccec,0x10033ae4,0x99800440,0x01000809,0x08800998,0x4c000030,
    0x6e66d400,0x000000cd,0x00000000,0x00000000,0x00000000,0x92664400,
    0x33726399,0x20026201,0x00a00998,0x5b9300d4,0x2006a201,0x90022018,
    0xca879999,0xcca828ad,0x220ba851,0x16443a3b,0x009511fd,0x02405953,
    0x23b702c8,0xda9ca859,0x36e1b600,0x6ccc402d,0x6c42ee09,0x8bb515c5,
    0x20a2a829,0x00483fe4,0x100480a6,0x49309301,0xab824458,0x40055085,
    0x2a381d45,0x414c5882,0x1202c02a,0xecb82980,0x6c003ccc,0x85808d01,
    0x01540b58,0x090048b0,0x0aa0a604,0x45200ecc,0x405303de,0x416e5404,
    0x48806e06,0x1540b0c8,0xb0058b00,0x15414c00,0xba40065c,0x09014c03,
    0xa8160a60,0x4881b101,0x0082a816,0x4ccc458b,0x414c00b0,0xee80b82a,
    0x2600b320,0x14c01202,0x880d806c,0x8160d80d,0x4580c82a,0x687554c5,
    0x02e12200,0x7f07fc40,0x24053007,0x03b82980,0xd301b10d,0x2a09d999,
    0x22440c82,0x01e4b02c,0xa82441b0,0x3aa40881,0x109014c0,0x90760530,
    0x2600d883,0x5500d999,0x440b8570,0x0762580d,0x779d10b3,0x200df301,
    0x02980ea4,0x20f72f2a,0x97bb1029,0x00c0d885,0xb702a816,0x3ba20577,
    0x76c42dbb,0x004404db,0x49930022,0xb9932de9,0x0260399b,0x399bb993,
    0x33320110,0xd9306ccc,0xccddcc89,0x13100180,0x00001880,0x00000000,
    0x00000000,0x00000000,0x00000000,0x4ce64c00,0x99999970,0x2f333227,
    0x262ccb80,0x98b323cc,0x459910cc,0x99970cc9,0x47332207,0x59950cca,
    0x99916654,0x26541999,0x6664c799,0xa855c02c,0x37733b0f,0x4ccec4b3,
    0x4c0ec43b,0x0761660d,0x4c43b0b3,0x8762009d,0x204ec1e8,0x4ddcc459,
    0x1b106c40,0x1c999ca8,0xa9619090,0x8190b162,0x2a82982a,0x751d40ea,
    0xb12c0160,0x090ccb01,0x848580a6,0x80905838,0x42c48aa4,0x2048581b,
    0x4e40588d,0xac016049,0x2ecb00d9,0x8580a609,0x30483884,0x02a80159,
    0x1904b896,0x19910244,0x0580bb00,0x6401d3b0,0x2090cc88,0x2aab6029,
    0x24c3885a,0x540f2e20,0x0bfbba02,0x7006e388,0xb0172007,0x07673a00,
    0x4555545c,0x56c05303,0xce885aaa,0x0dc004dc,0x6c4b0154,0x98059600,
    0x03aab802,0x1b160e16,0x27219350,0x42c05302,0x15003884,0x40550730,
    0x33502c45,0x98053007,0x642c06e4,0x260e62c0,0x4c0ab65a,0x22121602,
    0x190b7003,0x542c0550,0x20033203,0x36162029,0x2c0c8580,0x971e442c,
    0x8580a603,0x57003884,0xc985b797,0x3b222cdd,0x5c81ec1c,0x166ee4c0,
    0xeda8b7a2,0x9999d971,0x873b221d,0xf30fc2da,0xccddcc81,0x76433b20,
    0x199d930c,0x00002200,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x99999500,0x33322399,0x9951cccc,
    0x33320599,0x333224cc,0x43ca81bc,0x05951ccc,0x66644793,0x0136e202,
    0x00000000,0x57333377,0x54cccec4,0x36a66762,0x2ccccec0,0x12e66762,
    0x43a887aa,0x440dd85d,0x047205d9,0x053000b6,0x07f42d40,0x85855055,
    0xb1221229,0x1b8581c8,0xb0a62dcc,0xa82dcc55,0xa80b02aa,0x0055002d,
    0x1ff105b3,0x32c03154,0x28320904,0x0dc2c0ea,0x4298eae6,0x482c64b5,
    0x5c015416,0x1015401d,0x5950007b,0x2d56c077,0xb1035048,0x1e5556c0,
    0x8530d9cc,0x21691375,0x97203248,0x88332200,0x1099bb99,0x2a000199,
    0x2b603bac,0x0aa0905a,0xaaad8036,0x489cc0cc,0x46f25853,0x90e61b85,
    0x88036733,0x37732a3d,0x001b73cc,0x312a8351,0x090452c0,0x0445702e,
    0x47316216,0xb92c299b,0x66666c2c,0x205992c6,0x0aa00cc8,0xf9006644,
    0x0b002a83,0x488b0492,0x22416154,0x1614ec39,0x2e0e22c1,0xb83cc2e1,
    0x402a801d,0x509d03d8,0x92c16005,0x540d8390,0x262c42c2,0x81616d43,
    0x124405c5,0x2a1b7b7b,0x00aa002d,0x81f316cc,0x880ccdda,0x5cccccec,
    0x83b999d5,0x2dccccd9,0x9b999d91,0xb066ec41,0x931675c5,0x98b3ae7d,
    0x028043ec,0x14000880,0x00000053,0x00000000,0x00000000,0x00000000,
    0x00131000,0x80110031,0x26000008,0x00000000,0x98801000,0x81884c00,
    0x6dde6419,0xbcbcc880,0x0e65e544,0x9872f326,0x8bb220ce,0x226cbbd9,
    0x2e1b225c,0x9d0fee4f,0x6e44f999,0x6dc5bda9,0x75c2dbcc,0x43bcbdbc,
    0x6424407f,0xb09125c0,0x42e0c848,0x58589108,0x49504858,0x40e4482b,
    0x217403db,0x2c950d85,0x2cd4c1ba,0x0170c0e2,0x8e606a53,0x70a6992a,
    0x242c0139,0x90059930,0x1600ae03,0x16299612,0xbabdc8b9,0x66c005c5,
    0x092ccccc,0x2336912c,0x2eca880b,0x2ec04858,0x037015c0,0x4cb090b0,
    0x0dc97162,0x2e00e62c,0x1cc0d401,0x212a6a72,0x242c0c80,0x54093390,
    0x2c00dc03,0x2c532c24,0x2dc0c866,0x5892206c,0x09036188,0x93132199,
    0x3cc48190,0x261661c8,0x006e0dc4,0x29961216,0x777b1016,0xbcc889d3,
    0x5e64c0cb,0x333261dc,0x0f25b81c,0x079777b3,0x499577b3,0x3b6e3ed8,
    0x373333e0,0x599bb951,0x27549d90,0x6c7667d7,0x04000803,0x00440180,
    0x10011000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x57100800,0x01008822,0x2aaaaaaa,0x226d8002,0x4ccccc43,
    0x22222209,0x00000888,0xbb300000,0x2216edc7,0x3f65f903,0x05c85f99,
    0x55555555,0xf88c4db8,0xdda92a0f,0x9912dddd,0x59999999,0x00000000,
    0x210642c0,0x326e8138,0x55c4f88f,0x4a600049,0x0220dad9,0x00000066,
    0x00000000,0x2e244370,0xf10cddcd,0x4c7f3dc5,0xbbbb0ae3,0x2201bbbb,
    0x00000002,0x00000000,0x01924400,0xd516a1b2,0x00909174,0x00000000,
    0x00000000,0xb0c80000,0x11126ea0,0x00000c30,0x00000000,0x00000000,
    0x55cc0000,0x00054701,0x00000000,0x00000000,0x00000000,0x00005d80,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_19_usascii_x[95]={ 0,4,2,1,1,1,2,3,4,2,0,1,2,1,
3,1,1,1,1,1,1,1,2,1,1,2,3,2,0,0,0,0,1,0,0,1,1,0,1,1,0,1,1,0,
1,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,1,0,3,1,0,1,1,1,1,1,0,1,
1,1,1,0,0,1,0,1,1,1,1,0,0,0,0,1,1,0,4,0,1, };
static signed short stb__courier_19_usascii_y[95]={ 13,2,2,1,1,2,4,2,2,2,2,3,10,7,
11,1,2,2,2,2,2,2,2,2,2,2,5,5,3,6,3,3,2,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,2,2,16,2,5,2,5,2,5,2,5,2,2,
2,2,2,5,5,5,5,5,5,5,3,5,5,5,5,5,5,2,2,2,6, };
static unsigned short stb__courier_19_usascii_w[95]={ 0,3,6,8,8,8,7,4,4,4,7,8,4,8,
4,8,8,8,8,8,8,8,7,8,8,7,4,5,9,10,9,6,8,10,10,9,9,9,9,9,10,8,9,10,
9,10,10,9,9,10,10,8,8,10,10,10,10,10,8,3,7,3,8,11,4,9,10,9,9,8,9,9,10,8,
6,9,8,10,10,8,10,9,9,8,8,10,10,10,10,9,8,4,2,4,8, };
static unsigned short stb__courier_19_usascii_h[95]={ 0,12,6,14,14,12,10,6,14,14,7,10,6,2,
3,14,12,11,11,12,11,12,12,12,12,12,9,10,10,4,10,11,13,10,10,11,10,10,10,11,10,10,11,10,
10,10,10,11,10,12,10,11,10,11,10,10,10,10,10,14,14,14,5,2,3,9,12,9,12,9,11,12,11,11,
15,11,11,8,8,9,12,12,8,9,11,9,8,9,8,12,8,14,14,14,4, };
static unsigned short stb__courier_19_usascii_s[95]={ 126,83,25,21,43,1,84,122,60,65,12,
102,20,71,61,34,10,66,48,108,57,117,29,75,58,67,123,121,111,41,92,
116,74,73,40,95,21,11,1,85,104,95,75,73,63,62,51,38,115,94,19,
1,10,105,30,84,52,41,31,70,52,30,32,80,66,1,37,11,84,21,105,
48,115,29,1,1,11,111,100,30,97,19,90,50,20,59,1,39,70,87,81,
16,13,8,52, };
static unsigned short stb__courier_19_usascii_t[95]={ 1,1,75,1,1,17,54,65,1,1,75,
54,75,75,75,1,17,30,30,1,30,1,17,17,17,17,29,54,54,75,54,
29,1,54,54,30,54,54,54,30,42,42,30,42,42,54,54,30,42,17,42,
42,42,29,42,42,42,42,54,1,1,1,75,75,75,65,17,65,17,65,17,
17,17,30,1,30,30,65,65,65,1,17,65,65,30,65,75,65,65,1,65,
1,1,1,75, };
static unsigned short stb__courier_19_usascii_a[95]={ 161,161,161,161,161,161,161,161,
161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,
161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,
161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,
161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,
161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,
161,161,161,161,161,161,161, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_19_usascii_BITMAP_HEIGHT or STB_FONT_courier_19_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_19_usascii(stb_fontchar font[STB_FONT_courier_19_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_19_usascii_BITMAP_HEIGHT][STB_FONT_courier_19_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_19_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_19_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_19_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_19_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_19_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_19_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_19_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_19_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_19_usascii_s[i] + stb__courier_19_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_19_usascii_t[i] + stb__courier_19_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_19_usascii_x[i];
            font[i].y0 = stb__courier_19_usascii_y[i];
            font[i].x1 = stb__courier_19_usascii_x[i] + stb__courier_19_usascii_w[i];
            font[i].y1 = stb__courier_19_usascii_y[i] + stb__courier_19_usascii_h[i];
            font[i].advance_int = (stb__courier_19_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_19_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_19_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_19_usascii_s[i] + stb__courier_19_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_19_usascii_t[i] + stb__courier_19_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_19_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_19_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_19_usascii_x[i] + stb__courier_19_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_19_usascii_y[i] + stb__courier_19_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_19_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_19_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_19_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_19_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_19_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_19_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_19_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_19_usascii_LINE_SPACING
#endif

