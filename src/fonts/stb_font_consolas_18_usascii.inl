// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_18_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_18_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_18_usascii_BITMAP_WIDTH         128
#define STB_FONT_consolas_18_usascii_BITMAP_HEIGHT         98
#define STB_FONT_consolas_18_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_18_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_18_usascii_NUM_CHARS             95

#define STB_FONT_consolas_18_usascii_LINE_SPACING          12

static unsigned int stb__consolas_18_usascii_pixels[]={
    0xbd800035,0x40b95000,0x2f775408,0x4400ab98,0x03dddb0b,0x05305775,
    0x0d442a00,0x45505400,0x12a3b04d,0x32017f64,0x30ba03df,0xed88dd99,
    0x3f601fdc,0xd8399df4,0x260dfeef,0x87d4001f,0x1002effa,0x09b37c7f,
    0x80be61fb,0x1027c04d,0x1b2039f5,0x2a06b8bb,0x3ee07f1e,0x09b13ea2,
    0xfd985d80,0x3e3f8802,0x85f71366,0x40f701fb,0xffd882f8,0x5cd907ff,
    0x3e003f06,0x7d84f883,0xf88007d4,0x2201ba01,0x24d97e3f,0x01db05f8,
    0x417c40f7,0x20179afc,0xa6c0ba6c,0xf1eeeeea,0xf503f307,0xd9003f83,
    0xfd707c80,0x9b2f47fd,0x2f8807e4,0x07e207a8,0x320355ba,0x3ffa2f36,
    0x755534cb,0x3ea0fe5f,0x35c2f980,0x2ec02f80,0x3f2b3fa2,0x3a4d97a3,
    0x7c427c06,0xfb01f301,0x76c80b75,0x2e7e33ab,0x0fe5f105,0x0be603ee,
    0x07b805f1,0xfc83fdd5,0x25e8fe20,0xd809f14d,0x2a3bd706,0xffd102ed,
    0x37b6c80b,0x0b71f31f,0x541fcbe2,0xd81fa81f,0xfb827405,0x3f88dd01,
    0x5f34d97a,0xec80fb80,0x807d951c,0xd902fffa,0xbbd5eaba,0x0fe5f104,
    0x03ee0be6,0x07cc03e6,0x113e07a8,0x29b2747f,0x0fd401f9,0x07d403e2,
    0x20bf6fe0,0x2ed75d6c,0x4be207b6,0xe88dd03f,0x2ec13a05,0x227c0930,
    0x4d8ae3f8,0x0fb807f1,0x05f103d4,0xc85e8fc4,0x57af55d6,0x3e5f101f,
    0xd55bf703,0x207d403f,0xd00402f8,0xb023fd8d,0x1f602f49,0x02f881ea,
    0x6427c5e6,0xf9df17b6,0xf97c40bd,0x37ffaa03,0x35c3f801,0x7dc07f60,
    0xf13fdd9c,0x80d926cd,0x2207a84f,0xbfcbd82f,0x996c81fe,0x22014ca2,
    0xbd007f2f,0x0fe36400,0x7e403fb0,0x9be27f5f,0x5407ea4d,0x7c07b81f,
    0xceffed82,0x01ead901,0x03f8fd40,0x02a9cfb8,0x007d47e2,0x20400004,
    0x22076c4d,0xd80dd05f,0x32013205,0x36000fe6,0x32007f0f,0x9e403fff,
    0x0000004c,0x8bd11360,0x17fe40fd,0x3613bea0,0x4dd99303,0x43dcbdf9,
    0x3e3ffcde,0x00801cce,0x00000000,0x2f984d80,0x037903f7,0x3000ea20,
    0xcb887999,0x1ccc982c,0x000e6664,0x00000000,0x1504d800,0x000000a2,
    0x00000000,0x00000000,0xb8000000,0x00000002,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x20000000,0x20040029,
    0xd31a82b8,0x0a21d705,0x05303500,0x3bbff660,0x055cc00e,0xaaa88154,
    0x6ef6e402,0x03e5ba22,0x983fffa8,0x83ea4fcf,0x3ea5e86e,0x81ff3000,
    0x9df8807c,0xf700afea,0x09f03fdf,0x441ffba2,0x23fcacfe,0x807c9ffa,
    0x41fc9cf9,0x0fa2f55c,0x517cc3f7,0x426c001f,0x547b807c,0x2013e00f,
    0x707c804f,0x321fc41f,0x1f700f93,0x2ab90be2,0x49f10d97,0x0007d47c,
    0x3e403e40,0x0fcc03ea,0xeeefeea8,0xdd07c82e,0x3b203f88,0x7d42eec8,
    0xbfa81f71,0xfb01f9ce,0x983ea27c,0x17bba23e,0x077f63f2,0x0dd319f3,
    0xaa8807dc,0xc81aaadf,0x3f889f07,0x36b7bf20,0x1fe7741f,0x03e8bca8,
    0x507e6bea,0x5117e61f,0x9df90fb5,0xfef98fd7,0x6e6440df,0x9f04cccf,
    0x13e0f900,0x27e407f1,0x03ff913e,0x37a01b20,0xf98fa86c,0x7e43e405,
    0x05d87e63,0xeefeee98,0x9009f05e,0x7fb17a0f,0xd87ca6c4,0x64ff7f26,
    0x8023f307,0xafa83ffb,0xc87c805f,0x33f63f87,0x3ee01abc,0xc804f800,
    0xdb37f707,0x64ffcc7f,0x27f36c87,0x9d06d9fd,0x3e20bff5,0x1fdfa80f,
    0x87c87c80,0x3bbbe63f,0x01f704ff,0x0f9009f0,0x1fc6ffe4,0x361f2bf6,
    0x3fa21f75,0x17f6b84f,0x209f105f,0x400fd8fa,0x3f87c87c,0x5c1f617a,
    0x805e800f,0x0fe2007c,0xf88f91f9,0x7fc43f53,0x8fc4fcc1,0x8077443d,
    0x00ee88fa,0x3e1f21f2,0x0fb09f13,0x3ee003ee,0x07c8199b,0x7dc4fe20,
    0xfd335f94,0x366bbe21,0x7f2745ff,0x3ff6a5f1,0x7c43ea01,0x3f26620e,
    0x7f0f9099,0x7f666fec,0x1001f702,0x2627ffd9,0x40099fc9,0x545db3f8,
    0x4c0dfffe,0x3fbaeffe,0x27fd41d7,0xfa801793,0xffb9be60,0x0f94ffff,
    0xbccca87f,0x0003ee00,0xfffffb81,0x001c804f,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x2e000000,
    0x502eec8c,0x55510577,0x2ee60555,0x41554402,0x2a202cca,0xcba80bcb,
    0x2aaaa22c,0x0a606a1a,0xa82f32a2,0xaaa81bcc,0x3b22aaaa,0x6c1fdade,
    0x260dfeef,0xc85eeeef,0xf904fddf,0x3fa21ddf,0x74c0efdd,0x3a25feef,
    0x3a67eeef,0x0fe5feee,0xddff51f2,0x3f7be6df,0x7ffff43f,0xf13f25ff,
    0x9f517dc9,0x3ea00fcc,0x5f90bea2,0x3f983ee0,0x64303be2,0xf2f4001f,
    0x6fccf907,0x00fd00c0,0x6c3e43f7,0x4fb09f16,0x42f401f9,0xc807e65f,
    0x1f91fc47,0xe8006e80,0xe9f20fe5,0x407c8006,0x643e44f8,0x3f505f36,
    0x47f007e6,0x01b27fd8,0xd07ec9f3,0x005f900b,0x320fe5e8,0xd0007f17,
    0x640ee80b,0x03f55e87,0x3bfe65f3,0x4cbe20be,0x37b67cef,0x7fd43eff,
    0x4027c1ee,0xd002efe8,0x9be41fcb,0x88aaaa2f,0x7dc05ecc,0x9fc47c81,
    0x12f980fb,0x21dfb755,0xf74fbaf9,0x3266ffa1,0x3fffa63f,0xa800fe22,
    0x2f402ffe,0x3eaf907f,0xe89bfb61,0x9f103fee,0x3ae6bf20,0xf503f50e,
    0xf897dc03,0x5e9ee2ff,0x229f36d8,0x0013e1fd,0x5e80bfa6,0x7cdf20fe,
    0x3ee06c82,0xf900ed82,0x7cc19fff,0x2200fb82,0xdb03be3f,0x6dbe42ec,
    0x001ba5f8,0x4bf027c4,0x9f16d84f,0x44f80d90,0x01f201fb,0x80bd11ba,
    0xf11b21fa,0x57a07e47,0x3ee5e85e,0x209f0002,0x3e17a3f8,0x0d903f65,
    0x09f117cc,0xdfa807c8,0x2620feaa,0x7cc5fb99,0x220ee99d,0x91fc99df,
    0x85f9337f,0x24baacfe,0x1fda99ac,0x41fd5595,0x1fda9cfb,0x3666ffe2,
    0xdd733336,0xaaaabfd8,0x75401f22,0x7fdc0dff,0xffd303ef,0xdffd301b,
    0x3ffffc85,0x47dfff90,0x21dffffe,0xb81effe9,0xd881efff,0xff94ffff,
    0xfff819ff,0x12a6ffff,0x01880100,0x40040020,0x98010008,0x00100000,
    0x000c4044,0x00000000,0x00000000,0x00000000,0x00000000,0x2a606a20,
    0x10d40550,0x02a83795,0x35014c6a,0x0aa81950,0x5505514c,0x55555554,
    0x44350532,0x2aaaaaaa,0x2aaaaaa6,0x46e8dd10,0x20bee5f8,0xddfd32fa,
    0x4407e45f,0x1fc0f73f,0xff83ffd3,0x43ff3643,0x3fffe7fa,0xc8f95fff,
    0x3fbba61f,0xdd50eeef,0x3ea3ddff,0xfc8fe61f,0x12f43740,0x0be67d89,
    0xf03dc3ee,0x07f37f25,0xf16c8fff,0x203f6c7d,0x7d4f93f8,0x7402f402,
    0x1f907905,0x47f507f3,0x07dc01fb,0x3d4db0bf,0x7dc663f0,0xd91fe7c1,
    0x5fc5afe2,0x7c87dc07,0x0bd007f3,0xf8800bd0,0x23f606ed,0x0fb804f8,
    0x23f883f2,0x3e2550fa,0x5fc1fb81,0x4fcdb26c,0x00f9db9f,0x747e49f1,
    0xd00bd005,0x3ff5000b,0x07de7cc0,0x8be62f40,0x7c3e60fa,0x3f701f16,
    0xd92f9bf8,0x2bb363e6,0x41f700f9,0x3a006dfc,0x8005e805,0x7e400ff9,
    0x81fc803f,0x3f31b65f,0x01f33ff3,0xdb3f83f7,0x7d47cdb2,0x9f101f37,
    0x2006efc8,0x505e805e,0x017fba05,0x5f900df1,0x443f9f20,0x79becc9f,
    0x33f83f70,0xf9ead95f,0x1f703f34,0x004f9fc8,0x30bd00bd,0xa9fc83ff,
    0x202f403f,0x2be602fc,0x9faf80fa,0x3f707aeb,0x5b37a3f8,0x0fc4227a,
    0xfbbe427c,0xe805e803,0x260ff885,0xe803f64f,0x200bf205,0xf9f06dcf,
    0x7dc1f3e2,0xdbf51fc1,0x20fc41ee,0x367c80fb,0x402f401f,0x1fd0105e,
    0x0bd02fcc,0x2aaab7ee,0xf03ffc82,0x5137f49f,0x3e357fb5,0x07bb7f43,
    0x905f85f1,0x3a00ee8f,0x5dd55305,0x417dc015,0x20bd02fc,0x6ffffffd,
    0xfd00ffa8,0xff737dc5,0x0febffff,0x441eedf7,0x6407ee2f,0xbd02fc47,
    0x3ffffee0,0x0000002f,0x00000000,0x00000000,0x00000000,0x53035000,
    0x202aaaa6,0x0aaaaaa8,0x15555551,0x004d5554,0x2a61442a,0x154401aa,
    0xa9835500,0x00d40aaa,0x0a81bca8,0x5df20fe0,0x4c3ffeef,0x31eeeeef,
    0x43dddddf,0x02fffeef,0x3f235c7e,0xf504ffee,0x7ff5005f,0x5ffeefc8,
    0x9fd1013e,0x01fd87fb,0x9eef907f,0x0be60fd8,0x1fc02f98,0x1f103fb1,
    0xfb8f9172,0x405edd80,0x3e43fcf8,0x013e7f71,0x207dc1db,0xc83f83fc,
    0x22fa8f77,0x0be602f9,0x44dd07f0,0xceeccfcc,0x42f88f92,0x6407caf8,
    0x43e43f8e,0x4f809f6f,0x44fb83f8,0x8f77c83f,0x80be60fb,0x41fc02f9,
    0x33f7227c,0x8f92cefc,0x4c7d40fa,0xf13f302f,0xf6e87c87,0x4e83f809,
    0x3be1bf30,0xf77ecccc,0xf989f955,0x3e62aaac,0x1fc4cccd,0xe9aa07dc,
    0x76e67e42,0x413e6d81,0x7c87f14e,0x404fa7cc,0xb02f446e,0x3bbbbe5f,
    0xffdf77fe,0xddddf305,0x77777ccd,0x3ea0fe0e,0xc85f2dc1,0x20dfeeef,
    0x2e1f23f8,0xfc87f10e,0x13e6fdba,0xffbbdf30,0x7c3fd109,0x6cf77c83,
    0x2602f986,0x5c1fc02f,0x55db530f,0x263e457f,0xfa83ea4f,0x3f88be62,
    0x21ef77e4,0xacb8804f,0x0774c3e8,0x3ddf20fe,0x02f987f1,0x07f00be6,
    0x777f5cdd,0x21f26efe,0x3ffff66e,0x3bbf24ff,0xf92eefee,0x88004f80,
    0x7c17ea2f,0xd8f77c83,0x980be60f,0x2e1fc02f,0x0f33e83f,0xf15f88f9,
    0x4fb55559,0xdfbaaaa9,0x4f80f90a,0x1ec5d800,0x2ef907f0,0x5f31fcc7,
    0x55567cc0,0x36eb7e0a,0x1ea5d05f,0x3faeabf2,0x3f503f51,0x1f21fc40,
    0x35555bf0,0x077e5544,0x5f20fe00,0x3e67d87b,0x3fffe602,0x3bffe1ff,
    0x35c7e02d,0x0e77ffe4,0x813e20db,0x203e43f8,0x24ffffff,0x0003defa,
    0x00000000,0x00000000,0x00000000,0x00000000,0x3bb2214c,0x6fff640d,
    0x0deed981,0x006f7644,0x3ffb2200,0x5cba16e4,0x221dfd8c,0x2ec8de8d,
    0x05d30330,0xd816e1d7,0x7745fa82,0x7b10feaa,0x7dc1fd75,0x3e21cabd,
    0x201feabe,0x2abba05e,0x4fe1f23a,0x27ebceec,0xcdcfbdf9,0x1ba07906,
    0xf107b97a,0x7dc3fb85,0xf9813e20,0x6d80bf12,0x417a05f8,0x21f202f9,
    0x7cc7f93f,0x23f69f31,0x771b30f9,0x307dc3d3,0x2b87d45f,0x417ec3f3,
    0x3305d85e,0xf003ea7f,0x2f40f907,0xc80aef88,0xf0f93f87,0x9a6c7e67,
    0x3b77ae0f,0x8f91fc43,0x3e6df1f9,0xff01ee88,0x5cdfffff,0xf93ffffd,
    0x7b82f880,0x2bbaaaa2,0x3ff660aa,0x4fe1f20d,0x3f33f87c,0x2e07cd36,
    0x7cdb02ff,0x9fe9af84,0x7409f57a,0xf117cc05,0xf8807ee7,0x3ba67c83,
    0x80eeeffe,0x0f90ffb8,0x4fe1f27f,0x3e69b1f9,0xdb79bd30,0x0fa9fa81,
    0xbcdccbe8,0x36037e66,0xf31b600f,0xbd013e67,0x02f40bd0,0x83ee5f30,
    0x7f0f93fa,0xf9a6c7e6,0x814f2510,0xf9b05dcf,0xe88b9d53,0x4df7cc0e,
    0x735f9099,0x56fec7ff,0x273ea0b9,0x17a00fd9,0x7ecccd4c,0xff739f10,
    0x4cfe1f27,0x03e69b1f,0x5ff900f2,0x7fc5bf20,0x4c1fd883,0xd11ffffe,
    0xc87f3dff,0x7d41efff,0x2f401eff,0x2effffa8,0x9f4f7f5c,0x3f33f87c,
    0x0007cd36,0x3ee07f88,0x5c80bf64,0x20008060,0x2a000800,0x2004c401,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x3bbbbbaa,0x89761761,0x00beda8e,0xe8f62035,0x25ffffff,0x3511532a,
    0x5dc41544,0x64791040,0xcccccccc,0x03777754,0x2aa20000,0x3e60feaa,
    0xcf987f24,0xf983fcbf,0x30ffa80f,0x43555555,0x7f31f96f,0x77f44f98,
    0x3ee3f11f,0x9999991f,0x3ff27999,0x000003ff,0x5f705f50,0x0ef987f3,
    0x176ba176,0x3e000ff4,0x07f11f96,0x6c3e65b1,0x3be67dbf,0x00000000,
    0x813e2000,0x2f985efd,0x7c5aa254,0xffb0fc81,0xaf49ffff,0x1007f17b,
    0x041eeb87,0x00000000,0x22037400,0x01f980ff,0xb99ae2f8,0x2aaaaa3f,
    0x2d4f21aa,0x0000003b,0x00000000,0xd801fb00,0x01f984ff,0xde9fc2dc,
    0x00000002,0x00000000,0xf7000000,0xfbafb803,0x2200fcc2,0x00000880,
    0x00000000,0x00000000,0x999df980,0xfd93e609,0x00007e61,0x00000000,
    0x00000000,0xf9000000,0x229fffff,0x9877c46e,0x0000001f,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_18_usascii_x[95]={ 0,3,2,0,0,0,0,3,2,2,1,0,2,2,
3,1,0,1,1,1,0,1,1,1,1,0,3,2,1,1,1,2,0,0,1,0,0,1,1,0,0,1,1,1,
2,0,1,0,1,0,1,0,0,0,0,0,0,0,0,3,1,2,1,0,0,1,1,1,0,1,0,0,1,1,
1,1,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,1,4,2,0, };
static signed short stb__consolas_18_usascii_y[95]={ 13,0,0,1,-1,0,0,0,-1,-1,0,3,10,7,
10,0,1,1,1,1,1,1,1,1,1,1,4,4,3,6,3,0,0,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,15,0,4,0,4,0,4,0,4,0,0,
0,0,0,4,4,4,4,4,4,4,1,4,4,4,4,4,4,0,-2,0,6, };
static unsigned short stb__consolas_18_usascii_w[95]={ 0,4,6,10,9,10,10,3,6,6,8,10,5,6,
4,8,10,8,8,8,10,8,8,8,8,9,4,5,8,8,8,7,10,10,8,9,10,8,8,9,9,8,7,9,
7,10,8,10,8,10,9,9,10,9,10,10,10,10,9,5,8,5,8,10,6,8,8,8,9,8,10,10,8,8,
7,9,8,10,8,10,8,9,9,8,9,8,10,10,10,10,8,7,2,7,10, };
static unsigned short stb__consolas_18_usascii_h[95]={ 0,14,5,12,17,14,14,5,18,18,9,10,7,2,
4,15,13,12,12,13,12,13,13,12,13,12,10,13,11,5,11,14,17,12,12,13,12,12,12,13,12,12,13,12,
12,12,12,13,12,16,12,13,12,13,12,12,12,12,12,17,15,17,7,2,5,10,14,10,14,10,13,13,13,13,
17,13,13,9,9,10,13,13,9,10,13,10,9,9,9,13,9,17,19,17,4, };
static unsigned short stb__consolas_18_usascii_s[95]={ 127,122,68,50,34,21,10,64,4,11,97,
48,49,109,93,95,30,54,23,107,81,21,41,83,50,109,122,122,1,55,119,
104,50,70,61,59,39,30,21,97,1,113,79,92,101,72,63,10,92,75,11,
69,102,87,32,43,1,12,116,69,86,44,40,98,75,19,1,28,112,10,82,
71,62,53,61,43,103,86,77,37,1,112,30,59,93,68,106,117,19,32,10,
26,1,18,82, };
static unsigned short stb__consolas_18_usascii_t[95]={ 1,1,87,63,1,21,21,87,1,1,76,
76,87,87,87,1,36,50,50,36,63,36,36,50,36,63,50,21,76,87,63,
1,1,63,63,36,63,63,63,36,63,50,36,50,63,50,50,36,63,1,63,
36,50,36,50,50,50,50,36,1,1,1,87,87,87,76,21,76,1,76,21,
21,21,21,1,21,21,76,76,76,36,21,87,76,21,76,76,76,87,21,87,
1,1,1,87, };
static unsigned short stb__consolas_18_usascii_a[95]={ 158,158,158,158,158,158,158,158,
158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,
158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,
158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,
158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,
158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,
158,158,158,158,158,158,158, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_18_usascii_BITMAP_HEIGHT or STB_FONT_consolas_18_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_18_usascii(stb_fontchar font[STB_FONT_consolas_18_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_18_usascii_BITMAP_HEIGHT][STB_FONT_consolas_18_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_18_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_18_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_18_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_18_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_18_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_18_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_18_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_18_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_18_usascii_s[i] + stb__consolas_18_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_18_usascii_t[i] + stb__consolas_18_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_18_usascii_x[i];
            font[i].y0 = stb__consolas_18_usascii_y[i];
            font[i].x1 = stb__consolas_18_usascii_x[i] + stb__consolas_18_usascii_w[i];
            font[i].y1 = stb__consolas_18_usascii_y[i] + stb__consolas_18_usascii_h[i];
            font[i].advance_int = (stb__consolas_18_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_18_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_18_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_18_usascii_s[i] + stb__consolas_18_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_18_usascii_t[i] + stb__consolas_18_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_18_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_18_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_18_usascii_x[i] + stb__consolas_18_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_18_usascii_y[i] + stb__consolas_18_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_18_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_18_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_18_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_18_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_18_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_18_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_18_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_18_usascii_LINE_SPACING
#endif

