// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_bold_17_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_bold_17_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_bold_17_usascii_BITMAP_WIDTH         128
#define STB_FONT_arial_bold_17_usascii_BITMAP_HEIGHT         90
#define STB_FONT_arial_bold_17_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_bold_17_usascii_FIRST_CHAR            32
#define STB_FONT_arial_bold_17_usascii_NUM_CHARS             95

#define STB_FONT_arial_bold_17_usascii_LINE_SPACING          11

static unsigned int stb__arial_bold_17_usascii_pixels[]={
    0x00000000,0x90ed8000,0x13bb6bdd,0x00000126,0x00000000,0x73007e60,
    0x9039bffb,0x447d81bf,0x217c43fe,0x2ffd90ff,0x3ee24efe,0xffd701df,
    0xffeb807d,0x7cbe603e,0xebcfea85,0x19fd3bb1,0x77dc0bd0,0x42febaac,
    0x23ec4feb,0x03ec2efd,0x321faff0,0xfe86ffef,0xd05fffff,0x0bffffff,
    0x70fe23ee,0x25fffbff,0x86fedfff,0x01fb81fc,0x8bf30bea,0x7cc3f47d,
    0xbfc0ed84,0xcdaef87e,0x44bbf21c,0x77e43ffb,0x445ff712,0x43fb9fd9,
    0x25ff11fe,0x307fa3ff,0xd72fb89f,0x8d93d95d,0x3a3ec6f8,0xff81fc87,
    0xf87ebfc0,0x07ff05ae,0x83ff8df9,0x3fffa6fc,0xff11ffff,0x43ff2fe8,
    0x746f84fb,0xffd5bf73,0x46f81f11,0x7ec3fc7d,0xbfc0ff80,0x0effd87e,
    0x7d40ffc4,0x2a07fe27,0x2b7eea7f,0x8df10afe,0x5c3ff2fe,0x3e27e84f,
    0xf37d4df1,0x9f61fe85,0xf07f85f9,0x0fd7f81f,0x4c9fff91,0x21ff107f,
    0x1ff107f9,0xe85f97cc,0x3e5ff10f,0x3607f63f,0x8beaf51f,0xa81f14f9,
    0x3eefb2ff,0xf837c41f,0x07ebfc0f,0x7ccbffaa,0x267f881f,0x0ffa81ff,
    0x5bf77fb5,0x7fe7fdc1,0xfbbfff2f,0xb5c7f60f,0x5cfee1fc,0xfb2ff985,
    0xdf107bf2,0x2ff03fe0,0x9da8987e,0x9c4ffe5f,0x41ffc6fb,0x3fffa7fc,
    0x2e21ffff,0xff2fdcff,0x3a039ff7,0x8bee3e67,0xe82f99fe,0x5fb9f61f,
    0x81ff06f8,0xdf98fd7f,0x3f23f9da,0x3ffefa9e,0xff5177e4,0x7ecf7c47,
    0xf2fd8019,0x8df0021f,0xfdbef8af,0x8df05fdf,0x3f437c7d,0xebfc0ff8,
    0xfeeefd87,0x3bbffa20,0x7f440fff,0x446fffef,0x6c00db4f,0x1001ff2f,
    0xdb55d89f,0x8227bf95,0x3e3ec5f8,0x7f81fc87,0x910fd7f8,0xf9103bff,
    0x05ffddff,0x309ffff9,0xd8017e5f,0x5001ff2f,0x00ee883f,0x8bf10fe4,
    0x7c43f47d,0xca9ffaa3,0x5079fd7f,0xeb82200b,0x18802200,0x00000026,
    0xcfe882ec,0x1feca99b,0x8fb13f6a,0x936c2dfd,0xbffec5ff,0x02985ffe,
    0x00000000,0xf8800000,0x3fb6e201,0x7e40bdef,0x3e63ec0e,0x030fcc3f,
    0x00000000,0x00000000,0x40018800,0x88044008,0x01301101,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x85e88bb2,0x76400009,0x2a16e441,0x807d43ee,
    0x400cfec8,0x80bdffda,0x81eb9dea,0xefeb80fb,0x2e04e80b,0x7d42cefe,
    0x3f917ea5,0x402ffd88,0x3bfea2fd,0x83ef3e5f,0x2f3f204e,0x3ffee04f,
    0x7fe45ffe,0x6d82fffc,0xfffeffe8,0xffb83641,0x7fc1ffee,0x1fe85fb0,
    0x200677dc,0x747fa2fd,0x2f9af99f,0x8ff401f5,0x17ff707e,0x0fe8bfe6,
    0x89f05ff1,0xdfb12efb,0x1fe80fa8,0x17f917ee,0x4effc8ff,0x77540ff2,
    0x4ff12fda,0xfaaf8bfc,0xefc809d1,0x09fb05fc,0xd1be6153,0x7c2f885f,
    0x220dc43f,0x10cfe82f,0xfadf9833,0xca77fe44,0x7fe45eff,0xdf32fffc,
    0x7eeea7dc,0xff8801f5,0x007fe04f,0x85fd1be6,0x07fe20fa,0xffa84f80,
    0xdfd00bdf,0x643fd03f,0x87f45eff,0x4df52ff8,0x217715fb,0x3f62064e,
    0xff9813ff,0xf97bbb20,0xc85ff31f,0x2003fcc6,0xfffd506d,0x0dff705f,
    0x85f907fa,0x997f46f9,0x5413ee6f,0x20eff98f,0xfbffacfe,0xffd0ffc5,
    0x7f7fe4df,0x222742ff,0x3ee000ff,0x3ffae600,0xe81ffc40,0x2617e41f,
    0xf997f46f,0xa740ff27,0x9fe27f6c,0x7f43fffc,0x7646f984,0x3e21fd8c,
    0x7441ff82,0x3262f983,0x7c41fe84,0xc83fb00f,0xf10fe82f,0xfd87fc5f,
    0x29d0fa82,0xfe8ff15e,0x217fdc1f,0xe826a6fc,0x3203ea0f,0x417f61ef,
    0xf117f44f,0x17fae63f,0x3f23dfd8,0xffcffc82,0x3f7bf22f,0xfaec9d06,
    0x3fb3bf63,0x7fe42fff,0x365fffdf,0x646fcadf,0xfdffd107,0x71b601ff,
    0x4dffbdff,0x2a00eff9,0x20bf25ff,0x2fccffb8,0x54067f54,0x87fbea0f,
    0xc9dfffd8,0xfffdb80f,0x7ffecc2d,0x9102f41e,0x5c039fff,0x4fffdb87,
    0x90200098,0x0200005f,0x402882a8,0x00080081,0x40026011,0x08031000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x800ed800,
    0xddd02deb,0x9db305dd,0x540ed803,0x7db503ed,0x3aa0f6c1,0x77744004,
    0x7644eeee,0x3a64eb85,0xd8bb620e,0x2007fc0e,0x4c5ffffd,0x4c3fffff,
    0x200ffeff,0x3fff61ff,0x7f7fdc5f,0xbf507fa6,0x20adfc98,0xfffffff8,
    0xf317fc45,0x325fd83f,0x3e07f46f,0xf9fe200f,0x2673ea0f,0xfb9fec09,
    0x7c47fe02,0x7fc3ff16,0x07fa3fb0,0x6ffd4bf5,0x7fe406fe,0x3f66fb81,
    0xf9aff884,0x3e07f41f,0x080cfc9f,0x1afc83fe,0x4001ff10,0x6c9f51ff,
    0x1fd9fe3f,0x25fa83fd,0x407f61fe,0x3fa02ffa,0xf700ffac,0x1fd09fdf,
    0x6fedfff8,0xfd87fd50,0x7fcc3fff,0x7fc01dfb,0x27ecbf31,0x749fbdf5,
    0x532fd41f,0xff983fc8,0x7f7fcc04,0x077ff402,0x8ffe07f4,0x2ffc81fe,
    0x17fdeffc,0x3ff9dff5,0x7fd0ffc0,0x7f44bff7,0x507fa3ff,0x07fd40bf,
    0x64017fa2,0xffb805ff,0xff81fd04,0x6c40ff20,0x4bf5042f,0x07f51ff9,
    0xdfd30ffc,0x457fc9fb,0xb83fd2fd,0x03ff505f,0x22001dfb,0x7fc401ff,
    0x40fe80ff,0x80fee1ff,0x9be605fa,0x4dbe27f8,0x4603fe1b,0x54bf33fc,
    0xfb85fb5f,0xc81ff884,0x7fc001ff,0x7ef7ec00,0x7fc0fe85,0x37cc7fa3,
    0xb9fa27f9,0xfa97f44f,0x9fe69f73,0x447fa4c8,0x7ecfee7f,0x7cc27f45,
    0x002ffa84,0x3ea00ff8,0x743ff89f,0x6efffc0f,0x7ef7ec7f,0x3f3bf20f,
    0x7effdc1f,0xffdff11f,0x6fedfe89,0x87fe77e4,0xfffdfff9,0xfe809880,
    0x06eeeeef,0xff8807fc,0xfe83fee4,0x67fd7fc0,0x0e7fe441,0x40bfff22,
    0x6d42dffb,0xffd985ff,0x6ffe440d,0x77fff542,0xfd0bf501,0x0fffffff,
    0xdf900ff8,0x07f4bfd0,0x20020020,0x00801000,0x30010008,0x000bf500,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x1f7445d9,
    0x83ec83b6,0x3bbae5e9,0x1db5eeee,0x777776c0,0xb0076c2d,0xd87ddddd,
    0xeda74c3e,0xc9f7642e,0x707b601e,0x903b63dd,0x137fd49f,0xc86fb8ff,
    0x3ffff24f,0x01fd7fff,0x7ffffff4,0xe803fe3f,0x26ffffff,0x57e60ffe,
    0x3fe25fff,0x7405fd4f,0xe8bfee2f,0xfb37d40f,0x117ea1ff,0x01ff81ff,
    0x01fd0bf7,0x9bf20ff4,0x87fa00ff,0xbffd0ffa,0x7fffafcc,0x7f53ffea,
    0x7d4bfa02,0x4ff1002f,0x7f92fcff,0x37cc7fd0,0x3fd0bf70,0x0ff43df7,
    0xb0ff9bea,0x3a0ff47d,0x25fffd2f,0x3fbff5f9,0x7f53f7f2,0x3eabfa02,
    0xe80ed83f,0x4fadf99f,0x4df703fd,0x17ee04fc,0x9ff73ffa,0xfeaa9bfe,
    0x17f23fe3,0x8ffd43fd,0xbf36fcfe,0x7f4feffe,0x405fd4fb,0xd06ffcfe,
    0xf77fb01f,0x41fedf17,0x03ff1ff8,0x1ff42fdc,0x3fffa3ff,0x3fe0cfff,
    0x7ff40efc,0x3fa5ffff,0xf5f9cfe8,0x7bf1bf3f,0xe80bfa9f,0xe82fffff,
    0xfdcfb80f,0x40df5fd1,0x406f9cfd,0x21fe85fb,0xf99fd1fe,0xbffff09f,
    0x7ddddfd0,0xbff98fe8,0x5fd1ff5f,0x3fa9f77f,0x2efffa02,0x407f40ff,
    0x3f27fef9,0x3bea04fe,0x2fdc03fc,0x23fd07f4,0x89ff11fe,0x741feeff,
    0xc87f401f,0x91ff5fff,0x29f73fdf,0x93fa02fe,0x807f45fe,0x3fe65fff,
    0x7fffc02f,0x742fdc00,0x7f47fa0f,0xff87fea1,0x0ff46fa9,0x7fc43fa0,
    0xff51ff5f,0x17f53eef,0x7fd45fd0,0x7ec03fa2,0x007ffc3f,0x2e017ff2,
    0x3a0fe85f,0xfd83fd1f,0x1fec3fe6,0x0fe803fd,0x47fd7fea,0x29f75ff8,
    0x4eeeeefe,0x0efd85fd,0x3fee01fd,0x4c037ec0,0x5fb802ff,0x47fa0fe8,
    0xa7fc41fe,0x21ff30ff,0x07f401fe,0xe87fd7f6,0x3fa9f73f,0xfd6fffff,
    0xfd4ff985,0x00000001,0x00000000,0x00000000,0x00000000,0x0f6c7b60,
    0x2fcc13a6,0x3bbbbbb6,0xddddddb3,0x3bbbb61d,0xd73eb83e,0x1013b605,
    0x0beda8ff,0x3bbbbba6,0xbdddddb4,0xff000003,0xdf507fa3,0xfe8bfd10,
    0xfd4fffff,0x21ffffff,0x6ffffffe,0x83fca7e4,0x3600fff9,0x3fbfee7f,
    0x3ffffea7,0xfffffd5f,0xfed883ff,0x0beea83e,0x507fa3ff,0x8bff90df,
    0x07fa02fe,0x7f4c3fd0,0x04c53f23,0x541fffe4,0x43fe7ffe,0x333313fd,
    0xb07fa3fd,0xfcdfd89f,0x3f7bf21f,0x3fd1ff8f,0x77d46fa8,0xd017f45f,
    0x41fe803f,0x00ff27fa,0xb0df5ff1,0x8aa2ff7d,0x47f504fb,0x21fe41fe,
    0x7f8bf22a,0x747ff3ee,0x6fdcccdf,0xd17e7be2,0x7455559f,0x23ccccdf,
    0x73fc41fe,0xd5fb807f,0x0ff1285f,0x46e817f4,0xefdccdfe,0x3ffeca80,
    0xbfb99df3,0x3fffa3ff,0x3f26ffff,0x7ff45f99,0x3ffa6fff,0x3fa5ffff,
    0xfa8ffc41,0xfc97f402,0x360ff105,0xe87f706f,0x44ffffff,0x3fcbdfe8,
    0x79999df5,0x26ffa3ff,0x9f56fb99,0x59fd17e6,0x4dff4555,0x07fa0999,
    0x47e61ff1,0x2ffe63fc,0xf880ffca,0xf00efd87,0x99bfe81f,0x97ea5fda,
    0x4cdf13fc,0x3fd1ff8a,0xfffb6fa8,0x3fa1ffff,0xd007fa02,0x227f983f,
    0x7e47f90f,0x83ffffff,0x077e47f8,0x1fe85f88,0xff887fc4,0x3fa3ffbb,
    0x1ff9febd,0x96fa83fd,0x1dffdddd,0x1fe80bfa,0xfd10ff40,0xff16c189,
    0x0dfb9999,0x077dcff1,0x3fd07f50,0x3f20ffa8,0x3625fbef,0x23ff2eff,
    0x837d41fe,0x017f45f9,0xddddddfd,0x3fbbbfa3,0x6b9fdc6f,0x3fe21bea,
    0xff8bfc42,0x7e45ffff,0xeeeefe82,0x200105ff,0x1fe8ffc0,0x5f9837d4,
    0xffd017f4,0x3a5fffff,0x40ceffff,0x3fd813fb,0x7f88bf90,0xbffffff7,
    0xffe81fd8,0x0004efff,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x21db076c,0x04c00008,0x000004c4,0x85d90000,0x2a7d50ed,
    0x446eeeee,0x16ffecc0,0x9816fed4,0x07fc3dfd,0x077e63fd,0x701fb500,
    0xdf5bb05f,0x8dfc8de8,0x27b64ffc,0x97ea2efd,0x553ee5fa,0x7c7ffeee,
    0x3eefba0f,0x3f7fee0f,0x767fdc5f,0xfe83fe2f,0x05dffd11,0x077ff5c4,
    0x7ffc17dc,0x767ffc5e,0xf1ffceff,0x41ffb9ff,0x445fb0ff,0x41ffa809,
    0x25df30ff,0xfd0ffc19,0x3d987f41,0x41fe83fe,0x224fffd9,0x441cfffc,
    0x0aacfdaa,0x47fe07ff,0x27fb0ffa,0xc87fe3ff,0x3006f8bf,0xd8f105ff,
    0x3e61cfff,0x6f89fe46,0x3ff07fc0,0x4c3ff620,0x3fea04ff,0xff1fffff,
    0x7cc3fe03,0x0ffcff26,0x5f7c43fd,0x3ff8803f,0xfeb887d0,0xb8df31ff,
    0xe80df34f,0x883ff11f,0xd10effeb,0x99305dff,0x3e199bfd,0x7ccff00f,
    0x07fcfee5,0xfffd83fd,0x027f4400,0xf912a883,0x1fd0ffc9,0x25f987f4,
    0x1ffebefd,0x03bfff91,0x033fff66,0x03fe0bee,0x5cbf33fc,0x7f41ff3f,
    0x5c2ffd41,0xdddffb4f,0x5ffc403d,0x3ff21feb,0x7fdc5fec,0x3fa22fec,
    0xff31fdbf,0x3f220019,0xf82fb80f,0x7ccff00f,0x07fcfee5,0x05ff03fd,
    0x3fff69f7,0x6d401fff,0xfeb83dff,0xefea80be,0x014c0103,0x53017100,
    0x3e01ff01,0x3fb97e67,0x00ff41ff,0x08000000,0x00100080,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x90000000,
    0xe99ba21d,0x3b21bd53,0x2a000204,0x1fffffff,0x4cbb2dd1,0x3766026e,
    0xaaaa8662,0xff70aaaa,0x0000047f,0x2a7f7000,0x6c5f91ff,0x900ff9cf,
    0x2a1ec07f,0x1fffffff,0x4cbf6ff1,0x7d4df17f,0x12feffff,0xffffffff,
    0x74fffee7,0x0000000f,0x3ff6bf10,0x7fc41fd3,0xfff102ff,0x0397b770,
    0x4bf6ff00,0x5cbe66f9,0x0dffda9c,0x74111000,0x0000000f,0x3b7e3fa0,
    0xffa85f9e,0x0ff7ee04,0x2639ff95,0x0ccccccc,0xbf07ddba,0x00000088,
    0x00000000,0x97f7f900,0xff705f9f,0x3e3be20d,0x2a1fec86,0x1fffffff,
    0x00000000,0x00000000,0x3ffe6000,0x440fffa9,0xfb84feff,0x4f445f93,
    0x2666624b,0x00000999,0x00000000,0x40000000,0x0bff17ff,0x83ff37fd,
    0x00bd30ed,0x00000000,0x00000000,0x32000000,0xf90ffa5f,0x00037e4d,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__arial_bold_17_usascii_x[95]={ 0,1,0,0,0,0,0,0,0,0,0,0,0,0,
1,-1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,1,1,0,1,1,0,1,
1,1,1,0,1,0,1,0,0,1,-1,0,0,-1,0,1,-1,0,0,-1,0,0,1,0,0,0,0,0,1,1,
-1,1,1,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0, };
static signed short stb__arial_bold_17_usascii_y[95]={ 13,2,2,1,1,1,1,2,1,1,1,3,10,8,
10,1,2,2,2,2,2,2,2,2,2,2,5,5,3,5,3,1,1,2,2,1,2,2,2,1,2,2,2,2,
2,2,2,1,2,1,2,1,2,2,2,2,2,2,2,2,1,2,1,14,1,4,2,4,2,4,1,4,2,2,
2,2,2,4,4,4,4,4,4,4,2,5,5,5,5,5,5,1,1,1,6, };
static unsigned short stb__arial_bold_17_usascii_w[95]={ 0,3,7,9,8,13,11,3,5,5,6,9,4,5,
3,6,8,5,8,8,9,9,8,8,8,8,3,3,9,9,9,9,15,11,10,11,10,9,8,11,9,3,8,10,
8,11,9,12,9,12,10,10,9,9,12,15,11,12,10,4,6,4,9,10,4,8,8,9,9,8,6,9,8,3,
5,8,3,13,8,9,8,9,6,8,5,8,9,12,9,9,8,6,2,6,9, };
static unsigned short stb__arial_bold_17_usascii_h[95]={ 0,11,4,13,14,13,13,4,16,16,7,9,6,3,
3,13,12,11,11,12,11,12,12,11,12,12,8,11,9,6,9,12,16,11,11,13,11,11,11,13,11,11,12,11,
11,11,11,13,11,14,11,13,11,12,11,11,11,11,11,15,13,15,7,3,4,10,12,10,12,10,12,13,11,11,
15,11,11,9,9,10,13,13,9,10,12,9,8,8,8,12,8,16,16,16,4, };
static unsigned short stb__arial_bold_17_usascii_s[95]={ 126,55,51,97,62,1,15,59,40,1,34,
59,122,89,95,49,119,75,81,10,15,19,29,90,56,47,109,59,49,41,39,
75,7,63,99,56,44,34,25,27,5,1,38,110,101,89,79,84,69,71,49,
75,30,65,17,1,109,96,85,57,68,52,24,78,63,110,1,20,109,119,102,
39,40,121,46,60,121,76,90,10,117,107,69,1,96,30,99,1,14,86,113,
33,30,23,68, };
static unsigned short stb__arial_bold_17_usascii_t[95]={ 1,57,80,1,1,18,18,80,1,1,80,
69,69,80,80,18,18,57,57,32,57,32,32,57,32,32,69,57,69,80,69,
32,1,57,57,18,57,57,57,18,57,57,32,45,45,45,45,1,45,1,45,
18,45,32,45,45,32,32,32,1,18,1,80,80,80,57,32,69,18,57,18,
18,45,45,1,45,32,69,69,69,1,1,69,69,18,69,69,80,80,18,69,
1,1,1,80, };
static unsigned short stb__arial_bold_17_usascii_a[95]={ 68,81,115,135,135,216,176,58,
81,81,95,142,68,81,68,68,135,135,135,135,135,135,135,135,
135,135,81,81,142,142,142,149,237,176,176,176,176,162,149,189,
176,68,135,176,149,203,176,189,162,189,176,162,149,176,162,230,
162,162,149,81,68,81,142,135,81,135,149,135,149,135,81,149,
149,68,68,135,68,216,149,149,149,149,95,135,81,149,135,189,
135,135,122,95,68,95,142, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_bold_17_usascii_BITMAP_HEIGHT or STB_FONT_arial_bold_17_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_bold_17_usascii(stb_fontchar font[STB_FONT_arial_bold_17_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_bold_17_usascii_BITMAP_HEIGHT][STB_FONT_arial_bold_17_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_bold_17_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_bold_17_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_bold_17_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_bold_17_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_bold_17_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_bold_17_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_bold_17_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_bold_17_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_bold_17_usascii_s[i] + stb__arial_bold_17_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_bold_17_usascii_t[i] + stb__arial_bold_17_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_bold_17_usascii_x[i];
            font[i].y0 = stb__arial_bold_17_usascii_y[i];
            font[i].x1 = stb__arial_bold_17_usascii_x[i] + stb__arial_bold_17_usascii_w[i];
            font[i].y1 = stb__arial_bold_17_usascii_y[i] + stb__arial_bold_17_usascii_h[i];
            font[i].advance_int = (stb__arial_bold_17_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_bold_17_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_bold_17_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_bold_17_usascii_s[i] + stb__arial_bold_17_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_bold_17_usascii_t[i] + stb__arial_bold_17_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_bold_17_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_bold_17_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_bold_17_usascii_x[i] + stb__arial_bold_17_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_bold_17_usascii_y[i] + stb__arial_bold_17_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_bold_17_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_bold_17_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_bold_17_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_bold_17_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_bold_17_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_bold_17_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_bold_17_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_bold_17_usascii_LINE_SPACING
#endif

