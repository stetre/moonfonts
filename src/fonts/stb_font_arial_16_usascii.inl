// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_16_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_16_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_16_usascii_BITMAP_WIDTH         128
#define STB_FONT_arial_16_usascii_BITMAP_HEIGHT         78
#define STB_FONT_arial_16_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_16_usascii_FIRST_CHAR            32
#define STB_FONT_arial_16_usascii_NUM_CHARS             95

#define STB_FONT_arial_16_usascii_LINE_SPACING          10

static unsigned int stb__arial_16_usascii_pixels[]={
    0x0260a628,0x5100302a,0x33105003,0x00998020,0x4c051066,0x2001001a,
    0x940a2881,0x3eb96208,0xf07b6164,0xb9dd9101,0x907201bf,0x019b30fd,
    0xd51549df,0xefe985c8,0xeeb882ff,0x261e601e,0x32b30f15,0xc8d50765,
    0x40603e22,0x80eb80ce,0x7dc79858,0x20fc1fdd,0x2e87e22e,0x5f5067cc,
    0x981725c8,0x90b33b87,0x4c34d727,0x20f11646,0xba89ec0a,0x5b06a998,
    0x4dcf4798,0x9d30fc6b,0xe879a643,0x07c4f704,0x553cc051,0xe85b959d,
    0x260f2b90,0x20f11647,0x6f452e0f,0x503b3eec,0x23e6798b,0x7dc3f01b,
    0x2265e62d,0x21f101f8,0x400bb8f9,0x333f2e79,0x5c9a23de,0x4591e05d,
    0x96c1f069,0x1dc7ee4e,0xbd1e63cc,0x5d07e039,0xf983f5d0,0x7754be00,
    0x1e602fcd,0x92a074f1,0x37203f5c,0x40fa6590,0x83e63e0f,0xf10970f9,
    0x3f623cc1,0x1741f83e,0x0fcc375c,0x45f52f88,0xb51e606a,0xdc8b21e2,
    0x25f301f8,0x87c0d92c,0x26a8d768,0x260f882d,0xf8bf9707,0x1fc41741,
    0x21f504f8,0x407e20fa,0x3bbfb679,0x2b91e4ef,0x1643d02e,0xbc43e0b7,
    0x069a746a,0x370798f3,0x3a0fc1f3,0xd900f882,0x20f89b60,0x3d4b70f9,
    0x139937d1,0x0f6b9166,0x34c591e2,0x3e27a0f8,0x1facfc8b,0x2a798d50,
    0x7c1f1377,0xd98866c1,0x545f7404,0xd8aec0fe,0x1762be25,0x8770b61f,
    0x8f30975c,0x07c1e22c,0x32bbaa99,0x897031df,0x2aefe279,0x3ee0fc5c,
    0x8801bf15,0x701dffec,0xfeb81bfd,0x40e9a20e,0x0f8ae41d,0x788b234c,
    0x13a20f88,0x83d07d10,0x6fffcc79,0x00000fc0,0x10020008,0x80181820,
    0x5917223b,0x21ea22f8,0xa889bde8,0x444a83fc,0x3e05707a,0x0000000a,
    0x00000000,0xc83f9340,0x3fb9fdc2,0x37ffb6a0,0xec81d00c,0x3ba01106,
    0x22222224,0x5544a608,0x0000000a,0x00000000,0x00000000,0x77440000,
    0x90eeeeee,0x007ffeeb,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x88066066,0x8008800a,0x004400a8,0x2e600544,0x026a6051,
    0x03100088,0x05006011,0xd1376e11,0x07f7ea01,0x406ff6c4,0x41efefe9,
    0xd305ffd9,0xf705dfdf,0xfe88fbd9,0x7f442ffe,0x33d400df,0x01f0bfdd,
    0x87d760ec,0x92e812a7,0x43d9320b,0x363643f9,0x19f31364,0x43f10fdc,
    0xf706ec7d,0x04d8a6c1,0x2747d3d4,0x6c3b803e,0x0743e78d,0x7c1367f0,
    0x10bb1ae2,0x7983e23b,0x2a6c8274,0x20fa3d47,0x3cc1f11d,0xb8bd55cc,
    0x731f1720,0xdaec6883,0xa8095699,0x3d900def,0x802f87d3,0xf887cc79,
    0x1ae1f301,0x00bfc8f3,0x2e0f88f3,0xf307eecf,0x3fcdef85,0x366b9074,
    0xfb801d1d,0x2fff400f,0x174003e6,0x803e63f9,0x3dc1f12f,0x505f7fe4,
    0x87e23f0f,0xf85fe87d,0x22c83ea4,0x3ae9504c,0x5ba7b60c,0x6cc6741d,
    0x5c007e25,0xf31fdedf,0xde87e203,0x2e607ea9,0x3f0f51fe,0x260f71ea,
    0x3f10fc6d,0x3a097254,0x3e277698,0x4c1fbf10,0x2f83e20f,0xf1a88350,
    0x0f981fc1,0x513de75c,0x223cd360,0x0798d70f,0x7c0f83e6,0xb83b9e21,
    0x7cd66974,0x8f317e60,0x221b60f8,0xd8f30a2f,0x89762e66,0x03f12d41,
    0x7a83e299,0xb37b83e6,0x45f07cc1,0x0111d879,0xd255661d,0x87ffb11b,
    0xe88b913e,0x3d8bd51d,0xaee885d1,0x5f40ffd8,0x576c3e98,0x3722fa88,
    0x46743e98,0x6c53a7e9,0x26c4f7c4,0x25c199dc,0xfc887b3a,0x64c6a8df,
    0xfd980cff,0x7ecc0bef,0xffd9103e,0x7ecc1bdb,0xdfff903e,0x84feb885,
    0x267bdfe8,0x57c0cffd,0xb5980cfe,0x20180a8b,0x01000000,0x2a040010,
    0x00220001,0x00100200,0x00000600,0x00000000,0x00000000,0x00000000,
    0x51033000,0x4cccc015,0x2a0c0220,0x15301bb8,0x26288b98,0x22199999,
    0x80c42600,0x02602218,0x13004426,0x25d8600c,0x84feefe8,0x3a6ffff9,
    0x3be0f883,0x77dc2fcd,0x5f76fee1,0xfffffff8,0x8d903f71,0x1724e84e,
    0x90f88df3,0x1f83e60d,0x13a207e0,0x205b89d1,0x3e0f883e,0x889b1ea4,
    0xbd01f61f,0x20fcc6d8,0xf51b22f9,0x9ae0fdb8,0x7c5c80f9,0x82ec0601,
    0x7d01e45a,0x117c1f10,0xa8b7aa3f,0x1db03dc7,0x40fa3f88,0x440fa8fb,
    0xd8bab61f,0x217c1f44,0x0542b89f,0x97d00174,0xf883e83b,0x2e5f03e0,
    0xf31aa4ee,0x7dc07ee0,0x7eec06c8,0x23e25d02,0x8d70be4c,0xfcdef87a,
    0x83f107e3,0x5f7c1999,0x220fa4fc,0x0f98be0f,0x5c1f10f6,0x6c02fa87,
    0x2fc400fe,0xbcdaa990,0x361f8878,0xf9ae3f84,0x443f1331,0x5061ffff,
    0x07c41f4f,0xd8bb11bf,0x7e98cd83,0x7c4027c4,0x01ffc803,0xa9f8f2d3,
    0x03e29b05,0x47e7987e,0x3e207d5d,0x84d8fc01,0x3ff3e0f9,0x6441ec0d,
    0x02f47cff,0x9fa805f0,0x87a3e06d,0x2f503cad,0x3cc3f05b,0x0765223f,
    0x20e88fc4,0xf70b90f9,0x0f6011f8,0x076cf508,0x7c405f00,0x2f609d13,
    0xf00f65c7,0x987e05d3,0xdb0dc7e7,0x41fd5115,0x7ccbb14e,0x7c3fb88c,
    0x5401ec01,0x33335f77,0xd80be013,0x7dc17cc5,0x3203f4c5,0x7987e07d,
    0xffec807e,0x7fecc0ce,0x77ff540d,0x1ec00e83,0xfffdacc0,0x5f02ffff,
    0x3f203ee0,0x2f417cc0,0x1f813e20,0x8801f9e6,0x01000800,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x40000000,
    0x99999998,0x01333310,0x2666200c,0x40221809,0x30980661,0x0c404c01,
    0x84406011,0x21999998,0x09999998,0x90133331,0x7fffffff,0x3ffbbbba,
    0x3fa01f82,0xf10dffff,0x1f103ba1,0x5be60bfe,0xf30be02f,0x07c41f47,
    0x7fff4be2,0xfffd0fff,0x3ffa7fff,0x1e604fff,0x21f221f4,0xd10fa01f,
    0x27f43e29,0x42f7c3e2,0x7c05f6fc,0x07d0fe62,0x97f541f1,0x201f403e,
    0x9827d43e,0x3f107d07,0x3e86a1f8,0x3a1f16c8,0x7c3e22fc,0x5f6ce87c,
    0x83f997c0,0xf50f883e,0xd00fa5f5,0xfa83e807,0x07d07980,0x3b63f0f7,
    0x45360fa0,0x21d95d0f,0x45d5f0f8,0x405f6be9,0x7d03f9af,0x7c221f10,
    0x03e807d2,0x417c41f4,0xddddd079,0xbb3f05dd,0xfb755bd0,0xe9743e23,
    0x2ebe1f14,0x17daef25,0x207ff9f0,0xfffffffe,0xdddd2f80,0x7fff43dd,
    0x207d0fff,0xbd07983e,0x77c0dd75,0xeeeee80f,0x9743e21c,0x5f0f8af9,
    0xfb5c7cf3,0x3eabfe02,0x9999ce81,0xbd2f80fa,0x6f415555,0x7d0aaaaa,
    0x41e60fa0,0xdf82f43e,0x4403e85d,0x4fe45d0f,0x26ba5f0f,0xf80bed75,
    0x20fa1b63,0x7d2f80f8,0x1f403e80,0xd07982f8,0x9f84f887,0x201f42f8,
    0xde85d0f8,0x336e5f0f,0xf80bed72,0x07d13e22,0x3a5f01f1,0x3a01f403,
    0x7980fb83,0x83f707d0,0x1f41f51f,0x21743e20,0x265f0ff9,0x2fed70ff,
    0x85f09999,0x220fa2fa,0x07d2f80f,0x99999ce8,0xf95339d0,0x1f41e607,
    0xbb0fc6e8,0x43e201f4,0x5f0fc82e,0x3fed72f4,0x05f3ffff,0x220fa1f9,
    0x07d2f80f,0xffffffe8,0x5bffffd5,0x00000000,0x00000000,0x00000000,
    0x00000000,0x26666662,0x00133330,0x00220026,0x2a020033,0x57750a20,
    0x26059710,0x057100ab,0x32a502a8,0x1995c542,0x5ffffff5,0x0bfffffe,
    0x3a605fa8,0x6fd41dfe,0x11b201ee,0x7d93d41f,0x5ef449f9,0x7e67d46d,
    0x17ee7dc1,0xf0bf33aa,0x77c9f9bb,0x3640bb4e,0x3607b85f,0x647b00fc,
    0x20d71f45,0x507c46fa,0x26b83a2f,0x2f886479,0x2a1f892e,0xf8b51746,
    0x003f9ae4,0x442f83e6,0x3e8f881f,0x43e60e88,0x2207c448,0x507c46be,
    0x27db988f,0x7cc1bee8,0x1f11ea00,0x3eeaabe2,0x3e798be0,0x5f0fa001,
    0x2eb706b8,0xb80f7006,0x446aad86,0xdfc9ea0f,0x7f5c47cb,0x6a80f50e,
    0x999f52f8,0xf30fc399,0x87a8007c,0x01ffffff,0x3007e25d,0x20fdc07f,
    0x43f0d55b,0x3dc1f57b,0xf89f4451,0x20f88e60,0x281f10f9,0x07cf30fc,
    0x9bf84d80,0x7cc1fca9,0x2605d999,0x307e604f,0x53e1aa1d,0x221f37e8,
    0x7447e27e,0x0f623362,0xd8db119b,0x21f8d90c,0x83303e79,0xd82f80f8,
    0x77777644,0x403f980f,0xdcced84c,0x3bfea0cf,0x2bbbf27a,0x13ffae0f,
    0x9109ff91,0xfc881bff,0xf30fc1df,0xd717607c,0xf1760be0,0x2fa87d05,
    0xccb81980,0x0080cfdc,0x00004004,0x00000000,0x26fe0990,0x1ea2fb99,
    0x339f1364,0x2006a033,0x0000006a,0x00000000,0x40fa0000,0x42dfffff,
    0x2e5f104d,0x81ffffff,0x006a804d,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x40000000,0x06e63752,0x260a8031,0x55551142,
    0x25106635,0x2880d429,0x05106200,0x02666666,0x4312a813,0x00081318,
    0x3b3f737e,0x0bbe24ec,0x261fb264,0x3f733267,0xf14c8d73,0x2d407e67,
    0x2e1fe4c0,0x7fffc41f,0x119113ff,0x5e67aaec,0x59ffb12f,0x7e8fe095,
    0x2ffae1aa,0x92ef9aa0,0x3f12ec09,0x7f3f50fc,0xfd502d40,0x00b7f019,
    0x44bddd30,0x2fbccf54,0x5ffb7375,0x265c87e0,0x44ff2607,0x5d4ce98f,
    0x54f61b60,0xc885fc86,0xf12ccedc,0x0fad405d,0x20444444,0x688dc5d9,
    0x0000f5a2,0x0f32643f,0x75b17ed4,0x320f1d59,0x07b6a80e,0xb99109f7,
    0x3fa2599d,0x8f25d00b,0x3ffffff8,0x41806e32,0x1f800032,0x5c479932,
    0x9ddb82ef,0x1fa85bf8,0xf103ebe0,0x02d403f7,0x3cc3bfb3,0x888888f3,
    0x22000000,0xc87e000a,0x1df89e64,0x2fe9fe20,0x3b200fcc,0x01d74e85,
    0x3ee2016a,0x00018113,0x04d80000,0x264c87e0,0x2f400227,0xfffd81f7,
    0x217cc6ff,0x4417a0eb,0x00004002,0x24000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__arial_16_usascii_x[95]={ 0,1,0,0,0,0,0,0,0,0,0,0,1,0,
1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,-1,1,0,1,1,1,0,1,1,0,1,
1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0, };
static signed short stb__arial_16_usascii_y[95]={ 12,1,1,1,0,1,1,1,1,1,1,3,10,7,
10,1,1,1,1,1,1,1,1,1,1,1,4,4,3,4,3,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,13,1,4,1,4,1,4,1,4,1,1,
1,1,1,4,4,4,4,4,4,4,1,4,4,4,4,4,4,1,1,1,5, };
static unsigned short stb__arial_16_usascii_w[95]={ 0,2,5,8,8,12,10,3,5,5,6,8,2,5,
2,4,8,5,8,8,8,8,8,8,8,8,2,2,8,8,8,8,15,11,8,10,9,8,8,11,9,2,7,9,
7,10,9,11,8,11,10,9,9,9,10,14,10,10,9,4,4,4,7,10,4,8,8,8,7,8,5,8,7,3,
4,8,3,12,7,8,8,7,5,7,4,7,7,11,8,8,7,5,2,5,8, };
static unsigned short stb__arial_16_usascii_h[95]={ 0,11,5,12,14,12,12,5,15,15,5,8,5,2,
2,12,12,11,11,12,11,12,12,11,12,12,8,11,8,6,8,11,15,11,11,12,11,11,11,12,11,11,12,11,
11,11,11,12,11,12,11,12,11,12,11,11,11,11,11,14,12,14,7,2,3,9,12,9,12,9,11,12,11,11,
15,11,11,8,8,9,11,11,8,9,12,9,8,8,8,12,8,15,15,15,4, };
static unsigned short stb__arial_16_usascii_s[95]={ 125,125,109,111,54,1,14,105,1,43,95,
60,102,82,79,120,85,93,31,102,49,13,94,1,25,45,124,125,69,86,14,
40,27,19,10,34,117,108,99,1,83,125,103,73,65,54,44,82,31,54,11,
75,1,22,102,87,76,65,55,63,120,49,78,68,115,66,111,83,94,101,41,
66,113,121,22,22,40,1,110,92,32,47,118,75,68,58,43,23,51,73,35,
16,13,7,115, };
static unsigned short stb__arial_16_usascii_t[95]={ 13,17,67,1,1,17,17,67,1,1,67,
67,67,14,14,1,17,43,55,17,55,30,1,55,17,17,55,29,67,67,67,
55,1,55,55,17,43,43,43,30,43,1,1,43,43,43,43,1,43,17,43,
17,43,30,30,30,30,30,30,1,17,1,67,14,72,55,17,55,17,55,30,
17,30,30,1,43,43,67,55,55,30,30,55,55,1,55,67,67,67,1,67,
1,1,1,67, };
static unsigned short stb__arial_16_usascii_a[95]={ 64,64,81,127,127,204,153,44,
76,76,89,134,64,76,64,64,127,127,127,127,127,127,127,127,
127,127,64,64,134,134,134,127,233,153,153,165,165,153,140,178,
165,64,115,153,127,191,165,178,153,178,165,153,140,165,153,216,
153,153,140,64,64,64,108,127,76,127,127,115,127,127,64,127,
127,51,51,115,51,191,127,127,127,127,76,115,64,127,115,165,
115,115,115,77,60,77,134, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_16_usascii_BITMAP_HEIGHT or STB_FONT_arial_16_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_16_usascii(stb_fontchar font[STB_FONT_arial_16_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_16_usascii_BITMAP_HEIGHT][STB_FONT_arial_16_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_16_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_16_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_16_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_16_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_16_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_16_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_16_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_16_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_16_usascii_s[i] + stb__arial_16_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_16_usascii_t[i] + stb__arial_16_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_16_usascii_x[i];
            font[i].y0 = stb__arial_16_usascii_y[i];
            font[i].x1 = stb__arial_16_usascii_x[i] + stb__arial_16_usascii_w[i];
            font[i].y1 = stb__arial_16_usascii_y[i] + stb__arial_16_usascii_h[i];
            font[i].advance_int = (stb__arial_16_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_16_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_16_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_16_usascii_s[i] + stb__arial_16_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_16_usascii_t[i] + stb__arial_16_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_16_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_16_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_16_usascii_x[i] + stb__arial_16_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_16_usascii_y[i] + stb__arial_16_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_16_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_16_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_16_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_16_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_16_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_16_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_16_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_16_usascii_LINE_SPACING
#endif

