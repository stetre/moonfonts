// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_35_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_35_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_35_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_35_usascii_BITMAP_HEIGHT        116
#define STB_FONT_courier_35_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_35_usascii_FIRST_CHAR            32
#define STB_FONT_courier_35_usascii_NUM_CHARS             95

#define STB_FONT_courier_35_usascii_LINE_SPACING          16

static unsigned int stb__courier_35_usascii_pixels[]={
    0x10004b80,0x6c02880d,0x00e6c000,0xb8008810,0x1d10b31e,0x05980000,
    0x361dffff,0x5100ffff,0x2a600137,0x0400c400,0x00153000,0x26000144,
    0x01a8800a,0x002aa200,0x40007ec0,0x2035405c,0x3ecc005d,0x02647b00,
    0xd86a8bb6,0x6ff65406,0x20fe200c,0x2a61aacf,0xffc80fba,0x3ea01ffe,
    0xfd00efff,0x5bdd7105,0x7fffdc00,0x3ffe601e,0xfb5001df,0xd7309fff,
    0xf305ffff,0x3bfee7ff,0x6c003efe,0x17c4000f,0x1f301aa0,0x2007b000,
    0xf881363e,0x0fe63540,0xdb9acfd8,0xf03f602f,0xd81f1003,0x207f221e,
    0x1fb30bfb,0x47907fd0,0xcfd801d8,0xf505fb51,0x803f6a19,0x0221bfd8,
    0x7ecc39f5,0xfcbe9884,0x2004fa82,0x35c000ec,0x3bfff910,0x8004d815,
    0x6c5d005b,0x1aa1ae03,0x1dd101fb,0x7cc0fea0,0x7c400fc3,0x26c03e60,
    0x42ec0fe2,0x4c3442fe,0xc807dc05,0x6b81f40f,0x2003dd10,0x407ea01e,
    0x3e200efd,0x7c000004,0x735bf702,0x0fa85ffb,0xf8035c00,0x85b80fa2,
    0x6413e26a,0xd01f9805,0xf8801f8d,0x47a813a0,0xd07e605c,0x1d03a85f,
    0x7f1027c0,0x21360354,0xf800005d,0x3003fb04,0x2000001f,0x203f106b,
    0x003e82fa,0x21f8035c,0x2a16e02e,0x3e607ee6,0x2e0d9001,0x22007e1f,
    0x4401f30f,0xe805f10f,0x16617ec4,0x01f881a2,0xa809926c,0x00007dc6,
    0x06d82e40,0x00000ba0,0x405b81f4,0x4007a81c,0x20f8806b,0x2a16e02f,
    0x026c1ba6,0x97e05f10,0x50f8801f,0x1e63f00d,0x03fb1b20,0x7c03b81b,
    0x07b1f402,0x0003f8f0,0x13607f00,0xfff14c80,0x05ffffff,0x01f40f50,
    0x5c007d00,0x3e0f8806,0x5aa16e01,0x003f04f9,0x21fd04d8,0x90f8801f,
    0x3ffd910b,0x91ee01aa,0xd79d303f,0x4c0d900b,0x3e00f21f,0x00000f31,
    0x026c03ee,0x4ccc4990,0x802e9999,0x001b603e,0x1ae006b8,0x55fdd544,
    0x5c0aabfb,0x07f76a85,0x5b8001f1,0x007e3fb0,0x2626c3e2,0xb71fadff,
    0x0fc8f300,0x32a02e60,0xd302fe63,0x7e405b8b,0x01a88b52,0x02fda880,
    0x03d80176,0x1f500ba0,0x000efcc0,0x1f3002f8,0xddfddd50,0xd87dddfd,
    0x05f96a84,0x0d5000f5,0x400fcbf2,0x7447b0f8,0x805b8fc5,0x003ee0f8,
    0x982ceda8,0x84fecdfe,0x9bf301f9,0x7ffecd32,0xfff8801f,0x007ec01f,
    0x5d000fcc,0xc8804d80,0x7001bdff,0x00ef400d,0xb883ccd5,0x1fb6a81f,
    0xf5000d50,0x00fcfea0,0x2a3d87c4,0x05b8fc0f,0x01ee0f88,0x0039db51,
    0x03ffdffb,0x75f30bae,0x4bbe2bab,0xa8802fd9,0x3f600dec,0x4004e806,
    0x003e602e,0x03ffb730,0xf3002f88,0x799ae03f,0x5aa09fd0,0x007980fe,
    0x29f306b8,0xb0f8801f,0xb8fc35c7,0x2e0f8805,0x1ceda887,0x217db100,
    0xdf902fc9,0x6d2e7fd9,0x01f704ec,0xd80f6c40,0xee981edc,0xb0174000,
    0x5f70000b,0xe8805c80,0x6a96e01d,0xd505f710,0x03e203f6,0x3ea09900,
    0x1f1003f3,0x7c0f88f6,0x8f500d71,0x40e7446a,0x981b6028,0x15b7302f,
    0x206fb9ec,0x5c8003f8,0x37bf27b0,0xd0004fed,0x0007e205,0x3e202dc0,
    0x4407d401,0xeb99dc99,0xa84d8099,0x0be05f96,0x3f207d00,0x1f1003f2,
    0x7c5bb0f6,0x0d700f51,0x33766003,0x2017c43e,0x51e8004e,0x005d803f,
    0x23d80f98,0x000acca8,0x02e40ba0,0x80798008,0x4435c05d,0xffffffff,
    0x85b87fff,0x2e07f76a,0x403ea006,0x1003f1fd,0xf911321f,0x03e69fff,
    0x74000bb0,0x00f50e40,0x0f9800f5,0x00b700d3,0x00f60ba0,0x882e8000,
    0x805b801f,0x00f9807c,0xc8f601ae,0xb542dc04,0x00fe04fa,0x21fd01f4,
    0x70f8801f,0x88d5540b,0x0027c02f,0x2a598498,0x4007b807,0x3200fc5e,
    0xb03f0004,0x74000007,0xf9006c82,0x8027c405,0x201ae04d,0xb701323d,
    0x502f4d50,0x036c407f,0x8801f93e,0xb000d50f,0x000fcc0b,0x7ccd02b8,
    0x7002f402,0x7404d81f,0x80fa8003,0x2000003d,0x8017c42e,0x950acffc,
    0x07cc00df,0x22e806b8,0x542dc03d,0xfa807ee6,0x006f4c1c,0x400fc3f7,
    0x003f10f8,0x0bb01f98,0x85980397,0xf5036c49,0x20bf2003,0xc8f501e8,
    0xd81fc402,0x3a000003,0x950035c2,0x7fffffd3,0x2e09d000,0x0f62f806,
    0x44d50b70,0x7fecc04f,0x6e804ffe,0x07c400fc,0x5f9000b9,0x3ea07ec4,
    0x221d807f,0x20efc41d,0x510444fb,0x67cc03dd,0xbf70bee1,0xa85fb813,
    0x00aaadea,0x7f0ba000,0x00eb8000,0x2e03ea00,0x0ba1f805,0xd8d50d70,
    0x1bfd800f,0x1f87f300,0x3e20f880,0x3ee07104,0xfa80efef,0xdec8806f,
    0xdffb102e,0xfdf905ff,0xd50019df,0x2205ffdf,0x2ffeeffc,0xeeeeed88,
    0x3a00001e,0x20001ea2,0x3e80006a,0x21f803d8,0x207c402f,0x101fcc6a,
    0x983559fd,0x07e07ec3,0xdf303e20,0x409f9557,0x54c00a98,0x40062000,
    0x54401aa8,0x06a20001,0x001aa880,0xf8800000,0x20000fa1,0x7b80006a,
    0xf1003f66,0x76c00fc1,0x41b61aa2,0xffeffff9,0x3e24fedf,0x22aacf83,
    0x880fbaa9,0x000bdeec,0x00000000,0x00000000,0x00000000,0xf53dc000,
    0x0d500001,0x66cbe000,0x07468800,0x498f5c40,0x9b880d88,0x205dd440,
    0xdffff059,0x03ffff61,0x00000000,0x00000000,0x00000000,0x40000000,
    0x000625e9,0x800024c0,0x00000019,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x55540000,0x0005feba,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xddddb100,
    0x00000059,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x4c4001e4,0x220000ab,
    0x000001ba,0xfff98000,0xf1000003,0xb80007ff,0xffffffff,0x2000000e,
    0x00000099,0x3ffa0000,0xffffffff,0x00000006,0x200dfd00,0x3f22006f,
    0xfd1effef,0x3ff620df,0xfff73ffe,0x07ffff23,0x013fffe6,0x200faaa0,
    0x01befdc8,0x0001f554,0x2aaaabae,0x36e201aa,0x3ff62006,0x75c00dff,
    0x8070ceff,0x0ceffdb9,0xaaaace89,0x206daaaa,0x22defdb9,0x7fff64c3,
    0xd9d7001d,0x4c01be00,0x57e441ef,0xdf9809ce,0x4f5e7540,0x8067ee21,
    0x0000bf99,0x7bf500fa,0xb00df953,0x05b80007,0x6f7f5c40,0x15bf3006,
    0xd103fd71,0xbfd937bf,0x4defec0f,0x20fcfeca,0xb05c802d,0xbf9537bf,
    0x2b7fa1f3,0x403fda99,0xb006a9f8,0x5017a00b,0x027407ff,0x03e817fa,
    0xe80006b8,0x440bee03,0x001ec05e,0xd50016e0,0x2201aa37,0xb03f204f,
    0x41fea01d,0x3fa601fc,0x417c0020,0xff9100dd,0x1fb80be1,0x00355760,
    0x2003ae00,0x00d903fc,0x03d40bf3,0x7400017c,0xb003f303,0x0001ec07,
    0x2a00016e,0x4406b806,0xb00be63f,0x5003f90f,0x0f98001f,0x0fe80364,
    0x827c403f,0x000d50f9,0xf1003d80,0x6c00fa07,0xd701f405,0x740d4c00,
    0x26009d03,0xa887b02f,0x005b801a,0x1b806a80,0x01ae5d80,0x005f11e6,
    0x22e4002c,0x1f5001f9,0x741b2006,0x00001aa4,0x81fc003f,0x80b9001f,
    0x200ba07a,0x0dffeffc,0x001f507d,0xd53d826c,0x405ffddf,0x0026a65b,
    0x200006a8,0x0401aa5c,0x000001aa,0x800b70fa,0x54354003,0x7ec1aa0f,
    0x1f807fff,0x0fc0fa00,0x3e805b80,0x1ed806b8,0x41f476c4,0x834c005c,
    0x220bfabd,0xfbd704fb,0x2009ffff,0x3a00006a,0x2000be23,0x4000004c,
    0x001ec0f8,0xf10f6000,0x33106a85,0x07b00f73,0x1740fe20,0x6a805d80,
    0x02ec03e8,0x0f60ffee,0x3b60f100,0x20fe601f,0x3a61bdfb,0x0035400e,
    0x7dc0eb80,0x00ba000b,0xf0d70000,0x64000003,0x3543640f,0x6c807a80,
    0x3207f700,0x005f8805,0x2a03547d,0x83fd800f,0x81f8002e,0x0fb803fd,
    0x5404e800,0x1fa80006,0x37bdfb30,0x00000fc0,0x01f10f60,0xeeb88000,
    0x3540fc41,0xe8807a80,0x81ffcc04,0x2fec03f8,0x00fa6a80,0x0fe20079,
    0x0ba000be,0x02e801b6,0x2a00f980,0x17d40006,0x3ffdb980,0x000001f8,
    0x01f103e2,0x177d4000,0x00d505d8,0x6fcc01ea,0x03ebfb80,0x376213ea,
    0x2afa005b,0x2002e807,0x8003e83f,0x2005d80f,0x03f0004d,0xf5000354,
    0x27d40005,0x776c407e,0xa801eeee,0x00003f06,0x01f5035c,0x03d401aa,
    0xfb9dfd10,0xd300fa5f,0x2ebfd9bf,0x0fbaa005,0x3e8007e0,0x3c4004c8,
    0x16e003d8,0xd5017400,0x00bea000,0x2e87e200,0x3eeaaaa0,0xd04d800b,
    0x2dc00005,0x99999db0,0xa8059fb9,0xbcb98007,0xba801f41,0x0016e0ac,
    0x00ba00fd,0x006b83f8,0x005d82dc,0x17c00136,0xf7000d50,0x36000805,
    0xf8800f63,0x3603f000,0x06200004,0xeeeeeec8,0x5403efee,0x3e800007,
    0x005b8000,0x03c801f4,0x5f107f10,0x6d81fc00,0x2000ba00,0x01aa00f8,
    0xf8805f70,0x35cb9000,0x5001f100,0x0007cc0f,0x6a800000,0x0000f500,
    0x900007d0,0x003d4009,0x7fb001f5,0x75c01ae0,0x7007fb00,0x6b80041f,
    0xf9003540,0x009f3003,0x003e88fa,0x099001f1,0x0b2005d8,0x03540000,
    0x800007a8,0x7440003e,0x000fa002,0x3ffb80bb,0xfa8037a0,0x807fb600,
    0x006f42f9,0x06a805f3,0x26003f90,0x07dc01ff,0x3e200be6,0x4401f800,
    0x07ec405e,0x8001664c,0x00f5006a,0x0007d000,0xf5000ee8,0x85db0001,
    0x09ce8ed8,0x220aed88,0x7d3301fc,0x7dc417f5,0x20afe984,0x6a804fb8,
    0x4400ed80,0x105dbf32,0x37ea05f9,0x801fb501,0x5dd10079,0x806f5441,
    0x1001fffe,0x4413f733,0x99fb9999,0x26000999,0x02adeaaa,0x3f6aaaa6,
    0x5555100e,0x900055bd,0x21bffdff,0x3f206ffe,0x101cffef,0x3faa7fff,
    0x5c02ffee,0x82ffeffe,0x9eb99998,0x2bea0999,0x99999999,0x3fead16c,
    0x401effee,0xfeefffd8,0x04b800cf,0x3bbff220,0x7ff403ff,0xfff5000f,
    0x7fffc9ff,0xffffffff,0x3bbae004,0x3ae05eee,0x5c03deee,0xdeeeeeee,
    0x03530000,0x00353000,0x00355100,0x2a01aa88,0xffffffff,0x3ffea6ff,
    0xffffffff,0x06aaa606,0x06aaa600,0xa9800000,0x1551000a,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xfff70000,0x03300001,0x3bb6a000,0x99951cde,0xcccb8399,
    0x17ffa0cc,0x6665c000,0x83cccccc,0x406ffffc,0xccccccca,0xcc8802bc,
    0xaccccccc,0xccccc880,0xccccc883,0x40999913,0x10cccccb,0x32007999,
    0x6665c3cc,0x4c03cccc,0x20cccccc,0x004cccc8,0x0007dd44,0x40002640,
    0xccbabdfc,0x399bf953,0x0cdfccb8,0x000176a6,0x7e666654,0xaa883ccd,
    0x664c06ca,0xfecccccf,0x3b32202e,0xffdcccce,0x6667e443,0xeeccc883,
    0x07fd9913,0x4337f32e,0x400feec8,0x65c3dffa,0x03cccfdc,0x6667e64c,
    0x0fbf7220,0x7c427f4c,0x04c80000,0x000fc400,0x80ba007d,0x4000005c,
    0x0354001f,0xf9300f88,0x2207b003,0x001f84fb,0x0fed81ec,0xebd81ec0,
    0x0175f403,0x7c4001e6,0xd017a200,0x0f885fff,0x004c8000,0x3a002e40,
    0x6405d003,0x7c000005,0x80354001,0x03ec00f8,0x07ea01ec,0x02e8005d,
    0x3d80bb7b,0x4c0f57b0,0x3cc02e8f,0x300f8800,0xfffd009f,0x0000f885,
    0x740004c8,0x801f4003,0x0017202e,0x8003f000,0x01f1006a,0x1ec01f98,
    0x20fa2740,0xb01f81ec,0x1ec03f17,0x3205d3d8,0x079805d4,0xf501f100,
    0x13fa6007,0x0ab983e2,0x7ffffe40,0x01ffffff,0x0fa001f4,0x0b901740,
    0x01f80000,0xf8803540,0x6c02f800,0x26c5b803,0x03e0fbe2,0x3606b9ec,
    0x21ae7b03,0x9805d1f8,0x81f10007,0x200002fb,0xfeff98f8,0xb33100ef,
    0x3333333b,0xffffff50,0xd01fffff,0xc80ba007,0x7ffffcc5,0x003f0001,
    0x1f1006a8,0x3d807a80,0x22644d80,0x03c46bfa,0x3d81f47b,0x707e27b0,
    0x1e60174b,0xf707c400,0xf8800003,0x3b6a0bfb,0x40026400,0x999be999,
    0x007d0099,0xb85c80ba,0x200019cf,0x0354001f,0x3ea00f88,0x4c03d803,
    0x3722dc1f,0xd81e60f8,0x0f603ea3,0x2f8b91ec,0x00f300ba,0x0fe43e20,
    0x7fc40000,0xc805f101,0x01f40004,0x17400fa0,0x03fb8b90,0x8003f000,
    0x35f1006a,0x09fb7533,0x4fa80f60,0x2e97c6a8,0x6c3d81aa,0x47b03d84,
    0x2e8d50f8,0x88003cc0,0x00dffd9f,0x017c4000,0x00990172,0x74003e80,
    0x6405d003,0x0000bf25,0x354001f8,0xfffff880,0x36000cff,0xffdcccce,
    0x87ccf303,0x3d816e5c,0x40f60fcc,0x43ea6c3d,0x003cc02e,0xea8eef88,
    0x9991002f,0xb801f105,0x00026406,0x07d000fa,0x8dc80ba0,0x049801ed,
    0x6a8003f0,0x3335f100,0x6c001bf5,0x0bcdeeee,0x535c3e20,0x07b0264f,
    0x7b03d8d9,0x740f9f98,0x8003cc02,0x00fc85f8,0x880fffb8,0x2035c00f,
    0x1f40004c,0x7400fa00,0x0bfbb202,0x1f803540,0x88035400,0x00ee880f,
    0x7c0007b0,0x7b1f89b1,0x1fc41ec0,0x3a0f607b,0x4c02e84f,0x7c45b807,
    0xfd00d900,0x003e207f,0x004c80d7,0x36001f40,0x6405f003,0xa801fbdf,
    0x8003f006,0x01f1006a,0x03d8036c,0x20fcba00,0x1ec05d3d,0x207b0fa8,
    0xe81ea83d,0x5c03cc02,0xf8807c45,0x81bfe203,0x035c00f8,0x7d000132,
    0x9804b800,0xfb97200f,0x4c035401,0x0354000f,0x3e200f88,0x0003d803,
    0x5ae1eab6,0xe80f602e,0x00f607b4,0x079805d0,0x007c45b8,0x17fdc0f5,
    0x6b801f10,0x20002e40,0x07cc003e,0x8b901ee0,0x01aa01fc,0x1aa001b2,
    0x2a007c40,0x001ec00f,0xf10b97b0,0x01ec03f1,0x3607b3f3,0x20174003,
    0x445b8079,0xd817c00f,0x007c405f,0x01f701ae,0x000fa008,0x02f9817a,
    0x80fe42e4,0x0be603fa,0x4401aa00,0x405d800f,0x3320003d,0x01f7d03e,
    0x3bb201ec,0xe8007b03,0x5c03cc02,0x32007c45,0x8801ff05,0x2035c00f,
    0x6d441df8,0x0007d01f,0x7d441bd1,0xf905c805,0x8877ea01,0xd50005fa,
    0x9af99880,0x306fe201,0x133339d3,0x403fae00,0x9d3107ec,0x7ff10133,
    0x099cd988,0x837d3310,0x999fa998,0x15c99999,0x20335f33,0x7f309af8,
    0x819fa980,0x2009ec98,0xfffeffd9,0x3a66620c,0x0099999b,0x7ff7fec4,
    0x82e4c403,0x44099fd8,0x03ffeffd,0xf7333330,0x2e133333,0x01ffffff,
    0x7fc43fee,0x03ffffff,0x7d40df50,0xfffff706,0xf70fee07,0x3a09ffff,
    0x3a1fffff,0xffffffff,0xf75fffff,0x203fffff,0x30024ffd,0xc83fffff,
    0x3006ffff,0x3ff20135,0xffffffff,0x026a6005,0x7c17ffe0,0x3103ffff,
    0x3e200135,0xffffffff,0x00004fff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xcb800000,0xcccccccc,0x9951cccc,0x33205999,
    0x32a0cccc,0x665c2ccc,0x333261cc,0x7999901c,0x6666664c,0xcccccccc,
    0x99999950,0x39999999,0x6666664c,0x32600abc,0x99901ccc,0x66665479,
    0x00accccc,0x99999991,0x664c5999,0xcccccccc,0x99999704,0x08800039,
    0x000006e0,0xcde85300,0xcccfdccc,0xbf952fcc,0x33320399,0x3f2a0cdf,
    0x7ee5c2cc,0x33bf260c,0x47df9901,0xcccdfcc9,0x1fcccccc,0x9999f993,
    0x47d99999,0xcccceec9,0xd9304ffd,0x3f32039d,0x33f3263d,0x4ffdcccc,
    0xcccccf98,0x3265eccc,0xcccfdccc,0xb999503c,0x2a000bbf,0xfc86dffe,
    0x4000000c,0x41742fd9,0x5c85d06a,0x4403e200,0x7035c00f,0x00ec801f,
    0x07e2007e,0x07b001f1,0x0374c09b,0x06c801f5,0x7dc403e2,0x3e203cc4,
    0x00035403,0x8001f399,0x02d98bfa,0x00019fb3,0x80dfc880,0x5d06a82e,
    0xb9000f98,0x2e007c40,0xf502ec06,0x8801f803,0x4007c41f,0x4404d83d,
    0x9817204e,0x003e201f,0x203cc1f7,0x006a805d,0x001f47e0,0x3aa000fa,
    0xf700003f,0x5417403d,0x07d05d06,0x0f880ba0,0x3a2035c0,0xf803f884,
    0x441f8801,0xd83d800f,0x100f9804,0x100fa07f,0x4c5f001f,0x2003ee07,
    0x4d50006a,0x03e2006b,0x02efb800,0x005df500,0x3a0d505d,0x7a806b82,
    0x2e007c40,0x742f9806,0x2003f005,0x9800f882,0xbb004d80,0x1b207d40,
    0x3e003e20,0x17cc1e21,0xb0006a80,0xf000fc49,0xfc880003,0x7fd3001d,
    0x3540e400,0x01f880c8,0x03e2026c,0x3ee00d70,0x3e001d90,0xf8803c41,
    0x4d8034c0,0x5d80f500,0x3e2007e6,0x8043dc00,0x01aa004e,0x09b07e20,
    0x80002e40,0xb100cfd8,0x2000019f,0x04c8006a,0x1f1007e2,0x32006b80,
    0x3e001fbe,0xf8803cc1,0x4d803d40,0x4401f100,0x22009d3f,0x05f9300f,
    0xd5001b20,0xf50d7000,0x000fc400,0x447fd300,0x00000dfc,0x3cc00354,
    0xdf100d70,0xdddddddd,0x02fe800d,0x777777c0,0xdddf1007,0x13600fdd,
    0x7d401f80,0x3be2006c,0x1fffeeee,0x8003f300,0x03e8006a,0x1bee005f,
    0x5df50000,0x00007bee,0x74001aa0,0xf1007d02,0x55555557,0x7f4400d9,
    0x555fc003,0x7f1007ba,0x200f9555,0x007e004d,0xf88007f6,0xedcbaaab,
    0x01fc402e,0x26003540,0x880b900f,0x6e43eaed,0x0ffa6001,0x00037f22,
    0x70006a80,0x1001f30d,0x006b801f,0x8007ebb6,0x8803cc1f,0xd803d40f,
    0x001f1004,0x0f8800f5,0xbb027d40,0x001aa000,0x333333d9,0x335c01f5,
    0x002fe21f,0x10033f62,0x000019fb,0x3e2000d5,0xf8802e40,0xb8035c00,
    0x2001d90f,0x8802441f,0xd802440f,0x200d5004,0x07c4007a,0x7d40fc40,
    0x35401500,0x3ffffe00,0x203fffff,0x06bae43e,0x000dfc88,0x0001ff4c,
    0x4d8001aa,0x0f88017c,0x7cc035c0,0x1f802ec2,0x003e2000,0xc8026c2c,
    0x800f5004,0x87b000f8,0x80ba02f8,0x27e6006a,0xb9999999,0xf881f106,
    0x77dc03ea,0x77540001,0x00d50002,0x00f53d40,0x1ae007c4,0x7f109d10,
    0x40003f00,0x0f8800f8,0x1f44026c,0x44007a80,0xe8b9000f,0xd5017405,
    0xf8026400,0xff507f01,0x00bfaa01,0x03df7000,0x40006a80,0x44009b2f,
    0x2035c00f,0x007e605d,0x7c40003f,0x6c0f8800,0x2005e804,0x07c4007a,
    0x03ae3e80,0x035405d0,0x99001f88,0x17e21b60,0x0000ffa6,0x00dfc880,
    0xc8000d50,0x22001f8d,0x7035c00f,0x00fb801f,0xf880007e,0x6c0f8800,
    0x001b6204,0x0f8800f5,0x3f30fc80,0x35405d00,0x26006a80,0x2219f107,
    0x33a1afee,0x10000000,0x5cccc09b,0x4000999e,0x26006cf8,0x4c409af9,
    0x3ea209eb,0xdd33009b,0x4d7ccc43,0x99880199,0x999999af,0xb310f999,
    0xfb533339,0x7333001d,0x2201333f,0x99999fa9,0x361feb99,0x9999999d,
    0x26662e99,0x09999fb9,0x02673662,0x40dfccc4,0xb8dfefe9,0x000001ff,
    0xfff50000,0x00dfffff,0x26007fd0,0x743fffff,0x3f27ffff,0xff985fff,
    0xfff51fff,0x803fffff,0xfffffffb,0x0fffffff,0xfffffff7,0x3e60039d,
    0x6fffffff,0xffffff70,0x817bffff,0xfffffffd,0xff52ffff,0xffffffff,
    0x7ffffe4d,0xfffffd03,0x00355103,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000a20,0x0002aea6,0x57510000,0x4dd4c001,0x9aa98000,0x00000000,
    0x0006aea2,0x40d44000,0x0000002a,0x00004c00,0x0aa98000,0x2000e400,
    0x9fd3006a,0xfddffd70,0x3ffee07f,0x06fffb80,0xbffdffd7,0x3bfa6099,
    0xb800cffe,0x04ffeeff,0xa81bfffe,0xd884ffff,0xaafffeff,0x3ffffe25,
    0x326fffff,0x6fefcbff,0x205fdff3,0x641ffffd,0x7e41ffff,0x3ff625ff,
    0x3fffe0df,0x7ffec1ff,0x23ffa3ff,0x0effefe9,0xa8007d00,0x5fffd006,
    0x2a20dec4,0x01f3301f,0x3f61ae66,0x17f6a21b,0xdd302ff2,0x20bba203,
    0xdd880eea,0x0fccc009,0x2e6067d4,0x26be26ff,0x2fb99999,0xe88fff4c,
    0x441ae4fd,0xe9881bfb,0x2b93301e,0x49b12dfa,0x8809ce98,0x4c41bf99,
    0x3660bfbf,0x003e800e,0xffe80354,0x02dc002f,0x88d5003e,0x2a2f402f,
    0xd836401f,0xd505d806,0x7c43d400,0xf137d403,0x6c0fe201,0x7c2fdc1f,
    0x6c0bea01,0xfbdb800e,0x00f50103,0x17fc40f5,0x74043f88,0x01aa0043,
    0x40027f4c,0x003e00f8,0x402f88d5,0x400be23a,0x4007d44e,0xb87882e8,
    0x2ec2dc0e,0x88246c80,0x260f604e,0xfa805d07,0xb80076c2,0x2f8001ff,
    0x7f101f40,0x67f45c80,0x7fb517d1,0x00003540,0x3e00f880,0x7ec35400,
    0x00d5000a,0x801363d4,0xfe83f05b,0x00fc1ec3,0x0bd00188,0xd07983d8,
    0x365f5005,0x07ee000e,0xf3035c00,0x2007c401,0x7fed446a,0x401cffef,
    0x7100006a,0xfbdffffd,0x2a007c01,0x9bdff906,0x40099015,0x3337e0f8,
    0xcccccccc,0x7cc7b06d,0x1e60fc5c,0x01b60000,0x741e60f6,0x0bdf5002,
    0x4000b700,0x809b01f8,0x035400f8,0x5303ff91,0x55f95555,0x20015555,
    0x999abff9,0x03e00fca,0xca980d50,0x01ec3ffe,0xeeef87e0,0xeeeeeeee,
    0x6e4b706e,0xa81f10f8,0x76400006,0x7983d800,0x3a2005d0,0x05b8003f,
    0x7c42e400,0x2007c401,0x3b3a206a,0xeeeeeb84,0xdeeeeefe,0x404f8800,
    0x003e00f8,0xfa8800d5,0xf8801325,0x40000fa0,0xa9f4ba79,0x00007986,
    0x1ec003ee,0x802e83cc,0x003f9de8,0x260002dc,0x4402dc0f,0xb035400f,
    0x54007e6d,0x07e40006,0x0f803e20,0x40023540,0x400d50fa,0x0002e47a,
    0x70f98f88,0x07e2132d,0x007ea000,0xd07983d8,0x265e8805,0x016e004f,
    0x05f13600,0x6a801f10,0x07e41f50,0x95003540,0x7cc026c3,0xd9007e00,
    0x25f002e8,0x89d002f8,0xd00001f9,0x6c7c4b95,0x4400bb03,0x0b017d40,
    0x3a0f307b,0x2617a202,0x00b7004f,0x1aa1f500,0x2a007c40,0x07b05f06,
    0x3f200d50,0xb80d51ff,0x413200ff,0x02f46fd8,0x03f507dc,0x01f706c8,
    0x76640930,0x880fdec2,0x22fb802f,0x03e202f9,0x3a0f307b,0x4409d102,
    0x005b804e,0x00fa7d00,0x1aa007c4,0x03540000,0x3a3ffff8,0x2ff6a21c,
    0x2f9809af,0x27b3baa2,0x7103dfd0,0x817f907f,0x3f201ee9,0x27ecc40b,
    0xfb81ff50,0x206fd407,0x3e23fe98,0x9999999d,0x39d310f9,0x5f409f98,
    0x40cefcc1,0x4c0cfa98,0x9999ec99,0x575c0019,0xaf99800f,0x013d7301,
    0x006a8000,0x74c1fff9,0x88cffeef,0xff904fff,0x3fea7ffd,0xddff95b4,
    0x74c05dfd,0x004ffeff,0xfffdffd3,0x85f9803b,0xfe8805f8,0x40cfffef,
    0xfffffffa,0xff70ffff,0x2ffcc3ff,0x7fd47ffa,0x7fe41fff,0x3ffe66ff,
    0xffffffff,0x027fc000,0x0fffffcc,0x013fffe6,0x400d5000,0x355300a9,
    0x01aa8000,0x0d554c40,0x01355100,0x01555100,0x44000000,0x00009aaa,
    0x00000000,0x00000000,0x00000000,0x02cc0000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xfd9e6644,0x499991ff,0x0001ccc9,0x777776cc,0xeeeeeeee,0x20000004,
    0x333221ca,0xcccccccc,0xddddd73c,0xdddddddd,0x0005dddd,0x00000000,
    0x00000000,0x00000000,0xb8000000,0xfff71fff,0xfa9bffa1,0x01aa02ff,
    0x77777771,0x57777777,0xfb100f44,0x3ff2003d,0xfffff11f,0xbfffffff,
    0x2eeeeee6,0xbbbbbbbb,0x00001bbb,0x00000000,0x00000000,0x00000000,
    0x7f400000,0xd9ffea5f,0x3ffe65ff,0x00bff301,0x0bf20000,0x0bf273e6,
    0x3fffe932,0x26666666,0x00099999,0x00000000,0x00000000,0x00000000,
    0x00000000,0x3fe20000,0xb9bfe61f,0x1ffe24ff,0x01fc6744,0x3fb80000,
    0xc8fea27c,0x03fff20f,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x222ffd40,0x0ffea5ff,0xa9b60dff,0x3333301f,0x33333333,
    0x28fea013,0x01bfdd30,0x00000153,0x00000000,0x00000000,0x00000000,
    0x00000000,0x7e400000,0x263ff80f,0x42fec1ff,0x207dc0fb,0xfffffffa,
    0x6fffffff,0x1a800a60,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x27fc0000,0x3fe22fe8,0x3ea27e40,0x2220db01,0x88888888,
    0x00000088,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x7fcc0000,0x7f83fb00,0x0fe23fb8,0x00004e88,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x2e03fa80,0x0c883b87,
    0x0166012a,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00a20000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_35_usascii_x[95]={ 0,7,4,2,3,2,3,7,9,4,0,2,4,2,
6,3,3,3,2,2,3,2,4,3,3,4,6,4,0,1,0,0,3,0,1,1,2,1,2,1,1,3,2,1,
1,0,0,0,2,1,1,2,2,1,0,0,1,1,3,0,0,0,3,1,6,2,0,2,1,1,3,1,1,2,
2,2,2,0,1,2,0,1,2,3,2,1,0,0,1,2,3,0,8,0,2, };
static signed short stb__courier_35_usascii_y[95]={ 25,5,6,4,4,5,8,6,6,6,6,8,20,15,
21,4,5,5,5,5,6,6,5,6,5,5,11,11,8,13,8,6,5,7,7,6,7,7,7,6,7,7,7,7,
7,7,7,6,7,6,7,6,7,7,7,7,7,7,7,6,4,6,5,32,4,11,6,11,6,11,6,11,6,5,
5,6,6,11,11,11,11,11,11,11,7,11,11,11,11,11,11,6,6,6,13, };
static unsigned short stb__courier_35_usascii_w[95]={ 0,5,11,14,13,14,13,5,6,6,12,15,7,14,
6,13,13,13,13,14,12,14,12,12,13,12,6,8,15,17,15,11,12,19,16,16,16,16,16,17,17,13,17,17,
16,19,18,16,15,17,18,14,15,17,19,18,17,17,13,6,12,6,13,19,6,15,17,15,18,16,14,17,17,14,
11,16,14,19,16,15,17,18,15,13,15,16,18,18,17,16,13,7,2,7,14, };
static unsigned short stb__courier_35_usascii_h[95]={ 0,21,9,23,24,21,18,10,23,23,12,16,10,3,
5,24,21,20,20,21,19,20,21,20,21,21,15,18,17,7,17,20,22,18,18,20,18,18,18,20,18,18,19,18,
18,18,18,20,18,23,18,20,18,19,18,18,18,18,18,23,24,23,9,2,6,15,20,15,20,15,19,20,19,20,
26,19,19,14,14,15,20,20,14,15,19,15,14,15,14,20,14,23,23,23,6, };
static unsigned short stb__courier_35_usascii_s[95]={ 255,161,31,62,27,167,207,25,88,113,243,
1,17,104,97,13,147,139,153,222,242,124,209,200,182,196,17,246,237,57,221,
230,134,187,142,213,107,90,73,182,37,173,85,228,211,191,172,89,137,95,118,
167,1,50,17,153,55,124,159,120,41,127,43,119,75,24,106,123,70,87,35,
35,1,1,1,68,103,153,226,71,237,16,191,57,19,40,207,104,173,53,139,
77,85,54,82, };
static unsigned short stb__courier_35_usascii_t[95]={ 1,1,104,1,1,1,69,104,1,1,88,
88,104,104,104,1,1,28,28,1,28,28,1,28,1,1,88,49,69,104,69,
28,1,69,69,28,69,69,69,28,69,69,49,49,49,49,49,28,49,1,49,
28,69,49,69,49,69,69,69,1,1,1,104,104,104,88,28,88,28,88,49,
28,49,28,1,49,49,88,88,88,1,28,88,88,49,88,88,88,88,28,88,
1,1,1,104, };
static unsigned short stb__courier_35_usascii_a[95]={ 297,297,297,297,297,297,297,297,
297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,
297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,
297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,
297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,
297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,
297,297,297,297,297,297,297, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_35_usascii_BITMAP_HEIGHT or STB_FONT_courier_35_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_35_usascii(stb_fontchar font[STB_FONT_courier_35_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_35_usascii_BITMAP_HEIGHT][STB_FONT_courier_35_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_35_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_35_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_35_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_35_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_35_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_35_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_35_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_35_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_35_usascii_s[i] + stb__courier_35_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_35_usascii_t[i] + stb__courier_35_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_35_usascii_x[i];
            font[i].y0 = stb__courier_35_usascii_y[i];
            font[i].x1 = stb__courier_35_usascii_x[i] + stb__courier_35_usascii_w[i];
            font[i].y1 = stb__courier_35_usascii_y[i] + stb__courier_35_usascii_h[i];
            font[i].advance_int = (stb__courier_35_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_35_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_35_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_35_usascii_s[i] + stb__courier_35_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_35_usascii_t[i] + stb__courier_35_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_35_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_35_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_35_usascii_x[i] + stb__courier_35_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_35_usascii_y[i] + stb__courier_35_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_35_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_35_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_35_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_35_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_35_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_35_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_35_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_35_usascii_LINE_SPACING
#endif

