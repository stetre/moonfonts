// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_bold_27_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_bold_27_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_bold_27_usascii_BITMAP_WIDTH         256
#define STB_FONT_consolas_bold_27_usascii_BITMAP_HEIGHT        108
#define STB_FONT_consolas_bold_27_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_bold_27_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_bold_27_usascii_NUM_CHARS             95

#define STB_FONT_consolas_bold_27_usascii_LINE_SPACING          18

static unsigned int stb__consolas_bold_27_usascii_pixels[]={
    0x00098f32,0x33310026,0x26001333,0x99981001,0x0c401999,0x05ef6dc0,
    0x400bd300,0x0000aba8,0x9910ccc8,0x6664c007,0x37995300,0x02664475,
    0x03573100,0x9016edc0,0x00aaa659,0x2f223555,0x80dcc01a,0xdfff16ff,
    0x0077cc03,0x5ffffff7,0x03fff4c0,0xfff8ffe4,0x3e207fff,0xfffd301f,
    0x2e001dff,0xffd8806f,0x0001efff,0xfff8dff5,0x3fff5000,0xfffffe88,
    0x1ffe27ff,0x7fffdc00,0x7fec00df,0x0ffb85ff,0x2603fff5,0xfff31fff,
    0xfff707ff,0x3e2dff05,0xfb01ffff,0x3fee01df,0xf702ffff,0xf980ffff,
    0xfffff6ff,0x3ffe20ff,0xbcfff984,0xd800fffd,0x7ffcc05f,0x02ffffff,
    0x5c2ffd80,0xff5004ff,0x7fffd43f,0x227fffff,0xfa8007ff,0x06ffffff,
    0x3feabfe6,0xff0ffe20,0x9bff209f,0xeffffff9,0x217fffa0,0x3f6a66ff,
    0xdfff106f,0xf9333101,0xbfff105f,0xfff88035,0x3333fff5,0x221bffa0,
    0x7fd41ffe,0xfffec883,0xffe81eff,0x7fffcbcf,0x43ffc400,0xf5007ff8,
    0x77ff41ff,0xf89ffe61,0xfff8007f,0x203fff32,0xe8bfa6fb,0x07ffc85f,
    0x5d447ffd,0x3a5ffffc,0x6ff84fff,0x2601ffd0,0xfc804fff,0x05ffa82f,
    0xff8f7dc0,0x0fffc807,0xf901ffc8,0xfffffa8d,0x7d41ffff,0x7ffcc1ff,
    0x0fff2003,0x4c01ffe4,0xfff70fff,0x227ff881,0x7cc007ff,0x81ffe46f,
    0x5d3f66fb,0xfff880ff,0x007ffcc2,0x7ccbfff6,0x06ff80ef,0x7dc03ff9,
    0x7fe401ff,0x003ffb82,0x5407ff80,0xff882fff,0x447fea04,0xdffdffff,
    0x27ff41fd,0x1006ffd8,0x3e601fff,0xfff9806f,0xf109ffb0,0x8bffc4ff,
    0xff302cca,0x102ffd8d,0x15ff11ff,0x7fec07ff,0x8027fe45,0xf00c4fff,
    0x0bfee0df,0xc80dffb0,0x2ffb82ff,0x55555550,0x01ffe355,0x3ee09ffd,
    0x3735510f,0x5fff25ff,0xff100ff9,0x1ffea03f,0x202ffdc0,0x7cc01ffe,
    0x07ffd0ff,0x7fc4fff1,0xdffffe8f,0xf51fff80,0x7ff401ff,0x80dfb6ff,
    0x3fe0fffa,0x9ffd001f,0xb837fc00,0x7fc402ff,0x0bff201f,0x7fc0bfee,
    0x4fffffff,0x7fcc0fff,0x7ddbfa07,0x3ff9ffff,0x1feabffb,0x2607ff98,
    0xfe800fff,0x2ffd401f,0xff9ffe60,0x27ff882f,0xfffffff8,0xffc85fff,
    0x402fffbe,0xfa8effc9,0x2fff801f,0x2200dff5,0x3e003fff,0x07ff706f,
    0x6409ffd0,0x2ffb82ff,0xfffffff0,0x81ffe9ff,0xff105ffc,0xffffff37,
    0x3ff29ff1,0x2a06fbbf,0x3fe207ff,0x37fcc01f,0x200fff80,0x3ffa7ff8,
    0x227ff883,0xc8aeffff,0x7fc41fff,0x4002ffff,0x2007ff10,0x7ffb5ffc,
    0x3faeaa20,0x3fe000ff,0x00bff306,0x7e40dff9,0x01ffc82f,0xfb333333,
    0xf81ffe9f,0x3ff503ff,0x2ff93ff9,0xffff35fe,0x7fdc0bff,0x0bffe207,
    0x2005ffb0,0x3e204ffb,0x213ff67f,0x3fe27ffb,0x27ffc0ef,0x03bfffa2,
    0x006fd800,0x3fe7ffe2,0xffff100f,0x00a985ff,0x7ffc0dff,0x03ffd401,
    0xff985ff9,0x7fe4000f,0x3e20fff4,0x1ff901ff,0x75ff6bff,0x3ffff24f,
    0xffa82eff,0x07ffe207,0x2007ff88,0x3e207ff8,0x83fff27f,0x3e27fffa,
    0x5ffc80ff,0x3fffffa2,0x500bff31,0xfd8003ff,0x2205ffef,0x541dffff,
    0x6ff81fff,0x17fffee0,0xc807ffc4,0xfffdb2ff,0x9ff90007,0x7fcc1ffe,
    0x3e3bf207,0x3fadfd4f,0x7ffff544,0x3fea0eff,0x1fff300f,0x0027fe40,
    0xff80bff6,0x2fbffe26,0x227ffffd,0xdff707ff,0x7feeffec,0x404ff98f,
    0x39b74ff8,0xfffffa80,0xd03ffc02,0xdff0bfff,0x06fffa80,0x7e407ffe,
    0x03ffff2f,0x7d3ff200,0x0dff507f,0x9ffcf7ec,0x207ff5fe,0x6ffffffa,
    0x5407ffe6,0x7ffc07ff,0x37fcc000,0xffc8dff0,0x7ffdffff,0x7dc1ffe2,
    0x21fff36f,0x3ffbeffe,0xffeb7ec0,0x7ffc03ff,0x06ff806f,0x3e13fffa,
    0x3fff606f,0x07ffa03d,0xfec97fe4,0xfc8003ff,0x2a0fff4f,0x37fa06ff,
    0x19ff2ff9,0x3fe607ff,0x3e2fffea,0x9ffb04ff,0x002ffd40,0x9901ffe8,
    0x7ffff707,0x7fc4fff1,0x2e9ff907,0x3ffe25ff,0x3ea01fff,0xfcaffa9f,
    0x17ffe406,0xf501e640,0x0dff03ff,0x1003bfe6,0x3f201fff,0x037fcc2f,
    0xffa7fe40,0x01fff307,0x2bfe77fa,0x1ff9cff8,0x3fe2df50,0x0bfff23f,
    0x7403fff7,0xf50001ff,0x4cc000bf,0x7c4fff10,0x27ffd07f,0x7fcc4ffb,
    0x3fe206ff,0x3fe2bf94,0x01bff201,0x20131000,0x7ff506ff,0x40fff500,
    0xffe82ffc,0xa7fe4000,0xfff107ff,0x3e3bf605,0xfccffcbf,0xff97ee07,
    0x3fffe22f,0x04fffede,0x0001bfe6,0x5d701fff,0x13ffc400,0xfff70fff,
    0x703ffea3,0x7e409fff,0x2ff93f26,0x007fff30,0xf00013b2,0x0bfee0df,
    0xc81bff20,0x2ffc82ff,0xfa7fe400,0x13ffe07f,0xffffb7e4,0x2e3fffff,
    0x3f29fb0a,0x7ffcc1ff,0x405fffff,0x40002ffd,0x7fd43ffc,0xfff1001f,
    0x555fffc4,0x3e23fffd,0xffbabeff,0xffa81fff,0x7fcdbea1,0xfff73311,
    0x3ffee00b,0x1bfe0002,0x74017fdc,0x3ff203ff,0x002ffb82,0x7ffa7fe4,
    0x6417ff20,0xf3dff57f,0xfffe8bff,0x4ffffeff,0xdffff930,0x07ff8807,
    0x47ff8800,0x1002fffc,0x7ffc4fff,0x85ffffff,0xfffffffa,0x220effff,
    0x7ffc44fe,0x3ffe65ff,0xf9000eff,0x7c0007ff,0x05ff706f,0x200fff88,
    0xffb82ffc,0xa7fe4002,0x3fe607ff,0x31ffb80f,0x7f405445,0xffffffff,
    0x07ff9804,0x0009ff70,0xf88bff60,0xff1000ef,0x7fff644f,0x3a602eff,
    0xe8aeffff,0x03bf25ff,0x9837ff6a,0x4004ffff,0x0000fff9,0x7fdc1bfe,
    0x02ffec02,0x3ee0bff2,0x7fe4002f,0xfe80fff4,0x04ff885f,0xffedca80,
    0x3e000cde,0x3e0a23ff,0x300000ff,0x00188dff,0x26201998,0x00998000,
    0x44044000,0x10000abb,0xff800013,0x403ff906,0x6400fffb,0x3ffb82ff,
    0xf9fff400,0x7ffcc07f,0x001ffd83,0x8001fe60,0xffeefffc,0x0017fea1,
    0x003ffd00,0x00000000,0x00000000,0x00000000,0x3ffa0dff,0x07fff300,
    0xf305ff90,0x7fc400bf,0x900fff2f,0xffa83fff,0x20164c1e,0x220006fb,
    0x4ffffffe,0x00007bb2,0x0007dd50,0x00000000,0x00000000,0xf0000000,
    0x7fed4cdf,0x0bfff106,0x3ff26662,0xadfff882,0xd7115951,0x3ffe1fff,
    0xfe881999,0x7ffe40ff,0x403fffef,0xb80005fc,0x0002dffe,0x00000000,
    0x00000000,0x00000000,0x3e000000,0xfffff16f,0x03bff603,0x7fffffdc,
    0xfffff702,0x3fffffee,0x3fffe2ff,0xffd107ff,0xfffff70b,0x098803bf,
    0x00000000,0x00000000,0x00000000,0x00000000,0xf8000000,0x3dfff16f,
    0x70077cc0,0x05ffffff,0xfabfff54,0x42efffff,0x07ffffff,0xb9803ba2,
    0x000000ab,0x00000000,0x00000000,0x00000000,0x00000000,0x6ff80000,
    0x00980066,0x4cccccc4,0x54433000,0x33301aba,0x08803333,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x6ff80000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x54000000,0x0000002a,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x80000000,0x99711aa8,
    0x99910005,0x54400100,0x2aaaaccc,0x00003332,0x1ef76e44,0x39999995,
    0x00133220,0x88005510,0x26200aba,0x19999999,0x00ab9880,0x80266200,
    0x3001aba9,0x2aa60037,0x2ea6009a,0x4cc409ab,0x01999999,0xfff39ff1,
    0x44001bff,0x77ec07ff,0x7fffdc00,0x3e7fffff,0xb80000ff,0x26ffffff,
    0x3ffffffc,0x000fff10,0x88027fe4,0x1efffffd,0xffffffc8,0xfb101fff,
    0x001dffff,0x5fffff93,0xfffffd50,0x7ffdc07f,0xffff9102,0xfe983fff,
    0x20ffffff,0xfffffffc,0xfdff107f,0x0bffffff,0x503ffc40,0x7d409fff,
    0xffffddff,0x003ffe7f,0xbffff300,0x7775cddb,0xff103fff,0x7fe4000f,
    0xffff9804,0x642fffff,0xffffffff,0xfffe881f,0x201fffff,0xfffffffc,
    0x7ffffd42,0xfd03ffff,0xffd30bff,0x43ffffff,0xfffffffa,0x3fff20ff,
    0x107fffff,0x915dffff,0x22003fff,0x3fea07ff,0x8bffa04f,0x7fc0fff8,
    0x7ec0000f,0x7ff4005f,0x00fff103,0x4027fe40,0xfcbcfffe,0x77fe47ff,
    0x81eeeeee,0xfb9aeffd,0xfffb05ff,0xf81559bd,0xffb30cff,0x13fffa0d,
    0x59bffff1,0x3fe23fb9,0xdba9abef,0x2aaaaa60,0xff107ffc,0x4fff81df,
    0x80fff100,0x3fe00efd,0x7c3ffc87,0x740000ff,0x7f4002ff,0x0fff103f,
    0x7ed55440,0x22aaaaef,0x7cc1fffb,0x0bff23ff,0x40fff980,0x7d41fff9,
    0xff8803ff,0x80fff887,0x7e40eff9,0x2a1102ff,0x40000fff,0xff107ffa,
    0x0bff901f,0x3ff332a6,0xfff00007,0xff87ff70,0x0d55440f,0x0007ffe0,
    0x3e207ffd,0x0599717f,0xfffffff3,0x7fcdffff,0x4dffb03f,0x36002ffc,
    0x9ffb04ff,0x3003ffe8,0xfff10fff,0xfff98180,0x1fff7003,0x7ffa8000,
    0x2e0fff10,0x7ff4c6ff,0x4c7fffff,0x00aaaaaa,0xfe88fffa,0x207ffc1f,
    0x7c00fffe,0x7f4000ff,0x3fff103f,0x98bfffff,0xffffffff,0xfff16fff,
    0xc9ffea03,0x3fe002ff,0x5fffd81f,0x8003ffe6,0x3f60dfff,0xffb8004f,
    0xfff5000f,0x7d40001b,0x0fff107f,0xff99bfee,0x7fffffff,0x7fffffe4,
    0x3bffea03,0xff85fffd,0x07fff60f,0x3ffeaaaa,0x200aaaab,0xff103ffe,
    0xffffffff,0xffd99987,0xf309999d,0x7ffcc0ff,0x799bff90,0x307ffc03,
    0x54dffffd,0xcdcb9eff,0x7ffff702,0x0001dffd,0x4400dff9,0x01dfffff,
    0x107ffa80,0x3ff20fff,0x987bffa4,0x7ffe47ff,0x3ee03fff,0x0cffffff,
    0xff70fff8,0x3fffe05f,0xffffffff,0x40fffa03,0x9aeffff8,0x3f206ffd,
    0x1ffea04f,0xf91fff88,0x5dffffff,0x3ee7ff88,0x327ffeff,0xffffffff,
    0xfffb81ef,0x0000dfff,0xa800bffb,0x3effffff,0x41ffea00,0xffd07ff8,
    0x103ffee7,0x99988fff,0xff103ffe,0x4015773b,0xfffa8fff,0x3ffffe02,
    0x3fffffff,0x440fffa0,0x3ea0efff,0x13ff207f,0x2207ffb8,0xfff92fff,
    0x43ffffff,0xffd8fff9,0x90fff8bf,0xffffffff,0xffb10dff,0x4403dfff,
    0x27ff43ed,0x7fff4c00,0xa800dfff,0xfff107ff,0x323fff70,0x7ff884ff,
    0xa81fff40,0x7fc004ff,0x003fffaf,0x20007ffc,0xff103ffe,0x07ff981f,
    0xfa813ff2,0x3ffe207f,0xfff95101,0x7ffffc4d,0x4fff31ef,0x2e0afffd,
    0x3fa23fff,0x2ffffdef,0x747fff90,0x260005ff,0x05fffffc,0xf107ffa8,
    0xffb557ff,0x41fff47f,0x7f407ff8,0xbfff303f,0xf0157999,0x00bfffff,
    0x8001fff0,0xff103ffe,0x40fff10f,0x3e604ffc,0xfff300ff,0xf1fff600,
    0x4c1bffff,0x17ff26ff,0xffd27fec,0x07fffd4b,0xf937ffec,0x710000df,
    0xa801ffff,0xfff107ff,0x8bffffff,0xff882fff,0x01fff407,0xfffffff9,
    0xefff87ff,0x7c000fff,0x7f4000ff,0x0fff103f,0x7e40fff1,0x3ffe204f,
    0x00dff501,0xff87ffe6,0x5ffb82ff,0x7e41bfee,0x30dff55f,0xff505fff,
    0x07ffdcff,0xfffb8000,0x83ffd402,0xfffffff8,0x83ffe82e,0x7f407ff8,
    0x3bff203f,0x3fffffee,0x3ffa7ffe,0x07ffc006,0x40fffa00,0xff887ff8,
    0x017ff207,0x3f609fff,0xfff9005f,0xfd05ffd8,0x07ffd47f,0xffca7fe4,
    0x207ffd04,0x3fea7ffc,0xf100004f,0xffb803ff,0x31fff106,0x84ffd801,
    0x7f407ffb,0x0bff703f,0x7fcbffb1,0x05fff98f,0x0003ffe0,0x3e207ffd,
    0x07ff887f,0xf701ffee,0xfffb85ff,0x5fff8801,0x2e0fffd4,0x7ffc47ff,
    0xb9fffc43,0x3fff07ff,0xfb17fea0,0x215109ff,0x3fff201a,0xffe88150,
    0x00fff104,0xf507ffe4,0xffe80fff,0x205ffd03,0x3ffe5ffb,0x007fff70,
    0xd0003ffe,0x3fe207ff,0x207ff887,0xaaadfffa,0x3bfffe23,0x6c4fffec,
    0xfffecacc,0xcfffe81f,0xc83fffca,0xffcbdfff,0x37ffe66f,0x07ffeb9b,
    0xff307ff6,0xffdbdfff,0x3337ff63,0x365fffec,0xfffebbdf,0x00fff101,
    0x6df7ffc4,0x7407ffff,0xbffd03ff,0x7c7ffd10,0x3fff60ff,0x00fff802,
    0x7ffe6664,0xff11cccd,0x80fff10f,0x6ffffffe,0x7fffffcc,0x7ffc0dff,
    0x02ffffff,0xffffffd3,0x3ffa209f,0x41ffffff,0xfffffffc,0x7f65c1ff,
    0xffff504f,0x363fffff,0xffffffff,0x7fffec6f,0x3e204fff,0x7fe4007f,
    0x7fedffff,0x7ffe6664,0xff71cccd,0xfffdddff,0x220fff8d,0x7c00fffe,
    0x3fe200ff,0xffffffff,0x10fff12f,0xfc880fff,0xd886ffff,0xf03effff,
    0x17dfffff,0xffffc880,0xfffc802e,0xfd500cff,0xf019ffff,0xc8805dff,
    0x0beffffe,0xffffffd7,0xfffd505d,0xff8805df,0xfffb8007,0x7c4ffb3f,
    0xffffffff,0x3ffee2ff,0x40bfffff,0x7fcc0fff,0x3ffe00ef,0x3fffe200,
    0x2fffffff,0xff10fff1,0x04ccc00f,0x44004c40,0x22000099,0x01310001,
    0x200ccc40,0x330001ac,0x01999880,0x33000660,0x04cc0003,0x3ffffe20,
    0x82ffffff,0x001abba9,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x26201331,0x5d4c4009,
    0x5955101a,0x26662015,0x99999999,0x44033310,0x02662199,0x22013310,
    0x33300aba,0x10998801,0x13310033,0x880d5440,0x82660199,0x99881998,
    0x26666209,0x09999999,0x4ccc0666,0x26666661,0x20999999,0x99999999,
    0x01331099,0x664c2662,0x702ffe8c,0x3fa60bff,0x23ffffff,0xfffffffc,
    0x7fffd40c,0x2fffffff,0x3e09fff1,0x3ffee5ff,0x85fff100,0xcffffffb,
    0x2037fec0,0x5ff74ffe,0x882ffa80,0xfb05fffc,0xbff307ff,0x3217ffe4,
    0x3ff22fff,0xffffffff,0x50fff32f,0x7ffc7fff,0xffffffff,0x3ffffe5f,
    0xfb6fffff,0x53ff207f,0xffe8fff9,0x90bff702,0xffffffff,0x7fffec9f,
    0x7d45ffff,0xffffffff,0x3fff22ff,0x20fffdc0,0xff903fff,0x7ffff44d,
    0x7dc5ffff,0xfff100ff,0x500bfee5,0xfffb85ff,0xfffb05ff,0x64bff30f,
    0x7ff44fff,0x3ffff23f,0x2fffffff,0xfe88fff3,0x7ffffc6f,0x5fffffff,
    0x3ffffffe,0x7ffb6fff,0x7cd3ff20,0x02ffe8ff,0xffb8bff7,0xfdcabdff,
    0x2e66b324,0x3a61fffe,0xffeeeeee,0x3ffe21ff,0x5c2fffc4,0x7fc40fff,
    0x5e7fec1f,0x222fffeb,0xff503fff,0x2017fd4f,0xfff31ffa,0x360bffff,
    0x7cc3ffff,0x9ffff65f,0x2e3ffff8,0xeeeeeeee,0xfff32fff,0x540fffc8,
    0xbfffbaaa,0x2aaa2aaa,0x2aabfffb,0x3f207ffb,0x3afff14f,0xbff702ff,
    0x8077ffc4,0xfff88018,0x9fff3003,0x2e1fff70,0xfff00fff,0x885ffc87,
    0x27ffc40d,0x7e417ffa,0x00bfea5f,0x3fe23ff7,0xb05ffccf,0xf98dffff,
    0x3ffff65f,0x09ffff71,0xf337fe40,0x17ffccff,0x007ffcc0,0xfb07ff98,
    0x53ff207f,0x5ffd7ff8,0xfc97fee0,0xd00000ff,0x3fa005ff,0x57ffa06f,
    0x3ee04fff,0x07ffe27f,0xc8bffb00,0x5fff07ff,0x2e01ffcc,0x643360ff,
    0xfffb05ff,0x2ffcc5ff,0x3a9ffbfb,0x1004ffcf,0x7fcc7fff,0x4017ffa7,
    0x3000fff9,0x3ff60fff,0x7c9ff903,0x205ffd6f,0x3ffe5ffb,0xff100004,
    0x3fff200f,0x37ffea01,0x7fc00fff,0x00bff93f,0xf989ffb0,0x7ffcc1ff,
    0xfc8ffe60,0xc803fee4,0x9ffb05ff,0x2ffccdff,0xf1dfbbfd,0x2009ff3f,
    0x7fcc7ffc,0x001fff97,0x4003ffe6,0xffb07ff9,0xf93ff207,0x205ffd5f,
    0xfff15ffb,0x26660005,0x9803ffea,0xfe804fff,0xb803ffff,0x1fff8eff,
    0x1fffc400,0x3ee1fffc,0xf1ffcc6f,0x203fe4ff,0xffb05ffc,0x3e63fff3,
    0x3eb3fa5f,0x0bff7fbf,0x987fff10,0x1fff9fff,0x03ffe600,0xd83ffcc0,
    0xaaaaadff,0x3fa04ffd,0x2bff702f,0x3ee1fff9,0x7c44ffff,0x002fffff,
    0x2600dffd,0x1006ffff,0x0bffbfff,0x20fff900,0x7fec6ffc,0xf9a7fc43,
    0x80ff91ff,0xffb05ffc,0x3e6bff71,0x3e33fe5f,0x0bfd4fff,0xf30fff90,
    0x009ffdff,0x000fff98,0x3f60fff3,0xffffffff,0x3ffa04ff,0x2abff702,
    0x3fee0fff,0x7fc44fff,0x404fffff,0x1001fffc,0x400bffff,0x01fffffb,
    0x81fffd40,0xff10fffa,0x94ff883f,0x1ff29fff,0x360bff90,0x8fff88ff,
    0x53fe5ff9,0xdfd2fffe,0x83fff880,0x4ffffff9,0x07ffcc00,0xb07ff980,
    0xffffffff,0x7f409fff,0x2bff702f,0x3aa0fff9,0xaa84fffe,0x05fffeba,
    0x4009fff3,0x02fffffc,0x0bffff10,0x04fff980,0xffa97ffc,0x3fa9ff06,
    0x80df96ff,0xffb05ffc,0x3e73ff21,0x7dd3fe5f,0x701bfa7f,0xff301fff,
    0x003fff7f,0x8007ffcc,0xffb07ff9,0xfb55555b,0x17ff409f,0xff15ffb8,
    0x13ff203f,0x40fffdc0,0x26006ffe,0x06ffffff,0x007ffee0,0x805fff98,
    0x9ff95ffd,0x3fe73fe0,0x06fd9ffb,0xfd82ffe4,0xf5fff10f,0x4cffe2bf,
    0x81bfa4ff,0xf304fff8,0x01bffaff,0x000fff98,0x3f60fff3,0x09ff903f,
    0xfc81fff4,0x413ffe4f,0x3e004ffc,0x7ffe42ff,0x3bff6001,0x3003fff9,
    0x7cc00fff,0xff7005ff,0x7c07ffaf,0xff8dfbdf,0x7e405fdb,0x41ffb05f,
    0x15ffdffd,0xd0f6c7ff,0x7ffdc0ff,0x26fff300,0xf3004fff,0x3e6001ff,
    0x07ffb07f,0xfd813ff2,0x45ffb04f,0xff907ffd,0x3ffe2009,0x00fffe61,
    0xfb2fffa8,0xff3001ff,0x3ffe600f,0x3ffe2005,0x3fa07ffa,0xbdfd3fed,
    0x5ffc80bf,0x7cc1ffb0,0xff15ffff,0x207fd807,0x3e604fff,0x07fff27f,
    0x003ffe60,0xfd83ffcc,0x09ff903f,0x2207ffdc,0x3fe61fff,0x27fe40ef,
    0x20fffc80,0x74006ffe,0x3ffe66ff,0x07ff9804,0x005fff98,0x5ffeffe8,
    0x43ffbfa0,0x405feffb,0xffb05ffc,0x5ffffe81,0xfd807ff3,0x01fff707,
    0xff13ffcc,0xfff300df,0x1ffe6001,0xfc81ffec,0x3ffe204f,0x4fffbabe,
    0xceffffc8,0x9b14fffc,0xffff9757,0x7ffffdc9,0x23ffffff,0x7ec2fffb,
    0x7fcc01ff,0x7fffc407,0x2fffffff,0x5fffff70,0x137ffec0,0xed89ffff,
    0xeeffffee,0xa81ffb2e,0xff35ffff,0x80ffd805,0x7cc04ffe,0x27ffd47f,
    0x803ffe60,0xcfffdccc,0x07ffb3cc,0xf7013ff2,0xdfffffff,0xffff9101,
    0x229fffff,0xffffffff,0x7fffe45f,0x3fffffff,0xf10dfff1,0xff980dff,
    0x7fffcc07,0x2fffffff,0x1fffff30,0x21fffec0,0x7fc4fffe,0xffffffff,
    0xf01ffb3f,0x3feabfff,0x207fec02,0x4c00fffb,0xfffd87ff,0x03ffe602,
    0xfffffff8,0x7ffb6fff,0x2013ff20,0x4fffffe9,0xffffea80,0xfff11cff,
    0x903bffff,0xffffffff,0x3ff27fff,0x5fff901f,0x203ffcc0,0xfffffff9,
    0x3e02ffff,0x7e405fff,0x7ffdc1ff,0x7fffffc3,0xfb3fffff,0xbfff701f,
    0xf900bfea,0x05ffe83f,0xf887ff98,0xff300eff,0x7fffc01f,0xb6ffffff,
    0x3ff207ff,0x004cc004,0x10099880,0x00003333,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x4ccccc00,0x99998801,0x31099999,0x33333333,0x06666621,0x2604c400,
    0x99999809,0x4cc40009,0x33100009,0x26666013,0x04cc4009,0x15753000,
    0x00000a80,0xbcb98051,0x32ea200a,0xa9800acc,0x3100abcc,0xa8015797,
    0x301bcccb,0xdfffffff,0xffff9017,0x329fffff,0xffffffff,0xfffffd5f,
    0x3e003bdf,0x307fe64f,0xffffffff,0xfff8803b,0xff98006f,0xfff984ff,
    0x40beffff,0xa8006ffa,0x04ffffff,0x80001df7,0xfd882ff9,0xb82fffff,
    0xffffffff,0xffffd303,0xffd309ff,0xf505ffff,0x0dffffff,0x3fffffe6,
    0xffc86fff,0x4fffffff,0xfffffff9,0x3fffabff,0x04ffffff,0x3fea4ff8,
    0x7ffffcc0,0x201fffff,0x01fffffa,0x27ffff40,0x7fffffcc,0x3ea1ffff,
    0x7fe4006f,0x46ffffff,0x001ffff8,0x41ffff50,0xfeefffe8,0x7ffdc1ff,
    0x42ffffee,0xfffffffa,0x7fffd44f,0x2a3fffff,0xfeedffff,0x75fff306,
    0xc87ffffb,0xccccceff,0x99dff92c,0x3fa79999,0xfffdcacf,0x8ffe204f,
    0x7fcc0ffb,0xfffcaaaf,0x3ffff206,0x3fea003f,0xff984fff,0xfffdcaaf,
    0x00dff50e,0x4cefffcc,0x74c2fffc,0x5c002fff,0x7e40efff,0x1bff20df,
    0xbffb0175,0x4dffffc4,0x3fe23ca9,0xfffc9aef,0x20dffb0f,0xf0fff301,
    0x5ffc8bff,0x805ffc80,0x7f442ffe,0x5ff300ff,0x7fcc3fe4,0x207ffb86,
    0x05ffcfff,0xff9fff10,0x70fff309,0x3fea5fff,0x17ff6006,0x3a21bff2,
    0xf9003fff,0xfff10bff,0x003fff03,0xffc9ffe6,0xfffb800f,0xe9fffc40,
    0x7cc005ff,0x47ffc87f,0xfc805ffc,0x2ffe805f,0x6c4fff88,0xffffffff,
    0xff31ffff,0x01fff30d,0xfff3dff3,0x57ff9001,0xfff309ff,0x7d53ffa0,
    0x3ffa006f,0x00fff982,0x440bfffb,0xf503fffd,0xd33333df,0xa99805ff,
    0x0fffa7ff,0xe81ffec0,0xbfffb4ff,0xfff30015,0xfc8dff90,0x5ffc805f,
    0xb02ffe80,0xfffd8bff,0xffffffff,0x70dff31f,0x3fee0dff,0x9805fff4,
    0x09ff56ff,0x3f60fff3,0x00dff55f,0x7c41fffc,0x3fee01ff,0x7ff4c0ef,
    0x3ffee02f,0xffffffff,0x7fffe443,0xfff17fff,0x0bffa005,0xff9affe4,
    0x201dffff,0x7fcc7ff9,0x02ffe43f,0x4cceffe4,0x5ffd0999,0x531ffee0,
    0xff555ffb,0x3fe6155b,0x0bffee66,0xffd8fff4,0xa8fff404,0x7ff984ff,
    0x3ea7ffd0,0x3ffa006f,0x805fff05,0xf30efffa,0xfc803fff,0xffffffff,
    0x3ffea3ff,0x37ffffff,0x3e003fff,0xdff702ff,0x7ffffecc,0x9fff305f,
    0x90bfffdb,0xdddddfff,0x3ffff21d,0xfd3fffff,0x1ffea05f,0x13fe3fe4,
    0x3fffffe6,0xff102fff,0x703ffdcf,0x27fd49ff,0x7d43ffcc,0x0dff52ff,
    0x56fffe40,0x03fffda9,0xb127ffe4,0xfb809fff,0x999999df,0xbfff1099,
    0x45ffe613,0xfd002fff,0x17ff209f,0x3ffffae2,0xfffff983,0xff902dff,
    0x3fffffff,0x3ffffff2,0x5ffd3fff,0x203ffea0,0x0ffe26fd,0x3fffffe6,
    0xfa81efff,0x07ffe25f,0xfa83ffe2,0x9fff984f,0x25fffca9,0x22006ffa,
    0xffffffff,0xfd102fff,0x3ff207ff,0xdff500df,0x43ffd400,0x3ffe7ff9,
    0x0dffb005,0xf300fffa,0xfff30bff,0x203ffffd,0xfffffffc,0x5dff91ff,
    0x3a355555,0xfff702ff,0xff997fa0,0xaafff982,0x40ffffdb,0x7ff43ffd,
    0x542ffd83,0xfff984ff,0x0fffffff,0x3001bfea,0xfffffffd,0xffd303ff,
    0xfffb805f,0x3fff880e,0x88fff700,0x3ff27ffe,0x7fdc103f,0x0fffd42f,
    0x4c2ffec0,0xfffb17ff,0x00bff901,0xfd00bff9,0x9bff205f,0xeefffeea,
    0x263eeffe,0xfff986ff,0x3207ffc4,0x7ffcc6ff,0xeffcaaaa,0xffff30aa,
    0xf509ffff,0x2a6000df,0x0fff89ab,0x00f7ffd4,0x81ffffa8,0xa9adfffc,
    0x3ffea4cb,0x7fffebad,0x33bfffe2,0x3fe24fdc,0xfffdceff,0x2666f7a4,
    0xf983fffb,0x13ffe27f,0x32017ff2,0xffe805ff,0x5cbffd02,0xffffffff,
    0x3e64ffff,0x4bffd06f,0xfffffff9,0x3ee0ffff,0xffffffff,0xff31ffff,
    0x5403555f,0x200006ff,0x7fdc6ffa,0x74c000ef,0xffe82fff,0x45ffffff,
    0xeffffffe,0x7ffd47fe,0x544fffff,0xffffffff,0x3ffffe0d,0x980effff,
    0x7ffe47ff,0x402ffe40,0xfe805ffc,0x1fffa82f,0x337ff326,0x22ccffec,
    0xffd06ff9,0x7ffffe49,0x22ffffff,0xfffffffb,0x31ffffff,0x7d400fff,
    0x3a00006f,0x3ffe23ff,0x3fa20005,0xfffb80ef,0x6c44ffff,0xffb4ffff,
    0xfffff910,0xfffb105d,0xfffb07df,0x2017ffff,0x7fc47ff9,0x02ffe43f,
    0x7402ffe4,0x7ffdc2ff,0x645ff305,0x0dff307f,0x7f47fff7,0xecccccdf,
    0x2aaa65ff,0xeffdaaaa,0x0fff30aa,0x0037fd40,0x07fff4c0,0x400013e6,
    0x4cc400ed,0x00cc4009,0x20019880,0x99980099,0x7ff98009,0x7e47ffd8,
    0xfffc805f,0xd4eeeeee,0xfffdddff,0x3fea01ff,0x7cc1bf61,0xffedccff,
    0x0fff10ef,0x7003ffdc,0xfff309ff,0x77ffd400,0x40eeeeee,0xffffeeee,
    0x0000101f,0x00000008,0x00000000,0xfff30000,0x647fff30,0xffc805ff,
    0x5fffffff,0xfffffffd,0x7fdc019f,0x7cc17fa0,0xffffffff,0x817fee1f,
    0x7001fff9,0xfff309ff,0x7fffd400,0x40ffffff,0xefffffff,0x00000001,
    0x00000000,0x00000000,0xd07ff980,0x2ffe4dff,0x7ffffe40,0xffd5ffff,
    0x0037bdff,0x04fe8ff7,0xdffffff3,0x05ffb05b,0x7004fff8,0xfff309ff,
    0x7fffd400,0x40ffffff,0x02ceffff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x80000000,0xaa882aa8,0x64c2aa62,0x8d5441bc,0xa882ccb8,
    0x710bc88a,0x07990017,0x2a01554c,0x015551aa,0x2aa1aa88,0xaaaaaaaa,
    0x4c06aaa2,0x1e5c02aa,0x40026600,0x00002ed8,0x66400098,0x4c79951c,
    0x32203ccc,0x2222223e,0x88888888,0x99999508,0x1ffe2399,0xffc9ffe6,
    0x2fffffca,0x3fe73fe2,0x7fcc5fff,0xfe8efffa,0x37fc01ff,0x203fff50,
    0xffb1fff9,0x24ff9803,0xfffffffe,0x3fff25ff,0x027ffc41,0xfa8017fa,
    0xffd800ff,0xfffff32f,0x81ffffff,0x440dfffc,0xb97ffc2a,0x7ffd45ff,
    0x27fffd04,0xffffffff,0x96ffffff,0x7fffffff,0x3e61ffe2,0x3fbff27f,
    0x10ffffff,0xfffffdff,0x77fcc7ff,0xfffeffff,0x037fc04f,0x7e413ffe,
    0x00bff26f,0x7ff47ff5,0x5fffffff,0xfb1bffa2,0x7ec910df,0x7f401914,
    0xfff804ff,0xfffff35f,0x41ffffff,0x0efffffb,0xffe83ff2,0xd10bff71,
    0xfff889ff,0xffffff6f,0xffffffff,0x3fffff2d,0x0fff13ff,0x7fe4fff3,
    0xfff98cff,0x5dffff12,0x7ccdffb3,0x5fff8bff,0x6ff80dfd,0xe83ffe40,
    0x0ffee3ff,0x5545ff70,0xfffeaaaa,0xaa7ffcc1,0xefd81fff,0x4ffabfc9,
    0x3ff9ff70,0x16fffb80,0x55555555,0xcfff8555,0xfe8afffe,0xfa8fff47,
    0x0fbb204f,0x2aabffff,0xaaaaaaaa,0x3312aaaa,0x22133333,0x7ff987ff,
    0xf90ffff2,0x3bffe29f,0xf99ffea0,0x6c7ffe7f,0x037fc07f,0xf30bffe2,
    0x27fd41ff,0x07fe4797,0x40fffea0,0xfffafffb,0xfdfffb03,0xf109fffd,
    0x201bfa7f,0x40005ffd,0x3ff63ff9,0x7ec4ffff,0x009ff50f,0x007ffea0,
    0xff100000,0x64fff30f,0x3eeb85ff,0xf981fff1,0xf93fe67f,0xcc9ff66f,
    0xccfffccc,0x2ffec3cc,0xff313ff2,0x6c3ffe2b,0x7ffc407f,0x7fffec05,
    0x7fe4405f,0xf900cfff,0x201ffd4d,0x40004ffb,0x7fe42ee9,0x7fec0eff,
    0x0007ff30,0x000000c4,0x987ff880,0x13ff27ff,0x443ffc40,0x93fe67ff,
    0xf9ff66ff,0xffffffff,0x7fd46fff,0x207ffe0f,0x7fff76ff,0xffd01bfa,
    0xfff8801d,0x7dc400ff,0xf302efff,0x00ffd85f,0x3a61ffd1,0xeeeeeeee,
    0xb95000ee,0x4cff9017,0x000003ff,0xf1000000,0x4fff30ff,0xf1004ffc,
    0x4fff10ff,0x9bfe4ff9,0x3fffe7fd,0xffffffff,0xf52fff86,0x75ffa0df,
    0x0bfd6fff,0x800fffec,0x6406fffd,0xffffffff,0x4c37f43f,0x3f2e25ff,
    0x3ffe62ff,0xffffffff,0x00000000,0x00000000,0x87ff8800,0x3ff27ff9,
    0x0fff1004,0x7fccfff1,0x7fd9bfe4,0x3fe66666,0xc809999f,0x07ffb5ff,
    0x3bfe7ff6,0x704ff9ff,0x2e005fff,0x203fffff,0xbbfcaffd,0x07fee4ff,
    0xff98ffe4,0x666441ef,0x4ccccccc,0x00000000,0x00000000,0x81fff100,
    0x3ff27ffc,0x0fff1004,0x7fccfff1,0x7fd9bfe4,0x88037fc0,0x0fff9fff,
    0x3ffbff90,0x307ff9ff,0x26009fff,0x1fffefff,0x53f61b30,0x806620e9,
    0x35710998,0x00000000,0x00000000,0x44000000,0x3fee1fff,0x013ff27f,
    0x7c43ffc4,0xf93fe67f,0xf01ff66f,0x7fec00df,0x3ee05ffe,0xfffd5fff,
    0x6ffe885f,0x2bffd100,0xfd006ffe,0x0000000b,0x00000000,0x00000000,
    0xfe800000,0xffffecff,0x4013ff27,0xff887ff8,0xff93fe67,0xff01ff66,
    0x7ffd400d,0x3fea02ff,0xffff92ff,0xeefffd83,0x7ec5eeee,0x9fff30ff,
    0x0009db00,0x00000000,0x00000000,0x00000000,0xfffffb80,0x3f27fedf,
    0xfff1004f,0x7ccfff10,0xfd9bfe4f,0x0037fc07,0x301bfffe,0x3e61ffff,
    0x7ffc0fff,0x6fffffff,0xf90bffee,0x000005ff,0x00000000,0x00000000,
    0x00000000,0x7fffdc00,0x7fe4ffb3,0x0fff1004,0x7fccfff1,0x7fd9bfe4,
    0x20004cc0,0xf803fffc,0x3fff45ff,0x7ffffffc,0xfff36fff,0x03fffa09,
    0x00000000,0x00000000,0x00000000,0x30000000,0x00000013,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_bold_27_usascii_x[95]={ 0,5,2,0,1,0,0,5,3,3,1,1,2,3,
4,0,0,1,1,1,0,2,1,1,1,0,5,2,1,1,2,3,0,0,1,1,1,2,2,0,1,1,2,1,
2,0,1,0,1,0,1,1,1,1,0,0,0,0,1,4,1,3,1,0,0,1,1,1,1,1,0,1,1,1,
1,1,1,0,1,0,1,1,2,2,0,1,0,0,0,0,1,2,5,2,0, };
static signed short stb__consolas_bold_27_usascii_y[95]={ 20,1,1,2,0,1,1,1,0,0,1,6,15,11,
15,1,2,2,2,2,2,2,2,2,2,2,6,6,5,8,5,1,1,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,0,2,22,1,6,1,6,1,6,1,6,1,0,
0,1,1,6,6,6,6,6,6,6,2,6,6,6,6,6,6,0,-2,0,9, };
static unsigned short stb__consolas_bold_27_usascii_w[95]={ 0,5,10,15,13,15,16,5,9,9,13,13,8,9,
6,14,15,13,13,13,15,12,13,13,13,14,5,9,12,13,12,10,15,15,13,13,14,11,11,14,13,12,10,14,
12,15,13,15,13,15,14,13,13,13,15,15,15,15,13,7,13,8,13,15,10,12,13,12,13,13,14,13,13,13,
11,14,13,15,13,14,13,13,12,11,13,13,15,15,15,15,12,10,4,11,15, };
static unsigned short stb__consolas_bold_27_usascii_h[95]={ 0,20,7,18,24,20,20,7,26,26,12,14,10,4,
6,22,19,18,18,19,18,19,19,18,19,18,15,19,16,9,16,20,25,18,18,19,18,18,18,19,18,18,19,18,
18,18,18,19,18,23,18,19,18,19,18,18,18,18,18,26,22,26,10,4,6,15,20,15,20,15,19,20,19,20,
26,19,19,14,14,15,20,20,14,15,19,15,14,14,14,20,14,26,28,26,7, };
static unsigned short stb__consolas_bold_27_usascii_s[95]={ 253,153,200,55,94,204,187,250,68,18,133,
58,161,245,222,124,158,136,90,30,101,145,174,180,188,144,247,202,172,170,159,
236,78,85,71,212,40,28,16,15,236,223,240,194,131,164,150,129,117,108,1,
226,209,1,104,120,58,74,44,60,139,28,147,229,211,199,173,212,15,185,72,
43,101,29,48,57,87,42,28,225,1,159,15,240,115,1,72,88,117,220,104,
37,1,6,184, };
static unsigned short stb__consolas_bold_27_usascii_t[95]={ 1,1,90,71,1,1,1,51,1,1,90,
90,90,90,90,1,30,51,51,51,71,30,30,51,30,71,1,30,71,90,71,
1,1,71,71,30,71,71,71,51,51,51,30,51,71,51,51,30,71,1,71,
30,51,51,51,51,51,51,51,1,1,1,90,90,90,71,1,71,30,71,30,
30,30,30,1,30,30,90,90,71,30,1,90,71,30,90,90,90,90,1,90,
1,1,1,90, };
static unsigned short stb__consolas_bold_27_usascii_a[95]={ 238,238,238,238,238,238,238,238,
238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,
238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,
238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,
238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,
238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,
238,238,238,238,238,238,238, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_bold_27_usascii_BITMAP_HEIGHT or STB_FONT_consolas_bold_27_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_bold_27_usascii(stb_fontchar font[STB_FONT_consolas_bold_27_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_bold_27_usascii_BITMAP_HEIGHT][STB_FONT_consolas_bold_27_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_bold_27_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_bold_27_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_bold_27_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_bold_27_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_bold_27_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_bold_27_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_bold_27_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_bold_27_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_bold_27_usascii_s[i] + stb__consolas_bold_27_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_bold_27_usascii_t[i] + stb__consolas_bold_27_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_bold_27_usascii_x[i];
            font[i].y0 = stb__consolas_bold_27_usascii_y[i];
            font[i].x1 = stb__consolas_bold_27_usascii_x[i] + stb__consolas_bold_27_usascii_w[i];
            font[i].y1 = stb__consolas_bold_27_usascii_y[i] + stb__consolas_bold_27_usascii_h[i];
            font[i].advance_int = (stb__consolas_bold_27_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_bold_27_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_bold_27_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_bold_27_usascii_s[i] + stb__consolas_bold_27_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_bold_27_usascii_t[i] + stb__consolas_bold_27_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_bold_27_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_bold_27_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_bold_27_usascii_x[i] + stb__consolas_bold_27_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_bold_27_usascii_y[i] + stb__consolas_bold_27_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_bold_27_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_bold_27_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_bold_27_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_bold_27_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_bold_27_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_bold_27_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_bold_27_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_bold_27_usascii_LINE_SPACING
#endif

