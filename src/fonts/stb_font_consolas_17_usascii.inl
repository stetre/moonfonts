// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_17_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_17_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_17_usascii_BITMAP_WIDTH         128
#define STB_FONT_consolas_17_usascii_BITMAP_HEIGHT         92
#define STB_FONT_consolas_17_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_17_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_17_usascii_NUM_CHARS             95

#define STB_FONT_consolas_17_usascii_LINE_SPACING          11

static unsigned int stb__consolas_17_usascii_pixels[]={
    0x20000072,0x20000000,0x19b9305c,0x2d400500,0x3f660095,0x882e884e,
    0x809729aa,0x205bf12f,0x983d405c,0x7fff93fd,0x7c1fffe2,0x64d7d40f,
    0x801e600e,0x3007e23e,0x98bf75bf,0x7f77e43f,0x22f80b97,0x3f880fb9,
    0x37e07f50,0x27f33109,0x53019af8,0x42640f98,0x402dfec9,0x2026c0f9,
    0xf117d45e,0x2f717dc7,0x7417c05c,0xbd03f503,0x3e807e60,0xaaa983f1,
    0x3cc1ec2a,0x0afb77ea,0x01f509b0,0x893a07e6,0x2f717a3f,0x2f83535c,
    0x71b604d8,0xd01ea01f,0xdd707e27,0x447ccfdd,0x3a0f8bcb,0x3f100995,
    0x07d40fa0,0x7c5f12ec,0xfcdcbdc3,0x360be3fe,0x4e83e604,0x27d01ea0,
    0x73dc01f8,0x07df376b,0x2e00f6dd,0x3dc1ae06,0xf8be26c8,0x25fcbdc2,
    0xb705f0fc,0x2f997c40,0x27d01aa0,0xb3dc01f8,0x0fdaef37,0xf005ddf7,
    0x5c17c405,0x3e25d80f,0x97e893e2,0x05f2f88d,0x53a059d3,0x3eb981fa,
    0x01f89f40,0x2b75d3dc,0xfd981f4c,0x201ea03e,0xe81fa85c,0x33f917c4,
    0x3e172fdd,0x1bee05f2,0xd707bb6c,0xf13e801b,0x27a7b803,0x20f17b4c,
    0x9d05fcf8,0xf881f300,0x87a0fcc4,0x97bbffd8,0x05f2f88b,0xf55e80d5,
    0x3a02e401,0x7b803f13,0x2be3727a,0x3eaf305a,0xd8007cc1,0xfa9bfc84,
    0x97b82005,0x05f0fa8b,0xf14f80b9,0x3a03d405,0x7b803f13,0x3b7beab6,
    0x3ead501e,0xf5002e41,0x213fff20,0xcbdc03f9,0x3e4ea89e,0x3e604c82,
    0x07a813a2,0x401f89f4,0xa8ccf67b,0x5f6d6441,0x000fc45f,0x303f80be,
    0xd57b809f,0x82f87dff,0xd91b204c,0x7d01ea01,0x4d9007e2,0x3fb6006a,
    0x006b83ef,0x2ff606b8,0x14c0044a,0x09b05f00,0x0bd10be6,0x13e803e6,
    0x13e2083f,0x1740087f,0xd10005b0,0x33fb2201,0x7c000000,0x7c41fc42,
    0x3e05f305,0x0fc4fa03,0x303bfbba,0xf80fb9bf,0x00000001,0xf0000000,
    0x203bfa25,0xb83dc06c,0x7fdd72ef,0x5457bbe2,0x0aa6201a,0x00000000,
    0x00000000,0x1100d45f,0x30980300,0x55543555,0x00000002,0x00000000,
    0x02a00000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x2a000000,0x8179501a,0x2e1a80a8,0x2332d44e,
    0x0b5001a9,0x2a355555,0x20025c05,0xdd33eda8,0x016c407d,0xd05403b1,
    0xd9307fdf,0x221fc45f,0x27d3d52f,0x3f3722f8,0x47b803fe,0x73efecfe,
    0x4005c80f,0x5512bbef,0x02fd409d,0x5bee03f1,0xc80f90fb,0x1f71b61f,
    0x45cadd32,0x003f25fc,0x9d07dcf7,0x017203dc,0x27400f98,0x2ea602a0,
    0x3ea2aacf,0x4035cf74,0x4e87ea4f,0x07ce6d72,0x105f11b2,0x2364f955,
    0x3511ee5d,0x90055572,0x5109d00d,0xfdd50355,0x7cc0dddd,0x3f803f9a,
    0x221f9a74,0xc82e8efe,0x77e42f85,0x447ee7fe,0x5f99ee3f,0x8bfbb772,
    0x999ed998,0xee984e80,0x007e204f,0x2603ffd8,0xbbdc0fda,0x5c82e406,
    0x45f717cc,0x3fbfe67b,0x45f8bdc5,0xfa9764fc,0x83ffffff,0x1027404e,
    0x3fea003f,0xbfc8390e,0x03eaf880,0x22e403e6,0xf717a0fb,0x5c04c66c,
    0x46c85f8f,0xd00d907b,0x2204e809,0x3e22a01f,0x42f8df9b,0x07fec05c,
    0x41bb57d0,0x44fb89ec,0x7db3dc3f,0x6efb8355,0x907a8b90,0xe809d00d,
    0x5c07e204,0x37ea7bef,0x2a01dc1f,0x3e3ae05f,0x3fff26ca,0x3dc3f83e,
    0x1ffdddf5,0x3213e7ee,0x06c83d45,0x027404e8,0x5efd40fe,0x001bf20f,
    0x9f980fd4,0x02e4f36a,0x7cfd12f4,0x57ba7c43,0x3d45c87f,0x04e806c8,
    0x2bb60274,0x9df88419,0x3740ffda,0x9f409f30,0x1726a8f9,0x3ba6bf20,
    0x3f887f17,0xb91fdcf7,0x20d907a8,0x219de998,0x019de998,0x540fffb3,
    0x0ee9dffe,0x17faa1fa,0x0ffec6b8,0xffb100b9,0x6f7ecf57,0xf91ee5fe,
    0x20f51725,0xffff906c,0x3fff21ff,0x00000fff,0x01a98000,0x800a6000,
    0x05554c00,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x30000000,0xee989dfb,0xfd982eee,0x7db7103e,0x019dfb50,0x3bf6e015,
    0x77fed40d,0x3bbbba63,0x05d03d11,0x261bffb7,0xed82dffd,0x441eeeee,
    0xf75bf31c,0x55557d4b,0x7dcefcc1,0x0d677d44,0x1baa6fea,0x59fb0df7,
    0x567d43b5,0x2aaa22ba,0xf05f11fb,0x5567f447,0xfb55732d,0xdaaaaa83,
    0x5eb7dc0f,0x807a97d4,0xf887dc6c,0x1ee36c03,0x01fb89f5,0x3e6002f4,
    0x47f05f11,0x3e2000fc,0x441fc404,0x4e81f9ef,0xc87f00f5,0xf700d92f,
    0x5e8036c1,0x4c006e80,0x7f05f11f,0x3e000fe2,0xbd037402,0x2abb01f5,
    0x1f882bcf,0x33a7fdd1,0xfe882cca,0x7f001edb,0x005df500,0x417c47e6,
    0x2003f33f,0x7dc05d99,0x7b8fda81,0x3b326d90,0x2a7e61ff,0xbfd4e8df,
    0xff10bf99,0x0be6007f,0x01fff4c0,0x417c47e6,0x3e61f53f,0x3ffe62ff,
    0x6c0fe203,0xbb01f70c,0xdf89be20,0x227cfe3f,0x277a62f9,0x10e444fc,
    0xfd98009f,0x7c47e604,0x41f53f82,0xbd502f99,0xfa801b60,0x1f204e81,
    0x9d2f83df,0x2e2ec7f0,0xdf1fee1f,0x403ee000,0x885f11f9,0x5f05f32f,
    0x3ee07dc0,0x7c439101,0xdb00fcc4,0xd87d45e8,0x89f17c46,0xb1fe21f9,
    0x1f50001f,0x44f83ee0,0x3e1ba1fa,0x7f11ee02,0x3f237e40,0x2625fa9b,
    0x7d42fc99,0x3e64fa8b,0x7ec6d98b,0x740fd98a,0x4ceffc46,0x2a666e1b,
    0x3aa6ea6e,0x75457e45,0x4cd6fcc5,0xf733312f,0xaaaafd87,0xf70bf70a,
    0xfffb89ff,0x9fff501d,0x81bfff50,0x21dfffd8,0xfd881fca,0xffd10dff,
    0x7fd419ff,0xfffc80df,0xfffd980d,0x5dfff91e,0xffffff88,0x4010022f,
    0x20020008,0x33601000,0x04c00800,0x00040020,0x00002201,0x00000000,
    0x00000000,0x00000000,0x00000000,0x3d885d30,0x706dc172,0x04c85dfb,
    0x4c12e1d5,0xde82ed45,0x45e88f40,0x3bbba2eb,0xb8991eee,0xddddd30d,
    0x3bbae7dd,0xbddd75ee,0x3f20fd85,0x9f10fe60,0x17e55fdc,0x5cdb01f7,
    0x3fa6d506,0xf87ff06f,0x7f41ff12,0x32aaaaa3,0x17ccbb1f,0x559f7551,
    0x2b3eea63,0x7fb75f92,0x82f9a7c4,0x103f20fd,0x20fe24e8,0xb5c1ae3f,
    0xdf06d8dc,0x7bf12f8f,0xd900f7a6,0x403f8aec,0x3217c02f,0x27ee3746,
    0x229f105e,0x745e803f,0x4f507d45,0x41b616e0,0x4cbe3faf,0x09b796af,
    0x3abb17c4,0x7c02f805,0x21b63642,0x3ee00ffe,0x3f8806c8,0xa8d907dc,
    0x21725f17,0x4d95f06d,0x3e7ef32f,0xb1b204d8,0x0be00d9b,0x2a6c85f0,
    0x405fa83f,0xd802fdf8,0x7f17c40f,0x32bf5798,0x15f06d84,0xcbd4be5f,
    0x3e209b6e,0x8017fec2,0x3217c02f,0xdd02efff,0x05fa803f,0x2bd01fc8,
    0x6c7cc0f9,0x6d84d8fc,0x97db25f0,0x1727f37a,0x7e6ec364,0x7c02f800,
    0x17d4f642,0x403747e4,0x00fe402f,0x3e21b2f7,0x83dbe8f9,0x3e65f06d,
    0x854d52f9,0xd83f885c,0x2f801dd5,0xc9b217c0,0x7ccfe60f,0xf9017c03,
    0x3faf9803,0x37aed9f0,0x45f06d83,0x20d72fdd,0xbb06c85c,0x05f017e2,
    0xf13642f8,0x03f23747,0x59f702f8,0xfdd01555,0x7ccffe01,0x5dd5532f,
    0xff317c15,0x23641ae5,0x54bb03f8,0x220be03f,0xd909bf99,0x883f77c8,
    0x6c0be06f,0x82ffffff,0x83fa06fb,0xffff72fe,0x3a17c3ff,0x1ae0d92f,
    0x2e2ec0f9,0xf905f01f,0x1b2dffff,0x000007f1,0x00000000,0x00000000,
    0x00000000,0x74174400,0x9ddddd32,0x53bbbba6,0x00cdeee8,0xec8b21d1,
    0x3aa02cee,0xc8dd3005,0x0002deee,0xdfd5005d,0x23d88005,0xf33f82f8,
    0x3ea55557,0x9f12aaab,0xf305fd75,0x955db174,0x03ff607f,0x5db1ffa0,
    0x03e8bfb7,0x2fea01fc,0x3a602fb9,0x17c47f12,0x501f99fc,0x90be201f,
    0x4cfdcc1f,0x6c8bb1af,0x403faf88,0x22ec7beb,0x813ea1fb,0x3227c03f,
    0x7c49f506,0x4fe0be23,0x01f501f9,0x27f10be2,0xfffffff9,0xa86c8bb7,
    0x4fc40db7,0x3e62ec7a,0x7c06fcc2,0xf50be203,0x2f83fb81,0x26666fe2,
    0x2a03f33f,0xf10999af,0x15b89f05,0xfb99ed8f,0x01f55d82,0x1763d536,
    0x1dd103f7,0x21fc03f8,0x407f21f9,0x7ffffc40,0xffff33ff,0x3fffea9f,
    0xbd05f14f,0xfd8f34c8,0x7c41dfff,0x1f707f12,0x733db1ea,0x237c40bf,
    0x55fe403f,0x05f91feb,0x9fc17c40,0x50999af9,0x10be201f,0x2736629f,
    0x4cbb09eb,0xe83ea0fd,0x8f517c45,0x203efffd,0x01fc0ee8,0x07de76dc,
    0x3e2005f9,0x03f33f82,0x17c403ea,0x7ffe4fea,0x8bb4ffff,0x333f62f9,
    0x33f20fec,0xdb3cfdcc,0x20bf3003,0x87b8003f,0x2f8803fb,0x203f33f8,
    0x45f100fa,0xc8fc0fd8,0x47ea2ec4,0xfccccdf8,0x373332a3,0x500bb3cf,
    0x001fc09f,0x2fcc0fe2,0x4fe0be20,0x35f501f9,0x26fe2133,0x91f82ffc,
    0xeb99ed87,0x17a03ea5,0x805d8f50,0x4cdfc02e,0x7e54c419,0x100f4405,
    0x3e67f05f,0xfffff501,0x33bffe2d,0x87b0f881,0x6c3efffd,0x5401f705,
    0x80002ec7,0x20ffffff,0x0002defb,0x00000000,0x00000000,0x00000000,
    0x00000000,0x300aaa88,0x554c0155,0x300aa980,0x10a61555,0x41a89445,
    0x28815519,0x1c806a15,0x31a80a88,0xaa98a203,0x7cc02aaa,0x7e42ffee,
    0x7f4c1fed,0x3bf625ee,0x777ec2fe,0x27a8b92e,0x25fef9fa,0x22feeddc,
    0xfeaeece9,0x7f105f01,0x20d92f88,0x3bbbaa7b,0x3a04405f,0x26c83ea6,
    0xec820df8,0x0fcc3f20,0xf53d45c8,0x7e43e63f,0xf4f99764,0x817c0f6d,
    0x4f73dc6d,0x1fa81720,0x13a7b800,0x803ee3f3,0xf997c43f,0x27a8b903,
    0x6c9741fa,0x3e1f33dc,0x7cccc9b2,0x87ea099b,0x9fc5e64e,0x007f304d,
    0xf9fbbae6,0x92feeeee,0x7c0fc40d,0xc873fee3,0x01f53d45,0x799ea2e4,
    0xff9a6cbe,0x7c4fffff,0x47c43f34,0xd107d5fa,0x26fe600b,0x2673e7c9,
    0x40f90999,0x443f82f8,0xa8b93feb,0x5c803ea7,0x97cf33d4,0x2fe6664d,
    0x6cbe4099,0xf8fbd9f8,0xb000ed82,0x01b67b8b,0x227c05f7,0x65b601f9,
    0x01f53ec6,0x799ea2e4,0x2f826cbe,0x20febe20,0x1fbd8fbe,0xdb000fdc,
    0x7d4ff911,0xbee8311c,0x22bee299,0x226665e9,0x915f35e9,0x9007d4ff,
    0xf9e67a8b,0x00be09b2,0xbdb01fdb,0xcf983fee,0x74c01999,0x7547acff,
    0x7ec45fff,0x7ffdc4ff,0x6ffffd44,0x9eb7ff20,0x517200fa,0x365f3ccf,
    0xfa801504,0x3e25f904,0x7ffffe47,0x04001007,0x22004000,0x00000401,
    0x00000000,0x00000000,0x00000000,0x06a20000,0x203b0351,0xcccb82e8,
    0x00440ccc,0xc8836eb9,0x00cccc44,0x00000000,0xf9000000,0xd0887e41,
    0x81fbb061,0x0ccccccc,0xb4b93ff6,0xbb103eed,0x007fffec,0x00000000,
    0xdd000000,0xdafa8be6,0x26da65e9,0x7d4fcc00,0x2edb4e9d,0x44442607,
    0x00000008,0x00000000,0x42767cc0,0x9741efc8,0x333321f8,0x4c930ccc,
    0x2ab90efe,0x00000007,0x00000000,0x1bee0000,0x4777bae2,0x7773646a,
    0x08017777,0x00001044,0x00000000,0x40000000,0xea540ffd,0xb88354a8,
    0x00000000,0x00000000,0x00000000,0x1ba7ee00,0x000001e8,0x00000000,
    0x00000000,0x98000000,0x2a09f13f,0x77777740,0x00001eee,0x00000000,
    0x00000000,0x17e20000,0x2aa005f7,0x0aaaaaaa,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_17_usascii_x[95]={ 0,3,2,0,0,0,0,3,2,2,1,0,1,2,
3,0,0,1,1,1,0,1,1,0,0,0,3,2,1,1,1,2,0,0,1,0,0,1,1,0,0,1,1,1,
1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,2,1,2,1,0,0,1,1,1,0,0,0,0,1,1,
1,1,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,1,3,1,0, };
static signed short stb__consolas_17_usascii_y[95]={ 12,0,0,1,-1,0,0,0,-1,-1,0,3,9,6,
9,0,1,1,1,1,1,1,1,1,1,1,3,3,2,5,2,0,0,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,0,-1,1,14,0,3,0,3,0,3,0,3,0,0,
0,0,0,3,3,3,3,3,3,3,1,3,3,3,3,3,3,-1,-2,-1,5, };
static unsigned short stb__consolas_17_usascii_w[95]={ 0,3,6,9,9,10,10,3,6,5,7,9,5,6,
3,9,9,8,8,8,9,8,8,9,9,9,3,5,7,8,8,6,10,10,8,9,9,7,7,9,9,7,7,8,
8,9,9,9,8,10,8,9,9,9,10,9,10,10,9,5,8,5,8,10,6,7,8,7,8,9,9,9,8,8,
7,8,8,9,8,9,8,8,8,7,9,8,9,10,9,9,8,7,3,8,9, };
static unsigned short stb__consolas_17_usascii_h[95]={ 0,13,5,11,15,13,13,5,17,17,8,9,6,3,
4,14,12,11,11,12,11,12,12,11,12,11,10,12,11,5,11,13,16,11,11,12,11,11,11,12,11,11,12,11,
11,11,11,12,11,14,11,12,11,12,11,11,11,11,11,17,14,17,6,2,4,10,13,10,13,10,12,13,12,12,
16,12,12,9,9,10,13,13,9,10,12,10,9,9,9,13,9,17,18,17,5, };
static unsigned short stb__consolas_17_usascii_s[95]={ 106,106,100,37,66,29,1,122,20,14,64,
82,122,114,122,76,20,53,23,103,67,11,30,82,39,104,124,49,114,81,86,
12,55,56,47,55,27,19,11,93,1,111,75,92,95,72,62,1,77,95,119,
65,101,83,32,43,1,12,112,41,86,35,72,72,107,1,119,19,49,9,86,
58,77,105,47,68,96,72,63,27,40,110,54,37,114,45,92,102,54,19,113,
27,1,5,90, };
static unsigned short stb__consolas_17_usascii_t[95]={ 15,1,81,59,1,20,20,59,1,1,81,
71,34,81,41,1,34,47,47,34,59,34,34,47,34,59,20,34,59,81,59,
20,1,59,59,34,59,59,59,34,59,47,34,47,59,47,47,34,59,1,47,
34,47,34,47,47,47,47,34,1,1,1,81,88,81,71,1,71,20,71,20,
20,20,20,1,20,20,71,71,71,20,1,71,71,20,71,71,71,81,20,71,
1,1,1,81, };
static unsigned short stb__consolas_17_usascii_a[95]={ 150,150,150,150,150,150,150,150,
150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,
150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,
150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,
150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,
150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,
150,150,150,150,150,150,150, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_17_usascii_BITMAP_HEIGHT or STB_FONT_consolas_17_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_17_usascii(stb_fontchar font[STB_FONT_consolas_17_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_17_usascii_BITMAP_HEIGHT][STB_FONT_consolas_17_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_17_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_17_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_17_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_17_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_17_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_17_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_17_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_17_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_17_usascii_s[i] + stb__consolas_17_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_17_usascii_t[i] + stb__consolas_17_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_17_usascii_x[i];
            font[i].y0 = stb__consolas_17_usascii_y[i];
            font[i].x1 = stb__consolas_17_usascii_x[i] + stb__consolas_17_usascii_w[i];
            font[i].y1 = stb__consolas_17_usascii_y[i] + stb__consolas_17_usascii_h[i];
            font[i].advance_int = (stb__consolas_17_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_17_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_17_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_17_usascii_s[i] + stb__consolas_17_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_17_usascii_t[i] + stb__consolas_17_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_17_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_17_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_17_usascii_x[i] + stb__consolas_17_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_17_usascii_y[i] + stb__consolas_17_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_17_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_17_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_17_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_17_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_17_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_17_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_17_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_17_usascii_LINE_SPACING
#endif

