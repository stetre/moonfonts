// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_26_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_26_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_26_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_26_usascii_BITMAP_HEIGHT         74
#define STB_FONT_courier_26_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_26_usascii_FIRST_CHAR            32
#define STB_FONT_courier_26_usascii_NUM_CHARS             95

#define STB_FONT_courier_26_usascii_LINE_SPACING          12

static unsigned int stb__courier_26_usascii_pixels[]={
    0x00401910,0x00000000,0x00015000,0x2ae60006,0x001a8800,0x00100351,
    0x30000098,0x00000001,0x0001a880,0x00006620,0x64400980,0x6403f103,
    0x2b81bd02,0xb8e41ecc,0xefb776c2,0x7068804e,0x00760ee7,0x02fcbeb8,
    0x09db9db1,0x40f6ef54,0x2201cbca,0xc82edcdc,0x42eeeeee,0xefec885f,
    0x3661bd54,0xbdfec89e,0x373ba600,0x8005fd53,0x102edef9,0x3b65bfdb,
    0x16f6f5c3,0xe883ffd8,0x5c033601,0x40761643,0x5a20591c,0x441dc007,
    0x5a81f10f,0x0f88b500,0x42e41744,0x903a20e9,0xb107a048,0xbf001c83,
    0xdb51df98,0x5ecc4399,0x01db51de,0x02c803d7,0x81b10f40,0xbeb89cf9,
    0x9836609f,0x02ffb80e,0x6f667640,0x88b23445,0x80e47606,0x0e800f68,
    0x7426c5c8,0x2c80e800,0xd879016c,0x70a64b82,0x64498003,0x2e8bd001,
    0x3f207f70,0x05a8b702,0x25400590,0x7407a344,0x03b81d87,0x85a80013,
    0x8b23445c,0x0ec3a068,0x5c00f688,0x3d41f884,0x41660254,0xd101a63a,
    0x9a203e21,0x44002448,0x4e800e46,0x03f881e6,0x887c40d9,0x0059000e,
    0xd50d80ec,0x41a23dc0,0xeeec8068,0x203a0eee,0x8b234418,0x00e9a068,
    0x0e801ed1,0xd05d06a8,0x6d41d401,0x4b200ae4,0x3971e069,0x89900079,
    0x2740111c,0x903c8077,0x0752c807,0xefeb9640,0x23700e83,0x3a1e203b,
    0x98804b81,0x361d9999,0x2c8d1001,0x27e661a2,0xb44099e9,0x3a0b5007,
    0x0970bb04,0x999d5164,0xa9dc00ec,0x15103a04,0xda981e4c,0x77f6e40d,
    0x12e3d81d,0x013207b0,0x01a8725b,0x754b7ab2,0x3e20f20e,0x43cc0973,
    0x207aa1ea,0x30ec02aa,0x4688017d,0xdb31622c,0x85ddfddf,0x07a00f68,
    0xd06b81fc,0x50e8b201,0xa5400749,0x4c07603b,0xfb100bdc,0x4c37501f,
    0x1f31ec4d,0x7e40fe20,0x23a1f300,0xc81ddcfb,0x74c9903f,0x079a66c0,
    0x7f7d41f2,0x03ff981f,0x3b6e20ec,0x9647d01c,0x34d103c8,0x2601ed10,
    0x2a05f105,0x4b207707,0x01d92a4a,0x6c0773b8,0x002f7261,0x22003d30,
    0x09b0f20f,0x27e40ff2,0x836ba4c8,0x2207c869,0x3af3ee0f,0x220f649b,
    0xaade887f,0x806fb85d,0x0faa201d,0xfe9653ea,0x81a2b100,0x03b00f68,
    0x07cc07e2,0xd12c8344,0x90059254,0x90e812a5,0x0005cc17,0x916c00d1,
    0xc9cfd885,0xb5903bcf,0xc89f939f,0x2641d80f,0x17730b60,0xabee88ea,
    0x81e879fd,0x400ff44b,0x3d0d001d,0xa9899164,0x82aebaeb,0x06980f68,
    0x03d40be2,0x6e459059,0x101a64cb,0x3c41661d,0x00593790,0x03c800e4,
    0x2e37b950,0x372a5903,0x9503b81c,0x016403c8,0x5ee540e4,0xf10688f0,
    0x1d8027c4,0xd1074033,0x971622c8,0x099db9db,0x05b01ed1,0x40d703f8,
    0x5c44b868,0x7901ec4c,0x106a8344,0x0b200487,0x20000f40,0x4005903b,
    0x6c87505a,0x3e200fc0,0x0931e000,0x000fa874,0x2d41ae3b,0x344591a2,
    0x440934a8,0x403440f6,0xd80bb04d,0xd10034c2,0x05b0b907,0x1906a079,
    0x8061f100,0x5c0000f9,0x44005903,0x7e41d80e,0x5b00d501,0x0742c400,
    0x4003124c,0x537bd71d,0x646883db,0xa9dc1a22,0x903da204,0x3e0d5005,
    0x0f434c01,0xfbbd9100,0x6983a607,0x6e491220,0x3d71ecc2,0x1ba62ea8,
    0x0b207700,0x3541b300,0xd7117664,0x001f4c03,0x9832a0ba,0x4760001e,
    0x203bd508,0x0d116468,0xd101dcae,0xf003441e,0x3b006a85,0x200985a8,
    0xdfa801dd,0x5e5401ed,0x76ff5c1c,0xeced983f,0x007fd42f,0x43377322,
    0x00ccdec9,0x41ddbd70,0xdfe9aff9,0x76ee41ef,0x6e66401d,0x3b76a03f,
    0x0ec0001d,0x916202c8,0x72c83445,0x707b4405,0x3a2e4007,0xd70b3003,
    0xd101df99,0x7b579ddf,0x01000660,0x33001988,0xaa8004c0,0x2aaa22aa,
    0x0098002a,0x19802a20,0x026aaa00,0x80000440,0x3c80b207,0x320b6164,
    0x7b440591,0x7c4001d0,0x1e800f30,0x2a00aa88,0x2cb9899b,0x00000000,
    0x00000000,0x00000000,0x00000000,0x05b80000,0x5c1ec072,0x8861e441,
    0xff6ffe80,0x2000e69f,0x9800572a,0x00000003,0x00000000,0x00000000,
    0x00000000,0x00000000,0x3f332e00,0x00000005,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x98000000,0x00000aaa,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x40000000,
    0x7541ded8,0x003900de,0xa88002a2,0x01000000,0x4cccccc0,0x000d4c00,
    0x4cc40153,0xa9819981,0x22013001,0x99999999,0xd90f2219,0x0fdddddd,
    0x300fba60,0x6c3dffd9,0x1fb2005e,0x05fddb00,0x4f5400d0,0xf00fcc40,
    0xdcee8805,0x33f6203e,0x4ed801de,0x2005fb50,0xeeeeeeeb,0xfecdec81,
    0xdced886b,0x77ec68ef,0x53bbb23e,0x83edcdeb,0xdbeddec8,0xdfdddd50,
    0x3f61fddd,0x0780723f,0x5d101dc0,0x80058808,0x00b20007,0x203b001e,
    0x300f404a,0x3a07b03d,0xb30074c3,0xcacf9895,0x40950002,0xd87e884d,
    0x1c87ea82,0x440f8ee0,0x7e41e42d,0x6c2c8750,0x0045ff70,0x03b80093,
    0x02c400ee,0x590003c0,0x59800f00,0xe80001d0,0x09507601,0x4a9e80ee,
    0xa8001640,0x3c409904,0xc87a80f6,0x3048ee01,0x0f88344b,0x06c2c875,
    0x01640013,0x01d80ee0,0x0f000b10,0xd8816400,0x2eeeeefe,0x009507a0,
    0x34c04a80,0x95068026,0x0059012a,0x403412a0,0x21201a20,0x400ee01c,
    0x2a281266,0x00361643,0xfb710680,0xdb10ee7b,0x01bddddf,0x0bbfb2b1,
    0x02f76c78,0x9f9980b2,0x26009999,0xeec80745,0xb003b01e,0x74434400,
    0x02c80950,0x09309500,0x90003a80,0x4401dc03,0x14c006c6,0x400070b2,
    0x52de8859,0xb33077bb,0x22033335,0x05d30bee,0x8033d71e,0x0007802c,
    0x98816a3d,0x001d02c9,0x20b60039,0x59012a3c,0x2e12a000,0x0015c002,
    0x00ee01c8,0xabd983d5,0x000b2000,0x03d82b80,0x00ec07f7,0x05982f88,
    0xc80075cf,0x30007802,0x164007ab,0x00570078,0x4a8d1099,0xa8001640,
    0x64002c84,0x40390002,0x019d503b,0x402775c4,0x00f2202c,0x881e2074,
    0x4007603f,0xcbc1e058,0x40164005,0x16fa0007,0x01d02c80,0x04c80390,
    0x6404a85b,0x84a81202,0xeeeec82b,0x32000575,0x1640ee01,0x90075c00,
    0x01ffec05,0xb012a162,0x8800ec07,0x7efc1e05,0x40164000,0x07e60007,
    0x03b02c80,0x304d80b0,0x2c80950b,0x42540d10,0xf999884a,0x32000950,
    0x0dc0ae01,0x3202b800,0x00bfee02,0xc8077077,0x44007603,0x557c1e05,
    0x00b2000e,0x0598001e,0x04a81640,0x409b034c,0xfeeeeeec,0x3440b205,
    0x00d10570,0xa800344f,0x20007604,0x59025404,0x0d800980,0x01fc0698,
    0x8162003b,0x00754f07,0x006802c8,0x59000760,0x03b00f40,0x25400136,
    0x03440b20,0x1e01ec0b,0x440d8097,0x0001f107,0x900ec07f,0x0d100005,
    0x03fa80fc,0x02c40076,0x00b51e0f,0x20ae00b2,0x00166039,0x82e980b2,
    0x003e882d,0x059012a0,0x80ee06ec,0xb0f103e8,0x903e881b,0xb81f4419,
    0x41ff80ef,0x016405b8,0xd301d400,0x203ceb85,0x40b1001d,0x00b70f07,
    0x9db10059,0x66445ddb,0x2000cdec,0x676c402c,0x405d03ed,0x6404a805,
    0x6e6fd402,0x99bf9003,0x37ee05dd,0x7e401eec,0x3f203fdd,0xdfe8d82f,
    0xffb80dfd,0x0001ffff,0xdfe98039,0x51ffb8ef,0xdfffffff,0x5c3fff90,
    0x8ff93fff,0x3f66fff8,0x3fffffff,0xaa806a20,0x7ec02aaa,0x3fffffff,
    0x7c401510,0x7fffffff,0x99bfff20,0xffffffff,0x20003300,0x530009a8,
    0x00998001,0x998801a8,0x00000000,0x0002a200,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x01333331,0x31013330,0x88099833,0x404cc419,0x4cccc198,
    0x4ccc4009,0x4cc0cc40,0x40998809,0x09999998,0x04cc0cc4,0x80333331,
    0x99999998,0x26662099,0x40999999,0x40099998,0x19999999,0x04ccccc4,
    0x4cc02620,0x88026609,0x13333009,0x3fb60000,0x901ceeee,0xee88bddd,
    0x8bdf92ef,0x3f23efe8,0x9fff445e,0x06eefeea,0x98777f6c,0x3bea3ffe,
    0x3fba60ee,0xdfddd30e,0x3fa61ddd,0x43bfb23e,0xceeeefed,0x777f7441,
    0x365eeeee,0xeeeeeefe,0x3bbfa23e,0x7c40ceee,0x47eeeeee,0xdeeeefed,
    0x437f540a,0xfd54eeec,0x20f7ec09,0x006feeeb,0x98688162,0xd00b303d,
    0x03a20d30,0x8074416a,0x41a2001d,0x802b80ea,0x880b201c,0x21a21e06,
    0x204a83d9,0x77034458,0x0eb881d0,0x442d4162,0xd904c886,0xd930ee09,
    0x803bb301,0xb1001dab,0x40d03440,0x6412a00e,0x0f202d83,0x001d80b6,
    0xa816e1a2,0x80360443,0x781a202c,0x50d10688,0x1a22c409,0x500e83b8,
    0x07442c4b,0x901d0344,0x987701d5,0x1dac83bc,0x10254740,0x344112c4,
    0x80ee0590,0x5a83a01d,0x01321e80,0x2344003b,0xf124c04c,0x0164068b,
    0x3443c0d1,0x204a8590,0x33034438,0x88ec01d0,0x0d102d85,0x2d564164,
    0x235261dc,0x2cc03b68,0x75e7e40d,0x81a22edb,0x220d100e,0x0e8b4c06,
    0x06a8e880,0x9a2001d8,0x2a59804d,0x5901a0ec,0x10f03440,0x12a0ec0d,
    0x0646880b,0x24a803a0,0x0d1025c0,0x6cb203a2,0x65261dc2,0x900ecee2,
    0x3aa01645,0x986881cf,0x5c0e403e,0x02cbc803,0x2003baa0,0x23a2001d,
    0x64d1006e,0xc80d12ca,0x2667a202,0x06887999,0x333b50d5,0x999e880f,
    0x1007400e,0xd101a60b,0x05d95333,0x0ee344b2,0xb0e9a293,0x01663403,
    0x3e2099d1,0x800dfeee,0xd000e859,0x009d000b,0xee880076,0x27801eca,
    0x80b34a8e,0x333e202c,0xe887cccc,0x80edbaaa,0x407cccea,0x00fcccf8,
    0x20b10074,0x667c401e,0x5902fedc,0x498771e4,0x01d92a76,0x6c01d095,
    0x33d105b2,0x3a001d93,0x2c801660,0x016de400,0x440880ec,0xd003aa1f,
    0x809369a2,0x781a202c,0x2bcccf88,0x880f12a0,0x03a00746,0x803c8598,
    0x32132068,0x4c3b8742,0x1d877664,0xb55559b0,0x86892a07,0x800ea868,
    0xc800b23b,0x7456a002,0x3b80ec00,0x202d4344,0x2a363b8d,0xd1016403,
    0x003443c0,0x6880312a,0x803a060c,0x1542d43b,0xc81d01a2,0x4c3bad42,
    0x20762f44,0xcccccce8,0x1a202006,0x8b44025c,0x80164006,0x803a60e8,
    0x6887701d,0x6ce403b0,0x900aeee1,0x0f034405,0x04a800d1,0x21a03440,
    0xe887600e,0x03443b80,0x3b0590b2,0xd8049877,0x07603b81,0x36068800,
    0x04a9d802,0x1e801640,0x407605b8,0x5983443b,0x9b31aae0,0x2202c803,
    0x01a21e06,0x68800950,0xc80743c0,0x43b816c4,0x32074068,0x4c3be982,
    0x0e81d804,0x880012a0,0x2a01a206,0x164000ec,0x07b01ec0,0x221dc076,
    0x6d403a06,0x6400de85,0x8781a202,0x02540068,0xd0f01a20,0x25c5c981,
    0x10688770,0x3205909b,0x6c024c3e,0x03402cc1,0x0ffffe80,0x37c02fc8,
    0xfffffb80,0x46fff81f,0xff55fff9,0xffffffff,0x07ffff47,0x5f303fee,
    0xfff30f90,0x321fffff,0x3ff23fff,0xfffffd3f,0x3fffe207,0x3ffa01ff,
    0x7fffffff,0x3fffffe2,0xffffc82d,0x3fa3ffff,0x3dffffff,0x443fffe8,
    0x1bffee3f,0x7e4ffffa,0xfffe85ff,0x00000002,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00c00000,
    0x00000800,0x00000003,0x00000000,0x76c40000,0x25eea81d,0x376c45ec,
    0xddb10000,0x2f77543b,0xeda93b66,0xa877b623,0x3bba25ee,0x5006eeee,
    0x36004055,0x507dd15e,0x1ec87bfd,0x00164000,0xd9509d30,0xd98017df,
    0x7028beff,0xa803bdfd,0x2e01dffd,0x2639befd,0x05bfd75d,0x2620276a,
    0x261a621f,0x6cdf5c69,0x303bf92e,0xbd988379,0x6c6d4c41,0x3ea1d89d,
    0x887ae20a,0x4d99999e,0xff987fee,0xfe80f604,0x1d313fe5,0x037a602a,
    0x40016400,0xac881ed8,0x6dc0d510,0xd117f261,0x40fae25b,0x3fc88bed,
    0xfb511cb8,0x9866f4c4,0x2088d02e,0x1a068858,0xbd11bf71,0x834c1669,
    0x17744068,0x1d3074c0,0x545b8588,0x03fee0ff,0xfd816e5c,0x0590ffa4,
    0x00067540,0xec8800b2,0x30590002,0x0f62e40d,0x816e07c4,0x3441a21e,
    0x41a60fe2,0x84a97a0d,0x1aa1a068,0x3b00e8b9,0x1f880770,0x3a63a600,
    0x981d5000,0xa81fec7f,0x7f901d15,0x012e0fec,0xc800fae0,0x007d7002,
    0x03d83a80,0x5c0698a2,0x8d700fc4,0x0688103e,0xed99641e,0x40d10590,
    0x215c4a86,0x1d0b500d,0x98005880,0x1d3000ee,0x3fc4df10,0x21a60e88,
    0x103f22fa,0x3b22000d,0x5402c802,0x366000ce,0xf83eeffe,0x333ae000,
    0x26cccccc,0x223c4069,0x880acefd,0xca541a06,0xd101b2ca,0x2e254340,
    0x41d006c2,0x0058805a,0x8801eea8,0xfa97e00e,0x8b703d03,0x221ee1f9,
    0x3ea0003e,0x3ffffe64,0x3ee7ffff,0x0df54002,0x800f0771,0xaaaaaadb,
    0x201662aa,0x7d95100f,0x441a0688,0x883566d5,0x712a1a06,0x92e00d85,
    0x0058801d,0x00f4c754,0x24e803d1,0x5c05306c,0x3a60c0c0,0x803d10ea,
    0x2c802ec8,0x800674c0,0x5d07500e,0x2003cc00,0x09aa00f8,0x06883e20,
    0x3a59e81a,0x3cc1a059,0x1b0ae254,0x200d1680,0x83aa0058,0x705d01e8,
    0x00110d41,0x31d80000,0x5d700eeb,0xa8016400,0x902cc03e,0x0980b707,
    0x07b000fa,0x640591ec,0x20681a21,0x80fae2ed,0x543f542c,0x003615c4,
    0x22005979,0x220b7005,0x1c81ec1e,0x00000000,0x403ab634,0x2c8003ea,
    0xd0175c00,0xd03ee881,0x445d8839,0x22dc40be,0x1b260be8,0x88d501d9,
    0x47b81a06,0x37a201f9,0x21fe8dfd,0x03615c4a,0xfd00df10,0x85ffffff,
    0x3ee1fffd,0xffff53ff,0x0003ffff,0x0e800000,0x33a613e2,0x00590000,
    0xd505d910,0xff55dd9b,0xdcefc883,0x9bfb102d,0xfb1019fd,0x97909fdb,
    0x643dfb9b,0x3fe22fff,0x9800001f,0x737fe401,0x0017ec9f,0x00000000,
    0x00000000,0xf992e000,0x0000eec4,0xd98000b2,0x80015105,0x26200198,
    0x13310009,0x00066600,0x00000000,0x00000000,0x00000000,0x00000000,
    0x9edec880,0x000011fd,0x00400002,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00018800,0x00000000,0xbbbbbbb7,
    0x00885bbb,0x10361e44,0x11111111,0x66666641,0x2ccccccc,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x33333331,
    0x77641333,0x3ffc8c43,0xfffe87a6,0x264fffff,0x99999999,0x00009999,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x3d34d932,0x5d107fee,0x26666662,0x00000099,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x30000000,0x55555555,0x3ae06155,
    0x28804c2e,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xa8000000,0xcccccccc,0x000001cc,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_26_usascii_x[95]={ 0,5,2,2,2,2,2,5,6,3,0,1,3,2,
5,2,2,2,1,2,2,2,3,2,2,3,5,3,0,1,0,0,2,0,0,1,1,0,1,1,1,2,1,0,
1,0,0,0,2,1,0,2,1,0,0,0,0,1,2,0,0,0,2,0,4,1,0,1,1,1,2,1,0,2,
2,2,2,0,1,1,0,1,1,2,1,1,0,0,1,1,2,0,6,0,2, };
static signed short stb__courier_26_usascii_y[95]={ 19,4,5,3,3,4,6,4,4,4,4,6,15,11,
16,3,4,4,4,4,4,4,4,4,4,4,9,9,6,10,6,5,4,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,3,4,4,24,4,8,4,8,4,8,4,8,4,4,
4,4,4,8,8,8,8,8,9,8,5,9,9,9,9,9,9,4,4,4,10, };
static unsigned short stb__courier_26_usascii_w[95]={ 0,4,9,10,10,10,10,4,5,5,9,12,6,10,
4,10,10,10,11,10,10,10,9,10,10,9,4,6,12,12,12,9,10,14,13,12,12,13,12,12,12,10,13,14,
12,14,13,12,11,12,14,10,12,13,14,14,13,12,10,4,9,4,10,15,5,12,13,12,13,12,11,12,13,10,
8,12,10,14,12,12,13,13,12,10,12,12,14,14,12,13,10,5,2,5,10, };
static unsigned short stb__courier_26_usascii_h[95]={ 0,16,7,18,19,16,14,8,18,18,10,13,8,3,
4,18,16,15,15,16,15,16,16,16,16,16,11,13,13,5,13,15,17,14,14,15,14,14,14,15,14,14,15,14,
14,14,14,15,14,17,14,15,14,15,14,14,14,14,14,18,18,18,7,2,4,12,16,12,16,12,15,16,15,15,
20,15,15,11,11,12,16,16,10,12,15,11,10,11,10,15,10,18,18,18,5, };
static unsigned short stb__courier_26_usascii_s[95]={ 249,158,245,36,10,125,1,222,68,74,246,
25,227,86,75,57,114,150,127,136,139,147,191,1,238,215,249,249,38,51,12,
215,90,231,188,188,164,150,137,175,112,101,161,71,58,216,202,114,125,101,1,
225,236,201,16,86,44,31,177,52,80,47,234,97,80,51,201,64,12,77,26,
225,38,103,1,52,65,155,114,90,177,163,185,103,76,142,170,127,198,89,211,
30,27,21,64, };
static unsigned short stb__courier_26_usascii_t[95]={ 15,1,54,1,1,1,54,54,1,1,39,
54,54,67,67,1,1,22,22,1,22,1,1,22,1,1,22,1,54,67,54,
22,1,39,39,22,39,39,39,22,39,39,22,39,39,39,39,22,39,1,39,
22,22,22,39,39,39,39,39,1,1,1,54,67,67,54,1,54,22,54,22,
1,22,22,1,22,22,54,54,54,1,1,54,54,22,54,54,54,54,22,54,
1,1,1,67, };
static unsigned short stb__courier_26_usascii_a[95]={ 220,220,220,220,220,220,220,220,
220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,
220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,
220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,
220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,
220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,
220,220,220,220,220,220,220, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_26_usascii_BITMAP_HEIGHT or STB_FONT_courier_26_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_26_usascii(stb_fontchar font[STB_FONT_courier_26_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_26_usascii_BITMAP_HEIGHT][STB_FONT_courier_26_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_26_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_26_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_26_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_26_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_26_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_26_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_26_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_26_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_26_usascii_s[i] + stb__courier_26_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_26_usascii_t[i] + stb__courier_26_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_26_usascii_x[i];
            font[i].y0 = stb__courier_26_usascii_y[i];
            font[i].x1 = stb__courier_26_usascii_x[i] + stb__courier_26_usascii_w[i];
            font[i].y1 = stb__courier_26_usascii_y[i] + stb__courier_26_usascii_h[i];
            font[i].advance_int = (stb__courier_26_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_26_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_26_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_26_usascii_s[i] + stb__courier_26_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_26_usascii_t[i] + stb__courier_26_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_26_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_26_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_26_usascii_x[i] + stb__courier_26_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_26_usascii_y[i] + stb__courier_26_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_26_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_26_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_26_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_26_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_26_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_26_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_26_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_26_usascii_LINE_SPACING
#endif

