// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_bold_25_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_bold_25_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_bold_25_usascii_BITMAP_WIDTH         256
#define STB_FONT_arial_bold_25_usascii_BITMAP_HEIGHT         90
#define STB_FONT_arial_bold_25_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_bold_25_usascii_FIRST_CHAR            32
#define STB_FONT_arial_bold_25_usascii_NUM_CHARS             95

#define STB_FONT_arial_bold_25_usascii_LINE_SPACING          16

static unsigned int stb__arial_bold_25_usascii_pixels[]={
    0x00cc4026,0x19880266,0x00001310,0x0004cc00,0x000a6000,0x400004c4,
    0x98800098,0x00002660,0x20060000,0x00cc0019,0x00003300,0x3ff00000,
    0x205dff70,0xfff902ff,0xf707fb01,0x3ffff29f,0x7ff5c406,0x201bdfff,
    0x407ffffa,0x3b22007d,0x002effff,0x3ffffb62,0x27ff002e,0xfb702ff8,
    0x7ff705df,0x3efeb800,0x2e00df50,0x001cffff,0xfeb81fe6,0x3fae00be,
    0x4ffa81df,0xffb85fc8,0x82ff80ff,0x4c0ffffb,0x4ffb80ff,0x40dffff9,
    0xeeeffffb,0xf503ffff,0x3aa0ffff,0x2a00cfff,0xffffffff,0x7fd400df,
    0xdfffffff,0x547fe200,0xfffc80ff,0x7fdc4fff,0x2ffee003,0x02fe83ff,
    0xffffff98,0x0df7000f,0xffffffd1,0xfffffb01,0x84ffa87f,0x6d4c1ff9,
    0x82ff82ff,0xfe82cffd,0x267dd505,0xd886ffba,0xf7101cff,0x5bff509f,
    0xfffffb05,0x3ffe60df,0xfffecbdf,0x3fffe605,0x5fffecbd,0x7dc3fea0,
    0xccfffa87,0x3fee0fff,0x653fa003,0x8037d46f,0x7ff32ffd,0x3613f600,
    0x4ffdcfff,0x7f67ffdc,0x0fbaa0ff,0xffa82ff4,0xfe82ff83,0x005ff507,
    0x3f61bfe0,0x9fb1001e,0xf103ffa8,0x7ffdfbbf,0x701dffd0,0xfd105fff,
    0xfff701df,0xfd9bf205,0x322ffd85,0x0ffee3ff,0xff73ff80,0xfd002fe8,
    0x802ffc3f,0x77fcc2ff,0xff83ffa0,0x013ff61f,0xf303ff70,0xd05ff09f,
    0x81ff60df,0x6ff82cc9,0xb73077dc,0xf159915b,0x81ffd43f,0xe8fc8ffb,
    0x07ffdc3e,0xf50dffb0,0x7fec01ff,0x3fffff66,0x20ffffff,0x27fdc3a9,
    0xbb717ff7,0x2e7ff019,0x801bea7f,0x7ff95ffc,0xc81ff300,0x220443ff,
    0x3ffd47ff,0x3e605993,0x84ff983f,0x06ff82ff,0x7fdc09ff,0x3e26ff84,
    0x3fffee1f,0x7f53ffdf,0xfd81ffd4,0x7e407c8f,0x7ffcc05f,0x202ffe40,
    0xffb0fff9,0xffffffff,0xffe8801f,0x3fb7fee2,0x7f41efff,0x17f4df94,
    0xfdfff100,0xdf7001df,0x3315ffb0,0x88bff301,0x9ff50fff,0x2217fe20,
    0x82ff85ff,0x3ff885ff,0x3e13fee0,0xfb93ee6f,0xfffeaadf,0x7fd4bf11,
    0xfbbff503,0x803ffd80,0x7fec1fff,0x51fff803,0xf957ff75,0x7ec0157f,
    0x7ffdc3ff,0x46fffddf,0x53ffdffa,0xff9000df,0x7ec00bff,0xffbffe84,
    0x3ffc43ff,0x7d47ffe6,0x41bfe04f,0x42ff86ff,0xffa84ff9,0x213fee02,
    0x44bfa6ff,0x7ffd46ff,0x3ffa9fa0,0x0bffffe0,0xe802fff8,0x17ff42ff,
    0x2a17ff40,0x401fee7f,0xffb85fff,0x0bffe22f,0x7f45bfb5,0x7ffd4002,
    0x3fe001ff,0xffffff82,0x7ff43fff,0x54bfff62,0x1ffa04ff,0xff0e7fe4,
    0x0bffa625,0xfb807fee,0x3e6ff84f,0x883ff91f,0xa87f46ff,0x3faa03ff,
    0xff83ffff,0x2ffe802f,0x74017ffc,0xb37e43ff,0xfb9100bf,0x3ffdc5ff,
    0x40827fec,0x0b6e26fa,0x7ff7ffe4,0x880ac88e,0xffff80ff,0x541fff52,
    0xffffefff,0x409ff52f,0xfe881ffd,0x7d4bfe7f,0x3ffb04ff,0x7c27fdc0,
    0x7fcff16f,0x224ff886,0x00ffea7f,0x0ffffff2,0xff007ffd,0x03ffe83f,
    0xd551fff8,0x5bff55df,0xdff30015,0x7dc27fdc,0x25fd005f,0x20effffa,
    0xff89fffa,0xa83ffcdf,0x8bffd06f,0x7fdc2ffd,0x51ffedff,0x7fe409ff,
    0x7cfff901,0x03fff52f,0xfb803ff6,0xf36ff84f,0x2a17fe2b,0xa97ea3ff,
    0xdf9003ff,0x4ffc8dff,0x1fff3044,0x4c05ffc8,0xfffb0fff,0xffffffff,
    0x47ffa001,0xffa84ffb,0x3a6fa805,0x323ff8cf,0x3ffe63ff,0x4fc80fff,
    0xfb87ffd0,0xf2ca884f,0x13fea1ff,0xfb80ffd8,0x4cbfe4ff,0xfc80fffd,
    0x13fee01f,0x8b7c5bfe,0x1ffd85ff,0x7fd45fd1,0x3f2f9003,0x83ffee1f,
    0x6ffd8cfc,0x201fffb8,0x3ff66ffd,0xffffffff,0x3a12aa0f,0x0dff72ff,
    0xfd009ff9,0x7ecbfe25,0xf707ffe5,0x3fa0bfff,0xb89ffb02,0xff8803ff,
    0xd813fea7,0x81fff07f,0x1ffdc2ff,0xf700ffdc,0x74dff09f,0xf88fff0f,
    0xf51bf67f,0x2999107f,0xe85ff57c,0xfff90eff,0x3fa05fff,0xfffc81ef,
    0xff73fd42,0xf10fffc0,0x3ffee3ff,0x201fffc0,0x47fe26fa,0x0fff26fc,
    0x2213fffa,0xfff500ff,0x3b22ffd8,0xa93fee1f,0x17fe04ff,0x3fe17fe2,
    0x4c2ffc42,0x3fee02ff,0x3f26ff84,0xd317ffb2,0x1dfb5fff,0xfb03ffa8,
    0x1feef93f,0x2f3fffe6,0x205ffffd,0xccdffff9,0xfc85fffe,0xfc817f66,
    0x6ffebbef,0x2b3fffee,0x7400fffe,0x6cbfe22f,0x33ffe65f,0xfffffeba,
    0xd01fea0d,0xfff95dff,0x6577fd41,0x3fea0fff,0x309ff104,0x05ff09ff,
    0x9ff10dff,0x7c27fdc0,0x7cd3ea6f,0xffffffff,0xffa80eff,0xfdfff503,
    0x3ea09ff7,0xffffffff,0x3fea03ff,0xdfffffff,0x3fa4fe80,0x7ffff403,
    0x3fee0fff,0x2ffffffd,0x7f437d40,0x7ec3ff9d,0xdfffffff,0x17f23fff,
    0xffffff50,0xffffd05f,0x4ffa87ff,0xf303ff50,0xf05ff09f,0x81bfa0df,
    0x6ff84ffb,0xdea8bfe2,0x4459dd72,0x407ff509,0xfffffffe,0x3ffb2201,
    0x6fffddff,0x3fffb220,0x4ffe02ef,0x64402ff8,0x5c0dffff,0xfffeaaff,
    0x982fe802,0xf705fffe,0x2a1bffff,0x401ff44f,0x01efffe9,0x05dfff93,
    0x3f209ff5,0xf07ff306,0x20dfd05f,0xff700ffb,0xfc8dff07,0xffb8003f,
    0xa807ff51,0x000dfffe,0x0ffea04c,0x33000980,0x26000cc1,0x00088001,
    0x0ba80991,0x01009880,0x09800133,0x00002600,0x3ff205fd,0xfe82ff83,
    0x885ff00f,0xff83ffe9,0x00cffd86,0x2a3ffe88,0x0fb003ff,0x000a0000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x7fdc37cc,0x82ff81ff,
    0x5c0ffffc,0x7fffe45f,0x0dffff92,0x337bfff2,0xfffedcaa,0x3ffffd42,
    0x00001f20,0x00000000,0x00000000,0x00000000,0x00000000,0x07fb0000,
    0x3e0bfff7,0xffff882f,0x3fa0ff80,0x3fff25ff,0x3ff6606f,0xffffffff,
    0xffffa80c,0x0000c407,0x00000000,0x00000000,0x00000000,0x00000000,
    0xbd100000,0xe80b32a0,0x1b97101e,0x665c7d70,0x1e666542,0xccccba80,
    0x6664c02a,0x0000004c,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000988,0x988000cc,0x00000000,
    0x44000000,0x04c40009,0x36e27326,0x3b2600bd,0x2019953d,0xc8800002,
    0x019953dd,0x00000000,0x2e000000,0x200ceffe,0xcfffffe9,0x93ff2000,
    0xfb9002fe,0x5019ffff,0x7ff40dff,0x2effd982,0x03ffd000,0x9fffffb1,
    0x7ffec401,0x3faffee7,0xfa81efff,0xffddffff,0x7d437541,0x7fd4004f,
    0x1ffcdfff,0x3ffffffa,0x7ec6ffff,0xfff100ff,0x413ffe29,0xff50fffc,
    0xfc97fee9,0x80efffff,0xfffffffb,0xff9000ff,0x6c027e49,0xffffffff,
    0x037fd41f,0xffa85ffd,0x8004ffff,0x7fd41ffe,0x1fffffff,0x4dffffb0,
    0xfdeffffb,0x7ffc46ff,0x1ffffecf,0x3ea1bfe6,0x3fe2004f,0xffffedff,
    0x3fffffa1,0x446fffff,0xff904fff,0x0fffdc1f,0xfa8bffe6,0x22bff74f,
    0xffebcfff,0x677ffc44,0x006fffdb,0x37d49ff9,0x9bfffb10,0x41ffffd9,
    0x3fa06ffa,0x66fff42f,0x74000fff,0x3ffe61ff,0x6fffeccf,0x4117ffd0,
    0x3e63fffb,0x17ff22ff,0x7cc3fff9,0x04ffa86f,0xb83bff20,0x332e1fff,
    0xfffdcccc,0x41fffb86,0xfe82fff9,0x22fff46f,0xbff74ffa,0xff98ffee,
    0x5c2ffd46,0xfc800fff,0x403fe24f,0xfb81effd,0x1bfea3ff,0x3ea2ffe8,
    0x013fee5f,0x7ec3ffd0,0x7ffcc0df,0xb80fff83,0x4ffd87ff,0xff30fffa,
    0x3fff6a3f,0x013fea4c,0x7c44ffd8,0xfe8801ff,0xdffd00ff,0xf305ffe8,
    0x3ffee7ff,0xfba7fd40,0x445ff95f,0x2ffdc5ff,0xc800ccc8,0x417f44ff,
    0x3601fff8,0x1bfea2ce,0x3f62ffe8,0x41ffe22f,0xffd3dec9,0x403ffea3,
    0x3f2e3dfc,0x3ee1ccff,0x25ffb85f,0xfff81fff,0xffffff91,0xedba7fd4,
    0x82fff81c,0xfd801ffe,0x3fe601ff,0x01fff52f,0x7fcfffe4,0x74ffa83f,
    0x97fe6bff,0x7fd43ffb,0x20000aef,0x27e44ffc,0x8002ffd4,0x3fa06ffa,
    0xf07ff62f,0xfffb81ff,0x71ffedff,0xfb000bff,0x5c5fffff,0x5ffa85ff,
    0x3fa07ffe,0xdfffd71f,0x7eeffd4b,0x7fc1ffff,0x01ffe81f,0x401fffe4,
    0xfff8fffb,0xffffe803,0x29ff506f,0x3fee5ffb,0xfb05ffff,0x017dffff,
    0x544ffc80,0x04ffc86f,0x40dff500,0x3ffa2ffe,0xf107ff41,0xfffd9fff,
    0x00fff63f,0x3bfffb20,0x21ffee1e,0x3ff64ffc,0x30fffcc3,0xfff50dff,
    0x8dfff9bf,0x7fc43ffe,0x3ffea01f,0x3fffa004,0xff3006ff,0x3ea03fff,
    0xd8bff74f,0x100fffff,0xfffffffb,0x27fe400b,0xffd03fe2,0x99999707,
    0xd037fd49,0x07ffc5ff,0xffc87ffa,0x47fff20e,0x20003ffe,0xfff707ff,
    0x2a3ffe83,0x7ffe45ff,0x2a1bfe61,0x3fe62fff,0x2a2ffe47,0xff301fff,
    0xff9800df,0x36001fff,0x3ea04fff,0x6cbff74f,0x1fffefff,0x3ffff2a0,
    0xff9005ff,0xfe85ff09,0xffffe83f,0x81bfea7f,0x3ffe2ffe,0xfd0fff40,
    0x1fff987f,0x40007ffd,0xfff707ff,0x1fffb57f,0x767fffc4,0x3e61ffff,
    0x86ffa86f,0x3fe60fff,0xffffc9df,0x0fffe881,0x4fffc800,0x3fffe200,
    0x5d3fea06,0x49ff95ff,0x73006ff9,0x9005fffd,0x89fb09ff,0xffe84ffc,
    0x3fea7fff,0xf8bffa06,0x0fff41ff,0xfff01fff,0x0013ff63,0xff707ff8,
    0x7ffffffd,0xbfffff70,0x7fcc3ffd,0xf85ffa86,0x7ffe40ff,0x81ffffff,
    0x0001fffe,0x4001fff1,0x04fffffd,0x3fee9ff5,0xfe81ffd5,0xd80ea61f,
    0x3204c4ff,0x46fb84ff,0x99886ffa,0x3fe67ffa,0xe8bffe06,0x07ffc1ff,
    0xffd01fff,0x9817ff23,0x07ff80ad,0xfff39ff7,0x77ed405f,0x7cc1ffd3,
    0x84ffa86f,0xffb80ffe,0x41ffe9ef,0x0002fffc,0xa801ffe2,0x1fffefff,
    0xff74ffa8,0xfb03ffeb,0x81fffc5f,0x9ff75ffb,0xf983ffd8,0x017ffc47,
    0x7fc4fff3,0x43fff00f,0x3fe22ffd,0x2217ff47,0xfff51fff,0x21bffa01,
    0x9ff707ff,0x40110044,0x37fcc7fe,0x7f427fd4,0xfe82600f,0x13ffee1f,
    0x0fff1000,0x757ffe20,0x4ffa86ff,0x3ffabff7,0xfb0fffc2,0x7fff01df,
    0xfff1bfea,0xfb07fe05,0xffb103ff,0x42fffc4f,0x3ee0fffc,0xb17fea5f,
    0xfffa89ff,0x7037ffa1,0xfff05fff,0x8013fee0,0x7fcc5ffb,0x1d7ffc47,
    0xffd09ff5,0x8fff4001,0x0005fff9,0xb007ff88,0x3fe61fff,0xba7fd44f,
    0x7fff95ff,0xf98dffb5,0xffdbdfff,0xffff11ff,0x201fffd9,0xfffd83fd,
    0xffffdccd,0x67fffe47,0x444fffec,0xffeabfff,0x4f7ffcc1,0x261ffffc,
    0xfeccffff,0x0fff06ff,0x88013fee,0xffedefff,0x7ffff83f,0x3fa13fea,
    0x3ffa000f,0x99bfffb1,0x01999999,0xa807ff88,0x7fe43fff,0x5d3fea1f,
    0x3fffa5ff,0xfb81ffff,0xffffffff,0x7ffffe42,0x17ee01ff,0x7ffffff4,
    0x7440dfff,0xffffffff,0xffffb80e,0xfffb05ff,0x83ffbfff,0xfffffffa,
    0x0fff00ff,0x70013fee,0xbfffffff,0x43fffea0,0xffe84ffa,0x47ffa000,
    0xfffffffd,0x401fffff,0x7c407ff8,0xffe886ff,0x7dd3fea6,0x3ff6a25f,
    0x3fa601ef,0x701dffff,0x805bffff,0x3b2a07f9,0x401cefff,0x4fffffec,
    0x27fffd40,0x23bffee0,0xfd881ffc,0x200cffff,0x355307ff,0x99971000,
    0xa8130037,0x0ffe84ff,0x6c2aaa00,0xffffffff,0x4401ffff,0x7fe407ff,
    0x7fff501f,0x7fdd3fea,0x80013105,0x06200099,0x22003300,0x00660001,
    0x13000620,0x00262000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x08800000,0xf507ffd0,0xfff30bff,
    0x6c04ffe8,0x09ff75ff,0x3ffffee0,0x1fffffff,0xfffffff5,0x3ea03bff,
    0xdfffffff,0xfa97ffc1,0x5ff900ff,0x413fffea,0xf807ffff,0xffa806ff,
    0x3fffd106,0x33bfae60,0x7ffffd40,0xa80cefff,0x3ff606ff,0x23ffc403,
    0xfffffffa,0x7ecc4fff,0x3f20cfff,0x7fffc85f,0x7dc5ffb8,0x97ffc07f,
    0xf7004ffb,0xffffffff,0x3fea3fff,0xffffffff,0xffffa83f,0x23ffffff,
    0xfff52fff,0x54bff20b,0xf886ffff,0x7d407fff,0x7d401fff,0xfffe886f,
    0xfffffb02,0x7ffd43ff,0xffffffff,0xb037fd41,0xffd807ff,0x7ffffd47,
    0x2a4fffff,0xffffffff,0xff0fff52,0xffd83fff,0x817ffc43,0x3fee7ffa,
    0x99995004,0x9999bffd,0x333ffea1,0x0ffffedc,0x76e7ffd4,0xff0ffffe,
    0x3fffea5f,0xf52ffc82,0xfb81ffff,0x7ec07fff,0x7d404fff,0x2fffe86f,
    0xf9bfff70,0x7ffd4dff,0xfffdcccc,0xb037fd46,0x7fd407ff,0x67ffd47f,
    0x32cccccc,0xf955bfff,0x1fff11ff,0x1fffffcc,0x3f607ffa,0x49ff905f,
    0x20004ffb,0x3ea03ffd,0x7fff106f,0xf986ffa8,0x25fff3ff,0xc86ffffa,
    0xffff52ff,0xffffd85f,0x3fffe207,0x3fea00ff,0x017ffec6,0x7fc47ffb,
    0x20dff50f,0x3ea0fff9,0x0fff606f,0x23ffffc4,0xf9006ffa,0x27ffb0bf,
    0x3fee2ffe,0x3fe25ffd,0x01fff507,0x7fdc3fff,0x00b33224,0x7d407ffb,
    0x13ff606f,0x3f20dff5,0x2a3ffd5f,0x644fffff,0xfbff52ff,0xffdff89f,
    0x3b3fee07,0x3fea03ff,0x00ffff66,0xffe81fdb,0x7c0dff51,0x1bfea0ff,
    0xfb03ffd8,0xffa8ffff,0x01d97006,0x3ff29ff7,0x3fe7ff64,0x4417fea7,
    0x7fd42fff,0xfb27fdc7,0xffd801df,0x81bfea03,0x7fd42ffe,0x3abff906,
    0xffff50ff,0x97fe41ff,0x26fecffa,0x07ffbff9,0x3fea7ffa,0x65bfea06,
    0x20003fff,0xff50fff8,0x51bfea0d,0x7fec0dff,0xffaffa83,0x0037fd47,
    0xf52ffd80,0xfdbffcbf,0x407ff91f,0x7fe45ffd,0xfda7fdc4,0xffd800ef,
    0x27bfea03,0x7ffda999,0xf986ffa8,0x54ffb4ff,0x25ffdcff,0x9ff52ffc,
    0x3fee1ff9,0xff307ff9,0x407ffe2d,0xfffbeffa,0x7fdc0007,0x333ffea6,
    0x41fffdcc,0xeeeefffa,0x443fffee,0xa8fff5ff,0xcccccfff,0xffd8802c,
    0x7cdffe26,0x367ff74f,0x3fea01ff,0x707ffe0f,0x1dff99ff,0x80fff600,
    0xfffffffa,0xfa83ffff,0xfffeeeff,0x54ff91ff,0x2fff8cff,0x3fea5ff9,
    0xffb2ffac,0x7fe41ffe,0x5413ff63,0xffffffff,0xfff50004,0x7ffffd43,
    0xa82fffff,0xffffffff,0x7ec3ffff,0xfa8fff0f,0xffffffff,0x0effe804,
    0x7fdcfffc,0x3febff32,0x52fff807,0xdff70dff,0x6c003fff,0x3fea03ff,
    0x3fffffff,0x3ffffea0,0x2e2fffff,0x5d3fea6f,0x2ffc8fff,0x9ff19ff5,
    0x43ffd7fe,0x3ea0fff8,0xfffa80ff,0x01fffdff,0x227ffd40,0xfffffffa,
    0x7d43ffff,0xffffffff,0x3fee3fff,0xff51ffe2,0x9fffffff,0x80effd80,
    0x0ffdaffd,0x1bfe7ffe,0x7e57ff20,0xffffb83f,0x3f6003ff,0x3ffea03f,
    0x01fffdaa,0x3fffffea,0x2fd41cee,0x7ff49ff5,0xff52ffcc,0x3fe7ffa9,
    0xff70fff3,0xfff5555f,0x7ffff507,0xa801bffa,0xffa85fff,0x3fffa886,
    0xfd81bfea,0xf8bff13f,0x4f7fd47f,0x20099999,0xf700eff9,0xfd8dffbf,
    0x9804ffcf,0x0fff8fff,0xffffffb8,0x7ffb000f,0x3237fd40,0xff502fff,
    0x52fd400d,0x7ffcc9ff,0x9ff52ffe,0x47ff7ff2,0xfffe87ff,0x6fffffff,
    0x264fffa8,0xfa803fff,0xdff505ff,0xf52ffdc0,0x9ffec0df,0xfffffffc,
    0xdff57fff,0x0bfee000,0x4fffff98,0x17ffffdc,0xffdffe80,0x95fff705,
    0x3f6009ff,0x1bfea03f,0x2a03fffa,0x3a2006ff,0xf913fea3,0x3ea5ffff,
    0xfffff54f,0x3fe63ffc,0xffffffff,0x3ffd41ff,0x300fffec,0x7d409fff,
    0x9ffea06f,0x3f606ffa,0xfffff93f,0x2affffff,0xd70006ff,0xffff803d,
    0x7fffc42f,0xfff7000f,0x3fee07ff,0x003fff14,0x7d407ffb,0x5fff986f,
    0x0006ffa8,0x3e227fd4,0xff52ffff,0x97fffe29,0x6ffe47ff,0xfeaaaaaa,
    0x437fd44f,0xf106fff8,0xffa80bff,0x4bffb106,0x3f606ffa,0xddddd73f,
    0x2abdfffd,0x000006ff,0x80ffffd8,0x2006fffe,0x00fffff9,0x7fdc9ff7,
    0x03ffd805,0x7dc1bfea,0x37fd43ff,0x2a3ffd00,0xfffb84ff,0x749ff52f,
    0x1ffe3fff,0x7d405fff,0x1bfea0ff,0x641fffe4,0xeeeeefff,0x99fff51e,
    0x7ffffdd9,0xfb037fd4,0x8fff007f,0x90006ffa,0xffb807ff,0x9fff906f,
    0x5fffe800,0xfd13fee0,0x3ffd805f,0xe81bfea0,0x3fea0fff,0x47ffa006,
    0xffd04ffa,0xc93fea5f,0x9ffe1fff,0xff807ffa,0x81bfea3f,0x7f40fffe,
    0xffffffff,0xffffff52,0xa8bfffff,0x3ff606ff,0x547ff803,0xf90006ff,
    0xfff9807f,0x05fff504,0x02fffb80,0xff513fee,0x03ffd80d,0xf881bfea,
    0x1bfea5ff,0xf51ffe80,0x3ffe609f,0x7d49ff52,0xfb3ffc7f,0xdff9009f,
    0xf5037fd4,0x7ffccbff,0x2fffffff,0xfffffff5,0xff505bff,0x01ffec0d,
    0x3fea3ffc,0x7ff90006,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x99105997,
    0xddddd109,0x97000ddd,0x77777419,0xd32eeeee,0xdb8800bd,0x8000bdee,
    0x20b3265a,0xbb9104cc,0xbb730039,0x0005b039,0x00acedb8,0x02f3b6e6,
    0xccb81997,0xc9866540,0x1665c0cc,0x5bb53995,0x7d40332e,0xffffffff,
    0xffff53ff,0x201bdfff,0xffb85ffa,0xfffff985,0x3fe207ff,0xff83ffa6,
    0xffffffff,0x800fff33,0x5fffffff,0x4ffd7100,0xfff84ffb,0x7ffffd40,
    0x3fff604f,0x77fc4fff,0x3fa6000b,0xc81fffff,0x1fffffff,0xfff0bff2,
    0x7f47ff87,0x83ffee5f,0x5fffbffb,0x3fee3ffd,0xffffffac,0xf53fffff,
    0xffffffff,0x1fff107f,0xfb81ffd8,0x07ffffff,0xffe9bffa,0x3fffffe0,
    0xff32ffff,0x67fdc00f,0x203ffeba,0x27ffffc8,0xfff84ffb,0x33bffe60,
    0xffd83fff,0x24fffeef,0x00cfffff,0x767fffc4,0x7ffcc6ff,0x265ffecc,
    0x3ffe64ff,0xf317fe65,0x5fff15ff,0xffffffb8,0x3ee3ffd2,0xccfffacf,
    0x51cccccc,0xfddb9fff,0xff905fff,0xc83ffc47,0xfb1000ff,0x05554dff,
    0xf32ffd40,0x3ff400ff,0x36a06f22,0x22dfffff,0xfff84ffb,0xf88fff60,
    0x0f7fdc6f,0x3263fff5,0x02dfffff,0x7ec1bff9,0x987b6a2f,0x73ffc6ff,
    0x7fdcffff,0xfefffb82,0x3fffb84f,0xfb855543,0x006ffacf,0x3621bfea,
    0x7fcc0fff,0x7413fee5,0xfff7007f,0x74000dff,0x1ffe60ef,0xacfffe80,
    0xffffd700,0x9ff7017d,0x7fc1fff0,0xb0ffec0f,0x9ffd09ff,0xffffeb88,
    0x21fff43e,0xff710018,0xfd1ffc8f,0x3ffa3fff,0xdffffb00,0x00dff701,
    0x6ffabf88,0x41bfea00,0xfe83fff8,0x203ffb0f,0x82ccaeff,0x6ffdfff9,
    0x83ff5000,0x2a007ff9,0x2effffff,0x00e7fffc,0x3fe13fee,0xddfff10f,
    0x7c5ffddd,0x5ffb81ff,0x1ffff260,0x44003fff,0x7fffffda,0x7fc5ffcc,
    0x5ff8bffb,0x07fffe20,0x20027fdc,0x06ffa9fc,0xc81bfea0,0xbffb84ff,
    0xff306ff8,0x41dfffff,0x6ff98df9,0x309ff000,0xea800fff,0x24ffffff,
    0x400befff,0xfff84ffb,0xffffff30,0x7fc7ffff,0x06ffa80f,0xf1fffae2,
    0x3a2003ff,0x7ffbefff,0x9ffaeff8,0x03ffadfd,0x40bfffe2,0x2e004ffb,
    0xddfff53f,0x54bddddd,0x3fee06ff,0xfadff886,0xffff503f,0x144bfffd,
    0x7000dff3,0xfff303ff,0x3f6a2000,0x3fff27ff,0xff702dff,0x221fff09,
    0x3f6007ff,0x84ffd83f,0x4fffffc9,0x2a21fff4,0xf067ff40,0xf9ffb0ff,
    0x3ff7feef,0x3ffff600,0x04ffb80f,0xfffa8620,0x6fffffff,0xfa81bfea,
    0xfdffb07f,0x33b6a01f,0x205fff30,0x44006ff9,0xfff306ff,0x2132e200,
    0x3ae21ffe,0x20beffff,0x7fd45ffa,0x70bffe0f,0x2ffe4157,0xeb897ffc,
    0x80bfffff,0x7fe44ffd,0xf88fff14,0xffffa87f,0x0dffff35,0x7ff7ffd4,
    0x003ffb85,0x3ffffea0,0x2a6fffff,0x3fea06ff,0xbffff507,0x13ff6000,
    0xffd37fcc,0x40fff201,0x3a007ff9,0xffa88bff,0xfffb500f,0x5fffc4ff,
    0x20ffffa8,0xfb8aeffb,0x77ffcc6f,0x3e6fffba,0x402effff,0xfbadfff9,
    0x4bffa0ff,0xf887ffd9,0x3ffe2fff,0x5fff103f,0xfb87fff3,0x03ffd03f,
    0xa801bfea,0x3fee06ff,0x5ffff106,0x17fee000,0xffd37fcc,0x403ff601,
    0x26007ff9,0xffffffff,0x7ffc9803,0x77fffff4,0x3f620ffe,0x80ffffff,
    0xfffffff9,0x077ffe1e,0xfffffc80,0x7ffdc3ff,0x80ffffff,0x3f60fffd,
    0xbffb00ff,0xf707ffdc,0x07ffa07f,0x50037fd4,0x7fe40dff,0x01fff205,
    0x7ff90533,0xfe9bfe60,0x40bff00f,0x4c007ff9,0x02efffec,0x3623dc40,
    0xffd8dfff,0xdffffc80,0x3fff6601,0x006740cf,0xdfffea80,0xeffeb882,
    0xfa83ffb9,0x837fdc6f,0x7f40fffb,0x40ffee6f,0xff501ffe,0x37fd400d,
    0x6407ffd0,0x7fec04ff,0x9807ff43,0x883dc6ff,0x3fe604ff,0x02620007,
    0x00180000,0x11000310,0x31000000,0x00004400,0x00000000,0x0dff5000,
    0xc837fd40,0xff300eff,0xfff8803f,0x206ffd9b,0x17a26ff9,0xf3017fd4,
    0x999999ff,0x00000099,0x00000000,0x00000000,0x00000000,0x00000000,
    0x333ffea0,0x53cccccc,0xfdb99fff,0xfdd05fff,0x3f200bff,0x01ffffff,
    0x0ef9bfe6,0x4c03ff90,0xffffffff,0x039977ff,0xccc89332,0x51cccccc,
    0x7bb71199,0x4016764c,0x332603cb,0x8039db71,0x01880098,0x3bbbbbba,
    0x0000eeee,0x2aa20000,0x88221aaa,0x3ffea199,0xffffffff,0xffffff56,
    0x3e09ffff,0x2001ffff,0x00dffffb,0x80337fcc,0x3e600ffd,0xffffffff,
    0x50bff77f,0x7ffccbff,0x92ffffff,0xfffff7ff,0x7fffff59,0x2a06fe80,
    0xffffdbff,0x03ffe02f,0x3fe01fb0,0xffffffff,0x3a7ffb0f,0x43fff3ff,
    0x40adfec8,0xfffff31b,0xfd93feab,0xfffff51f,0x2dffffff,0xeffffffa,
    0x332e00ce,0x0310000b,0x0037fcc0,0xf8800000,0x17fec0ff,0xffdffff3,
    0x3fff23ff,0xeffffdce,0x200fffec,0x3fea06fe,0x6fffcdff,0x109fff70,
    0x3e145f25,0xffffffff,0x27ffb0ff,0x3fff3ffe,0x3fffffe2,0xf31fecdf,
    0x3eabffff,0x002ff44f,0x00000000,0x00000000,0x64000000,0x1ffe23ff,
    0xc93ffe60,0x3ffa0fff,0x807ffa0f,0x3fea06fe,0x41ffe62f,0x5c0ffffe,
    0x07fcfdef,0xd3ffd800,0x47ffe7ff,0xffffeff9,0xbb11ffff,0x3fea7bbb,
    0x0007f444,0x00000000,0x00000000,0x26000000,0x0ffee6ff,0xc8bfff30,
    0x27fec4ff,0xaaa8bff6,0x2aaafffa,0x3fe1bfea,0x7e7fd40f,0x7ff64c3f,
    0xc80004df,0x25ff92ff,0x41b31ffe,0x02ffffc9,0x00000000,0x00000000,
    0x00000000,0xffd00000,0x8803ffa3,0xffc86ffe,0x3227fe43,0x3fffe3ff,
    0x0fffffff,0xfff0bff5,0xffd7fe81,0x203bfee0,0xeeeeeeee,0x3ff50eee,
    0x3fe43fee,0x77101300,0x77777777,0x00000377,0x00000000,0x00000000,
    0x3ee00000,0x205ff9cf,0xc80effe8,0x1ffe43ff,0xfff8fff2,0xffffffff,
    0xfd0bff50,0xba7fd41f,0x56fd42ff,0xfffff85f,0x10ffffff,0xa9326199,
    0xf880004c,0xffffffff,0x00003fff,0x00000000,0x00000000,0x3e000000,
    0x202ffcef,0xf900fffd,0x43ffc87f,0x33323ffc,0xccccfffc,0xfd09ff50,
    0x887ff41f,0xd8fdc6ff,0x7ffffc0d,0x00ffffff,0x22000000,0xaaaaaaaa,
    0x0001aaaa,0x00000000,0x00000000,0x20000000,0x207ffffc,0x3201fffc,
    0x1ffe43ff,0xfe80fff2,0x213fea06,0xbff30ffe,0x1042ffd8,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x4ffff980,0x99dfff70,
    0x3ff27999,0x321ffe43,0x1bfa03ff,0xfe84ffa8,0x8835530f,0x000001aa,
    0x00000000,0x00000000,0x00000000,0x00000000,0x74000000,0xff900fff,
    0xbfffffff,0xff90fff2,0x203ffc87,0x3fea06fe,0x000ffe84,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x7fdc0000,0x3ffff205,
    0xf95fffff,0x43ffc87f,0x32e03ffc,0x213fea03,0x00000ffe,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_bold_25_usascii_x[95]={ 0,2,1,0,0,0,0,1,1,0,0,0,1,0,
1,-1,0,1,0,0,0,0,0,0,0,0,2,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,0,1,
1,1,1,0,1,0,1,0,0,1,-1,0,0,-1,0,1,-1,0,1,-1,0,0,1,0,0,0,0,0,1,1,
-2,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0, };
static signed short stb__arial_bold_25_usascii_y[95]={ 20,3,3,3,2,3,3,3,3,3,3,6,16,12,
16,3,3,3,3,3,3,4,3,4,3,3,8,8,6,8,6,3,3,3,3,3,3,3,3,3,3,3,3,3,
4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,22,3,8,3,8,3,8,3,8,3,3,
3,3,3,8,8,8,8,8,8,8,4,8,8,8,8,8,8,3,3,3,9, };
static unsigned short stb__arial_bold_25_usascii_w[95]={ 0,4,9,13,12,19,16,4,6,7,9,13,4,7,
4,8,12,8,12,12,12,12,12,12,12,12,4,5,12,13,12,12,22,17,15,15,15,13,12,16,14,4,11,16,
12,17,14,17,13,18,16,14,14,14,16,22,15,16,14,7,8,6,11,14,6,12,12,12,13,12,9,13,12,4,
7,12,4,18,12,13,12,13,8,12,8,12,13,18,13,13,11,9,4,8,13, };
static unsigned short stb__arial_bold_25_usascii_h[95]={ 0,17,7,18,21,18,18,7,22,22,9,12,8,4,
4,18,18,17,17,18,17,17,18,16,18,18,12,16,13,8,13,17,22,17,17,18,17,17,17,18,17,17,18,17,
16,17,17,18,17,19,17,18,17,18,17,17,17,17,17,22,18,22,10,3,4,13,18,13,18,13,17,17,17,17,
22,17,17,12,12,13,17,17,12,13,17,13,12,12,12,17,12,22,22,22,6, };
static unsigned short stb__arial_bold_25_usascii_s[95]={ 253,100,207,136,86,176,196,217,33,1,183,
144,251,236,244,213,82,58,173,150,217,45,222,73,1,235,246,67,112,193,165,
243,55,138,186,109,15,1,230,50,202,251,29,156,86,120,105,118,86,99,69,
14,54,67,24,1,230,213,198,78,41,48,171,236,249,191,163,178,95,138,125,
148,171,248,40,41,246,125,158,151,135,184,237,99,162,125,99,204,223,31,113,
23,18,9,222, };
static unsigned short stb__arial_bold_25_usascii_t[95]={ 1,43,75,1,1,1,1,75,1,1,75,
75,61,75,75,1,24,61,43,1,43,61,1,61,24,1,61,61,61,75,61,
43,1,43,43,24,61,61,43,24,43,24,24,43,61,43,43,1,43,1,43,
24,43,24,43,43,24,24,24,1,24,1,75,80,75,61,1,61,24,61,24,
24,24,1,1,43,24,75,75,61,24,24,61,61,24,61,75,61,61,61,75,
1,1,1,75, };
static unsigned short stb__arial_bold_25_usascii_a[95]={ 99,119,170,199,199,318,259,85,
119,119,139,209,99,119,99,99,199,199,199,199,199,199,199,199,
199,199,119,119,209,209,209,219,349,259,259,259,259,239,219,278,
259,99,199,259,219,298,259,278,239,278,259,239,219,259,239,338,
239,239,219,119,99,119,209,199,119,199,219,199,219,199,119,219,
219,99,99,199,99,318,219,219,219,219,139,199,119,219,199,278,
199,199,179,139,100,139,209, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_bold_25_usascii_BITMAP_HEIGHT or STB_FONT_arial_bold_25_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_bold_25_usascii(stb_fontchar font[STB_FONT_arial_bold_25_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_bold_25_usascii_BITMAP_HEIGHT][STB_FONT_arial_bold_25_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_bold_25_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_bold_25_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_bold_25_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_bold_25_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_bold_25_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_bold_25_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_bold_25_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_bold_25_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_bold_25_usascii_s[i] + stb__arial_bold_25_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_bold_25_usascii_t[i] + stb__arial_bold_25_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_bold_25_usascii_x[i];
            font[i].y0 = stb__arial_bold_25_usascii_y[i];
            font[i].x1 = stb__arial_bold_25_usascii_x[i] + stb__arial_bold_25_usascii_w[i];
            font[i].y1 = stb__arial_bold_25_usascii_y[i] + stb__arial_bold_25_usascii_h[i];
            font[i].advance_int = (stb__arial_bold_25_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_bold_25_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_bold_25_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_bold_25_usascii_s[i] + stb__arial_bold_25_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_bold_25_usascii_t[i] + stb__arial_bold_25_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_bold_25_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_bold_25_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_bold_25_usascii_x[i] + stb__arial_bold_25_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_bold_25_usascii_y[i] + stb__arial_bold_25_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_bold_25_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_bold_25_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_bold_25_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_bold_25_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_bold_25_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_bold_25_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_bold_25_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_bold_25_usascii_LINE_SPACING
#endif

