// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_7_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_7_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_7_latin1_BITMAP_WIDTH         256
#define STB_FONT_courier_7_latin1_BITMAP_HEIGHT         24
#define STB_FONT_courier_7_latin1_BITMAP_HEIGHT_POW2    32

#define STB_FONT_courier_7_latin1_FIRST_CHAR            32
#define STB_FONT_courier_7_latin1_NUM_CHARS            224

#define STB_FONT_courier_7_latin1_LINE_SPACING           3

static unsigned int stb__courier_7_latin1_pixels[]={
    0x26050440,0x22000000,0x40841310,0x26000008,0x33030000,0x11001801,
    0x06600018,0x0cc19811,0x100130aa,0x20cc0881,0x3304cc08,0x08833061,
    0x198310cc,0x1106604c,0x22044098,0x231130c0,0x10662199,0x30440881,
    0x43311988,0x82626098,0x30c04c08,0x260d4131,0x82182621,0x88262609,
    0x4c426260,0x30220440,0x0660cc43,0x111cc433,0x04c4c183,0x0cc19833,
    0x3142a303,0x0cc43186,0x4c618882,0x21a88310,0x886a21a8,0x4c31131a,
    0x886318a1,0x8630c619,0x230c6301,0x30660461,0x0c08c303,0x018631dc,
    0x26208c33,0x30630461,0x84461983,0x88a62299,0x30844629,0x26219828,
    0x11184462,0x18cc2662,0x30c21841,0x2a604c53,0x44c41330,0x20606060,
    0x98660cc1,0x5330c619,0x060c2184,0x30c618c6,0x44611182,0x8a023060,
    0x310c62b8,0x118a6213,0x182314cc,0x53114c43,0x43310cc4,0x15330a99,
    0x429a8622,0x854cc181,0x30662198,0x2130d4c1,0x17310b98,0x208a8662,
    0x06062629,0x83030303,0x26060c19,0x98866229,0x0c17310b,0x3314cc62,
    0x3310cc45,0x31060cc4,0x8660d443,0x3304c299,0x98866215,0x29986621,
    0x54cc2a66,0x00000000,0x006e0dc4,0x00000000,0x14540080,0x10dc4131,
    0x710dc437,0x110220c3,0x82000000,0x40000000,0x02202000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000220,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x44098000,0x4c010440,0x81310420,0x50604409,0x3143084c,0x22022131,
    0x462a88c0,0x435028c1,0x50661889,0x8660cc43,0x98866298,0x10104cc1,
    0x30266215,0x310cc198,0x23306613,0x30666098,0x40988213,0x3302119a,
    0x20998803,0x30442629,0x330ccc53,0x05c430c5,0x10544151,0x51054415,
    0x0c318041,0x0c188823,0x0c209a8c,0x0610ccca,0x05428833,0x40541131,
    0x44445311,0x81b88430,0x43311461,0x18446088,0x25130883,0x08631431,
    0x208a8283,0x2a211182,0x19866e62,0x8210ccc2,0x98808410,0x98330661,
    0x30660cc1,0x098c3043,0x066208c3,0x4150c415,0x314a0b98,0x060660c6,
    0x51089886,0x88a62303,0x8304c610,0x2314c430,0x88c30c41,0x25330c29,
    0x030ccc31,0x20d44185,0x26210a81,0x4cc26aa2,0x310422a2,0x13104c41,
    0x5510988c,0x45511544,0x88aa22a8,0x0c62822a,0x8620cc43,0x4110c398,
    0x8866a500,0x86620c19,0x826a2198,0x1988441a,0x4ccc2662,0x819986a0,
    0x4cc6a662,0x42206621,0x4cc22218,0x42662062,0xa9a86e21,0x19a83712,
    0x88000222,0x54266a09,0x21335099,0x5198a860,0x4662a331,0x3315198a,
    0x0814662a,0x30000143,0x000c004c,0x00000022,0x40000000,0x026a0000,
    0x1004c011,0x00001001,0x35000000,0x00000013,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x40983300,
    0x01044619,0x83001885,0x22098981,0x18c33109,0x40a884cc,0x22060619,
    0x888110a9,0x22988108,0x13130989,0x44546226,0x4d4c3331,0x26613510,
    0x1a886661,0x21318662,0x130a2312,0x1a884c13,0x88288622,0x02198841,
    0x84c4c151,0x30604188,0x088c1833,0x20d44333,0x14042981,0xb8330662,
    0x4308a661,0x14c43501,0x30984261,0x02662131,0x30610988,0x22661983,
    0x44308631,0x30844c11,0x4118c084,0x4ccc1331,0x08311061,0x2060c20c,
    0x21813119,0x20c41981,0x4282ea1a,0x26214430,0x3030ea21,0x20cc4170,
    0x20dc1841,0x7310cc41,0x89826621,0x2a615331,0x26315319,0x0066661a,
    0x540c0c31,0x1982a661,0xa8182662,0x0988a621,0x898c10d4,0x11862661,
    0x41890662,0x2a20c298,0x51098152,0x86615443,0x18110a99,0x9a88544c,
    0x10d44000,0x1054c437,0x2a261b88,0x01b886e0,0x00391000,0x300330a6,
    0x04c22225,0x261b8553,0x985330a8,0x1b8266a0,0x231150e2,0x4171099a,
    0x451509a9,0x3371288a,0x2218262a,0x442a261b,0x2311441b,0x315021a9,
    0x1b880003,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x80000000,0xa84cc411,0x0c333099,0x4c188531,
    0x22130881,0x3104c150,0x8054aa33,0x4c410044,0x8cc75109,0x988442a8,
    0x00266609,0x00000000,0x00000000,0x00000000,0x00000000,0x1985055c,
    0x08810c23,0x2635066e,0x8c4aa130,0xa8406222,0x888a0882,0x9884c221,
    0x0198aa09,0x00000000,0x00000000,0x00000000,0x00000000,0x99800000,
    0x89a86e22,0x42215132,0x20a622b8,0x00080880,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_7_latin1_x[224]={ 0,1,0,0,0,0,0,1,1,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
1,0,0,0,0,0,0,0,0,-1,1,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__courier_7_latin1_y[224]={ 5,1,1,0,0,1,1,1,1,1,1,1,4,3,
4,0,1,1,1,1,1,1,1,1,1,1,2,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,6,0,2,1,2,1,2,1,2,1,1,
1,1,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,1,1,2,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,2,0,1,1,1,
1,1,1,1,1,2,3,3,1,0,0,1,1,1,0,2,1,2,4,1,1,2,1,1,1,2,0,0,0,0,
0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,1,0,0,0,0,0,1,1,0,0,
1,1,1,0,2,2,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,1,2,0,0,1,1,0,1,1,
 };
static unsigned short stb__courier_7_latin1_w[224]={ 0,2,3,4,4,4,4,2,2,2,3,4,3,4,
2,4,4,4,3,4,3,4,4,3,4,4,2,3,3,4,3,3,3,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,3,2,4,4,2,4,4,4,4,4,4,4,4,4,
3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,1,2,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,2,3,4,4,4,
1,4,3,4,2,4,4,4,4,5,2,4,2,2,2,4,4,2,2,2,3,4,4,4,4,3,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,5,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
 };
static unsigned short stb__courier_7_latin1_h[224]={ 0,5,2,6,6,5,5,3,5,5,3,4,2,1,
2,6,5,4,4,5,4,5,5,5,5,5,4,4,4,2,4,5,5,4,4,5,4,4,4,5,4,4,5,4,
4,4,4,5,4,5,4,5,4,5,4,4,4,4,4,5,6,5,2,1,2,4,5,4,5,4,4,5,4,4,
6,4,4,3,3,4,5,5,3,4,5,4,3,4,3,5,3,5,5,5,2,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,4,4,4,
5,5,1,5,2,3,2,1,5,1,3,4,3,3,2,5,5,2,3,3,2,3,4,4,4,5,5,5,5,5,
5,5,4,6,5,5,5,5,5,5,5,5,4,5,6,6,6,6,6,3,5,6,6,6,6,5,4,5,6,6,
5,5,5,6,4,5,6,6,5,5,4,5,4,4,5,4,6,6,5,5,5,4,4,6,6,5,5,7,6,6,
 };
static unsigned short stb__courier_7_latin1_s[224]={ 134,199,97,84,79,76,81,55,86,99,251,
231,77,105,71,69,107,214,227,117,219,122,132,137,141,221,253,200,223,92,116,
191,195,236,145,209,175,165,155,151,209,204,161,195,190,185,180,199,170,181,160,
176,150,71,140,135,130,125,120,68,36,57,58,114,74,86,102,76,171,66,61,
166,51,46,40,36,31,16,21,16,204,186,11,248,156,71,241,21,246,112,29,
214,63,65,81,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,
111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,134,60,23,
11,238,56,21,231,110,146,68,34,63,105,127,119,49,26,46,52,86,94,89,
89,43,26,101,6,91,96,106,217,52,47,42,37,32,27,222,94,16,11,6,
1,251,246,241,236,232,226,89,119,16,44,49,39,194,104,54,74,114,169,81,
159,129,124,149,144,174,99,243,189,21,109,212,139,1,164,217,227,154,6,64,
59,134,179,184,41,101,31,26,202,207,1,11,6, };
static unsigned short stb__courier_7_latin1_t[224]={ 7,1,19,1,1,8,8,19,8,8,14,
14,19,19,19,1,8,14,14,8,14,8,8,8,8,1,8,14,14,19,14,
8,8,14,14,8,14,14,14,8,14,14,8,14,14,14,14,8,14,8,14,
8,14,8,14,14,14,14,14,8,1,8,19,19,19,14,8,14,8,14,14,
8,14,14,1,14,14,19,19,14,8,8,19,8,8,14,14,14,14,8,19,
8,8,8,19,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,7,8,8,
14,8,14,8,1,19,8,19,19,19,19,8,19,19,14,19,19,19,8,8,
19,19,19,19,19,14,14,14,1,8,8,8,8,8,8,8,1,8,8,8,
9,1,1,1,1,8,1,1,1,1,1,1,19,1,1,1,1,1,1,14,
1,1,1,1,1,1,1,8,1,1,1,1,1,15,1,8,8,1,14,1,
1,1,1,1,14,14,1,1,1,1,1,1,1, };
static unsigned short stb__courier_7_latin1_a[224]={ 59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_7_latin1_BITMAP_HEIGHT or STB_FONT_courier_7_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_7_latin1(stb_fontchar font[STB_FONT_courier_7_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_courier_7_latin1_BITMAP_HEIGHT][STB_FONT_courier_7_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_7_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_7_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_7_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_7_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_7_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_7_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_7_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__courier_7_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__courier_7_latin1_s[i] + stb__courier_7_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__courier_7_latin1_t[i] + stb__courier_7_latin1_h[i]) * recip_height;
            font[i].x0 = stb__courier_7_latin1_x[i];
            font[i].y0 = stb__courier_7_latin1_y[i];
            font[i].x1 = stb__courier_7_latin1_x[i] + stb__courier_7_latin1_w[i];
            font[i].y1 = stb__courier_7_latin1_y[i] + stb__courier_7_latin1_h[i];
            font[i].advance_int = (stb__courier_7_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__courier_7_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_7_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_7_latin1_s[i] + stb__courier_7_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_7_latin1_t[i] + stb__courier_7_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_7_latin1_x[i] - 0.5f;
            font[i].y0f = stb__courier_7_latin1_y[i] - 0.5f;
            font[i].x1f = stb__courier_7_latin1_x[i] + stb__courier_7_latin1_w[i] + 0.5f;
            font[i].y1f = stb__courier_7_latin1_y[i] + stb__courier_7_latin1_h[i] + 0.5f;
            font[i].advance = stb__courier_7_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_7_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_7_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_7_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_7_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_7_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_7_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_7_latin1_LINE_SPACING
#endif

