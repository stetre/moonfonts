// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_29_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_29_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_29_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_29_usascii_BITMAP_HEIGHT         88
#define STB_FONT_courier_29_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_29_usascii_FIRST_CHAR            32
#define STB_FONT_courier_29_usascii_NUM_CHARS             95

#define STB_FONT_courier_29_usascii_LINE_SPACING          14

static unsigned int stb__courier_29_usascii_pixels[]={
    0x10000620,0x90880000,0x2e193005,0x2e199990,0x12880ccc,0x48002007,
    0x0000006a,0x00000000,0x76dc0000,0x010000cd,0x88000880,0x20008001,
    0x1f500cda,0x03d00d80,0xe996c000,0x1e8faa03,0x554c555f,0x0be3d81e,
    0x00dfffb8,0x7f10793c,0x27fedc40,0x204efea8,0x200befd9,0x00adfda8,
    0x4033bfae,0xeb98add8,0xd54ee982,0x5c019dff,0xe98ceffe,0x003f504e,
    0x64bbffee,0x7fff11ee,0x1d003ea0,0x400016e0,0x5b034479,0x3b00f1e8,
    0x41b20fa8,0x40d910dc,0x3e60b278,0x1159d305,0x9315f703,0x9319f30d,
    0x4c6fe60d,0x8bec80fc,0x207d07da,0xcdb982f9,0x203ae21e,0x2bae21ed,
    0x03f5009e,0xf7117dd0,0xfff835b7,0x26015102,0x7c39defd,0x83c80000,
    0x1e81d00e,0x4e83b00f,0x41a617c4,0x0ecd102e,0x17d427cc,0x1ec0fc40,
    0x2e12e0b6,0x06889701,0x4c04b879,0x4c0bf506,0xfa816e0f,0x20054406,
    0x207fa05c,0xd90002b8,0xb8ff7317,0x07c40004,0x740e8074,0x4c3b00f1,
    0x16c5d81f,0x74d304b8,0x7c44f981,0x2a0b9001,0x003d03c6,0x207707c4,
    0x2003e269,0x400fa83d,0xd801f12c,0x2f880006,0x00007ee0,0x8f501f10,
    0x320000f8,0x03a01d04,0x87601e3d,0x7c1f306c,0x9660b300,0x6c3f880e,
    0xf80fa004,0x015c0951,0x016c1f10,0x54016a1f,0x4a806a85,0x00d500b3,
    0xf880d300,0xeeeeb801,0x812e1eee,0x10003c81,0x7403a01f,0xd8078f40,
    0x9fc413e1,0x45eca878,0xbfaaeca9,0x0d0fe21a,0x4b601f80,0x8012a04b,
    0x6a82dc5b,0x434400ee,0xb569805a,0xdd50d500,0x02d403dd,0x4cc400f4,
    0x261e9999,0x007c4006,0x03d025c0,0x01e3d03e,0xf01fc476,0x79f9166b,
    0xeefeed8b,0x317c4eef,0x4404d44b,0x0799e407,0xdb53017a,0x2a0be881,
    0x7800b22e,0x14a807a8,0x310d700d,0x7cc03d33,0x0007e600,0x02ce83b0,
    0x3e000f60,0x1ea13600,0x8ec03c7a,0x4db602f9,0x70599a25,0x22f81e27,
    0x3fdbf94a,0xd1e40688,0x540f9905,0xfd100fff,0x03c85ffb,0x07f50f10,
    0x880ba2e8,0x401e806e,0x207f603e,0x0ec00dfc,0x005eff5c,0x05b800d3,
    0x2fd877c4,0x3b00f1e8,0x37c807ea,0x20b31e4b,0x0fc0d13c,0x7d43b977,
    0x47901a20,0xf5d98cf9,0x303d7100,0xb89fb7df,0xd50d3004,0xf317605d,
    0x00ddb103,0x82f9803d,0x7fc41eea,0x100ec03f,0x16c05f95,0xea803d00,
    0x47a13662,0x3f51d807,0x3259b6c0,0x99641663,0x6fa87a06,0x203c4b90,
    0x9efe4c3c,0x83e60068,0x326c41e9,0x2a12e00d,0xecabde8d,0x957bf504,
    0x3d00d37f,0xf97df500,0xffd03b1d,0x1001d803,0x401a601f,0x882d805a,
    0xb00f1e87,0x5e80be63,0x598f44b3,0x3fffffee,0x22142fff,0x0f8f301f,
    0x2cc00ba0,0x03d8f200,0x2016c1f1,0x515a81f8,0xa88037b9,0x00d31bdc,
    0x32e2003d,0x2a03b0ac,0x2001d800,0x200ba02c,0xd00e802e,0xb00f1e81,
    0x4f80fe23,0xfffda8d3,0x00951e80,0x07a3c068,0x3c800fc4,0x01f2d400,
    0x401d316c,0x000b504c,0x3a01a600,0x01e80001,0x0688ec00,0x80d50074,
    0x201d006a,0x8078f40e,0x7c413a1d,0x31101f12,0x0025c3a0,0x322cc07a,
    0x3001f303,0x24c8001f,0xf50ba01f,0x500dd883,0x2600000b,0x0001e806,
    0x6c0000f8,0x16e09f11,0x02d807a0,0xd03a01d0,0xb87601e3,0x03e8f707,
    0x40770f80,0x85905a80,0x10099079,0x2200885d,0x7cc1361f,0xfedfea80,
    0x0002d404,0x1e806980,0x002e4000,0xecf88ec0,0x800cfdbd,0x400d305a,
    0x1e81d00e,0x7c43b00f,0x02dc4e82,0x320793c0,0x710cc86f,0xfa89b01f,
    0x5417dc00,0x2275c43f,0x0faa0bf8,0x9801cf88,0x000099db,0x009ea998,
    0x4cc4007a,0x0000eda9,0xbfa821d8,0x6c0fc000,0x7403e003,0xd8078f40,
    0x07e63641,0x220660fa,0x7fec0b27,0x1efefc80,0x03bb7f60,0x01bfdbd5,
    0x7fef7ec4,0xffbfd102,0x6e77d405,0x3a65b89b,0x0005eeee,0xa7777754,
    0xfffffffb,0xddd707ff,0x6c00007b,0x20003a01,0x5003c44b,0x47a25c0b,
    0x7c41d807,0x6f4c1361,0x6881ffcb,0x400a80b6,0x0351001a,0x44000544,
    0x0351001a,0xcaabde88,0x00001dfd,0x00000000,0x7c400000,0x20003a00,
    0x400f20f8,0x3ba201ed,0x3bbbe1d0,0x703fddb0,0xa8803e29,0x151401bc,
    0x00000000,0x00000000,0x00000000,0x00000000,0x54000000,0x80007406,
    0x04003a3b,0x33304100,0x100ccc43,0x00000004,0x00000000,0x00000000,
    0x00000000,0x00000000,0x4cc40000,0x0c01fda9,0x00002000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xeeeb8000,
    0x000000cd,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x16e4c000,0x0f322000,
    0x99999993,0x0b326199,0x33332200,0x00002ccc,0xb8d665cc,0x654000cc,
    0x0330002c,0x542f76c0,0x33263eee,0xb71000cc,0xca80039d,0x0036a202,
    0x45ef75cc,0x3333200a,0x9503cccc,0x882a59dd,0x9504efec,0x50000ee1,
    0xaaaea8d7,0x511eaaaa,0x5d3000b9,0xa8355555,0x8804efed,0x33ccabee,
    0xa88003d5,0x0770004d,0x440d7cc0,0x2aa20cd9,0xce9801ea,0x800eca89,
    0xfda85cf8,0xbdd801fd,0x02efca89,0x2bb2aaaa,0x98ade82a,0x9d12ddfc,
    0x581db515,0x69800058,0x503e024c,0x00b3000b,0x3ae26b7e,0x400f200e,
    0x0970001e,0x7000ee00,0x2007c409,0x80fcc01e,0x5abd805b,0x803d0ac8,
    0x00bee05d,0x80f60598,0x3209d2fc,0x000642c5,0xd3001a60,0xb3000b50,
    0x04d81e00,0x00f4003e,0x70004b80,0x201f0007,0x401e804c,0x5026402e,
    0x07a016ad,0x16c00eb8,0x1720b300,0x40d35f10,0x0b0320f9,0x00698100,
    0x042d41e4,0x01c01660,0xd003c0f5,0x09700083,0x77776c40,0x2e04eeee,
    0xe800f884,0x2201aa01,0x16a3d00f,0x01e807a0,0xd0598000,0x00215001,
    0x6d5ecc3d,0xdffb5001,0x1d001a69,0x3ff66b50,0x265980df,0xed8f0001,
    0x2eeeeefe,0xfffe99e8,0xdd125c03,0xcc9985dd,0x40099999,0xe8025c0f,
    0x6400b201,0x016a5b81,0x003c407a,0x68859800,0x07c40000,0x216e2154,
    0x2b7221eb,0x541a6006,0x3f222ead,0x7ffef4c1,0x116a003f,0x33333f33,
    0x545d9d01,0xf712e04d,0x00ee0135,0x01f125c0,0x01e807a0,0x20f88770,
    0x501e805a,0x2600000b,0x00005a85,0x36e2026c,0x2e05a82c,0x40ee006f,
    0x8d500efa,0x17aa1bd8,0x07807ee0,0x1e603ba0,0x007ae4b8,0x0f8000ee,
    0x00f40097,0x9166001f,0x1e805a89,0x00000950,0x0012a166,0xb7305c80,
    0x400e8039,0x407a006d,0x01ec01fa,0xbd702f88,0x3a007801,0xa5c07a01,
    0x077000ec,0x00fa5c00,0x00e807a0,0x5434c950,0x9501e805,0x2aaaaaa0,
    0xa8598030,0x0d700004,0x100839d5,0x200d700d,0x201ea068,0x2136005a,
    0x00f001f9,0x203b00f4,0x5c006dcb,0x267c0003,0x2d807a00,0x416c5700,
    0x301e805a,0x3b332e0b,0x2cc03d1d,0x6400034c,0xddb8080e,0x4c02541c,
    0x54097006,0x20069805,0x2005985a,0xd807a007,0x05d9f701,0x20001dc0,
    0x0f4000fb,0x47a00790,0xcaaaaaf9,0x880f402e,0x0f459007,0x00f10b30,
    0x3000dc80,0x01662c47,0x00ec01aa,0x00b500d5,0x200082d4,0xd807a007,
    0x0ba29701,0x20001dc0,0x01e8004b,0x4f5003e2,0xdcccccc9,0x807a00ce,
    0x3a2c802e,0x26412e01,0x002ec080,0x0e837032,0x3c403640,0x79003ea0,
    0x0001e400,0x403d003c,0x74c9701d,0x0004a802,0x0f40007c,0x1e8816e0,
    0x3d00b500,0x32007cc0,0x02e80ba2,0x1ec403f1,0x50b000bb,0x3e604c85,
    0x5404a806,0x4c3a605f,0x2203e202,0xe801e001,0x25c07601,0x07a007a6,
    0x05b80b26,0xdb003d00,0x2002e981,0x401e805a,0x45d302fb,0x405d83fa,
    0x24e983f9,0x8750004d,0x7d509b05,0xa805900d,0x17d40dcd,0x3e981bd1,
    0xf006ff98,0x3b00f400,0x07e612e0,0xdfd9dd50,0xae999887,0x001e8001,
    0x05bdbdf7,0x1e805a80,0xdcefe880,0x7ec40bee,0xb1004fdd,0x6c5ffbdf,
    0xb700ec04,0x6fe403b9,0x5ff98eed,0x7fcc03a0,0x3ddbdf75,0x3fb7bb20,
    0x20dff502,0xfffffff8,0x3fff20ff,0x73fffdc7,0xfff889ff,0x04d4403f,
    0xeeeeeed8,0x3fffee01,0x406fffff,0x7f4000a9,0x3ffe0fff,0x02ffffff,
    0x44004d4c,0x988000a9,0xffffe80a,0x801fffff,0x002a6000,0x0a980000,
    0x30035100,0x00000015,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xcccb8000,0x33332e0c,0x8cefeb80,0x33332a19,
    0x44cccc81,0xcccccccb,0x9999910c,0x25999999,0xcb80ccc8,0x99970ccc,
    0xa8017999,0xccc81ccc,0x0b333264,0x2a799993,0xaccccccc,0xcccccc80,
    0x33321ccc,0x0b332e0c,0xcb808a98,0xcccccccc,0x999970cc,0x87999999,
    0xaccccccb,0x80999300,0x9b503cc9,0x50557654,0xee815d95,0x23efda9b,
    0xa80aafb9,0x55f42dda,0x31faaaaa,0x57f5555d,0x32a29b55,0xaeba985f,
    0x5559d530,0x36603bf9,0x2eda80ae,0x106ab722,0x2a63d955,0xffcaaacd,
    0x5f555542,0x33aa0aaa,0x073aa60a,0x213f77a6,0xaaaabfaa,0xd531eaaa,
    0x75555559,0xaaadca8d,0xfb883fdb,0x0b77601e,0x4a8fffe2,0x82542cc0,
    0x801e83fa,0xb701e81e,0x2e0f434c,0x980f6cc4,0x1aa03b06,0x07e207d0,
    0x4254016a,0x403f502c,0xb00ec01e,0x4008b603,0x360f400e,0x12e1a601,
    0x57c426c4,0x4097d305,0x012a2fff,0x6c01d0b3,0x34c04b83,0x20e981e8,
    0x25c1e869,0x34c1ab66,0x80b601d8,0x302e81f8,0x1dc1a88d,0x40b90164,
    0xb00ec01e,0xe800d103,0x0760f400,0x204b8698,0x0ebc41e8,0x2204bbc8,
    0x2602542b,0x40440685,0xe81e4078,0x434c2e80,0x56625c1e,0x3b06983d,
    0x3aa02d40,0x47881320,0x641645fa,0x1e81a602,0x03b00ec0,0x00e8003e,
    0x8807605c,0x2d404b83,0x5e225de2,0x04a8004b,0x001dc2cc,0x403e02d8,
    0x83884c80,0x56614c1e,0xd834c0f8,0x2e00b601,0xd8f00d75,0x1640ec7b,
    0x00f40b50,0x701d8076,0x1a074007,0x700d0760,0x1788f009,0x04ba5c1f,
    0x2cc04a80,0x00056744,0x8016a0b5,0x00f4006a,0x698992cc,0x0db103b0,
    0x4007e6c0,0xe87a3e0e,0x5d102c81,0x2b600f40,0x1e999999,0x3a001f10,
    0xd807999a,0x400f999a,0x221e804b,0x970e8f27,0x98095000,0x33bb2a05,
    0x2d80f802,0x8003f100,0x7459801e,0x66ec1a61,0x4002fecc,0x23b003f8,
    0x407c7769,0x027dcc2c,0xfffb007a,0x503fffff,0xe81a8bbd,0xd807ffff,
    0x400fffff,0x221d804b,0x972d5a27,0x9513baa0,0x51005980,0x21e401bb,
    0x00f60078,0x166007a0,0xcd834cd5,0x8004fbaa,0x2c800fdd,0x9079a697,
    0x03bdffff,0x01d803d0,0x3a1d3076,0x41d05d32,0x7c1d8078,0x6c025c00,
    0x3d5b1e21,0x0ffd825c,0x01660254,0x46881320,0x20b7004b,0x4c00f401,
    0x20d32d85,0x0027441d,0x2e01aeb7,0x3447c3d3,0x3a0002c8,0x3b00ec01,
    0x323a63b8,0x80481d03,0x25c0241d,0xd51e23c0,0xff884b8d,0x2d406983,
    0xb01a2002,0x7cc00f43,0x0f405980,0x47cc2cc0,0x3a03b069,0x360e9803,
    0x23c65404,0x059059ac,0x3600f400,0x85b07601,0x01d00fcc,0x1b803b00,
    0x11a6025c,0x84b8590f,0x807e06fa,0x2601e43c,0x069ad407,0x016605d0,
    0x20b3003d,0x03b069cc,0x1e8807e2,0x2b6a02e8,0xc8256d45,0x007a0002,
    0x2a0ec03b,0x03a04f84,0x59007600,0x21ec04b8,0x90970078,0x8826c05f,
    0xb007ec1f,0x0791f00b,0x02cc0990,0x4166007a,0x03b06af8,0x207b02d4,
    0x79b301f8,0x5904bf88,0x200f4000,0x3a07601d,0x0e81bea2,0x6401d800,
    0x0b9025c2,0x212e00f1,0x0674405f,0x3bfb09d1,0xc800fb98,0x074c00fb,
    0x01e80b30,0x1bea0598,0x20ba00ec,0x4075405b,0x3ee80ef8,0x74000590,
    0x3b00ec01,0x91dddb30,0x0001d09f,0x5c2c803b,0x882ed444,0x19097007,
    0xfdbfd100,0x3fee7207,0x3001dfed,0xfff5009f,0x8bffffff,0xfffffff8,
    0x1ffffd83,0x7ffec6e8,0x74ff305f,0x7fcc4fff,0x706f81ff,0xffffc85f,
    0x3ffe04ff,0x72ffffff,0x7ec3ffff,0x01980fff,0x7ffffff4,0x3ffff601,
    0x2fffffff,0x3ffffffa,0xffff902d,0x1fffff07,0x04d44000,0x00135300,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x20000000,0xbccccccb,0x66664c01,0xccca802c,
    0x224ccc81,0x04cccccc,0x88f3332e,0x00724ccc,0x00c88000,0x0220005c,
    0x01000100,0x0c000200,0x00040400,0x64000008,0x7774c1ee,0x77777641,
    0x7d531eee,0x05dd7555,0x1f3aaaa2,0x202bf260,0x2aa22dda,0x2602aaeb,
    0x2a22acea,0x077a62ee,0x3fc88000,0xc8801e80,0x848cffff,0xcacfffda,
    0x77ff64c0,0x7fec401c,0x7f5402ef,0xdeb82eff,0xffb1efe9,0xb33dd307,
    0xdd109dff,0x86ff5c5d,0xd9981e98,0x4cccd6c2,0x80ec0ec9,0xd8f800e8,
    0x2207b002,0x001a600f,0x4037203b,0x40000cfb,0x3d000cfb,0x260be980,
    0x2fea0ffc,0xb83fb510,0x40f5109b,0x17a60bfa,0xeb98df64,0xa97fd444,
    0x301d14ee,0x26cc5d9d,0x6f456ccc,0x201d8b71,0x7540ec2d,0x0ee01d80,
    0x4016ab50,0x402d80f8,0x40ec0069,0x3fc8805d,0x01dea800,0x0ba00f40,
    0x40b60fb8,0x0f2001f8,0x43d803e2,0x85f100fb,0x2e2f42f8,0xf301fb03,
    0x401fe640,0x030b601d,0x807603f3,0x1f16c05a,0x0b51aa00,0x1d800d30,
    0xb10013a2,0x3db3005d,0xb807a000,0x02e46807,0xd8598003,0x5f07c402,
    0x43447b80,0x2d825c1d,0x0fe407a0,0x0b601d80,0x0ec03d10,0x23c405b0,
    0x44f6003c,0x0069800f,0x003e88ec,0x2207ba60,0x740002fc,0x20013201,
    0x801aced8,0x5cbcccb9,0x32d800f8,0x3333333d,0x43441f33,0x1d825c1d,
    0x01e40760,0x016c03b0,0x9ad805d1,0x404eb999,0x10034c4b,0x26007b1f,
    0x7ccec006,0xbf500004,0x220027dc,0xeefeeeee,0x003d2eee,0x77f654c0,
    0xaabcfd80,0x803445eb,0xddddf53c,0x43dddddd,0x25c1d868,0x407601d8,
    0x8076002c,0x200fa02d,0xfffffffd,0x0f40f401,0x400dd500,0x7e6c0069,
    0x20000cfc,0x1fe40dea,0x26666600,0x361999ae,0x2a200002,0x4c03721f,
    0x25900785,0x0d100078,0x3b04b83b,0x02c80ec0,0x02d80760,0x2076009b,
    0x0d304e98,0x03d0012e,0x360034c0,0x000db11f,0x64403dd3,0x07a0002f,
    0x0c4004b8,0x201f9320,0xe801e859,0x22000fe0,0x825c1d86,0x6407601d,
    0x540f2002,0x7705c82f,0x416c01d8,0xfffffffc,0x000f4007,0x362c40d3,
    0xb1004c81,0x76cc005d,0x201e8001,0xa9d400f8,0x0e89e405,0x0d30bb10,
    0x007d44c8,0x83b0d102,0x6c03b04b,0x44005901,0x0bbb220e,0x3625c0b7,
    0x4fc2d401,0x2d999999,0x98007a00,0x03b1a206,0x7e4403f1,0x37aa0003,
    0x5007a001,0x21db105d,0x46a884fa,0x05dfa83c,0x01d903d9,0x3f9103d9,
    0x2e0ec344,0x0ec03b04,0x7e4002c8,0x4bfb4fed,0xffffffff,0x2600ec4f,
    0x16a02d45,0x26001e80,0x03b1a206,0x067dc12e,0x0cfb8000,0xe9801e80,
    0x20bfedde,0xfedefcca,0x6efec41e,0x85ff99ef,0x04fecefa,0x7f6ef7d4,
    0x8bfff20c,0x43fee5fd,0x7cc7fffb,0xffffb5ff,0x5009ffff,0x36000003,
    0x0b61ec01,0x0f4003e0,0x3440d300,0x207c4076,0x800000de,0x07400fc8,
    0x00355100,0x50035531,0x35300013,0x05544001,0x00000000,0x00000000,
    0xb301d800,0x7900788b,0x98007a00,0x03b1a206,0x000021e4,0x00000200,
    0x00000000,0x00000000,0x00000000,0x00000000,0x7ffffec0,0x7e43dfff,
    0xfff82fff,0x7ffc40ff,0xf983ffff,0xffffffff,0xffffb6ff,0x009ff30b,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xe8800000,0xddd705ee,0x717bb625,0x77445ddd,0x7775c5ee,
    0x2601502e,0x455511aa,0x77540ccc,0xda806404,0xdddddddd,0x000a25dd,
    0x22220004,0x88888888,0x7fffe408,0x007fffff,0x00000000,0x00000000,
    0x9f980000,0x417b3100,0x7d440ce9,0x04f5cc0b,0x40276e62,0x27ff702d,
    0x3ffa6ff8,0x7017fec0,0x2aaa20dd,0xaaaaaaaa,0x3ee0fa21,0x03bfa60d,
    0xfffffd06,0xffffffff,0x2eeeea1f,0x003bbbbb,0x00000000,0x00000000,
    0x03d00000,0x87d101d0,0x007402e8,0x502d803d,0xb2ffc5ff,0x40bff0ff,
    0x0004c8e9,0x3e24e880,0x2a3d33ff,0x0001721f,0x00000000,0x00000000,
    0x00000000,0xf88f2000,0x3e881e23,0x097005d1,0x2d86e1a6,0x87fe6351,
    0x31bf24fe,0x87a203ff,0xb000002e,0x1a8fff49,0x0077674c,0x00000000,
    0x00000000,0x00000000,0x25400000,0x202ccdd7,0x1001ece8,0xd707901f,
    0x3bfb9d9f,0x3fd83fe2,0x0bf917ea,0xc87e21f4,0xffffffff,0x50206fff,
    0x00571001,0x00000000,0x00000000,0x00000000,0x34400000,0x00ee1d3d,
    0x790017e6,0x7e440788,0xfc8ff02e,0x1fd13e62,0x07541320,0x11111111,
    0x00000111,0x00000000,0x00000000,0x00000000,0x00000000,0x277788f8,
    0x6cfcc01d,0x971a2004,0x203f9b00,0xf107dc5e,0x09027c47,0x000001b8,
    0x00000000,0x00000000,0x00000000,0x00000000,0x4bad8000,0xe9803ed3,
    0x2d801361,0x26d5003e,0x1441980f,0x0019106c,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x43d77000,0x07aa06ae,0xab4c0136,
    0xb907c405,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x2e374c00,0x401d504e,0x3d3d005d,0x00281880,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x20fe227c,
    0x7dc7fffc,0x6fa807ff,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_29_usascii_x[95]={ 0,6,3,2,2,2,3,6,7,3,0,1,3,2,
5,2,2,2,2,2,2,2,3,2,2,3,5,3,0,1,0,0,2,0,1,1,1,1,1,1,1,2,2,1,
1,0,0,0,2,1,1,2,1,1,0,0,1,1,2,0,0,0,2,0,5,1,0,2,1,1,2,1,1,2,
2,2,2,0,1,1,0,1,2,2,1,1,0,0,1,1,2,0,7,0,2, };
static signed short stb__courier_29_usascii_y[95]={ 21,4,5,4,3,5,7,5,5,5,5,7,17,13,
17,3,4,5,4,4,5,5,4,5,4,4,10,10,7,11,7,5,4,6,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,3,5,5,26,4,9,5,9,5,9,5,9,5,4,
4,5,5,9,9,9,9,9,9,9,6,10,10,10,10,10,10,5,5,5,11, };
static unsigned short stb__courier_29_usascii_w[95]={ 0,4,10,12,11,12,10,4,5,5,10,13,7,12,
5,11,11,11,11,11,11,11,11,11,11,11,5,7,13,14,13,10,11,16,13,13,14,13,14,14,14,11,13,14,
13,16,15,13,12,14,15,12,13,14,16,15,14,14,11,5,10,5,11,17,5,13,14,12,14,13,12,14,14,12,
9,13,12,16,13,13,14,14,12,11,13,13,15,15,14,14,11,6,2,6,12, };
static unsigned short stb__courier_29_usascii_h[95]={ 0,18,8,19,21,17,15,8,20,20,10,14,8,2,
5,21,18,16,17,18,16,17,18,17,18,18,12,14,14,6,14,17,19,15,15,16,15,15,15,16,15,15,16,15,
15,15,15,16,15,18,15,16,15,16,15,15,15,15,15,20,21,20,7,3,5,13,17,13,17,13,16,17,16,17,
22,16,16,12,12,13,17,17,12,13,16,12,11,12,11,16,11,20,20,20,5, };
static unsigned short stb__courier_29_usascii_s[95]={ 250,112,134,99,11,13,175,145,75,81,123,
104,150,228,191,34,129,201,1,153,189,68,117,41,165,141,250,247,90,170,76,
80,87,15,1,242,215,201,186,213,160,148,228,61,47,230,72,175,135,177,88,
16,58,1,29,119,104,32,46,63,23,69,158,210,185,143,53,118,26,171,91,
235,104,222,1,119,162,185,202,157,192,207,216,131,133,229,107,76,92,147,243,
53,60,46,197, };
static unsigned short stb__courier_29_usascii_t[95]={ 14,1,74,1,1,24,42,74,1,1,74,
59,74,74,74,1,1,24,24,1,24,24,1,24,1,1,1,42,59,74,59,
24,1,59,59,24,42,42,42,24,42,42,24,59,59,42,42,24,42,1,42,
42,42,42,42,42,42,59,42,1,1,1,74,74,74,59,24,59,24,59,24,
1,24,1,1,24,24,59,59,59,1,1,59,59,24,59,74,74,74,24,59,
1,1,1,74, };
static unsigned short stb__courier_29_usascii_a[95]={ 246,246,246,246,246,246,246,246,
246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
246,246,246,246,246,246,246, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_29_usascii_BITMAP_HEIGHT or STB_FONT_courier_29_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_29_usascii(stb_fontchar font[STB_FONT_courier_29_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_29_usascii_BITMAP_HEIGHT][STB_FONT_courier_29_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_29_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_29_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_29_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_29_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_29_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_29_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_29_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_29_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_29_usascii_s[i] + stb__courier_29_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_29_usascii_t[i] + stb__courier_29_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_29_usascii_x[i];
            font[i].y0 = stb__courier_29_usascii_y[i];
            font[i].x1 = stb__courier_29_usascii_x[i] + stb__courier_29_usascii_w[i];
            font[i].y1 = stb__courier_29_usascii_y[i] + stb__courier_29_usascii_h[i];
            font[i].advance_int = (stb__courier_29_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_29_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_29_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_29_usascii_s[i] + stb__courier_29_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_29_usascii_t[i] + stb__courier_29_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_29_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_29_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_29_usascii_x[i] + stb__courier_29_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_29_usascii_y[i] + stb__courier_29_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_29_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_29_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_29_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_29_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_29_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_29_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_29_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_29_usascii_LINE_SPACING
#endif

