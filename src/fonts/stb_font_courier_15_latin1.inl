// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_15_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_15_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_15_latin1_BITMAP_WIDTH         256
#define STB_FONT_courier_15_latin1_BITMAP_HEIGHT         64
#define STB_FONT_courier_15_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_15_latin1_FIRST_CHAR            32
#define STB_FONT_courier_15_latin1_NUM_CHARS            224

#define STB_FONT_courier_15_latin1_LINE_SPACING           7

static unsigned int stb__courier_15_latin1_pixels[]={
    0x80018810,0x00300102,0x00040010,0x30001000,0x00100980,0x70c40800,
    0x2a800000,0x44004c19,0x8001010b,0xbb980400,0x0a8cc018,0x44a60020,
    0x02cc1b80,0x02440720,0xc80f2a16,0x91024c00,0x03319819,0x22a09039,
    0x81799302,0x8199101c,0x32a1cc2b,0x1e540171,0x4000cc88,0x226240ad,
    0x804980cb,0x20e600c8,0x41b9aa29,0x024c0308,0x00987724,0x20044007,
    0x4c620028,0x80500a01,0x066330a2,0x5440dc14,0x1405c901,0x05070a28,
    0x2310386a,0x990a2819,0x39839654,0x06202ca8,0x12050050,0x0595070a,
    0x771c401c,0xc8b82ca8,0x32a4c83c,0x32a16542,0x216541cc,0x1cc88cc9,
    0x39911993,0x33223326,0x64c66331,0x1222cccc,0x07105995,0x4c733326,
    0x922ccccc,0x2a1cccc9,0x332a02e1,0x1cccc982,0x641c90a6,0x21d47220,
    0x99502cca,0x99999305,0x88e00a25,0x1e44751c,0x2a870197,0x990ea391,
    0x48531261,0x981d4722,0x70ea3912,0x1c383870,0xa866131c,0x25c1a1c1,
    0x1980bba8,0x3091c1a8,0x01c43503,0x480cc097,0x546838a6,0x025c0dc0,
    0x4e0d412e,0x02a38028,0x0350d437,0x8152a871,0x9090321b,0x1b81514c,
    0x1b815298,0x87070e0e,0x54330383,0x981b0611,0x20dc01a9,0x4611a819,
    0x1a81982c,0x01a9981c,0x224a6033,0x1c41c583,0x4cc06a66,0x8611a81a,
    0x1072b805,0x2e071487,0x38838d40,0x25307032,0x4c1c41c4,0x41c71072,
    0x20e1c1c3,0x4d543303,0x21c70b04,0x206614c1,0x41c449aa,0x1441a819,
    0x8066071c,0x2341c29c,0x40e38703,0x126aa0e3,0x70c85032,0x017710e0,
    0xc8e0700e,0x14e40e24,0x394c1c0e,0x0e1c1c70,0x8cc7070e,0x412aea19,
    0x5970e386,0x75033097,0x03309095,0x1c709035,0x21660198,0x1541c683,
    0x41c7038e,0x59904aba,0x2a0e3839,0x01702a82,0x54e2a838,0x0e16602c,
    0x41ca60aa,0x070e0e2a,0x46638387,0x21846a19,0x5d55d439,0x03301a82,
    0x3090c235,0x45303503,0x982baaba,0x20e0a601,0x4190a61b,0x542baaba,
    0x8d42baab,0x8e053030,0x0cc06429,0x0a69b048,0x53001c19,0x980c8530,
    0x2a0c8531,0x4c350661,0x4c330d41,0x8e0d4331,0x4c241c0c,0x83503301,
    0x2a0660e3,0x4241c901,0x41c12019,0x06de5448,0x8907120e,0x81d41c1a,
    0x806de543,0x1101a819,0x0e06de54,0x2f2a0480,0x6544880d,0x3abc80db,
    0x32075790,0x088443ab,0x4b999bb3,0x7d71f5c2,0x39bb9300,0x97333766,
    0x39bb9329,0x7d7002ea,0xddc99f5c,0x20aaaa1c,0x808140ab,0x5cfae3eb,
    0x6ccfae3e,0x2005cccd,0x6e40100b,0x8080004d,0x2aa01aa9,0x5540402a,
    0x0080100a,0x00008008,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x280e3800,0x00280140,0x02802a80,
    0x20110022,0x1100a031,0x00041c70,0x501c7000,0x04400880,0x40110140,
    0x40546602,0x4a6010b8,0x2e203100,0x1004cc03,0x030c1541,0x807501d4,
    0x22ee202b,0x2014c41a,0x0377502b,0x22e06eea,0x2ee07502,0x54430c3a,
    0x19991019,0x0c304bb8,0x2eea02b8,0x40377501,0x3aac882b,0x0c220750,
    0x500cb898,0x75370773,0x21b88b98,0x200babc9,0xcc98aa4a,0x0301cc88,
    0x73004018,0x06609911,0x2030c010,0x8066e061,0xc985c701,0x81451ccc,
    0x88cc48aa,0x33333262,0x030c0082,0x40060186,0x32a0301a,0x0599502c,
    0x47322195,0x47070e18,0x3802988d,0x5cc1c1c0,0x64c3260b,0x0e4c3261,
    0x5c43c88e,0x177301bc,0x81c9864c,0x36e20bb9,0x05dcc1bc,0x0cc29866,
    0x5c406ae2,0x0546a29b,0xbb98706a,0x10177300,0x97103797,0x220c8037,
    0x12e01bcb,0x71320970,0x0e21b314,0x7053158e,0x1c098e59,0x21b86e1c,
    0x4350a21a,0x1748e228,0xb86e0e04,0x5c2886a1,0x5dd446e1,0x21b8aa0a,
    0x40661c43,0x22ea1aa8,0x32a6a4c8,0x54308d42,0x5c5506e2,0x7020e041,
    0x3810baa0,0x26035330,0x21ab81a9,0x985d54e3,0x33950a82,0x49711b85,
    0x321c1c1a,0x86a39999,0x4510d428,0x102a1719,0x99c81955,0x2886a399,
    0x31cccce4,0x23838175,0x30661c43,0x4d070135,0x9aa86a1a,0x41c38384,
    0x80caa883,0x2e00caa8,0x40655440,0x7071c0e3,0x0b9ce392,0x53510e12,
    0x85524c48,0x5556c383,0x42886a2a,0x5570a21a,0x3222ee1c,0x155556c0,
    0x2b614435,0xb7932aaa,0x151c1c15,0x540660cc,0xa8e0a0b9,0x095751c1,
    0x43838707,0x5c0c88bb,0x1c00c88b,0x70191177,0x4e0e381c,0xdc99c738,
    0x88388320,0xb920e229,0x00e1c1c2,0x86615c33,0x8711dc2b,0x300e0643,
    0x500e15c3,0x23887071,0x40660e38,0x50c438a2,0x42351c33,0x438710e1,
    0x70321c38,0x433020c8,0x2aea0643,0x555d42ba,0x47171c2b,0x1de5c01b,
    0x2a2c2988,0x4c350ee4,0x1e55dc41,0x3216f2f2,0x2f225bcb,0xaabb83bb,
    0x655dc44c,0x22de5e43,0x2a3cabb8,0xbbbb8838,0x4c165dc0,0x44175301,
    0x2f663aab,0x706a0cb9,0x205dddc4,0x5c0bbbb8,0x5dc4caab,0x2f6a4caa,
    0x6555dc3b,0x20e241c4,0xc88f21c4,0x315b3010,0x6c429881,0x0132d9bb,
    0x00807579,0x04c02002,0x80200080,0x0a501000,0xdc980800,0x004001cd,
    0x33376604,0x1000005c,0x40100100,0xeb8fae00,0x9f5c7d73,0x98950ce9,
    0xb99b82cd,0x415cdcc2,0x00008000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x99998800,0x00620440,0x09802666,0x01101330,0x26001001,0x82aa4400,
    0x2581abb8,0x03b300c5,0x0c981571,0x20310393,0x402ae201,0x348828cb,
    0xb82c5607,0x4ccc428c,0x02ca8199,0xba803011,0x8cddcc2c,0x1cc88cc9,
    0x2eaab2aa,0x598eeae2,0xb82aad80,0x4cd541ad,0x751d5d42,0x89803a80,
    0x31cc0003,0x80c8800b,0x750dc0c8,0x930a21a8,0x37095910,0x01a841d4,
    0x1a840000,0x4722300c,0x6441983a,0x711a9200,0xe87071dc,0x22885c0e,
    0x80e00e0a,0x3830a02b,0x1c10386a,0x10425408,0x08383797,0x0300bb98,
    0x22aae260,0x42886a09,0x13044101,0x98135333,0x9864c0bb,0x80bb981c,
    0x00c1bcb8,0x443702a3,0x000542cc,0x41c302a7,0x71449003,0xb81ba9c1,
    0x2ea05809,0x0e385102,0x3221c391,0x43910a81,0x2e00e1c0,0x066446e1,
    0x23119428,0x222886a3,0x066440cc,0x4551c14a,0x8510d41b,0x38106e2a,
    0x220e300c,0x35064323,0x70dc0597,0x200e0e03,0x21ee5c38,0xad8730bc,
    0x0f2ee24a,0xb9202e25,0x232a5b54,0x06ee5b50,0x022ee755,0x05419551,
    0x73333906,0x9c3b8198,0x21a8e499,0x3301982b,0x41c70538,0x38510d43,
    0x0caa8838,0x4e071806,0x0b92a00a,0x0cb880d8,0x42f98e0e,0x1267220a,
    0x4a603839,0x144531e8,0x49bc9853,0x4c2c8e44,0xc8838a8c,0x445dc591,
    0x15d5dc0c,0x30aaaab6,0x23280c83,0x2f6a2898,0x301985bc,0x13115283,
    0x86a1c1c5,0x2e1c1c28,0x8060c88b,0x06655071,0x060a20a8,0x71c1c701,
    0x261a870b,0x40170322,0x23507123,0x23a8e602,0x0e0ee28b,0x87145c75,
    0x0702980c,0x88438330,0x9a8731aa,0x1980cc00,0x38719944,0x2b8661c4,
    0xc870e21c,0x85318060,0x82e6ee0c,0xb020a20a,0x1986a388,0x4530e03a,
    0x0c70f20a,0x40e2482a,0x019101c9,0x3880ef22,0x771de440,0x07509955,
    0x30f2aee2,0x44932b83,0x0d40baab,0x81980cc0,0x440baab8,0xbc80bbbb,
    0x5ddc45bc,0x6555dc0b,0x32a18064,0xa82a80db,0xc8f90a20,0x5e40cbbb,
    0x40cc0c3a,0x276a3bbb,0x2f660bbb,0x05de443b,0x6e5c4283,0xb104a800,
    0x08750075,0x95020000,0x15cc59bb,0x95004400,0x372a59bb,0x000002cd,
    0x80200002,0x19999999,0xb1066008,0x80206e49,0x00000200,0x10020080,
    0x10375550,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x44dd4000,0x26404c1c,0x8bb98595,
    0x819bb981,0x0112cccb,0x64654030,0x2601883c,0x0b259300,0x54110000,
    0x17710372,0x0a32e000,0x3065c791,0x65c15999,0xccc981cc,0x8b2e22cc,
    0x22ccccc9,0x644ccccc,0x32e4c88c,0x9930004c,0x46e00399,0x2eb222d8,
    0x531214c3,0x688e6354,0x804982e0,0x49866404,0x0e4072a2,0xa84c88dc,
    0x3b930cbb,0x4e001e40,0xc9bb9818,0x1a81a840,0x0c88e06a,0x38a8398e,
    0x83500a92,0x5438cce3,0x20070a21,0x30066019,0x54550e19,0x14c902a0,
    0x01090a12,0xd900e05c,0x48190999,0x21c00198,0x0cc03848,0x332238b8,
    0xb1540700,0x02cb9c87,0x221c0e29,0x738170e3,0x46a05314,0x87199c30,
    0x9990a21a,0x98066037,0x43859101,0x5306a02a,0x38805112,0x4ce05c00,
    0x0640483c,0x9910660e,0x26488701,0x1981ccec,0x03307388,0x64701393,
    0x0172d438,0x27260971,0x9c2438e1,0x18ad40bc,0x4c2126aa,0xa99aa811,
    0x0cc0e1c2,0x03b88330,0x440b6217,0x28853904,0x15551440,0x57381702,
    0x44990120,0x03301983,0x01c25c17,0x98392066,0x381bca81,0x44350e19,
    0xa81bb982,0xbac8e2ad,0x0cd94c0c,0xa82ee2a2,0x406604ab,0x1c2baaba,
    0xabcaa82e,0x025c1982,0x220a6aea,0x02c16604,0x0e193124,0x201cc817,
    0x02ca9c04,0x54066033,0x9807092c,0x330714c1,0x0e5c02a0,0x20a21a87,
    0x70701ab9,0x0eaae01c,0x46a1dca6,0x2a033030,0x2a270a21,0x0cc03304,
    0x0cc01e44,0x20530122,0x7032140c,0x12720e24,0x9801c038,0x12003301,
    0xcb83300e,0x80cc0ecc,0x777990c4,0x20a21a81,0xa8701ab9,0x71c700e1,
    0x350e65dc,0x35019838,0x06ab2144,0x80660198,0x989102c9,0x66404803,
    0x56e441ca,0x06eb264b,0xab981c4e,0x19801c3b,0x21200330,0x8e00cc03,
    0x2e2cddca,0x2313ccce,0x2e4bb100,0x74c16edc,0x33ae2ccc,0xcec8eb84,
    0x6ecc045c,0x6ee45ccc,0x6c46ec43,0x8099d70d,0xcddc9808,0xaa982601,
    0x16666740,0x01005555,0x5a804030,0x4c0c0772,0xbb9501aa,0x33772a59,
    0x26355302,0x3260ccec,0x76441cdd,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x32606600,0x47910ccc,0x5c7910cb,
    0x6647950c,0x9e5c7972,0x31cccccb,0x5c332399,0x664c1bcc,0xca8000bc,
    0x0599902c,0xa8179993,0x2a39910c,0x32e22c84,0x0177101b,0x30371577,
    0x30e4c177,0x0cddc439,0x6442aeea,0x06a03730,0x9bbaa954,0x2311882c,
    0x2e0cbbb8,0x81980ee3,0x21a82e0a,0x4550d41a,0x241c3828,0x70d4510e,
    0xa8551443,0x01dc1911,0x500e04b8,0x71320dc3,0x7012a2c8,0x420dc550,
    0x70dc154b,0x388e09c3,0x86a29966,0x2000a209,0x43a5566e,0x904cb149,
    0x98032388,0x90530a81,0x1c4640e2,0x43872b9c,0xa8621c38,0x5c288191,
    0xc88706a0,0x406a6602,0x70e0d403,0xc92e1c35,0x384aa883,0x4ddd4c38,
    0x26667229,0x0e39dce3,0x981ac882,0x22220a20,0x8e333800,0x1201b359,
    0xcc8065c4,0x04883cdd,0x26401771,0x510e9938,0x02e7205c,0x0a20366a,
    0x1b88d453,0x1c703930,0x4cd54038,0x2e1c9383,0x5dc39999,0x23838488,
    0x1aaca8ab,0x286aaab2,0x801c5177,0x88260ca8,0x1dddddc2,0x3238cce0,
    0x80320994,0x2019804c,0x900aa00c,0x1cee2e07,0x19590924,0x881b3b50,
    0xd9b51442,0x1c0da801,0x57500e07,0x27138575,0x3874c9c3,0x38e21c24,
    0x2601c12a,0x02a1ba9b,0x198e21c3,0x8aa000aa,0x2590e333,0x44305c3b,
    0x0cc0488c,0x0660a1a8,0xab82a9a8,0x98a83a98,0x86a01382,0xa82a1444,
    0x07260911,0x20aeaaea,0xb8350543,0x9c38b8e0,0xaabb872a,0x1dddc44c,
    0x32f32ee6,0x0b2aee22,0x5d5dc34d,0x032eaee2,0x2a0b7979,0x236add01,
    0x71b85749,0x4eeef663,0x403b24e8,0x41c38808,0x05c73019,0x7703c92e,
    0x543500e0,0x54488a20,0x02c88e61,0x150e120e,0xc870e0d4,0x0041c1c3,
    0x10020800,0x22008000,0x02200200,0x00000004,0xccccc800,0x13333324,
    0x3e989bb9,0x324b87b2,0x9d707702,0x6c3bb307,0x98999b91,0x014ee1dd,
    0x23eb8fae,0x30dcccec,0x4c5999bb,0x75c950ce,0x0000fae3,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x140a0000,0x999998aa,0x22222199,0x2bb24b08,0xbbbbbbb9,0x00000000,
    0x00000000,0x85711730,0x165cdc08,0x31cb8f26,0x08004c30,0x4c050c00,
    0x44415441,0x00220888,0x2222215c,0x997cc008,0x5710faaf,0x41b87504,
    0x2aaaaa6e,0x3332e2aa,0x001dc03c,0x00000000,0x00000000,0x26609e44,
    0x40b9661a,0xbd88a20a,0x833310db,0x47105c43,0xb82b95c4,0x8a622398,
    0x25bbbbba,0x26e1dc5d,0x7777713a,0x8d70c417,0x64ca799f,0x02020c1b,
    0x00000000,0x00000000,0x00000000,0x41500e20,0x38e0a209,0x21910e38,
    0x02628b8a,0x27901973,0x5d471c3c,0x9323803b,0x2452299a,0xa8111111,
    0xd11f0b63,0x00000040,0x00000000,0x00000000,0x00000000,0x260d4031,
    0x438e0a20,0x44a20e38,0x20260bfb,0x3a6d304c,0x9c8aaaa0,0x4ee3804c,
    0x66442e39,0x77777710,0x05142c01,0x00000000,0x00000000,0x00000000,
    0x22000000,0x4c357701,0x2aa20a20,0x265bbd80,0x88e6e1aa,0x0e6320bb,
    0x101b11b3,0x86006301,0x00010119,0x00000000,0x00000000,0x00000000,
    0x00000000,0x2f72a000,0x324d8803,0x11509705,0x03180311,0x24902088,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__courier_15_latin1_x[224]={ 0,3,1,1,1,1,1,3,3,1,0,0,1,1,
2,1,1,1,1,1,1,1,1,1,1,1,2,2,0,0,0,0,1,0,0,0,1,0,1,0,0,1,1,0,
0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,2,0,0,1,0,0,1,0,0,1,
1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,3,0,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,3,1,0,1,0,
3,0,2,0,0,0,0,1,0,-1,2,0,2,2,2,0,1,2,2,2,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,1,1,1,-1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,
0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__courier_15_latin1_y[224]={ 11,2,3,2,2,2,4,2,2,2,2,3,9,6,
9,2,2,2,2,2,2,2,2,2,2,2,5,5,3,5,3,3,2,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,14,2,5,2,5,2,5,2,5,2,2,
2,2,2,5,5,5,5,5,5,5,3,5,5,5,5,5,5,2,2,2,6,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,5,2,3,4,3,
2,2,3,3,2,5,6,6,3,1,1,3,2,2,2,5,2,6,10,2,2,5,2,2,2,5,0,0,0,1,
1,0,3,3,0,0,0,1,0,0,0,1,3,1,0,0,0,1,1,4,2,0,0,0,1,0,3,2,2,2,
2,3,3,2,5,5,2,2,2,3,2,2,2,3,2,3,2,2,2,3,3,4,4,2,2,2,3,2,2,3,
 };
static unsigned short stb__courier_15_latin1_w[224]={ 0,2,6,6,6,6,6,2,4,4,5,8,4,6,
3,6,6,6,6,6,6,6,6,6,6,6,3,3,7,8,7,5,6,8,8,8,7,7,7,8,8,6,7,8,
8,8,8,7,7,8,8,6,8,8,8,8,8,8,6,3,5,3,6,9,4,8,8,7,8,7,7,8,8,6,
5,7,6,8,8,8,8,8,7,6,8,8,8,8,8,8,6,3,2,3,6,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,2,6,7,6,8,
2,8,4,8,5,7,8,6,8,10,4,8,4,4,4,8,6,3,3,4,6,8,8,9,8,5,8,8,8,8,
8,8,8,8,7,7,7,7,6,6,6,6,8,8,7,7,7,7,7,6,8,8,8,8,8,8,7,7,8,8,
8,8,8,8,8,7,7,7,7,7,6,6,6,6,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
 };
static unsigned short stb__courier_15_latin1_h[224]={ 0,10,4,10,11,10,8,5,11,11,6,8,4,2,
3,11,10,9,9,10,9,10,10,10,10,10,7,8,8,4,8,9,10,8,8,9,8,8,8,9,8,8,9,8,
8,8,8,9,8,10,8,9,8,9,8,8,8,8,8,11,11,11,5,1,3,7,10,7,10,7,9,9,9,9,
12,9,9,6,6,7,9,9,6,7,9,7,6,7,6,9,6,11,11,11,3,9,9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,9,9,8,6,8,
11,10,2,9,5,6,5,2,9,2,4,8,6,6,3,9,10,2,4,6,5,6,9,9,9,9,11,11,11,10,
10,11,8,11,11,11,11,10,11,11,11,10,8,10,12,12,12,11,11,6,10,12,12,12,11,11,8,10,10,10,
10,9,9,10,7,9,10,10,10,9,9,9,9,8,10,8,10,10,10,9,9,7,8,10,10,10,9,12,12,11,
 };
static unsigned short stb__courier_15_latin1_s[224]={ 255,252,126,79,104,109,191,93,176,90,44,
232,121,165,150,245,95,109,10,176,116,24,31,1,8,47,217,252,248,108,87,
230,219,95,113,26,70,198,53,35,215,241,44,61,104,131,122,206,174,226,78,
236,206,243,44,35,26,17,10,172,141,137,96,181,140,140,15,184,242,167,101,
1,221,85,35,52,78,221,14,149,69,92,1,192,60,199,23,175,245,17,238,
126,79,224,133,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,255,251,214,
130,32,156,76,38,172,152,78,230,84,165,120,154,103,1,9,39,145,129,235,
177,117,50,71,62,54,63,73,114,189,198,147,201,192,95,182,215,82,207,118,
132,111,130,156,102,165,210,27,1,41,181,228,55,36,49,58,67,1,236,224,
124,183,167,158,188,82,45,158,91,10,54,71,99,107,138,145,123,116,147,86,
140,149,161,179,208,138,18,27,62,170,18,9,163, };
static unsigned short stb__courier_15_latin1_t[224]={ 1,1,56,14,1,14,37,56,1,1,56,
37,56,55,55,1,14,37,37,14,37,26,26,26,26,26,47,26,37,56,47,
26,14,47,47,37,47,37,47,37,37,37,37,47,47,47,47,26,37,14,47,
26,37,26,47,47,47,47,47,1,1,1,56,55,55,47,26,47,14,47,37,
37,26,37,1,37,37,47,56,47,37,37,56,47,37,47,56,47,47,37,47,
1,1,1,56,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,1,14,26,
37,56,37,1,26,55,26,56,47,56,55,26,55,56,47,56,56,55,26,14,
55,56,56,56,56,26,26,26,26,1,1,1,14,14,1,37,1,1,1,1,
14,1,1,1,14,37,14,1,1,1,1,1,56,14,1,1,1,14,1,37,
14,14,14,14,26,26,14,47,26,14,14,14,26,26,26,26,37,14,37,14,
14,14,26,26,47,37,14,14,14,26,1,1,1, };
static unsigned short stb__courier_15_latin1_a[224]={ 127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_15_latin1_BITMAP_HEIGHT or STB_FONT_courier_15_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_15_latin1(stb_fontchar font[STB_FONT_courier_15_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_courier_15_latin1_BITMAP_HEIGHT][STB_FONT_courier_15_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_15_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_15_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_15_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_15_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_15_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_15_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_15_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__courier_15_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__courier_15_latin1_s[i] + stb__courier_15_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__courier_15_latin1_t[i] + stb__courier_15_latin1_h[i]) * recip_height;
            font[i].x0 = stb__courier_15_latin1_x[i];
            font[i].y0 = stb__courier_15_latin1_y[i];
            font[i].x1 = stb__courier_15_latin1_x[i] + stb__courier_15_latin1_w[i];
            font[i].y1 = stb__courier_15_latin1_y[i] + stb__courier_15_latin1_h[i];
            font[i].advance_int = (stb__courier_15_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__courier_15_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_15_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_15_latin1_s[i] + stb__courier_15_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_15_latin1_t[i] + stb__courier_15_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_15_latin1_x[i] - 0.5f;
            font[i].y0f = stb__courier_15_latin1_y[i] - 0.5f;
            font[i].x1f = stb__courier_15_latin1_x[i] + stb__courier_15_latin1_w[i] + 0.5f;
            font[i].y1f = stb__courier_15_latin1_y[i] + stb__courier_15_latin1_h[i] + 0.5f;
            font[i].advance = stb__courier_15_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_15_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_15_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_15_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_15_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_15_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_15_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_15_latin1_LINE_SPACING
#endif

