// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_28_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_28_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_28_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_28_usascii_BITMAP_HEIGHT         84
#define STB_FONT_courier_28_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_28_usascii_FIRST_CHAR            32
#define STB_FONT_courier_28_usascii_NUM_CHARS             95

#define STB_FONT_courier_28_usascii_LINE_SPACING          13

static unsigned int stb__courier_28_usascii_pixels[]={
    0x00000ea0,0x200ccc40,0x33240001,0x00070013,0x2a600104,0x15971001,
    0x400d5440,0x054c0009,0x33333310,0x53005101,0x402a2013,0x99999998,
    0x00026609,0x98026600,0x9b20000a,0xd88d00ed,0x3bb61a66,0x000d100f,
    0x0dddf2d4,0x40016c7a,0xfb803a58,0x2602fecd,0x980edbce,0x980eecde,
    0x6400ccbd,0xa81decde,0x1eeeeeef,0xdfc817dc,0x676cc2dc,0x7775c1ce,
    0xd36eeeee,0xb800009d,0xcfe882fe,0x6c8001ee,0x323c4254,0x03a03e83,
    0x400057d4,0x4d701e2e,0x25980069,0xd103b207,0x6a81f107,0x2435c2e8,
    0x984c80e6,0x2e004a86,0x40274c2f,0x0ee3541e,0x00254698,0xcd82c800,
    0x80001aa0,0x407c7887,0xd503a07b,0x007bfd9d,0x3f80f1a6,0x96a00174,
    0x7440b507,0x20f81e41,0x2445d05b,0x1640102c,0x1fb8012a,0x12e00ba2,
    0x5c0110ec,0x00002543,0x970782c8,0x221e0000,0x02f883c7,0x220fc41d,
    0x785b003e,0x0b503ea0,0x10d14a80,0x3c6a803f,0xb81f4590,0x001222c5,
    0x8012a2d4,0x401321fa,0x400b500e,0x0002541e,0x82542c80,0x2aaa6068,
    0x443c2aaa,0x20b903c7,0x0cc12e0e,0xb03c34c0,0xb8007a09,0x00b50d13,
    0xd883447a,0x234c07e2,0x0003913b,0x400950f6,0x4003a0fa,0x2007903d,
    0xb714a868,0xdb88017b,0x2c8590ac,0x66540360,0x43c7cccc,0x1f503c78,
    0x001dc1d0,0x441e0f20,0x400b502f,0x0770b33b,0x2e2d4b20,0x40f12eee,
    0x40cd9878,0x075c4019,0x33bb6f6a,0x0930f980,0x3e207540,0x95097001,
    0x5f7557d3,0x2ea6fea0,0x82d42c9e,0x478001f8,0x103c7887,0x7c41d05f,
    0x20f10001,0x7401f507,0x3fffe200,0x592fffff,0x3254ee00,0x02ccb21d,
    0x2f72601e,0x01dfd900,0xdd537bf5,0x2770f981,0xf701cfeb,0x4003fb7b,
    0x80eea81d,0x4074c1e8,0x07c42ee8,0x3c00176c,0x34cf107a,0x503a0fe0,
    0x200159fd,0x1ee0f03c,0x4b600970,0x7002c84a,0x321d92a7,0x50780b32,
    0x260017b9,0x2dc002eb,0x2dcac9e2,0xbfd107d5,0x1e2001df,0x8d300fd4,
    0x20be601e,0x959b11db,0x3fa8f000,0x2017dde2,0x5100e84e,0x0f8809d9,
    0x201b20f0,0x971d800f,0x4b200770,0x32c83a4a,0x3766780b,0x3620000b,
    0x883e2003,0x3e21bae7,0xeb88ba61,0xd504a800,0x01621d00,0x777dc0ba,
    0x8f000773,0x7dde23fa,0x07427402,0x12e04c80,0x700d9078,0x0ee3d009,
    0xa8f4016a,0xd12c92e4,0xa8133c40,0x3c4002dd,0x54907a00,0x1ec7b00f,
    0x02d804c8,0x2a590095,0x0402d804,0xd1e00072,0x01a67883,0x2001d07f,
    0x7803e068,0x1f100f70,0xdddfdd70,0x401e8bdd,0xfc896a6a,0x6a81e4fd,
    0x002b8ea0,0x03b000ec,0x229702c4,0x1e01a207,0x31d805a8,0x8005b009,
    0x3c78000e,0xf881e3c4,0x40b10e82,0x780b7069,0x79001f50,0xb33f3310,
    0x206a8137,0x4c1e61e8,0x26407a1a,0xf800b0b0,0xf003a001,0x07c4b201,
    0x02cc0798,0x341f00f5,0xb70017c0,0x10f1e000,0x03ea078f,0xd817cc3a,
    0x07803d02,0x0d1005f1,0xec807678,0x3e21f440,0x3a0b7001,0x00961601,
    0x5403335c,0x78264085,0x405c81f4,0x80fea02c,0xf901ec4b,0x003ea005,
    0x1e21e3c0,0x0e82e40f,0xdb59dbd3,0x1e016a09,0x05b004d8,0x5c01e9a2,
    0x901fecef,0x36174007,0x47306405,0x0fdc42eb,0x0fc887f3,0x88ba27ec,
    0x71174c4c,0x200e801f,0x0eb83dca,0x6edc1ec4,0x00f64402,0x78878f00,
    0xd02f883c,0x02fb88c1,0x503c00f4,0x20d3001f,0x2a003a68,0x0fc400bf,
    0x37ba20a2,0xccc8805f,0x6efecc0c,0xefc881ef,0x5fe80efd,0x82fefec4,
    0x01efdfe9,0x4ff982c4,0x01bfbbf9,0x53b77b62,0xdbd71ffc,0x7880009d,
    0x03e3c43c,0x100e81ee,0xf006980d,0x5b003e80,0x2007cb30,0x99bdddfb,
    0x6defd42c,0x002a205f,0x15300110,0x8802a200,0x20026202,0x000000a9,
    0x330004cc,0x00026200,0x10972d40,0x03e83c8f,0x2034403a,0xa80f002d,
    0xb30d3006,0x2b36603c,0x103ddba9,0x00001575,0x00000000,0x00000000,
    0x00000000,0x20000000,0x1a01bd3d,0x6c34cdb1,0x0d100fee,0xddf00344,
    0x6c007a0d,0x00050c41,0x00000000,0x00000000,0x00000000,0x00000000,
    0x54c00000,0x0004fbaa,0x03331000,0x26000008,0x00000099,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x2ccccb80,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x2a000000,0x30010003,0x2aa259b9,0x100cccc1,
    0xaa880033,0x017bb731,0x30bddc98,0x50000155,0x55550555,0x20000998,
    0x2a200298,0x0262001a,0x4cc40030,0x44009999,0x2a2001aa,0x13331009,
    0xa9819988,0x01b2001a,0x3dfffd70,0xdfcadfc8,0x3bae2cf9,0x03fb607e,
    0xfacdc880,0x702feaae,0x95fd75df,0x0039019b,0x65c1e7e4,0x00bfae4f,
    0x6f66fe40,0x3f37f201,0x17fc400e,0x8803764c,0xeeefeeee,0xfdceea81,
    0x9dd706ae,0x76cd19fd,0x3fba25ee,0xf99dd74e,0x00d9003d,0xb7060e64,
    0x880dd701,0x8000f807,0x2e981eea,0x774c0f54,0xb000b602,0x2c82d405,
    0x4c274400,0x5c0dc80e,0x8b6b600e,0x0069bef8,0x0ea80b20,0x0db87f98,
    0x0ee37e4c,0x540fc5b0,0x34400006,0xdf017c40,0x0f807880,0x202fa800,
    0xb80be26b,0x000b602f,0xc80f40d3,0x30264002,0xd807c41d,0x10b6d304,
    0x59000344,0x7a803ea0,0x71b60354,0x81a2d807,0x2600001d,0x64069805,
    0x7c03c406,0x407a8000,0x880f30f8,0xaceaa82f,0x3600aaaa,0x0b205a82,
    0x4c806980,0xd05a8066,0x06880b63,0x0f40b200,0x1007a140,0x16c03b8d,
    0xaa984a80,0x7655402a,0x25c2aaaa,0x0f101a60,0x7bb711f0,0x2d805a80,
    0x885b0095,0xccccdecc,0x3a1a601c,0xaa88b201,0x4401e42a,0x2e16a006,
    0x06880b65,0x03c0b200,0xb8003440,0xb8016c03,0x07ccca83,0x66676e5c,
    0x3203cc4c,0x7c03c406,0x0eda9cea,0x7c401f50,0x2f880f31,0x6c000b60,
    0x45901662,0x0ec3cfe9,0x0ba00680,0x1016c1d1,0x4164000d,0x04a80059,
    0x2d807700,0x7800fa80,0xf100b300,0x22037c05,0xd81ff807,0x5c07f503,
    0x5f7017c7,0x980016c0,0x45900766,0x001f01eb,0x21720076,0xd1016c3c,
    0x5c164000,0x003b8004,0x02d80770,0x3c007b66,0xd7005980,0x406ec883,
    0x301f8078,0x207baa0b,0x40f542e9,0x0b602eea,0x0699d800,0x401d92c8,
    0x803b000e,0x2d86985c,0x40081a20,0x3304b82c,0x00ee1333,0x0b601dc0,
    0x1e001754,0xf7002cc0,0x0d3bf95b,0x00f80788,0x3eb2a0d1,0x702febbe,
    0x93fd77df,0x00016c05,0x59005bb3,0x003b00bb,0x360b901a,0x1a202d82,
    0x54164068,0xfeeed884,0x2e000b55,0x4a816c03,0xb3007800,0x1bdb9800,
    0x807880d1,0x2a0d100f,0x01799514,0x90accb88,0x00016c05,0x6fe401b6,
    0x401e400e,0x4c172068,0xbd99999e,0x07c0d100,0x00d10590,0x80034cf1,
    0x880ec04a,0x30078001,0x1a20000b,0x01f00f10,0x002541a2,0x3602c800,
    0x016c0002,0x980b73c8,0xbb04c806,0x77777540,0x0d104efe,0x203d007c,
    0x363c401f,0x40788002,0x3c00000f,0x00005980,0x80788095,0x2a0d100f,
    0x59000004,0x30001e40,0xb716400d,0x1a604c80,0x5b0002ec,0x01f03440,
    0x406a81e2,0x3007cc78,0xd502e81d,0x3c000440,0x80005980,0x03c402e8,
    0x5068807c,0x32000009,0x2a03a202,0x90016c04,0x36205c85,0x6c40ea85,
    0x016c0004,0x2175c0d1,0x0f6402e8,0x82fa87a8,0x43e982fa,0x9ff501fa,
    0xb3007800,0xcaaa9800,0x8078803e,0xa88d100f,0x0000aadc,0x0166d54c,
    0x3bfd9bd7,0x1afbaaa8,0x0b905900,0x1deddfc8,0x01a203d8,0x406880b6,
    0x02fedee9,0xfb9bdd30,0x37fa603b,0x3a600dfd,0x2e01eedf,0x3ff205ff,
    0x3fffffff,0xfffffff3,0x6665c0bf,0xffff901b,0x327fffff,0x7ff45fff,
    0x9999933f,0xcca80005,0x54c01ccc,0x33333201,0x17fdc04c,0x301fffea,
    0xfffff803,0xf106ffff,0x3fe2bfff,0x06ffffff,0x22000351,0x310009a9,
    0x0d440013,0x00002a80,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xa8800000,0x3333009a,0x43333333,
    0x01999998,0x26013330,0x804cc199,0x00998198,0x99988333,0x4ccc4019,
    0x99819981,0x81333019,0x99999998,0x2204cc40,0x4cccc099,0x4ccc4009,
    0x09999999,0x33333331,0x4cc41333,0x99980199,0x22099999,0x80199999,
    0x33310098,0x7f677e40,0x3bbbe66a,0x0feeeefe,0xdddddfdb,0x3bfb2017,
    0x77f7541e,0xa83dfd93,0x3bf22efe,0x977f540e,0x3eefeee9,0x8fbbfb20,
    0x3aa3ffeb,0x775c2eee,0xdddd11ef,0x744bdddf,0x3fba26ef,0xdddfd90e,
    0xfdb03bfd,0xdddddddd,0x3bbbfb6b,0x362feeee,0x3dfeeeee,0xddddddf0,
    0x777f6cbd,0xe981ceee,0x7f7441fe,0x4c1da84e,0x0d11667e,0x5c40e81f,
    0x100d101f,0x2601d10f,0x2601d306,0x8009500e,0x701d700e,0x88076009,
    0xd100e807,0x3d710760,0xe8b301e0,0x0790b200,0x640f0bb3,0x2ea80e84,
    0x1640dd50,0x4cf501e8,0x207c3445,0x6c0b500e,0x5b825c02,0x42dc03d0,
    0x012a01e8,0x40b901d0,0x401d005a,0x100e8078,0x2cc0760d,0x3a2cc078,
    0x0790b200,0x34c1e1e4,0x20d100e8,0x05903dca,0x166480d1,0x0e81f0d1,
    0x02d403a0,0x5c2d807a,0x1ec3d804,0x1d0012a0,0x22cc04d8,0x2203c1fb,
    0xd100e807,0x81d80760,0x03a2cc07,0x101e42c8,0x0f443c1f,0x207600e8,
    0x2c80f8ca,0x166001b0,0x01d0d0d1,0x201d0074,0x98744069,0x71e8800e,
    0x8009500b,0x1007d10e,0x1a24de8d,0x01d00f10,0xb00ec1a2,0x40288f05,
    0x7900a20e,0x360a3b80,0x0f803a03,0x590974a8,0x40007aa0,0x101d0068,
    0x903c80bb,0x0bab7007,0x00eae980,0x474004a8,0x89e003e8,0x1016668f,
    0x2201d00f,0x3e203b06,0x20254780,0x7901660e,0x16a04a80,0x07d301d0,
    0x1641e92a,0x037bfb30,0x5f401a20,0x803ecbaa,0x2001f068,0xfb8005de,
    0x80095001,0x001eeeae,0xa8756a1d,0x7403c404,0x6eeeeeee,0x05f503b0,
    0x013bbbbe,0x80bddddd,0x882cc03c,0x7777400f,0x92a05ffe,0x9801645a,
    0x34401edb,0xfeccce80,0x95076001,0x0007cc00,0x4a80276c,0xfb8ff400,
    0x2591d802,0x7880952c,0x99999e80,0xdddb06a9,0x4fc03bfd,0x4f404b99,
    0x1e405a99,0x016c1660,0x54ccccf4,0x6c4a80dd,0x26000b22,0x401a200e,
    0x8007640e,0x2000ec4a,0x5d5b8007,0x0d409500,0x801d107a,0x5d6a1f2c,
    0x7403c403,0x2b60d100,0x98f00199,0x0b107403,0x425403c8,0x00e8085b,
    0xd112a1aa,0x2c800164,0x07401a20,0x27800754,0x00780068,0x00e8874c,
    0xe8590254,0x5dc05b80,0x402cbc69,0x100e8078,0x2000760d,0x400e8007,
    0x0b201e43,0xe83901d3,0x12a0f400,0x0ec16532,0x06880f20,0x016e01d0,
    0x8003b964,0x507a2007,0x3204a80d,0x01e80742,0xb3b12f2a,0xe8078803,
    0x0760d100,0x3a001e00,0x0791e200,0x407a0744,0x3600742c,0x47442542,
    0x2206d82c,0x401a201f,0x2007a00e,0xf0001d59,0x4c817400,0x42c812a0,
    0x4c09700e,0x0765c1dc,0x03a01e20,0x001d8344,0x00e80078,0x220791e2,
    0x5902642e,0x03e200e8,0x0b36a095,0xbb3073f6,0x1d006880,0xbe8034c0,
    0x200f0005,0xa81ec04c,0x01d0b204,0x3f4c03e2,0x3c403f44,0x06880740,
    0x00f0003b,0x23c401d0,0x21f5c43c,0x3a164069,0xa82ea880,0x320bba04,
    0x4ffdefc9,0xffffff30,0xffffd81f,0xb807f903,0xfff3002f,0xfd01ffff,
    0xfffb85ff,0xffffff35,0x365fffff,0xfc83ffff,0xe82fc40f,0xfffff886,
    0x3fee6fff,0x3fffe27f,0xffffffb3,0x7ffff403,0x3fff607f,0x7fffffff,
    0x3bfffffe,0xffffa81c,0xfb2fffff,0xbfffffff,0x0ffffb03,0x353005f3,
    0x00000001,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x22000000,0x804c4009,0x00019999,
    0x10000040,0x44040000,0x7b97500a,0x7bb95001,0x36e20311,0x015102cd,
    0x8816765c,0x55501aaa,0x17b95105,0xa982aa86,0x42aaa82a,0x55542aaa,
    0x222aaaaa,0x2f260aaa,0x6dc4aa20,0x033300bd,0xff80dfd5,0x7f77541e,
    0xdf71003f,0x001ed839,0xa8000680,0x43ffc44e,0x3eb9acde,0xb735bb10,
    0x7df509bf,0x7c41bf93,0x9ade987f,0x7e440dda,0x87f9702c,0xedb9bde8,
    0x9303f2e5,0x2dfc88d9,0x33a27edc,0x25eccccc,0xed89fcc8,0x5f910fbb,
    0x81db559d,0xbd107ff8,0x003b2a05,0x3600d3f1,0xbd50398c,0x01e20001,
    0x981ed980,0xd1000fff,0x27c40f60,0x32e403ea,0x0f441fff,0x300f06b8,
    0x1720590b,0xa834403a,0x740f440e,0x5d00ea80,0x7f40887d,0x6ff83d82,
    0x3a0d3d10,0xea5c00e9,0x20034401,0x44000cfb,0x2ec88007,0x20016dc0,
    0x2e03542d,0x5f101fc4,0x00f616dc,0x74c3b079,0x40ba12e0,0xd100e828,
    0x1e987540,0x401d3070,0x05d002fe,0x413fa1a6,0xd5983d68,0x0971e801,
    0xc8800598,0x01e2003f,0x00007f70,0x366aaa62,0x304026c2,0xf009500d,
    0x4770d300,0x2a0b23ec,0x0e800acf,0xaea80d10,0x07a6001e,0x074005d0,
    0x03fd8688,0x25b12ad1,0x789a200e,0x10000e80,0x0f1005db,0x00033ea0,
    0x666ffe40,0x000f42fd,0x3fffffea,0x4406ffff,0x4b30f006,0x4403a5af,
    0xd02efecb,0x2e01a201,0x07a2002f,0x0e8007a0,0x05f90d10,0x4d10e9a2,
    0x5b0ee00e,0x40005a80,0x99911ee9,0x79999f99,0x00006f4c,0x0b203b90,
    0x0698001d,0x100d1000,0x7566f10f,0x2a200688,0xd100e84e,0x01ebe980,
    0x3d002e88,0x68807400,0x4d101fb8,0x0074793b,0x2605a81d,0x800622fe,
    0x2aaa0dea,0x2aaaafba,0x50007ba6,0x007c4399,0x4002c859,0xf00002f8,
    0x1d05a801,0x2166ee59,0xd03e2008,0xea81a201,0x3d803d30,0xe8007a00,
    0x1f30d100,0xe8e89a20,0x82cc03a0,0x699e980e,0xdb3003b2,0x200f1003,
    0xfd000dea,0x3a60688d,0x05c034c2,0x3ec800d7,0x407a02dc,0x77d30fac,
    0x40e80970,0x2a0d901d,0xd80f4c0e,0x03d01d04,0x06880740,0x26e46880,
    0x7776403a,0x2c83feee,0x91007d32,0x03c4005d,0x98033ee0,0xb82d82ff,
    0x80ec82ef,0x82dd84e9,0x1fff35d9,0x27440dd8,0x1ee8bd50,0x4c883fb8,
    0x376c4598,0x1e980754,0xd01d02e4,0x88074003,0x44688006,0x9f80741e,
    0x86999999,0x702df40e,0x0f10007f,0x207f9100,0x9db105fb,0x3ff919fd,
    0xbedcefa8,0x377fee01,0x1bfe22ee,0x17f677dc,0x0f70be60,0x3b37f72a,
    0xdbfb00df,0x323ff15f,0x7ff45fff,0xfffff13f,0x3f61ffff,0x1fffffff,
    0x2e37ffdc,0x22001fff,0x9501d006,0x21dc1d80,0x0cfa82fa,0x000f1000,
    0x3fa176c4,0x000d4400,0x2600054c,0x0051009a,0x00000353,0x0026a620,
    0x000002a2,0x00000000,0x03440000,0x401d80e8,0xf907444a,0x0001dd87,
    0xe9800068,0x00007f14,0x00000000,0x00000000,0x00000000,0x00000000,
    0x22000000,0x6881d006,0xdea87880,0x010ff8de,0x00004000,0x55301c10,
    0x82db8f6a,0x541aaaa8,0x00002aaa,0x4732a002,0x7dd71eec,0x2aaaaaa6,
    0x800aaaaa,0xec802dc8,0x377776e3,0x2662dddd,0x99999999,0x00009999,
    0xffff9000,0x3ffff983,0xa83ffff9,0x1983ffff,0x00000000,0x36a00000,
    0xcdbeacee,0x76e443da,0x1ef65c2c,0x3ea001d0,0xc87ff401,0x25ff51ff,
    0xccccccca,0x0971cccc,0xc89d37d1,0x2e1fff32,0xdddddddd,0x3bbbb62d,
    0xeeeeeeee,0x0000003e,0x00000000,0x00000000,0x30000000,0xd127cc7f,
    0x07881a20,0xbf8800e8,0x47ff100e,0x3ff30ffb,0xc8bb0000,0x12f56e42,
    0x00000dff,0x00000000,0x00000000,0x00000000,0x80000000,0x00e87869,
    0x2012e05b,0xb72e800e,0xfa83fee0,0x0003fe27,0x2a007640,0x0002882d,
    0x00000000,0x00000000,0x00000000,0x00000000,0xe8785980,0x03a0b300,
    0x2e7a6fba,0x3626c0fd,0x7c43fd83,0xddd73fc6,0xdddddddd,0x00003505,
    0x00000000,0x00000000,0x00000000,0x00000000,0x0b300000,0x0f401d0f,
    0xfeb9816a,0x885b82cf,0x5f837c2e,0x33331374,0x13333333,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x43c2cc00,0x3b12a00e,
    0x220dd900,0x7ccd300e,0x02a83902,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x0b300000,0x0e801d0f,0xb1d300d3,0x07100009,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x0743c2cc,0x20164ee0,0x003d11e8,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x78598000,0x47c400e8,0x14c29806,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xff900000,0xfd17fc1f,0x003fc807,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_28_usascii_x[95]={ 0,5,3,2,2,2,3,5,7,3,0,1,3,2,
5,2,2,2,2,2,2,2,3,2,2,3,5,3,0,1,0,0,2,0,1,1,1,1,1,1,1,2,2,1,
1,0,0,0,2,1,1,2,1,1,0,0,0,1,2,0,0,0,2,0,5,1,0,2,1,1,2,1,1,2,
2,2,2,0,1,1,0,1,2,2,1,1,0,0,1,1,2,0,6,0,2, };
static signed short stb__courier_28_usascii_y[95]={ 20,4,5,3,3,4,6,4,4,4,4,6,16,12,
17,3,4,4,4,4,4,4,4,4,4,4,9,9,6,10,6,5,4,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,3,4,4,25,3,9,4,9,4,9,4,9,4,4,
4,4,4,9,9,9,9,9,9,9,5,9,9,9,9,9,9,4,4,4,11, };
static unsigned short stb__courier_28_usascii_w[95]={ 0,4,9,11,11,11,10,5,5,5,10,13,6,11,
5,11,11,11,10,11,10,11,10,10,11,10,5,7,12,13,12,9,10,15,13,13,13,12,13,13,13,11,13,14,
13,15,14,13,12,13,14,11,13,13,15,15,14,13,11,5,10,5,11,16,5,13,14,12,14,12,12,13,13,11,
8,13,11,15,13,13,14,14,12,11,13,13,15,15,13,14,11,6,2,6,11, };
static unsigned short stb__courier_28_usascii_h[95]={ 0,17,7,19,20,17,15,9,20,20,10,14,8,2,
4,20,17,16,16,17,16,17,17,17,17,17,12,14,14,6,14,16,18,15,15,16,15,15,15,16,15,15,16,15,
15,15,15,16,15,18,15,16,15,16,15,15,15,15,15,20,20,20,8,2,5,12,17,12,17,12,16,16,16,16,
21,16,16,11,11,12,16,16,11,12,16,12,11,12,11,16,11,20,20,20,4, };
static unsigned short stb__courier_28_usascii_s[95]={ 251,171,154,86,39,135,33,247,69,27,124,
57,147,202,196,51,123,175,153,147,164,159,176,199,187,240,132,84,71,164,44,
243,112,17,224,215,198,185,171,201,144,132,187,101,87,1,238,139,158,98,27,
1,13,229,42,116,72,58,212,63,75,33,135,214,178,92,210,106,225,119,13,
26,52,1,1,125,40,92,233,138,66,81,220,168,96,180,108,152,194,110,208,
20,17,10,184, };
static unsigned short stb__courier_28_usascii_t[95]={ 1,1,70,1,1,1,57,57,1,1,70,
57,70,70,70,1,1,23,23,1,23,1,1,1,1,1,57,57,57,70,57,
23,1,57,40,23,40,40,40,23,40,40,23,40,40,57,40,23,40,1,40,
40,40,23,40,40,40,40,40,1,1,1,70,70,70,57,1,57,1,57,23,
23,23,23,1,23,23,70,57,57,23,23,57,57,23,57,70,57,57,23,57,
1,1,1,70, };
static unsigned short stb__courier_28_usascii_a[95]={ 237,237,237,237,237,237,237,237,
237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,
237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,
237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,
237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,
237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,
237,237,237,237,237,237,237, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_28_usascii_BITMAP_HEIGHT or STB_FONT_courier_28_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_28_usascii(stb_fontchar font[STB_FONT_courier_28_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_28_usascii_BITMAP_HEIGHT][STB_FONT_courier_28_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_28_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_28_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_28_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_28_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_28_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_28_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_28_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_28_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_28_usascii_s[i] + stb__courier_28_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_28_usascii_t[i] + stb__courier_28_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_28_usascii_x[i];
            font[i].y0 = stb__courier_28_usascii_y[i];
            font[i].x1 = stb__courier_28_usascii_x[i] + stb__courier_28_usascii_w[i];
            font[i].y1 = stb__courier_28_usascii_y[i] + stb__courier_28_usascii_h[i];
            font[i].advance_int = (stb__courier_28_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_28_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_28_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_28_usascii_s[i] + stb__courier_28_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_28_usascii_t[i] + stb__courier_28_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_28_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_28_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_28_usascii_x[i] + stb__courier_28_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_28_usascii_y[i] + stb__courier_28_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_28_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_28_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_28_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_28_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_28_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_28_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_28_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_28_usascii_LINE_SPACING
#endif

