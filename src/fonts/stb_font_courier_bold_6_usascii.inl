// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_6_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_6_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_6_usascii_BITMAP_WIDTH         128
#define STB_FONT_courier_bold_6_usascii_BITMAP_HEIGHT         22
#define STB_FONT_courier_bold_6_usascii_BITMAP_HEIGHT_POW2    32

#define STB_FONT_courier_bold_6_usascii_FIRST_CHAR            32
#define STB_FONT_courier_bold_6_usascii_NUM_CHARS             95

#define STB_FONT_courier_bold_6_usascii_LINE_SPACING           3

static unsigned int stb__courier_bold_6_usascii_pixels[]={
    0x41104102,0x4c3144c0,0x4c0098a1,0xaa835020,0x0a042040,0x50222811,
    0x1a98aa21,0x18083062,0x705c4c28,0x71dd471c,0x53d9ac91,0x0e4c3257,
    0x9b8a6935,0x7551ce45,0x2899c466,0xaa8cc957,0x24dce6a4,0xa82e2733,
    0x1590eea4,0x45313144,0x0e72470c,0x13d9a41b,0x20b88e57,0x2a5915c8,
    0x2a1e645b,0x25754871,0xa8e6e383,0x1989753d,0x3926e795,0x51c49c87,
    0x5471c714,0x26316a2b,0x90e5952d,0x4550dc47,0x860760d8,0xa8c54e0b,
    0x25dc513b,0x70ee2775,0x0eba9e44,0x43bd8795,0x2386e629,0x008802a2,
    0x0370c131,0x80081000,0x80543328,0x00010001,0x0c007910,0x00000002,
    0x00000000,0x00000000,0x00000000,0x85442a20,0x88102118,0x83502a20,
    0x88210621,0x40442a08,0x20302218,0x08844410,0x84406084,0x1111a810,
    0xa9cc4504,0x52ce520b,0xc986d475,0x4288a6e3,0xdc86c6c4,0x8eb2b995,
    0xb92ea3d8,0x772d6c0a,0x497912a7,0x6476619a,0x5dcb2a59,0x751cd424,
    0x8e738ea2,0xbb8e32b8,0x3890eea5,0x21711d4c,0x447973ba,0x9b8f260c,
    0x43225dc3,0xa836e0a8,0x49771c0d,0x941b33ba,0x5ccee673,0x7715d4e2,
    0x2000aee7,0xe85b32d9,0x4e407620,0x2545b30c,0x4b3b1672,0x64bb74cb,
    0xd992ee49,0x25c0b392,0x880164c2,0x00000004,0x00000000,0x00000000,
    0x00000000,0x03130000,0x81080108,0x3200c410,0x220882a1,0x100c3510,
    0x4cc52853,0xa8106261,0x0a81101a,0x04202011,0x55c3a927,0x8b573a84,
    0x38930e8e,0x91c54b62,0x8e4caa65,0x227952c9,0x7526641d,0x5b316cc7,
    0x9088a664,0x56526e75,0x2b6074c3,0x8b316ea5,0x0361e40e,0x36a38bb9,
    0xa8dcbb33,0x427b502b,0xca83b500,0x5bc86664,0x8ccd8722,0x5d4e74bc,
    0x3ca89973,0x0ea0275c,0x22750b39,0x986cec1d,0x2dc80e2d,0x00000791,
    0xb8000000,0x5e40ef65,0x3706cec4,0x0000000b,0x00000000,0x00000000,
    0x0005bc80,0x082a6000,0x8a50c513,0x02eee1b9,0x00000000,0x00000000,
    0x40000000,0x24dce39b,0x00000501,0x00000000,0x00000000,0x39000000,
    0x0001b04b,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__courier_bold_6_usascii_x[95]={ 0,1,0,0,0,0,0,1,1,0,0,0,1,0,
1,0,0,0,0,0,0,0,0,0,0,0,1,1,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,1,0,0,0,-1,1,0,-1,0,0,0,0,0,0,0,
0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,1,0,0, };
static signed short stb__courier_bold_6_usascii_y[95]={ 4,0,0,0,0,0,1,0,0,0,0,0,3,2,
3,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,1,0,1,0,1,0,1,0,0,
0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,1, };
static unsigned short stb__courier_bold_6_usascii_w[95]={ 0,1,3,3,3,3,3,1,2,2,3,3,2,3,
1,3,3,3,3,3,3,3,3,3,3,3,1,2,4,4,4,3,3,5,4,3,3,3,4,4,4,3,4,4,
4,5,5,4,4,4,4,3,3,4,5,5,4,4,3,2,3,2,3,5,2,4,5,4,4,3,4,4,4,3,
3,4,3,5,4,3,5,4,4,3,4,4,4,5,4,4,3,3,1,3,3, };
static unsigned short stb__courier_bold_6_usascii_h[95]={ 0,5,3,5,5,5,4,3,5,5,3,4,2,1,
2,5,5,4,4,5,4,5,5,5,5,5,4,4,4,3,4,5,5,4,4,5,4,4,4,5,4,4,5,4,
4,4,4,5,4,5,4,5,4,5,4,4,4,4,4,5,5,5,3,1,2,4,5,4,5,4,4,5,4,4,
6,4,4,3,3,4,5,5,3,4,5,4,3,3,3,5,3,5,5,5,3, };
static unsigned short stb__courier_bold_6_usascii_s[95]={ 126,25,81,27,31,47,69,35,66,69,118,
65,47,50,45,80,1,61,73,5,77,9,102,98,89,43,126,125,45,108,35,
62,72,18,13,76,5,1,120,84,111,107,25,97,92,55,82,15,72,111,62,
21,54,16,48,24,40,50,88,35,122,13,89,54,42,30,116,35,106,58,67,
93,77,40,1,102,44,122,30,9,56,51,97,116,38,30,37,102,113,20,85,
11,9,5,93, };
static unsigned short stb__courier_bold_6_usascii_t[95]={ 6,1,12,1,1,1,12,17,1,1,12,
12,17,17,17,1,8,12,12,7,12,7,1,1,1,1,1,7,12,12,12,
1,1,13,13,1,13,14,7,1,7,7,7,7,7,12,7,1,7,1,7,
7,7,7,7,13,12,12,7,1,1,7,12,17,17,7,1,7,1,7,7,
1,7,7,1,7,7,12,17,13,1,1,12,7,1,12,17,12,12,1,12,
1,1,1,12, };
static unsigned short stb__courier_bold_6_usascii_a[95]={ 51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_6_usascii_BITMAP_HEIGHT or STB_FONT_courier_bold_6_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_6_usascii(stb_fontchar font[STB_FONT_courier_bold_6_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_6_usascii_BITMAP_HEIGHT][STB_FONT_courier_bold_6_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_6_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_6_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_6_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_6_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_6_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_6_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_6_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_6_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_6_usascii_s[i] + stb__courier_bold_6_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_6_usascii_t[i] + stb__courier_bold_6_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_6_usascii_x[i];
            font[i].y0 = stb__courier_bold_6_usascii_y[i];
            font[i].x1 = stb__courier_bold_6_usascii_x[i] + stb__courier_bold_6_usascii_w[i];
            font[i].y1 = stb__courier_bold_6_usascii_y[i] + stb__courier_bold_6_usascii_h[i];
            font[i].advance_int = (stb__courier_bold_6_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_6_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_6_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_6_usascii_s[i] + stb__courier_bold_6_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_6_usascii_t[i] + stb__courier_bold_6_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_6_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_6_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_6_usascii_x[i] + stb__courier_bold_6_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_6_usascii_y[i] + stb__courier_bold_6_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_6_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_6_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_6_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_6_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_6_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_6_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_6_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_6_usascii_LINE_SPACING
#endif

