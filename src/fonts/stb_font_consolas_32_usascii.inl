// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_32_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_32_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_32_usascii_BITMAP_WIDTH         256
#define STB_FONT_consolas_32_usascii_BITMAP_HEIGHT        138
#define STB_FONT_consolas_32_usascii_BITMAP_HEIGHT_POW2   256

#define STB_FONT_consolas_32_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_32_usascii_NUM_CHARS             95

#define STB_FONT_consolas_32_usascii_LINE_SPACING          21

static unsigned int stb__consolas_32_usascii_pixels[]={
    0x04000993,0x2654c000,0x00015793,0x99930620,0x40019999,0xccca8008,
    0x26004ccc,0x654c001a,0x000000ac,0x06600000,0x00000000,0x00000000,
    0x401fee00,0x000ba25d,0x53ffff4c,0x0019ffff,0xb877fc40,0x1fffffff,
    0x7fff6440,0xffff902d,0x3a001fff,0xffb1002f,0x001dffff,0x7ccdfb00,
    0xff70002f,0x37ec05ff,0x2e7fd800,0xfe8001ff,0x39dff32f,0xfffffd80,
    0x00ff704f,0x3ff63ff9,0x7ffc4002,0x3fb264df,0x320004ff,0x99933fff,
    0x5403ffb9,0xfffddfff,0xcccffc82,0x07fe004c,0x3bfffe60,0x001effff,
    0xfd0ffe20,0xbff7000b,0xff503fff,0x9ff60003,0xe8001ffb,0xffff32ff,
    0x3ff603df,0xf704ffff,0x23ffc80f,0x2001ffe8,0x4c00bffc,0x70001ffe,
    0x7d407fff,0x19ff701f,0x7e42ffb8,0xff510007,0x7ffc4015,0x1fff660b,
    0xa87fc800,0x3e2000ff,0x889fd12f,0x360004fe,0x007fee7f,0x544bffa0,
    0x82ffffcb,0x4ffa9998,0x7d40ff70,0x0fff884f,0x400ffd00,0x10003ffb,
    0xffa80bfb,0x202ff981,0x03fe46fc,0xfffff910,0xff903fff,0x01ffec07,
    0xff04ff80,0x23fcc009,0x037e46fc,0xfb9ff600,0xffe8001f,0x3fff9102,
    0x704ff880,0x1bfe20ff,0xf005ff98,0x7fc4009f,0xa8000004,0x04fe81ff,
    0x1ff21fe8,0x7ffffd40,0x441fffff,0x7fc406ff,0x0ffa8006,0x5400ff90,
    0xf337d47f,0xfd80003f,0x0007fee7,0xf7007ff6,0x4ff880bf,0x3f20ff70,
    0x0ffec01f,0x000ffe20,0x00000bfd,0xfb83ff50,0x649f9006,0xfff9807f,
    0xb98dfb9c,0x401ffdc0,0x74001ffe,0x0bfe205f,0xf707fcc0,0x00027f4b,
    0x3ff73fec,0x03ffb000,0x4401fff0,0x0ff704ff,0xf1009ff3,0x3ff880df,
    0x102ff400,0x99999999,0x7fd40199,0xa8017f41,0x201ff27f,0x13f22ffd,
    0x7001ff90,0x7cc005ff,0x037ec02f,0xf88cff88,0x001ff93f,0x76776dd4,
    0x4c7fee7f,0xfb03dfdb,0x5ffb003f,0xb827fc40,0x00ffd87f,0x4405ff70,
    0x7f4003ff,0x3fffe605,0x00ffffff,0x7fa87fea,0x8898aa88,0x201ff27f,
    0x01fec7ff,0x7d401ff6,0x1bf2003f,0x4007fea0,0x36fffffb,0x3a2005ff,
    0xffffffff,0x3ea3fee7,0xd85fffff,0xffc801ff,0x413fe201,0x2ffc47fb,
    0x40bff100,0x74003ff8,0x3332205f,0x0ffecccc,0xfd87fea0,0x3ffff624,
    0x3f21ff1f,0x20fff807,0x37f402ff,0x004ff980,0x3a007ff1,0x3faa005f,
    0x4017fa4e,0xbabdfff9,0x3fee7ffd,0xfecbdffc,0x00ffec4f,0xf1007ff4,
    0x51fee09f,0xfe8005ff,0x03ff100f,0x0005fd80,0xfa803ff2,0xfe87fe1f,
    0xff0fffcf,0x3601ff23,0x007fe4ff,0x3e600dff,0x1ff7005f,0x003fee00,
    0x001ff700,0x7ec07bfa,0x0bfffee7,0x7e41ffd1,0x3ff2600f,0x827fc405,
    0x03fec7fb,0xb817fdc0,0xffa8007f,0x1ff90000,0xf88ffd40,0x2e1ff50f,
    0x7e4bfa7f,0xefff9807,0x7fc00ffb,0x09ff3006,0x88013fa0,0x260003ff,
    0xff7002ff,0xf73fec05,0x3fee03ff,0xfb03ff23,0x801fffff,0xff704ff8,
    0x98005ff8,0x3ee624ff,0xff88004f,0x7e4001ae,0x47fea00f,0xc93f66fa,
    0x7e4bfa6f,0xffff5007,0x7ff801ff,0x007ff300,0xc8003ff5,0x3fa0007f,
    0x01bfa005,0x17fdcffb,0x7e49ff10,0x77ffec0f,0x4ff8800c,0x7fc4ff70,
    0x4ff88005,0x005dfff7,0x3fffe440,0x401ff900,0x2bf71ffa,0x97f62ff8,
    0x00ff91fe,0x7ffffec4,0x00ffd00c,0x3600bfea,0xff98006f,0x0ffb8002,
    0xb017fe00,0x00ffdcff,0x0ffc97fe,0x44003fe4,0x4ff704ff,0xf0004ff8,
    0x3bffeebf,0x7fdc0002,0x3ff2007f,0x647fea00,0x741ff54f,0x7e43fe3f,
    0xffd88007,0xffd83fff,0x01ffc801,0x80017fc4,0x7c4005fe,0x3dffd33f,
    0x6c04ff88,0x007fee7f,0x07fdcdff,0x22001bf2,0x4ff704ff,0xf0003ff9,
    0x7fe4c4df,0xeff88005,0x3f20009a,0x47fea00f,0xf8ff73fd,0x7e43fe2f,
    0xdbfb0007,0xffb87fff,0x807ff804,0x2a0007fc,0x3f6001ff,0xffffff56,
    0x201ffcc1,0x07fee7fd,0x3fdcdff0,0x440037e4,0x4ff704ff,0xf0004ff9,
    0x01fee0df,0x0003fea0,0xf5007fe4,0x7e4ff63f,0x7c47fe66,0x4001ff27,
    0x3fff52fe,0x2e037fc4,0x4ff803ff,0x027fc000,0x9fd0ffa8,0xff897fa2,
    0xf73fec04,0x27fc403f,0x0df90ff7,0x209ff100,0x13fe27fb,0x982ffc00,
    0x7e4001ff,0x3ff20005,0x747fea00,0x7d4df92f,0x7e4bf50f,0x43ff0007,
    0x7fec3ffb,0x01fff305,0x0000ffb8,0x22007fdc,0x41ff13ff,0x13fe26fb,
    0x7fdcffd0,0x00ffe601,0x3fe20000,0xff8ff704,0x4ff88005,0x8007ff10,
    0x320005fe,0x3fea00ff,0x9fee7fb1,0xc8bf67fd,0xff88007f,0xf113fea0,
    0xf9537dff,0xbfd005ff,0x7ff10000,0x3ea6fd80,0x3fe3fd47,0xb9fff607,
    0x3ff201ff,0x88000001,0x8ff704ff,0xfa8007fe,0x07ff102f,0x0005fe80,
    0xfa803ff2,0x3ea7f91f,0xa9fffa9f,0x01ff20ff,0xffb1fe60,0xfffff305,
    0x3005ffff,0x200003ff,0x3fea06fd,0xfa83fe61,0x6417fe46,0x3fee7fff,
    0xa8bff301,0x0275c0cd,0xb827fc40,0x00ffe47f,0x4403ff20,0x7f4003ff,
    0x3ff20005,0x647fea00,0x37fffe4f,0x642ffffb,0x7d40807f,0x403ffea6,
    0xcffffeb8,0x00dfb001,0x417fcc00,0x7fc44ff8,0xff313fa4,0x9dfd515f,
    0x4e7fdcff,0x41fff730,0x3e64fff8,0x4ccc03ff,0x999dffa9,0xff98ff71,
    0x037fc004,0xe8007ff1,0x3f20005f,0x47fea00f,0x33f225fb,0xc82dfc88,
    0x677cc07f,0xfffdefdc,0x1ff9003f,0x01ffc400,0x217fa000,0xdff906fc,
    0xff701fff,0xf71dffff,0x7ffffdcf,0x4c1effff,0x3fea5fff,0x3ffe604f,
    0xffffffff,0xfe87fb9f,0x0ffea007,0x4003ff88,0x320005fe,0x3fea00ff,
    0x0000ff51,0xff980ff9,0xffffffff,0x3fea002f,0x03fee003,0x1ff70000,
    0xf700ffd4,0x75c01dff,0xff70ceff,0x7fffed44,0x3ff603ef,0x807ffa22,
    0xfffffff9,0xfb9fffff,0x003ffb87,0xff880ffd,0x02ff4003,0xa80ffb00,
    0x03ff11ff,0x407fc800,0xfffeecb8,0xf88003ce,0x20ea0aff,0x000004ff,
    0x4c0009ff,0x00022000,0x02600088,0x8000004c,0x1ffd07fb,0x802ffb80,
    0x3e2005ff,0x3fa0004f,0xb0ffd406,0xfc80009f,0x02ff8007,0xffffb800,
    0x3ea1fffe,0x9000001f,0x000000ff,0x00000000,0x70000000,0x17fe60ff,
    0xd006ff88,0x3ee001ff,0xff30003f,0x21ffa809,0x20001ff9,0xff8007fc,
    0xff700001,0x741bffff,0x2000005f,0x00002ff8,0x00000000,0x00000000,
    0xff903fdc,0x007ff607,0x1016ffdc,0x6401ffd7,0x07ffdc41,0xfd07fea0,
    0xc805403f,0x7fcc007f,0x2a200000,0x1aa81acb,0x55400000,0x00000001,
    0x00000000,0x7dc00000,0x0bffa207,0xe8005ff9,0x3aa6ffff,0x7c04ffff,
    0xffffeeff,0x77777543,0xeffd81ff,0x01ffdcbc,0xdddddff9,0x00132601,
    0x00000000,0x00000000,0x00000000,0x00000000,0x3a203fdc,0x07ff71ff,
    0xffff9100,0x017fffd4,0x7ffffff4,0xffffb81e,0xff901fff,0x019dffff,
    0x3ffffff2,0x0000000f,0x00000000,0x00000000,0x00000000,0x70000000,
    0x1df100ff,0x100013ea,0x04d44553,0x2aeea600,0x2aaaa601,0x54400aaa,
    0xaa9801aa,0x0002aaaa,0x00000000,0x00000000,0x00000000,0x00000000,
    0x401fee00,0x00000c09,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x5c000000,0x0000007f,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x0000154c,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x59751000,0x20000001,0xca800ccb,
    0x0004c00c,0xfd930000,0x199999bd,0x01331000,0x59ddb750,0x73264cd9,
    0x4c007bfb,0x654c0003,0x555400ac,0x2aaaaaaa,0x0acca880,0x5554c000,
    0x332ea200,0x077ae02b,0x7fffffd4,0x027fc403,0x804ffb80,0x7fec07ff,
    0x007fee02,0xfffffc80,0x01ffffff,0xfffff910,0xfffd105f,0x5cffffff,
    0xfffff57f,0x1ff900bf,0xfffb1000,0x3a01dfff,0xffffffff,0xffb100ff,
    0x8009ffff,0x2fffffeb,0xffffff70,0xfffa87ff,0xedfffa86,0x3e203fff,
    0xff10004f,0x04ff980f,0xb81bffe6,0xf90001ff,0xffb313bf,0xf300199f,
    0x5fffffff,0xabcfff98,0x3ee7ffdb,0xecbdffbf,0x7fe404ff,0x7ffcc000,
    0x1efffeef,0xffffffe8,0xe880ffff,0xfffddfff,0x7ffd400d,0xb82fffff,
    0xffdcefff,0x3ffee2ff,0x30fff40f,0x7fc40fff,0x3ff60004,0x807ff202,
    0x2e05fff9,0xf88001ff,0x03ff906f,0x45efff40,0x77f40a98,0x7dcffb01,
    0x7f442fff,0x03ff200f,0x0bfff880,0x3a1fff62,0xffd0005f,0x03ffd887,
    0x06b7ffea,0x701dff30,0x7ffccfff,0x6c27fc46,0x9ff100ff,0x2ffcc000,
    0xf700dff0,0x0ffdc03d,0x817fd400,0xf3004ff9,0x3fee00df,0xfb9ff602,
    0x7ff701ff,0x0007fe40,0x7ec07ff9,0x002ff43f,0xe8827fcc,0x3dff107f,
    0x01ffdc00,0x66d41ffd,0x641ffcc0,0x9ff100ff,0x0ffe8000,0x0003ffa8,
    0x0007fee0,0x7c407fee,0x7ff7004f,0xb01bfa00,0x017fdcff,0x66649ff1,
    0xccccffec,0x3fe20ccc,0x237fc406,0xfd8005fe,0x0bfee00f,0x90003ff6,
    0x7fe401ff,0x0bff1000,0x7fc40dfd,0x7fdc0004,0x000ffd83,0x007fee00,
    0x4c0bfee0,0xff9003ff,0x017fe001,0x0ffdcffb,0xfff97fe0,0xffffffff,
    0x3fee0fff,0x21ffe803,0x7c4005fe,0x2ffe405f,0x2000ffe2,0x3fe03ffa,
    0x07ffc006,0x7c407ff9,0x0f32e04f,0x3e237fc4,0x9999705f,0x7fdc0599,
    0x07bfdb31,0x7ec1bfe2,0x0ffb001f,0xb013fe20,0x00ffdcff,0xcccc9bfe,
    0xcccccffe,0x03ff20cc,0xfe8bfee0,0x17fcc005,0x46fffd88,0xf0000ffb,
    0x7ff905ff,0x8dffb800,0x7c405ffd,0x1dff904f,0xf50ffec0,0x3fff605f,
    0x3ee04fff,0xfffffc8f,0x5dff905f,0x009ffb53,0xf9803fec,0x73fec03f,
    0x6ff803ff,0x4003ff20,0xff5007fd,0x4d577f47,0x417fd400,0x47fffffa,
    0x2f2a67fd,0x3ffee009,0x0dffe98c,0xffffe800,0x4ff8803f,0x400effb8,
    0x1ff64ffa,0xffccccb8,0x3f7fee04,0x2fffdadf,0xffffffd8,0x2aa604ff,
    0xaabffeaa,0x3fe22aaa,0xf73fec04,0x04ff803f,0x74003ff2,0x9ff3006f,
    0x7ffffff4,0x1ffb81cf,0x7e5fffe4,0x7fe77f47,0x203fffff,0xfffffff9,
    0x3ff20003,0xff1001ef,0x00effb89,0x3fe2ffd0,0x13fe2004,0x41ffffb8,
    0x7fd46ff9,0x01cdedba,0x7fffffec,0x7fffffff,0xfd013fe2,0x300ffdcf,
    0x7fe407ff,0x00dff000,0xffe97fe6,0x2fffffff,0xfe887fe4,0x41ff71ef,
    0xcdefffff,0x2604fffe,0x00efffff,0xfffffb00,0x7c44cb83,0x03bfee4f,
    0xfbaffb80,0x3fe2001f,0x07ffee04,0x17f63ffc,0xeeeec800,0xeeeeefff,
    0xb03ffc5e,0x0ffdcfff,0x6403ff90,0xdff000ff,0x013fe600,0x45fffb53,
    0xfffa8ffb,0xff07fe45,0xffd3019f,0xfdffd303,0x57105fff,0xff99ffb0,
    0x2237f41d,0x1dff74ff,0xedff8800,0x7fc4006f,0x80bfee04,0x3ffa0ffd,
    0x3f600000,0x0bff2007,0xfb9ffff2,0x0bff301f,0xf000ffc8,0x3fe600ff,
    0x97fee003,0x2fffdffb,0x2ffc7fc8,0xf713fea0,0x3ff665df,0x93ffe23f,
    0x3ff65ffa,0xff117fe5,0x001dff79,0x0fffff60,0x409ff100,0x3f201ffb,
    0x3bfff20f,0x00acccde,0x9801ff60,0xfea8afff,0x3fee7fde,0xfff7309c,
    0x00ffc801,0x2a00ffd0,0x7fc002ff,0x3bfffea7,0xff8ffb01,0x266ff806,
    0xffb80eff,0x1ffff70f,0xfe883ff6,0x444ff9cf,0x00fffeff,0x3fffea00,
    0x27fc4000,0x6403ff70,0x3ff620ff,0xffffffff,0x00ffb004,0xffffffb8,
    0x3ee7fc8e,0xffffffff,0x0ffc801e,0x003ffb00,0xd8003ff9,0x9fff30ff,
    0x7f46fe80,0x327fe807,0x3ff201ff,0x21ffff73,0xfff986ff,0x7fc42ffd,
    0x0005ffcc,0x40027ffc,0x3ee04ff8,0x83ff201f,0xdcccffe8,0x804ffffe,
    0xeb8007fd,0xff90ceff,0x7fffffdc,0x3f2003ef,0x7ff7000f,0x000fff00,
    0x37fc4ffd,0xfb13fe60,0x26ff801f,0x7fcc06fe,0xff8fffa4,0xfffff505,
    0xfb4ff881,0x7fc0009f,0xff88000f,0x807fee04,0x3ffa0ffc,0x01ffea00,
    0x88001ff6,0x3ee7fd80,0x0000989f,0x22005ff7,0x7fd406ff,0x2ffc4003,
    0xfc807ff2,0x01ffdc0f,0x3fe29ff1,0x227fcc06,0x903ffc09,0xff109fff,
    0x00fffa29,0x0013fee0,0xf7027fc4,0x87fe403f,0xfd803ff9,0x03fec00f,
    0x73fec000,0x500003ff,0x7e400bff,0x0fff305f,0x42ffe880,0xff506ff9,
    0x40dff10b,0x3ffa1ffd,0x00bff601,0x7cc0fff6,0x4ff885ff,0x800fffa2,
    0x0000fff9,0x7dc09ff1,0x43ff201f,0xfe803ffb,0x007fd807,0x2e7fd800,
    0x880001ff,0x998bdfff,0x77ffcc0b,0x2fffca9b,0x4cc4cd44,0xfb03fffc,
    0xff7313df,0x3bff203f,0x713ff661,0x31137fff,0x3001dffb,0x73339fff,
    0x889fffff,0x7ffcc4ff,0x1fffb802,0x13fe2000,0x3201ffb8,0x3fff30ff,
    0x013ff220,0x00001ff6,0x1ffb9ff6,0xfff50000,0x101fffff,0xfffffffd,
    0xffff305f,0x807fffff,0xfffffffd,0x7ffec01e,0xb05fffff,0xffffffff,
    0x7dc001df,0xefffffff,0x3e22fffb,0x2fffa84f,0x3ffffff8,0x54cccc00,
    0x21999dff,0x3f201ffb,0x3ffff60f,0x6fffedce,0x000ffb00,0x7dcffb00,
    0x2600001f,0x0efffffd,0xdfffd910,0x3ffe601b,0x000cefff,0x19dfffd7,
    0x3fffae00,0x7f4c02df,0x003effff,0xdffffb30,0x88fffd47,0xfff704ff,
    0x1effff83,0x7fffcc00,0xffffffff,0x6403ff71,0x7ffe40ff,0x03efffff,
    0x0001ff60,0xffb9ff60,0x31000001,0x00980013,0x00133310,0x80001300,
    0x33100009,0x00880000,0x9027fc40,0x55543fff,0xfff30000,0xffffffff,
    0x807fee3f,0x75300ffc,0xb0003559,0x300000ff,0x00554c55,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x3bd70000,0x79973100,
    0x99953005,0x55550359,0x23555555,0xaa801aa8,0x665cc402,0xccb980ac,
    0x555402bc,0xaaaaaaaa,0x02aaa1aa,0xaa86aa60,0x2aa6001a,0xaccb9881,
    0x00155500,0xaa88554c,0x00aa6000,0xaaa80997,0xa88d5401,0xaaaaaaaa,
    0x7d41aaaa,0x3f6206ff,0x2fffffff,0xfffffea8,0x7ff41fff,0x5fffffff,
    0xfd007ff3,0x3fff620d,0x3a4fffff,0xefffffff,0xffffff02,0x9fffffff,
    0x2202ffe4,0x3fee0fff,0x1fff1006,0xffffffc8,0x03ffc82f,0x7cc7ff60,
    0x1bf2002f,0x103fff54,0xfe80dfff,0xffffff15,0x9fffffff,0x80ffffb8,
    0xeeffffe9,0x7fdc3fff,0xffeeeeef,0x7fffff41,0xff35ffff,0x50dfd007,
    0xfddfffff,0x777f4bff,0x82ffffed,0xffffffff,0x744fffff,0x3ff201ff,
    0x802ffe83,0x3fa23ffc,0xffffeeff,0x0037fcc2,0x17fc4dff,0xea8bfb00,
    0x2207ffff,0x3a02ffff,0xfffff15f,0xffffffff,0x86fff989,0x981dfff9,
    0x07ffe63c,0x3e200098,0x007ff35f,0xfffb8dfd,0x2a4c981c,0x87ffc880,
    0x99999999,0x540fff99,0xdff306ff,0x101bfea0,0xbff98dff,0x207ffdc0,
    0xfa800fff,0x00ffe23f,0xffd35fd8,0x440fffdf,0x3a06ffff,0x2666665f,
    0xffb99999,0xd80cda83,0x7ec004ff,0x4400003f,0x07ff35ff,0x7fc4dfd0,
    0x2200002f,0xd8001fff,0x7ffb03ff,0x6c03ffd0,0x3ff203ff,0x3f601a82,
    0x01ffe42f,0x3fe0ffec,0x653fa003,0x0fff2eff,0x0fff7fc4,0xe8005fe8,
    0xffa8007f,0x07ff8005,0x5ff88000,0xfd007ff3,0x001ffe4d,0x00ffe400,
    0x881bfea0,0x3fee0fff,0x07ffcc04,0x80037fcc,0x7fcc3ffa,0xf86ff805,
    0x53fa004f,0x03ffc3f9,0x0bff7ff1,0xf50017fa,0xffd0007f,0x1ffd0003,
    0xff880000,0xd007ff35,0x01bfe6df,0x03fe4000,0x003ffe20,0x3fe2bff7,
    0x09ff9006,0x20003ffb,0xfff84ff9,0x20ffea00,0x3fa004fe,0x103ffc03,
    0x03ff97ff,0xfe800bfd,0x0dff0007,0x037ff200,0x5ff88000,0xfd007ff3,
    0x000ffead,0x002ff400,0x7400fff2,0x01ffdaff,0x4c1fff10,0x2a0005ff,
    0x2ffc83ff,0x3a07ff20,0x7c1e445f,0x03ffc03f,0xbff17ff1,0x4c00bfd0,
    0xf98003ff,0xff30005f,0x200005df,0x7ff35ff8,0x3f2dfd00,0x4400001f,
    0x2a001ffd,0x3e6006ff,0x4004ffff,0x3ff64ffb,0x3ff20000,0x205ff981,
    0x8bfb06ff,0x17fc0ffb,0xf881ffe0,0xe81ffb3f,0x3ff6005f,0x4ffa8000,
    0x3ffea000,0x20000bef,0x7ff35ff8,0x3f6dfd00,0xaaaaa80f,0xfeccc82a,
    0x3e2000df,0x7e4000ff,0xf8000fff,0x04ff98ff,0x81bfe200,0x7ff307ff,
    0xffd1bf60,0x2017fc47,0x3fe207ff,0xfe89ff33,0x09ff3005,0x00ffee00,
    0xffffb100,0xf100019f,0x00ffe6bf,0x43ff5bfa,0x6ffffff8,0xdffffff8,
    0x0fff2001,0x13ffe200,0x6e7fd400,0x3a0000ff,0x3ff201ff,0x900ffc82,
    0x2fffc4df,0xff803ff1,0xd8ffe207,0x017fa0ff,0x32007fec,0x0ffee1ef,
    0x7fe44000,0x44003fff,0x07ff35ff,0x1ffadfd0,0x3fffffe2,0xfedccc86,
    0xff9804ff,0xfff70006,0x3fa0001f,0x20003fff,0x7cc04ffd,0x206fe84f,
    0x3fbee6fb,0x803ff10f,0x3fe207ff,0xfe8ffea3,0x04ff9805,0xf537ffd4,
    0x7000009f,0x4007fffd,0x7ff35ff8,0x3f6dfd00,0x06ff800f,0x409ffb30,
    0x8001ffe8,0x05fffff9,0x0dfff300,0x02ffe400,0x7fcc7ff8,0xfe9fee03,
    0x1ff33ffa,0x2207ff80,0x87ff43ff,0xffd805fe,0x7fffd400,0x000bff31,
    0x07ffe400,0xf35ff880,0x2dfd007f,0xff801ffc,0x07ff4006,0x0003ffc8,
    0x5ffd3ffd,0x0bff6000,0x02ffe400,0x7dc3ff90,0x45fea00f,0xf36fd8ff,
    0x40fff00f,0x7fd43ff8,0xf980bfd3,0xfffd004f,0x001bfe25,0x05ffb000,
    0x7cd7fe20,0x76ff803f,0xdff007ff,0x81ffc800,0x70006ff9,0x3ffe6bff,
    0x1ffc8000,0x05ffc800,0xfd27fd40,0xb8ffa80d,0xf51ff55f,0x40fff00f,
    0x6fe83ff8,0xffd80bfd,0x3fff3000,0x00017ff4,0x007ff500,0x7fc53fea,
    0xf34ff804,0x0dff00df,0xe81ffc80,0xf88001ff,0x13ff20ff,0x007ff200,
    0x000bff90,0x1ffcdffe,0x3f63fe60,0x1feaffe2,0xf881ffe0,0xeaffb83f,
    0x17fe605f,0x541fff00,0x000006ff,0x6400bfee,0x01bfe2ff,0x7fec7ff5,
    0x0037fc02,0x3ff21ffa,0x7ffb0003,0x002fff88,0x9000ffe4,0x64000bff,
    0x00ffb9ff,0x07fd7fcc,0x00df5df9,0x7fc40fff,0xbfdbff03,0x000ffec0,
    0xffd0bff3,0x4000801d,0x0510fff8,0xfd83ffe2,0x83ffa02f,0x3e03fff9,
    0x3fee006f,0x0037fcc4,0xf506ffa8,0xffc800df,0x0bff9001,0xecffa800,
    0xdff8806f,0x7effd45f,0x207ff806,0xff703ff8,0x3fe60bff,0x3ffea005,
    0xcffffa80,0x33fcaa9b,0x5333559d,0x7c47fff9,0xfffc9abe,0x4e7ffcc4,
    0x83ffea88,0x9abdfffc,0x3516ffb9,0x3ffae663,0xccdffe86,0x3ccccccc,
    0xe807ffe2,0x3f2004ff,0xfffb801f,0xcccccccc,0x7fffc03c,0xfff8803f,
    0x5ffff83f,0x3f333322,0x12ccccff,0x3fe207ff,0x3ffb05ff,0xffffe880,
    0x3fffa601,0x33ffffff,0xffffffff,0xff889fff,0x0dffffff,0xffffffb8,
    0x3ea04fff,0xffffffff,0xfffff76f,0x981bffff,0xffffffff,0x366fffff,
    0x7fcc04ff,0x3ff9001f,0xfffffb00,0xbfffffff,0x0ffffc80,0x01ffff00,
    0x7ccbfff9,0xffffffff,0x7ff14fff,0x42fffe40,0xf8805ff9,0x36e004ef,
    0x0bceffff,0xffffffb1,0x3aa039ff,0x403effff,0xdfffffd8,0xffec8801,
    0xf70befff,0x3bdfffff,0x3ffffe60,0xffffffff,0x001fff56,0x3200dff9,
    0xffd801ff,0xffffffff,0x7fd405ff,0x3ffe006f,0x49fff305,0xfffffff9,
    0xf14fffff,0x7ffc407f,0x002ffd85,0x18800013,0x03333100,0x20003300,
    0x4c000098,0x26662019,0x00000001,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x4c02aa88,0x02aa62aa,0x2a62aa98,
    0xaaaaaaaa,0x510aaaaa,0x55555555,0x06aa2555,0x5544aaa0,0x4009aaaa,
    0xaaaaaaaa,0x55551aaa,0x35555555,0x2aaaaaa2,0x06a60001,0x55530551,
    0x00133555,0x00055550,0x202aaa60,0x9aaaaaa9,0x002aa201,0xabcba880,
    0x05fff300,0xff937ff4,0x87ffe203,0xfffffffc,0x1fffffff,0xfffffff3,
    0x3e6dffff,0x56fe803f,0xffffffff,0x3fff605d,0x5fffffff,0xfffffffd,
    0x3fe6bfff,0x4effffff,0x262fe400,0xffffb87f,0x00cfffff,0x01ffff50,
    0xffff9800,0xfffffb81,0x540befff,0xf50003ff,0x05ffffff,0x260bfff5,
    0x3ff27fff,0xc85ffb01,0xffffffff,0x31ffffff,0xffffffff,0x3fe6dfff,
    0xf56fe803,0xffffffff,0xffffb09f,0x2bffffff,0xfffffffe,0xfff35fff,
    0xdfffffff,0x513f6005,0xffff70df,0x1dffffff,0x5ffffb00,0xfffe8000,
    0xeeffb81f,0x0efffffe,0x2000ffea,0xfdcdfffc,0x7ffd44ff,0x7fffc80f,
    0x3f207ff2,0x3ff2004f,0x1ffc8001,0xd007ff30,0x50ffeadf,0xfd83fff9,
    0x01ffa007,0x4c43ff98,0xd802fffd,0x5c37dc3f,0x7f5441ff,0xfdff805f,
    0x3ee0005f,0xfb81ffdf,0x6ffea81f,0x3000ffea,0xfe881bff,0x3fb7ea0f,
    0x27fcff83,0x7fd41ffc,0x0ffe4005,0x80ffe400,0xfe803ff9,0x3607ff56,
    0x03fec4ff,0x4c00ffd0,0x3fee03ff,0x642fe806,0x01ffb85f,0xfa80fff1,
    0x0007fe9f,0x3ff79ff1,0x7403ff70,0x07ff52ff,0x100ffe80,0x66fdcbff,
    0x7d77d46f,0xf987ff27,0x7e4000ef,0xffc8001f,0x007ff301,0x0ffeadfd,
    0x3f62ffd4,0x01ffa007,0x6c03ff98,0x4ccc43ff,0xfd999bff,0x3ff7199d,
    0xb007ff40,0x00bfeeff,0x3ee3ff60,0x01ffb81f,0x7fd53fe6,0x13fe2003,
    0x3ee1ffb0,0x3f60ff9d,0xff90ffab,0x003ffa23,0x0007ff20,0x7cc07ff2,
    0x56fe803f,0x3fe207ff,0xd003fec5,0x7fcc00ff,0x237fc403,0xfffffffb,
    0x7fffffff,0x7f403ff7,0xf9affc06,0x7fd4005f,0xf703ff72,0xaffc403f,
    0x2a003ffa,0x7fdc03ff,0x4ffabf91,0x0ffa8ff8,0x3ff63ff9,0x3ff90001,
    0x03ff9000,0x3a00ffe6,0x207ff56f,0x3fec4ffa,0x400ffd00,0xfe803ff9,
    0x7ff77547,0xeeffeeee,0x203ff75e,0x3ea04ff8,0x801ffa2f,0x3fee5ff8,
    0x201ffb81,0x7ff55ff8,0x01ffd400,0xafe4bfea,0x26bf76fb,0x73ff90ff,
    0x640005ff,0xfc8001ff,0x07ff301f,0x3feadfd0,0x41ffe883,0x3fa007fd,
    0x0ffe6007,0x4c03ff60,0xb81ff87f,0xefe981ff,0xc83ff601,0xffb002ff,
    0x5c0ffdc1,0x3fe601ff,0x4007ff54,0x7cc04ff9,0x3e2bf93f,0xff32fe9f,
    0x3fefff23,0x7fe40004,0x1ffc8001,0xddddff30,0xdffddddd,0x2aab3fea,
    0xfd83fffc,0xaaaaaaaf,0xdddffd0a,0x265ddddd,0xffc803ff,0xf88df501,
    0xcdffb80f,0x00cffedc,0x3fe62ffc,0x42ffa804,0xffb81ffb,0x547ffa01,
    0x7fc003ff,0x53fea00f,0x3f7f65fd,0x7e47fe67,0x0000ffff,0x4000ffe4,
    0xff301ffc,0xffffffff,0x3feadfff,0x2effffff,0xffffffb0,0x3fa3ffff,
    0xffffffff,0x007ff32f,0x3ee05ff7,0x5c07fcc5,0xffffffff,0x3fea01cf,
    0x4407ff82,0x1ffb85fe,0xd981ffb8,0x0ffea4ff,0x35fff700,0x4ffff6a6,
    0x3ffea4fd,0x7e4bfe64,0x0006ffcf,0x4000ffe4,0xff301ffc,0x9999999d,
    0x3feadff9,0x00efffff,0x3ffffff6,0xffd1ffff,0x99999999,0x200ffe63,
    0xbf902ffc,0xff707f98,0xfffd999b,0x03ff605f,0xfc80bff2,0x81ffb80f,
    0xeeeeeffb,0x7fd45fff,0xfffd8003,0xffffffff,0x7fc49fd2,0x64bfe21f,
    0x04ffc9ff,0x007ff200,0x4c07ff20,0x6fe803ff,0x7fd47ff5,0x00ffb00f,
    0xf3003ff4,0x3ffb007f,0xdf513f60,0x2207fee0,0xff81fffb,0x209ff506,
    0xff703ff9,0xfffff703,0xf505ffff,0x36a0007f,0xf9adffff,0xfd89fd1f,
    0xfc97fc46,0x007ffd1f,0x0007ff20,0x7cc07ff2,0x56fe803f,0x5ffa87ff,
    0x7400ffb0,0x3fe6007f,0x30ffe803,0xdddffddd,0x1dddffdd,0xfb807fee,
    0x01ffd44f,0x1bfa0fff,0xfb81ffb8,0x01acccdf,0x0000ffea,0x743fee02,
    0x220d444f,0x23ff93ff,0x8001fff8,0xc8001ffc,0x7ff301ff,0x3eadfd00,
    0x81ffd83f,0x3fa007fd,0x0ffe6007,0x7d4dff10,0xffffffff,0x70ffffff,
    0x7fcc03ff,0x7ffffec5,0x1fffffff,0x7fffffd4,0xffffffff,0x003ff75f,
    0x0003ffa8,0x7fcffb00,0x27ff1004,0x3fea1ffc,0x7fe4000e,0x1ffc8001,
    0xd007ff30,0x20ffeadf,0x7fd85ff9,0x801ffa00,0x7e403ff9,0x3e66624f,
    0xcfd999af,0x07fee199,0x7fc5ff88,0xffffffff,0x7fd44fff,0xffffffff,
    0xf75fffff,0xffa8003f,0xf9800003,0x800ffe3f,0x83ff93ff,0x64005ffc,
    0xfc8001ff,0x07ff301f,0x3feadfd0,0xd83ffd03,0x1ffa007f,0x203ff980,
    0xf100fff9,0x703fe81f,0x7fd403ff,0x3337fea3,0xffcccccc,0x55555447,
    0xcffdaaaa,0x03ff72aa,0x003ffa80,0x237f4400,0x3fe003ff,0xfb03ff94,
    0x7fe4009f,0x1ffc8001,0xd007ff30,0x40ffeadf,0x3fec5ffa,0x400ffd00,
    0xff703ff9,0x07fcc07f,0x7fdc0bfe,0x43fff101,0xfd800ffd,0xffb8001f,
    0x001ffb81,0x0001ffd4,0x443ffd50,0x3fe003ff,0xf103ff94,0x3f2005ff,
    0x5554401f,0xaaabffda,0xd007ff32,0x80ffeadf,0x1ff61ffe,0xaaaffe80,
    0xf31aaaaa,0xfdb955bf,0x7fa809ff,0xff701ff8,0xffb75557,0x006ff87f,
    0x70009ff5,0x3ff703ff,0xadffa800,0x0aaaaaaa,0x3b72eaa2,0x7fc43fff,
    0x653fe003,0xfff301ff,0x03ff9001,0xffffff98,0xf36fffff,0x2dfd007f,
    0x3ea03ffa,0x801ff65f,0xfffffffe,0xfff35fff,0x5dffffff,0xf88df500,
    0xffff700f,0x87ffffff,0xf1003ffa,0xff7000ff,0x003ff703,0xffffffa8,
    0x222fffff,0xcfffffff,0x003ff980,0x0ffe57fe,0x900dff70,0xff9803ff,
    0xffffffff,0x007ff36f,0x0ffeadfd,0x3f61fff0,0x3fffa007,0x5fffffff,
    0xddfffff3,0x2fdc0039,0x7dc03fe6,0x2cefffff,0x4003ff90,0x5c001ffd,
    0x1ffb81ff,0x7fffd400,0x2fffffff,0x2f37bfe2,0x00000001,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x80000000,0x7765c400,0x372a00bd,0x000ceefe,0x17bddb95,0x37bb6e20,
    0x2000000b,0x32a00cc9,0xffdb7104,0x666447bd,0xcccccccc,0x6f5472a2,
    0x930bbaa2,0x66440199,0x5cc5970c,0x4c982ded,0x20f7fb66,0xca800ccb,
    0x0019930c,0x1bb02654,0x2fa80000,0xfffffd30,0xfff905ff,0x07ffffff,
    0x7fffff4c,0xfffb85ff,0x002fffff,0xf7003fee,0x07fe403f,0x3fffffea,
    0x3ffe66ff,0xffffffff,0x3feaff25,0xffff98ff,0xb027fec3,0xaa7f47ff,
    0x44ffffff,0xffff97fb,0x4ffb8bff,0x3e67ff80,0x1bf6002f,0x000f7fdc,
    0x40fffb80,0xca9bfff9,0x77e41fff,0xfffecabc,0xcefffa81,0x7e45fcca,
    0xffdbacff,0x1ff7003f,0x201ffb80,0x3fe60ffc,0x5cbaaabf,0x33333322,
    0x324ffecc,0xafeaefcf,0x445fdafe,0xffa82fff,0x7fdeff45,0x21fffdad,
    0xacffcffb,0x3e22fffd,0x27fd406f,0x74007ff1,0x3ffee05f,0x7fe40002,
    0x80efe80e,0x004c6ff9,0xff88bff7,0xff98603f,0x0fffa80e,0x400ffb80,
    0x3f201ffb,0x003ff60f,0x237fcc00,0xff70fffc,0x261fea5f,0x3fe20fff,
    0x7ffff40e,0xf72ffd41,0xff983fff,0xb00ffec6,0x04ff83ff,0xf5013fe0,
    0xb10007ff,0xff501bff,0x00ffe405,0xfc8dff10,0x3ff6003f,0x013fee00,
    0xf7003fee,0x07fe403f,0x20000dfd,0x7e40fff8,0xa97fee4f,0x5ffb80ff,
    0x3fa07ff6,0x6ff880ff,0x7c07ffee,0x827fd47f,0x5fe86ff8,0x3fe22f4c,
    0x4ffe9803,0x13ffa600,0x7cc07fd8,0x3fec003f,0xf8801bfe,0x2ffc404f,
    0x2007fdc0,0x3f201ffb,0x00bff60f,0x20bff600,0x3fee0ffc,0x6c03fe61,
    0x03ffbaff,0x7f403ffd,0xd80bfee7,0x507ff87f,0x8dfb05ff,0x3fe60ffc,
    0xbffb1001,0x3fffa801,0x2202ff40,0x4ccc04ff,0x3fe67fd9,0x0bfe6004,
    0x2e01ffa0,0x7fdc00ff,0xa83ff201,0x000adfff,0xf903ffc8,0x7cc7fb8d,
    0xffff100f,0x037f40bf,0x1ffb8662,0xf903ff20,0x20ffb05f,0x1fffc7fb,
    0xc8001ff5,0xff700eff,0xffff003f,0xffffffff,0xfffc88bf,0x2a7fffff,
    0x3ee002ff,0x27fd801f,0xfeeeeeec,0x1eeeeeef,0x7e403ff7,0x7fffdc0f,
    0xff5002df,0x2e37e40b,0x007fcc7f,0x401ffff5,0xfb8006fe,0x03ff201f,
    0xff88bff1,0x261ff504,0x1fee6fff,0x0fffdc00,0x2003bff2,0xfffffff8,
    0x25ffffff,0xeeeffffb,0x3fee7ffe,0x07fee002,0x7ec3ff20,0xffffffff,
    0xf71fffff,0x07fe403f,0x7ffffe44,0x3bfe201e,0xf71bf200,0x200ff98f,
    0x7405fff8,0xffb8006f,0x203ff201,0x3fee0ffd,0x323ff301,0xdf91ffcf,
    0x7ffdc000,0x001fff90,0x4c002ffc,0xffb02eff,0x5001ffd4,0xffb005ff,
    0x76666654,0xccccccff,0x6403ff70,0x7ed400ff,0xffd01fff,0x5c6fc803,
    0x007fcc7f,0x407ffffd,0xfb8006fe,0x03ff201f,0x6fe8ffea,0x7f4bfe20,
    0x0bfb4fd9,0x07ffea00,0x2003dff9,0xfc8006fe,0x99ff601f,0x3e6004ff,
    0x05ff803f,0x5c00ffb8,0x3ff201ff,0xbffb1000,0x9007ff90,0x4c7fb8df,
    0x7ff900ff,0x3fa03ffd,0x1ffb8006,0x7c03ff20,0x807ff36f,0xf76f9bff,
    0x20013f6f,0xf700effc,0xffb005ff,0x07fe8003,0x3ffe3fec,0x0dff1000,
    0xb803ffa8,0x7fd400ff,0x01fff303,0x7dc6ff80,0x8df9005f,0x07fcc7fb,
    0xff8affd4,0x006fe80f,0x3201ffb8,0x3ff900ff,0xfe801ff9,0x3ff14fcc,
    0x6c4007ff,0x7cc00dff,0x7fcc03ff,0x07ff4006,0x323ffec4,0xf9000dff,
    0x3ffa207f,0x00ffb800,0x7cc2ffcc,0x26000fff,0x1bfe65ff,0x7dc6fc80,
    0x2607fcc7,0x3fee0fff,0x8006fe86,0x3f201ffb,0xf9ff300f,0xdbfb00bf,
    0x7fe7ec3f,0x9ffd1001,0x27ff4400,0x06bfff60,0x6ffe4753,0xfffff731,
    0x337fffd0,0x7fc49b53,0xfea889df,0x1ff7003f,0x13bfff00,0x21ffdff7,
    0x2a619bd8,0xffd13ffe,0x33333335,0x3ee37e43,0xd107fcc7,0x9ffb05ff,
    0xb8006fe8,0x3ff201ff,0x3ffffa00,0x6fffb801,0x007fffd4,0x001fffcc,
    0x806ffec4,0xffffffd8,0x3fe26fff,0xbcffffff,0xfffe987f,0x4c5fffff,
    0xffffffff,0x3fee003f,0xffffb800,0x0ffabfff,0xfffffff1,0x7fdc9fff,
    0xffffffff,0xb8df91ff,0xb07fcc7f,0x3fe209ff,0x001bfa2f,0xfc807fee,
    0x3ffea00f,0x9fff5006,0x807fff88,0x0001fffb,0x500f7fe4,0xdffffffd,
    0xffffd889,0x5c0ff71d,0x2dfffffe,0xfffffc88,0x7fdc001d,0xffff5000,
    0x443fea5d,0xfffffffe,0x7fffdc2d,0xffffffff,0x7fb8df91,0xffb87fcc,
    0x3ffea00e,0x7000dfd1,0x7fe403ff,0x01fffc00,0xd81fff98,0x7fdc06ff,
    0xf700000e,0x331001ff,0x00066003,0x88002620,0x00000009,0x88001310,
    0x00001999,0x00000000,0x00000000,0x00000000,0x001bb000,0x002f9800,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00005530,0x55555554,
    0x01aaaaaa,0xcdc98000,0x06f64001,0xddddddd9,0x0000005d,0x00000001,
    0x00000000,0x00000000,0xf3000000,0x6fec400d,0x02ffe800,0xffe8fffe,
    0xfffffff3,0x27ffffff,0xffb84fff,0xffff701f,0x5cfba07f,0x3ffa6fff,
    0x02ffffff,0x00000000,0x00000000,0x00000000,0x00000000,0x400df300,
    0x5c05fffb,0xfd00efff,0xf9ffec5f,0xffffffff,0xffd3ffff,0x07ffe607,
    0xfffbfff3,0xfd2ff889,0x37721fff,0x01dddddd,0x00000000,0x00000000,
    0x00000000,0x00000000,0x22fc4150,0xffff700a,0x3a7fe201,0x45ffd04f,
    0x80002ffd,0x36203ffe,0x43ff21ff,0xf90dffe8,0x3ffff63f,0x00000000,
    0x00000000,0x00000000,0x00000000,0x7c400000,0x7ec53e3f,0x3ffff104,
    0x7fd53f20,0x361ffd81,0xd80002ff,0xdeb802ff,0xfe88bfd0,0x225fffff,
    0x00002ffe,0x00000000,0x00000000,0x00000000,0x00000000,0xf8dffc88,
    0x203fffac,0xf980fffb,0x3617f60f,0x07ff21ff,0x0bff6000,0xc81ee400,
    0x980effff,0x00000000,0x00000000,0x00000000,0x00000000,0x44000000,
    0x3ffffffc,0xb07ff980,0x42ff989f,0x3ff20ffc,0xfffffff1,0x27ffffff,
    0x00001ffc,0x000aee60,0x00000000,0x00000000,0x00000000,0x00000000,
    0x7cc00000,0x3ee005ff,0x80ffa84f,0x3ff20ffc,0x7fc3fee0,0xffffffff,
    0x3ff93fff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x22000000,0x2efffffb,0xe837fdc0,0x49ff103f,0x50cc4198,0x55555555,
    0x26235555,0x00000001,0x00000000,0x00000000,0x00000000,0x00000000,
    0x88000000,0xbcf9effc,0x3fa62eff,0x6fb81eff,0x000ffdc0,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x27ff1000,
    0x49fb14f8,0x3203eff9,0x02cc801c,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x10540000,0x0620b8bf,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x05f98000,0xddddd000,0xdddddddd,0x0007dddd,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00df3000,0x3ffffe00,
    0xffffffff,0x0004ffff,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00013000,0x2aaaaaa0,0xaaaaaaaa,0x00001aaa,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_32_usascii_x[95]={ 0,6,4,0,1,0,0,7,4,4,2,1,3,4,
6,1,1,2,2,2,0,2,1,1,1,1,6,3,2,2,3,4,0,0,2,1,1,3,3,1,1,2,2,2,
3,0,1,0,2,0,2,1,1,1,0,0,0,0,1,5,2,4,1,0,0,2,2,2,1,1,0,1,2,2,
2,2,2,1,2,1,2,1,3,2,0,2,1,0,1,0,2,2,7,3,1, };
static signed short stb__consolas_32_usascii_y[95]={ 23,0,0,2,-1,0,1,0,-1,-1,0,6,17,13,
18,0,2,2,2,2,2,2,2,2,2,2,7,7,5,10,5,0,0,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,2,27,0,7,0,7,0,7,0,7,0,0,
0,0,0,7,7,7,7,7,7,7,2,7,7,7,7,7,7,0,-3,0,11, };
static unsigned short stb__consolas_32_usascii_w[95]={ 0,5,10,17,15,18,18,4,10,9,14,16,9,10,
6,15,16,14,14,14,17,14,15,15,15,15,6,9,13,14,13,11,18,18,14,15,16,12,12,15,15,13,12,15,
13,17,15,17,14,18,15,15,16,15,18,17,18,18,15,9,14,9,15,18,11,14,14,13,15,15,17,16,14,14,
12,15,14,16,14,16,14,15,14,13,16,14,16,18,16,17,14,13,4,13,16, };
static unsigned short stb__consolas_32_usascii_h[95]={ 0,24,9,21,28,24,23,9,31,31,15,17,12,3,
6,27,22,21,21,22,21,22,22,21,22,21,17,22,19,9,19,24,30,21,21,22,21,21,21,22,21,21,22,21,
21,21,21,22,21,27,21,22,21,22,21,21,21,21,21,30,27,30,11,3,8,17,24,17,24,17,23,23,23,23,
30,23,23,16,16,17,23,23,16,17,22,17,16,16,16,23,16,30,33,30,7, };
static unsigned short stb__consolas_32_usascii_s[95]={ 241,223,178,141,107,173,1,204,6,17,137,
91,152,245,238,142,200,209,157,88,193,185,217,240,233,240,249,1,15,189,1,
229,78,174,159,11,124,111,98,72,66,52,43,19,226,1,224,167,211,123,82,
27,35,56,172,191,119,138,103,97,158,68,162,162,209,45,208,60,192,29,101,
84,69,54,55,20,241,152,201,74,135,119,186,123,150,108,216,233,169,36,137,
27,1,41,221, };
static unsigned short stb__consolas_32_usascii_t[95]={ 25,1,121,82,1,1,35,121,1,1,121,
104,121,121,121,1,35,59,59,59,82,35,35,59,35,82,35,59,104,121,104,
1,1,82,82,59,82,82,82,59,82,82,59,82,82,82,59,35,82,1,82,
59,82,59,59,59,59,59,59,1,1,1,121,133,121,104,1,104,1,104,35,
35,35,35,1,35,1,104,104,104,35,35,104,104,35,104,104,104,104,35,104,
1,1,1,121, };
static unsigned short stb__consolas_32_usascii_a[95]={ 282,282,282,282,282,282,282,282,
282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,
282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,
282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,
282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,
282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,
282,282,282,282,282,282,282, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_32_usascii_BITMAP_HEIGHT or STB_FONT_consolas_32_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_32_usascii(stb_fontchar font[STB_FONT_consolas_32_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_32_usascii_BITMAP_HEIGHT][STB_FONT_consolas_32_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_32_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_32_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_32_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_32_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_32_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_32_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_32_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_32_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_32_usascii_s[i] + stb__consolas_32_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_32_usascii_t[i] + stb__consolas_32_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_32_usascii_x[i];
            font[i].y0 = stb__consolas_32_usascii_y[i];
            font[i].x1 = stb__consolas_32_usascii_x[i] + stb__consolas_32_usascii_w[i];
            font[i].y1 = stb__consolas_32_usascii_y[i] + stb__consolas_32_usascii_h[i];
            font[i].advance_int = (stb__consolas_32_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_32_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_32_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_32_usascii_s[i] + stb__consolas_32_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_32_usascii_t[i] + stb__consolas_32_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_32_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_32_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_32_usascii_x[i] + stb__consolas_32_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_32_usascii_y[i] + stb__consolas_32_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_32_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_32_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_32_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_32_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_32_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_32_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_32_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_32_usascii_LINE_SPACING
#endif

