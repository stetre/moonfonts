// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_16_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_16_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_16_usascii_BITMAP_WIDTH         128
#define STB_FONT_courier_16_usascii_BITMAP_HEIGHT         64
#define STB_FONT_courier_16_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_16_usascii_FIRST_CHAR            32
#define STB_FONT_courier_16_usascii_NUM_CHARS             95

#define STB_FONT_courier_16_usascii_LINE_SPACING           8

static unsigned int stb__courier_16_usascii_pixels[]={
    0x001960a0,0x31440b81,0x6640840a,0x5c040620,0x4000001c,0x00800400,
    0x22093031,0x22012383,0x64e24384,0xc8489481,0x2065e540,0x77100e29,
    0x3aa19757,0x64c2dbda,0x757703db,0x872af259,0x98017059,0x932aee02,
    0x4244e244,0x22c44894,0x38a6241a,0x70f105c0,0xb8711b89,0x14aa0dc1,
    0x54905992,0x48124ccc,0xb1c4890c,0x5c489481,0x530cc242,0x707333b2,
    0x38837090,0x0048b017,0x01709124,0x03205324,0x8e471224,0x122dada8,
    0x2381c43b,0xd0900e29,0x09298570,0x91003892,0x20242445,0x17950244,
    0x71c2da5c,0x22438c85,0x31c0e20d,0xa8aa01c5,0x4910cb86,0x951c4904,
    0xa8705879,0x006a2401,0x47122491,0x1759311c,0x30903624,0x300714c3,
    0x2a707179,0x1602e0bc,0x0018530b,0xa8909009,0x1c489241,0x2eaea21b,
    0x1b857120,0x05c53122,0x100e0e00,0x20e41b87,0x2a080c29,0x21a84802,
    0x121cbbca,0xa98b1389,0x21222419,0x14c0cbda,0x80397591,0xbc980383,
    0x977b702d,0x9ee0fe43,0x21209004,0x4e244848,0x20d4cc1b,0x56c40d84,
    0x04414c30,0x54333220,0x000802cc,0x98402013,0x1702b802,0x1cc0c870,
    0x02a660e5,0x2e14419b,0x3991cbaa,0x00000000,0x80000000,0x08002cca,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x0b2e2000,0x00080b2e,0x4006aa01,0x22cb884a,0x2cb9804a,
    0x701cccc8,0x3332a199,0x9710083c,0x32a0eb87,0x1a920cec,0x32215432,
    0x5dc3d9bb,0x0a332bbb,0x351c8380,0x298a201c,0x141ec024,0x8b777724,
    0x80eb86a3,0x4921c438,0xb8b50e24,0x051995c0,0x490e0e08,0x12240023,
    0x4a600570,0x44312c29,0x19071003,0x0e2c48aa,0xaa820716,0xcccc8131,
    0x9b920cc3,0x37102cbd,0x1581cbc8,0x10a21700,0x003cb854,0x8bbf3071,
    0x2241971c,0x4c00e258,0xf10640ab,0x8b7240a8,0x542e4c0b,0xcbcc8750,
    0x15751202,0x7c4e3538,0x0c838834,0x0c9cb875,0x0e25b86e,0x90311530,
    0x7241a8b0,0x09103883,0x2090f448,0x9c771038,0x449aa70a,0x8120cc38,
    0x6892c986,0x48513300,0xb8e14c58,0x80901c41,0x2e02a244,0x85c2e020,
    0x224594cb,0x0711c40a,0x551200ae,0xc8514298,0x19921e20,0x2021712e,
    0x0b870263,0x90362412,0x64c18154,0x979503bb,0x401765c1,0x3cbdb82a,
    0x6c41ab88,0x2a0ccccc,0x36baa4bc,0x2f3662cb,0x32f3620c,0x702bbc80,
    0x42cbbbc8,0x0080110d,0x98011010,0x000c02cc,0x00200220,0x02004401,
    0x80400010,0x0000ccd8,0x00000000,0x00000000,0x00000000,0x80000000,
    0x012a01c8,0x32a00000,0x0000001c,0x00ea0000,0x00016640,0x8fae39d1,
    0x2201c029,0x6c4ba64d,0x0350ba64,0x06ecc7d7,0x2799d99d,0x8972a4da,
    0x300cccdd,0x7999d505,0xb8faa0e0,0x261c243e,0x2400e012,0x0a648853,
    0x40b84812,0x8471c4e4,0x01214c38,0x07053120,0x8483832e,0x0ede64c3,
    0x2981de8e,0x1122e609,0x198799d9,0x8a271c24,0x530a6b74,0x903cc848,
    0x22e07090,0x30e120e4,0x02b9c489,0x0b500664,0x02992024,0x3159481c,
    0x2b99b983,0x072240e0,0x072a9c0e,0x24298709,0x12200b6e,0x01201990,
    0x40e00e17,0x98157194,0x81c02cac,0x0700caac,0x8170748e,0x171214c3,
    0x54070039,0x71012092,0x4dc0e012,0x5c530792,0x80240e01,0x41dc4703,
    0x90a61c39,0x07003238,0x048488e2,0x03801ac8,0x14c25c97,0x00903812,
    0x412e1c0e,0x3620bbcb,0x9aa7d70d,0xcecb84ea,0x4ea93a61,0x20599d93,
    0x6765c05a,0x98b32d41,0x543623dd,0xd50ccecc,0xecca8199,0x439d30cc,
    0x00000406,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00003510,0x17223b90,
    0xb88001cc,0x2a1cc982,0xb906ec2e,0x25bb107b,0x333662fa,0x33b3225c,
    0x8f5c7723,0x25cccceb,0x6ec429c8,0x9d70eccc,0x05c48599,0x2f64c4c8,
    0x24c39b98,0x77326435,0x914c0350,0x406e2981,0x12242983,0x0a602992,
    0xb86e1c17,0x8245c120,0x061c019c,0x7191ac92,0x454c0350,0x0730880c,
    0x91214c1c,0x5302408c,0x9120e046,0x424e202e,0x40380929,0x39c65238,
    0x36e601a8,0x41c04802,0x644aaac9,0x92cb83ba,0x0705ac98,0x49049b89,
    0x3802e384,0x32e91220,0x20835070,0x06407759,0x890a60e0,0xc9c4399c,
    0x824dcc2a,0x980e8483,0x2a672122,0x42440e02,0x0d41c714,0x202e2992,
    0x4c1c0e2a,0x38812242,0x188530d1,0x5412120e,0x2ea2eccc,0x20e04aaa,
    0x20e09048,0x3853241a,0x41c0e244,0x70122429,0x42989997,0xb8170e28,
    0xa8489000,0x84498700,0x87b264eb,0x34cccddc,0x972647bb,0x664cd999,
    0x23bb13ce,0x199d73eb,0x66ecc020,0x99d72dcc,0x02665c39,0x24eb9764,
    0xd9931dc9,0x33333679,0x00000005,0x00000000,0x00000000,0x00000000,
    0x88003800,0x40080102,0x00801800,0x80800008,0x4cb912d8,0xeb97222e,
    0x33762000,0x00b221cc,0x779105dc,0x39779509,0x7025de5c,0x02eeee20,
    0xc9872f2e,0x3322bc9b,0x21441dbc,0x435189c3,0x797b70eb,0x1214c199,
    0x06540726,0xb8531440,0x0e038711,0x8351205c,0x89103e84,0x270e1444,
    0xacb0075a,0x4070a638,0x803930ca,0x00e3ccb9,0x2aa06f2e,0x2b60aada,
    0x2120caaa,0x8510241a,0x330e1443,0x47007357,0xdbac98e3,0x64c32a00,
    0x1c42ae01,0x22544009,0x2099c999,0x2099999c,0x101c1984,0xb3144385,
    0x98773b88,0x731c71c4,0xc9819333,0x89019501,0x2310a63a,0x2070240b,
    0x906a080b,0x0e144070,0xd0b6f2ee,0x41f90b21,0x20a638e3,0x2e005933,
    0x2aaaea0c,0x8eeb2e2d,0x202cbabb,0x32eaee03,0x50e5e5c0,0x644399d7,
    0x0105d50d,0x8f5c1000,0x10a61b0e,0x0a2000a7,0x01002002,0x10030030,
    0x00000000,0x36600000,0x0003cccd,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x9b99b300,0x70ce9818,
    0x86e4109d,0x2e2ae1eb,0x00510951,0xaaaaaa88,0x554c9301,0x99930aaa,
    0x00079999,0x48620000,0x84853038,0x40c8dc4f,0x21ee7f3f,0x473221bc,
    0x4cccccc1,0x987e4370,0x000aaaaa,0x00000000,0xcbdbb832,0xfa835240,
    0x2e80cb80,0x2171aa5f,0x2165c30c,0x21999999,0x0000021b,0x80000000,
    0x502e880b,0x64132123,0x23b1d81b,0x0070a659,0x0ccccccc,0x00000000,
    0x15400000,0xc8064645,0x0c80d828,0x03020857,0x00000000,0x00000000,
    0x999d3000,0xb500884b,0x5c37a200,0x0000002e,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_16_usascii_x[95]={ 0,3,1,1,1,1,1,3,4,2,0,0,2,1,
3,1,1,1,1,1,1,1,1,1,1,1,3,2,0,0,0,0,1,0,0,0,1,0,1,0,0,1,1,0,
0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,3,0,0,1,0,0,1,0,0,1,
1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,3,0,1, };
static signed short stb__courier_16_usascii_y[95]={ 11,2,2,1,1,2,3,2,2,2,2,3,8,6,
9,1,2,2,2,2,2,2,2,2,2,2,5,5,3,5,3,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,14,1,4,2,4,2,4,2,4,2,2,
2,2,2,4,4,4,4,4,4,4,2,5,5,5,5,5,5,2,2,2,5, };
static unsigned short stb__courier_16_usascii_w[95]={ 0,3,6,7,6,7,7,3,3,3,6,8,3,7,
3,6,6,6,6,7,6,7,7,6,6,7,3,4,7,8,7,6,6,9,8,8,7,8,7,8,8,6,8,9,
8,9,8,8,7,8,9,7,8,8,9,9,8,8,7,3,6,3,6,10,3,8,8,7,9,8,7,8,8,7,
5,8,7,9,8,8,8,9,7,7,7,8,9,9,8,8,6,3,2,3,7, };
static unsigned short stb__courier_16_usascii_h[95]={ 0,10,5,11,12,10,9,5,11,11,6,8,6,2,
3,12,10,9,9,10,9,10,10,10,10,10,7,8,8,4,8,10,10,9,9,10,9,9,9,10,9,9,10,9,
9,9,9,10,9,11,9,10,9,10,9,9,9,9,9,11,12,11,4,1,3,8,10,8,10,8,9,10,9,9,
12,9,9,7,7,8,10,10,7,8,10,7,6,7,6,9,6,11,11,11,4, };
static unsigned short stb__courier_16_usascii_s[95]={ 72,124,38,43,21,43,62,45,55,39,8,
51,25,81,77,1,61,113,120,77,96,85,93,101,10,17,114,123,18,64,10,
117,116,103,1,34,79,70,54,108,45,38,1,20,11,1,117,99,101,59,83,
108,64,1,54,73,37,28,30,51,14,68,49,89,73,26,68,35,51,60,46,
25,10,93,8,19,109,118,86,69,90,80,78,43,72,95,15,104,29,87,1,
32,36,28,56, };
static unsigned short stb__courier_16_usascii_t[95]={ 12,1,56,1,1,14,36,56,1,1,56,
46,56,56,56,1,14,36,36,14,36,14,14,14,14,14,46,14,46,56,46,
1,14,36,46,14,36,36,36,1,36,36,14,36,36,36,25,1,25,1,25,
14,25,25,25,25,25,25,36,1,1,1,56,56,56,46,14,46,14,46,25,
14,25,25,1,25,25,46,46,46,1,1,46,46,1,46,56,46,56,36,56,
1,1,1,56, };
static unsigned short stb__courier_16_usascii_a[95]={ 136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_16_usascii_BITMAP_HEIGHT or STB_FONT_courier_16_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_16_usascii(stb_fontchar font[STB_FONT_courier_16_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_16_usascii_BITMAP_HEIGHT][STB_FONT_courier_16_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_16_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_16_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_16_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_16_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_16_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_16_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_16_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_16_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_16_usascii_s[i] + stb__courier_16_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_16_usascii_t[i] + stb__courier_16_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_16_usascii_x[i];
            font[i].y0 = stb__courier_16_usascii_y[i];
            font[i].x1 = stb__courier_16_usascii_x[i] + stb__courier_16_usascii_w[i];
            font[i].y1 = stb__courier_16_usascii_y[i] + stb__courier_16_usascii_h[i];
            font[i].advance_int = (stb__courier_16_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_16_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_16_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_16_usascii_s[i] + stb__courier_16_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_16_usascii_t[i] + stb__courier_16_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_16_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_16_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_16_usascii_x[i] + stb__courier_16_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_16_usascii_y[i] + stb__courier_16_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_16_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_16_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_16_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_16_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_16_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_16_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_16_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_16_usascii_LINE_SPACING
#endif

