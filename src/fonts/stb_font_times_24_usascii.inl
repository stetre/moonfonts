// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_24_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_24_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_24_usascii_BITMAP_WIDTH         256
#define STB_FONT_times_24_usascii_BITMAP_HEIGHT         80
#define STB_FONT_times_24_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_24_usascii_FIRST_CHAR            32
#define STB_FONT_times_24_usascii_NUM_CHARS             95

#define STB_FONT_times_24_usascii_LINE_SPACING          16

static unsigned int stb__times_24_usascii_pixels[]={
    0x00000000,0x80000000,0x911cccc8,0x54c03999,0x05000acc,0x00000000,
    0xcca98000,0x65cc000a,0x0c88312c,0x65400000,0x40000001,0x000002c9,
    0xbbbcca88,0x4980d401,0x32980aa0,0x26364005,0x37f33fa9,0x35db1013,
    0xeb807f95,0x0366801b,0x0005d710,0xd880f5c4,0x03fb99ae,0xb989bfc8,
    0x327dc2ef,0x007d50f9,0x40f5476a,0x003ea86c,0x402e45f4,0x9802dec9,
    0x04a881bd,0xe824c24c,0x0950ee00,0x9fc41f60,0x17a602f9,0x56e42fd4,
    0x8e606fbc,0x17ed402b,0x03fd5000,0x17e60bf1,0x7f101fb8,0xff515fb8,
    0xf003fc98,0x46d85b83,0x32003fda,0x4b302746,0x012e01fd,0x307a024c,
    0x25409709,0x440004b8,0x7405f33f,0x98bf200f,0x40f1488f,0x2e01621c,
    0x7dc0002f,0x3200fe81,0x402fb83f,0x3a27d43b,0xa803f987,0x8007cc0f,
    0x7f3003f9,0x47d00fb8,0x009700b8,0x313a0398,0x3e609d09,0x80007a00,
    0x205f33f8,0x7fcc04fb,0x05922db0,0xf700361a,0x1fb80005,0x3e2027dc,
    0x401fe60f,0x1f627d43,0x3ea00fe6,0xf30035c3,0x503f2007,0x400fe09f,
    0x04804069,0xbf09317e,0x0d701760,0xf99fc400,0x8807fd02,0x913f92ff,
    0x2b83980c,0x00017d40,0x07fd07ee,0x2fe45fd0,0x6c3f9800,0xd003f987,
    0x8007a67f,0x0fb003f9,0x07f30bf3,0x33220760,0x202e5eab,0x7424c4f8,
    0x4c02f986,0x20f7103f,0x205f33f8,0x4fe802ff,0x90095ff5,0xfa80b103,
    0x5c02ed9a,0x7c1fccdd,0x24fd802f,0xf10003fe,0x3f987d85,0xf882b326,
    0x7b880dcf,0x3bd93f98,0x4df10ff0,0x04cdfdc8,0x3f22d83c,0x0fe20a22,
    0xf90db093,0x710bf003,0x4cfe20ff,0x01ff882f,0x3ff25fd8,0x03606805,
    0xffcdbfa8,0xf30dc80e,0x00ffc43f,0x1ff8afe4,0x19ddb710,0x261f60fc,
    0x4407a63f,0x7dc40dff,0xbbccf987,0xf837c45f,0x9803f987,0x07e45c85,
    0x930f6071,0x01fd07b0,0x83ec0df0,0x105f33f8,0xbf9003ff,0x500dffb8,
    0xf5015407,0x2627ec49,0xf10fe42f,0x2bf9003f,0x7dc02ff8,0x43ec0e86,
    0x401b33f9,0xe80efebc,0x7ec5f987,0x3fc1be20,0x1dc01fcc,0xa8dd03ee,
    0x4498b101,0x007f80d8,0x41f601fd,0x205f33f8,0x4fd802fe,0xc81fff98,
    0xfa816200,0x1f237cc2,0x05ff07ee,0x27fc7fb0,0x21617ea0,0xd9bf987d,
    0x6fd93200,0x43f987d8,0x443fc0fc,0x803f985f,0x3e21fc1d,0x4ee00643,
    0x7f80b249,0x3603fb00,0x3e67f107,0xd007fb02,0xffb9105f,0x00d80681,
    0xe8ff05f5,0x7ec1fb85,0x362fe803,0x42fd406f,0xdf987d84,0xd07e604f,
    0xf987d83f,0x3fa0fdc3,0x7cc27c41,0x3e60e803,0x0120fe41,0xb9926173,
    0x3600ff00,0x220fb01f,0x2a05f33f,0x837c406f,0x1d45f948,0x2fa81540,
    0x21be67e8,0x037cc1fb,0x1ff317e6,0x4042fd40,0xfdbf987d,0x7f10f902,
    0x43f987d8,0x217e41fb,0x03f982fa,0xf31f21d8,0x16a02b8f,0xfb03d093,
    0x201fd001,0x267f107d,0x80bf202f,0x1488a1fd,0x4400649f,0xbf05f505,
    0x3ee07fc4,0x3602fd81,0x00efc81f,0x1f600bf5,0x07fa2fe6,0xb03e07ea,
    0xfb87f30f,0x1b21fc41,0x1dc01fcc,0x976e61f9,0x26174039,0x0fc84c84,
    0x1f607f80,0x02f99fc4,0x17dc0f6c,0x43f1489a,0x2a036006,0x3a17d42f,
    0x4417dc3f,0x02fb81ed,0x3ea037ee,0x1f61fcc5,0x077ccfe6,0x3616a27c,
    0x7dc3f987,0x07e26b81,0x2c401fcc,0x3b69bdf5,0xf102a4b9,0x86d84987,
    0x04f801fa,0x99fc41f6,0xbcea802f,0x13e81ddb,0x003a9ae9,0x88fea0ea,
    0x33ffa85d,0x3ae017fd,0x800decbd,0xfdbbdfd9,0x3a27d40c,0xf727cc0f,
    0x777bd30d,0xf981fd01,0xdc817dc4,0x13ea02db,0x986ea340,0x7c4240bc,
    0x437c24c5,0x0fcc03f8,0x4fe20fb0,0x3f2002f9,0x33fae06f,0x00320bcd,
    0xdfb88588,0x3f6601cc,0x401dfbdf,0x22000098,0x71040099,0x3f6a39ff,
    0x05dff53f,0x3fee2011,0x27dfd31c,0x0201efeb,0x037ffd70,0x390004a8,
    0xf09317e0,0xd901aa0b,0x7f107d80,0xf5000be6,0x0498809f,0x98010001,
    0x04422000,0x00000000,0x00000000,0x00000000,0x012a0000,0x21ec0570,
    0x3604d849,0xd801f101,0x3e67f106,0x3fc98002,0x00000280,0x00000000,
    0x00000000,0x00000000,0x00000000,0x44025400,0x2607402c,0x16205984,
    0x8f608164,0xf33fccc8,0x8800399b,0x00000bdc,0x00000000,0x00000000,
    0x00000000,0x00000000,0x32a00000,0x199310ac,0x24c15c40,0x832202b8,
    0x939f702c,0x20aaaa88,0x00009999,0x00000004,0x00000000,0x00000000,
    0x00000000,0x00000000,0xbcb98000,0x2202800a,0x0c601402,0x0002ee20,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x22000000,0x2cb8802b,0x05555540,0x44014438,0x015cc1ba,
    0x773000cc,0x35551001,0x055554c0,0x2aaaaaaa,0x55555542,0x8565cc00,
    0x98599301,0x5551aaaa,0xaaaa8355,0x451bc980,0x40aaaaaa,0x550aaaa9,
    0x2aa05555,0xedda80aa,0x2f32a1db,0x54472e21,0x3f21aaaa,0x5d503ffe,
    0xff101db3,0x71a01fff,0x982ea805,0xb100eb8e,0x75576c00,0x1ffc8801,
    0xf1037e60,0x0bffffff,0x6401bff3,0xfeeb99ce,0x2fdc3620,0x6447ff71,
    0x1fc883ff,0x7ed4e754,0x806ffd47,0x3ee21ef9,0x7fd300df,0x3fa23b90,
    0x25c27ec1,0x398bff62,0x87e21fea,0xaabc85f8,0x1d8b101a,0x3a01bb10,
    0x07605f14,0x0970fd40,0xb007fe40,0x5557b905,0x0bfa05f5,0x1f900fd8,
    0xd0bf21e4,0x203ff05f,0x7c83e83b,0x1ec02ff8,0x26404fd8,0x07f207d4,
    0x701d0df1,0x1fd818bf,0x117dc3dc,0x1a1d400b,0x7f100ed8,0x0025427c,
    0x002643f9,0x3201dff7,0x01f10481,0x17e407f6,0x545f87a0,0x6427dc4f,
    0xfa81d03f,0x03fd0d00,0x0df302c8,0xb86e80e8,0x261fc81f,0x7009f505,
    0x9f30dd0f,0x2c800ee4,0x00fd4162,0x222f47f1,0x89fe4005,0x3aee001f,
    0x4003905f,0x207f605b,0x21a805fa,0x2227cc5c,0x886f987f,0x0903fb85,
    0x02c803fb,0x424c0bfa,0x81fb84f8,0x540b25f8,0xf81d804f,0xff15f887,
    0xfdd705ff,0x45dfdddd,0x24f806f8,0x2000ec3f,0x331eaefa,0x22ee0133,
    0x001c83ff,0x81fd80ba,0x801004fc,0x41fe81fb,0x41dc1ffa,0xd8084ff9,
    0x7016401f,0x260760bf,0x901fb85f,0x4fa81a3f,0x1fd82640,0xeca8b7c4,
    0x571a05ff,0x7fb59f70,0x41f35c81,0xbff0003b,0x700bffb8,0x390bfe67,
    0xd803e200,0x003fe81f,0x3ee07f00,0x3a27eec4,0x05fff900,0x16401fd8,
    0x0d103fe0,0x07ee1fe2,0x501d6fc4,0x3ffa609f,0x7cc4fb84,0x307ff504,
    0xcfc80d8b,0xcc81ff30,0x4001621c,0x02f86ffc,0x43ff51dc,0x80b7001c,
    0x0ffc41fd,0x102dc000,0x37c744ff,0xfffb80b1,0x803fb00d,0x227e402c,
    0x707fe03b,0x077ec03f,0x54409f50,0x67f443ff,0x2602feb9,0x8343a86f,
    0x017dc0fe,0x1736a0d8,0x1ffc674c,0xc87700d3,0x200390ef,0x20fec02e,
    0x80001ff8,0xa97ec00d,0x00ae3fd3,0x20ffff62,0x016401fd,0x00e83fe2,
    0x36e73fee,0x017e601f,0xdf1009f5,0x3fa2f6a0,0xa987ec00,0xaaebaacd,
    0x17e61fe0,0xb1f98ee0,0x3ee4f889,0x77001b0f,0x0072bfb0,0x3fb003e2,
    0x80007ff0,0xb5fa8029,0x00753ee1,0xd83ffd30,0x400e401f,0x500953fd,
    0x03f73ffd,0x27d401d8,0xf9807d80,0x2a67a805,0xaadcaaae,0x1be21fa0,
    0x327b8b10,0x3fa0fe47,0x077003ad,0x00399fd1,0x03fb00b7,0x380009fd,
    0x89a3fe00,0x806059ff,0x00fec5fd,0x5be60036,0xfb86001d,0x7d403401,
    0xb0099004,0xd0d5001d,0x01fb02b8,0x6c0d809f,0x0ff87ea7,0x70037fc4,
    0x07bfe207,0x3f600b60,0x3006fa80,0xefc80060,0x70177ec3,0xf917e203,
    0x3a006807,0x2e0006bf,0x200ee01f,0x03d004fa,0x5d000ea8,0x9806c598,
    0x700fcc3f,0x87dcf905,0xffc83ff8,0x203b8143,0x7c401ffa,0xd03ec500,
    0x000b80bf,0x540ff980,0x412e00ff,0x02fcc2f8,0x7fd400d3,0x07ee0002,
    0x2a00b335,0x16e1dc4f,0x3b901f70,0xd0ea0f22,0x16e0fc80,0x23f50598,
    0x45ffe45d,0xbdffbdc8,0xb809903b,0xb82dc01f,0xfd807d3f,0x9806440c,
    0x217e003f,0x1fdc05f8,0x83fb8364,0x3fc000e9,0x98bf2000,0xf9000fff,
    0x3edffe8b,0x20177710,0x902dfffb,0x6dc02c43,0x006c04db,0xc885d39b,
    0x3ea3ffff,0x7e4c0dff,0x007601cf,0x33fe205b,0x9dfd7004,0x27d4019b,
    0x0b605900,0xd99db970,0x6775c019,0xc8001ded,0x332a0004,0x2002ee2c,
    0x21cfffc8,0x00088018,0x00202006,0x80198018,0x004c00ba,0x00000013,
    0x8000c00c,0x00200098,0x20060110,0x4c000cc0,0x00440000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x80000000,0xaaaaaaa8,0xb981aaaa,0x530aaacc,0x00335555,
    0xaa80bb88,0x54c0aaaa,0x56d40aaa,0x54c0bed8,0x551001aa,0x2aaaa655,
    0x5554c02a,0x555511aa,0xaaaaa985,0x31555542,0x54355555,0x540aaaaa,
    0xaaaaaaaa,0x5555530a,0x54c55555,0xaaaaaaaa,0x2aaaa61a,0x54c019aa,
    0x8009aaaa,0x55c5d81a,0xefdccdf9,0x2ec4fdcc,0x74c39df7,0x0cffcbdf,
    0x27fffe40,0x403bff22,0x7f5c1efb,0x40fffcdb,0xf9006ff9,0x9efe985f,
    0x0efe9800,0x2205ffcc,0x440effea,0x7f4c0cfd,0x0cffa80e,0x66666fcc,
    0x7f4c6fec,0x47ecaaac,0xaaaadfe9,0x77f4c3ec,0x01dfecbc,0xffb9bfd3,
    0x885fd505,0x224f7c7f,0xf124c4fa,0xfd82fc45,0xb3037e43,0x905fd713,
    0x703540df,0x427ec1bf,0x7c401ffd,0x009f906f,0x1eb83fc8,0xd837f440,
    0xf80ff203,0xf303981f,0x207f903f,0x881fe40d,0xe983fd84,0x447fb02f,
    0x3f2223fe,0x577c0882,0x71c27d41,0xf907e85f,0x901ff987,0x3fa0bf50,
    0x7d403d03,0x6e437cc2,0x2fedc05f,0x64003fb8,0x80074c3f,0x025c3fe8,
    0x0fe80ff2,0x07fd00a8,0x20540ff2,0x320a03fb,0x05ff103f,0x86fa87f9,
    0x09d002fb,0x9f3013ea,0x07f905f8,0x7c0207ff,0xb81ff307,0x7c17d404,
    0x00ffac87,0x7dc17eba,0x31fe4003,0xff98001d,0x7f900d30,0x80407f40,
    0x0ff205fc,0x4003fb80,0x1fea03fc,0x3ff30ff2,0x7b002fa8,0x36013ea0,
    0x3203f30f,0x007fcc3f,0x5fc817a0,0x0bea01a2,0x3eeb21fa,0x0bf39704,
    0xf9000fee,0x40003aa7,0x800e8dfc,0x03fa03fc,0x9007fcc0,0xf701987f,
    0x3f205307,0x320ffc03,0x5437d43f,0x2057002f,0x7bb004fa,0x11fe4017,
    0x5f0009fb,0x1d97f440,0x6f82fa80,0x80ff8ac8,0xf705f98e,0xabfc8007,
    0x7f40000e,0x07f9001f,0x7c4007f4,0x11fe402f,0x10fee039,0x00ff2059,
    0x43fc87fb,0x02fa83fd,0x13ea0130,0xfc800360,0x001dfdbd,0xffa805a8,
    0x85f5004b,0xf92c83f9,0x0bf34a89,0xf9000fee,0x80001dfb,0xf9000ff9,
    0xf999999b,0x0bfb001f,0xffffff90,0x333bee03,0x7f902ffd,0x7e45fc80,
    0x80efd99c,0xa80002fa,0x5efd404f,0x9f900aaa,0x20005fd5,0x1ff9000e,
    0xd917ea00,0x07fc4b20,0x5c17e63d,0x5fe4003f,0x20000efe,0xf9005ffa,
    0x2007f407,0xfc800efa,0x3fb80e43,0x07f902c8,0x67e45fd8,0x3ea02bcb,
    0x80077cc2,0x7f4404fa,0xc84fffff,0x001ff33f,0x3e6002c8,0x377ea005,
    0x45900edb,0x7ccb33fc,0x8007f705,0x0efe8bfc,0xfe8e8800,0x203fc803,
    0x3fe200fe,0x887f9001,0x5107f701,0xfd00ff20,0x2003fc87,0x9ffd42fa,
    0x09f503f8,0x75331488,0x2e3fc81f,0x00ee005f,0x5400bf30,0x640098af,
    0x30edbe62,0x00fee0bf,0x3fa27f90,0x43a2000e,0x7e400ff9,0xd803fa03,
    0x0ff2004f,0x4003fb80,0x3fe203fc,0x5001fe42,0x2675105f,0x809f505f,
    0x3f21201d,0x5401fec3,0x05f98003,0xc800bea0,0x26367ec2,0x807f705f,
    0x3f61fe43,0xc85b000e,0x01fe406f,0x1bee01fd,0x003fc850,0xc8500fee,
    0x217f203f,0x3ea003fc,0x50041902,0x067cc09f,0x21fe41d4,0x12a02fe8,
    0x017e601c,0x32002fa8,0x2617fcc2,0x407f705f,0x6c1fe42a,0x826400ef,
    0x0ff203fe,0xff980fe8,0x7f90ae01,0x501fdc00,0xf303fc85,0x007f901f,
    0x015c17d4,0xfc80df70,0xb04fdcef,0x03ff309f,0xd99999f5,0x007fa807,
    0x3d800fee,0x07fa86e8,0x0f710bf9,0xfff107fb,0xfa81ee03,0x409fb02f,
    0x03fe81ff,0x07fb07ea,0x7a827e40,0x7dc43fd8,0x009fb00d,0x00261fdc,
    0x0e7ffe44,0x202b3260,0x41cfffc9,0xff52dffb,0x01ffffff,0x0b7ffee2,
    0x80599970,0x2a0bffc9,0x37ffee23,0xfffff932,0x64cbffff,0x3ee1bfff,
    0xfd52dfff,0xffe9819f,0xfff930df,0x77fed437,0xdddff90b,0x4cfffddd,
    0x201bfffc,0xeeefffb9,0x3f265ffe,0x2cddeeff,0x39fff930,0x5f7f5c40,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x55554c00,0x500019aa,0x00c88000,0x0000020a,
    0x5014c030,0x65cc3999,0x71179951,0x0e64c799,0x950bbb95,0xedb809db,
    0xb8732a1c,0x7db900cc,0x32e0bb01,0x27b503de,0x664c0dec,0xb839952c,
    0x0ccccccc,0xd94da800,0x077b225b,0xdbbdfe98,0x174003ff,0x201fb000,
    0x00bea83b,0x80faa000,0x427dc03a,0xf117ec3b,0x51d4990f,0x9f30fa8f,
    0x20fd8fa0,0x407ec2fb,0xff03fa1e,0x13ee4c81,0xf99b9fb5,0x223ff30d,
    0x7dc1d81f,0xb501f304,0x3ff7599f,0xd80df959,0x006fc83f,0x2e000df5,
    0x03f980ff,0x00019d71,0x5002fae2,0x0b0df007,0x40fc89f3,0xdb161ec5,
    0x547b86f8,0xf90bea3f,0x1fd44b81,0xf90f7022,0x360df983,0x3b5fa80f,
    0x10df30e0,0x3e6043ea,0x3f227dc5,0x220ff200,0xffd801ff,0x7e6cc001,
    0x1e77fdc0,0x2003bd50,0x2a002ec9,0x262fb803,0x4fb8fd04,0x047fb0e6,
    0xf86e8866,0x217d4085,0x666fc0fc,0x6e806fdc,0x1fcc4f98,0x6fec07ee,
    0x81fd1003,0x1fb78cfa,0x0fea27cc,0x1fe403f7,0x74c03fd8,0x46c005fb,
    0x03f980fc,0x540bb260,0x3a8001de,0x0325f880,0x4fdb17d4,0x177fcc0d,
    0x88dd7b50,0x42fa803f,0x00be20fc,0x6f82fc40,0x07ee1fcc,0xd8007f44,
    0xbb9d702f,0x4c4f887d,0x900fdc3f,0x007fa07f,0x001ff159,0x4c07e4b2,
    0xec88003f,0x20019f53,0xcedcccca,0x0fd83ccc,0xaaafc40b,0xb1058afb,
    0x749b09ff,0x5402fcc6,0xf107e42f,0x1fe20007,0x70fe63fc,0x02fec03f,
    0x366027dc,0x44f880cf,0x00fdc3f9,0x0bfb07f9,0x00ff2688,0x980fc926,
    0xcea8003f,0x0019d711,0x39733331,0x9f301333,0x58fc8057,0x41057bf1,
    0xd17a2fea,0x280ff88d,0x81f90bea,0xfd00506f,0x3f98bf01,0xc9c80fdc,
    0x81be602f,0x5fbdafe8,0x0fe627c4,0x77e403f7,0x803ffeee,0x101be63b,
    0x4c07e41d,0x7d71003f,0x00ef5401,0xfe800ea0,0x23df9805,0xf98b06fc,
    0x87e89f13,0xf30cc3fe,0x7ec1fc89,0x2e00e20c,0x261fcc2f,0x540fdc3f,
    0x3a203fa3,0x9e98540f,0x7c41d578,0x3ee1fcc4,0xa98ff201,0x03a00cfe,
    0x20ec05fb,0x03f980fc,0x2001764c,0x75002ed9,0x801fdc00,0xe827cc7e,
    0x9ff83e22,0x2629ffd9,0x445dadff,0xbfdc89ef,0x333ffe60,0x3e23740e,
    0x3ea1720e,0x1a617dc4,0x05fb0df5,0x4c07ea09,0x2e1fd44f,0x20ff202f,
    0x9d504fe8,0x20bfd999,0xfc9999da,0xa81fcc1a,0x440001de,0x0ea00bec,
    0x2e001f00,0xbfd00e83,0xeffa8795,0xffa84fc8,0xeffb80cf,0x7cc1cfc8,
    0x0ff81cff,0x426e7744,0xfd73efea,0xc87bea3d,0xdff51dff,0x220fdddd,
    0x27ffb304,0xfd73efea,0x40ff205d,0x335b07fa,0x901ff333,0xffffffff,
    0x5c1fcc1f,0x4400000c,0x000ea05b,0x40100001,0x04080310,0x41100260,
    0x10044008,0x0000c401,0x00000000,0xc8000000,0x81ff503f,0x213ee058,
    0xfc999998,0x1c77c41a,0x80000000,0x00000019,0x00000000,0x00000000,
    0x00000000,0x00000000,0x1fe40000,0x02c86fd8,0x64003fe2,0x01dfb00f,
    0x00000000,0x76cded40,0x44003100,0x554c930c,0xaaaaaaaa,0x00207b51,
    0x4cccccc1,0x32219999,0x0001cccc,0x00000000,0x00000000,0x7dcc3fd8,
    0x2007cc1e,0x1f9004fe,0x00000040,0x36a00000,0xb01fdccf,0xfb8fee0d,
    0x2eea5f93,0xbbbbbbbb,0xbfd71f62,0x66644e05,0x4ccccccc,0x07ffffe2,
    0x00000000,0x00000000,0xfffc9800,0x40cdeeef,0xc882dfeb,0x6400dfff,
    0x0000000f,0x4c000000,0x5e54026f,0xf70ffd83,0x00007f25,0xf932447a,
    0x0001b35b,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x7f300000,0x203a1d00,0x2e3f30c9,0x2880000f,0x0736a013,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x40000000,0x31dc03f9,
    0x2678960b,0x3bbbbae7,0x004eeeee,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x880fe600,0x02e21c86,0x00002c4d,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x01fcc000,0x80cd103b,0x00000141,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xa81fcc00,0x0000ee04,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x20000000,
    0x000004f9,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x02fffaa0,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_24_usascii_x[95]={ 0,2,1,0,1,0,0,0,0,0,1,0,1,0,
1,0,0,2,0,0,0,1,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,-1,1,0,-1,0,0,0,0,0,0,0,
-2,0,0,0,0,0,-1,0,0,1,0,0,0,0,0,0,0,2,1,1,0, };
static signed short stb__times_24_usascii_y[95]={ 19,4,4,4,3,4,4,4,3,3,3,6,16,13,
16,3,4,4,4,4,4,4,4,4,4,4,9,9,6,9,6,4,3,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,22,4,9,3,9,3,9,3,9,3,3,
3,3,3,9,9,9,9,9,9,9,6,9,9,9,9,9,9,3,3,3,11, };
static unsigned short stb__times_24_usascii_w[95]={ 0,3,7,11,9,18,17,3,7,7,9,12,4,7,
3,7,11,7,10,10,11,9,10,10,9,10,4,4,12,12,12,9,19,16,14,14,15,13,12,16,16,7,9,16,
13,19,17,15,12,15,15,10,13,16,16,21,16,16,13,6,7,6,10,13,4,10,12,9,11,10,10,11,11,6,
7,11,6,17,11,11,12,11,8,7,7,11,11,16,11,11,10,7,2,7,12, };
static unsigned short stb__times_24_usascii_h[95]={ 0,16,7,16,18,16,16,7,21,21,10,12,7,2,
4,17,16,15,15,16,15,16,16,16,16,16,11,14,12,5,12,16,21,15,15,16,15,15,15,16,15,15,16,15,
15,15,16,16,15,20,15,16,15,16,16,16,15,15,15,20,17,20,8,2,4,11,17,11,17,11,16,15,16,16,
21,16,16,10,10,11,15,15,10,11,14,11,11,11,10,15,10,21,21,21,4, };
static unsigned short stb__times_24_usascii_s[95]={ 253,178,117,33,94,56,75,252,40,48,225,
79,112,170,252,104,230,239,43,1,33,23,45,111,201,12,173,247,66,125,53,
147,1,16,1,132,210,196,183,161,152,248,122,118,104,84,93,145,226,78,27,
179,1,190,207,157,135,54,169,71,112,64,101,156,138,129,120,140,133,162,242,
15,218,211,56,189,182,235,190,178,71,224,92,121,45,150,92,104,202,236,214,
32,29,21,143, };
static unsigned short stb__times_24_usascii_t[95]={ 1,1,68,23,1,23,23,40,1,1,56,
56,68,68,48,1,1,40,40,23,56,23,23,23,1,23,56,40,56,68,56,
23,1,56,56,23,40,40,40,1,40,23,23,40,40,40,23,1,40,1,40,
23,40,23,23,23,40,40,40,1,1,1,68,68,68,56,1,56,1,56,1,
40,1,1,1,1,1,56,56,56,40,23,68,56,56,56,56,56,56,23,56,
1,1,1,68, };
static unsigned short stb__times_24_usascii_a[95]={ 87,115,142,173,173,289,270,62,
115,115,173,196,87,115,87,96,173,173,173,173,173,173,173,173,
173,173,96,96,196,196,196,154,319,250,231,231,250,212,193,250,
250,115,135,250,212,308,250,250,193,250,231,193,212,250,250,327,
250,250,212,115,96,115,163,173,115,154,173,154,173,154,115,173,
173,96,96,173,96,270,173,173,173,173,115,135,96,173,173,250,
173,173,154,166,69,166,188, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_24_usascii_BITMAP_HEIGHT or STB_FONT_times_24_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_24_usascii(stb_fontchar font[STB_FONT_times_24_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_24_usascii_BITMAP_HEIGHT][STB_FONT_times_24_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_24_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_24_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_24_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_24_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_24_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_24_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_24_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_24_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_24_usascii_s[i] + stb__times_24_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_24_usascii_t[i] + stb__times_24_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_24_usascii_x[i];
            font[i].y0 = stb__times_24_usascii_y[i];
            font[i].x1 = stb__times_24_usascii_x[i] + stb__times_24_usascii_w[i];
            font[i].y1 = stb__times_24_usascii_y[i] + stb__times_24_usascii_h[i];
            font[i].advance_int = (stb__times_24_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_24_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_24_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_24_usascii_s[i] + stb__times_24_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_24_usascii_t[i] + stb__times_24_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_24_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_24_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_24_usascii_x[i] + stb__times_24_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_24_usascii_y[i] + stb__times_24_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_24_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_24_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_24_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_24_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_24_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_24_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_24_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_24_usascii_LINE_SPACING
#endif

