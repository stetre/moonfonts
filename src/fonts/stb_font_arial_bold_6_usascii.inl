// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_bold_6_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_bold_6_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_bold_6_usascii_BITMAP_WIDTH         128
#define STB_FONT_arial_bold_6_usascii_BITMAP_HEIGHT         22
#define STB_FONT_arial_bold_6_usascii_BITMAP_HEIGHT_POW2    32

#define STB_FONT_arial_bold_6_usascii_FIRST_CHAR            32
#define STB_FONT_arial_bold_6_usascii_NUM_CHARS             95

#define STB_FONT_arial_bold_6_usascii_LINE_SPACING           4

static unsigned int stb__arial_bold_6_usascii_pixels[]={
    0x9588e190,0xbbb871c5,0x09944ae1,0x98e6c4e9,0x4387774c,0x5451754b,
    0x3223931c,0x3625930c,0x3669731c,0x29039913,0x3260e4c9,0x394c76a1,
    0x54714ca6,0x24797351,0x95dcf617,0x8cad2b1c,0x2ebb91c5,0xbb8dc43c,
    0x2b211172,0xad231391,0x996370cb,0x5e45976c,0x24b8e323,0x2986c758,
    0x32973992,0x442e4922,0x6556190f,0xb0a89996,0x30dd449b,0x44652b29,
    0x2e329390,0x5222d956,0x9ad2588c,0xa4b190d9,0x394d3224,0x4c914ca6,
    0x245b7772,0x264a9dc7,0x80cac2cd,0x45c17928,0x32e5972c,0x32a1b932,
    0x2ea99b13,0x3b265975,0x6e55b2a5,0x0e549990,0x11c725b7,0x47344b2b,
    0x4b23aab8,0x00000828,0x00000200,0x00600100,0x08218000,0x00020804,
    0x00000004,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x80000000,0x8791298b,0x8654e228,0x2e5932ca,0x24e19370,0xc8e4ca6b,
    0x36e750ce,0x66dc171d,0x4d5c5930,0x05cd1772,0x8dd4ae2e,0x0b94c5c3,
    0x866dc9b7,0x87d1298c,0xa464e20a,0x85c294b9,0xb96324d8,0x2c75b0c9,
    0xc95ce4f6,0x5639393b,0x6e4a7b25,0x9990326a,0x92ac8ed4,0x56432575,
    0x98c8ab21,0x11c3b772,0x5e52e673,0x44327954,0xc8972e4e,0x5c58b2a5,
    0xac64d790,0xc932a3cc,0x49b792da,0x772de40c,0x5d643b27,0xc86b2192,
    0x5437662a,0x1dc8e3dc,0x43200397,0x17401c9c,0x23217160,0x032b193a,
    0x4e4b2320,0x8c93724d,0x3293903a,0x03219298,0x000039b9,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x4336e000,0x8376e6cb,0x98dc642b,0x23a9023c,0x82e15084,0x6dc9022b,
    0x5c6a3953,0xcb8ea6e4,0x52199774,0xe82a9773,0x4eae5b70,0x98ca4aa3,
    0x1cac8ee3,0x8cbb1176,0x6ce4b2a5,0x320f265a,0x47665b10,0x4898d45a,
    0xccb83237,0x6c6532e4,0x23257729,0x4b13ba85,0x295430f8,0x91267319,
    0x07b6a575,0x3260c819,0x547b3b53,0x6c32152c,0x2245d53c,0x890a86c4,
    0x6d203bd9,0x55a4d129,0x92de8421,0x37720077,0x37219bd0,0xc8931b2d,
    0x2d1061c0,0x3213281e,0x920c7710,0x054f7238,0x00000000,0x00000000,
    0x00000000,0x40000000,0x446f22aa,0x642e1509,0x00000003,0x00000000,
    0x00000000,0x54111000,0x00077509,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__arial_bold_6_usascii_x[95]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, };
static signed short stb__arial_bold_6_usascii_y[95]={ 4,0,0,0,-1,0,0,0,0,0,0,0,3,2,
3,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,1,0,1,0,1,0,1,0,0,
0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,1, };
static unsigned short stb__arial_bold_6_usascii_w[95]={ 0,2,3,3,3,5,4,2,2,2,2,3,2,2,
2,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,4,6,4,4,4,4,4,4,4,4,2,3,4,
4,5,4,4,4,5,4,4,4,4,5,6,4,5,4,2,3,2,3,5,2,3,4,3,3,3,2,3,3,2,
3,3,2,5,3,4,4,3,3,3,2,3,3,5,3,3,3,2,2,2,3, };
static unsigned short stb__arial_bold_6_usascii_h[95]={ 0,4,2,5,6,5,5,2,6,6,2,4,2,1,
1,5,5,4,4,5,4,5,5,4,5,5,3,4,4,3,4,4,6,4,4,5,4,4,4,5,4,4,5,4,
4,4,4,5,4,5,4,5,4,5,4,4,4,4,4,6,5,6,3,2,1,4,5,4,5,4,4,5,4,4,
6,4,4,3,3,4,5,5,3,4,5,4,3,3,3,5,3,6,6,6,2, };
static unsigned short stb__arial_bold_6_usascii_s[95]={ 126,73,82,62,1,66,6,125,34,21,122,
57,119,96,93,11,122,61,69,72,53,98,85,65,76,19,104,47,43,86,32,
27,24,16,11,80,1,122,117,89,109,50,15,96,91,85,80,44,70,102,61,
112,53,1,43,36,34,21,6,31,58,14,107,76,90,23,117,27,108,49,58,
94,66,31,17,105,114,90,100,75,53,49,76,101,37,39,96,80,115,40,111,
11,8,5,86, };
static unsigned short stb__arial_bold_6_usascii_t[95]={ 1,14,18,1,1,1,8,14,1,1,14,
14,14,18,18,8,1,14,14,1,14,1,1,14,1,8,14,14,14,14,14,
14,1,14,14,1,14,8,8,1,8,14,8,8,8,8,8,1,8,1,8,
1,8,8,8,14,8,14,14,1,1,1,14,18,18,8,1,8,1,8,8,
1,8,8,1,8,8,14,14,8,1,1,14,8,1,8,14,14,14,1,14,
1,1,1,18, };
static unsigned short stb__arial_bold_6_usascii_a[95]={ 24,29,41,48,48,76,62,20,
29,29,33,50,24,29,24,24,48,48,48,48,48,48,48,48,
48,48,29,29,50,50,50,52,84,62,62,62,62,57,52,67,
62,24,48,62,52,72,62,67,57,67,62,57,52,62,57,81,
57,57,52,29,24,29,50,48,29,48,52,48,52,48,29,52,
52,24,24,48,24,76,52,52,52,52,33,48,29,52,48,67,
48,48,43,33,24,33,50, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_bold_6_usascii_BITMAP_HEIGHT or STB_FONT_arial_bold_6_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_bold_6_usascii(stb_fontchar font[STB_FONT_arial_bold_6_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_bold_6_usascii_BITMAP_HEIGHT][STB_FONT_arial_bold_6_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_bold_6_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_bold_6_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_bold_6_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_bold_6_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_bold_6_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_bold_6_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_bold_6_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_bold_6_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_bold_6_usascii_s[i] + stb__arial_bold_6_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_bold_6_usascii_t[i] + stb__arial_bold_6_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_bold_6_usascii_x[i];
            font[i].y0 = stb__arial_bold_6_usascii_y[i];
            font[i].x1 = stb__arial_bold_6_usascii_x[i] + stb__arial_bold_6_usascii_w[i];
            font[i].y1 = stb__arial_bold_6_usascii_y[i] + stb__arial_bold_6_usascii_h[i];
            font[i].advance_int = (stb__arial_bold_6_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_bold_6_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_bold_6_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_bold_6_usascii_s[i] + stb__arial_bold_6_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_bold_6_usascii_t[i] + stb__arial_bold_6_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_bold_6_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_bold_6_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_bold_6_usascii_x[i] + stb__arial_bold_6_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_bold_6_usascii_y[i] + stb__arial_bold_6_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_bold_6_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_bold_6_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_bold_6_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_bold_6_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_bold_6_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_bold_6_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_bold_6_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_bold_6_usascii_LINE_SPACING
#endif

