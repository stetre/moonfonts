// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_13_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_13_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_13_latin1_BITMAP_WIDTH         256
#define STB_FONT_consolas_13_latin1_BITMAP_HEIGHT         66
#define STB_FONT_consolas_13_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_13_latin1_FIRST_CHAR            32
#define STB_FONT_consolas_13_latin1_NUM_CHARS            224

#define STB_FONT_consolas_13_latin1_LINE_SPACING           9

static unsigned int stb__consolas_13_latin1_pixels[]={
    0x4cc08145,0x11013311,0x10000002,0xcad401f0,0x01a88003,0x74406651,
    0x01930a03,0x03910570,0x25106571,0x930a6019,0x22057001,0x07220001,
    0x353005c4,0x03263440,0x2600ec00,0xd103e1f1,0x6f5f3223,0xea9fe41c,
    0x2e17c404,0x207444ee,0x0cca200f,0x3ae27764,0x574985ec,0x50d006e0,
    0xc883b809,0x765540da,0x882ba4c2,0x404a82da,0x0197103b,0x2b2209b5,
    0x8859d80d,0x7702ecee,0x774c0950,0xdb016a1f,0x13607c3e,0x7c40f5e2,
    0x0e400e80,0x16a1dc97,0x0cc1551f,0xf106a866,0x11021741,0xa8833066,
    0x880d440e,0x2035101a,0x035101a8,0x4089f9d7,0x5c110208,0x5ac84eef,
    0x6dc08810,0x1d003e84,0xa9740260,0x21100746,0x83541f0f,0x0d103d78,
    0x2aaaa0b6,0xd8688d10,0x99b737e3,0x03f31747,0x1a64b8b7,0x45d1e679,
    0x3ae4edf9,0x7675c5ec,0x22f675c5,0x75c5eceb,0x223e25ec,0x3c8d32ed,
    0x1f13c8d3,0x20322039,0x5511e469,0xb5007985,0x93c13ee0,0x4ee03b89,
    0x81ec1f0f,0x0d303d78,0x3f32e0b6,0xd3bb1772,0x3d17cb50,0x6e478974,
    0xb51320ce,0x2e8f234c,0x23aae8f1,0x7c4ba0f8,0xd07c4ba0,0x12e83e25,
    0x75b9741f,0x791a6977,0x3e2791a6,0x09f700da,0x32e3c8d3,0x401aa5eb,
    0x20f7b01d,0x40d10b97,0xf8361f3c,0x107af101,0x8036e097,0x3b3b3b2d,
    0xb07cf10d,0x3c4badc5,0x96e264d9,0x2b71e469,0x715de24b,0xb8b74b8b,
    0xb74b8b74,0x4b8b74b8,0x4d6a3699,0x64699e46,0x6c0bfea3,0x1e46987b,
    0x201e6788,0x07af1069,0x42d8175e,0x201f1ce9,0x07af100f,0x3b6201db,
    0x5a3a5b00,0x3e1f068e,0xe8f88b60,0x2e3d1741,0xc8d32645,0xf07a3e23,
    0x2a264391,0x995a8995,0x5a8995a8,0x1975a899,0x3234d6ed,0xf83c8d33,
    0x41ebc46e,0xb711e469,0x200fc1fd,0x132b702c,0x2cc17d5e,0x3a01f0f2,
    0x207af101,0xd807705a,0x435ed3d2,0x3e61f0f8,0x74436e40,0x23f10e9c,
    0x791a60f9,0xedd86dc8,0x95b89918,0xb8995b89,0x995b8995,0x295b55b8,
    0x33c8d33c,0xeac43c8d,0x262656e1,0x217b1e46,0x0447760f,0x7996c0f1,
    0x3a07e678,0x361f16e1,0xebc40f20,0x05b06881,0xd7d1d2d8,0x7fcf3077,
    0x03f981ee,0xdfd50bee,0x216c6985,0x7df703f9,0x16e7916e,0x27916e79,
    0x45b9e45b,0xf33df13c,0x265b1a61,0xc98896c6,0x3ccb60fa,0x3e25b1a6,
    0xffb81f50,0x7c412e1e,0x23c1feee,0x3a24a82d,0x41f0f8bd,0x07af105b,
    0x2016c1a2,0x73553b2d,0x400f9320,0xf04c807a,0x3e63f103,0x11a03d40,
    0x7c43e63f,0x47e21f31,0x263f10f9,0x3e63f10f,0x887bbe60,0x3e21f31f,
    0x3fa61f31,0x3bbe22df,0x4c7e21fe,0x3efbb20f,0x00e80e80,0x899333b7,
    0x07c0bdb7,0x07c3e32a,0x0f5e20ba,0x401d83c4,0xf300771f,0xfb9807c1,
    0x03d97901,0xdf51b7ee,0x00fdcc5f,0x5dfd30b3,0x4c2efe98,0x7f4c2efe,
    0x177f4c2e,0x77d40326,0x17f7d42f,0x4cedc164,0x7f7d44c9,0x510b0002,
    0x01a616c0,0x43e00980,0x3307440f,0x9b026baf,0x7103ee23,0x4e744d93,
    0x3217441a,0x54039500,0x04c400aa,0x88039500,0x00000002,0x00098000,
    0x6c04c000,0x000034c2,0x00000000,0x07c3e000,0x74cc884c,0x52a88399,
    0x17971017,0x440bcb88,0x00000002,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00249000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x015c0000,0x0cae20ae,0x10bffb62,0x00326039,0x88195c40,0x33288332,
    0x5c066510,0x3910ae02,0x64401930,0xea80f541,0x2a1f4401,0x07f50795,
    0xbd50f2b5,0x207f5075,0x1a883bdc,0x54c06a20,0x02aa51aa,0x702a0000,
    0x5503b807,0x8ffe85d9,0x036b222d,0x47ba6254,0x1765545a,0xa4c2ba4c,
    0x0574982b,0x221dc077,0x04a80dac,0x3881b591,0x03700e20,0x27106651,
    0x4199440b,0x73881731,0x41dfea81,0xeb85dbdc,0x6d6e45ec,0x8db9bf2e,
    0x5274c1f8,0x808bfa8b,0x10601301,0x363ffe61,0x33100982,0x232a7633,
    0x2201300e,0x01301999,0x98866662,0x4ccc4199,0x10666621,0x99883333,
    0x40aaa219,0x055302a9,0x154c0aa6,0x54415544,0x02aa882a,0x9ad41f91,
    0xe83e23c8,0x5f3cc3e2,0x881910f4,0x1501d15d,0xfb85c8b7,0x4b24f984,
    0x42d8fff8,0x99bb04fb,0x0b2eeb29,0xfcb827dc,0xb04fb84c,0x7e5c999b,
    0x2666ec4c,0xcb899f97,0x666ec4cf,0x517af2e4,0xaea8bb5d,0x2ed7545d,
    0x97176baa,0xebcb8bd7,0x22f5e5c5,0x2765dcea,0x16e68cdc,0x25b97497,
    0x554cb60f,0x80597a80,0xb01f12f8,0x21fd30f7,0x363fee2c,0x2d83dec2,
    0x205acc88,0x807c07bd,0x805b07bd,0x7c02d80f,0x0b603e00,0x741f1e20,
    0x3e1e83e1,0x3a0f87a0,0x3c40f101,0x887c4f10,0x268f1d0f,0xdbb2d44c,
    0x25d07c1b,0x56d41fca,0x32d50059,0x983d7884,0x988593ce,0x0f5e22d8,
    0x403a016c,0x07c03d78,0x2d81ebc4,0x016c07c0,0xd80f803e,0x1fdb7102,
    0x4bb333e6,0x32ecccf9,0x265d999f,0x222ecccf,0x2e20fedb,0x36e20fed,
    0x2e8d30fe,0x99341d1d,0x013f15b8,0x3d03ea1f,0x2f980740,0x56e03efa,
    0xcbc74c4c,0x95b8b602,0x8bdddb09,0xadc1cbbc,0x2e03e04c,0xdddb0995,
    0xddb01f0b,0x7c01f0bd,0x25eeed80,0x3e21f0bd,0x3f109999,0x27e21333,
    0x33f10999,0xf85ec133,0xb07c2f60,0x234c3e17,0x1bd5591e,0xd8f22dcb,
    0xdff0efee,0x3203d03d,0x27c40c9b,0x4cb607f3,0x2cbdb4c7,0xf32d8b60,
    0x4c1337b0,0x96c5acad,0x3603e079,0x337b0f32,0x37b01f01,0x7c01f013,
    0x1099bd80,0x3e83ea1f,0x03e80fa0,0xa87c40fa,0x3ea1f10f,0x43ea1f10,
    0x261f31f8,0x1f88b60e,0x7b1a61f3,0x303d003e,0x0ba07bab,0xdddf101f,
    0xce9b4c3f,0x77c47e02,0x816c1fee,0x2268bb8e,0xf01feeef,0xfeeef881,
    0x03e016c1,0x401f00b6,0xd902d80f,0x7f4c1f7d,0x377f4c6e,0xd31bbfa6,
    0xbeec8ddf,0x3efbb20f,0x83efbb20,0x74c1fefa,0xefe982ee,0x3aa6fe62,
    0x81e801f1,0x2a3edb8e,0xdb80f84e,0x9a64c999,0x3afaa2fd,0x326676e5,
    0x89dc16c4,0x2676e2ee,0xb81f04c9,0x6c4c999d,0x16c07c02,0x80f803e0,
    0x0000002d,0x00000000,0x00000000,0xc8733260,0x3ffffd00,0x11f54cee,
    0x216c07c0,0x2fa9a669,0x30b6154c,0x07fffd8d,0xe8d30b60,0x30b67fff,
    0x27fffd8d,0x7ec7fffe,0x3fffa7ff,0x23ffff47,0x0007fffd,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x4000b722,
    0x1f4401ea,0x6f540d44,0x54450a3a,0x04ccc40a,0x1a980988,0x7d102df8,
    0x54c06a60,0x80266621,0x4155440f,0xf01303fa,0xd50aa001,0x21e56a03,
    0xa883f10a,0xa87d100a,0x87f50795,0x5150cc19,0x9d52d49d,0x3e7362d4,
    0x113fae01,0xea81b807,0x0b98c4ec,0x3332783e,0x0f33762f,0x9d90f7b2,
    0x705f50db,0x5d9dd103,0xb976774c,0x83e04ecc,0x220fccfa,0xf03d0173,
    0x80ea9801,0x86651038,0x643f12f8,0x03704cce,0x27106651,0x25d1e60b,
    0xd14b9bfa,0x0e8a5cc1,0xf101e8f4,0x220aa601,0xf10f82aa,0x07c2a981,
    0x02d96e0f,0x3e0f812e,0x154c5b80,0x005d01f4,0x0faa8899,0x2607c3f1,
    0x56754c2a,0x902aa3e2,0x1428bf9d,0x3e04154c,0x21401f10,0x2850a142,
    0x85478974,0x2970594b,0x05cdc82c,0x6df6416a,0x32f5e5c5,0x7d91fdcd,
    0x20f07cbb,0x0f80b64b,0xb8355360,0x9976fb24,0x6401aa07,0x43f33ea4,
    0x7d907c69,0x66fe54bb,0x4db9bf0c,0x7c3d7778,0xdbec83e0,0x7c1f0745,
    0x20f83e02,0x20f83e0f,0x025d6e0f,0x2a60b353,0x26bf7059,0x2abb2a61,
    0x102e8f11,0x66ec6d4f,0x1f2e8f13,0xd83bb63c,0x3be21dff,0x7ff444fe,
    0x7886f540,0x2e06a974,0x99039934,0xd30f87e2,0x2e8f10f8,0x3d17c0f4,
    0xf1e46d6a,0x747887c1,0x260f83e2,0x3e0f82ee,0x3e0f83e0,0xe8f883e0,
    0x7400e801,0xdaf9e980,0x2abb2a62,0x223c8b51,0xdd50fedb,0x322d4f27,
    0x983f25f3,0x27b886c9,0xeb8ba0f8,0x2a2545ea,0x20799e45,0x905d514b,
    0x221f1e69,0x16a1fb0f,0x0f81e879,0xcb46ccb6,0xb50f83e3,0x0f83e3c8,
    0xf07c5ea8,0x7c1f07c1,0x8db903e0,0x32ef21d8,0x20c9bc81,0x703ff53c,
    0x23c8d509,0x3e61f0bd,0x32354b61,0x0b97ddf3,0x443e203e,0x20f89ec7,
    0x8d50a62e,0x35407e3c,0x3ccf20b6,0xf8dfb83e,0x743c8d50,0xf8b60f81,
    0x83e0f8bc,0x23c8d50f,0x43f0120f,0x20f83e0f,0x40f83e0f,0x997cc3f9,
    0xd598b535,0xfd8adc3d,0x1f884b80,0x543e21f1,0x13ccba0f,0x07c3e23f,
    0x46b83d40,0x3e23d12e,0x214c3f10,0x641f11f8,0xb1f4111d,0xf8974465,
    0x87c01fb1,0xc81f11f8,0x41f30f84,0x96c2fef9,0x223f10fb,0x20b87e0f,
    0x72d83e60,0x0fb96c1f,0x2a07dcb6,0x3d10e807,0x43edb8e8,0xb85dcffd,
    0x85fdf504,0x260fbeec,0x77d41eee,0x77403e2f,0x37fba1df,0x217774c0,
    0x3643fefb,0x2217f7d4,0x3621efeb,0x9ffb1fff,0x00eaefb8,0x2fefa83e,
    0xfb0eed98,0x206883dd,0x2a0ebeea,0x88fc2fef,0x5dfff31f,0x20ebeea8,
    0x2a0ebeea,0xf730ebee,0x3be3b803,0x1f54cee5,0x0004b800,0x0c800000,
    0x00008020,0x00000000,0x90000004,0x44000000,0x32000001,0x00000400,
    0x001ca800,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x40000000,0x5bd50440,0x0182a607,0x88111aa8,
    0x41fd4000,0x1f4401ea,0x4cc13330,0xd8f2b501,0x880f41ff,0x31099999,
    0x9803e333,0x19998819,0x4c401333,0x4c060220,0x31088100,0x01510333,
    0x30000082,0x4cc13333,0x30110999,0x318f234c,0x1d9bb017,0x5ef4403e,
    0x89741f35,0x2e710e45,0x0dc03880,0x2279df30,0x9443fdcf,0x0f41e819,
    0x49999ab8,0x03e999bb,0xb17ee7cc,0x373e999b,0x6c5fb04f,0x27dc3543,
    0x65cf234c,0x767644cf,0x20498e83,0x3a60953b,0xdd12feee,0x916e3fdd,
    0x28f234cb,0x3e0d3055,0x40f62eee,0xedd8b54c,0x40554c6d,0xaa980aa9,
    0xf1173200,0x15530fc4,0x543d07a0,0x525b7170,0x42a8f82d,0x1ec3e669,
    0x541f887c,0x791aa2dd,0x8d30f7b0,0x9e207c3c,0x73f310f8,0x641b9019,
    0x703c400d,0x0f897c4b,0x6fc791a6,0xf82d45dc,0x407e1f30,0x6dc0e9f8,
    0x0fe545d9,0x6540fe54,0x116ba01f,0x3f2a3c8f,0xb1e83d01,0x6d2d05c9,
    0x25dcef82,0x83d9ec69,0x8e88ba0f,0x0f83e22d,0x34c1ebc4,0x6a81f0f2,
    0xecfc98f4,0x5c13623d,0x4c0f200e,0x44cb540f,0x25f1e469,0x333b6678,
    0x5d2d83e1,0x96c27d40,0x7403d079,0x65c07a01,0x5dfd4ef9,0x7407a12e,
    0x2e26cf41,0x3b695c88,0x9e25f5ee,0xcdda5c69,0x83ea1f3c,0x33d85b3c,
    0x3132b70d,0xf87fdddf,0x7d457c40,0x3a165622,0xf883dc04,0x2fa05d00,
    0x8f234c0f,0x76443e0f,0x7c43e1aa,0xcc821b91,0x6a9ec4cf,0x00f403d0,
    0x3a67a03d,0x3613f309,0x83d01e84,0x2a8b86de,0xf84cded2,0x3634c3e0,
    0x3e555bb4,0xd9a61dff,0xd83cb542,0x99e98f32,0x4c07c3d9,0xb511eced,
    0x1f4415b3,0x07901ea8,0x83f9816e,0x41f16c69,0x67c16a0f,0x377dc3fd,
    0xfb835f33,0x403d04ec,0x2607a01e,0x23c45dcf,0x3d01e82f,0x45c3eae8,
    0x7c16d208,0x3e34c3e0,0x201f07b2,0x24efeeed,0x7c40f8f8,0x1a61feee,
    0x4400f879,0x33f3b6e7,0x07645d82,0x0f980f88,0x8fc407c0,0x0f83e0f9,
    0x055fc16a,0x77f6c0e8,0xf555d10e,0x0f403d03,0x537903d0,0x0db3788b,
    0x3a0f407a,0x2a2e2f89,0x07c16d22,0x36cda61f,0x2201f07b,0x6c0bd999,
    0x999db86d,0x8791a64c,0x70fa600f,0x2a7901a7,0x2e826405,0xdf500f80,
    0x43e0f85f,0xf2fffffa,0xf9985801,0x4130a21a,0x3a1ffffe,0x3fa1ffff,
    0x21f11fff,0xdff16ff9,0xffffe819,0x23ffffd1,0x32e3f31e,0xffb4cccc,
    0x30f83eff,0x1ec19dff,0x82d8007c,0x4c2d83fa,0x3a791a66,0x6f747fff,
    0x000f2c82,0x7cc07c40,0x0f83ffff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x44202200,
    0x22130600,0x98099999,0x9804cc41,0x180ccc0a,0x2088304c,0x2aa21aa9,
    0x155442a8,0x8355050a,0x403602a9,0xa94002a9,0x505444c2,0x44005555,
    0x44098d42,0x41982a62,0x0006c419,0x10a22a22,0x1002e035,0x88590881,
    0xb87c0976,0x333f3266,0xbd0ffa62,0xfced87fb,0xa8ff33e2,0x3e67f32f,
    0x5df5cb24,0x377f2ea2,0xf97af2e3,0x5ef443e0,0x4176baa5,0x5dbec80f,
    0x37e588ec,0x337365dc,0x0db7770f,0x33d8b11b,0x4b30b21d,0xe8f30ebb,
    0x6440f442,0x3b36a1cc,0x5d7d12dd,0x13f301f0,0x1e47e21f,0x1f025d66,
    0x203e01d3,0xa8f43dad,0x87cd5047,0x6e576a78,0x4b21fd33,0x698f803d,
    0x1f07cf10,0x3d07c0f6,0x4267e662,0x5d317478,0x27897c3d,0x3d10b65d,
    0xf885b5a8,0xaacee1e9,0x2e87ae64,0xcbd800f3,0x27ab50ca,0x212a773a,
    0xb73f880f,0x2653b932,0x74fc0975,0x3d803e01,0x260698f4,0x7534c3e6,
    0x3a697d1d,0x3ba6593c,0x777ee443,0x43fb6e26,0x40fc3e0f,0x32ecccf9,
    0x2a399f99,0x0fea1e45,0x02d87c1f,0x34c74174,0x4e543fa8,0xb1b33baf,
    0x2a4cadc3,0x734fffff,0x4ea53777,0xa552e756,0x44fffffa,0xb83f3a1e,
    0x974a9f8b,0x3e01f7c0,0x9bd0f600,0xdf1ec05d,0x6e5dc3fd,0x2f1d34ab,
    0x9936cc2c,0x7c2f603e,0x2d87c1f0,0x09999f88,0x323540f8,0xf87afa23,
    0x9016c3e0,0x416d2e09,0x5decc5ec,0x3bbd12bd,0x000747c4,0x25575771,
    0x744ead3a,0x540f80ee,0x2a17d43e,0x973acdbc,0x3e0367c0,0x97d0f600,
    0x27e2e40b,0xf3770fb9,0x5eda6951,0x2767982c,0xa87c42f9,0x43ee5b0f,
    0x01f410db,0x447e207c,0xf34c760f,0x502d87c1,0x4688e80d,0xb7447b6a,
    0x111111de,0x1b106dd8,0x3a96e790,0x44444ead,0xf9000f80,0xbf8dca8b,
    0x6c7c0973,0x3d803e04,0x5b83d8f4,0x9e4ba0f8,0x74da6b51,0x45fddd2c,
    0x24ed9eea,0xd50fbeec,0x3ae21d7d,0x1bbfa66e,0x2fefa80c,0xb0f83e00,
    0x3ffffa05,0x223f1000,0x87dd3e2f,0x7d43ddda,0x2e01b102,0xab4ea0bc,
    0x907bbb53,0x5d1f3001,0x72edaf4c,0x03e87c09,0x3a1ec01f,0xf05b8d31,
    0x21643e61,0x17ecd35a,0x00004002,0x3fe20000,0x00001fff,0x00000000,
    0x00000000,0x00000000,0x10fa9f40,0x7dcbea7f,0x4c3e1fff,0xfe80f81f,
    0x743d2fff,0x4bffffe2,0x0b22dfff,0x2fa9a6b3,0x00000000,0x00000000,
    0x0d000000,0x00888880,0x5ea3f103,0xb907aa3e,0x98644623,0x21e56a2f,
    0x2e880ccc,0x0009b1ae,0x00000000,0x00000000,0x00000000,0x80000000,
    0x5ee88b0c,0xddb17fa2,0x89676721,0x3bba21fc,0x41f541ee,0x10b6f31f,
    0x65756d47,0x8bea7f54,0x19983328,0x00000370,0x00000000,0x00000000,
    0x00000000,0x00000000,0x7c41e566,0x53b8fc20,0x73067dc9,0xd1d0003d,
    0x36d30f81,0xcd88cc02,0x000002a0,0x00000000,0x00000000,0x00000000,
    0x00000000,0xd8000000,0x077541f2,0x2b53c9ae,0x1d84cdcb,0x87bbbba2,
    0x0000953b,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x4c000000,0xc8ba0976,0x47b7a20d,0x107602b0,0x64481111,0x7ffcc000,
    0x7fff30ff,0xaaaaa874,0x0000002a,0x00000000,0x00000000,0x00000000,
    0x00000000,0x83a3b000,0xff50dee9,0x3050089f,0x00007fff,0x441d0000,
    0xccc96208,0x0000cccc,0x00000000,0x00000000,0x00000000,0x00000000,
    0x80000000,0x00000000,0x80000000,0x0000000d,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__consolas_13_latin1_x[224]={ 0,2,1,0,0,0,0,2,1,1,1,0,1,1,
2,0,0,0,0,1,0,1,0,0,0,0,2,1,0,0,1,1,0,0,1,0,0,1,1,0,0,1,1,0,
1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,2,1,1,0,0,0,0,1,1,0,0,0,0,1,1,
0,1,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,1,3,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,
3,0,0,0,1,0,0,1,0,0,1,0,1,1,0,1,0,2,2,1,1,0,0,0,0,1,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
 };
static signed short stb__consolas_13_latin1_y[224]={ 9,0,0,0,-1,-1,0,0,-1,-1,0,2,6,5,
7,0,0,0,0,0,0,0,0,0,0,0,2,2,1,3,1,0,-1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,10,0,2,0,2,0,2,-1,2,0,-1,
-1,0,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,-1,-2,-1,4,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,2,-1,0,0,0,
-2,-1,0,0,0,2,5,5,-1,0,-1,1,-1,-1,0,2,0,4,9,-1,0,2,-1,-1,-1,2,-2,-2,-2,-2,
-2,-3,0,0,-2,-2,-2,-2,-2,-2,-2,-2,0,-2,-2,-2,-2,-2,-2,2,-1,-2,-2,-2,-2,-2,0,-1,0,0,
0,0,0,-1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,
 };
static unsigned short stb__consolas_13_latin1_w[224]={ 0,3,5,7,7,8,8,3,5,5,6,7,4,5,
3,7,7,7,7,6,7,6,7,7,7,7,3,4,6,7,6,5,8,8,6,7,7,5,5,7,7,6,5,7,
6,7,7,7,6,8,6,7,7,7,8,7,7,8,7,4,6,4,7,8,5,7,6,5,7,7,7,7,6,6,
6,6,6,7,6,7,6,7,6,6,7,6,7,7,7,7,6,5,2,6,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,3,6,7,7,7,
2,7,6,8,5,7,7,5,7,6,5,7,5,5,7,6,7,3,3,5,5,7,8,8,8,5,8,8,8,8,
8,8,8,7,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,6,7,7,7,
7,7,7,7,7,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,
 };
static unsigned short stb__consolas_13_latin1_h[224]={ 0,10,4,9,12,11,10,4,13,13,6,7,6,2,
3,11,10,9,9,10,9,10,10,9,10,9,8,10,9,5,9,10,13,9,9,10,9,9,9,10,9,9,10,9,
9,9,9,10,9,12,9,10,9,10,9,9,9,9,9,13,11,13,5,2,3,8,10,8,10,8,10,10,9,10,
13,9,9,7,7,8,10,10,7,8,10,8,7,7,7,10,7,13,14,13,3,9,9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,12,9,9,9,
14,12,3,10,7,7,3,2,7,3,6,8,6,7,3,10,11,3,2,6,7,7,10,10,10,10,11,11,11,11,
11,12,9,11,11,11,11,11,11,11,11,11,9,11,12,12,12,12,12,7,12,12,12,12,12,11,9,11,10,10,
10,10,10,11,8,9,10,10,10,10,9,9,9,9,10,9,10,10,10,10,10,7,10,10,10,10,10,12,12,12,
 };
static unsigned short stb__consolas_13_latin1_s[224]={ 250,208,205,208,177,51,19,201,7,52,172,
243,251,219,229,218,52,40,55,75,159,82,89,230,97,200,252,251,216,185,223,
105,43,176,63,119,138,125,146,127,185,193,135,24,17,70,78,212,152,81,48,
212,32,1,167,9,1,246,238,18,243,13,193,229,211,101,173,116,141,122,28,
220,131,235,36,110,103,229,154,138,228,149,161,86,165,109,205,191,183,244,168,
23,1,29,217,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,
117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,250,204,106,
17,46,38,4,73,233,203,199,175,211,219,221,240,166,130,160,154,247,68,27,
225,225,179,237,146,10,1,242,250,226,10,35,60,77,185,78,210,44,101,124,
86,116,93,108,69,87,19,113,121,129,137,145,146,153,161,169,194,90,1,25,
235,131,44,187,179,171,202,93,32,139,147,163,155,62,70,54,95,195,9,36,
111,157,60,196,213,180,188,220,236,228,98,58,65, };
static unsigned short stb__consolas_13_latin1_t[224]={ 12,28,57,39,1,16,28,57,1,1,57,
49,49,61,57,1,28,49,49,28,39,28,28,39,28,39,28,16,39,57,39,
28,1,39,49,28,39,39,39,28,39,39,28,49,49,49,49,16,39,1,49,
28,49,39,39,49,50,39,39,1,1,1,57,61,57,49,28,49,28,49,28,
16,39,16,1,39,39,49,49,49,16,28,49,49,28,49,49,49,49,28,49,
1,1,1,57,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,
39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,12,28,1,
39,39,39,1,1,57,16,49,49,61,61,49,57,57,49,57,57,57,28,16,
57,61,57,49,57,28,28,16,1,1,16,16,16,16,1,39,1,16,16,16,
16,16,16,16,16,39,16,1,1,1,1,1,49,1,1,1,1,1,16,39,
1,16,28,16,16,16,1,49,39,16,16,16,16,39,39,39,39,16,39,28,
28,28,28,28,49,28,28,28,28,28,1,1,1, };
static unsigned short stb__consolas_13_latin1_a[224]={ 114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_13_latin1_BITMAP_HEIGHT or STB_FONT_consolas_13_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_13_latin1(stb_fontchar font[STB_FONT_consolas_13_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_13_latin1_BITMAP_HEIGHT][STB_FONT_consolas_13_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_13_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_13_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_13_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_13_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_13_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_13_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_13_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_13_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_13_latin1_s[i] + stb__consolas_13_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_13_latin1_t[i] + stb__consolas_13_latin1_h[i]) * recip_height;
            font[i].x0 = stb__consolas_13_latin1_x[i];
            font[i].y0 = stb__consolas_13_latin1_y[i];
            font[i].x1 = stb__consolas_13_latin1_x[i] + stb__consolas_13_latin1_w[i];
            font[i].y1 = stb__consolas_13_latin1_y[i] + stb__consolas_13_latin1_h[i];
            font[i].advance_int = (stb__consolas_13_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_13_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_13_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_13_latin1_s[i] + stb__consolas_13_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_13_latin1_t[i] + stb__consolas_13_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_13_latin1_x[i] - 0.5f;
            font[i].y0f = stb__consolas_13_latin1_y[i] - 0.5f;
            font[i].x1f = stb__consolas_13_latin1_x[i] + stb__consolas_13_latin1_w[i] + 0.5f;
            font[i].y1f = stb__consolas_13_latin1_y[i] + stb__consolas_13_latin1_h[i] + 0.5f;
            font[i].advance = stb__consolas_13_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_13_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_13_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_13_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_13_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_13_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_13_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_13_latin1_LINE_SPACING
#endif

