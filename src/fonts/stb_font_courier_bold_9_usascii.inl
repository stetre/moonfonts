// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_9_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_9_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_9_usascii_BITMAP_WIDTH         128
#define STB_FONT_courier_bold_9_usascii_BITMAP_HEIGHT         34
#define STB_FONT_courier_bold_9_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_bold_9_usascii_FIRST_CHAR            32
#define STB_FONT_courier_bold_9_usascii_NUM_CHARS             95

#define STB_FONT_courier_bold_9_usascii_LINE_SPACING           4

static unsigned int stb__courier_bold_9_usascii_pixels[]={
    0x00000000,0x00500311,0x00201804,0x0c4016dc,0x20000000,0x8773f940,
    0x34190765,0x9572ecb1,0xb916234c,0x2e26f447,0xf06ecc4f,0x8645d49d,
    0x41627eea,0xd83a202e,0x2e26e44d,0xb162ca3b,0x5c59912c,0xbd158592,
    0x4571a21d,0xd8d10b48,0x1740ec28,0x64583996,0x541cca81,0xb1a910dc,
    0x42454436,0x166b0745,0x0ea4c953,0x34497b2c,0x88325316,0xf11edc5d,
    0x325bc8bb,0x443a8371,0x50d9da85,0x2ff41d39,0x654c7f36,0x41d16b14,
    0x4c910b35,0x3be6b0d4,0x49875146,0x594c360b,0x10c80cb4,0x901b09bd,
    0x32553a81,0x42d261b0,0x2172a65a,0x885962c5,0x960e4ee4,0x20b1c2ad,
    0x977662dd,0x2edc2fd9,0xdee89bb3,0x744982c2,0xfbb30dde,0xbb177629,
    0x2e80a443,0x887a5895,0x72c43a4a,0x398055cb,0x00120000,0x12000420,
    0x80000804,0x010981c9,0x0bc88441,0x00044102,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xbca80a80,
    0x20072ee2,0x5e54373a,0x5c1db801,0x83500003,0x336a3dd9,0x6e4736e1,
    0x4db802d9,0x261760b7,0x951e7443,0x64edc5d3,0x3a950791,0x441f3750,
    0x1b1752ed,0xdd882ee2,0x15dc3d83,0x46a752c4,0x64aa573b,0x9498bb11,
    0x2160eb61,0x70d6c42b,0x574a8363,0x95b07362,0x37626864,0x32e39963,
    0x36a34623,0x2c1065c3,0xa82c262b,0xdd858192,0x2160bba2,0x6440c859,
    0x93baa0ee,0x07cc69d8,0x1bc8fdb1,0xb888dc6e,0x1cec3c83,0x585c3b7a,
    0x0e4f6a72,0x16064ea1,0x37a1b113,0xb50b0580,0x1d43907b,0x12a259c4,
    0x88551a62,0x6c3b84dd,0x363774c3,0x45bb50fd,0xbb11ede8,0x2c1eec3d,
    0x56dd77aa,0x21bfd32f,0x3000dfe9,0x320e6479,0x09972f8e,0x2f74c397,
    0x0ddf7000,0x080010db,0x2fec4000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x36e2dc88,0xa6d361dd,0x232e2cdb,0x25b1972d,0x3362d9db,
    0x4bbb13d8,0xbb31d9da,0xb9eeed47,0x39b70ddd,0xb72d9ad8,0x445d985b,
    0x177621cb,0xb388ee5b,0x57156c64,0x86c64c72,0x236259d8,0x3912f265,
    0x262c4557,0x22b8d8b4,0x7393498d,0xa8362aa1,0xb1931c8f,0x5d41ec81,
    0xd916ae65,0x849905f1,0x12d6208d,0x40fa8b9d,0x03be60fa,0x45859f97,
    0x6d6c7de9,0x7e887ba1,0x2ea2a954,0x0fbd30bd,0x35ed493d,0x33732166,
    0x320b0282,0xb16b222c,0x9c98b097,0x20fdfd44,0x362c64c5,0x9104ec1a,
    0x0e4aa335,0x3261d755,0x3b7a63b8,0x6c5fbb50,0x2b6720b8,0x83fd8482,
    0xadc76479,0x3f63f8ec,0x98f23b24,0x97f621f6,0xbf32f9ec,0x3b22fd41,
    0x89dd92ee,0xdd90e8ec,0x05eaf43d,0x9d07f7d4,0x0000017a,0x00000000,
    0x00000000,0x00000000,0x20980000,0xa82f2609,0x8180261c,0x00e543ca,
    0x3711ccd4,0x77770019,0x712b95c1,0x05c5cc77,0x2ee1cb98,0x355532b8,
    0xcd8826dc,0x64ecc2a0,0x261d5951,0x744580cd,0x03672a4a,0x6458ba8b,
    0xb03a619d,0x65e457d5,0x449b712c,0xd99a0dce,0x98756a59,0xb82c0aaa,
    0x20aa081e,0x7541ccdc,0x2239f952,0x95c725ca,0x2ce25fe8,0x8b3b102e,
    0x3a639d8c,0x32065c6e,0xb388a62e,0x3bae3bd8,0xdc882c2e,0x3bbb1620,
    0xd987b762,0xbd507443,0x322ef44b,0x4bf7a22d,0x0c224eea,0x3f16faba,
    0xc87f7ccd,0xec812f9f,0x003e62e8,0x3b307158,0x20402026,0x020900cb,
    0x00008404,0x00000000,0xf7000000,0x000007dd,0x00000000,0x00000000,
    0x00000000,0x4080b000,0x5555139d,0x4cc8ac45,0x00000000,0x00000000,
    0x40000000,0x22179d34,0x5544e324,0x022202aa,0x00000000,0x00000000,
    0x30000000,0x021014c2,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_bold_9_usascii_x[95]={ 0,1,1,0,0,0,0,1,2,0,0,0,1,0,
1,0,0,0,0,0,0,0,0,0,0,0,1,1,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,1,0,0,0,-1,1,0,-1,0,0,0,0,0,0,0,
0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,1,1,1,0, };
static signed short stb__courier_bold_9_usascii_y[95]={ 6,0,1,0,0,1,1,1,0,0,0,1,4,3,
5,0,0,0,0,0,0,0,0,0,0,0,2,2,1,2,1,1,0,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,7,0,2,0,2,0,2,0,2,0,0,
0,0,0,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,0,0,2, };
static unsigned short stb__courier_bold_9_usascii_w[95]={ 0,2,3,5,5,5,5,2,2,3,5,5,3,5,
2,5,5,5,5,5,5,5,5,5,5,5,2,3,6,5,5,5,4,6,5,5,5,5,5,5,5,5,5,5,
5,6,6,5,5,5,5,5,5,5,6,6,5,5,5,3,5,3,5,7,3,5,6,5,5,5,5,5,5,5,
4,5,5,6,5,5,6,5,5,5,5,5,5,6,5,5,5,3,2,3,5, };
static unsigned short stb__courier_bold_9_usascii_h[95]={ 0,7,3,7,7,6,6,3,8,8,5,5,4,2,
2,7,7,6,6,7,6,7,7,7,7,7,5,5,5,3,5,6,7,5,5,6,5,5,5,6,5,5,6,5,
5,5,5,6,5,7,5,6,5,6,5,5,5,5,5,8,7,8,4,2,3,5,7,5,7,5,6,6,6,6,
8,6,6,4,4,5,6,6,4,5,6,5,4,4,4,6,4,8,8,8,3, };
static unsigned short stb__courier_bold_9_usascii_s[95]={ 125,38,20,32,59,68,86,7,25,21,54,
36,104,35,32,41,47,116,74,53,80,71,65,83,108,114,125,14,7,120,30,
1,120,100,94,104,81,75,69,98,57,51,92,38,1,119,87,62,63,77,20,
122,7,110,13,44,26,32,113,1,89,28,72,24,16,107,95,18,102,24,56,
50,38,13,16,1,7,78,108,48,31,25,66,42,19,60,114,85,98,44,92,
12,9,5,10, };
static unsigned short stb__courier_bold_9_usascii_t[95]={ 7,1,29,1,1,10,10,29,1,1,23,
23,23,29,29,1,1,10,10,1,10,1,1,1,1,1,1,23,23,23,23,
17,1,17,17,10,17,17,17,10,17,17,10,17,24,17,17,10,17,1,17,
10,17,10,17,17,17,17,17,1,1,1,23,29,29,17,1,23,1,23,10,
10,10,10,1,10,10,23,23,23,10,10,23,23,10,23,23,23,23,10,23,
1,1,1,29, };
static unsigned short stb__courier_bold_9_usascii_a[95]={ 76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_9_usascii_BITMAP_HEIGHT or STB_FONT_courier_bold_9_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_9_usascii(stb_fontchar font[STB_FONT_courier_bold_9_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_9_usascii_BITMAP_HEIGHT][STB_FONT_courier_bold_9_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_9_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_9_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_9_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_9_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_9_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_9_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_9_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_9_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_9_usascii_s[i] + stb__courier_bold_9_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_9_usascii_t[i] + stb__courier_bold_9_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_9_usascii_x[i];
            font[i].y0 = stb__courier_bold_9_usascii_y[i];
            font[i].x1 = stb__courier_bold_9_usascii_x[i] + stb__courier_bold_9_usascii_w[i];
            font[i].y1 = stb__courier_bold_9_usascii_y[i] + stb__courier_bold_9_usascii_h[i];
            font[i].advance_int = (stb__courier_bold_9_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_9_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_9_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_9_usascii_s[i] + stb__courier_bold_9_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_9_usascii_t[i] + stb__courier_bold_9_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_9_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_9_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_9_usascii_x[i] + stb__courier_bold_9_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_9_usascii_y[i] + stb__courier_bold_9_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_9_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_9_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_9_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_9_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_9_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_9_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_9_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_9_usascii_LINE_SPACING
#endif

