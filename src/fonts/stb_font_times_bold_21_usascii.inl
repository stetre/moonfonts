// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_21_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_21_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_21_usascii_BITMAP_WIDTH         256
#define STB_FONT_times_bold_21_usascii_BITMAP_HEIGHT         62
#define STB_FONT_times_bold_21_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_times_bold_21_usascii_FIRST_CHAR            32
#define STB_FONT_times_bold_21_usascii_NUM_CHARS             95

#define STB_FONT_times_bold_21_usascii_LINE_SPACING          14

static unsigned int stb__times_bold_21_usascii_pixels[]={
    0xb9800db8,0x4ea01bbc,0x36600bc8,0x100a8e02,0x66643997,0x79bb7301,
    0x81791001,0x9932ccca,0x3332e201,0x66dc400a,0x6664c58b,0x6e40bec8,
    0x20ae3b80,0x40ec02bb,0x1cca801c,0x0039b500,0x51bcdb98,0xbccccb88,
    0x666e64c0,0x7fc06e44,0x8159b104,0x6c4b80c9,0x301fa80e,0x3a03d81d,
    0x5c03fe2f,0x07fd10df,0x376f2f22,0x0591ffa1,0x7f4c37ee,0x7f43f602,
    0xeaeffd87,0x213fe65f,0x2bd0ba2d,0x3209905f,0x7c57e604,0x7f467406,
    0x9bff9801,0xf904feb8,0x2e9f70bf,0x13fe62df,0x07a207b2,0xa89702e0,
    0xf106f83f,0x3605f105,0x7ec1fe2f,0x41ffc40e,0xa8b6396d,0x7e4162ff,
    0x41ffc40e,0x21ff24fc,0x3ff30ffc,0x87e13fe6,0x7f57e60f,0x698074c0,
    0x2fd8ff20,0x13ee3f50,0x3a05ff30,0xd09ff504,0xd03fea7f,0x0f44003f,
    0x225c4880,0x83fc44fb,0x203f206e,0x2a1fe2fd,0x3ff903ff,0x98e47fc4,
    0x838aff42,0xffb03ffa,0x3f23ff83,0x3e27fc87,0x985ff13f,0x29f91e67,
    0x201743fd,0x64bff01f,0x2a7fb03f,0x17fe600f,0x9ff50498,0xff32ff88,
    0x0b32e003,0xc9dd885d,0xfd8970a4,0x7cc0fe83,0x3613e604,0x3fa1fe2f,
    0x89ff501f,0x7021deff,0xfd0173ff,0x93ff203f,0x1fee3ff8,0x49ff1ff2,
    0xdfdd71fe,0x3ea1dfdd,0x02e41fd5,0x4ffe81e4,0x3bf601fd,0x7fe402d9,
    0xffa80c03,0xff53fe84,0x264ff800,0x6fea7cc5,0x7ec4b866,0x7ec1fd81,
    0xb03fe603,0x7fc3fc5f,0x8dff500f,0x2204fffc,0xfff04cff,0x89bfee01,
    0x21fee3ff,0x927fc7fc,0x556ed4cf,0x6fafc2de,0x1a6003e6,0x0777ffcc,
    0x644bff70,0x07ffa2cc,0x427fd400,0x01ed9ed8,0x47727fc0,0x49fd0fe8,
    0x3f712e28,0x07ff0fb0,0x3f60ffc4,0xfff31fe2,0x21ffe601,0x900efffc,
    0xfff305ff,0xd1ffea01,0x643fdcbf,0xb8bfe27f,0x20ba2e85,0x21742bb8,
    0x7cc03e00,0xfb500eff,0x11fd43ff,0x20001fff,0x57704ffa,0x20332203,
    0xfc8764ff,0x0cc3ff14,0x4c1b9097,0x017fc41f,0x45fb0bfe,0x07ffc47f,
    0xf507ff98,0xff301fff,0x403ffe20,0x7fe47ffa,0xff90ffb0,0x4983bea7,
    0x8003e1f8,0x0b6b6a5c,0x7f6dc0f6,0x557620ef,0x88b50eff,0x50001fff,
    0x01d909ff,0xff84ffb8,0x2a5ff1e4,0x412e1c7f,0xf301b56a,0x43ff803f,
    0x3e1fe2fd,0xdff501ff,0x81fff640,0x07ffe04d,0x7ec2ffdc,0xfc87fcdf,
    0x441efebf,0x3bbbfae3,0x7cc00eef,0x543edbe0,0xfe89fd85,0xfc8ff23f,
    0xffd01b5f,0x3fea0005,0xeffffe84,0x21bfe60c,0xff99a4ff,0x5c38bfd0,
    0x3e60dd84,0x2017fc41,0xf17ec2ff,0x205ff90f,0x39042ffb,0x802e0bfb,
    0xff902ffc,0x3fdc2205,0x0008bfe4,0x5db55d93,0x7d45d005,0x0f885fb5,
    0x7fc43fe2,0xfe897fe5,0x7ff902ef,0x7d4b6600,0xffff983f,0xf84a85ff,
    0x77fa9a4f,0x2e05c5fd,0x3ec0fdc4,0xff101ffc,0x1fe2fd83,0x7f417fe2,
    0x3ea72486,0x10121713,0x1bfa0bff,0x7e43fdc0,0x320cb807,0x2dc01324,
    0x41fed7ee,0xd83fe22d,0x45fff12f,0x8864fff9,0x23100ffe,0x05ff76fd,
    0xfd5335b9,0x49ff0390,0xd3dff51d,0x970c6a3f,0x1fd81fd8,0xff301fec,
    0x1fe2fd81,0x3ee17fcc,0x7391f80e,0x06b3ea1f,0xf90bfa60,0x3ff2001d,
    0x2603fe40,0x2e8ba3ff,0x7c40f980,0x8b701fb6,0xf91fa1fd,0xffd537ff,
    0xfe885bdf,0xfa86cc0d,0xf881ff73,0x80dc5c83,0xed8ea4ff,0x1c37bd51,
    0xf82fc897,0x5027cc0f,0x7c5fb09f,0x2fbf2207,0xbfb00cfe,0x7f4439bb,
    0x3bf62003,0x2a004edb,0x3fa64ffe,0x8bfe00bf,0xd001f11f,0x13e3ee05,
    0x2fb223c4,0x7f6441cc,0xffe98bff,0x9bfd9103,0xdf7b709d,0x333baa03,
    0x27fc003c,0x41700072,0x2227dc4b,0x640fb07f,0x3e2fd80f,0x05ffd007,
    0x00007260,0x00004c40,0x06040000,0x88073003,0x0300c00a,0x004c0260,
    0x01100130,0xfd280000,0x7000d887,0x1fd44b83,0x82e883fc,0x45fb02f8,
    0xfff1007f,0x00002001,0x00000000,0x00000000,0x00000000,0x00000000,
    0x1f500000,0x059103fd,0x225c0e4c,0x01fb80ed,0x202d83d1,0x003fe2fe,
    0x05effecc,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x05dbb100,0xcbbbbba8,0x5e452e02,0x280b2600,0x5554402a,0x0002aaa0,
    0x00000355,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xcca80000,0x0cccb83c,0x665401b0,
    0x302f2a04,0x2a200999,0x999100bd,0x1a980599,0x33333326,0x37b2e204,
    0x2e60a8ad,0x32e2cccc,0xbdda80bc,0x1bcb8828,0x5c1cda88,0x260bcccc,
    0x99971ccc,0x99997139,0xb1166445,0x664c1407,0xcccccccc,0x39999934,
    0x4c2f32e2,0xaacccccc,0x7d437200,0x206b84ff,0x07fc8069,0xf903eed9,
    0x3fffa00f,0xffffb80f,0xb07d902f,0x0bffffff,0x6d42fbea,0x7ffc40ff,
    0x4e886b81,0x4f88ff71,0xe8bc43fb,0x82ffec5f,0x27ff42f8,0x1a613ff6,
    0x21e20ff9,0xeffa9cfa,0x3fea7d99,0x441fc43f,0xffc99fff,0x3a4ff984,
    0x02442fff,0x0ff70099,0x91be69f5,0x913700ff,0xdddd09ff,0x407f20bd,
    0x2feeefff,0xf902ffb8,0x301fff01,0x7a81f709,0x0ffa97f4,0x83ff23f9,
    0x0b107ff8,0xff98dff5,0x274c2a86,0x12543f44,0x7ec68dff,0xff025c6f,
    0xe82ffc8f,0x3fff321f,0x01e81220,0x3fd87fb8,0x3fe43ff1,0x113fa040,
    0x40ff2009,0x4c3d41d8,0x03a205ff,0x12203ffe,0xf8960ffa,0x325ff31f,
    0xd83ff52f,0xd01b82ff,0x1ffe83ff,0xfff3002c,0xf8866199,0x3fe2146f,
    0xfe80b14f,0x082ffcc7,0x10effea4,0x64c1e609,0xff87fcce,0xffc8bfe3,
    0x7400ceb8,0x0e6f5c0e,0x0100ffa8,0x0bff6176,0x03ffe030,0x33ffa122,
    0x12ffa820,0xff9049ff,0x0b0dff30,0x3f627fdc,0x9931224f,0x19ffc889,
    0x201bfe20,0x00d9fffa,0x3fe63ff4,0x3fe29004,0x12e0915f,0x3ff23fe2,
    0xff1ffc47,0x6ceffe49,0x20fee05f,0x40dffffe,0x00cfdffc,0x7ffc17c4,
    0x1fff0001,0xfff70910,0x47ff107f,0x01df05ff,0x01a87ffa,0xfd89ffe2,
    0x3f606e7f,0x8807fb87,0xff9006ff,0x8ffd003f,0x49001ffc,0x048bfff9,
    0x649fb05d,0xf1ffcc7f,0xf53fe4bf,0xfffe885f,0x3ffffa24,0x233fa0ef,
    0x3ea00ffc,0x007ffc40,0x880fff80,0xdffff904,0x3fe5fd83,0x2e00ea83,
    0x360165ff,0xffb372ff,0x43fe4165,0xff8807fb,0x9ffd1006,0xb75ffd00,
    0x837205df,0x257ffd44,0x23ff83c4,0x1ffcc7fb,0x13fe49ff,0xff9109ff,
    0xffd7301f,0x7c4ffe27,0x2217602f,0x4cc41fff,0x7ffc0999,0x3a604880,
    0x3a60ffff,0x481ffdef,0x551fff00,0x56dff500,0x9039dffa,0x00ff70ff,
    0x5c00dff1,0x7f401fff,0x302ffe9f,0x7e4249ff,0x985b84ff,0x11fee3ff,
    0x91ffc7ff,0x204ff8ff,0x7ec02ffb,0x7f47ff35,0x3a05f105,0xfffa82ff,
    0x407ffc0b,0x7fd40839,0x7fba983f,0x3ff20070,0x3ffa005b,0x037ffe2b,
    0x3fdc3fe4,0x8037fc40,0x406ffcc9,0x1fff37fe,0x8245ff10,0x82d84ffd,
    0x1fee4ff8,0x17fc4ffe,0x1ffc4ff9,0x8803ff10,0xfe93fe3f,0x3201f505,
    0x1fff03ff,0x5501ffb0,0x0bfd10d0,0x20001ff4,0x2003fff8,0x7fe47ffb,
    0x2e1ff205,0x7fc400ff,0x3fa58806,0xc9ffa04f,0x0b0206ff,0x1f113fa2,
    0x7fb93fa0,0x1ff14fc8,0x3ff13fe4,0x02236c04,0x3a5fd87e,0x440bb03f,
    0x1fff06fe,0x3903ff90,0x05f505f0,0x0e540fea,0x000ffd80,0xff113fe2,
    0x543fe405,0x3e2039ff,0x306c406f,0x3fa03fff,0x401fff47,0x513e6078,
    0x547fdc0b,0xafc40fff,0x87fe44fa,0x433ee4fa,0x8ffe21f8,0xf87fc43a,
    0x9805f00e,0x0fff84fe,0x24c5ff98,0x83640ef8,0x17fe04fa,0x40027cc0,
    0x407e80fd,0xefd80ffc,0x81bfe601,0xfffc83e8,0x260fff80,0x36a01fff,
    0xd89501df,0x66ffec03,0xebe984ef,0xebdcdc84,0x6efff4c4,0x2ceffd81,
    0x01d9bd30,0x764003ea,0x02dfcace,0x1377ffa6,0xbcbdece8,0x200ddd40,
    0x03a003fd,0x25416a00,0x009ffd30,0x2ffff6a0,0x316ff541,0x263dfffb,
    0x2e2cfffc,0x80002fff,0x10880040,0x10402200,0x30018803,0x10022001,
    0x13310001,0x80098800,0x00040620,0x00020004,0x00002008,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xcc880000,0x665cc00c,0x4401abcc,0x99910cda,
    0xcccb9801,0x2f332a02,0x59999731,0x66665cc0,0x43332e61,0xcc984cc9,
    0x1ccccccc,0x4b3332e6,0x50bccccb,0x44179999,0x99731ccc,0x49999999,
    0xccccccc9,0x333263cc,0x73009bcc,0x32659999,0x09accccc,0x4c001300,
    0x107b000c,0xfb8019b7,0x5fff000f,0x3ea0bff7,0x3ff24fbb,0x0ffff000,
    0x7c437ff4,0xfff001ff,0xfb09f505,0x3339f70f,0x3fe0dffb,0x437fdc2f,
    0xf880fffb,0x99afff81,0xafff87ea,0x7c46fb99,0x0efda9ff,0xf885fff0,
    0x2ffda9ff,0xd9804d80,0x4fb800ff,0x0fffffc4,0x2001ff50,0x5ff70ffd,
    0x41715fb0,0xbb000ffb,0xff9505ff,0x003ffa0d,0x3a20fff4,0x570ff902,
    0xd01fff88,0x4ffa83ff,0x7507ffd0,0x1a07ffa0,0x0d103ffa,0x1efc8fff,
    0xfe80ffe8,0x3007ffc7,0xfeaa80ff,0x27fcc00f,0x17ffaf32,0xb000ffa8,
    0x1bfe21ff,0x3ee07ff1,0xff5b000f,0x0bff3b0d,0x74003ffa,0x807661ff,
    0xfd8387fc,0x03ffa04f,0x3ea09ff5,0x3fa0587f,0x7f42421f,0x3e12110f,
    0x07ffc47f,0x3fa03ffa,0x900ffec7,0xff7007ff,0x27fec401,0x037fc431,
    0x19d73ff5,0x7cc3ff60,0x37ff265f,0x950ffb82,0x3ffab059,0x17fe6e61,
    0xe8007ff4,0x801b51ff,0x7d4087fc,0x3ffa00ff,0xb027fd40,0xd015c7ff,
    0xfd0243ff,0x7c042e1f,0x42ffe87f,0x7fe80ffe,0xe8807ffc,0xffb806ff,
    0x13fe3600,0x7d409fb0,0xb05febdf,0x8bfee1ff,0xb80bff98,0xac0be0ff,
    0x26324ffb,0x1ffd05ff,0x2e7ffa00,0x07fc800f,0x201fffc4,0x7fd40ffe,
    0x23ffe604,0x8fff4058,0x23ffa04b,0x1ffe00e9,0xffd13ff6,0x322ffd01,
    0x3a6e02ef,0x7fdc02ff,0x13fe5700,0x7d405fd0,0x360ff91f,0x82efdbff,
    0xff703ff8,0xf1580721,0x3e6911ff,0x01ffd05f,0x3ffbffa0,0x407fc806,
    0xfe806ffc,0xffeeeeef,0x667fec04,0x76fff400,0x3bffa04f,0x1ffe00ff,
    0xffd1bfee,0xffdffd01,0xff55803d,0x80ffb80b,0x8813fe49,0x87fd405f,
    0x5ffb07fb,0x1ffc4033,0x04c8ffb8,0x377ff92c,0x7f417fe6,0x5ffd000f,
    0xfc80bffd,0x07ffe607,0xf503ffa0,0xfff8809f,0xa9ffe803,0x23ffa04e,
    0x1ffe00fa,0xffd17fee,0x7d4ffd01,0x7fc5506f,0x03fee01f,0x027fc1b1,
    0xffa801f7,0x3f60ff70,0x3ff8800f,0x3ffbff70,0xbdff32c0,0xfe82ffcc,
    0xffe8100f,0x203fff99,0x3ffa07fc,0x7ff40884,0x4027fd40,0xfe802ffd,
    0x7f40931f,0x7fc0170f,0x744ffc87,0x47fe80ff,0x99d83ffc,0x2e04ffc9,
    0x7775c0ff,0xf984effe,0x70ffa801,0x03ff60ff,0x5c0ffe20,0x206feaff,
    0xf317fec5,0x03ffa0bf,0x547ffa24,0xff901fff,0x5c1bfee0,0x2a07ff41,
    0xffc804ff,0x21ffe802,0x4c3ffa03,0xb0fff120,0x0ffe83ff,0x7fd47fe8,
    0x55556546,0xff700fff,0xfffffb81,0x0c1e85ff,0xff70ffa8,0x2003ff60,
    0xff703ff8,0x1609ff31,0x5ff98ff5,0xb301ffd0,0x3f21ffe8,0x87fc80ff,
    0x1f02fff8,0x7d40ffe8,0x2ffc804f,0x001ffe80,0x89701ffd,0x2ffcc7ff,
    0x7f407ff4,0x161ffdc7,0xfb81ffe4,0x4cccc40f,0x56ec0cff,0xff702daa,
    0x3a03ff23,0xff8800ff,0x323ff703,0x4e8681ff,0xff837fcc,0x3a27441f,
    0x77ff41ff,0x3607fe40,0x87e985ff,0x7fdc1ffe,0x02ffd805,0xd001ffe8,
    0x1fd443ff,0x7f543ffe,0x81ffe80d,0xffd10fff,0xff982d41,0x01ffc80f,
    0x7fdc4ff8,0xe880ffff,0x4ffe8dff,0x0b7ffee6,0x42effc88,0xff74ffe8,
    0x877f265f,0x3fff6a0b,0xdfff931b,0x269ffddd,0xd31dfffb,0x3a67dfff,
    0x3ffea4ff,0x6ffeeeee,0x4b7ffee6,0x80bfffea,0x0aefffb9,0x2dfffb98,
    0x3bffee60,0x932fffec,0x39dddfff,0x5bfff730,0x37bffee6,0x3fee0bef,
    0x3fff260b,0xbfff731e,0x264ff805,0x07ffffff,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x2a000144,0x65400552,0x219932cc,0x99934cc8,0x205bb910,0x6dc40bca,
    0x66e440cc,0x07bb9302,0x99339995,0x64472e39,0x71deb8cc,0xccb885bb,
    0x33224d98,0x220deb8c,0x24cccccc,0xcb8bccc9,0x93205b02,0x00d881d9,
    0x316c43b7,0x55555555,0x507fe635,0x880ba83b,0x2001e200,0xdf51efb8,
    0x8ffd0017,0xd87fe42c,0xfea7447f,0x23e53a22,0x7cc1f15d,0x0fb89f36,
    0x4dff09fb,0xf71267fd,0x79ffb5bf,0xffa81ff9,0x7fdc7fea,0x9625febe,
    0x7fdc4ffa,0x13e205b4,0x2ff47fe6,0x7fcc27e4,0xeeb9ff25,0x2eeeeeee,
    0x4bff13e6,0x322dffee,0x9801e200,0xfd502dfd,0x17fd403b,0x321ff70b,
    0xfb97e47f,0x97d4bf64,0x64352ff8,0xfe87fe3f,0xff70ff93,0x05cbff23,
    0x7fd4bfea,0xfa83ff32,0xffa8555f,0x88c4ff91,0x3ffb06ff,0x26769707,
    0x361ff30d,0x0fdfc44f,0x6fb9ffa2,0x6c698000,0x7ed4533f,0x03c404ff,
    0x0033fae2,0x405f7e4c,0xf70535ff,0xfd1ff21f,0xaff88543,0x3ffe5fb9,
    0x3fe3fe84,0x3f6276a3,0xd94ff887,0x3fea12bf,0x3e63ff31,0x01ffd42f,
    0x1fee1ff5,0xf9817fe4,0x79dfb06f,0xf73fc3ff,0x20bb4d85,0xa993e658,
    0xaaaaaaaa,0x40608080,0x078800a8,0x8000ffee,0x7dc2ffb8,0x1ff7048f,
    0x2ff89ff2,0x5559ff30,0x32fffdc5,0x42ffc5ff,0xfb07fdeb,0x55ff935f,
    0x3e63ff50,0xa85ff31f,0x3fea01ff,0xff30ff70,0x00ffd80b,0x97607b11,
    0x443e60f9,0x17c2b81f,0xddddddd7,0x000005dd,0x3fbbbae0,0xf912eeee,
    0xc880017d,0x7fc40bff,0x21ff703d,0x13fe27fc,0x2a027fc4,0x5ff12fff,
    0x1dd127fc,0x3fea0ff9,0x501dff16,0x47fe63ff,0x7fd42ff9,0x5c3fea01,
    0x00ffd87f,0xfa82ffd4,0x343b85d9,0x2a8d90fa,0x220000d8,0x2221aaaa,
    0x08888888,0x3eeaaa60,0x5c41aaaa,0x6cc01cfe,0x7fe402df,0x321ff500,
    0x107fec7f,0x944637f4,0x8ff64fe8,0x64ff61ff,0xe8ffe07f,0x23ff505f,
    0x5ff31ff9,0x2a01ffa8,0xa8ff70ff,0x6640e4ff,0xf76d81ff,0xb30c0883,
    0x03003b10,0xffffb800,0xffffff16,0x44009fff,0x77e4c007,0x033fae22,
    0xf302fcc0,0xa8fff33f,0x2e3aaeff,0x3e1b9dff,0xa7d45f50,0x677fc6f8,
    0x3f901ffe,0xffa817dc,0x3e65ff51,0x00ffd42f,0x3ff23ff7,0x34cdff10,
    0x437fc46c,0x00000608,0x54000000,0x2223cccc,0x00888888,0x88003c40,
    0x005d93eb,0xffb007a0,0xfb87ff99,0xfffc84ff,0x427677c3,0x640edbfb,
    0x03ff9aef,0xb10788d3,0xbffb1bff,0x221bffb1,0xe880cffd,0x4ffe8cff,
    0xbfdbdff9,0x7fcd7ecc,0x000000cf,0x00000000,0x88000000,0x01080007,
    0x11000800,0x80c00c00,0x00980110,0x00404000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x0001a200,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__times_bold_21_usascii_x[95]={ 0,1,1,0,0,1,0,1,0,0,1,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0, };
static signed short stb__times_bold_21_usascii_y[95]={ 16,3,3,3,3,3,3,3,3,3,3,4,13,10,
13,3,3,3,3,3,3,3,3,3,3,3,7,7,5,7,5,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,18,3,7,3,7,3,7,3,7,3,3,
3,3,3,7,7,7,7,7,7,7,4,7,7,7,7,7,7,3,3,3,9, };
static unsigned short stb__times_bold_21_usascii_w[95]={ 0,4,8,10,9,17,15,4,7,6,8,11,5,6,
4,6,9,8,9,9,9,9,9,10,9,9,4,4,11,11,11,8,18,14,12,13,13,12,12,15,15,7,10,15,
12,18,14,15,12,15,14,10,12,14,14,19,14,14,13,5,6,5,9,11,5,10,10,8,11,8,8,10,11,6,
6,11,6,16,10,9,10,11,9,7,7,10,10,14,10,10,9,6,2,6,11, };
static unsigned short stb__times_bold_21_usascii_h[95]={ 0,14,7,14,15,14,14,7,17,17,8,11,7,3,
4,14,14,13,13,14,13,14,14,14,14,14,10,13,10,5,10,14,18,13,13,14,13,13,13,14,13,13,14,13,
13,13,14,14,13,17,13,14,13,14,14,14,13,13,13,17,14,17,7,3,4,10,14,10,14,10,13,14,13,13,
18,13,13,9,9,10,14,14,9,10,13,10,10,10,9,14,9,17,18,17,4, };
static unsigned short stb__times_bold_21_usascii_s[95]={ 255,147,189,152,87,163,198,214,44,52,180,
1,208,231,237,16,35,223,242,56,232,66,76,86,188,139,251,250,13,219,25,
149,8,208,195,214,173,160,147,97,116,187,228,79,66,47,1,108,13,71,236,
128,208,113,158,173,221,132,102,65,181,59,198,238,231,95,45,59,23,68,26,
239,1,193,1,35,95,121,148,85,136,124,138,77,200,48,37,106,169,97,159,
37,27,30,242, };
static unsigned short stb__times_bold_21_usascii_t[95]={ 1,1,49,1,1,1,1,49,1,1,49,
49,49,54,49,20,20,35,35,20,35,20,20,20,1,20,20,1,49,49,49,
20,1,35,35,1,35,35,35,20,35,35,1,35,35,35,20,1,35,1,20,
20,20,20,20,20,20,35,35,1,1,1,49,54,49,49,20,49,20,49,35,
1,35,20,1,35,35,49,49,49,1,1,49,49,20,49,49,49,49,1,49,
1,1,1,49, };
static unsigned short stb__times_bold_21_usascii_a[95]={ 76,101,168,152,152,303,253,84,
101,101,152,173,76,101,76,84,152,152,152,152,152,152,152,152,
152,152,101,101,173,173,173,152,282,219,202,219,219,202,185,236,
236,118,152,236,202,286,219,236,185,236,219,169,202,219,219,303,
219,219,202,101,84,101,176,152,101,152,169,135,169,135,101,152,
169,84,101,169,84,253,169,152,169,169,135,118,101,169,152,219,
152,152,135,120,67,120,158, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_21_usascii_BITMAP_HEIGHT or STB_FONT_times_bold_21_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_21_usascii(stb_fontchar font[STB_FONT_times_bold_21_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_21_usascii_BITMAP_HEIGHT][STB_FONT_times_bold_21_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_21_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_21_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_21_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_21_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_21_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_21_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_21_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_21_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_21_usascii_s[i] + stb__times_bold_21_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_21_usascii_t[i] + stb__times_bold_21_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_21_usascii_x[i];
            font[i].y0 = stb__times_bold_21_usascii_y[i];
            font[i].x1 = stb__times_bold_21_usascii_x[i] + stb__times_bold_21_usascii_w[i];
            font[i].y1 = stb__times_bold_21_usascii_y[i] + stb__times_bold_21_usascii_h[i];
            font[i].advance_int = (stb__times_bold_21_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_21_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_21_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_21_usascii_s[i] + stb__times_bold_21_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_21_usascii_t[i] + stb__times_bold_21_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_21_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_21_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_21_usascii_x[i] + stb__times_bold_21_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_21_usascii_y[i] + stb__times_bold_21_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_bold_21_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_21_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_21_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_21_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_21_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_21_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_21_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_21_usascii_LINE_SPACING
#endif

