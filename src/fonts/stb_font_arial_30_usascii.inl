// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_30_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_30_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_30_usascii_BITMAP_WIDTH         256
#define STB_FONT_arial_30_usascii_BITMAP_HEIGHT        110
#define STB_FONT_arial_30_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_30_usascii_FIRST_CHAR            32
#define STB_FONT_arial_30_usascii_NUM_CHARS             95

#define STB_FONT_arial_30_usascii_LINE_SPACING          19

static unsigned int stb__arial_30_usascii_pixels[]={
    0x2b260391,0x880b2a00,0x40ee01ca,0x26666219,0x2ea62000,0x4c001abc,
    0x79801999,0x06ea2000,0x06ea6000,0x540ca800,0x0008801c,0x2ea00110,
    0x004c800a,0x00055d44,0x06601c98,0x7fd41b60,0x207f702f,0xf302fffa,
    0x2e1ff305,0x9805ffff,0xfffffffc,0x7c400bef,0x32a07fff,0x93002dfe,
    0x7bfffffd,0x3ff22001,0x00bdffff,0x3fb03fa0,0x3bffb220,0x5be67f8a,
    0x80bdffeb,0x01ffffe8,0xfc8013ea,0x8001ffff,0x7fe440fd,0x7f301dff,
    0x20ffd930,0xeff883fb,0x260dd01c,0xffdd50ff,0x7ffec40b,0xffecaacd,
    0x3fe202ff,0xfffb06ee,0x5c05ffff,0xffdeffff,0x74c01eff,0xffecefff,
    0x0ff002ff,0x3ffa20ff,0x27fbffde,0xfdefcff9,0x9dfc85ff,0x1fd00ffb,
    0x2f3ff200,0x6f8006fe,0x7ef7ffc4,0x40fb01ff,0x3fb81ff8,0x7d407fa8,
    0x32099101,0x7dfd105f,0x7fed4401,0x401ff104,0xeafbdffc,0xeffb81ff,
    0x1fffb982,0x105fff50,0x9805fff7,0xd837c45f,0x3ff622ef,0x713ffe67,
    0x6c7e87ff,0x003fa83f,0x7fc45ff1,0xd13e6002,0x7fe443df,0x3603f980,
    0xb83fb82f,0x0037406f,0xff30bf90,0xffc8001b,0x300ff883,0xff9e65ff,
    0x006ffcc5,0x7f41bfea,0x7ffcc00e,0xf50fea00,0x101ff509,0x37fccfff,
    0xdf10ffa8,0x0fe84fb8,0xd81ff500,0x8bf2005f,0xff883ff9,0x3601fd02,
    0xb83fb82f,0x00fee05f,0xfe85fc80,0xff700204,0x700ff883,0xff73ccff,
    0x9000ffd8,0x1ffb87ff,0x409ff500,0x41fdc2fc,0x9fee05fc,0x3fa02ff9,
    0x5fa8bf52,0xf3001fd4,0x003fe83f,0x40fd51fa,0x09f905fd,0x0fee0ff6,
    0x7fc413ee,0x203fe600,0x42fdc5fc,0xd53effc9,0x3e227dcb,0x4cdf900f,
    0x01ffc047,0xff897fa0,0xb37ec004,0xffffffff,0x6c9fffff,0x99fea03f,
    0x53f600ff,0x227dc6f9,0xeff8007e,0x2001ff70,0xfe8005f8,0x360ff303,
    0xc83fb83f,0x80df704f,0x5fc80ff9,0xff503fe2,0xbf97ffdf,0x3fe237c4,
    0x261ff500,0x007fcc07,0xff99bf20,0xb3fdc002,0xffffffff,0x7c9fffff,
    0x99fe602f,0x8afe407f,0xf71fec7f,0xbff30007,0x54005ffb,0x7fd4003f,
    0x3207fe01,0xc83fb83f,0x809f904f,0x5fc80ff9,0x7ff313ea,0x21fffecc,
    0x03fe20fe,0x3cc67fc4,0x2001fea0,0x3ff50ffb,0x81ffa800,0x837c45f9,
    0x9fe202ff,0x2fe407f9,0x1ff719fb,0xf90003fc,0xc8003dff,0xfdb9801f,
    0x417f403f,0x83fb84fb,0x07fb03fd,0xfc80ff98,0xff883f25,0x41fff883,
    0x03fe22fc,0x07dfffc8,0x4c0037e4,0x01ff72ff,0xb83ff880,0xe827d43f,
    0x99fe603f,0x11fec07f,0x5c5ffffd,0xfd10003f,0xff0007ff,0x0ffffe00,
    0x3e60ff60,0x221fdc0f,0x05ff00ff,0xfc80ff98,0x0df91ba5,0x3ea07ff4,
    0x7003fe24,0x039fffff,0xf1000dfb,0x001ff27f,0x17e427fc,0x2fec0bf2,
    0x7fccff70,0x2a0bfa01,0x11be20bc,0x7fd40155,0x2001fffe,0xde8804f9,
    0x7e404fff,0x5c3bfb05,0x417f663f,0x7cc01ff8,0x3e5fc80f,0xf901ff44,
    0x7c47f70d,0xfeb8800f,0x3f20cfff,0x2ff98007,0xf1000ff7,0xd81fd05f,
    0x03ff501f,0x5ff99ffa,0x4001ff50,0x3ffea3fb,0x35ffc83f,0x13b21dff,
    0x220017dc,0x3ee06ffb,0x5c7ff206,0x409ff33f,0x7cc00ff9,0xf35fc80f,
    0xb007fc47,0x443fb09f,0x3e6000ff,0x3ea4fffb,0x0ffa8007,0x98001ff3,
    0xff3311ff,0x33ff3333,0x20efd813,0x3e67ffd9,0x3fe60cff,0x89be2003,
    0x22feabff,0x7fdc4ff8,0x3f609ff5,0x1ff70000,0xfb81bee0,0x3e67f71f,
    0x03fe603f,0xf901ff30,0x7fa8beeb,0x7fc1ff40,0x8003fe20,0x23ff9179,
    0x64001ff8,0x0017fc7f,0xfffd9fea,0xffffffff,0x7ff444ff,0x27feffdd,
    0xedffeff9,0x7e4004ff,0x6f98fea2,0x3f203fea,0xf880ffdf,0x3fe20006,
    0x3609f903,0xa8fee2df,0x3ff104fe,0xc80ff980,0x7dc7f55f,0x507fe607,
    0x00ff88df,0x3ff89e60,0x440817fe,0x037f46ff,0xeec97fa0,0xefeeeeef,
    0xff903eee,0x4cff57ff,0xefffc8ff,0x237c4003,0xd9fe21fd,0x3fffa05f,
    0x2207f505,0x827f4019,0x0ff883fe,0x3fe21fdc,0x9805fd01,0x35fc80ff,
    0x80ffcc9f,0x0ffcc7fd,0x65403fe2,0x49fd1e62,0xcf981ffc,0xfb83ff90,
    0x7ff7002f,0x2fc83f90,0xff50cc00,0x01307fcc,0xff0bf200,0xffb0fe81,
    0x0fffe201,0x6fd80fe4,0x7c0ffe60,0xb85fb81f,0xb03fd83f,0x0ff9809f,
    0xf17e5fc8,0x4dff707f,0xff883ff8,0x3ccbfb00,0xeff88ffe,0x7e7ffd41,
    0x05ffd04f,0xfd06ffa8,0x0001fd81,0x1ff33fd4,0x0df10000,0x70ff83fd,
    0x3fea07ff,0x207e81ff,0xff902ffb,0x901ff103,0x907f709f,0x017ee09f,
    0xbf901ff3,0x7ff907ec,0x27bfff22,0xff105ffb,0x4c3fee01,0xf50bfea7,
    0x7ec439ff,0x3fe606ff,0x7fe4c1cf,0xf86f881f,0x7fa80007,0x00003fe6,
    0x8ff60bf2,0x0fff47f9,0xffffff71,0xd102fc43,0x7fdc43df,0x360df304,
    0xc83fb83f,0x80df304f,0x5fc80ff9,0xfffb0ff2,0xffff97ff,0x07fc409f,
    0x799eff88,0x3a60dfd5,0xfffeffff,0xd100cfff,0xfffdffff,0x17e601df,
    0x50000bf1,0x007fccff,0x541be200,0x43fd89ef,0xffeffff9,0x21fff55f,
    0x7fcc03fb,0x0efffdef,0x3f60bf70,0xfb83fb83,0x401ff104,0x5fc80ff9,
    0xeb883fe6,0x9dfb11df,0x3fe21983,0x3bffea00,0x401fffef,0xbdfffeca,
    0x203fffa9,0xceffffea,0x2a1fdc02,0xfa80004f,0x0003fe67,0x7e405f90,
    0xfb105fff,0xfa87dfff,0x22003f63,0x03fffffd,0x3fd80ffc,0x5fb83fb8,
    0xf9813f20,0x5c5fc80f,0xe880006f,0x003fe24f,0xbfffffd5,0x20188001,
    0x133004fb,0x26054c00,0xa880000a,0x0000aa22,0x99500bd1,0x30066005,
    0x998002a8,0x205fa800,0x83fb83fe,0x3fe205fb,0x320ff300,0x01efd85f,
    0x88dff300,0xf71000ff,0x40000015,0x00000008,0x00000000,0x00000000,
    0x00000000,0x200fe800,0x83fb81ff,0x1fdc06fa,0xbf907fa8,0x139ffd10,
    0x1dff7100,0x2000ff88,0x00000079,0x00000000,0x00000000,0x00000000,
    0x00000000,0xd7109f50,0x20fee0ff,0xd00bdff8,0x25ffbb8d,0x205fecc9,
    0xbdefffea,0xfffecaaa,0x99bff103,0x0000d300,0x00000000,0x00000000,
    0x00000000,0x00000000,0x203fa000,0xf703fffa,0x0bffee07,0xffff17d4,
    0x2ffffdc3,0x7ffffdc0,0x0cffffff,0x1ffffe20,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x99302c88,0x30165403,0x89dc0397,
    0x554c0bcb,0x54c001aa,0x0009abcb,0x00555551,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x26200022,
    0x0000cc00,0x22004cc0,0x00330000,0x22000030,0x2aea2019,0x8004c401,
    0x00132198,0x00137710,0x00d5d440,0x802880cc,0x0660aba8,0x26666200,
    0x99999999,0x32206609,0x401cefff,0x82fffffc,0x00000ff9,0x2e20bfe6,
    0x1ff3effe,0x9ffffd30,0x7ffed401,0x3ea0001e,0xfffffa87,0x4fe80dff,
    0x363ff500,0x36e2001f,0x2fffffff,0xfffd9300,0x3e607fff,0x2027dc0f,
    0xf31ffffc,0xffa8001f,0xffffffff,0x8ff32fff,0xffdfffe8,0xbfffd01f,
    0xff989fff,0x3e600000,0x7fff442f,0x40ffcffe,0xfffdfffb,0xdeffb80f,
    0x50002fff,0xefffb8ff,0x41effeed,0xff5004fe,0x4c00fea3,0xeddefffe,
    0x2e00dfff,0xffdeffff,0x0ff985ff,0xff5027ec,0x3fe61bbf,0x7ffd4000,
    0xffffffff,0xd8ff32ff,0xff910cff,0x222ffc81,0x3fe62ffc,0x3e600000,
    0x51ffec2f,0x7cc1fffd,0x17fea0cf,0xffc85ff3,0x27fa8000,0xe980cffa,
    0x013fa0ff,0x5f88ffd4,0x0bfff980,0x705ffd88,0xc9817dff,0x415445ff,
    0x1fee04fd,0x00007fcc,0x30ffe880,0x81ffd4ff,0x82ff46fd,0x03fe65ff,
    0x2ff98000,0x7f403fee,0x5c1bf60f,0x413fa0ff,0xfa8004fe,0xf501bf27,
    0x8027f45f,0x01fa1ffa,0x2e007ffa,0x7ffc40ff,0x00fff400,0x3f204fd8,
    0x001ff305,0x87ffa000,0x03ff27f9,0xff887fd4,0x7ccdf902,0x8000220f,
    0x13f22ff9,0xff10ffb8,0x4c332201,0x0ff701ff,0xf3fd4110,0x4bfd007f,
    0xff5004fe,0xf700fe43,0x27fc005f,0x2600bff2,0x7fdc05ff,0x4fc87fff,
    0x0441ff30,0x1ffec000,0x06fd9fe6,0x4fe8ffe2,0x7fccbfb0,0x04efffb8,
    0x3a2ff980,0x43fe603f,0x7dc006fb,0x207fe206,0xaaeffec8,0x2017fa7f,
    0x013fa099,0x9f50ffd4,0x20037ec0,0x027f41ba,0x7fcc1570,0xffffff70,
    0x7fffffec,0x3aa3fe62,0x8000dfff,0x7f984ffb,0x9ff013fa,0x3e607fe4,
    0x3f7fe62f,0x00efffef,0xff8bfe60,0x643fe202,0x402aa24f,0x17fc05fd,
    0x3fbfffa2,0x3ff27fdf,0x27f4000b,0x7c1ffa80,0x0013fa06,0x00017fc0,
    0x9fb03fe6,0xffffffb0,0x7feffcc5,0x000efffe,0x7cc1bfea,0xfa81ff27,
    0x37ff624f,0x7cc4ffda,0x3ff225ff,0x8bfe6004,0x3fe202ff,0xffb17fb0,
    0x5fd81dff,0x3f61ffc0,0x9fffa23f,0x1bdfffe8,0x5004fe80,0x80fd83ff,
    0x80002ff8,0x40001ff9,0x27ec0ff9,0x3e609f90,0xff510dff,0x3bfe200b,
    0x7dcff300,0x0bff902f,0x07fffff9,0x3ea0dff3,0x5ff3000f,0xff301ff4,
    0x3ffaffa1,0x3a1ffffd,0x51ff404f,0xfff101ff,0xfffffd88,0x09fd02df,
    0xf707fea0,0x003ff505,0x001ff700,0x6c0ff980,0x413f204f,0xdfb05ff9,
    0x03ffd100,0xdff13fcc,0x2fffdc45,0xffbfff91,0x02ff987f,0x7cc00ffe,
    0xb817f62f,0x7fffd0ff,0xe97fee21,0x927ec04f,0x83fe40bf,0xfffffec9,
    0x8027f40e,0x2fcc1ffa,0xdb007fdc,0x21dddddd,0x980007fc,0x027ec0ff,
    0x3fe609f9,0xb00ff702,0x7f9805ff,0x7effffd4,0x3fe4fcdf,0x97fae22e,
    0x3f600ff9,0x45ff3004,0xff881ff9,0x209fff0f,0x09fb1ffb,0x0ff64fe8,
    0xa8807fa8,0x3a1ffffd,0x3ff5004f,0x3ff50ff0,0x7fffffc0,0x01ff51ff,
    0x40ff9800,0x13f204fd,0xf980ffcc,0x13fee00f,0x3a61fe60,0x9fb4ffff,
    0x7dc07fea,0xc80ff30f,0x5ff3005f,0xc89dffd8,0xffd0ffff,0x6cffe203,
    0xf1ff404f,0x03fcc05f,0xfd37fdc0,0x03fea00b,0x7ff107f2,0x65555540,
    0x05ff31ff,0x40ff9800,0x13f204fd,0xf9807fcc,0x0bff500f,0xa981fe60,
    0x6fc9ff41,0x7ccffe20,0x802fe407,0x7ec42ff9,0xffcfffff,0xfe80dfb0,
    0xff80bf94,0xf980bfe3,0x2a003317,0x00dfb0ff,0x1fd41fee,0x26002ff4,
    0x00ffe1ff,0xff309b98,0x3204fd81,0x01ff304f,0x3e203fe6,0xff3000ef,
    0x3a3ff000,0x9afec04f,0x8a7ec07f,0x1ff980dc,0x319dfb70,0x2037e4ff,
    0x40df73fe,0x0ff61ff8,0x0df97f98,0x7fd97fc0,0x220df900,0x006fc86f,
    0xbfd0ffcc,0x987fe400,0x027ec0ff,0x3fe609f9,0xd01ff300,0x7cc003ff,
    0xfa80f267,0xf8817f67,0x403ff34f,0x03ff13ff,0xa8001ff5,0x403fea7f,
    0x1ff31ff9,0xbf91fea0,0xff9bfdc0,0x71ff8801,0xbfd001ff,0x3ea07f40,
    0x3fe6005f,0x200fff21,0x3fe65ff8,0xf9027ec0,0x403fe609,0x7fec0ff9,
    0x33fcc002,0x8ffa03ff,0xff700ffb,0x5c13fe65,0x20ffe0ff,0x01e5c7fc,
    0x04fe8df9,0x1ff41ff9,0x7fd44fd8,0x7fcffd01,0x337e401e,0x7d401dff,
    0x20bee03f,0xe9805ffd,0x3ffe21ff,0x30fff401,0x0efd81ff,0x3e609f90,
    0x41ff300f,0x98003ffb,0x206ff47f,0x77f445fd,0xf32ff540,0x3ffa87ff,
    0x5c45ffec,0x07fd45ff,0x3ee1ffcc,0x13fee23f,0xefc85ff5,0x263efd80,
    0x3fee7ffd,0xfd5109bf,0xbeffa87f,0x0bff9311,0xfe884f98,0xb730acef,
    0xfa81bfff,0x3f262cff,0x07fcc3ff,0x321fffee,0x01ff304f,0x7fcc3fe6,
    0x9999999e,0xff309999,0xfddfff98,0xfff980ff,0x20efffde,0xedffdff9,
    0xfff885ff,0x440effff,0xfdbadffe,0xbfff905f,0x3f609fff,0x02ffecef,
    0xffddffd1,0xfffa8ffb,0x2fffffff,0xffffff70,0x3e00dfff,0xffffb107,
    0x5dffffff,0x7ffffd40,0x984fffff,0xfffc80ff,0xf9827e40,0x21ff300f,
    0xfffffffb,0x5fffffff,0xffd30ff3,0x6c4017df,0x984fffff,0x7ffff97f,
    0x7ffff440,0xfffd300d,0xea80bfff,0x5c04efff,0x401cffff,0x9bfffec8,
    0xffec887f,0x5401deff,0xbfffffec,0x403fb000,0xfffffdb9,0xff91003d,
    0x203bffff,0x40600ff9,0x1ff304fc,0x7dc3fe60,0xffffffff,0xf35fffff,
    0x0004c40f,0x4c0004cc,0x00662000,0x009bcba8,0x10002620,0x00220003,
    0x80004c40,0x98000998,0x0262000a,0x01331000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x40000000,0x4c400198,0x80066209,0x00662198,0x26200662,
    0x20002621,0x00066099,0x33333331,0x13333333,0x26666662,0x33100099,
    0x4ccccccc,0x30cc4019,0x20cc0013,0x4c000999,0x00266099,0x26001330,
    0x01ff5099,0x94c03fd4,0x36004ffb,0x0ffee1ff,0xfb97fe20,0x1fffc00f,
    0xffc9bf60,0x4bfe2000,0x2a000ff9,0xffffffff,0xd6ffffff,0xffffffff,
    0x7dc09dff,0x3fffffe7,0x40cfffff,0x1fff1ffd,0x7c1ff300,0xf5000fff,
    0x01ffc5ff,0x3200ffe0,0x01ffc5ff,0x7f9809fb,0x2a007ff6,0x1ffd83ff,
    0x3e637f40,0x3ffe602f,0xf327fc05,0x3fdc007f,0x54001ff3,0xffffffff,
    0xd6ffffff,0xffffffff,0x701dffff,0x7ffffcff,0xffffffff,0x7fc7ff60,
    0x0ff9805f,0x400bfffe,0x3fe2fffc,0x01ffc003,0x3f217ff2,0x403ff106,
    0x3fe27fe8,0x837fc406,0x3f206ff8,0x204ff81f,0x2207fdfc,0x037f41ff,
    0x7fcc9fd0,0x7ff00000,0x4404fe80,0x7fb85ffc,0x64c413fe,0x47ff66ff,
    0x4c03ffff,0x3fffe0ff,0x5ffff005,0x3e001ffc,0x13ff203f,0x7d40ffcc,
    0x1fffa206,0x7ec09ff7,0x13fea00f,0x7ec0ffea,0x3febfa05,0xf70ff501,
    0x3ff3003f,0x00007fcc,0x7f403ff8,0x70ffd004,0x4027fcff,0x3ffb2ffb,
    0x803ffffe,0x37fe0ff9,0x6fd400ff,0x00ffe2ff,0x3f207ff0,0x41ff404f,
    0xfff703fd,0x03ffb0ff,0xf9007ff5,0x02ffc45f,0x3fe20ff5,0xbf904fd8,
    0x9007ff10,0x00ff98df,0x807ff000,0xff5004fe,0x3fe7fb85,0x93ff8804,
    0x3f3fe3ff,0x83fe605f,0x402febff,0x3e2ffafd,0x1ffc003f,0x5c027fe4,
    0x407fc46f,0x87fbdffe,0x7fc46ff8,0x1ffd1005,0xf8803bfa,0xf55fa81f,
    0x640ffa0d,0x43ff806f,0xffd80ff9,0x807ff002,0xff3004fe,0x3fe7fb85,
    0x32bff004,0xf77ff0ff,0x83fe607f,0x205fcbff,0x22ff8ff8,0x7fc003ff,
    0x8027fe43,0x1bee1ff8,0x07fa9ffc,0x7fe47ff7,0x37fe6000,0xfe801ffb,
    0xff13fc83,0x301ff881,0x7fd403ff,0x3207fcc0,0x3fe002ff,0x8027f403,
    0x3fdc1ffc,0xff3009ff,0x7fc3fee7,0xf301ffb3,0x7cdffc1f,0xf19f500f,
    0x001ffc5f,0x3ffc8ffe,0xfd27ec00,0x7fa82e05,0x3e63ff60,0xffb8002f,
    0xbf9003ff,0x17f43ff0,0x9fd01fea,0x7cc27ec0,0x00bff20f,0xfe807ff0,
    0x85ffc804,0x013fe7fb,0x3fdcbff6,0x1bfe27ff,0x3ff83fe6,0x27f605fd,
    0x0ffe2ff8,0x3f27ff00,0x7fa8004f,0x2a001ff3,0x37fe207f,0x3a0005fe,
    0x3ea005ff,0x3f23fcc7,0x2e027e45,0x03ff107f,0x3ff21ff3,0x03ff8001,
    0x77777ff4,0x0effffee,0x13fe7fb8,0x52ffeccc,0xf71ffcff,0x20ff987f,
    0x10bf93ff,0xf8bfe2ff,0x5ffc003f,0x000ffffc,0x05fb9ff8,0xf701fea0,
    0x40001fff,0x22006ffe,0x513ee0ff,0x402fe8ff,0x6fb82ff8,0xff91ff30,
    0x0ffe0003,0xffffffd0,0x407dffff,0x3fffe7fb,0xffffffff,0xff9bea0e,
    0xf307fec3,0xf99ffc1f,0xf8a7d40f,0x000ffe2f,0xff9fffff,0xd9f9000d,
    0x3fd4005f,0x0017fec0,0x09ffff90,0x5fb17f40,0x3fe23ff0,0xe85fd800,
    0xfbff303f,0x7fc000bf,0x556ff403,0x804ffdca,0x3fffe7fb,0x3effffff,
    0x0ffe6f98,0x7fccdff1,0x2fe8ffe0,0x2ff88fec,0xff000ffe,0x13fee5ff,
    0x0ffff300,0xb807fa80,0x3e60007f,0x002ffcbf,0x03fe29f9,0x037d4ff6,
    0x3e60ffa8,0xffff300f,0x3e0003ff,0x827f403f,0x7dc05ffa,0x26677fe7,
    0x25f88019,0x3ffb83ff,0x1ffc1ff3,0x137c4bf9,0x01ffc5ff,0xfb0bffe0,
    0xffe8005f,0x03fd4004,0x88003fdc,0x1ffd16ff,0x3eadf500,0x3f29f706,
    0xc8bfe004,0x3ffe605f,0x8000efd9,0x27f403ff,0x5c09ff70,0x0013fe7f,
    0x07ff2fc4,0x3fe63ff6,0xff98ffe0,0x7fc49f70,0xf000ffe2,0x1fff109f,
    0x00ffdc00,0x2e01fea0,0xffb0007f,0x802ffcc1,0x304fc8ff,0x8007fadf,
    0x80bfe5fc,0x9ff11ff9,0x807ff000,0x7fec04fe,0x7fcff703,0xf93e0004,
    0x3dff103f,0x21ffc1ff,0x443fb2fe,0x00ffe2ff,0x3ea07ff0,0x1bee005f,
    0x201fea00,0xfb8007fb,0x03ffc82f,0x01fe9fd8,0x001fe3fe,0x0ff51ff3,
    0x3ee0ff98,0x1ffc001f,0xf1013fa0,0x4ff701ff,0x260004ff,0xfb80ffe0,
    0x3fe0ffdf,0x37c6fe43,0x3ff8bfe2,0x901ffc00,0x3fa007ff,0x07fa8002,
    0x4c007fb8,0x3ffa05ff,0x3fe7dc01,0x017f3f60,0x13f2bfa0,0xfe81ff30,
    0x0ffe000e,0xf5009fd0,0x7cff70bf,0x3e00004f,0x7ffec03f,0xf30ffe0f,
    0xff887f7f,0xf000ffe2,0x7ff4407f,0x003fd401,0xfb807fa8,0x3bfa2007,
    0x01bfe600,0xa80bfff3,0xa8003fff,0x4c00ffdf,0x27fcc0ff,0xe807ff00,
    0x7ffb004f,0x13fe7fb8,0xf8665400,0x7ffc403f,0x3a0ffe0f,0x7fc40fff,
    0x26673fe2,0x3e199999,0x77fcc03f,0x1fff6dc0,0x807fa800,0x3f6007fb,
    0x4ffb801f,0x201fffc0,0x8001fff8,0x9805fff8,0x2ffc80ff,0xe807ff00,
    0xfff1004f,0x9ff3fdc1,0x43ff2000,0xffb803ff,0x2e0ffe0f,0x2ff886ff,
    0x3ffffffe,0x3fe7ffff,0x45ffc803,0x0004fffb,0x3ee01fea,0x07ff7007,
    0xb017fec0,0xdfd001ff,0x17fe4000,0xe807fcc0,0x3ff800ef,0x70027f40,
    0xf3fdcbff,0x3f20009f,0x2007ff0f,0x0ffe0ffe,0x3e20ffe6,0x3ffffe2f,
    0x27ffffff,0xffd003ff,0x000ddc47,0x0001fea0,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x01310000,
    0x22006620,0x26662009,0x99999999,0x26666621,0x19999999,0x26666666,
    0x06600001,0x4ccccccc,0xaba98000,0x03310001,0xfffffd80,0x3ff67fff,
    0xffffffff,0x880ff95f,0x00130001,0x4c000310,0x20030000,0xff5005fe,
    0xffff9103,0xfffd819f,0xffffffff,0xfffffd0f,0xffffffff,0x7ffffffc,
    0x0001dfff,0x3ffe0ff5,0xceffffff,0x3fffaa00,0x74001eff,0x3fa002ff,
    0x7fffffff,0x3ffffff6,0xf95fffff,0xffff910f,0xffdb809d,0xffb802ef,
    0x6c403eff,0x01dffffe,0x177fff5c,0x2a00bfd0,0x7ffc41ff,0x20ffffdf,
    0xfffffffd,0xfd0fffff,0xffffffff,0x7ffcffff,0xffffffff,0x3e2000df,
    0xfffff07f,0x1dffffff,0xd7bfff50,0x2a003fff,0x3e005fff,0x999999af,
    0x26666621,0x71ffc999,0xdfffd0dd,0xfb01dfff,0x09fffddf,0x3fbbffa2,
    0xffa80dff,0x1ffffeef,0xeefffd88,0x0bfd05ff,0xfd07fea0,0x2ffd445d,
    0xfd000bfb,0x13fe0009,0x13ffaa62,0xf07ffd80,0xff73307f,0x40eff88d,
    0xd800ffe9,0x9800ffcf,0x2200007f,0xffb804ff,0x3217fd41,0x3ff221ff,
    0x541ffd82,0x0dfe84ff,0x3217fea2,0x3fea0bff,0x5005fe83,0x17fcc3ff,
    0xbfb0ffc8,0x009fd000,0xd1013fe0,0xff7005ff,0x00ffe0ff,0x7fd41ff5,
    0x805ff702,0x04fd8ff8,0x00006fa8,0x7ec01bf6,0x7cc9db04,0xa8bfd02f,
    0x3ff501ff,0xfc807fd4,0xa81ffcc7,0x02ff40ff,0x3ee1ffa8,0x25ff100f,
    0xfe8005fd,0x09ff0004,0x9803ff60,0xff07faff,0x23ff8807,0x1ffc07fd,
    0x3fd5bee0,0x00027e40,0x9001ffb8,0x3ee003df,0xfb06a606,0x4c4fe80b,
    0xf91fea01,0x0ffe201f,0x3ea00bfd,0x880aa61f,0x00bfb2ff,0x20009fd0,
    0xff5004ff,0x7d57f405,0x8807ff07,0x2004c2ff,0xa7f402ff,0x7f402ff8,
    0x00179933,0x3001ffc4,0x4037dfff,0xfe8004fc,0x402fec03,0x6c7feba9,
    0x999999df,0x2ff44fe9,0x001ffa80,0x5fd87fdc,0x004fe800,0x7c009ff0,
    0x2a9f903f,0x807ff07f,0xfb8007fb,0x87fe600f,0x6ffc06fd,0x02ffffff,
    0x5000dfb0,0x19ffffff,0xf8003fe8,0x437dc02f,0xfffffed9,0x7ffff47f,
    0x5fffffff,0x555577f4,0xffcaaaaa,0xb37f4001,0x9fd000bf,0x013fe000,
    0x6fa84fe8,0x67fc1fea,0xfca99999,0x7fd4002f,0x2a37e404,0xfff101ff,
    0x7fffd77d,0x003ff880,0xffffb710,0x001ff45f,0x3ee017fc,0x6ffffec6,
    0x7fc7fa9b,0xcccccccd,0x7fff43cc,0xffffffff,0x32001fff,0x3fff61ff,
    0x5fffffff,0x7ffffff4,0x21ffffff,0x3f6004ff,0xf50ffc46,0x3ffffe0f,
    0x01ffffff,0x4027fd40,0x04ff83ff,0xfd307ff5,0x07fe401f,0xffc98000,
    0x20013f67,0x2fec03fe,0xf7039ff7,0x0004fe8f,0xfffffffd,0x3fffffff,
    0xb0fff200,0xffffffff,0xfffe8bff,0xffffffff,0x8013fe1f,0x227ec7fd,
    0xffff07fa,0xdfffffff,0x17fea001,0x3203fea0,0xf100407f,0x027fc07f,
    0xfa8054c0,0x540df91f,0x202fec6f,0x817fa4fe,0x02fe47fc,0x0bfd02aa,
    0x2007fea0,0xefd84ffc,0x99999999,0x4cceff40,0x41999999,0x3fa004ff,
    0x3ea1bea6,0x3339ff07,0x5ffd7533,0x005ff880,0x3fe60bfb,0x17fa0002,
    0x9500ffd4,0xf304ff89,0x407fea3f,0x0ffdc5fe,0x3fa2ffa8,0x41ffd104,
    0xff502ffa,0x5005fe83,0x7ec403ff,0x00bfb03f,0x20009fd0,0x3fe004ff,
    0xf503ff15,0x100ffe0f,0x7fb80dfd,0xdddff100,0x0dffdddd,0xd837ec00,
    0x23fe406f,0x7ec42ffc,0x710f7ec6,0x3dfd05ff,0x7dc5ffa8,0x7fff440f,
    0x305ffec0,0x0bfd09ff,0x4407fea0,0x3f602ffe,0x04fe8005,0x2009ff00,
    0xdff93ff8,0xdffddddd,0x401ffc7d,0x3f200ffa,0xffff7004,0xffffffff,
    0xfd801303,0x402ff885,0x7ff447fc,0x41fffedf,0xffdeffe8,0xdffd304f,
    0xf10bffd9,0x7ffd9bff,0xffe883ff,0x80fffedf,0xff5005fe,0x03ffd103,
    0xe8005fd8,0x9ff0004f,0x647fee00,0xffffffff,0x3fe4ffff,0x02ff9803,
    0x7f400ff6,0x9999999d,0x37ec4ff9,0x3e60ffe0,0x887a800f,0x0dfffffc,
    0x3fffff20,0x7ffe4402,0x3faa03df,0x9fd0dfff,0x3fffff20,0x00bfd00d,
    0xfd107fea,0x0bfb003d,0x0009fd00,0x3e2013fe,0x2aaaa66f,0xaaffcaaa,
    0x2a00ffe1,0x026201ff,0x2007fe60,0x3fee0ffd,0x701ff702,0x017200ff,
    0x98800133,0x00188000,0x10000cc4,0x0bfd0033,0xfb07fea0,0x17f6001f,
    0x0013fa00,0x362027fc,0x3ea002ff,0x8807ff07,0x200007fe,0xff3006fc,
    0x10f7fc47,0x3f209ff9,0x002fa806,0x00000000,0x00000000,0x2a00bfd0,
    0x2ffea1ff,0x99999999,0xd000bfb0,0x333333bf,0x3e133333,0xba9999df,
    0x4004fffc,0x39ff07fa,0xfd753333,0x03cc807f,0x3a004ff8,0x77ffcc6f,
    0x3604fffd,0x0019804f,0x00000000,0x00000000,0x54017fa0,0x3fffa1ff,
    0xffffffff,0xd000bfb3,0xffffffff,0x3e7fffff,0xffffffff,0xa8004fff,
    0xfffff07f,0x9fffffff,0xa80bff00,0x3ee001ff,0x7ffec41f,0x1ffc03ef,
    0x00000000,0x00000000,0x7f400000,0x23ff5005,0xfffffff8,0xfb3fffff,
    0xfffd000b,0xffffffff,0x3fffe7ff,0x0bdeffff,0x20ff5000,0xffffffff,
    0xff000cee,0x006fd80b,0x33027fc4,0x00000001,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x7cc08800,0x201fea07,0x4000c008,0x6413f601,
    0x64ff307f,0x001970ff,0x21d98000,0xffffffff,0xbff12fff,0xfb8ffe60,
    0x203fdc07,0xcb8005e9,0x26097001,0xcccccccc,0x1310cccc,0x50cc4262,
    0x40554c99,0x0c01bba8,0x37ff6df3,0x7d40ff30,0x7f55be67,0x3ff664ef,
    0x55be60df,0x5c0dfffe,0x03ffd06f,0x87fe4bf7,0x0001dffb,0xf0fff540,
    0xffffffff,0x1ffd45ff,0xff117fa2,0x2027f405,0x7c4007f9,0x20fb005f,
    0xfffffffb,0xfd0fffff,0x7fd5bf6d,0x7fc4ff91,0x7ffff4c5,0x98f661cf,
    0x27fffcef,0x9fea07f9,0xfeffbef9,0xffff9bff,0x2fbe66ff,0x1fffffff,
    0xff103fe2,0x5c5fd07f,0xfffb30ee,0x6440007d,0x000cffff,0xffb0bff1,
    0x6c07fec1,0x03ff305f,0x64007f98,0x21300fff,0xccc98a7c,0xcccccccc,
    0x3f6dfd0c,0x3f23ff56,0xfd07fd47,0xdfffffff,0x7fcc7ffd,0x3e62a9df,
    0xf99fea07,0xffb30cff,0x97fdc5bf,0x2a1dfff9,0x21ff45ff,0x7c45fefa,
    0xff93000f,0x2a0019ff,0x00befffd,0x441bfa20,0x05ff55ff,0x3ee03fea,
    0x007f9806,0xe827effc,0x1ffceddf,0xb6fe8000,0xa87feadf,0x33a4fb87,
    0xffffb710,0x2ffcc3df,0x7d40ff30,0x2617fe67,0x27ff06ff,0xff905ff9,
    0x57ec5fc8,0x002fd47f,0x2dfffeb8,0xdfffeb88,0x1dfd0001,0x7fdffcc0,
    0x7417fc04,0x07f9803f,0x1fe37ee0,0x6ffff6dc,0xfd80001b,0x3feadf95,
    0x31541720,0x41665c40,0x3e602ff9,0xf99fea07,0x04ff882f,0x0bfe69fb,
    0x1fe63fd4,0xfd87faff,0x7e4c0003,0xfff50eff,0x6c00017f,0xffc801ff,
    0x45fc806f,0x664c0ff9,0xcccffdcc,0xb2fe80cc,0x27fd407f,0x53f20000,
    0x54ff14fb,0x0000002f,0x7cc03ff3,0xf99fea07,0x207ff01f,0x03ff34fd,
    0x3ff03fe6,0xf1fe57e6,0x2200001f,0x9ff71ffe,0x3ff90000,0x00fff400,
    0xbf907fcc,0xffffff70,0x81ffffff,0x41bea6fa,0x4c4fbdf9,0xcccccccc,
    0x7f50cccc,0x266f8fea,0x20000001,0x3e600ff9,0x4cff500f,0x05ff00ff,
    0x07fcd3f6,0x7e40ff98,0x5bea7f73,0x980006f9,0xf50efffc,0x00017dff,
    0x4c007ff7,0xfd004fff,0x64c17fc7,0xccffdccc,0x1fec0ccc,0x43fa0bfa,
    0x3ffee1fd,0xffffffff,0x3221910f,0x00000ae1,0x00ff9800,0x7dc03fe6,
    0x7c03fe67,0x269fb02f,0x1ff300ff,0x23fb6fa8,0x03fc8ff8,0x3fffaa00,
    0xffeb882d,0xff5001cf,0xfefe8009,0x56fb802f,0x3fcc00ff,0x2e07fcc0,
    0x0622885f,0x99999993,0x00199999,0x00000000,0xf3007fcc,0x99ff201f,
    0x05ff00ff,0x07fcd3f6,0x7c40ff98,0x57f47f8f,0x644001fe,0x000cffff,
    0x05dfffb5,0x2002ffcc,0x0ffc8ffc,0x7ec7fc40,0x01fe6004,0x3fe217f2,
    0x00000001,0x00000000,0x200ff980,0xfe882ff8,0x7c03fe67,0x269fb02f,
    0x1ff300ff,0xc8bf9fb0,0x26006fdf,0x00befffd,0xffff9100,0x037fc419,
    0x744bfea0,0xfbfd805f,0x1fe6000f,0x3605ff10,0x2222224f,0x44332a08,
    0xaaaaaaaa,0x0aaaaaaa,0x00000000,0x3a007fcc,0x3ff620ff,0x7c03fe67,
    0x269fb02f,0x1ff300ff,0x987fff70,0x99504fff,0x0016ffdc,0x3ffd7100,
    0x8003bfa2,0x7fd45ff8,0x37ffd403,0x001fe600,0x3fffe200,0x43fee7ff,
    0xfffffffa,0xffffffff,0x00000001,0x2007fcc0,0xffeefffa,0x03fe67fa,
    0x4fd817fc,0x3e601ff3,0x1fff880f,0xf901fff8,0x00032e1f,0x2e3b5000,
    0xffffffff,0x3ff66fff,0x400ffc80,0x4c003fff,0x8800005e,0x27ffffff,
    0x55510ffb,0x55555555,0x00015555,0xf9800000,0xffea800f,0x267f89ef,
    0x05ff00ff,0x07fcd3f6,0xfd00ff98,0xc81ff60f,0x000000ff,0x7fffdc00,
    0x6fffffff,0x3e205ff5,0x07fe406f,0x00000000,0x06666666,0x00000000,
    0xf3000000,0x04c4001f,0x7c03fe60,0x269fb02f,0x1ff300ff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_30_usascii_x[95]={ 0,2,1,0,0,1,1,1,1,1,0,1,2,0,
2,0,1,2,0,1,0,1,1,1,1,1,2,2,1,1,1,1,1,-1,1,1,2,2,2,1,2,2,0,1,
1,1,2,1,2,1,2,1,0,2,0,0,0,0,0,1,0,0,0,-1,1,0,1,1,0,0,0,0,1,1,
-2,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,1, };
static signed short stb__arial_30_usascii_y[95]={ 24,4,4,4,3,4,4,4,4,4,4,8,21,15,
21,4,4,4,4,4,4,5,4,5,4,4,10,10,8,10,8,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,27,4,9,4,9,4,9,4,9,4,4,
4,4,4,9,9,9,9,9,9,9,5,10,10,10,10,10,10,4,4,4,12, };
static unsigned short stb__arial_30_usascii_w[95]={ 0,4,8,15,14,22,17,3,7,7,10,14,4,9,
4,8,13,9,14,13,14,13,13,13,13,13,4,4,14,14,14,13,26,19,16,18,16,15,14,19,16,4,12,17,
13,20,16,19,15,19,18,16,16,16,18,26,18,18,16,7,8,6,12,17,6,14,13,13,13,14,9,14,13,4,
7,13,4,20,13,14,13,14,9,13,8,13,14,20,14,14,13,9,3,9,14, };
static unsigned short stb__arial_30_usascii_h[95]={ 0,20,8,21,24,21,21,8,26,26,9,13,7,4,
3,21,21,20,20,21,20,20,21,19,21,21,14,18,14,9,14,20,26,20,20,21,20,20,20,21,20,20,21,20,
20,20,20,21,20,22,20,21,20,21,20,20,20,20,20,26,21,26,11,3,5,16,21,16,21,16,20,21,20,20,
26,20,20,15,15,16,21,21,15,16,20,15,14,14,14,20,14,26,26,26,5, };
static unsigned short stb__arial_30_usascii_s[95]={ 255,156,218,146,91,191,214,214,33,1,188,
160,227,188,198,232,85,246,18,241,81,147,71,161,15,1,81,175,101,199,86,
113,56,127,96,176,64,48,33,156,1,135,43,213,199,178,161,126,140,106,116,
113,99,130,66,39,20,1,233,83,147,49,175,203,232,223,29,194,99,238,209,
56,219,195,41,85,250,25,46,208,177,162,1,180,200,11,145,60,130,231,116,
23,19,9,239, };
static unsigned short stb__arial_30_usascii_t[95]={ 1,50,92,1,1,1,1,92,1,1,92,
92,92,102,102,1,28,50,71,1,71,71,28,71,28,28,92,71,92,92,92,
71,1,71,71,28,71,71,71,28,71,50,28,50,50,50,50,1,50,1,50,
28,50,28,50,50,50,50,28,1,28,1,92,102,92,71,28,71,28,71,28,
28,28,28,1,50,28,92,92,71,1,1,92,71,28,92,92,92,92,50,92,
1,1,1,92, };
static unsigned short stb__arial_30_usascii_a[95]={ 119,119,153,239,239,382,287,82,
143,143,167,251,119,143,119,119,239,239,239,239,239,239,239,239,
239,239,119,119,251,251,251,239,436,287,287,310,310,287,262,334,
310,119,215,287,239,358,310,334,287,334,310,287,262,310,287,406,
287,287,262,119,119,119,202,239,143,239,239,215,239,239,119,239,
239,95,95,215,95,358,239,239,239,239,143,215,119,239,215,310,
215,215,215,143,112,143,251, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_30_usascii_BITMAP_HEIGHT or STB_FONT_arial_30_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_30_usascii(stb_fontchar font[STB_FONT_arial_30_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_30_usascii_BITMAP_HEIGHT][STB_FONT_arial_30_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_30_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_30_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_30_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_30_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_30_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_30_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_30_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_30_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_30_usascii_s[i] + stb__arial_30_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_30_usascii_t[i] + stb__arial_30_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_30_usascii_x[i];
            font[i].y0 = stb__arial_30_usascii_y[i];
            font[i].x1 = stb__arial_30_usascii_x[i] + stb__arial_30_usascii_w[i];
            font[i].y1 = stb__arial_30_usascii_y[i] + stb__arial_30_usascii_h[i];
            font[i].advance_int = (stb__arial_30_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_30_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_30_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_30_usascii_s[i] + stb__arial_30_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_30_usascii_t[i] + stb__arial_30_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_30_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_30_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_30_usascii_x[i] + stb__arial_30_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_30_usascii_y[i] + stb__arial_30_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_30_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_30_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_30_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_30_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_30_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_30_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_30_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_30_usascii_LINE_SPACING
#endif

