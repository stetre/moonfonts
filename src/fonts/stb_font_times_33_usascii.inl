// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_33_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_33_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_33_usascii_BITMAP_WIDTH         256
#define STB_FONT_times_33_usascii_BITMAP_HEIGHT        128
#define STB_FONT_times_33_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_33_usascii_FIRST_CHAR            32
#define STB_FONT_times_33_usascii_NUM_CHARS             95

#define STB_FONT_times_33_usascii_LINE_SPACING          21

static unsigned int stb__times_33_usascii_pixels[]={
    0x01530011,0x05c402a8,0x32a004c0,0x65d44000,0x262000ac,0x20009999,
    0x4ccc4000,0x00620099,0x00000200,0x57101100,0x06030000,0x00600010,
    0x65c00000,0x7d500590,0x3b902640,0xff009700,0x2b76a009,0x2ddca889,
    0x7fffff40,0x3ff6e203,0x7e402cef,0x2606ffff,0xfdc88004,0x4c02ceff,
    0xdc8800ef,0x3ff660ce,0x43cc0004,0xeeec80f8,0x0016e002,0x0073ff6a,
    0x3724ff98,0x9904e800,0x3a2013a0,0x807fd003,0xb7000ce9,0x40ff6001,
    0xb710aefa,0x13f201bf,0x37fff6e0,0x577d400b,0x4037f260,0x7d403ffc,
    0x9ff5500d,0x985b8000,0x3f90fc87,0x8001f300,0x0fc88cfd,0xc89ff100,
    0xc82fa805,0xe801fb84,0x2e004003,0x0e98001f,0xfc83fd80,0x07bf600d,
    0xee8813f2,0x2ffd9cab,0x5c01bfb0,0x4ffc81ef,0x2005fb10,0x640004fe,
    0x27d45b83,0x05d009f1,0x7c45fb80,0x220a6003,0x42fc402f,0xc807f84c,
    0x76400007,0x01660000,0x1ff90ff6,0xc81ffd00,0x4cbee04f,0x3ee0fe64,
    0x0ffc800f,0x7441ffdc,0x13fa002f,0x7b05d000,0x03fc3fc8,0x3fa00172,
    0x00006e83,0x3fd401f7,0x03fe2264,0x00004fa8,0x200003ea,0x31fec02b,
    0x3e2009ff,0xd027e44f,0x30f224cf,0x3e2009ff,0x417fdc5f,0x7f4004fd,
    0x407c0004,0x3e17f41f,0x001f301f,0x3f989ff0,0x09f10000,0x22643fdc,
    0x3fa01ff8,0x7f100000,0x01260000,0x07ff47fb,0x643ffb00,0x21ff304f,
    0x3fa1d449,0x3ff6000f,0xf507fea2,0x09fd000d,0x7c43cc00,0x3fa17f40,
    0x20005d02,0x007e46ff,0x203fd000,0xf84c86fc,0x00bf502f,0x05e87710,
    0x5d94dda8,0xa9fec068,0x7dc006ff,0x4413f25f,0x188933ff,0x5001bfe6,
    0x07fccbff,0xd0007ff1,0x40de549f,0xccfdccc9,0xb1ccfdcc,0xc81ff87f,
    0x3ff60005,0x00005fb1,0xbfb05fc8,0x07fd0990,0xda800ff6,0x807e64ff,
    0xff930ce8,0x3f600d81,0x800bff73,0x13f26ff9,0x049affe8,0x2002ffdc,
    0x1fe27ff9,0x35311ffb,0xe8cfe801,0x64c4ffff,0xccccdecc,0x9f71ccee,
    0x3e607fc4,0x3fee0000,0x3bb21eed,0x5c001eee,0x907f706f,0xf105fb09,
    0x7d54007f,0xbd01b24f,0x0570bfd0,0x4ffc9fec,0x87ffc400,0x3fee04fc,
    0x7fe404df,0x7ffc4004,0x7bff1fe0,0x405fffdf,0xfcacecfe,0x20ba04ff,
    0x2a6e883d,0x0017443f,0x40fffe20,0x8000bffe,0x3f880ffa,0x507c84c8,
    0xff0005ff,0x1fb01fc9,0x07507ff0,0x3ffe9fec,0x91fff800,0xfffc809f,
    0x0fffa00e,0xe87ffe00,0x88bbfe26,0xdfd03ffd,0x80ffe883,0x101f80f8,
    0x9909f79f,0xffc88000,0x009f705f,0xd80ffd40,0x03f84c86,0xd0003ff7,
    0x6407e69f,0x80ff883f,0x74ff601c,0xff8002ff,0x5009f92f,0x3a05ffff,
    0xff8003ff,0xffa9761f,0x80ffe881,0x7ff504fe,0x01f10d50,0x86a81a98,
    0x2a00bdb8,0x82fff9ef,0x806e406d,0x0ee03ff9,0x90164499,0xfd0001ff,
    0x37d41ea9,0x80d06fa8,0x07ff93fd,0x321fff00,0xffb1004f,0x07ffb09f,
    0x20fff880,0x407ff24c,0x4fe83ffc,0x16e13fe0,0xf88001aa,0x7e46f441,
    0x3ee5fb81,0x3017c0ef,0x3fe209ff,0x4c96cc04,0x7fd801b9,0x2e9fd000,
    0x3205fd07,0xfd80d04f,0x8009ff73,0x13f27ff8,0x4fffe980,0x20027fe4,
    0x91e47ff9,0x3fea01ff,0x3604fe84,0x5bd5516f,0x555db555,0x6c26c001,
    0xfb83be0f,0x727ffc46,0x03ff8809,0xcb809ff1,0x00b6a991,0xd0001ff9,
    0x3e61ae9f,0x82ff880f,0x99fec049,0x7cc005ff,0x8013f26f,0x23ffe9c9,
    0x4c005ffa,0xf715c5ff,0x17fe201f,0x5fd813fa,0xddddfdd5,0x03ddddfd,
    0x1be21aa0,0x41ffc5f9,0x0e99fffa,0x3e601880,0xc83b103f,0xfb806d44,
    0x4fe8001f,0x20df70d7,0x805b07fd,0x0fff13fd,0x322ffb80,0x4526004f,
    0x1ffe26fe,0x985ff700,0xf807fea1,0x204fe84f,0x407c44fd,0x1f88001f,
    0xa7e46fa8,0xffb01ffa,0x200005dd,0x0bd02ffa,0x260bd099,0xfe8001ff,
    0x09fb0f54,0x0d70bfd5,0x7fdc7fb0,0x91bfa003,0x524c009f,0x1ffdc1ff,
    0x100bfd00,0x17f405ff,0x5fd027f4,0x007886a8,0x17ee07b0,0x0bff2bf7,
    0x8037ffc4,0x3fee03d9,0x4c82f981,0xff880fc8,0x34fe8002,0xca8bfb0f,
    0x00fcc4fc,0x1ff61fec,0x3217fd40,0x4985504f,0x1ffa17fc,0x8007fd40,
    0x41fe05fd,0x0df104fe,0x000d50b7,0x237d40d7,0x0bffd4fc,0xb82fffd4,
    0x2e01ffb0,0x909f907f,0x3a07fb09,0x4fe8003f,0x57ff507e,0xea8ff29b,
    0x1fec0a22,0xd1013fa2,0x209f905f,0xff124c5a,0x404ff981,0x4c882fe9,
    0x7d40ffc4,0x3209fd03,0x4b83d81f,0x1007c400,0xf93fc8df,0xfdd305ff,
    0x924c3bff,0x13f201ff,0x42642fec,0x09fb03fe,0x2649fd00,0xa8ffffa2,
    0x6c1cecff,0xd107fb01,0x0bfe60bf,0x0fa827e4,0x104fa926,0x3bea0bfb,
    0x985ff701,0xb01f546f,0x03fb87ff,0x8007b03d,0x20fe803d,0xfffd10ff,
    0x265fb77d,0x0fffffff,0x01ff004c,0x21321bf2,0x0df302ff,0x7cc7fd00,
    0x37302a80,0x3fd81660,0x3737faa0,0x3f200cfe,0x265df504,0xb801df34,
    0x4efdcefe,0x4c0ffd40,0x802edcfe,0x1eedffea,0x03d01f10,0xe8802dc0,
    0x6c42fc8d,0x40dfffff,0x02efffe8,0xf702fd40,0xff88990f,0x0003ee01,
    0x004d87fd,0xfb00f400,0xffff7007,0x209f9005,0xeedffeb8,0x9a98004f,
    0x10026000,0x55100013,0x05028801,0x10006c40,0x544039b7,0x01a8801a,
    0x4c01fb00,0x7c44c86f,0x001f400f,0x05d10bfa,0xb00f6000,0x3fea007f,
    0x27e401ff,0x00ee4c40,0x00000000,0x00000000,0x00000000,0x40000000,
    0x2fcc02f8,0x403f4264,0x3fa000f9,0x0001f981,0x1fec01ec,0x1fffd100,
    0x30027e40,0xeeeec809,0xdddd34ee,0xdddddddd,0x00001ddd,0x00000000,
    0x00000000,0x07b00000,0x09901f70,0x0b9003f5,0x4c0bf022,0x2e98003e,
    0x0007fb00,0x7e40dfd5,0x36004004,0x15ffffff,0x55555555,0x05555555,
    0x00000000,0x00000000,0x80000000,0x2e8803d8,0x03720990,0x7ff116e0,
    0x3b2007e6,0x0eecc00b,0x7fb33310,0x67f54000,0x4ccefe41,0x55540000,
    0x0001aaaa,0x00000000,0x00000000,0x00000000,0x22006440,0x813201ec,
    0x0c8803ea,0x007bbffa,0xbcceeb88,0xe801deec,0x003fffff,0x90cba880,
    0x00dfffff,0x00000000,0x00000000,0x00000000,0x00000000,0x80088004,
    0x00098019,0x0001a981,0x004d54c4,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00800000,0x40200000,
    0x00098000,0x440000c0,0x80100100,0x0640001b,0x000ee200,0x03971000,
    0x00159950,0x22000010,0xeeee9801,0x003a84ee,0xfb500cb8,0xda803bfd,
    0x6cc02eff,0x499bdfff,0xfeffda80,0x202b8adf,0x03efedea,0x3bfff6a0,
    0x36a0d0ac,0x09704efe,0x3003cc00,0xdb80bff9,0x9b1004ef,0xd303dfd7,
    0xdddfb33b,0x3ffb203d,0x3fa0003e,0x7fffec01,0xdff932ff,0x84ffa800,
    0x7f710afc,0x3fffff60,0x15bf703f,0x409ffd73,0x220acfe9,0xd902fffa,
    0x202ff541,0x260adffa,0xcfa87ffd,0x4c0efb88,0x012e0007,0x105ff998,
    0x017a25dd,0x45ff8936,0xcefd87f8,0x7fff440b,0xb8005fff,0x3be601ff,
    0x2665eeee,0x7cc006ff,0xe827d43f,0xb88e541f,0x06fa86ff,0x3ea09fd1,
    0x1fec403f,0x7fd417cc,0x803ff902,0x0fea0ffa,0x007a1bee,0x6c000f40,
    0xa83fb05f,0x307f205f,0xa85fd87d,0x273f607f,0x004fffd9,0xd807ffe6,
    0x01bf2003,0x07f60660,0x209127dc,0x17f41ffc,0x3fea13a0,0x709f1002,
    0x0bff107f,0x2e007ff7,0x7c41fa0f,0x40025c2f,0xbf900079,0x3fa0df50,
    0x2001fd01,0x1ff983fe,0xff980f98,0xff9d000f,0x9001e603,0x740000df,
    0x049f702f,0xff83ff30,0x3e225c02,0x4264005f,0x8ffb06fb,0x74005ff9,
    0x7e40df51,0x64003cc7,0x0bf90004,0x17f207fd,0xff8007fc,0xb82ff884,
    0x00bff602,0x407fe372,0xf9000aed,0x7ec0000d,0x4003f906,0x405ff87f,
    0x00ffe449,0x1be61220,0x3ff62fec,0xfc8dc001,0xd07fea05,0x001e8003,
    0xff88bf90,0x883ff702,0xbf9000ff,0x0303ff50,0x5402ffa8,0x981ff88f,
    0x401dffff,0x200006fc,0x2fc44ffb,0xfb05f300,0x3e1401bf,0x4400006f,
    0x7c47ff00,0xb188007f,0x17fcc0df,0x0698012e,0x3f259730,0xa80ffcc5,
    0xff9552ff,0x7cc03557,0x002fe41f,0x2200ff88,0xb03ff11f,0x09ffffff,
    0x597337e4,0x57ffa000,0x1ec005e8,0x02efffa8,0x0005ff98,0xb8df5000,
    0x6c0006ff,0x0ffe207f,0x026400f3,0x3f273f62,0x07fd45fe,0xddb3ff98,
    0x807dddff,0xdfb8bff9,0x0df30000,0x07fe24d8,0x7ffedd4c,0x3eedf905,
    0x88004fff,0x003eeffe,0xff7007ec,0x7dc03bff,0x0000004f,0x5ffd83fd,
    0x0ffe4000,0x1e83ff98,0x74403d00,0x22ffdc0e,0xff100ffc,0x000ff989,
    0x06f32f62,0x407f7000,0x00ffc46a,0xc83fffb8,0xfc89ccef,0xfe88001f,
    0xfc8801ff,0x3ee02fff,0xd80cffff,0xeda803ff,0x9805eeee,0x03ffe83f,
    0x82ffd400,0x04b82ffa,0x17e40698,0x3fec5ff8,0xff317fe0,0x0016c001,
    0xf102f400,0x001ff883,0xf903ffe6,0x007ff05f,0x0bfffb60,0xfffd7510,
    0x7ffec407,0x1fff42ff,0x07fff700,0x7ff41760,0xffd80003,0x40ffec43,
    0x204c8078,0x17f607f9,0x5ff80ffd,0xc8007fcc,0x5400003f,0x220f600f,
    0x7cc001ff,0xd837e42f,0x8066cc4f,0x05fff95d,0x4037fdc0,0x22ffffe9,
    0x22005ffd,0x0d1007ff,0x00027fec,0x6e7fff44,0x5d00ffed,0x3f201e80,
    0xfb17f206,0x22ffc40f,0xfb000ff9,0x9dffffff,0x202e8003,0x03ff105b,
    0xfc87ff00,0xfd8bfb06,0x2a37446f,0x2e000fff,0xff7000ff,0x1fff23ff,
    0x200dff00,0x17ff201b,0xcdca8000,0x2e05ff89,0xfb01a604,0x362fe40b,
    0x13fe207f,0x22001ff3,0xfffffffe,0x09b003ff,0x4cccd7cc,0x009affa9,
    0xdf90ff20,0xffb17f60,0x541fdc1f,0x3e2003ff,0xfd10062f,0x03ffee9f,
    0xb006ff80,0x007ffb80,0x0ffe4000,0x02640f10,0x5fc817fe,0xf9807fe4,
    0x007fcc3f,0x99988d88,0xb806ebaa,0x7fffdc05,0xffffffff,0x907ea006,
    0x217f20df,0x07fa1e8a,0x3a0037e4,0x3e20161f,0x05fff16f,0x48037fc0,
    0x007ffc40,0x5ff88000,0x03d02e80,0x3f206fe8,0xa80ffcc5,0x07fcc1ff,
    0x44017440,0x003aa00f,0xddddddd5,0x00bddffd,0x837e43dc,0x44d105fc,
    0x1ff100ff,0x1f07f400,0x7dcdfb00,0x1bfe006f,0x7fe400c0,0x401c4004,
    0x4b800efb,0xffd80698,0xfd0bf900,0x261bee07,0x0fc800ff,0x3aa06a80,
    0xff880000,0xc83e8001,0x20bf906f,0xf017ec3b,0x227cc00f,0x44fe803f,
    0xff002ffe,0x7c40000d,0x036003ff,0x2003ff30,0xb804c878,0x0bf903ff,
    0x0ff60bf7,0x3e003fe6,0x80f4404f,0x00a200ea,0x2e20ffc4,0xf905c882,
    0x3217f20d,0xf305fa83,0x03f20189,0x7fcc05ff,0x017fec41,0x6d4037fc,
    0x1ffe9801,0x7d402d80,0x2174001f,0xfff8801f,0x4437f441,0x837cc0fe,
    0xfb801ffa,0xcbaaacff,0x335f502e,0x03f73333,0xf507fe20,0x1bf937df,
    0x7ec1bf20,0x5fd00645,0x7fe46d88,0xf01db50b,0xfea817ff,0x073fee03,
    0x2202ffd4,0xfd1006ff,0x75cc17bf,0x0077d401,0x00d325c0,0x64dfffd4,
    0x443cffef,0x403fa25f,0xd5003ffc,0x19ffffff,0x3ffffea0,0x006fffff,
    0x3f607fe2,0x6c02dfff,0x00dfd07f,0x7fb7ff90,0xdfffff30,0x7f657407,
    0x801effde,0xdcdffec9,0xfd001cff,0xffdb800b,0x880cffef,0x0002eeca,
    0x4003c9e2,0xc8effff9,0x9db302df,0xffb7019d,0x10019bff,0xf9801553,
    0xffffffff,0x3e2003ff,0x2002601f,0x74efffda,0x005bfffb,0x51003530,
    0x55106003,0x54c00015,0x1880019a,0x4d54c000,0x0026a200,0x00a85400,
    0x0cc15300,0x00001880,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x32a00000,0x2ccb9800,0xaaaaa873,0x0d554c0a,0x59931544,0xdddddd50,
    0x3bbbb625,0xeeec81de,0xddddd74e,0x776403dd,0xddb70dee,0x2e05bddd,
    0x80ceeeed,0x5c40003a,0xdd100802,0xdddddddd,0x00008007,0x77777764,
    0xddddb31d,0xdddb7001,0x7776449d,0xff00ceee,0xcabed809,0x7f4c5fff,
    0x7e440aff,0x53ff261d,0xb05ffffd,0xff701fff,0x1ff8809f,0x01fffec4,
    0xc80cffa8,0xf7003fff,0x6ffc885d,0x7ffb5000,0xfb82ecc0,0xffffffff,
    0x00f4002f,0x0fffe400,0x00effe98,0x2203bf70,0x7401effe,0x81bd103f,
    0xff885ff9,0x5503ea06,0xfb7b99ff,0xdff309ff,0x401ffec0,0x3fff104f,
    0xf3037c00,0x84f800ff,0x0006fe99,0xb307ff75,0x3bfa0bff,0x7ecccccd,
    0x0027cc00,0x202ffd40,0x2005ffe8,0x27fe403f,0x03f20080,0xffa82ff4,
    0x7f409900,0x07ffcc3e,0xfa807ff4,0x007c405f,0x26007ff9,0x037fc02f,
    0x6fc80be0,0x21ffc000,0x985ffaa9,0x002fc00e,0x00003ff6,0xf7009ff3,
    0x0be009ff,0x0005ff70,0x3f605f98,0x2213fa05,0x413fa01f,0xffb83ffc,
    0x701ffe03,0x06ff880d,0xdff00d70,0x3202f800,0x7fc0006f,0x3217f603,
    0x0017d400,0x0007fff1,0xb804ff88,0xf802fffe,0x017fdc01,0xc813f200,
    0x03fee05f,0x04fd80d7,0xff10bff1,0x00ffe40d,0x3ffb007b,0xff007d00,
    0x202f800d,0x740006fb,0x017f203f,0x32003e40,0x40006ffe,0xdb804ff8,
    0x7c01fffa,0x017fdc01,0xc80ff600,0x227fc05f,0x027ec02e,0x3ff60dff,
    0x209ff900,0xff9800f8,0x4007cc05,0x17c006ff,0x8000df70,0x17f203fe,
    0x2002fc00,0x001ffcaf,0x2013fe20,0x01dff75b,0x3fee00fc,0xf82c8802,
    0x017f203f,0x01e61ff7,0x5fe813f6,0x3e07ff50,0x00b707ff,0x9b007ff4,
    0x001bfe00,0x237dc05f,0x00aaaaa8,0x2fe407fd,0x0017d400,0x017fe6f5,
    0x804ff880,0x817ff65b,0x17fdc01f,0xf07ffb50,0x02fe409f,0x0264ffe2,
    0x9fb027ec,0x261bfe20,0x3e82ffcf,0x413fee00,0xdff001f8,0x2e02f800,
    0x5ffe446f,0x407fd009,0x7c8005fc,0xffd1f400,0x3fe20001,0x7f45b804,
    0xb803f04f,0x3eea02ff,0x206fd83f,0xffc805fc,0x4fd801f8,0xfd80ffa0,
    0x7fc6640f,0x20007c45,0x00d707ff,0x3e0037fc,0x361bee02,0x03fe800e,
    0x3e0017f2,0xa83e6005,0xf10003ff,0x88b7009f,0x01f83fff,0x7c017fdc,
    0x02ffc83f,0xff100bfb,0x17f600dd,0x3ea00ff8,0xffe8fc3f,0x320016e0,
    0x002e82ff,0x5f001bfe,0x17637dc0,0x3203fe80,0x17cc005f,0xdff09b00,
    0x13fe2000,0x3fe616e0,0x2e00fc1f,0x3fe802ff,0x5c2fff88,0xff9005ff,
    0x41bf6005,0x6ff803fb,0x22ffb9ea,0xff88002e,0x3e003d46,0x017c006f,
    0x01762df7,0x7e407fd0,0x003e4005,0x5ff903f1,0x09ff1000,0x3fee0b70,
    0xf7007e0f,0x07fd005f,0x3b7bffee,0xf1005fcb,0x1ffec00f,0x7e401ba6,
    0x7fc49b1f,0x20001f15,0x01361ffd,0xf800dff0,0x3a3bee02,0x03fe8004,
    0xbf0017f2,0xf8835c00,0xff88005f,0x3205b804,0x7007e6ff,0x7fd005ff,
    0x97fffdc0,0x136005fc,0xceedfd80,0x3e6004fe,0xffd83f4f,0x260005b8,
    0x003f15ff,0x7c006fe8,0x3fbbee01,0x03fe8005,0xf98017f2,0x333be002,
    0x0fffcccc,0x027fc400,0x3ffa02dc,0xffb803f5,0x403fe802,0x02fe4198,
    0x36000f88,0x0003534f,0x2a1abbfa,0x0002ebff,0x035c7ff4,0x1003ff40,
    0x577dc03f,0x7f4003ff,0x8017f203,0x2baa007c,0xfbaaaaaa,0x7fc4004f,
    0x4405b803,0x401fbffe,0xfe802ffb,0x0bf90003,0xfb0016e0,0x3ee00009,
    0xeff883ef,0x7d40000f,0xc8002fcf,0x0f5000ff,0x5ff96fb8,0x901ff400,
    0x02fc00bf,0xffd007d0,0x01ff8800,0xff9805b8,0x7fdc01ff,0x003fe802,
    0xf100bf90,0x04fd8005,0x1fff3000,0x0017ff60,0x003fffc0,0xb003ffa8,
    0x3a6fb80b,0x7fd000ff,0x9802fe40,0x01f3002f,0x4405ff70,0x2003fe20,
    0xfff5005b,0x02ffb803,0xb0003fe8,0xb13730bf,0x09fd0009,0x037f4000,
    0x00005ff5,0x80013ff2,0x76c00efc,0xf137dc00,0x7fd001df,0xc802fe40,
    0x40136007,0xff106ff8,0x64017e63,0x07ff2006,0xf007ff90,0x3f60009f,
    0x06ffff86,0x000bfd00,0x3e01fdc0,0x3e200007,0x7ec0000f,0x3f6a20af,
    0x4c7fc800,0x4ff805ff,0x7401bf20,0x005f3005,0x7cc1fff4,0x2001f75f,
    0x3f6000fe,0x027fec01,0x10017fe2,0x7417fff5,0x4c001dff,0x000bfffb,
    0x6400f880,0x2ec00005,0x7fe44000,0x01dfffef,0xff90ffb0,0x02ffc409,
    0x5f300ffd,0x800bfa00,0xfd80fffd,0x64401def,0x802dffff,0xffc881e8,
    0x640cefff,0x002dfffe,0x85555555,0x5550000a,0x00005555,0x00022006,
    0x00003100,0x009aaa98,0x9dfffb70,0x13bfffa6,0x25bfffd7,0xcefffec8,
    0xf7005300,0x5403bfff,0x0dfffffe,0x00000544,0x00001100,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x40000000,0xeeeeeed9,0x3000accd,0x001ddddb,0x4fbbbb60,0xeeeeeed9,
    0xddb3002d,0xec87bddd,0x4c0deeee,0xcdeeeeed,0xddb301ab,0xda89bddd,
    0x33deeeee,0xdddddddd,0xeeeed887,0x3bbb6a3e,0xeeeeeeee,0xdddb30ee,
    0xdddddddd,0xeed989dd,0xccceeeee,0xdddb001a,0xdddddddd,0x3663dddd,
    0xceeeeeee,0x40400abc,0xdbbcfff9,0x2a003fff,0x98004fff,0xf980cfff,
    0x30000eff,0x7d409fff,0x7fcc01df,0xdffecbdf,0x09fff300,0x884fff98,
    0x00efffea,0x4c033fea,0xaaaabfff,0x74c1ffcb,0xaaaaabff,0xff306fca,
    0xfd9779df,0xdff809ff,0xceffdccc,0x4c1ffdcc,0xba9acfff,0xbf703ffd,
    0xd881ffb0,0x3fa005ff,0x7ec000ff,0x3ff201ff,0x7ff40002,0x8013f201,
    0x7fd40ffd,0x03ffb01f,0xd801ffd0,0x1fd407ff,0x3007ff40,0x03ff903f,
    0x3ff60798,0x3dffb100,0x3fe60fe0,0xfd82f983,0x1dff300f,0xffc87fd8,
    0x01fff880,0x009ffdb0,0x007ff7c4,0x80003ff9,0x7f500ffd,0x80ffd800,
    0xffb05ffb,0x01ffb001,0x102ffe88,0x3ff6009d,0x7e40e400,0x3206801f,
    0x7fdc00ff,0xff30680f,0x3f20ae07,0x13fea00f,0x1ff90ffb,0x4013ff60,
    0x000ffecd,0xc80ffbb9,0x640001ff,0x03fa80ff,0x880ffc80,0xffc80fff,
    0x00ffd800,0xd80fff98,0x03ff6005,0x3ff90310,0x7fe40500,0x86ffd800,
    0x207ff303,0x00ffc828,0x1bf23ff4,0x7dc03ff2,0xf79b006f,0xb5f1007f,
    0x1ffc80ff,0x07fe4000,0x64000fea,0x5ffd00ff,0xb001ff90,0x3ee001ff,
    0x0007645f,0x20001ffb,0x40001ffc,0xf8800ffc,0xff3002ff,0x0ffc8007,
    0xf50ffec0,0x201ff909,0x9b003ffc,0x5ae01bfe,0x7fe407fd,0x7fe40001,
    0x8000fea0,0xfff00ffc,0x001ff905,0x74001ffb,0x003f52ff,0x0500ffd8,
    0x2a01ffc8,0x007fe400,0x3005ffc8,0xfc8007ff,0x23ffc00f,0x0ffc83f9,
    0x2001ffd0,0x805ff74d,0xc80ffb2f,0x640001ff,0x007f50ff,0xa80ffc80,
    0xffc81fff,0x00ffd800,0x3e7ffe60,0x0ffd8002,0x7fe40588,0xf9007601,
    0x3fea001f,0x3ff9800f,0x007fe400,0x03f09ff5,0xffb01ff9,0xf8a6c009,
    0xfd9ee06f,0x00ffe407,0x2e3ff200,0xfc80003f,0x05ffd80f,0xfb001ff9,
    0xffb8001f,0xffb0004f,0x6405c881,0x1fa881ff,0x8007fe40,0x9801fff8,
    0x7e4003ff,0x1bff700f,0x3ff901d0,0x05dff753,0x3ff24d80,0x3fec7d02,
    0x0007ff20,0x5ff9ff90,0x1ff90000,0x8077fe4c,0xcccccffc,0x0ffecccc,
    0x03ffe800,0xdddffb00,0xfc80bffd,0xffeeeeef,0x07fe401f,0x005fff00,
    0xc8007ff3,0xfedcceff,0x640603ff,0x2fffeeff,0x7c49b000,0x360fa85f,
    0x0ffe407f,0x33ff2000,0x40002fff,0xffeeeffc,0x5ffe403e,0xaaaaaaaa,
    0xb8000ffe,0xd8000fff,0xebaaabff,0x4d7fe405,0x01fca999,0xf0007fe4,
    0xff3003ff,0xbffc8007,0xdffecbaa,0x87fe4001,0xb0006ff9,0x741ffd89,
    0x3203fec4,0x640001ff,0x2fffb8ff,0x43ff2000,0x3ff20008,0x00ffd800,
    0x2ffefcc0,0x407fec00,0x0ffe4058,0xffc803b0,0x1fff1000,0x007ff300,
    0xd300ffc8,0x32001dff,0x0fff20ff,0xff313600,0x3f607ccb,0x00ffe407,
    0x5c3ff200,0x90002fff,0x320001ff,0xffd800ff,0x74fa2000,0x7ec003ff,
    0xfc80900f,0x9006e01f,0x3e6001ff,0x7ff3007f,0x00ffc800,0x4013ffa2,
    0x7ff40ffc,0x6c26c001,0xfb0bb0ff,0x01ffc80f,0x707fe400,0x90005fff,
    0x320001ff,0xffd800ff,0xf9976000,0x3f6000ff,0xff90000f,0x7e400403,
    0xdff7000f,0x00ffe600,0xb801ff90,0xff9007ff,0x00eff881,0x3fea1360,
    0x7fd81f8c,0x000ffe40,0xb81ff903,0x64002fff,0xf90000ff,0x1ffb001f,
    0x3ee1b200,0x3ff6005f,0x3ff90000,0x0ffc8000,0x005ffd00,0x9000ffe6,
    0xff9801ff,0x0ffc800f,0x2005ffa8,0xbbffd04d,0xf901ff60,0x206e003f,
    0xffb80ffc,0x3ff2002f,0x1ff90000,0x001ffb00,0x3ffa01f5,0x01ffb003,
    0x007ff200,0x07fe4154,0x002ffdc0,0xc8007ff3,0x7fcc00ff,0x01ff9007,
    0x6c00fff2,0x05fff504,0xfc803ff6,0xb068801f,0x3fee01ff,0x1ffb003f,
    0x03ff6000,0x3003ff60,0x7ffcc05f,0x00ffd801,0x003ff900,0x03ff20d1,
    0x001fff30,0x2001ffcc,0x7e400ffc,0x1ffb004f,0x00fffa20,0x06ff813a,
    0xfd803ffa,0x826c402f,0x3ee01ffe,0xffe804ff,0x3ffd0000,0x401ffd00,
    0xffc804f9,0x07ff400e,0x01ffc800,0x1ffb05d8,0x0077fdc0,0x0013fea0,
    0x7d401ffd,0xff8801ff,0x3ffe603f,0x40df100b,0xfff102fb,0x37ffa205,
    0xfcaa999a,0x2fff882f,0x3bfffe20,0x05fff101,0x05fff100,0x702fff88,
    0xff7007ff,0x3fe201bf,0xffd0002f,0xfe998819,0x9bfff882,0x3ffdb988,
    0x0bff9000,0x4dfffc40,0x1bffb330,0xffffd980,0xfff704ef,0x3ff661bf,
    0x43441cff,0xdfffffda,0xfffff933,0xffffffff,0xffffd98f,0x7ff543df,
    0xb33effff,0x09dfffff,0xfffffb30,0xfffda89b,0xffd73dff,0xf9101bff,
    0x21bfffff,0xdfffffda,0xffec9804,0xffffffff,0x7fecc7ff,0xceffffff,
    0xec8000ab,0x00cfffff,0xffffffb3,0x05bdffff,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x3bbbbaa0,0xeeeeeeee,0x3bbbbae5,0xddd702de,0x001c0bdd,0x000002c4,
    0x54000000,0x2aa29acc,0x55512aaa,0xaaaa8555,0x35555530,0x551aaa98,
    0xaaaa8355,0x2f72a201,0x02cba801,0x009bccb8,0x40379710,0xaaaaaaa8,
    0x25441aaa,0x77dc0395,0xbaaaaabc,0x7f4c1fff,0xff8805ff,0x0016601e,
    0x000001e6,0x0072e3b3,0x2e6faa00,0x3ffaa3fe,0xbfff511e,0x264fe985,
    0x440bfffd,0xff731dfb,0x04ffc98b,0x7ff95bf3,0x3aefba60,0xaaef984f,
    0x3a200efd,0x80efdaad,0xcccceefb,0xff933ffe,0xc81bffad,0x04ffd804,
    0x2009ffd1,0x02ec00ef,0x00003cc0,0x3623feb8,0x3a0002df,0x7fc43e82,
    0xb01ffa84,0xa81ff609,0x3e0bfd06,0x541f984f,0x21fcc2ff,0x07ec1ffa,
    0x2f4413fa,0x12e0ffdc,0xf332ffc4,0x0df959df,0x3fea006c,0x07ffcc06,
    0xf7007ea0,0x00f3000b,0x177e4400,0x007df910,0x83a82f98,0x07ff06fc,
    0x0ffcc03e,0x0bfb03c8,0x417a13f6,0xf83747fe,0x321fe65f,0x201fb05f,
    0xe80dc6fe,0x3ffc80ff,0xf8809002,0xffc801ff,0x32027404,0x002aaeff,
    0xb30000f3,0xeb8003bf,0xefa800cf,0x7fcc1440,0x5a86fc81,0x3c42ff40,
    0x3f60bfb0,0x4ccdfd44,0xf70ffd99,0xe8872609,0xf986fb84,0x18bfee07,
    0x3203ff90,0x2004006f,0x3a003ffd,0x80d701ff,0x3ccffeca,0x4000f300,
    0x0000cfea,0x100efed4,0x3a007fff,0x42ffe84f,0x07fdc02d,0x05fd812e,
    0xcdfc89fb,0x1ccccccc,0x880007f9,0x6fb86feb,0x5013fe20,0x37e407ff,
    0xbff70000,0x86ff9800,0xbf9001f8,0x800f3000,0x0003efb8,0x02efc980,
    0x807ffff9,0x7eed47fb,0x7fc01e25,0xbfb00f43,0x3fb13f60,0x001ff400,
    0x6fcbec88,0x7fc05fd8,0x017fe205,0x20000df9,0x8000fff9,0x026c4ffc,
    0x3260bf90,0xcfdccccc,0x10cccccc,0x00005bf9,0x07ff7100,0x01bfffd5,
    0xa9e8bfe2,0x200970ff,0xb01667fc,0xd13f60bf,0x2ffc005f,0xf71fe400,
    0xf80dff0d,0x03ffa05f,0x0000df90,0x4000bffa,0x1f51ffe8,0x982fe400,
    0xfdcccccc,0x0ccccccc,0x00019fd3,0x3bf22000,0x0dfff700,0x3e69afec,
    0x22003d3f,0xd805b2ff,0xd89fb05f,0x1ffa004f,0xfb83fb00,0x7407fe86,
    0x03ff903f,0x0000df90,0x8000bff9,0x02f8effa,0x4002fe40,0x7ecc0079,
    0x3000001d,0x409839fb,0xf301ffd8,0x77e45b1f,0x77ec0069,0x05fd8078,
    0x0ffc89fb,0x0ffe42e0,0x217f2190,0x1ffc86fb,0x3ea07fe0,0x0df9003f,
    0x0eff9800,0xeffc8000,0x05fc8005,0x10007980,0x00005df9,0x5c02ffaa,
    0x203ff883,0x7fcc6cfe,0x7fd4003e,0x05fc804d,0xdffa89fd,0x3fea5880,
    0x27f4b305,0x7fcc37dc,0x881ff104,0xc87105ff,0x3a20006f,0x100001ff,
    0x90001fff,0x0f3000bf,0xbfeb8800,0x77e44000,0xd80fb802,0x0ffee01f,
    0x20003ffa,0xfb800ffe,0x42ffec0f,0xb88aeffd,0x86fff41e,0x1ff61fb8,
    0xd826ffd3,0x82fb80ff,0x87300efe,0x320007fc,0x400004ff,0xf90007fd,
    0x00f3000b,0x0e7ed400,0x0077f660,0x3e20cfb8,0xa83fc405,0xbf70005f,
    0x2fbfe200,0x3cffdaeb,0x3fffffe6,0xffff985f,0x7fd43fff,0xcffbddbe,
    0x5077f444,0x03ff907f,0x1ffb0ba6,0x0dff5000,0x0ffb0000,0x0017f200,
    0x200001e6,0x7542dfc9,0xeb8000cf,0x00becdff,0x007e03d8,0x50017c40,
    0x3f63dfff,0xfffd882d,0x3ffa204f,0xfff902ff,0xc817fe27,0x983dedff,
    0xffffffff,0xffb52fff,0x220019ff,0x01001fff,0x8003fec0,0x798006fc,
    0x2e200000,0x0007d71f,0x0006a208,0x0000c013,0x20d4000a,0x09a8800a,
    0x20035100,0x53000881,0x00000001,0x00fff600,0xffb000d4,0x19fee000,
    0x0000f300,0x00000800,0x00000000,0x00000000,0x00000000,0x00000000,
    0x7dc00000,0x003a005f,0x50007fd8,0x00079bff,0x00000000,0x55553000,
    0x0aaaa235,0x597125c4,0x65c49500,0x05e5c40a,0x0000c880,0x2e020200,
    0x3bbbaa2d,0xeeeeeeee,0x06661eee,0x400e7644,0x07ffcc03,0x74006b80,
    0xf90000ff,0x0000009f,0x00000000,0x47bffee2,0x64c2efd8,0xffff76ff,
    0x2dff9309,0x2a6ffffb,0x9006ffff,0x04c8007f,0x9bea3fd8,0x5512fff9,
    0x55555555,0x64155555,0x66fd40ff,0x4880befe,0x4ce7ff40,0xeb999999,
    0x3fe2005f,0x0020002f,0x00000000,0x7d400000,0x4c07e46f,0x99cbeff9,
    0x74cc1ffd,0xfc89cbef,0xfc89dbbf,0x1fdc104f,0x803ff100,0x43ff65ff,
    0x0005fff8,0x0d87fb00,0x456ffe4c,0x3fee02da,0xffffffff,0x803fffff,
    0xdfffffda,0x00000003,0x00000000,0x97fdc000,0x7fe401f9,0xf903ff82,
    0x07ffb05f,0x29fb0df9,0x409f91f9,0x7fc05ccd,0x5511ff65,0x2200000b,
    0xb501225e,0x00005dff,0x00000000,0x00000000,0x00000000,0x0ba3ffa0,
    0x7f41bf20,0x320df704,0x70ff707f,0xfb1f19ff,0x2e9aa07f,0x7fb8ffa0,
    0x44444590,0x88888888,0x00f10088,0x00000040,0x00000000,0x00000000,
    0x00000000,0x4013ffe2,0x0bfb06fc,0x3fd41bee,0xd9307fa8,0x4059dbdb,
    0x6403ea2e,0x741bea2f,0xffffff50,0xffffffff,0x0006603f,0x00000000,
    0x00000000,0x00000000,0xb8000000,0xdf9002ff,0x7dc17f20,0x2a0ff506,
    0x6fecc07f,0x26c2e400,0x13e21fb8,0x88888193,0x88888888,0x00000088,
    0x00000000,0x00000000,0x00000000,0x22000000,0xfc800fff,0x2e0bf906,
    0x20ff506f,0xffc887fa,0x40befbea,0x80f981f9,0x0a63f879,0x00000000,
    0x00000000,0x00000000,0x00000000,0x80000000,0xc805ffbe,0x20bf906f,
    0x0ff506fb,0x3ff61fea,0x4ffa8f8a,0x10b9026c,0x00003b0d,0x00000000,
    0x00000000,0x00000000,0x00000000,0x53200000,0x7e402ffa,0x2e0bf906,
    0x20ff506f,0x51da87fa,0xfa8b6a3f,0x060be200,0x00000006,0x00000000,
    0x00000000,0x00000000,0x00000000,0x3f635400,0x41bf200f,0x0df705fc,
    0x3fd41fea,0xe881fe40,0x0006a802,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xdff103e6,0xfd837e40,0x2e0ff905,0x01ff507f,
    0x03103fc8,0x000000c0,0x00000000,0x00000000,0x00000000,0x00000000,
    0xe8800000,0x209ff904,0x0dfd07fe,0x3f203ff6,0x01ffb80f,0x00000018,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x227ffd40,
    0x52effffb,0x2e9dfffd,0xb53dfffd,0x36a9dfff,0xda8cefff,0x0004ffff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_33_usascii_x[95]={ 0,3,1,0,1,1,1,1,1,0,2,0,1,1,
2,0,1,3,0,1,0,1,1,1,1,1,2,2,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,
0,0,-1,1,0,1,0,1,0,0,0,0,0,0,0,2,0,1,0,-1,1,1,-1,1,0,1,1,0,0,0,
-3,0,0,0,0,1,-1,0,0,1,0,0,0,0,0,0,0,4,2,2,0, };
static signed short stb__times_33_usascii_y[95]={ 26,5,5,5,4,5,5,5,5,5,5,8,23,18,
23,5,5,5,5,5,5,6,5,6,5,5,12,12,8,13,8,5,5,5,6,5,6,6,6,5,6,6,6,6,
6,6,6,5,6,5,6,5,6,6,6,6,6,6,6,5,5,5,5,31,5,12,5,12,5,12,5,12,5,5,
5,5,5,12,12,12,12,12,12,12,8,12,12,12,12,12,12,5,5,5,16, };
static unsigned short stb__times_33_usascii_w[95]={ 0,4,10,15,13,23,22,4,9,9,11,17,5,8,
4,9,13,9,14,12,14,12,13,13,13,13,4,5,17,17,17,12,26,22,19,18,21,18,16,21,21,10,12,22,
18,26,23,20,16,20,21,14,18,22,22,28,22,22,18,7,9,7,14,17,6,13,15,12,15,12,12,15,15,8,
9,16,8,24,15,13,15,15,11,10,9,15,15,22,15,15,13,9,2,9,17, };
static unsigned short stb__times_33_usascii_h[95]={ 0,22,10,22,25,22,22,10,28,28,13,16,8,3,
4,22,22,21,21,22,21,21,22,21,22,22,15,19,16,7,16,22,28,21,20,22,20,20,20,22,20,20,21,20,
20,20,21,22,20,27,20,22,20,21,21,21,20,20,20,27,22,27,12,2,6,15,22,15,22,15,21,21,21,21,
28,21,21,14,14,15,21,21,14,15,19,15,15,15,14,21,14,28,28,28,5, };
static unsigned short stb__times_33_usascii_s[95]={ 251,153,191,188,118,204,228,251,34,1,164,
53,202,132,251,121,147,159,190,15,205,220,158,169,1,97,251,249,71,208,89,
65,54,183,231,78,190,171,154,43,109,243,206,69,50,23,219,132,92,89,1,
28,212,110,87,58,131,20,1,110,111,81,176,141,226,199,172,186,131,173,161,
174,233,1,44,133,150,139,123,213,42,10,241,107,43,157,141,118,107,26,227,
24,21,11,233, };
static unsigned short stb__times_33_usascii_t[95]={ 22,1,112,1,1,1,1,75,1,1,112,
96,112,24,17,30,30,53,30,30,30,30,1,53,30,30,1,30,96,112,96,
30,1,53,75,30,75,75,75,30,75,53,53,75,75,75,53,1,75,1,75,
30,75,53,53,53,75,96,96,1,30,1,112,24,112,96,1,96,30,96,30,
30,30,53,1,53,53,112,112,96,53,53,96,96,96,96,96,96,112,53,96,
1,1,1,112, };
static unsigned short stb__times_33_usascii_a[95]={ 119,159,195,238,238,397,371,86,
159,159,238,269,119,159,119,132,238,238,238,238,238,238,238,238,
238,238,132,132,269,269,269,212,439,344,318,318,344,291,265,344,
344,159,186,344,291,424,344,344,265,344,318,265,291,344,344,450,
344,344,291,159,132,159,224,238,159,212,238,212,238,212,159,238,
238,132,132,238,132,371,238,238,238,238,159,186,132,238,238,344,
238,238,212,229,95,229,258, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_33_usascii_BITMAP_HEIGHT or STB_FONT_times_33_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_33_usascii(stb_fontchar font[STB_FONT_times_33_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_33_usascii_BITMAP_HEIGHT][STB_FONT_times_33_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_33_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_33_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_33_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_33_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_33_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_33_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_33_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_33_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_33_usascii_s[i] + stb__times_33_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_33_usascii_t[i] + stb__times_33_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_33_usascii_x[i];
            font[i].y0 = stb__times_33_usascii_y[i];
            font[i].x1 = stb__times_33_usascii_x[i] + stb__times_33_usascii_w[i];
            font[i].y1 = stb__times_33_usascii_y[i] + stb__times_33_usascii_h[i];
            font[i].advance_int = (stb__times_33_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_33_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_33_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_33_usascii_s[i] + stb__times_33_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_33_usascii_t[i] + stb__times_33_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_33_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_33_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_33_usascii_x[i] + stb__times_33_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_33_usascii_y[i] + stb__times_33_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_33_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_33_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_33_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_33_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_33_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_33_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_33_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_33_usascii_LINE_SPACING
#endif

