// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_13_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_13_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_13_usascii_BITMAP_WIDTH         128
#define STB_FONT_consolas_13_usascii_BITMAP_HEIGHT         64
#define STB_FONT_consolas_13_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_consolas_13_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_13_usascii_NUM_CHARS             95

#define STB_FONT_consolas_13_usascii_LINE_SPACING           9

static unsigned int stb__consolas_13_usascii_pixels[]={
    0x06660045,0x99880822,0x80010000,0x00c401a8,0x03b34400,0x15528098,
    0x0cc55510,0x4ea87c66,0x7e47cc88,0xcde81d13,0x882775c1,0x2e2f881e,
    0x97105ece,0x5a8f74c1,0x405a8ee0,0x6dcdf81e,0x987e67d4,0x740f9747,
    0x07c4f100,0x9703d16a,0x9026c1dc,0x42e83e23,0x2764eefb,0x3a00e8ca,
    0x754c0740,0x1e8be2ac,0x5d07c3f1,0x16c0f9e2,0x6c1a2788,0x88d107a3,
    0x55543546,0x24b8b70a,0x5641c8f8,0x16a02cbb,0x37f2a0ee,0x96c1f0cc,
    0x2b707c69,0x05b03e4b,0xb50699e2,0x362ee0f4,0x5c1ec69d,0xa8992fcc,
    0x1036be25,0x1d80b599,0x207a0688,0x234cba0f,0x87a3e20f,0x4406dc0f,
    0x9e209717,0x6cecec1e,0x3600fc69,0x545b8992,0x803a02ff,0x740b6069,
    0x21f50f81,0xc81fb0f8,0x36207c6d,0x0edbc40e,0x3a0f43e0,0x0f8d1d68,
    0x645b96c0,0x790ddf04,0x40590397,0xff03d059,0x8dfb83dd,0x3e1fcc0f,
    0x27881dc0,0x3a1f105a,0x8d7b4f41,0xf896c01e,0x2b101f31,0x2b2b661e,
    0x0f403c45,0x0007c264,0x0f87a81f,0x2278816c,0x20f4f306,0x43bebe8e,
    0xd516c03c,0xc98885df,0x2ee3a0fa,0x54025c68,0xf0eed984,0xb987c001,
    0x16c0f81f,0x641a2788,0x553b07a4,0xd80b7073,0xfe981f82,0x744ee2df,
    0xf800742e,0x40019000,0x07c072a4,0xf13c4076,0x20f41f30,0x405d003b,
    0x86dfb81f,0x0510002c,0x000004c0,0xb887c000,0x6c79980f,0xae85d11c,
    0x3539d109,0x4dc43a20,0x2026206c,0x00000009,0x00000000,0x880ba87c,
    0x895444cc,0x221ccb82,0x42600bcb,0x0000bcb8,0x00000000,0x20000000,
    0x00000004,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x442a0351,0x9998801f,0x00d554c0,0x2005b910,
    0x3e0d440f,0x88155100,0x13100999,0x54c03530,0x2e022041,0x9fd45ece,
    0x707e21f8,0x56e49d99,0x4feb82ed,0x2007e736,0x93b3aa0f,0x5f99900f,
    0x641e66ec,0x6e7643de,0x97677446,0x3e21e469,0x7c150ba0,0x4c803220,
    0x7c43cc3e,0x203d1e80,0x43e0faa8,0x1551f0f8,0x202d96e0,0x0f83e04b,
    0x3234c0fa,0x012e2dc3,0x802aa61f,0x42dcba4c,0x0b9b905a,0x4c3f33ea,
    0x66fcfee6,0x16c9706d,0xaa6c01f0,0x46981e66,0x16a2643c,0x07f2a1f0,
    0x37b764c8,0x2abb2a60,0x10cd7ee1,0x8da87c3f,0x745f3cdd,0xfd83bb61,
    0x3bbe21df,0x07ff444f,0x3234c0d5,0x996e2643,0x03d03e2f,0x809f8a64,
    0x31aaeca9,0x4c5b5f3d,0x3eea87c7,0x22d83e79,0x7b886c99,0x2e2e83e2,
    0x81e65eae,0x16e1e469,0x0927c479,0xdb1e403d,0x84b81dfd,0x4c3ff53c,
    0x21f987c7,0x816c1f2d,0xf10f880f,0x741f13d8,0x234c07e2,0xf98fc42d,
    0xe8171740,0xd32e88c1,0x5c25c3d8,0x7c41fb15,0x99741fb1,0x407cc3e7,
    0x2e8d707a,0x443e23d1,0x8447721f,0x301f31f8,0x27545dfd,0x6c1e83f1,
    0x26fe64ff,0xd825c1ea,0x7dc5dcff,0x3ba60eae,0x87bbf61e,0x3ba1dfee,
    0x7774c0df,0x21ff7dc2,0x2a1efeb8,0x08002fef,0x1ffffe80,0x81ccc980,
    0x0000004b,0x00401000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x06a605bf,0x00f82aa2,0x99983011,0x2203d099,0x11099999,
    0x81331088,0x13330808,0x20c18088,0x22130608,0x2fa82a00,0xc8bb3ba6,
    0x403e4cce,0xdd12e45b,0x407a3fdd,0x12ccfcc9,0x6f47e21f,0xd10b23fd,
    0x3d93f73e,0x649f3354,0x4fe65f52,0xb87f504b,0x07c40ba5,0x7c42a8f8,
    0x2dc01f12,0x07c0543d,0x47a4cadc,0x2b30f27a,0x1aa3f10f,0xc87f4c79,
    0x4f72bb52,0x9702a04b,0x205f01aa,0xb545dcef,0xe83e604c,0x403e09b1,
    0x4c7a0fce,0xf5994ee6,0x20f89741,0x64f3a60f,0x97d1d752,0x6f54012e,
    0x87326970,0x897c2ee9,0x200fbe87,0x026cf42e,0xd0bea01f,0x45dc5d9b,
    0x2a1f4a9f,0x234cf60f,0x2e5978e9,0x974abdcb,0x29712a00,0x5ea82ea8,
    0x7cc0f83e,0x37a16e03,0xfc807c06,0x2a2e5f45,0xff3acdbc,0x796a83bf,
    0x2597b698,0x74a8f9bb,0x14c76209,0x7c05b1aa,0x7c07c1f1,0x5d01f300,
    0x4c07c07d,0x6c7a2e8f,0x2fe372a3,0x47c401f3,0xce9b4c0f,0xbad46792,
    0x0a65f304,0x9822d8fa,0x407c1f0f,0x3a05d00f,0x01f02f89,0x8f43ea7d,
    0x76d7a669,0x6dd801f2,0x64bf6698,0x004bad42,0xfffb10d9,0x8bbffe63,
    0x03e03e0f,0x4fffffe6,0x1f03f31e,0x1ea6c6b8,0xfa9fc4ba,0x3fa801f2,
    0x64bea698,0xfffbacc2,0x4020001f,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x84c18000,0x33119998,
    0x30440833,0x3f613333,0x0cccc41f,0x99800333,0x00004c01,0x01530131,
    0x410402a2,0x9ae1f142,0xf974ccdd,0x4f234c99,0x42feeee9,0xa666ec1e,
    0x202fdcf9,0x07f99f3b,0x009509f7,0xfced85fb,0x41f67642,0xf83e498e,
    0x6c1d31f0,0x8d303e03,0x3d0f103c,0x266982d8,0x1f0dc80f,0x41ef61e2,
    0x5bb500dc,0x2789aa08,0x73f310f8,0xf0f83e19,0x203d83d3,0x0f234c0f,
    0x360f41e4,0x11ec6982,0x8d30f89b,0x3ae03d78,0x016c7440,0x47a354d3,
    0xf3decfc9,0x83ef87c1,0x07c3ccdd,0x0ffbbbe6,0xb07a03e2,0x71a6bddd,
    0x777c2749,0x04cadc1f,0x0b6791ee,0x22be23d8,0x165622fa,0x6cf87c1f,
    0x7c2aadd8,0x6cccf4c0,0x83d03c83,0x8d3099bd,0x3f0fa24d,0x996c1f73,
    0x34c3d507,0x2617205b,0xb511eced,0x5cb615b3,0xd89b1f0f,0x8d303e03,
    0xe807c43c,0x234c16c1,0x83e5d82f,0xfdddf12e,0x76c0ec83,0x2dc4efee,
    0x9db73c40,0x2fbaa59f,0xd8fa1f0e,0x8d303e03,0x3d02643c,0xb36982d8,
    0x30f9e40d,0x26676e1f,0x4c416a4c,0x16e0bd99,0x2770fa60,0x7cc3e006,
    0xfffd07b1,0x88f234cf,0xffffe80f,0x26ffffb1,0xf000ceff,0x216c5bff,
    0x85b00069,0x3a2fffff,0x0f2c82de,0x00000000,0x00000000,0x00000000,
    0x00000000,0x2a980cc0,0x55105530,0x50355305,0x8aaaaa35,0x54a0a889,
    0x14454442,0x260cc0b8,0x131a8511,0x10680288,0xfe981111,0x45dbec83,
    0x65c5daea,0x2efae5eb,0x5d6f7a22,0x37366dbb,0xbb9bf0fc,0x16ef66d4,
    0x5d1e607c,0x590e99ec,0x647e6598,0x3ba259d9,0x36b61eee,0xf8ba3c43,
    0xb3c407a0,0xe880f607,0x5f2d9761,0x53d5a9e2,0x25d01f07,0x0f4fc479,
    0xf1255677,0x00067dc7,0x322d43d8,0x5d999f33,0x987f6dc4,0xd00fc3ee,
    0x41f02d85,0x9d5a750f,0x24fffffa,0x7f50995b,0x3baf9ca8,0x4cdcb8f4,
    0x07bbbba2,0x3c8d50f6,0x413333f1,0xd981f0bd,0x42640b66,0x87c1f02d,
    0x3e0ead3a,0x80e8f880,0x5decc5ec,0x847d52bd,0x08888815,0x11f887b0,
    0xf881f41f,0x4f301f50,0x41aa10db,0x87c1f02d,0x3e0ead3a,0xd50dbb00,
    0xbd6e88f6,0x80005003,0x2fefa83d,0x32377f4c,0xddd0fbee,0xb775c45f,
    0x5b0ffffe,0x750f83e0,0x80641d5a,0x88fc42fa,0x07dd3e2f,0x1ec00000,
    0x08000000,0x00000000,0x00000000,0xe8000000,0x0002ffff,0x00000000,
    0x00000000,0x00000000,0x20600000,0x47e27d7a,0x447722f9,0xff987aa1,
    0x5555553f,0x00000005,0x00000000,0x3ea80000,0x47e2dbcc,0x5d5b52fa,
    0x44438899,0x33333320,0x0000000c,0x00000000,0x23a00000,0xf16da60e,
    0x66c46601,0x00000000,0x00000000,0x00000000,0x00254ee0,0x00000000,
    0x00000000,0x00000000,0x06448000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_13_usascii_x[95]={ 0,2,1,0,0,0,0,2,1,1,1,0,1,1,
2,0,0,0,0,1,0,1,0,0,0,0,2,1,0,0,1,1,0,0,1,0,0,1,1,0,0,1,1,0,
1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,2,1,1,0,0,0,0,1,1,0,0,0,0,1,1,
0,1,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,1,3,1,0, };
static signed short stb__consolas_13_usascii_y[95]={ 9,0,0,0,-1,-1,0,0,-1,-1,0,2,6,5,
7,0,0,0,0,0,0,0,0,0,0,0,2,2,1,3,1,0,-1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,10,0,2,0,2,0,2,-1,2,0,-1,
-1,0,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,-1,-2,-1,4, };
static unsigned short stb__consolas_13_usascii_w[95]={ 0,3,5,7,7,8,8,3,5,5,6,7,4,5,
3,7,7,7,7,6,7,6,7,7,7,7,3,4,6,7,6,5,8,8,6,7,7,5,5,7,7,6,5,7,
6,7,7,7,6,8,6,7,7,7,8,7,7,8,7,4,6,4,7,8,5,7,6,5,7,7,7,7,6,6,
6,6,6,7,6,7,6,7,6,6,7,6,7,7,7,7,6,5,2,6,7, };
static unsigned short stb__consolas_13_usascii_h[95]={ 0,10,4,9,12,11,10,4,13,13,6,7,6,2,
3,11,10,9,9,10,9,10,10,9,10,9,8,10,9,5,9,10,13,9,9,10,9,9,9,10,9,9,10,9,
9,9,9,10,9,12,9,10,9,10,9,9,9,9,9,13,11,13,5,2,3,8,10,8,10,8,10,10,9,10,
13,9,9,7,7,8,10,10,7,8,10,8,7,7,7,10,7,13,14,13,3, };
static unsigned short stb__consolas_13_usascii_s[95]={ 127,14,17,113,64,72,47,23,42,22,112,
75,107,45,27,81,64,1,97,79,89,86,93,30,101,105,124,9,59,119,82,
1,33,73,66,109,51,45,9,7,22,15,25,1,117,109,101,1,85,55,70,
15,54,117,92,77,62,30,39,28,89,11,9,51,39,25,72,40,56,17,39,
31,23,18,48,47,38,67,60,9,104,111,53,33,96,121,83,99,91,119,46,
16,1,4,31, };
static unsigned short stb__consolas_13_usascii_t[95]={ 1,16,57,38,1,1,16,57,1,1,48,
48,48,57,57,1,16,48,38,16,38,16,16,38,16,38,27,16,38,48,38,
27,1,38,38,16,38,38,38,27,38,38,16,38,27,27,27,16,27,1,27,
27,27,16,27,27,27,27,27,1,1,1,57,57,57,48,16,48,16,48,16,
16,27,16,1,27,38,48,48,48,1,1,48,48,1,38,48,48,48,1,48,
1,1,1,57, };
static unsigned short stb__consolas_13_usascii_a[95]={ 114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_13_usascii_BITMAP_HEIGHT or STB_FONT_consolas_13_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_13_usascii(stb_fontchar font[STB_FONT_consolas_13_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_13_usascii_BITMAP_HEIGHT][STB_FONT_consolas_13_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_13_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_13_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_13_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_13_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_13_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_13_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_13_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_13_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_13_usascii_s[i] + stb__consolas_13_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_13_usascii_t[i] + stb__consolas_13_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_13_usascii_x[i];
            font[i].y0 = stb__consolas_13_usascii_y[i];
            font[i].x1 = stb__consolas_13_usascii_x[i] + stb__consolas_13_usascii_w[i];
            font[i].y1 = stb__consolas_13_usascii_y[i] + stb__consolas_13_usascii_h[i];
            font[i].advance_int = (stb__consolas_13_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_13_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_13_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_13_usascii_s[i] + stb__consolas_13_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_13_usascii_t[i] + stb__consolas_13_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_13_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_13_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_13_usascii_x[i] + stb__consolas_13_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_13_usascii_y[i] + stb__consolas_13_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_13_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_13_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_13_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_13_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_13_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_13_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_13_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_13_usascii_LINE_SPACING
#endif

