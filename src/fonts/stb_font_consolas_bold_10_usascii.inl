// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_bold_10_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_bold_10_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_bold_10_usascii_BITMAP_WIDTH         128
#define STB_FONT_consolas_bold_10_usascii_BITMAP_HEIGHT         46
#define STB_FONT_consolas_bold_10_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_consolas_bold_10_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_bold_10_usascii_NUM_CHARS             95

#define STB_FONT_consolas_bold_10_usascii_LINE_SPACING           7

static unsigned int stb__consolas_bold_10_usascii_pixels[]={
    0x07602000,0x00cc4041,0x03102621,0x00151254,0x005102c4,0x801f8a6c,
    0x850cc0a8,0x3ba65b2d,0x8792f883,0x2ec3a21d,0x4bee1bee,0x036e26ec,
    0x4fdf8974,0x5d07ff6c,0xfdd51aa0,0x646abcc7,0x9fbf16ff,0x97478a64,
    0x01d0e8ae,0x1d87e215,0x25c5b136,0xf9b4c0f8,0x326983ee,0x4bb4cf34,
    0x7ffec2d4,0xe8f33f55,0xb55aa3da,0x8a64f34c,0xbb8a9747,0xfff32dcb,
    0x263b2d43,0x412e3c86,0xcebb4c0f,0xf1ec7b01,0x20bafe23,0xb546a80f,
    0x83fae0f8,0xf8f6d54c,0x5d1e2991,0x82cfdcd8,0x71d9e21e,0x12e3b50b,
    0x745a61ea,0xb07c40df,0x0ad98fc9,0xa8d50970,0x44f88f56,0xf932d95b,
    0x3b1e2991,0x82cface8,0x91d87c1e,0x12e7d309,0xe8d309d1,0x3ae25c6d,
    0x3ffe27a8,0x3540f884,0xf307fbea,0x56dfe881,0x9adcf51d,0x333e04c7,
    0x261e81df,0x642d4767,0x4c3c12e3,0xf8f7d116,0x2e1ffc81,0x87b01f15,
    0x20d55ee8,0x8b5402fd,0x3fa22ffc,0x2ba1742f,0x5c3d03bd,0x207c4765,
    0x07c12e3c,0x0f7fdda6,0x84e6c0b5,0xd303eee9,0x8000d500,0x9000006a,
    0x98fc4207,0x45c8761f,0x0ec12e2d,0x800399a6,0x00001dd9,0x00000000,
    0x1ddb1000,0x85927fd4,0x45e86c1d,0xb3d987fb,0x000044df,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x92eb8fae,0x550d5441,0x26093035,
    0x320d4405,0xa82a884e,0x2a15442a,0x215540aa,0x20a802aa,0x7d00000a,
    0xd9d9f544,0x4b33e64a,0x6a83eef8,0xd90354fa,0x0fc74c59,0x6449d9f1,
    0xbb7f13fc,0x9db17e64,0x5173ba2b,0x3cd6e9fd,0xdd90bff2,0x29901305,
    0x07d46bea,0x37fe41e2,0x8ffbaa39,0xeaf980f9,0x407d52e0,0x0b71d33c,
    0xd703ea5b,0x3f04be20,0x27bb547b,0x7fc4d569,0x3b07fa23,0xf10cfe88,
    0x355aa3bf,0x2e799fa8,0x3fa23fff,0x3fb2f628,0xfd83fae1,0x0b72d80f,
    0x3cc9917b,0x8a647eb8,0x0bddf70f,0x6543447b,0x446ea85d,0xd9aa996c,
    0x5c3e2d52,0x66e64f56,0x107d3f27,0x36be2d93,0xb0d72d85,0x11f89ea9,
    0x5475c3f8,0x87b01aa7,0x8e6d7442,0x5d721ae0,0x6aaf4d95,0x279bc4f5,
    0x5ae5f8bd,0x5aed706a,0xf9974279,0x1e23ae12,0x41e89ff7,0x7e42ffd8,
    0x3ea3d84e,0xb8774720,0xdff32fff,0x45b7fa23,0x83fdf33d,0x3bea2ffc,
    0x87ff61fd,0xdd11effa,0x717fe27f,0x37fe4dff,0x20003d00,0x03fffcc0,
    0x32000000,0x00000002,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x80000000,0x04c15059,0x51003fee,0x2aaa8835,0x22531453,
    0x44a20542,0x51144662,0x22866555,0x77442a0a,0xa98d5542,0x15554c0a,
    0x834cbfba,0x01f0761d,0x33e65dd9,0x5bb7664e,0x47dcf2fb,0x5aa07c7c,
    0x12e5ea4d,0x452e7bf9,0x6c1f9367,0xeb9e6fc3,0x37f2a3fc,0x6da6b704,
    0x47626764,0x3e219fa8,0x8879b4c1,0xb9ebd72f,0x207c6ebe,0xfcd86aea,
    0x452e2e81,0x6c3cdaa7,0x4d2e07c3,0xeed82e87,0x9d8b7d35,0x9fb50dae,
    0xd31efc89,0x5c9b0d71,0x3ef279ec,0x3aa07c6b,0xd05f981f,0x13f77dc5,
    0x87b0991f,0x7c973eef,0x5daa1740,0xbc85ff35,0x01e20dde,0x077fe6bb,
    0x65ddc1d5,0x83a7a727,0x426f540f,0x5c5d06fb,0x7574799d,0x4cfc3d82,
    0xd03e6970,0x35def885,0x57641f5d,0x261e20ee,0x20d32fef,0x17708af8,
    0x0e84e4ff,0x3f1d503e,0x741f4fc4,0x323c52e2,0x0f87b07e,0x742e465c,
    0x9b2d3002,0x0788f97c,0x3ee0d302,0x9f2777ff,0xfff8761d,0x5c9aed56,
    0x3ffe61f5,0xf31e2975,0x26fff98b,0xbff75fff,0x00005d01,0x00000000,
    0x00000000,0x00000000,0x2aa20000,0x85983501,0x50081aa8,0xb8810355,
    0x5415c402,0x98aaaa61,0x00a88188,0x55660000,0x4fff8805,0xfa87d9d5,
    0x67d434c6,0x6fc2ec3f,0xe88fd43c,0x7ccfa3fc,0x49fd13ec,0x2ae6eeea,
    0x261fe83b,0xfbd12fed,0x56983b09,0x11b7b72b,0x2d56a3f3,0xee983f32,
    0x216ed52f,0x2e03e0ec,0x8e49901e,0x32a2d54c,0x3fee7b04,0x87b6a1ff,
    0x5f15c9f9,0x057444f1,0x6ded6ad3,0xa8fa20ea,0x74f42fdf,0x55727e62,
    0x49d02ecf,0x07f12ccf,0xcbea8174,0x07cc2647,0x4744593b,0x8b55a61e,
    0x1ddfd707,0xd9dae5a6,0xa83760d9,0x27e67c9e,0xab55a65d,0x27440ebe,
    0x3e986afe,0x950dc4d8,0x4d84c8d9,0xdc93b3aa,0x2ad30bea,0x41d80f16,
    0xb3b5dfe8,0x3ffe61b3,0xeb9aab55,0xb55a67dd,0x82d87b6a,0x6c3d100f,
    0xb10fe08d,0xf3066447,0x91757cc1,0x5a61dfbb,0x1c80f16a,0x1b3b3b00,
    0x22dffa80,0xab4c7e2d,0x401ead56,0xfff5000f,0x993be60f,0x21367fff,
    0x000f40f6,0x00000000,0x00000000,0x00000000,0x00000000,0x20000000,
    0x90f43a4c,0x11aa3aa5,0x04444119,0x6c47602a,0x1d9d96c3,0x4c42a7b3,
    0x0fffffe1,0x00000000,0xd5798000,0xb0ec5d6c,0x6f7443fb,0x4cbddd33,
    0x1144e85e,0x6476767f,0xdd90fddb,0x00000003,0x40000000,0x3ef23dae,
    0x117e20ec,0x4ccc3df9,0xd8876360,0x02a2a002,0x0000006a,0x00000000,
    0xb83f6e00,0x7eec7ece,0xe994e541,0x922734ee,0x0000002c,0x00000000,
    0x10000000,0x6d9fa8bf,0x26075daa,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_bold_10_usascii_x[95]={ 0,1,1,0,0,0,0,2,1,1,0,0,1,1,
1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0, };
static signed short stb__consolas_bold_10_usascii_y[95]={ 7,0,0,0,-1,0,0,0,-1,-1,0,1,5,3,
5,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,1,0,-1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,8,0,1,0,1,0,1,0,1,0,-1,
-1,0,0,1,1,1,1,1,1,1,0,2,2,2,2,2,2,-1,-1,-1,3, };
static unsigned short stb__consolas_bold_10_usascii_w[95]={ 0,3,4,6,6,6,6,2,4,4,5,6,3,4,
3,5,6,5,5,5,6,5,6,5,5,5,3,3,5,5,5,4,6,6,6,5,6,5,5,6,6,5,5,6,
5,6,6,6,6,6,6,5,6,6,6,6,6,6,5,4,6,3,6,6,4,5,6,5,5,5,6,6,5,5,
5,6,5,6,5,6,6,5,6,5,5,5,6,6,6,6,5,5,2,4,6, };
static unsigned short stb__consolas_bold_10_usascii_h[95]={ 0,8,3,7,10,8,8,3,11,11,5,6,4,2,
3,9,8,7,7,8,7,8,8,7,8,7,7,8,7,4,7,8,11,7,7,8,7,7,7,8,7,7,8,7,
7,7,7,8,7,9,7,8,7,8,7,7,7,7,7,10,9,10,4,2,3,7,8,7,8,7,7,9,7,8,
11,7,7,6,6,7,8,8,6,7,8,6,5,5,5,8,5,10,11,10,3, };
static unsigned short stb__consolas_bold_10_usascii_s[95]={ 125,121,54,74,47,12,55,125,22,14,22,
101,41,66,50,54,62,62,46,69,81,25,48,68,75,56,52,37,40,28,28,
7,1,8,1,87,113,107,34,93,87,81,81,67,61,54,47,107,34,60,21,
19,120,114,94,14,74,106,41,32,74,43,34,71,45,1,41,100,31,120,21,
67,15,1,8,7,101,114,88,113,87,101,94,28,81,108,1,8,15,94,121,
37,19,27,59, };
static unsigned short stb__consolas_bold_10_usascii_t[95]={ 5,1,38,30,1,13,13,1,1,1,38,
30,38,38,38,1,13,30,30,13,30,13,13,30,13,30,30,13,30,38,30,
13,1,30,30,13,22,22,30,13,22,22,13,22,22,22,22,1,22,1,30,
13,22,1,22,22,22,13,22,1,1,1,38,38,38,22,13,13,13,13,22,
1,30,13,1,22,22,30,30,13,1,1,30,22,1,30,38,38,38,1,30,
1,1,1,38, };
static unsigned short stb__consolas_bold_10_usascii_a[95]={ 88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_bold_10_usascii_BITMAP_HEIGHT or STB_FONT_consolas_bold_10_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_bold_10_usascii(stb_fontchar font[STB_FONT_consolas_bold_10_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_bold_10_usascii_BITMAP_HEIGHT][STB_FONT_consolas_bold_10_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_bold_10_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_bold_10_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_bold_10_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_bold_10_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_bold_10_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_bold_10_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_bold_10_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_bold_10_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_bold_10_usascii_s[i] + stb__consolas_bold_10_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_bold_10_usascii_t[i] + stb__consolas_bold_10_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_bold_10_usascii_x[i];
            font[i].y0 = stb__consolas_bold_10_usascii_y[i];
            font[i].x1 = stb__consolas_bold_10_usascii_x[i] + stb__consolas_bold_10_usascii_w[i];
            font[i].y1 = stb__consolas_bold_10_usascii_y[i] + stb__consolas_bold_10_usascii_h[i];
            font[i].advance_int = (stb__consolas_bold_10_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_bold_10_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_bold_10_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_bold_10_usascii_s[i] + stb__consolas_bold_10_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_bold_10_usascii_t[i] + stb__consolas_bold_10_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_bold_10_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_bold_10_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_bold_10_usascii_x[i] + stb__consolas_bold_10_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_bold_10_usascii_y[i] + stb__consolas_bold_10_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_bold_10_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_bold_10_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_bold_10_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_bold_10_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_bold_10_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_bold_10_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_bold_10_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_bold_10_usascii_LINE_SPACING
#endif

