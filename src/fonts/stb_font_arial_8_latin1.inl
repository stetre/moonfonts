// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_8_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_8_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_8_latin1_BITMAP_WIDTH         256
#define STB_FONT_arial_8_latin1_BITMAP_HEIGHT         32
#define STB_FONT_arial_8_latin1_BITMAP_HEIGHT_POW2    32

#define STB_FONT_arial_8_latin1_FIRST_CHAR            32
#define STB_FONT_arial_8_latin1_NUM_CHARS            224

#define STB_FONT_arial_8_latin1_LINE_SPACING           5

static unsigned int stb__arial_8_latin1_pixels[]={
    0x20200822,0x03008302,0x130220c4,0x80808808,0x08810409,0x20410088,
    0x08088088,0x80131010,0x40002000,0x04404408,0x80040202,0x01080880,
    0x80804088,0x41102200,0x02e29888,0x09a98866,0xa82b84a1,0x23a81500,
    0x710d42b8,0x41284705,0x262b8662,0x50d84bac,0x882a6623,0x90664c3a,
    0x12ff2397,0x21dc0a85,0x0ee1dc28,0x20664c55,0x02a25c2a,0x4483b851,
    0x229c5cbc,0x0661543b,0x42cbc851,0xa8660aa9,0x332e513a,0x88dca270,
    0x1c522374,0x9790b2f2,0x59791c45,0x459790d4,0x52446e29,0x2e217241,
    0x8e239bb9,0xc922371a,0xb83622cb,0x714ff461,0x442ee21b,0x217710bb,
    0x19710cb8,0x5c542ee2,0x5c432e20,0x5c42ee25,0x4817710b,0x9b72dcaa,
    0x5c42ee29,0x8946250b,0x49524531,0x26619713,0x91370b9a,0x88dc2e6a,
    0x24922374,0x92299229,0x13245338,0xb82e48a6,0x4905c911,0x2369150b,
    0x371a8aa3,0x5c914d22,0xd50191d8,0x5c6e2e53,0x27337399,0x7513399b,
    0x4cdcea26,0x44c19153,0x2e51173a,0x27117388,0x2924388b,0x47510b8b,
    0x7117388b,0x2513944e,0x8e542e0b,0x26675133,0x8a42e4c8,0xba446e4c,
    0x0c864911,0x2170642e,0x085c1938,0x4170b832,0x905c911b,0x1929b85c,
    0x2e3505c5,0x0b832911,0x386a7175,0x8c55ca72,0x55592aac,0x55dcaab2,
    0x2b275773,0xbb92152a,0x5249c93a,0x24692524,0xdcc96375,0x9d24a493,
    0x154a2728,0xb9c6cd4b,0x8b2333ab,0xa8b21ccb,0x9ccaa732,0x2a58aa38,
    0x45538962,0x4b1546a5,0x71ccaa39,0x26a172c1,0x8e20bdbc,0x54e6551a,
    0x641d3162,0x44a721cc,0x239731ce,0x39731cb9,0x5ddceeee,0x26a39733,
    0x4ceeee4c,0x239730cb,0x39731cb9,0xdcca932a,0x39731ce1,0x564c72e6,
    0x66455932,0x4f222a1d,0x91333bbb,0x222440b8,0xb9910dcc,0x5b990a61,
    0x8e22dcc8,0xc86a2dcc,0x991242dc,0x5c73241b,0x0ea22720,0xdcc88d49,
    0xa98b7320,0x27205c2a,0x000000a2,0x00000000,0x00000000,0x42a00000,
    0x0666603b,0x80003303,0x1a80000a,0x03000980,0x0a60c510,0x21503553,
    0x15400009,0x082260a2,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x09800000,0x0500418c,0x04080c06,0x88802010,0x22030020,
    0x20410301,0x26041020,0x00101041,0x040a2022,0x00101004,0x04400100,
    0x80020080,0x00880800,0x54011111,0x350c4262,0x5c41ba85,0x0a205c40,
    0x2a051033,0x0e0b9809,0x94214050,0x4931c930,0x2ea39263,0x8515551c,
    0x2a1dc1bc,0x5e40a982,0x86644e1c,0x93165e43,0x4432e619,0x33261a9b,
    0x2e237b10,0x4353711c,0x542a5bc8,0x32251121,0x20eef21b,0x9931bbdd,
    0x33198663,0x6542ef2a,0x177950bb,0x5c42ef2a,0x9819710c,0x1660b305,
    0x05981977,0x2371b8b3,0xb9c0a8b8,0x2ae0a9c0,0x360ee2a0,0x22518943,
    0x186a2cc1,0x239c45ce,0x1aaa921b,0x5555c6e1,0x1aa9c522,0x555c222a,
    0x7904ea2a,0x5991486a,0x061a846a,0x4e230753,0xa8cc6619,0x81a81a81,
    0x33a8981a,0x81ac8751,0x21ac81ac,0x0d64489b,0x8e360d64,0x4cc329a9,
    0x0ca261a9,0x554543b7,0x89c19910,0x3590a272,0x248cc064,0x21712334,
    0x47260cc9,0x75199bba,0x64ae6697,0x0cc751bb,0x1a854995,0x3b729a52,
    0x320cc85c,0x8641ccc8,0xa8cc6619,0x9336a4cd,0x336a4cda,0x5dceaee4,
    0x6424643a,0x2e48c848,0xc848c870,0x7382cc48,0x73871387,0x170e22a7,
    0x2734d275,0x190a2728,0xb8e70d49,0x8954e388,0x4e234925,0x4444752b,
    0x5ce3a433,0x1a8a3aa9,0x49cc6a15,0x4550a251,0x10b7930b,0x2330cc19,
    0x03503519,0x77035035,0xa8eeee77,0x2eea0dbb,0x436eea0d,0x2eea0cbb,
    0x036eea0d,0x392e2709,0x4b89c5b1,0xb94439b5,0x26599933,0x455932ac,
    0x2f20dbba,0x0664471c,0x73276647,0xb832e637,0x432e61ba,0x39710bb9,
    0x9b10dd5c,0xdcc92619,0x2f257930,0x49332e2c,0x66e4f32e,0x198cc332,
    0x36a399b5,0x399b51cc,0x0007336a,0x38963896,0x12c03896,0x848712c7,
    0x10441040,0x04102208,0x38960000,0x02200000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x20410000,0x00881008,0x43138cc2,0x0a204000,
    0x44088844,0x219751ac,0x811003c8,0x01040020,0x08045791,0x284c2144,
    0x41110222,0x04020888,0x44442041,0x21021020,0x40220820,0x20404008,
    0x0bb88220,0xc8377971,0x36f2a488,0x3cba9a20,0x5cd42435,0x1dc37730,
    0x295042cc,0xa497972a,0x32713729,0xa8135088,0x81c70dbc,0x3483863b,
    0x152a9267,0x3854a218,0x32a17795,0x42f6ea3b,0x2592d40b,0x2ee6190b,
    0x398dc6e6,0x38b45217,0x65459795,0x99c950db,0x4331c491,0x9713399b,
    0x20cb88b3,0x425c910a,0xb88486a4,0x0331c424,0x95128359,0x52485c66,
    0x12521728,0x85436f2a,0x85c5c748,0x55c50caa,0x264e290c,0x21a86655,
    0x2a713519,0x87101a81,0x2c86540b,0x83701937,0x715e438d,0x2a353571,
    0x2a854711,0xa8cce395,0x4b76a172,0x95772aac,0x22dda875,0x126a91cd,
    0xa666d453,0x8910b219,0x2248c819,0x9b719a43,0xcb965cc9,0x2a19731c,
    0x7582a530,0x71370e5c,0x73388b8e,0x31986a77,0x2a330e63,0x499b53cc,
    0x21c42cda,0x5555540b,0x0750bb72,0xa98d10b3,0x376a4b8b,0xa9336a0c,
    0xa43338d9,0x39730cc4,0x50ef2eee,0x48854599,0x2a245d99,0x84884521,
    0x2ea0cc19,0x348910db,0x220d42e3,0x54550172,0x22150ccd,0x271d5c74,
    0x3389c738,0x0886a551,0x4d22e633,0xa81a8351,0x40b87101,0x3728bc8a,
    0x09024493,0x993b8939,0x02a0c8d4,0x0ccf222a,0x16654557,0x2a0cc000,
    0x12240ccd,0x40cc2435,0x8960cc19,0x23348313,0x3080ccdb,0xa80a82a0,
    0xb9c70ccd,0x271ce271,0x0d455138,0x22986633,0xcda81119,0x0e20351c,
    0x2e2a59b7,0x4ae1728b,0x2240cccd,0xb8e4571b,0x152c46a2,0x0ccee150,
    0x000000d1,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x98000000,0x942ee23b,0x5c197118,0x1007913c,
    0x21008111,0x21955000,0x110b9cba,0x454549c3,0x44e3750a,0x86619751,
    0x04082089,0x19808102,0x4f32a004,0x4cf32a08,0x00204011,0x304410c4,
    0x3bbb8663,0x00000000,0x2e1ab800,0x4ca27388,0x295333a8,0x5b95088c,
    0x2c985100,0x8d5c4593,0x5537389b,0x8c85dc71,0xb8f6249d,0x0710e2e0,
    0x754992e2,0x8dd46ee1,0x7750ec49,0x6e5466a5,0x80bc8224,0x53892114,
    0x2aaa1c39,0x35188ea2,0x00000001,0x10000000,0x274921b5,0x2e757728,
    0x8a84949a,0x96e54029,0x2e49704b,0x8999ce27,0x4dcc6b23,0x8871ec2c,
    0xa981224b,0x26e299c4,0x42e25791,0x510cc49a,0xa95dd401,0x8cc50501,
    0x00000039,0x00000000,0x5d400000,0x2639730c,0x277772ac,0x19732bd9,
    0x2200b32e,0x1ca964c2,0x389ca6e2,0x4cce2667,0x22e0eb42,0x6c3b070b,
    0x4d4331bc,0x1885d460,0x2514c262,0x00000002,0x00000000,0x00000000,
    0x00000000,0x00008000,0x00204444,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_8_latin1_x[224]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,
-1,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__arial_8_latin1_y[224]={ 6,0,0,0,0,0,0,0,0,0,0,1,5,3,
5,0,0,0,0,0,0,0,0,0,0,0,2,2,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,2,0,2,0,2,0,2,0,0,
0,0,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,0,0,0,2,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,2,0,0,1,0,
0,0,0,0,0,2,2,3,0,0,0,1,0,0,0,2,0,3,5,0,0,2,0,0,0,2,-1,-1,-1,-1,
-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,1,0,-1,-1,-1,-1,-1,0,0,0,0,
0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,
 };
static unsigned short stb__arial_8_latin1_w[224]={ 0,2,3,4,4,6,5,2,3,3,3,4,2,3,
2,2,4,3,4,4,4,4,4,4,4,4,2,2,4,4,4,4,8,6,5,5,5,5,5,6,5,2,4,5,
4,6,5,6,5,6,6,5,5,5,5,7,5,5,5,2,2,2,4,6,2,4,4,4,4,4,3,4,4,2,
3,4,2,6,4,4,4,4,3,4,2,4,4,6,4,4,4,3,2,3,4,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,2,4,4,4,5,
2,4,3,6,3,4,4,3,6,6,3,4,3,3,3,4,4,2,2,2,3,4,6,6,6,4,6,6,6,6,
6,6,7,5,5,5,5,5,2,2,4,2,6,5,6,6,6,6,6,4,6,5,5,5,5,5,5,5,4,4,
4,4,4,4,7,4,4,4,4,4,2,2,4,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
 };
static unsigned short stb__arial_8_latin1_h[224]={ 0,6,3,7,7,7,7,3,8,8,3,5,3,2,
1,7,7,6,6,7,6,7,7,6,7,7,4,6,5,3,5,6,8,6,6,7,6,6,6,7,6,6,7,6,
6,6,6,7,6,7,6,7,6,7,6,6,6,6,6,8,7,8,4,2,2,5,7,5,7,5,6,6,6,6,
8,6,6,4,4,5,6,6,4,5,7,5,4,4,4,6,4,8,8,8,3,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,8,7,5,6,
8,8,2,7,4,4,3,2,7,1,3,5,4,4,2,6,8,1,3,4,4,4,7,7,7,6,7,7,7,7,
7,7,6,8,7,7,7,7,7,7,7,7,6,7,8,8,8,8,8,4,7,8,8,8,8,7,6,7,7,7,
7,7,7,7,5,6,7,7,7,7,6,6,6,6,7,6,7,7,7,7,7,3,5,7,7,7,7,8,8,8,
 };
static unsigned short stb__arial_8_latin1_s[224]={ 137,128,156,210,113,118,125,168,66,80,174,
42,165,189,203,154,157,58,251,177,14,194,199,19,172,189,105,30,47,151,52,
38,87,48,65,148,92,147,153,236,24,228,198,177,165,170,222,235,216,165,209,
211,159,220,231,201,195,189,183,84,162,46,132,182,193,16,67,26,226,242,124,
119,114,111,76,101,98,67,62,6,76,71,91,1,217,11,95,79,86,33,100,
96,100,28,146,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,137,55,132,
231,31,1,56,116,196,204,124,108,160,189,182,206,142,237,116,128,178,142,127,
200,171,113,120,74,106,99,92,134,79,72,141,60,53,46,243,121,30,24,18,
12,9,6,1,253,7,242,32,39,49,59,109,57,203,22,70,16,103,86,86,
167,41,36,157,152,173,248,247,81,137,147,142,162,131,139,43,62,178,106,183,
188,193,215,220,137,21,225,230,131,136,11,6,1, };
static unsigned short stb__arial_8_latin1_t[224]={ 9,18,25,1,10,10,10,25,1,1,25,
25,25,25,25,10,10,18,10,10,18,10,10,18,10,10,25,18,25,25,25,
18,1,18,18,10,18,18,18,10,18,18,1,18,18,18,18,1,18,10,18,
10,18,10,18,18,18,18,18,1,10,1,25,25,25,25,10,25,10,18,18,
18,18,18,1,18,18,25,25,25,18,18,25,25,10,25,25,25,25,18,25,
1,1,1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,9,18,1,
10,25,18,1,1,25,10,25,25,25,25,10,25,25,18,25,25,25,18,1,
25,25,25,25,25,10,10,10,18,10,10,10,10,10,10,10,1,10,10,10,
10,10,10,10,1,18,1,1,1,1,1,1,25,1,1,1,1,1,10,18,
1,10,10,1,1,1,1,18,18,1,1,1,1,18,18,18,18,1,18,1,
1,1,1,1,25,25,1,1,10,10,1,1,1, };
static unsigned short stb__arial_8_latin1_a[224]={ 32,32,41,64,64,102,76,22,
38,38,45,67,32,38,32,32,64,64,64,64,64,64,64,64,
64,64,32,32,67,67,67,64,116,76,76,83,83,76,70,89,
83,32,57,76,64,95,83,89,76,89,83,76,70,83,76,108,
76,76,70,32,32,32,54,64,38,64,64,57,64,64,32,64,
64,25,25,57,25,95,64,64,64,64,38,57,32,64,57,83,
57,57,57,38,30,38,67,86,86,86,86,86,86,86,86,86,
86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,
86,86,86,86,86,86,86,86,32,38,64,64,64,64,30,64,
38,84,42,64,67,38,84,63,46,63,38,38,38,66,62,32,
38,38,42,64,96,96,96,70,76,76,76,76,76,76,115,83,
76,76,76,76,32,32,32,32,83,83,89,89,89,89,89,67,
89,83,83,83,83,76,76,70,64,64,64,64,64,64,102,57,
64,64,64,64,32,32,32,32,64,64,64,64,64,64,64,63,
70,64,64,64,64,57,64,57, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_8_latin1_BITMAP_HEIGHT or STB_FONT_arial_8_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_8_latin1(stb_fontchar font[STB_FONT_arial_8_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_arial_8_latin1_BITMAP_HEIGHT][STB_FONT_arial_8_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_8_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_8_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_8_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_8_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_8_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_8_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_8_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__arial_8_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__arial_8_latin1_s[i] + stb__arial_8_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__arial_8_latin1_t[i] + stb__arial_8_latin1_h[i]) * recip_height;
            font[i].x0 = stb__arial_8_latin1_x[i];
            font[i].y0 = stb__arial_8_latin1_y[i];
            font[i].x1 = stb__arial_8_latin1_x[i] + stb__arial_8_latin1_w[i];
            font[i].y1 = stb__arial_8_latin1_y[i] + stb__arial_8_latin1_h[i];
            font[i].advance_int = (stb__arial_8_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__arial_8_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_8_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_8_latin1_s[i] + stb__arial_8_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_8_latin1_t[i] + stb__arial_8_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_8_latin1_x[i] - 0.5f;
            font[i].y0f = stb__arial_8_latin1_y[i] - 0.5f;
            font[i].x1f = stb__arial_8_latin1_x[i] + stb__arial_8_latin1_w[i] + 0.5f;
            font[i].y1f = stb__arial_8_latin1_y[i] + stb__arial_8_latin1_h[i] + 0.5f;
            font[i].advance = stb__arial_8_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_8_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_8_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_8_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_8_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_8_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_8_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_8_latin1_LINE_SPACING
#endif

