// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_10_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_10_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_10_latin1_BITMAP_WIDTH         256
#define STB_FONT_times_bold_10_latin1_BITMAP_HEIGHT         44
#define STB_FONT_times_bold_10_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_times_bold_10_latin1_FIRST_CHAR            32
#define STB_FONT_times_bold_10_latin1_NUM_CHARS            224

#define STB_FONT_times_bold_10_latin1_LINE_SPACING           6

static unsigned int stb__times_bold_10_latin1_pixels[]={
    0x00000000,0x11000000,0x53900044,0x00000000,0x00000000,0x00000000,
    0x01e54000,0x400126e0,0x022002bc,0x06000011,0x700e80b2,0xa80fcc07,
    0x3a03ea04,0x1aa1c849,0x8062a0c4,0x5c03a01d,0x2cac980e,0xa81f00d8,
    0x23982a9a,0x96ab6619,0x92a1a209,0x0bb06658,0x40d4c1a2,0x018983ac,
    0x2054c059,0x640d83e8,0x3a176c1d,0x00c2cc69,0x4a018011,0x83280602,
    0x26661319,0x5811d509,0x406453e6,0x8a806201,0x0f88fc41,0x2e1440c4,
    0x4590a210,0x2143f119,0x3a0604c5,0x04cc4330,0x5564c04c,0x93063a61,
    0x260a0355,0x144c934f,0x10226062,0x441f6983,0x986ab260,0x3e61914f,
    0x564c1914,0x0d564c1a,0x5c3229f3,0x85dee177,0x8931fbfa,0x14fa8a2f,
    0x8380701b,0xdf99fc7b,0x443e20da,0xb851f5b1,0x203dc663,0x7cc9f31c,
    0x3e633344,0x5bf30dad,0x7c47e21b,0x1f887b60,0x360701f1,0x327cc52f,
    0x2664c999,0x4f4c9993,0x3e2af225,0x517c1f11,0x1f88a2f8,0x447e21f1,
    0x7c28be0f,0xd50d7c1a,0x8be25cf6,0xb819b6c2,0xb81f700f,0x117f1fc7,
    0x32e70f81,0x305c436a,0x47901ee3,0x0a61fc3f,0x7f0445fc,0x7f1ee111,
    0x47b9aa6e,0x5407dc3f,0x11fc29fc,0x36544d95,0xdb4cd951,0x8f777b73,
    0x7c28be3f,0x9fc7b8a2,0x45f1fc7b,0x3ae075c2,0x4b9edaa0,0xaf88517c,
    0x2a07f502,0xf98fc43f,0x87c133e0,0x7067b5b2,0x21f98cc3,0xf87f1e40,
    0x4cf80dc3,0x23dc4cf8,0x5c91d53f,0x0fea1fc7,0x8fe176ca,0x2f666bd9,
    0x699af666,0x47b96e7b,0x7c28be3f,0x9fc7b8a2,0x45f1fc7b,0x22c42c42,
    0x8b10ebfa,0x03f20a3e,0x6c8c3646,0x7c2cac98,0x6541f04c,0x1dc09bbc,
    0x1556d433,0x1fc3f836,0x133e199a,0x23f1133e,0x88bea1f8,0xc8c3f11f,
    0xf87d1286,0x5c3afae3,0xd7d70ebe,0x44333ae1,0xf11f89ce,0x3e851f43,
    0x3f11f88a,0xd0fc47e2,0x88311147,0x44835418,0x0f702aea,0x350be66a,
    0x213a05f3,0x07c450bf,0x22c81105,0xf8904819,0x4c361fc3,0x7f142fe1,
    0x1a9b98a1,0x373166a2,0x2f99a835,0x1fc38926,0x20000000,0x7541a9b9,
    0x82aea82a,0x5cc1a9b9,0x157541a9,0x2e0ee0ee,0x2010300f,0x89dc1fc8,
    0x3a2770ee,0x30bb880e,0x3225b5bf,0x81999984,0x07106638,0x3e64f983,
    0xf3198e64,0x37e65b5b,0x2ae002da,0x744ee002,0x09f3000e,0x00000000,
    0x00010020,0x00000800,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x02104003,0x06022000,
    0x224d4180,0x10008818,0x01100377,0x04403011,0x05390144,0x00000af2,
    0x00400800,0x00400202,0xd30f8000,0x0020039d,0x50750040,0x45c19759,
    0x2ea25744,0x16dc1d80,0x4c571676,0x3604d428,0x262176c5,0x98af6209,
    0x1dc0dc84,0x00aa80d8,0x02a60315,0x115e41f1,0x15e44997,0x588e21b1,
    0x8e2588a6,0x8e6c3ca8,0x20d57038,0xd3c1aac9,0x256445df,0x443ae8a6,
    0x22d3121b,0x0fa8fcc2,0x04419391,0x33310e4c,0x13114544,0x227cc303,
    0x20444439,0x06d6fcc1,0x44199882,0x01882808,0x1c038091,0x78da87c4,
    0x9cc9eae6,0x268486c7,0x57712684,0x049decc3,0x47e2163e,0xefe9e0f8,
    0x20e3dae2,0x105c0e80,0x7dc9993b,0x5b53f998,0x8933261b,0x8fdea6ac,
    0x7dea3f7a,0x1fc57911,0x5e449993,0xbf895b12,0x25791088,0x2b623f7a,
    0xd892b624,0x700fb84a,0x203ee01f,0x903e3325,0xa87c6dc3,0xbb441a8a,
    0x4c1ab440,0x1a8cd85f,0xf71557e0,0xefa9e3f8,0x490bbe22,0x33aa4ad8,
    0x95150a22,0x4f8c7dcd,0x2a2197b5,0x43e32e6c,0x7de63f79,0x6dc7ef31,
    0xca88fe3b,0x65cef6e6,0x7133e0f8,0x8fde677b,0x1970f8cb,0x03e32e1f,
    0x0fea07f5,0x99141fd4,0x644181f1,0x8373886c,0x9c41daa9,0x441be61b,
    0x27224b8b,0xf1ee0baf,0x9115c3c7,0x197144df,0x83e7721f,0x266bd984,
    0x2aa3f12f,0x4d7b30ab,0x7de678cc,0xbcc7ef31,0x47f0b71f,0x716e6bd9,
    0x44cf8f19,0x71fbcc5b,0x3c65cf19,0xd918f197,0x6461b230,0x1e36e186,
    0x520b2011,0x817241c9,0x75c23934,0x23b97480,0xf887f76b,0x5c3c3f11,
    0x5c3eaf22,0xdb9e32e0,0xb888e0f8,0x27320ebe,0xd7122e2c,0x8eb621d7,
    0x7f12fbf8,0x4befe25f,0xb8fe1ce8,0x39d10ebe,0x17f0eb22,0xf88e744a,
    0x475912fb,0x2b223ac8,0x217ccd43,0x4d42f99a,0x443e22f9,0x222dc2bd,
    0x7d71a82a,0x2a1c985c,0x32ae7d71,0x1b931a83,0x13f2fba6,0x87835373,
    0x4927262b,0x5b11d644,0x40d72989,0x00042020,0x30000000,0x9800009f,
    0x0002dadf,0x44ee0000,0x3a2770ee,0x3ba2770e,0x08000000,0x20988204,
    0x4080c040,0xc8000100,0x004015c0,0x000a0800,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00020000,
    0x0f114000,0xd8000000,0x0810107f,0xffa82001,0x8181000f,0x01088208,
    0x6453e600,0x83625f70,0x53e67ee1,0x84206238,0x80000888,0x64d3e608,
    0x0fc40d50,0x35c37a20,0x0ddb20f5,0xb10d5554,0x0d55545f,0xab89a0cc,
    0x16ab661c,0xbab98b77,0x5011511d,0x7da67889,0x0f89ae20,0x7f44b335,
    0x3a8ef222,0xf70f886c,0xbc89d70e,0x27428be3,0x27f07443,0x86e4136c,
    0x7f51e9d8,0x41c1a61d,0x3f20ead9,0x440b4c32,0xb0eba1e8,0x22f334c9,
    0x88863e20,0x10ab9a99,0x556ccd32,0x4d16f60a,0x87e2315a,0x87e14fc2,
    0x885df719,0x7da6084d,0x22023540,0xcb976263,0x41886208,0x1110cfc0,
    0x8be07c41,0x7dc2bdc2,0x0cfe5b21,0x1eadc226,0x40c4f6d3,0x34e5c0fa,
    0xf9867f26,0x3f5d11ea,0xd326c044,0x5f40cbcc,0x5126a721,0xb3d28f4c,
    0x9a0d6cca,0x81ee1ef9,0x01ea0cfa,0x84ca8d93,0x260fda61,0x6405c146,
    0xa9aa16e2,0xa83ae0c6,0x83f30fbf,0x55f10a2f,0x457c4698,0xb73541ce,
    0x53db4c7a,0xc887f50d,0x22ed8c1a,0x752e7b69,0x99361aa1,0x9506fe66,
    0x2554215d,0x3a56d88a,0x203ea52c,0x7b97ec46,0x7b82f620,0x9b960b2a,
    0xfa83625d,0x1634c3eb,0x33a21c12,0x26699a61,0x2f31621f,0x28fa1e1e,
    0xd86986c8,0x44d30f75,0xd5f31fad,0x1b231a61,0xd1183795,0xb73db4c7,
    0x2726987a,0xbf99a63e,0x2057e546,0x40a99b99,0x593b3358,0x39a0ef41,
    0x410fccf2,0x3f308ad8,0x0d6dc7e6,0x5aa1dd97,0x134c0375,0x45c1c41f,
    0x99a61c42,0x983084c6,0x7543c3d7,0xd107302a,0x30912a81,0x434c7a0d,
    0x17d4d469,0x9263d9b3,0x89676638,0xb9a62fbd,0x543ee1ea,0x07e44e8f,
    0x361aaaa8,0x2aaaa19c,0x32e680c1,0x2ab6a0b9,0xb51bf2e2,0x32001d53,
    0x0dcab624,0x03a21f70,0x298dff50,0x20fb87dc,0x23ea0ee0,0x0203f32f,
    0xf7000000,0x1d72e881,0x22770fb8,0x053750ee,0x7dc00100,0x00000000,
    0x88040000,0x00020084,0x00000004,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x01011000,0x04201101,
    0x30f50422,0x4080c07f,0xf51fdad9,0xafd43629,0xf304223b,0x2f200979,
    0xf3044aee,0x76401b79,0x99f30dad,0x04444447,0x3e611111,0x7cc33e66,
    0xe8a7cc0c,0x4c9f3041,0x0c1fc8cf,0x4c76b3e6,0x9f30dacf,0xf9800097,
    0x104225cc,0x5e449751,0x64c93913,0x27af264b,0x798fdea5,0x381bcf81,
    0x22334ec4,0x408b6c4f,0x3bdc28fb,0x32e5d97c,0x857630cc,0x74be1ac8,
    0x22336a03,0x5c3e6be0,0x1022af8e,0x43ea8fdc,0x20a7f02f,0x5f0be0f8,
    0x4fe0e1ea,0x8222be08,0x97109b2f,0x22be02ee,0x21f7f52f,0x32e2fadb,
    0x21f19708,0x2ea25ca8,0x3ef30d9f,0x7c1f5f31,0x272667aa,0xc81f5971,
    0xd02af886,0xf9867e0d,0x1c2e7b9c,0x8ef6e2ec,0x2501f9af,0x5cbf84dd,
    0x810e657c,0x3a633a60,0x5cf817c3,0xcf85f020,0x272667c9,0x33e0f3e1,
    0x4cf72f84,0x22cb80bc,0x75e64ccf,0x5b87dc41,0x5b33c65c,0x207ce44b,
    0x75e63f79,0xa99eabe1,0x1f1b71ad,0x0fc817cc,0x1d707f50,0x2e1f72f8,
    0x5b8bb070,0x5104fcf8,0x39f079d3,0x041f3b90,0x7d3fa982,0xbd9f02f8,
    0xbf85f060,0x2b6a67b8,0x2fe133e2,0x4cf72f84,0x22ca80bc,0x2f31f9af,
    0xd12d5c1e,0xa8eb2239,0xb5d50ebe,0x97dfc47d,0x5e7c3d79,0x4c272621,
    0x852f44ad,0x1f71307a,0xbb2f8488,0x3606e65c,0x5f0e6c45,0x66c503f5,
    0x29817c30,0x3e30408b,0x8a2f87d3,0x7c43f9bf,0x2a5f0be0,0x80bf8387,
    0xd97c50af,0x3973b885,0x7d4fa5f0,0x000002f8,0x47d40000,0x5507f12f,
    0xbfb80555,0x207e44ca,0x00ef88da,0x0065e7cc,0x4c00ee88,0x9641d94f,
    0xf12cade8,0x11130009,0x7c45d263,0x4f2b7e64,0x407fb4f8,0x233e24f8,
    0x3e20c1fc,0x2dadf884,0x001979f3,0x065e7cc0,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x88884220,0x08888000,0x00004211,0x10120000,0x400006a7,0x32e00880,
    0x3332e6cc,0x15d4e604,0x02bbbb80,0x00000000,0x00000000,0x00000000,
    0x4d6fe600,0x883aa3af,0xf99f4d44,0x22a4cbea,0x0d89620b,0x42e2e074,
    0x37719999,0x49951e54,0x4aaa1f78,0x8932adca,0xbbbb8e04,0xa9cd6763,
    0x0aeeee2a,0x00000000,0x00000000,0x00000000,0x07c40000,0xbb98e1b2,
    0x36f135c4,0x363626aa,0x4d41b1a0,0xa98eaea4,0x545751aa,0x2d0d523c,
    0x83052326,0x00000e20,0x00000000,0x00000000,0x00000000,0x00000000,
    0x21f98788,0x886b21db,0x2b6f10af,0x8963626a,0xaa442aa6,0x89095951,
    0x46a71199,0x222943c9,0x00000009,0x00000000,0x00000000,0x00000000,
    0x00000000,0x7307d400,0x042041d9,0x23ea95d9,0x054a6bbe,0x54540002,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_bold_10_latin1_x[224]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__times_bold_10_latin1_y[224]={ 8,1,1,1,1,1,1,1,1,1,1,2,6,5,
6,1,1,1,1,1,1,2,1,2,1,1,3,3,2,4,2,1,1,1,2,1,2,2,2,1,2,2,2,2,
2,2,2,1,2,1,2,1,2,2,2,2,2,2,2,2,1,2,1,9,1,3,2,3,2,3,1,3,2,1,
1,2,2,3,3,3,3,3,3,3,2,3,3,3,3,3,3,1,1,1,4,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,3,2,1,2,2,
1,1,1,1,1,3,4,5,1,0,1,2,1,1,1,3,2,4,7,1,1,3,1,1,1,3,-1,-1,-1,0,
0,0,2,1,-1,-1,-1,0,-1,-1,-1,0,2,0,-1,-1,-1,0,0,3,1,-1,-1,-1,0,-1,2,1,1,1,
1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,1,1,1,1,1,1,
 };
static unsigned short stb__times_bold_10_latin1_w[224]={ 0,3,5,5,5,9,8,2,3,3,5,5,2,3,
2,3,5,4,5,4,5,5,5,5,5,5,3,3,5,6,5,5,9,7,6,7,7,6,6,7,7,4,5,8,
6,9,7,7,6,7,7,5,6,7,7,9,7,7,6,3,3,3,5,6,3,5,5,4,5,4,4,5,5,3,
4,6,3,8,5,5,5,5,4,4,3,5,5,7,5,5,4,4,2,3,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,3,5,5,5,5,
2,5,3,7,3,5,6,3,7,6,4,5,3,3,2,6,5,2,3,3,3,5,7,7,7,4,7,7,7,7,
7,7,10,7,6,6,6,6,4,4,4,4,7,7,7,7,7,7,7,5,7,7,7,7,7,7,6,5,5,5,
5,5,5,5,7,4,4,4,4,4,4,3,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
 };
static unsigned short stb__times_bold_10_latin1_h[224]={ 0,8,4,8,8,8,8,4,9,9,5,6,4,2,
3,8,8,7,7,8,7,7,8,7,8,8,6,7,6,3,6,8,9,7,6,8,6,6,6,8,6,6,7,6,
6,6,7,8,6,9,6,8,6,7,7,7,6,6,6,8,8,8,5,1,3,6,7,6,7,6,7,7,6,7,
9,6,6,5,5,6,7,7,5,6,7,6,6,6,5,7,5,9,9,9,3,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,7,8,8,6,6,
9,9,3,8,4,5,3,2,8,2,4,6,5,5,3,7,8,2,3,5,4,5,8,8,8,7,9,9,9,8,
8,8,6,9,9,9,9,8,9,9,9,8,6,9,10,10,10,9,9,4,8,10,10,10,9,9,6,8,8,8,
8,8,8,8,6,7,8,8,8,8,7,7,7,7,8,7,8,8,8,8,8,4,6,8,8,8,8,9,9,9,
 };
static unsigned short stb__times_bold_10_latin1_s[224]={ 227,138,83,15,184,190,200,253,67,149,16,
200,253,128,253,233,142,84,99,9,66,60,243,93,227,154,183,119,228,114,234,
148,123,191,240,38,220,213,206,52,192,187,230,174,167,157,205,209,136,103,117,
32,105,140,148,160,77,69,62,217,249,28,50,139,99,17,213,6,219,112,135,
199,37,187,118,240,236,27,247,11,181,175,1,1,156,31,85,143,6,123,22,
133,138,163,93,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,
151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,227,89,22,
46,99,247,167,192,121,1,68,56,107,128,14,132,78,50,12,46,253,77,221,
125,103,42,89,36,176,168,160,72,206,87,95,130,122,114,125,141,111,177,170,
78,153,158,222,56,91,214,33,1,25,184,198,72,7,17,9,41,71,79,43,
245,1,227,233,239,21,61,23,105,51,251,67,85,110,115,170,225,27,129,102,
108,96,72,237,62,56,90,33,39,45,55,61,49, };
static unsigned short stb__times_bold_10_latin1_t[224]={ 10,12,37,12,12,12,12,12,1,1,37,
30,17,37,30,12,12,21,21,21,21,21,12,21,12,12,30,21,30,37,30,
12,1,21,30,21,30,30,30,21,30,30,21,30,30,30,21,12,30,1,30,
21,30,21,21,21,30,30,30,12,12,21,37,37,37,30,21,30,21,30,21,
21,30,21,1,21,21,37,30,30,21,21,37,30,21,30,30,30,37,21,37,
1,1,1,37,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,
30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,10,21,21,
21,30,21,1,1,37,21,37,37,37,37,21,37,37,30,37,37,22,21,12,
37,37,37,37,37,12,12,12,21,1,1,1,12,12,12,30,1,1,1,1,
12,1,1,1,12,30,1,1,1,1,1,1,37,12,1,1,1,1,1,30,
1,12,1,1,1,12,12,30,21,12,1,12,12,21,21,21,21,12,21,12,
12,12,12,12,37,30,12,12,12,12,1,1,1, };
static unsigned short stb__times_bold_10_latin1_a[224]={ 36,48,80,72,72,144,120,40,
48,48,72,82,36,48,36,40,72,72,72,72,72,72,72,72,
72,72,48,48,82,82,82,72,134,104,96,104,104,96,88,112,
112,56,72,112,96,136,104,112,88,112,104,80,96,104,104,144,
104,104,96,48,40,48,84,72,48,72,80,64,80,64,48,72,
80,40,48,80,40,120,80,72,80,80,64,56,48,80,72,104,
72,72,64,57,32,57,75,112,112,112,112,112,112,112,112,112,
112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,
112,112,112,112,112,112,112,112,36,48,72,72,72,72,32,72,
48,108,43,72,82,48,108,72,58,79,43,43,48,83,78,36,
48,43,48,72,108,108,108,72,104,104,104,104,104,104,144,104,
96,96,96,96,56,56,56,56,104,104,112,112,112,112,112,82,
112,104,104,104,104,104,88,80,72,72,72,72,72,72,104,64,
64,64,64,64,40,40,40,40,72,80,72,72,72,72,72,79,
72,80,80,80,80,72,80,72, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_10_latin1_BITMAP_HEIGHT or STB_FONT_times_bold_10_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_10_latin1(stb_fontchar font[STB_FONT_times_bold_10_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_10_latin1_BITMAP_HEIGHT][STB_FONT_times_bold_10_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_10_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_10_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_10_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_10_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_10_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_10_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_10_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_10_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_10_latin1_s[i] + stb__times_bold_10_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_10_latin1_t[i] + stb__times_bold_10_latin1_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_10_latin1_x[i];
            font[i].y0 = stb__times_bold_10_latin1_y[i];
            font[i].x1 = stb__times_bold_10_latin1_x[i] + stb__times_bold_10_latin1_w[i];
            font[i].y1 = stb__times_bold_10_latin1_y[i] + stb__times_bold_10_latin1_h[i];
            font[i].advance_int = (stb__times_bold_10_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_10_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_10_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_10_latin1_s[i] + stb__times_bold_10_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_10_latin1_t[i] + stb__times_bold_10_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_10_latin1_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_10_latin1_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_10_latin1_x[i] + stb__times_bold_10_latin1_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_10_latin1_y[i] + stb__times_bold_10_latin1_h[i] + 0.5f;
            font[i].advance = stb__times_bold_10_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_10_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_10_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_10_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_10_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_10_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_10_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_10_latin1_LINE_SPACING
#endif

