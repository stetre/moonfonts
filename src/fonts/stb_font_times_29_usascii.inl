// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_29_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_29_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_29_usascii_BITMAP_WIDTH         256
#define STB_FONT_times_29_usascii_BITMAP_HEIGHT        102
#define STB_FONT_times_29_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_29_usascii_FIRST_CHAR            32
#define STB_FONT_times_29_usascii_NUM_CHARS             95

#define STB_FONT_times_29_usascii_LINE_SPACING          19

static unsigned int stb__times_29_usascii_pixels[]={
    0x00001000,0x00060002,0x51000000,0xe8015797,0xddb3eeee,0x812209dd,
    0x08020001,0x00080000,0x80000000,0x00abdba8,0x80008020,0x000080c9,
    0x9979bb71,0xdf300037,0x01f016d4,0x491016d4,0xcfc80039,0x203fecaa,
    0xfd4fb999,0xd7101333,0x001d8157,0x07ea81d0,0x07f6a000,0xd5bfdb70,
    0x645f2201,0x9f9004ef,0x407fb535,0xfd986eb8,0x227f4001,0x322005f9,
    0x036e602d,0x4c86fa80,0x013201f0,0x00d981b5,0xf701ee98,0xd4fa801b,
    0x75f6440f,0x012a4ffc,0xffb71660,0x3f6a0000,0x25db101f,0xeb80ffd8,
    0xfffee8ff,0x407ba606,0xfec80efa,0x00ffe546,0xdf517fe0,0x800ba600,
    0x026000f9,0x203e03e2,0x816a00f8,0x3fe200f8,0x2037ec02,0x6c0fd4fa,
    0xf13e4b16,0xf1079000,0xff80000f,0xff10db01,0x477fe201,0xfd02ffd8,
    0x506fb805,0x007fe0df,0x0130bff0,0x30003d30,0x0fa0000d,0x981ae03e,
    0x902dc01f,0x0ffe00df,0x20fd4fa8,0x3ccb13f8,0x01d00076,0x80000ff1,
    0x02fa81ff,0x3fe201ff,0xfc86fe81,0x83ff8806,0x03fd06f9,0x0004fe80,
    0x540003f1,0x87f80003,0x3a07f80f,0xf305f006,0x3ff6005f,0x1fa9f500,
    0x2c58a7dc,0x0598012a,0x80000ff1,0x00fd81fe,0x83fc01ff,0x17fcc7fb,
    0x4c0ffc80,0x003fd06f,0xb0003fd8,0x2c183009,0x21fe2000,0xa80ff80f,
    0x81fb003f,0xf9000ffc,0x753ea05f,0xb11ff507,0x9003c418,0x001fe205,
    0xff03fd00,0xff007fc0,0xfc83fe60,0x5ff5000f,0x3fd06f98,0x002fc800,
    0x372206a8,0x02c5f9da,0x37d436d4,0x417f407c,0x9f5000fe,0x2a007fd8,
    0x29f504ff,0x27bfe07e,0xd001d805,0x6cdfe201,0xeec803ef,0x7c41fead,
    0x401ff00f,0x41ff107f,0x3e6007fd,0xe837cc4f,0x37bb661f,0x36a0fdc2,
    0x74413606,0x370ffa23,0x5437f640,0xfc80f85f,0x3003fcc2,0x007ff8df,
    0x7d417fe6,0x7fd40fd4,0x804a805f,0x27fe2059,0x105fffef,0x3ffa21bd,
    0xff01ff81,0xf883fc01,0x1003ffc6,0x06f98bff,0x01ec83fd,0x3ff221f5,
    0x3603f106,0x1541ff86,0x1fc1bea0,0x5c3dc07c,0x1fe2006f,0xff800dff,
    0x1fa9f506,0x01bfff50,0x202c8078,0xfb30dff8,0xf30db05f,0x209fd03f,
    0x03fe00ff,0x0dff17e6,0x7cc6ff80,0x75c3fd06,0x3ea1ea00,0x3f20d506,
    0x0dc37c41,0x3641be60,0x6426c07c,0x0ffc005f,0x7c400ffd,0x3a9f505f,
    0xeffd8807,0x1d00b601,0xfd83fc40,0xff81fd46,0x543ffb81,0x03fe00ff,
    0x0ffd03f2,0x262ffc40,0x2e3fd06f,0xfa879805,0x9f50b706,0x00b09f50,
    0x215c0df3,0xfd81d40f,0x917fc004,0x3e6001ff,0x3a9f504f,0xffff1007,
    0x59812a03,0xf983fc40,0xfe817ec7,0xb7fffd01,0x7fc01ff7,0x7ec27cc5,
    0x7ff3000f,0x3fd06f98,0x21a200b9,0xb09906f9,0xb05f901f,0x980df300,
    0x03a61f1e,0x74004fe8,0x007fee4f,0xfa817fd4,0x36200fd4,0x81e07fe9,
    0x83fc402c,0x07fe0ff8,0xfe880ff4,0x401ff2ff,0x3fdbecff,0x2003ff90,
    0x37cc2ffa,0x006fdfe8,0x6c1be616,0x7f985f83,0x6f980498,0x20f8ae20,
    0x09fb00ca,0x3e63fe80,0x0df9003f,0x007ea7d4,0x40bfa2b1,0x8801d02d,
    0xf89fe07f,0x803fd02f,0xf007fc18,0xf100662f,0x1bf2009f,0x57f41be6,
    0x303004fe,0xf51320df,0x3b0bfb07,0x260df300,0x81e80f86,0x7fc005fc,
    0x2007fdc2,0x3ea02ff8,0xb1020fd4,0x84a82fdc,0x07f88059,0x03ff8df1,
    0xff0003fd,0x4003fc01,0x7c400ffb,0xd06f981f,0x007ff13f,0x35c1be60,
    0x7f990ff2,0xdf3002b8,0x203e13a0,0x005fa86c,0x1fec0ffc,0xf5013f20,
    0x10e41fa9,0x0f027d4b,0x0ff10059,0x0bfd13e6,0x3e0007fa,0x001fe00f,
    0x3f2027f4,0x3a0df304,0x403ff51f,0x506f9828,0x4477d41f,0x92a2fbac,
    0x21be6008,0xc80f84f8,0x0037cc0f,0x3f601ff1,0x5007f903,0x2641fa9f,
    0xb017e4b1,0xf8800e85,0xfb81db07,0x001ff82f,0xff101ff8,0x13f20001,
    0xdf301fec,0xffc87fa0,0xf989fd00,0xff88be06,0xb7bf31ff,0x3e600c89,
    0x0f85fa86,0x07f82fd8,0xd5017e60,0x03bdb79d,0x83f53ea0,0x3e6b12fc,
    0x0b32d404,0xf90ffe20,0x277ffa03,0x002dffea,0x7d40ffe6,0x3aa0002f,
    0x00dfdcde,0x2ff83fd4,0x7f4077f4,0x9903fd43,0x1ba82b88,0x37cc0498,
    0x407c37cc,0x01fc81fe,0x2e003f70,0x54006fff,0x3660fd4f,0x03fdedff,
    0x100164f0,0x01bf9dfb,0xe8efffd8,0x995001cf,0xcccb8999,0xa980004c,
    0xbffd7000,0x33bff6a5,0x0cfffe98,0x37ffb20c,0x0000e882,0x2fcc00e8,
    0x407c3fc4,0x009d00ff,0xff3001ba,0xa7d4009f,0x0ea9807e,0x00284c00,
    0x88002660,0x00000a09,0x00000000,0x00000000,0x00069800,0x27cc016c,
    0xd80f85f8,0x2a01a607,0xfd88001f,0x29f5003f,0x00b1007e,0x00000000,
    0x00000000,0x00000000,0x00000000,0x8001b700,0x7f3002d8,0x203e0be0,
    0x2026407a,0x6cc0002d,0xa7d400bf,0x0000007e,0x00000000,0x00000000,
    0x00000000,0x00000000,0xb800ae98,0x5432a01d,0x03e0d507,0x05b10174,
    0x88000132,0x3bba2cdb,0xdddfd4fe,0x2aaaaa29,0xaaaaaaaa,0x00000000,
    0x00000000,0x00000000,0x00000000,0x9dd71000,0x05d95335,0x03b7dfd0,
    0x403e01b7,0x215c02b8,0x0000002c,0x44266666,0x99109999,0x99999999,
    0x00003999,0x00000000,0x00000000,0x00000000,0x30000000,0x00357995,
    0x540565c4,0x22006401,0x00984402,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x01000000,0x08000000,
    0x03a81b00,0x2e001795,0x5e544003,0x2f2a0000,0x02cb8800,0x0aaaaaa8,
    0x882ca980,0xaaaaaaaa,0x02ccb982,0x1005e5cc,0x05555555,0x88179b93,
    0x4c01aaaa,0x801aaaaa,0x50acdca8,0x0fecc001,0x6eeec400,0x9300999b,
    0x3c403bfd,0x646ec164,0x0034c00f,0x07f2b7ee,0xf73bf100,0x3fffa203,
    0xfff300ef,0xdd880fff,0xffffb00a,0xed8dffff,0xf905ea8a,0x2205fb37,
    0x41bfffc9,0x1ffc89cb,0x03fff262,0x0adfd988,0x26b3bae0,0xa80edfca,
    0x07ff2a4f,0x7cc9f100,0x26983fff,0x0b300ffb,0xf11fb83d,0x2001e809,
    0x002e45f9,0x903f91b6,0x07ff9337,0x0fbbbbb6,0x7c403fb8,0xfeeeeeef,
    0x7f103ea3,0x17ec0fc8,0x1e217fe0,0x7fd41bee,0x201f9806,0x3a204fd8,
    0xf86fd81f,0x0fdc001f,0x1fc40bfa,0x225c03f2,0x3747d878,0xfc800990,
    0xf7003dc3,0x1545f887,0x034c37e4,0x2e00ff20,0x5e83ea04,0x985f8db0,
    0x427fc06f,0x0ffc40fc,0x4404fff8,0x013f600f,0x07220be6,0xff0007fa,
    0x3ea0bf90,0x26164003,0x07ec7f85,0x7ec0034c,0xf8802743,0x801fe80f,
    0x002d86f9,0x01c017ea,0xb06f89b2,0x740fe61f,0x213fa03f,0x03fe83fc,
    0xf807ffdf,0x400ff700,0x0ff4002c,0xa81ff100,0x005f706f,0x7c25c0e8,
    0x0f40fec7,0xf537e400,0x417ea003,0x3f8804fd,0x20056fcc,0x00000ff8,
    0xf82ff87f,0x7e40bf25,0x2613fa04,0xf01ff81e,0x7c03ffd3,0x4007ff00,
    0x0ff40028,0xf70ffa00,0x700bf605,0xffffffff,0x07ec9fff,0x003c81fd,
    0x5f93ff50,0x70266662,0x01bf20bf,0x3fff616e,0x017f604f,0x3207d400,
    0xe83b62ff,0x40df703f,0x3e6004fe,0x3fa23e06,0xf301f00f,0x8000003f,
    0x09fd71fe,0x21fa2fd4,0x2eeeffed,0x99db9988,0x2e09af99,0x698bf11f,
    0x3ffe2000,0x37ffe60c,0xfb827ec2,0x5c074c07,0x41efffed,0xdeb99ff8,
    0xd06c8003,0xe81b97ff,0x40ff704f,0x3f2004fe,0x7fcc3e01,0xff701f06,
    0xfd000000,0x07ff9b93,0x0ef5f7d4,0x4cdfeccc,0x1e225c00,0x20dc8dd8,
    0x260000e8,0x3fc81fff,0x3ea07fd0,0x09ff7107,0x4c6ffd88,0xffb9adff,
    0xb01fc005,0x1ff20dff,0x9fd037e4,0xf013e200,0x7c2ffd41,0x4407fd80,
    0x01aaaaaa,0x7cc1bfd0,0x00623607,0x5b0017ec,0x0e4c0598,0x06ea21e4,
    0x0dff7f90,0x81ffc0d9,0xeca80ffa,0x7dc00eff,0x2a1bee4f,0x1f5002ff,
    0x077ffcc0,0xe8833fe2,0x013fa05f,0x207c02dc,0x407c3ffc,0xfb8807ff,
    0x3fa002ff,0x5d83fc41,0x002fd800,0x0009703e,0xd39d116a,0x323dd107,
    0xf00f43ff,0x01fea07f,0x2e00bfee,0x7417f66f,0x40d9006f,0x0effb8ea,
    0x6667ffd4,0x13fa03ff,0x07c00740,0x01f17fec,0x3e001fff,0xe80b885f,
    0xf80ff81f,0x1ccdeeef,0xca805fb0,0xdeccccfc,0x1d1002cc,0xd07ee6e8,
    0x87ffc43f,0x827f404b,0xbf9005fb,0x7f4ff100,0x200ff904,0x543f503f,
    0x2cb885ff,0x7f401ff5,0xf002a804,0x21ffd101,0x02ffd80f,0xfff09fd0,
    0xff81fe81,0xfffffa80,0x2fd85fff,0x6676e540,0x02cccfcc,0x25f887b0,
    0x21be64f9,0x8068dffa,0x09f704fd,0x6c01be60,0x7d413f27,0xd00f9807,
    0x001ff50d,0x3fe80bfd,0x1f000b80,0x3e3bfe20,0x004ffc80,0x5fff09fd,
    0x0ff81fe8,0x553313b8,0x02fd83f9,0x00788770,0x24fa85a8,0x417f25f8,
    0xa801fffd,0x007fb05f,0x25d802fc,0x09f305fb,0x13e60d90,0x3e601fe4,
    0x017f400e,0x401f001c,0x880fdffa,0x9fd006ff,0xfe877310,0x3540ff81,
    0x0bf60e40,0x016616c0,0x9f501d10,0x0fff37c4,0x040bffe2,0x007f41fe,
    0xf8803f98,0x7dc1fe62,0xf303f801,0xd00fea0b,0x03fd001d,0x400f8000,
    0xf700fffb,0x09fd009f,0x207fa06c,0x202fc0ff,0x002fd858,0x4003b81f,
    0x4cbf102d,0x20bff25f,0x5c3fffe9,0x3e617dc1,0x031b2002,0x20ff2172,
    0x00f9807d,0x07ee03fa,0x3d880ed8,0x02a201fa,0x7ec00fc0,0x0bff200f,
    0x12a09fd0,0x87fe07fa,0x4c1bdff8,0x803fd81d,0x2002d878,0xf737405b,
    0x56fffc45,0xffe9aec9,0x8db04ecf,0x10bfc85e,0x577e41d9,0xfd00dea8,
    0x64017cc1,0x741fd406,0x201fb104,0x02f89ffa,0xf8806fc8,0x801fd003,
    0xf880affa,0xff02b84f,0xd985ff05,0x0dffffff,0xb5009fd0,0x3a2001d0,
    0x74dfc400,0xfffffa84,0x3fff620c,0x3b3b200d,0xefffb80c,0xfffe983e,
    0x675c402d,0x07d001ed,0x5d97df50,0x00beca88,0x801e7ff4,0x3f2206fc,
    0x7c401cff,0xdfec8800,0x001dfdcb,0x553bff6a,0x7303effd,0x3f6a0359,
    0x06602dff,0x002c800a,0x4c401971,0x0054401a,0x00660030,0x098000c4,
    0x10005400,0x00266013,0x03000330,0x00040000,0x00019a98,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x40000000,0x11aaaaa9,0x81555555,0x551aaaa9,0x20155555,0x551aaaa9,
    0x30355555,0x30355555,0x00e157b7,0x209bca88,0x2aaaaa63,0xaaaa981a,
    0x5555541a,0x2aaaaaaa,0x2aaaaaa2,0x5555541a,0x5555530a,0xaaa80135,
    0xaaaaaaaa,0x2aaa62aa,0x5544000a,0x555531aa,0x53001555,0x4c555555,
    0x002aaaaa,0x219fff71,0x09effea8,0x885ffd44,0x202efffb,0x510cffc9,
    0x1015dffd,0xc815dfb3,0x7efdbadf,0xaaceeb80,0x3226ddfd,0x880affff,
    0x740aeffa,0xcccccdff,0x36e23ffe,0x4c0affff,0x2621dffb,0xffeefffd,
    0xeeeff80d,0xffeeeffe,0xbffd510f,0xaeffc800,0x7fffb310,0xfb310013,
    0x7d4415df,0x4fa80bff,0xf980ffc8,0xb81f404f,0x0bf003ff,0x2600bff2,
    0xa82fc82f,0x01fe407f,0xdff50df7,0x3a01dd00,0x817fe202,0x3e607ffb,
    0x88bfe603,0x0be22ffd,0x1f983ff3,0x0007ffcc,0x3e607fff,0xff30004f,
    0x8037e607,0x2ff987fc,0x7c40bfd0,0x2017fe00,0x1ff500f9,0xdf103e00,
    0xbf903d40,0x3f60f700,0x807e601f,0x007fec05,0x2740bff2,0x3a0bfe20,
    0x3e61227f,0x7c41b81f,0xfd7004fe,0x01ffc05f,0x882ff880,0x02c8804e,
    0x3fee0bfd,0xfc80b500,0x5025c00f,0x03e001ff,0x90780df3,0x41a001df,
    0x0f606ff8,0x17fdc070,0x640ffe80,0x82ff8805,0x30311ffb,0x883103ff,
    0xe800ffbf,0x3fe01ffb,0x5ff10003,0x20000bb0,0xff880ffb,0xf8805b02,
    0x500fc03f,0x03e001ff,0x82c05ff3,0x02e003ff,0x3541ffd4,0x0bff3000,
    0xd52ffc40,0x05ff1001,0xf9809ff5,0xf1f1001f,0xf8ea809f,0x00ffe01f,
    0xb117fc40,0x7c40000b,0x05ffa82f,0x0dfb001f,0x3fea0354,0xff01f000,
    0x3e60209f,0x3600002f,0x007e20ff,0x000efe80,0x0fcd7fdc,0xc82ff880,
    0x7fcc03ff,0x3f2f1001,0x3e2ba00f,0x00ffe01f,0xe897fc40,0xfd800005,
    0x40ffed85,0x5ff3005a,0xff500b60,0x2603e001,0xb802efff,0x200001ff,
    0x01325ff8,0x001ffc80,0x005dffb0,0x7f417fc4,0x0ffcc00f,0x7ff17880,
    0x0ffc5e60,0x20007ff0,0x05e8aff8,0x1ff50000,0x21ffc7c4,0x17fa002d,
    0x3fea01e2,0x2a01f000,0x201dffff,0x800007fd,0x0069affa,0x0013fe60,
    0x4006ff88,0x3f222ff8,0x1ff9803f,0x37e4f100,0x03ff13d8,0x88001ffc,
    0x000febff,0x47ff1000,0x7c4dfb5a,0x07fea000,0x1ff50099,0xc8803e00,
    0xff04ffff,0x3600000d,0x10002eff,0x90000dfd,0x7c4005ff,0x2effccef,
    0x003ff300,0x42ff99e2,0x03ff10f8,0x88001ffc,0x00effdff,0x4bfb0000,
    0x2a1ff52d,0x44ff8005,0x0ffa801f,0xd3001f00,0xfff0bfff,0x3e200000,
    0x3f60005f,0x74c0001f,0xf1000ffe,0x0003315f,0x22003ff3,0x93237ec7,
    0x3fe01ff8,0x5ff10003,0x8001dff7,0x47fd400a,0x2d9ffc78,0x50ffc800,
    0x03fe600d,0x3ee003c0,0x0ffec3ff,0x4fe80000,0x07ff5000,0xf89e8800,
    0x5ff1005f,0x1ff98000,0xff98f100,0x7fc41f12,0x000ffe01,0xffb97fc4,
    0x0df9000e,0xc8b77ff0,0x100078ef,0x400b67ff,0x78801ff9,0x3fe60188,
    0x0017fe46,0x004fe800,0x0005ff88,0x0bfee3e8,0x000bfe20,0x2003ff30,
    0xb75fe878,0x3e01ff88,0xff10003f,0x0077fdc5,0x7e4037dc,0x67fd42de,
    0x3bf60005,0x3fe20079,0x49869801,0xf107fdc0,0x0008009f,0xfb0009fd,
    0x2008801f,0x00ffe85c,0x00017fc4,0x44007fe6,0x1f9ffa87,0xff00ffc4,
    0xf8831007,0x077fd42f,0xff9800c0,0x005fff07,0x0277fcc0,0x2e013fe0,
    0x7cc06984,0x001ffc87,0x13fa0015,0x005ff700,0x441ae019,0x7fc405ff,
    0x7fcc0002,0x3a0f1001,0x1ff885ff,0x3600ffe0,0x5417fc40,0x00000eff,
    0x3fe413fe,0x07ff4000,0x803bea00,0x03f980fa,0x3fa213ee,0x000d401f,
    0x7cc009ff,0x5068805f,0x1ffdc01f,0x0007ff10,0x1002ff98,0x05ff501f,
    0x7fc05ff3,0x7c42d403,0x3fff702f,0x07f20000,0x400027cc,0xf90005fa,
    0x02fb881d,0xf9819ff3,0x2fbf600e,0x1000e4c1,0x7f400dff,0x17ae600f,
    0xff1017ee,0x13fea05f,0x07ff7000,0x37c07ea0,0xf303ffa8,0x2a6233df,
    0x4ffa82fc,0x00ffffa0,0x5d01a600,0x00be0000,0xedfffc80,0x2f6602ef,
    0x0cffcefd,0xefffdb80,0xf91001ce,0xb807dfff,0xffffffff,0x2e3fffff,
    0xb80dfffe,0x32effffe,0x05bffff9,0xffffd980,0xfff9301d,0x6cc2b819,
    0x931dffff,0xffffffff,0x64c1ffff,0x642dffff,0x04ffffff,0x00600c00,
    0x00001800,0x10013553,0x004d4c41,0x0000a980,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x55300000,0x01355555,
    0x2aaaaa20,0x2aaaa62a,0x555542aa,0x55530aaa,0x55555555,0x37bbb215,
    0xa8a775c2,0xaaaaaaaa,0x554c2aaa,0x199aaaaa,0x00070000,0x554c1dc0,
    0x099aaaaa,0x9500aa00,0x01100159,0x00001c40,0x80000000,0xddeffd98,
    0x4c403fff,0x221bfffc,0x40aeffd9,0x09cfffa9,0x99bffb31,0x645ffd99,
    0x44bb01ff,0xcccdffc9,0x4c47fdcc,0xeddefffd,0x50002dff,0xf500001f,
    0xdffb310d,0x05dfb999,0xe982ff54,0x401fffff,0x01a2001c,0x1deecb88,
    0x1f7f6c40,0x19dfb710,0x445ff300,0xff006ffb,0x01ffc40b,0xff981ff2,
    0xfe85d102,0xff103f03,0xf983cc07,0xdffc882f,0x01fec000,0x81bfe200,
    0xfe882ff9,0x2ff55c0e,0xffdabee8,0x003f300f,0x4dd00344,0x5d500ff9,
    0x3a217f62,0x1007fee4,0x5ff905ff,0x4409fd00,0x37e402ff,0x5405ff10,
    0x35437d42,0x05807ff0,0x7d405ff1,0x3fe6006f,0x7e6c0006,0x40bfe206,
    0xbf703ff9,0x9ff30b70,0x4003ff10,0x87f50068,0x42f882fe,0x42ec2ff8,
    0x7fc00ff9,0x805ff982,0x17fc04fe,0xf881bf20,0x7f40402f,0x7ff016c2,
    0x0bfe0180,0x2009ff70,0x0002ffdc,0xf80df3b7,0x41bf602f,0xd00c85fb,
    0xefffa8df,0x0068805e,0x83fc83f5,0x5cbfd07b,0x809fd03f,0x0dff02ff,
    0xff809fd0,0x1037e402,0xf70005ff,0x3fe03c4d,0x0bfe0003,0x2201ffa0,
    0x8005fd8f,0x406f98e9,0x3fee02ff,0x0085fa80,0xfd3117ee,0x0d100335,
    0x427f5400,0xccccccfd,0x5c0bf63c,0x417fc07f,0xfe803ffb,0x2017fc04,
    0x3fe206fc,0x7fc01a82,0x3ff80971,0x2ff80730,0x401ffb80,0x001ff55b,
    0x80df31e8,0x1bfa02ff,0x2a002fd4,0x103fd04f,0x3d533333,0x22033333,
    0xe84fcadc,0x40bfa006,0x3fe00ffa,0x800ffe82,0x17fc04fe,0xf881bf20,
    0x5c01d82f,0xff803d5f,0xff807703,0x03ff9802,0x009ff0f4,0x80df3264,
    0x5ff702ff,0x70017ea0,0x207fa03f,0xfeeeeeea,0x41eeeeee,0x213ee3fa,
    0x0ffe007f,0x3fe03fcc,0x0033faa2,0x3fe027f4,0x9999999b,0x3fe206fc,
    0x01fecccd,0xf805cff8,0xfeccccdf,0x4017fc03,0x1aa05ff8,0x1a600ff7,
    0xdff80df3,0x1efecbaa,0xd0017ea0,0x000ff409,0x0fea00d1,0x05fd09f7,
    0x260bfb0c,0x7fffc06f,0x74000fff,0x66ffc04f,0xfecccccc,0x2b3fe206,
    0xb801fcba,0xdff802ff,0x03fcaaaa,0xff8017fc,0xff10b606,0x4c1e8805,
    0x66ffc06f,0x01dffecc,0x6a8017ea,0x1000ff40,0x703fa00d,0x20dfb09f,
    0x541fea39,0xa97fc04f,0x7f4002ff,0x2017fc04,0x3fe206fc,0xf8801b82,
    0x207ff007,0x017fc03a,0x7982ffc4,0x3c80dfb0,0x7fc06f98,0x20bffb02,
    0x07a005fa,0x44003fd0,0xd85ff006,0x77fcc14f,0xff883620,0x7c00fc81,
    0x003ff22f,0x7fc04fe8,0x1037e402,0x003305ff,0x1ffc0136,0x17fc0388,
    0xc81ffd40,0xfeeeeeef,0x555f501f,0x155df755,0x7e405ff0,0x005fa81f,
    0x03fd0079,0xfc803440,0xbefddaae,0x777ffe42,0x20efb83f,0x2ff801fa,
    0xfd002ff4,0x402ff809,0x3fe206fc,0x007c0002,0x20003ff8,0xffb802ff,
    0x9999f882,0x905fe999,0xffffffff,0x5ff01fff,0x542ffcc0,0x004b805f,
    0x344003fd,0x8dffd880,0xff702ff9,0x7fd407ff,0xff002ded,0x003ff985,
    0x2ff809fd,0xf1037e40,0x2d40005f,0x1007ff00,0x8805ff01,0x80b705ff,
    0xaa980ffb,0xaefbaaaa,0x402ff80a,0x05fa87ff,0x5fd002d4,0x00d10022,
    0x98004088,0x01310009,0xfb82ff80,0x04fe801f,0x3f2017fc,0x00bfe206,
    0x3e001e80,0xf80d803f,0x0ffe402f,0x7fc401e8,0x037cc003,0xffa80bfe,
    0x2a05fa84,0x37f60605,0x0001004a,0x00000000,0xb03ff880,0x4ff803ff,
    0x900ffe20,0x17fc40ff,0x07d9db00,0x5403ff80,0x202ff885,0x0f702ffc,
    0x8003ff60,0x3fe206f9,0x207ffa02,0x40b505fb,0x0dff884a,0x00000000,
    0x50000000,0x3fe209ff,0x0bff101f,0x3a027fcc,0x7ff500ff,0x17ffe200,
    0x209ff100,0xffa82fb8,0x37faa20b,0x200bf100,0x26005ffc,0x2ffea06f,
    0x80ffecc0,0xfffa86fb,0x02ffffff,0x00000002,0x00000000,0x6ffffe4c,
    0x2efff982,0x7bffff91,0x6ffffe4c,0x77fff5c2,0xffff930b,0x0393005b,
    0x7fff5c40,0xffffffff,0x3ffff260,0x02bcefff,0x40b7ffee,0x2effffc8,
    0xc986f980,0xffffffff,0xfca80cde,0xfff33dff,0x0fffffff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x88ee0144,0x1541951c,0x26666662,0x09999999,0x22885db1,
    0x04eeeeed,0x00000000,0xd71c9800,0xeec87bdd,0x641ddb94,0x77640eee,
    0xbdddb15e,0x001f76c1,0xbb800000,0xddd50000,0x0bbb669d,0xddddddd7,
    0x000401dd,0x7fcc03f6,0x4ffadf70,0x376a4ffa,0xdddddddd,0x17ea0ddd,
    0x3fffa7ff,0xbdb714ff,0x3fb2205b,0x8fe440ad,0x20004feb,0x7fd43eda,
    0xff989b03,0x6407fd40,0xd06fe87f,0x44fe441b,0x47ee22fd,0x3ae0dfeb,
    0xcfc880df,0x7fe88001,0x4ee407e4,0x04ff9999,0x75400be6,0x21ff304b,
    0x2a7fd6fc,0x800007ff,0x111ff47b,0xf50fc111,0x3217d305,0x27ff6e5f,
    0x004ffddd,0xd80b7ae2,0xff01d04f,0xf101ff01,0x886f983f,0x6cffedc6,
    0x5ffb55ff,0x32bff99b,0x2206ffcd,0x4c002dfb,0x203f13ff,0x406fd80c,
    0x23d003fa,0x2a7f881e,0x44c5fb5f,0xd800000e,0x35400621,0x117a216c,
    0x0dff83ff,0x32601fea,0x6f9801cf,0x01ff04a8,0x13f201ff,0x209507fa,
    0xf8350dff,0x37fe20df,0x2007fe21,0x7000beea,0x1405b1ff,0x6f407fd4,
    0x20d91f88,0x3741aa4b,0x303f29f3,0x4444444b,0x08888888,0x7e4000a0,
    0x0ff214c2,0x83fd036e,0xfb500ff8,0x2fe80017,0x80ff80ec,0x8df300ff,
    0x80745ff8,0x0ff402fe,0x17ec17f4,0x019fb300,0x8009ffb0,0xdfd02ff9,
    0x81ffb1f1,0x6c1ec0f8,0xc87a97c4,0x3ffffee1,0xffffffff,0x7d400001,
    0x03fa00cf,0xff81fe80,0x001775c0,0x0344bf70,0x01ff01ff,0xff790ff4,
    0x1fe81621,0x7ec0ff40,0x8003fc82,0x2201dfc8,0x7f4002ff,0x77765404,
    0xf107b02d,0x98f43b81,0x00003266,0xfc800000,0x01ff04ff,0x7fc0ff40,
    0x0007bea0,0x0b23ff10,0x0ff80ff8,0xdb453ee0,0x7f40593f,0x6c0ff401,
    0x003fc82f,0x4403fea0,0xf9000ffe,0xbdb5100d,0x640d5015,0x47120cc4,
    0x00000000,0xdffd3000,0x2002ff81,0x40ff81fe,0x0002eeb8,0x3e0353f2,
    0x200ff80f,0xf33b8ff8,0x03fd01ad,0x2fd81fe8,0xa8003fc8,0x656c02ee,
    0x0ffa805f,0x4f4ffe40,0x200f44ff,0x0000001e,0x00000000,0x9fd1bff2,
    0x207fa0c0,0x3f6a00ff,0x7fcc000b,0x40ff404a,0x5fec00ff,0x012ffa0e,
    0x1fe803fd,0x3fc82fd8,0x03bf7100,0x0ffa2970,0x4182ff98,0xe89f89ff,
    0x3300510f,0x0c00bc88,0x00000000,0x83fe6120,0xe83506fd,0x800ff81f,
    0x2001cfc9,0x7f400ffd,0x2007fdc3,0x7fdc4ffa,0x200ff401,0x82fd81fe,
    0x7e4c03fc,0xa8d3000c,0x09fd01ff,0x117d4112,0xb9d70000,0x009015df,
    0x80000000,0x7cc6d83c,0x7f424c5f,0x2001ff81,0xa802dfb8,0xaefc805f,
    0x02cffada,0x1be207f4,0xfd007fa0,0xf905fb05,0x00fbaa07,0xdfd03f10,
    0xd306fc81,0x0001fd40,0x9fd71160,0x00005b55,0xfc800000,0x7fec1f40,
    0x7c41fedf,0x002ff82f,0xf801dd50,0x3fffd002,0x990033fe,0x3fe00f60,
    0x7417fc03,0x544fd83f,0xfa8001df,0x3ffea0df,0xdddff53e,0x280dffdd,
    0x00cc0000,0x0003bd93,0x90000000,0x409b7bff,0x541dfffc,0xfb54effe,
    0x4c0007df,0x26000c00,0x01100141,0xffda8026,0x7fecc0cf,0xfffda8ce,
    0xcfffc98c,0x00000130,0x00000000,0x00000000,0x00000000,0x98006608,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_29_usascii_x[95]={ 0,2,1,0,1,0,0,1,1,0,1,0,1,1,
1,0,0,3,0,1,0,1,1,0,1,1,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,-1,1,0,-1,0,0,0,1,0,0,0,
-3,0,0,0,0,0,-1,0,0,1,0,0,0,0,0,0,0,3,2,2,0, };
static signed short stb__times_29_usascii_y[95]={ 23,5,5,5,4,5,5,5,4,4,4,7,20,16,
20,4,5,5,5,5,5,5,5,5,5,5,10,10,8,11,8,5,4,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,27,5,10,4,10,4,10,4,10,4,4,
4,4,4,10,10,10,10,10,10,10,7,11,11,11,11,11,11,4,4,4,14, };
static unsigned short stb__times_29_usascii_w[95]={ 0,4,8,13,11,21,20,3,8,8,11,15,5,7,
4,8,13,7,13,10,13,11,12,12,11,11,4,5,15,15,15,10,23,19,17,17,18,16,14,19,19,9,11,20,
16,23,20,18,14,18,18,13,16,19,19,25,19,19,16,6,8,7,12,15,5,12,14,11,14,11,11,13,13,7,
9,14,7,21,13,13,14,14,9,9,8,14,13,19,13,13,12,8,2,8,15, };
static unsigned short stb__times_29_usascii_h[95]={ 0,19,8,19,21,19,19,8,25,25,12,15,8,3,
4,20,19,18,18,19,18,19,19,19,19,19,14,18,13,6,13,19,25,18,18,19,18,18,18,19,18,18,19,18,
18,18,19,19,18,24,18,19,18,19,19,19,18,18,18,24,20,24,10,2,5,14,20,14,20,14,19,19,19,19,
25,19,19,13,13,14,19,19,13,14,17,13,13,13,12,18,12,25,25,25,4, };
static unsigned short stb__times_29_usascii_s[95]={ 253,240,202,41,108,55,77,211,56,65,177,
198,215,248,243,129,98,167,175,112,135,123,135,148,161,173,250,249,37,221,134,
197,1,115,149,81,96,79,50,229,30,20,185,229,212,188,208,198,156,74,1,
67,171,47,27,1,136,99,119,101,120,93,189,108,237,214,138,11,153,227,29,
15,1,245,25,225,217,112,23,239,183,168,102,1,189,67,53,82,150,65,164,
47,44,35,202, };
static unsigned short stb__times_29_usascii_t[95]={ 1,1,85,27,1,27,27,85,1,1,86,
67,85,85,85,1,27,67,67,27,67,27,27,27,27,27,47,27,86,85,86,
27,1,67,67,47,67,67,67,27,67,67,27,47,47,47,27,1,47,1,67,
47,47,47,47,47,47,47,47,1,1,1,85,23,85,67,1,86,1,67,27,
27,27,1,1,1,1,86,86,67,1,1,86,86,67,86,86,86,86,67,86,
1,1,1,94, };
static unsigned short stb__times_29_usascii_a[95]={ 105,140,171,209,209,349,326,75,
140,140,209,236,105,140,105,116,209,209,209,209,209,209,209,209,
209,209,116,116,236,236,236,186,386,303,279,279,303,256,233,303,
303,140,163,303,256,373,303,303,233,303,279,233,256,303,303,395,
303,303,256,140,116,140,197,209,140,186,209,186,209,186,140,209,
209,116,116,209,116,326,209,209,209,209,140,163,116,209,209,303,
209,209,186,201,84,201,227, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_29_usascii_BITMAP_HEIGHT or STB_FONT_times_29_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_29_usascii(stb_fontchar font[STB_FONT_times_29_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_29_usascii_BITMAP_HEIGHT][STB_FONT_times_29_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_29_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_29_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_29_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_29_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_29_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_29_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_29_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_29_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_29_usascii_s[i] + stb__times_29_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_29_usascii_t[i] + stb__times_29_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_29_usascii_x[i];
            font[i].y0 = stb__times_29_usascii_y[i];
            font[i].x1 = stb__times_29_usascii_x[i] + stb__times_29_usascii_w[i];
            font[i].y1 = stb__times_29_usascii_y[i] + stb__times_29_usascii_h[i];
            font[i].advance_int = (stb__times_29_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_29_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_29_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_29_usascii_s[i] + stb__times_29_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_29_usascii_t[i] + stb__times_29_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_29_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_29_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_29_usascii_x[i] + stb__times_29_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_29_usascii_y[i] + stb__times_29_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_29_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_29_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_29_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_29_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_29_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_29_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_29_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_29_usascii_LINE_SPACING
#endif

