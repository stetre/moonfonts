// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_16_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_16_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_16_usascii_BITMAP_WIDTH         128
#define STB_FONT_times_bold_16_usascii_BITMAP_HEIGHT         80
#define STB_FONT_times_bold_16_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_bold_16_usascii_FIRST_CHAR            32
#define STB_FONT_times_bold_16_usascii_NUM_CHARS             95

#define STB_FONT_times_bold_16_usascii_LINE_SPACING          10

static unsigned int stb__times_bold_16_usascii_pixels[]={
    0x05577310,0x0c0b1d88,0x10cb98ea,0x6664c039,0x030bc982,0x771ccb80,
    0x80b2f260,0x32649cca,0x3660cd9c,0x5c2a9540,0xf701c41c,0xd70e21a7,
    0x0fc43f30,0x41db0fec,0x1701c0fb,0x81a87fc4,0x703ba1fd,0x9ff1be6f,
    0x21fecbf3,0x01dc592c,0xf11a180e,0x1f985d81,0x89f90fe2,0x503ee6f9,
    0xfc81f30d,0x989f9073,0x7c5be26f,0x23fd3fc6,0x0e8742fc,0xa5de4475,
    0x68e5c408,0x4c3e42dc,0xf88be61f,0xb97fc42f,0x3ea2f80f,0x23be22cf,
    0x7c17fc42,0x3e29f52f,0x25fb3fc6,0xddfd91fa,0x9be896bf,0x4fee0a5f,
    0x43dc2746,0x987e61f9,0x74ff81ff,0x7449d01f,0x06fec09f,0x3fe07fe6,
    0x1be2bf34,0x788fecff,0x476a76a2,0x51fd5f65,0xf89a7f70,0x1f983d84,
    0x01ff516c,0x203ee9fd,0x4c07f46d,0x80ffa85f,0x7c5be4fe,0x0ff87fc6,
    0x4cea7516,0x43f69f14,0x4d3fb808,0x981643fa,0x3fe2c81f,0x1f71ff81,
    0x07f41fb0,0x03ff01e8,0x66f4c3ff,0x7eeffc6f,0xdddd9142,0x2bea73bd,
    0x7dc0a6f8,0x6c27c4d3,0x1e41f982,0x4ff10bf2,0x747d80fb,0x7e40700f,
    0x8883fc42,0x800bfc6f,0x899e99e8,0x29f79f74,0xd3fb8099,0x987b84e8,
    0xd307e61f,0x3ee2fb8d,0x47f44e80,0x4c051d50,0x101fe46f,0x2e07f8df,
    0x9a469a1f,0x0a35b94f,0x17234fee,0x987e61f2,0xbb7d702f,0x2f80fb81,
    0x4fa86fd4,0xecbed880,0x98ffd402,0x25f702ff,0x0388b359,0x1a7f7028,
    0x986d81f3,0x980fe21f,0x40fb81ff,0x000000e9,0x40000006,0x54044220,
    0xc9815102,0x8730d2fa,0x221f986b,0x577d401f,0x01703ee0,0x00000000,
    0x44000000,0x80aaaaab,0x441a5ce8,0x19711dc1,0x54400b22,0x215930ac,
    0x00000001,0x00000000,0x00200000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xa80b0b22,0x415d40bb,
    0x66dc4048,0x6664c29b,0xa665dc42,0x1e5c3cca,0x20039730,0x64cb03cb,
    0xb83ba804,0x974e5e44,0x3eabb01c,0xd83f1d70,0x4c33ea01,0xe86fc84e,
    0x7fdc3fb5,0x32d302c3,0x30df1006,0xb5407f89,0xf987f44d,0x21265349,
    0x3a7f15f9,0x502549f5,0xf70930bf,0x3f94fa8b,0x070ffed4,0x2006ab6c,
    0x3f42b86f,0x10fdd7e0,0x412f7cc3,0xf9bff886,0x344fedb1,0x40c0bfa0,
    0xda7c45fb,0x3ffa2a0f,0x65fec070,0x3eb6e201,0xc9fe8686,0x7dd3e60c,
    0xffd89932,0xffb81c83,0x43a7aa1f,0x07fe201d,0xe985fb80,0x7c4541db,
    0x37e4075f,0x47ec19d5,0x742c46fc,0x3ea6f9bf,0x43fc9f74,0x81d45ffb,
    0x2a185ffe,0x7d415514,0x17ee000f,0xf30a8072,0xd3b1079f,0xbf11a29f,
    0x3a0ae37c,0xa7dc7fa7,0x641fa4fb,0x3a2342ff,0xd103ff9b,0xff13d674,
    0x22fdc003,0x20bdeef8,0x217fea0a,0x395ff34e,0xb1be4fa8,0x97ecfd01,
    0x747f75fa,0x27c64227,0xf72fa836,0x5fc47609,0x00ffa1fa,0x3217eeb7,
    0x02a5ffff,0x26f98df9,0x5f984ffb,0xfd0589be,0x75f887ec,0x2733f45f,
    0x223a85f4,0x9503f32f,0x107d5fc4,0xf92a81ff,0x46987f91,0x1b606e5a,
    0x3fa19ff1,0x4dbe0bbf,0x7f40ea6f,0xf95d8dd0,0xb9d30ff8,0xdb8b1077,
    0xc86883ca,0xded885bc,0x3ab622cb,0xcbacd885,0x5881bd30,0xc9dffeb8,
    0x6774c2ff,0x3a01b1ef,0x7440ebcc,0x0bfe61ea,0x010080b1,0x801880cc,
    0x00022008,0x10100400,0x00408401,0x00100221,0x00000000,0x00000000,
    0x00000000,0x00000000,0x32e02f6a,0x435102cc,0x543ccccb,0x3bb82acc,
    0x300bca88,0x987399b7,0x8f2e3ccb,0x32a1bcca,0x5179950c,0x865c5999,
    0x9712ccc9,0xfb9264c7,0xffff889f,0x3e21f441,0x4f23ffff,0x5ea6c6c8,
    0xfc87f96c,0x3ee1f663,0x84fe8587,0xf91ffc1c,0x7fe4398d,0x45fe0ee1,
    0x99b8df31,0x4c274419,0xf11faaad,0x64fe6587,0x17ecfe2f,0x50d10bf7,
    0xff5090df,0x44df7090,0x7f40e1ff,0x21fa0916,0x05ef42f8,0x260407ec,
    0x042ffe26,0x893ee9f7,0x17fc1fd0,0x486fa818,0x40d47ff0,0x93fe1ff8,
    0x097ff303,0x87f623f4,0x7c3ffff9,0x0f204fdf,0xf985fff9,0x3d309f76,
    0x5000ffcc,0x3ee090df,0x34fd8126,0xb8066ff9,0x51fa01ff,0x32a21fff,
    0x2bf30ffe,0x703d02fc,0xafe89fff,0x540c82fd,0x3ea000ff,0x3ff10486,
    0x47fd4033,0xd0075ff4,0xe83f40df,0x2a7f701f,0xd309f75f,0x03ff6208,
    0x0301fd75,0x7ec43ff1,0x2437d43f,0xd007bf90,0x0fbf259f,0x207ff750,
    0xe80f707e,0x13e6bf33,0xfb87312e,0x4004f882,0x43fd43fe,0x260487f9,
    0x7fb802ff,0x38803fe6,0x2fd03ff7,0x1c992a3a,0x5f57e832,0x4c7983d0,
    0xf704d886,0x541ff103,0x20ff887f,0x803f4029,0x102f44f8,0xfe86fe8b,
    0x20aaefb8,0x440bdfe9,0x86983dce,0x41cabed9,0x07f202ba,0x7655f6c4,
    0x799ff303,0x6c007500,0xdea815c0,0x21bffb11,0x10022ff9,0x00440100,
    0x08002022,0x44003100,0x02000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x64c00000,0x24cccccc,0x0abcccc9,0x7300cc98,0x26015999,
    0x019931ca,0x540665cc,0x99730bcc,0x332e6017,0x970b32a3,0x4c599999,
    0x99953ccb,0x8cb83665,0x5c1d17fa,0xd05fd36f,0x477d401f,0x6d7c44fc,
    0xd5003fa5,0x81ffd09f,0x7fa807fb,0x71741744,0x47fa81ff,0xb8ff25fd,
    0x5054ff50,0x6c37dcdf,0x45be600f,0x20bee0ff,0x7dd400fe,0x21feea0f,
    0x7fa806fa,0xf11c0322,0xc8ff507f,0xfa80e24f,0xfa9bea07,0x0dc9fd86,
    0x1ff8b7cc,0xfe83bfd5,0x4541cb88,0x1fe723fe,0x3ea01bea,0x7ec00937,
    0xfc8ff506,0x81fea004,0x20bf66fa,0x4c5facfd,0xfc8bf76f,0x0390fe82,
    0x2a2df715,0x06fa87f9,0x02faffa8,0x2a03ff50,0x4fd999ff,0xa81fea00,
    0xb01ffcef,0xf98df11f,0x2fc82cbf,0x500c8fe8,0x2675ff11,0x806fa87f,
    0x00ffdffa,0x3ea04fe8,0x24feaaaf,0x0ff502fc,0x04feb7d4,0xf31be1fb,
    0xe82fc80d,0x21503fdf,0x0ff33efc,0xfa810df5,0x6401dfd7,0xff5040ff,
    0x13f64fc8,0xdf503fd4,0x3f60bfe6,0x06f98df0,0x57f417e4,0xf10a80ff,
    0x2a1fe61f,0xbfd4386f,0xff305ff8,0x1fea1a85,0x503989f9,0x737d40ff,
    0x89fe81ff,0x2037d47f,0xa8fe82fc,0x9760a86f,0x47fa87f9,0xf53fd468,
    0x88dfd09f,0xfb1fea0e,0xfd880b89,0x7fecc0af,0x7c47bfa2,0xb31ffabf,
    0x3fa205ff,0x7cffe60d,0x5473664f,0x217ff911,0xfcccffd9,0x4cfff626,
    0xff50cfff,0x44ff999b,0xdfd52ffd,0x00000023,0x00000000,0x00000000,
    0x00000000,0x1ccca800,0x65cc2f26,0x731ccccc,0x21999999,0x81acccc9,
    0x2e63ccb9,0x800abccc,0x98075002,0x301ed444,0x20000005,0x541d86fd,
    0xfa8b627f,0x6fb87a67,0x7fa81df3,0x1ff56fb8,0x3aa03540,0x917e205f,
    0x12a09fff,0x1dcb6440,0x445ff100,0x1447fa83,0x70cc4ff5,0x5077d4df,
    0x6cdf50ff,0x00bfa04f,0x2fec0bf5,0x541fee73,0x2176d404,0x6400bed9,
    0x3fd4126f,0x337fa827,0x7fc4df70,0x3ea1fea2,0x74c0bfa6,0x82fd405f,
    0x9be05fab,0x199db998,0x88039d71,0xff101ceb,0x3fea0357,0x9ffa84b8,
    0x746fb81e,0x2a1fea4f,0x202ecaef,0x2a01ff9c,0x5f8a985f,0x66547f10,
    0x9f74cced,0x17ee2001,0x2a04ffb8,0xfa84ebff,0x6fb81fbf,0x0ff52fec,
    0x19f95df5,0x813f6510,0xf8a445fa,0x2540d705,0x302deb88,0xff0017d9,
    0x48bfd405,0x70357fa8,0x2a4fe8df,0x326fa87f,0xfb99c85f,0xc8bf500f,
    0x442efdcd,0x2012a00e,0x5bb53ed9,0x202ff800,0x3ea067fa,0x6fb8e117,
    0x7fa87fe2,0x1fea6fa8,0x7fd33371,0xdd717ea0,0x20c87ffd,0x22004a81,
    0x3e000353,0x01fea02f,0x2e598ff5,0xf513f26f,0x7ecdf50f,0x3fee0644,
    0x2205fa80,0x7f77645f,0x00000001,0x81dffa88,0x980bffd8,0x4feccffd,
    0x5bd9ffb3,0x262ffd98,0x42cccffd,0xff910bfa,0x17fecc1b,0x3fea5f88,
    0x00000fff,0x00000000,0x00000000,0x00000000,0x00000000,0xb8ccb800,
    0x950c98cc,0xcc98ee39,0x83663ca8,0xb980ccb8,0x415e540b,0x2b980bb9,
    0x0664e644,0x23935993,0x225a8cc8,0xc89dc8cc,0x32ef260d,0x22ff1004,
    0x7fc4717f,0x88fe8370,0x3e8ff26f,0x4bf5c8df,0xb64488f8,0x175720ec,
    0x917eb7fa,0xbfd8537f,0x273f60fd,0x2a5f9bff,0x27cc9f91,0x9fe9afc8,
    0x839fe40a,0x226f88fe,0x23f4fa23,0x77cc773f,0x7d53e209,0x362ecfe3,
    0xff88df0f,0xfb03fd83,0x426f9fa1,0x1fe60ff9,0x67d5efcc,0x828ef883,
    0x806f88fe,0x9f50ffca,0xf517ff40,0x6fd53ea9,0xf87ec2aa,0xfd84fb86,
    0x9fa1fb01,0x902fe87f,0x2ff97f40,0x3fa0bfb0,0x32046f88,0x1be61fd6,
    0xa7ccff90,0x40bf33fb,0xf30df0fd,0xb00fd81f,0x47f9fa1f,0x403306fa,
    0x4c0f90fb,0xf31fb03f,0xdf897dcd,0x4ffa0ff9,0x3a3e4a61,0x8ffc1f75,
    0x37c47ec2,0xfb17eae2,0x7f47f603,0x8ffc4ff0,0x4b100224,0xa8074059,
    0xf71ffbef,0x3f2bba25,0x987bf663,0x564c3dbe,0x077ecc1c,0x3ff57ff1,
    0x4ffe6f66,0xfe883fe8,0xffaaff9b,0x0fb7df91,0x04008100,0x00010020,
    0x02008802,0x00000010,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x981900e6,0x01dc3914,0x2aaaa600,0x982222aa,0x3bbba23e,
    0x00001eee,0x00000000,0x4207f600,0x267f609f,0xfd89fe4f,0xaafc4a1c,
    0x93bbbbbb,0x23545fff,0x00888888,0x00000000,0x36a00000,0x5de7c45a,
    0x7f11f71f,0xd711536c,0x897e25bd,0x53088888,0x00028155,0x00000000,
    0x0e800000,0x0ac9885b,0x92e1e9a6,0x3b200880,0x006eeeee,0x00000000,
    0x00000000,0x2234c970,0x871c2e8f,0x00000019,0x00000000,0x00000000,
    0x04c09800,0x00006a71,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__times_bold_16_usascii_x[95]={ 0,1,1,0,0,1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0, };
static signed short stb__times_bold_16_usascii_y[95]={ 12,2,2,2,2,2,2,2,2,2,2,3,9,7,
9,2,2,2,2,2,2,2,2,2,2,2,5,5,3,5,3,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,2,5,2,5,2,5,2,5,2,2,
2,2,2,5,5,5,5,5,5,5,2,5,5,5,5,5,5,2,2,2,6, };
static unsigned short stb__times_bold_16_usascii_w[95]={ 0,3,6,7,7,13,12,4,5,5,7,8,4,5,
3,5,7,7,7,7,7,7,7,7,7,7,3,3,8,8,8,7,14,11,10,10,10,9,9,12,11,6,8,12,
10,14,11,11,9,11,11,8,10,11,11,15,11,11,10,4,5,4,7,9,4,7,8,7,8,7,6,7,8,4,
5,9,4,12,8,7,8,8,7,6,5,8,8,11,7,8,7,5,2,5,8, };
static unsigned short stb__times_bold_16_usascii_h[95]={ 0,11,5,11,11,11,11,5,13,13,6,9,6,3,
4,11,11,10,10,11,10,11,11,11,11,11,8,10,8,4,8,11,14,10,10,11,10,10,10,11,10,10,11,10,
10,10,11,11,10,13,10,11,10,11,11,11,10,10,10,13,11,13,6,2,3,8,11,8,11,8,10,11,10,10,
14,10,10,7,7,8,11,11,7,8,11,8,8,8,7,11,7,13,14,13,4, };
static unsigned short stb__times_bold_16_usascii_s[95]={ 71,116,17,120,1,23,77,24,25,65,9,
98,120,51,38,99,114,74,90,1,82,9,17,25,15,42,31,122,107,42,116,
50,1,62,51,37,33,23,13,58,110,44,48,86,75,60,65,86,33,48,12,
33,1,71,83,95,111,1,99,60,9,37,1,62,57,35,105,43,90,66,43,
57,24,122,16,50,123,99,74,58,107,98,91,51,71,22,13,1,83,77,112,
31,22,42,29, };
static unsigned short stb__times_bold_16_usascii_t[95]={ 13,1,71,1,16,16,16,71,1,1,71,
51,62,71,71,16,16,51,51,28,51,28,28,28,16,28,62,40,51,71,51,
28,1,51,51,16,51,51,51,28,40,51,16,40,40,40,16,1,40,1,40,
28,40,28,28,28,28,51,40,1,16,1,71,71,71,62,16,62,16,62,40,
16,40,16,1,40,28,62,62,62,1,1,62,62,1,62,62,62,62,1,62,
1,1,1,71, };
static unsigned short stb__times_bold_16_usascii_a[95]={ 58,77,128,116,116,231,193,64,
77,77,116,132,58,77,58,64,116,116,116,116,116,116,116,116,
116,116,77,77,132,132,132,116,215,167,154,167,167,154,141,180,
180,90,116,180,154,218,167,180,141,180,167,129,154,167,167,231,
167,167,154,77,64,77,134,116,77,116,129,103,129,103,77,116,
129,64,77,129,64,193,129,116,129,129,103,90,77,129,116,167,
116,116,103,91,51,91,120, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_16_usascii_BITMAP_HEIGHT or STB_FONT_times_bold_16_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_16_usascii(stb_fontchar font[STB_FONT_times_bold_16_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_16_usascii_BITMAP_HEIGHT][STB_FONT_times_bold_16_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_16_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_16_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_16_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_16_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_16_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_16_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_16_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_16_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_16_usascii_s[i] + stb__times_bold_16_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_16_usascii_t[i] + stb__times_bold_16_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_16_usascii_x[i];
            font[i].y0 = stb__times_bold_16_usascii_y[i];
            font[i].x1 = stb__times_bold_16_usascii_x[i] + stb__times_bold_16_usascii_w[i];
            font[i].y1 = stb__times_bold_16_usascii_y[i] + stb__times_bold_16_usascii_h[i];
            font[i].advance_int = (stb__times_bold_16_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_16_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_16_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_16_usascii_s[i] + stb__times_bold_16_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_16_usascii_t[i] + stb__times_bold_16_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_16_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_16_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_16_usascii_x[i] + stb__times_bold_16_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_16_usascii_y[i] + stb__times_bold_16_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_bold_16_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_16_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_16_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_16_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_16_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_16_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_16_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_16_usascii_LINE_SPACING
#endif

