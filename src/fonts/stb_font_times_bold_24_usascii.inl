// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_24_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_24_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_24_usascii_BITMAP_WIDTH         256
#define STB_FONT_times_bold_24_usascii_BITMAP_HEIGHT         82
#define STB_FONT_times_bold_24_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_bold_24_usascii_FIRST_CHAR            32
#define STB_FONT_times_bold_24_usascii_NUM_CHARS             95

#define STB_FONT_times_bold_24_usascii_LINE_SPACING          16

static unsigned int stb__times_bold_24_usascii_pixels[]={
    0x30159005,0x20164c09,0x4002b882,0x4400acb9,0x2a202aaa,0x2600abcb,
    0x03601aaa,0x9aba9880,0x200e4c00,0x00100080,0x7703a832,0x00039001,
    0x22003771,0xaaaaaaaa,0x701bb880,0x2aaaa003,0x0b621aaa,0x3d41fd88,
    0x36602fc8,0x201ffc81,0x511bddb8,0x3fe44079,0xea9aefb8,0x03dfb03f,
    0x17bbf991,0x5cd77dc0,0x3ffa03fe,0x9cddeb80,0x2fbb662e,0x2601dffb,
    0x7f51360f,0x036407f5,0x3fab7620,0xffffa803,0xafb87fff,0x02e40efa,
    0x03ffff30,0x3fc405f1,0x817ea1ea,0x1ff901f9,0x2a00baa0,0xd11fea03,
    0xefe881ff,0x7cc27ec0,0x2213e6d3,0x7fc40efe,0x17ffc40e,0x2ffe93f2,
    0x74df7fdc,0xf8f700ef,0x3fc4ff42,0x5c001f98,0x801ff51f,0xfffffffc,
    0xbfb3fd45,0x7f400798,0x407f205f,0x21ea1ff8,0x0bf104fc,0x1ea80d44,
    0x7d40e600,0xa817fec7,0x427ec4ff,0x425cd1fd,0xff502ffd,0x541ffd09,
    0x0bff61ff,0x7fd4bff5,0x0fc4b904,0x5ff11ff3,0xfd0007d0,0x3a01be23,
    0x2fcaabde,0x7ff737f4,0x3f6002f8,0x41be205f,0x21ea1ff9,0x05fb05fc,
    0x0407e200,0x4ff50190,0xf100fffa,0x427ec3ff,0x5438d5ff,0xff100fff,
    0x6c7fd83f,0x217fe47f,0x3fe24ffa,0x23d47d06,0x87ff0ffa,0xff98006b,
    0x48807f34,0x7fc41f90,0x9913fea5,0x02ffec00,0x1fea0bfa,0x10ff70f5,
    0x3b6a01ff,0x7441ec1e,0x0a25ebcd,0x6ffd9fea,0xfb27ff40,0x0fdffb09,
    0x7406ffd8,0x22fe44ff,0x17fe47ff,0xfff13fea,0x7fffffe4,0x3ff12fff,
    0x0fcc1ff1,0x5fffc400,0x2f40001d,0xff99bfe6,0xfb003d46,0x86fd80bf,
    0x4c3d46fb,0x406fc87f,0x207c1ffd,0x89ff76f9,0x3fa7fa83,0x37ff405f,
    0xfff509fb,0x2fff407f,0xf51bffa0,0x323ffc47,0x27fd42ff,0xfca99ffe,
    0x20adeaab,0x745f9afd,0x3ffa0003,0x01666545,0x3ffc17cc,0x03f0fff1,
    0x9017ff60,0xa8df10ff,0xfe85f987,0x30ffec06,0xf71ff88d,0x7fa8485f,
    0xd80bfff1,0x413f67ff,0x40dffffb,0x6c05fff8,0x20fc47ff,0x17fe47fe,
    0xff893fea,0x817c7b86,0x035c2cca,0xfffdc880,0xc801fec2,0x31ffc80f,
    0x009b0bff,0xf7017ff6,0x543f701f,0xff80ec87,0x70ffec05,0x3f25fd89,
    0x3fd41c0f,0xfd80bfff,0x9813f67f,0x7c0efffe,0x7ff405ff,0x7fe40e87,
    0xf50bff20,0x427fcc9f,0x0007e25c,0x6e64c3f3,0x3f65f501,0x801720ff,
    0x7fff305e,0x0d507ff9,0x7017ff60,0x532603ff,0x202f627a,0x7ec05ff8,
    0xff88b61f,0x05317fa2,0x37ff4ff5,0xfd9bffa0,0x3ffff804,0x3e037ff4,
    0xf98586ff,0x85fff34f,0xff93fffa,0x6677e541,0xd001ccfd,0x2fcb7c47,
    0xfff13fcc,0x4c003a2d,0x6eed402f,0x01f881ff,0x5c05ffd8,0x25b701ff,
    0xf80edc7a,0x0ffec05f,0xa87fdc1f,0x540543ff,0x01fff27f,0x27ec9fff,
    0x237fd740,0x7fc07ffc,0xff50184f,0xa85ff99f,0x1effdcff,0x7f777f5c,
    0x6b802eef,0x45fcafdc,0x3fe60ffc,0x32001dcf,0x1ffa000f,0x360983d8,
    0x7fdc04ff,0x1ea0fd80,0x17fa0bee,0x0f43ffb0,0x0fff4ffb,0x89fea091,
    0xff300fff,0x2427ec1f,0x3e23fe5a,0xfff300ff,0x32130001,0xa7fd42ff,
    0xd83e6008,0xd07e6004,0xf83feebf,0x7ffe43ff,0x002f4006,0x35c01ff3,
    0x7fec3fee,0x4c3fe403,0x7cc3d46f,0x6c06fd86,0xfe8b21ff,0x647fcc8f,
    0xfc8ff500,0x87ff904f,0xab4684fd,0x04ffc84f,0xbf707ffb,0x50bff200,
    0x1ae009ff,0x41f4005f,0xd8df75fc,0x7ff41fff,0x260488df,0x3fd1003f,
    0x3f20f880,0x805ffd1f,0x46fb85fd,0xb87fa87a,0x0ffec07f,0x57ffe477,
    0x221916fb,0x7dc3fd42,0x41ffcc1f,0x5a5e84fd,0x3ff701fc,0xff02ffa8,
    0x5ff9003f,0x9004ffa8,0xb800fc4b,0x3f2df306,0x67fffcc3,0xffffeeba,
    0x003ee01f,0x74007fa2,0xeff97e23,0x540ff400,0x7dc3d47f,0x6c01ff06,
    0xe99a21ff,0x179fb11e,0x983fd424,0x1dfdbdfd,0xdf909fb0,0x98019bf9,
    0x1dfdbdfd,0x6c01bf20,0x2ffe43ff,0x01ea3e80,0x1fb00fcc,0xffb501bd,
    0x7ffe47ff,0x2a02f403,0x2dc001bb,0x037f736a,0x3e20bf30,0x3f21ea1f,
    0x6c07f705,0x002541ff,0x07fa8298,0x2027ffc4,0x1e6604fd,0x0004c400,
    0x3332e001,0x5999931c,0x00441300,0x1b8802b8,0x31009880,0x08802600,
    0x440a2000,0x803b6001,0x321ea0ff,0x421f604f,0x01d80ffc,0x7fa81cc0,
    0x02fff980,0x00a013f6,0x00000000,0x00000000,0x00000000,0x00000000,
    0x0f980000,0x0f517e60,0x23e80df3,0x207fb9fb,0x4077003c,0xff5007fb,
    0x4fd8239f,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xdea8032a,0xcf983d40,0x57ccee00,0x56cc02fc,0x03973109,0x801ffae2,
    0x21ceeca8,0x0001bffd,0x00000000,0x00000000,0x00000000,0x00000000,
    0x80080000,0x9809300a,0x37730401,0x5e5d4c00,0x0000000a,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x2aaaa600,0x02aaa981,0x1ca98004,0x55009300,0x0e4c0155,0x001aaa98,
    0x54c01ca8,0x2002aaaa,0x65cc4029,0xc980a1cc,0x9510111c,0x5e544005,
    0x5555460a,0xaaaa88aa,0x2aaa21aa,0x55555531,0x855554c5,0x42aaaaaa,
    0x510aaaa8,0x20800355,0x40ffffb8,0xc981dfa8,0x42eeeece,0x04fc8cfc,
    0x7f4c02e4,0xe9ce882f,0x009ff906,0x077fffd4,0x5ffffff8,0x2016ed40,
    0xeb9bdfea,0x9bea87df,0x6641eeeb,0x2a03ffc8,0xefcacefe,0x5fffd13e,
    0x41ffff4c,0x7ff4c4f9,0x06fcc41f,0x017fffb1,0x7e419fb1,0x17f2005f,
    0x360dfff9,0xfb0ff982,0x23fcc15d,0x00be01ff,0x7ec17fe4,0xff509f71,
    0x373a2009,0xffa83fff,0x3201ffff,0x2ffc803f,0x4f88ff70,0x8fe61fb8,
    0xffa80fff,0x7d47f904,0x7ffcc2ff,0xffb01d03,0x7c416c0d,0x212e03ff,
    0x3e005ff9,0x3ffb21ff,0xfd81b84f,0xfb07fee7,0x982fec1f,0x5ff9000f,
    0xff30ffa8,0x004ffa83,0xd86ffb89,0x202aaaab,0xffb803fc,0x3ee3ec05,
    0x37e43f03,0xffa87ff9,0xfd0fe205,0x0bffd0bf,0x1bff2093,0xdffb01c8,
    0x7fcc06c0,0x91bf6005,0xb87fffd3,0xf537fc41,0x23ffe85f,0x80b704fd,
    0xd85ff908,0x50ffe67f,0x100049ff,0x00e889ff,0x2601ff20,0x34401fff,
    0x86e07ff6,0x8bff23e9,0x5401fff8,0x207ffdc3,0x0e40fffb,0x3206ffc8,
    0x05fff301,0x17fe6093,0xf1190300,0x40dc3fff,0x03fee7fe,0x3fe9fff9,
    0x36207d00,0x42ffccff,0x13fe67fe,0xdfd59ff5,0x50bf3003,0x4405bdff,
    0x7e4014ff,0xfc83007f,0x74000cff,0x3ffea0ef,0x7fc40800,0x1fffdc3f,
    0x06ffc81a,0x5ffe8072,0xbff301c8,0x8006775c,0x1ffff30c,0x43fe606e,
    0xffe884fd,0x1f100def,0x3ea9fd10,0x33ffc2ff,0xfffa8dff,0x200ffd8b,
    0xffd83fe8,0xfb81efff,0xe81cffef,0xf30006ff,0x0019ffff,0xffd81df3,
    0x3ff60006,0x537fef46,0x037fe407,0x7ffd4039,0xff981621,0x320017c5,
    0x5d7ffee0,0x5bbfd101,0x77fff440,0x3f20d700,0x88bff20f,0x1ffe67ff,
    0x7fcc9ff5,0x9ffff705,0xffffffe8,0x44ffec0f,0x7ffc1ffe,0x3fea0005,
    0x6c01ffff,0x05fff80d,0x47ffe600,0xb1fff9c9,0x037fe401,0x4fff8039,
    0x5ff9806e,0x190100b2,0x1bcfffc8,0x6c400590,0xe80efffe,0xfc8ffd03,
    0x99ffe22f,0x27fd47ff,0x7dc0dff1,0xd9880fff,0x3ffc4fff,0xfff89ff3,
    0x7ec40005,0xb101ffff,0x002fffc0,0x86d7ffa0,0x4058cffe,0x07206ffc,
    0x161fff70,0x0f2bff30,0x80c8bfd0,0xb81efffe,0x2a0099bf,0x89fff76f,
    0x8fff01f8,0x3ffc2ffc,0xffa8bff3,0x2203ffc4,0x7cc03ffe,0xf1ffe26f,
    0x86ffd8df,0x1dffffb8,0x0bfffd50,0x7ffd80a6,0x7ffdc000,0x2fffee59,
    0x037fe402,0xfff88039,0x7fcc02ab,0xf300ffcd,0x440645ff,0xfd81ffff,
    0x42efffff,0x1bfee4fe,0x1ffe20d5,0x7fe85ff9,0xff513fe6,0xb807ff89,
    0x6fa803ff,0xfff07ffc,0x903ffe41,0xf7058fff,0xb80220ff,0x440007ff,
    0x3e22efff,0xffc807ff,0x32007606,0xf9805eff,0x205ffdff,0x40323ffe,
    0xfa81fff9,0x1fffffff,0x7fc47ff1,0xffd026c7,0x3617fe41,0x50ffe67f,
    0x05ff89ff,0xf001ff88,0x3a1ffd89,0x0fffcc6f,0x1747ffb8,0x8000ffc8,
    0x0002fff9,0x7ec37fec,0x7ffa804f,0x7fcc01a0,0x5ff9803f,0x1d805ffd,
    0x1ffa8072,0xcbabce98,0xd13fa2ff,0x900fc4bf,0x17fec3ff,0x7fcc3fe6,
    0xf127fd40,0x7c05c47f,0x41f81d46,0x13fe2ffb,0x7dc1bfea,0xfa83747f,
    0x201fe986,0x3600fffa,0x20ffe601,0xf8801ffa,0x005980ff,0x26003ffa,
    0x1fff35ff,0x807d1a20,0x82fc41fc,0x89bea0fa,0x301ea1ff,0x3ffeabff,
    0x7f92fd83,0x7dcbff50,0xf51ffdc5,0x7177fc41,0x7c57f605,0x09ff700e,
    0xcfe8fff7,0x7e40fec0,0x6ffd404f,0x7401ecc1,0x400df00f,0x074c5ffc,
    0x2009f500,0x3ff26ff9,0xfb51c885,0x40ec019f,0xea989bfd,0xeebdfc82,
    0x7d4026c1,0x1defcbff,0x503fcec8,0x09d7bb5d,0x19bfffd1,0x3bdffd70,
    0x0ddcfc80,0x5effec40,0x6741ceec,0x01eebdfd,0x93005ff3,0x03bfbffd,
    0x03c812e0,0x777ffdc0,0x00e8000c,0x73fffd88,0x0141bfff,0x5cc02200,
    0x4c00abcc,0x40015009,0x06001109,0x30018810,0x00062001,0x26200026,
    0x98860099,0x00088009,0x88000988,0x40002200,0x0c000098,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x10000000,0x5554c595,0x55511aaa,0x55555455,0x0aaaa82a,
    0x55555551,0x26355555,0x9aaaaaaa,0x5440c001,0x019aaaaa,0x40055551,
    0x2aaa60bb,0x555400aa,0x2aaa62aa,0x54c02aaa,0x221aaaaa,0x260aaaaa,
    0xaaa81aaa,0x2aaaaaaa,0x5555554c,0x55555552,0x2aaaaa61,0x5555532a,
    0x23555555,0xaaaaaaa9,0xfb00aaaa,0x3ee29fb3,0x7f442fff,0x3fff220c,
    0x22fc880d,0xffdbdff9,0x264fdcaf,0xffcaeffe,0x304a804f,0xffd7dffd,
    0x05ffb819,0xe989ff50,0x3e204fff,0x74c0bfff,0xd1002fff,0xe8815fff,
    0x7fec41df,0x55effc44,0x885fffca,0x7dc2fffe,0x7f440dff,0x7ff442ff,
    0x4ffccbaf,0x2ebfffa6,0xf983ffdc,0xffd87f77,0x3a04d83f,0x30f207ff,
    0x23ffdc1f,0x22ffe44c,0x3e206ffc,0xc9bfee04,0x2ffcc6ff,0xc83ff980,
    0xb700fffd,0x3f201fff,0x7fdc007f,0x5409f107,0x40fcc4ff,0xf900fffe,
    0x0fffe0ff,0xfb83ffe4,0x644d887f,0x83e986ff,0x7fc407fd,0x3016a0ff,
    0x0d107fff,0x47ffb8b3,0x22ffe448,0xe981fff9,0x9bfee04f,0x3e22fff9,
    0x40aa005f,0xd03fffac,0x7e40fff5,0x7fdc006f,0x5402e887,0x5c1544ff,
    0x3ee03fff,0x07fff07f,0x7dc1bfee,0xfb89307f,0xfd07706f,0xbfff500f,
    0x7fec0162,0x0440e40f,0x9061ffee,0x7fff0bff,0x6effff98,0x7fc6ffb8,
    0x097fe23f,0x3f672000,0xffaba86f,0x01bff207,0xe98fff70,0x44ffa801,
    0x06fff882,0xff83ffdc,0x0dff703f,0x1c51ffee,0x1299bfee,0x77fff4c5,
    0x5fffe402,0xfff3000d,0xf70024c9,0xbff900ff,0x441fff88,0xb819dffb,
    0x3ffe66ff,0x3a77fe21,0x776cc2ef,0xfff99c83,0x3ffd46c2,0x800dff90,
    0x036e7ffb,0x4027fd40,0x5c01fffd,0x7fff07ff,0x5c1bfee0,0xf702c7ff,
    0xd3015cdf,0xe88013ff,0x64002fff,0x001d0fff,0x6403ffdc,0x2ffd45ff,
    0x2e04ff98,0x1bfee6ff,0xfd5bfff1,0x84ffb81f,0x44bffd1c,0x640fff54,
    0x7dc006ff,0x4005f97f,0x7d404ffa,0xffb804ff,0x207fff07,0xff706ffb,
    0xff7035cf,0xfd00ba6d,0x7ffcc00f,0x7ffc4005,0x7dc003bc,0xeffc807f,
    0x00dffcaa,0x7dc09ff3,0x0cffdaef,0xff937fc4,0xc84ffa83,0x323fff51,
    0x640fff51,0x7dc006ff,0x00fffeff,0xe809ff50,0xfb800eff,0xfeeeeeff,
    0xdff703ff,0x3b3ffee0,0x3ffee06f,0x7f402ffe,0x7ffec007,0x7ffe4003,
    0x7ffb8006,0xfbeffc80,0x7fcc05ff,0x2bffee04,0xbff100aa,0x3ea0ffe4,
    0x3fe1c84f,0x3ffd4b4f,0x800dff90,0xfffbfffb,0x09ff5006,0x8017ffe4,
    0x9999fffb,0xf703fff9,0x3ffee0df,0x3ee06eb9,0x402fb9ff,0x366007fe,
    0x2000fffe,0x8003fff8,0xfc807ffb,0x05fff95f,0xf7027fcc,0x3fe200df,
    0xf50bff25,0x7dc3909f,0x3fea2bff,0x01bff207,0x3eefff70,0xffa805ff,
    0x0bfff304,0x41ffee02,0xff703fff,0x89ffee0d,0xc9bfee06,0x803ff402,
    0x0bfff358,0x003ffe80,0xc807ffb8,0x3fffa5ff,0x409ff300,0xf1006ffb,
    0x217fe4bf,0x21c84ffa,0x7d47fff8,0x1bff207f,0x27ffb890,0x5403fffc,
    0xfffd04ff,0x3fee1201,0x207fff07,0xff706ffb,0x3fee048f,0xfe830a66,
    0x7e41b007,0x3fa003ff,0xffb8003f,0x25ffc807,0xf305fff8,0x37fdc09f,
    0x325ff880,0x27fd42ff,0x13ff20e4,0x7e40fff5,0xf70ea06f,0x1fffe8ff,
    0x2e13fea0,0x0d103fff,0x3fe0fff7,0x0dff703f,0x4011ffee,0x59046ffb,
    0x2d807fe8,0x000fffe8,0x70007fff,0xff900fff,0x83fffb8b,0xb849eff8,
    0xff1006ff,0x2a17fe4b,0x4c1c84ff,0x3ffd40ff,0x740dff90,0x223ffdc2,
    0xf501ffff,0x6fff889f,0x3fee1720,0x207fff07,0xff706ffb,0x3ffdc00f,
    0x7ff41f98,0x7d41b600,0xff800eff,0xffc8004f,0x86ffd807,0xea81fffd,
    0x7ffc80df,0x6cdff300,0x2ffdc3ff,0x5c2f416c,0xff900fff,0xc85fb10f,
    0xfffb87ff,0x45ffb81f,0xe981fffd,0x87ffc84f,0xf903fff8,0x1fff20ff,
    0x20fffc80,0x3ee27eb9,0x7f5c1dff,0x3ff661cf,0xda881eff,0x802bffff,
    0x2dffffb9,0xcffffc98,0x0ffffe21,0xffffb880,0x3ff6202d,0x1efff9bf,
    0x265fffd3,0x86a0cffc,0x2dffffb8,0x3bfffee6,0x31ffffee,0x23bffff7,
    0x3fffffd8,0x4cbfffa6,0xeeeeffff,0x2e64ffff,0xb52dffff,0x2617ffff,
    0x32dffffb,0x05bffff7,0x7ffffdcc,0x007fffee,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xa9800000,
    0x801aaaaa,0xb30ceeeb,0x2aaaa63b,0x10019aaa,0x00595007,0x5c000098,
    0x00000022,0x00080081,0x70004008,0x2000800d,0x08000000,0x719ddd70,
    0x37667ddd,0x21bddd50,0x0c881dd9,0xdcefff98,0xffb00def,0x7f4c3c89,
    0x2fffdcef,0x5c0ff910,0x2005ffff,0x3ee0003d,0x0002fb24,0x3f27d980,
    0xdfedd985,0x6dddc880,0x007dbdb0,0x9d9100d7,0x33f62019,0x4eec884e,
    0x3b221ff7,0x82ffe9ce,0x3ffa3ffd,0x9ffb0b22,0x07f903c8,0xfe897ff6,
    0x47ff981f,0x25ffc80d,0x3222fff9,0xff107fff,0x1009ffff,0x3e6000df,
    0x33ff224f,0xfd710001,0x30fffc5b,0x642ffc9f,0x1fd0f50f,0x6b805ff1,
    0x1fd0fe80,0x17ea5fd0,0x3fefbfe2,0x3bffe60f,0x7cc0ffea,0x597ff65f,
    0x0746ff98,0x6c18fd46,0x7ffc45ff,0x912ffd81,0xfb17ff20,0x0fff10bf,
    0x3ffecc72,0x0017fe40,0x2213ffa2,0x3002efeb,0xfb039ff9,0x3fa7fd8d,
    0x8364ff87,0x017f67fa,0x26fb80d7,0x13fd45fc,0xfff887ff,0xeff88774,
    0xfd03ff90,0x1fffb11f,0x4bff6073,0x6c6fe448,0x3ff63fd8,0x986ffc85,
    0x320375ff,0x37fe45ff,0x98107ff8,0x7fc407ff,0x7e6c006f,0x7fe4c04f,
    0xbefea81c,0x2fd40c00,0xffe81ffd,0x225fc80e,0x2035c00b,0x91bee5fe,
    0x22ffc4ff,0x2200fff8,0x07ff25ff,0x326affee,0xf500baff,0xdb5032bf,
    0x6c3bdbb9,0xfffa85ff,0x059ffe80,0xffd17ff2,0x801ffe07,0x7edc04ff,
    0x397001ff,0x2e2009ff,0x3bff55ff,0x76d40000,0x7ffdc0ff,0x2037fc1f,
    0xefeeeeeb,0x3bfe5eee,0x7fc4cccc,0x3e23ffc7,0x2ffc407f,0xff105ff9,
    0x177fe6bd,0x80b3ffd0,0xbffb03bc,0x705fff30,0x7e407dff,0x07ff915f,
    0xf9803ffc,0xffeb402f,0xff359805,0x3bf6a009,0x017dfb33,0xe8ee9800,
    0xfffb80ff,0x80fff10f,0xcfdcccca,0xfff14ccc,0x226ff880,0x37fc47ff,
    0xfc97fe20,0x49ffb02f,0x7dc03ffe,0x2dd101ff,0x2ffec0df,0xf827ffc4,
    0x3ff200ff,0x402fffff,0xbf7007ff,0xfff73a80,0xff30e801,0x6ffdc409,
    0x3bff9101,0x0ff98080,0xf3081ffd,0x0ffec7ff,0xfd01ae00,0x27fd803f,
    0x7fc44ff8,0x92ffc406,0x3fea05ff,0x1003fee1,0x9fdc0dff,0x2ffec2fd,
    0xc827ffc4,0xaffe405f,0xf02effb8,0x03f600ff,0x3ffe21b0,0xff98b204,
    0x0bffd984,0x2fbfaa00,0x3f637e40,0x4b03ffa7,0x3fea3ff8,0x01ae00c6,
    0x54389ff7,0x10bfe27f,0xff880dff,0x440bff25,0x802fc46f,0x88a203fc,
    0x985ffd82,0x5f103fff,0x5c5ffc80,0x0fff07ff,0x49803f50,0xea83ffe4,
    0x2dffcaaa,0x0005bfd3,0x3e4ffc98,0x3bffa1ff,0x3e0bffee,0xff887f63,
    0x5c02cbef,0x77ffcc06,0x8ffc41ca,0x6ff986fa,0xfb37fcc0,0x6c1e407f,
    0x001f1002,0x50bffb00,0x02c03fff,0x3e62ffe4,0x07ff82ff,0x360217c4,
    0xfffeeeee,0xfffffb83,0x03977fff,0x26b88000,0x67fd46fd,0x7744ffa8,
    0xfe982fce,0x06b803ef,0x02efff98,0x81bd7dd1,0x103fffd8,0xff55fffb,
    0x040203df,0x40000200,0xffc85ffd,0x80388cc5,0x7fc45ffc,0x407ff84f,
    0x1622442e,0x75437fec,0x5fffeeee,0x10000000,0x06210000,0x39800220,
    0x44002200,0x00000009,0x00000000,0x8bffb000,0x3e60fff8,0xff900197,
    0x81fffa8b,0xdf900fff,0x1d87fddd,0x005fff30,0x00009ff3,0x00000000,
    0x00000000,0x00000000,0x00000000,0x7ec00000,0x03bfa26f,0x20079ff1,
    0x3fe66ffc,0x0fff883f,0xffffffb8,0xf803e61f,0xff9806ff,0x553bb224,
    0x01001eed,0xdccde802,0xddb30eee,0x407bb15d,0xc9808048,0x47707261,
    0xbbbbbbb9,0x44043bbb,0x3ba60888,0x4a01b984,0xddddddd8,0x40005ddd,
    0xeeffffc9,0x072602ce,0x3ffff260,0x440cefff,0x0befffeb,0xfffffff3,
    0x0f7fee1f,0x1bffff73,0x2a27fcc0,0x87ff65ff,0xfe8ceec8,0x07ffd34f,
    0x227fec1d,0x05b1fff9,0x3f602fd8,0xfe9bfe0e,0x754ffea7,0xeeeeeeee,
    0x5c3bee6e,0x2a4fffff,0x77ffe47f,0x6645220b,0xcccccccc,0x00000004,
    0x00000000,0x00000000,0x5ff98000,0xff307ff6,0x99ffb3bf,0x2381ffd3,
    0xfb80fffa,0x7d403adf,0x5fff307e,0x4fff37fc,0x40003ffa,0xfff72fff,
    0x12fa89ff,0xbffd711b,0x000003f9,0x00000000,0x00000000,0x00000000,
    0xfc97fe60,0x537fc41f,0x0ffe4bff,0x202fff88,0xde805ffe,0x9ffb03f9,
    0x4bfb2ff4,0x11111ff9,0x11111111,0x888877e4,0x53a80888,0x03bd9303,
    0x00000000,0x00000000,0x00000000,0x7cc00000,0x107ff25f,0x27fd4dff,
    0x3f205ff7,0x37fd405f,0x07e43ee0,0x71fe45b0,0x3ee7f87f,0xffffffff,
    0x0000047f,0x00000000,0x00000000,0x00000000,0x00000000,0x7e4bff30,
    0x537fc41f,0x17fdc9ff,0x400fffcc,0x9f102ffe,0xa8d027c4,0xdb07e60f,
    0x4cccccc4,0x00019999,0x00000000,0x00000000,0x00000000,0x00000000,
    0x97fe6000,0x7fc41ffc,0xfb93fea6,0x24ffd82f,0x0dffd100,0x83f703f2,
    0x3c3441c8,0x000001dc,0x00000000,0x00000000,0x00000000,0x00000000,
    0x7fc40000,0xf107ff65,0x727fd4df,0xfffa85ff,0x7ec6c160,0xe817c43f,
    0x03030145,0x00000011,0x00000000,0x00000000,0x00000000,0x00000000,
    0x3bfe0000,0x442fffc9,0x93fea6ff,0x3fe22ffb,0x790f712f,0x0003ffe6,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xff95fff5,0x53ffcc1d,0x1ffe4bff,0xffdbfff9,0x5c6feccd,0x0001efff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x80000000,
    0xfffd8801,0xaafffe8b,0x0001efff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_bold_24_usascii_x[95]={ 0,1,1,0,0,1,0,1,0,0,1,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0, };
static signed short stb__times_bold_24_usascii_y[95]={ 19,4,4,4,4,4,4,4,4,4,4,6,15,12,
15,4,4,4,4,4,4,4,4,4,4,4,8,8,6,9,6,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,22,4,8,4,8,4,8,4,8,4,4,
4,4,4,8,8,8,8,8,8,8,5,9,9,9,9,9,9,4,4,4,11, };
static unsigned short stb__times_bold_24_usascii_w[95]={ 0,5,10,11,11,20,18,4,7,7,9,12,5,7,
5,7,11,9,10,10,10,11,11,11,11,11,5,5,12,12,12,9,20,16,14,15,15,14,13,17,17,8,11,18,
14,21,16,17,13,17,16,11,14,16,16,22,16,16,15,5,7,5,11,13,5,11,12,10,12,10,9,11,12,6,
7,13,6,18,12,11,12,12,10,8,8,12,11,16,11,11,10,7,3,7,12, };
static unsigned short stb__times_bold_24_usascii_h[95]={ 0,16,8,16,17,16,16,8,20,20,9,12,8,4,
5,16,16,15,15,16,15,16,16,16,16,16,12,15,12,6,12,16,20,15,15,16,15,15,15,16,15,15,16,15,
15,15,16,16,15,19,15,16,15,16,16,16,15,15,15,19,16,19,8,2,4,12,16,12,16,12,15,16,15,15,
20,15,15,11,11,12,16,16,11,12,15,11,11,11,10,15,10,20,20,20,4, };
static unsigned short stb__times_bold_24_usascii_s[95]={ 254,126,166,158,96,170,191,177,29,1,246,
157,160,201,195,42,63,44,54,88,82,99,111,210,30,222,119,250,106,182,93,
153,45,65,29,163,1,240,226,123,199,217,242,157,142,120,1,108,86,72,60,
141,45,202,219,179,11,28,183,90,234,66,148,228,209,125,75,146,50,170,1,
18,100,113,37,236,176,106,204,181,145,132,193,137,77,93,234,217,136,17,125,
21,17,9,215, };
static unsigned short stb__times_bold_24_usascii_t[95]={ 1,1,68,1,1,1,1,68,1,1,55,
55,68,68,68,22,22,55,55,22,55,22,22,1,22,1,55,22,55,68,55,
22,1,55,55,22,55,39,39,22,39,39,1,39,39,39,22,1,39,1,39,
22,39,22,22,22,39,39,39,1,1,1,68,68,68,55,22,55,22,55,39,
22,39,39,1,22,39,68,55,55,1,1,55,55,39,68,55,55,68,55,68,
1,1,1,68, };
static unsigned short stb__times_bold_24_usascii_a[95]={ 87,115,193,173,173,347,289,96,
115,115,173,198,87,115,87,96,173,173,173,173,173,173,173,173,
173,173,115,115,198,198,198,173,323,250,231,250,250,231,212,270,
270,135,173,270,231,327,250,270,212,270,250,193,231,250,250,347,
250,250,231,115,96,115,201,173,115,173,193,154,193,154,115,173,
193,96,115,193,96,289,193,173,193,193,154,135,115,193,173,250,
173,173,154,137,76,137,180, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_24_usascii_BITMAP_HEIGHT or STB_FONT_times_bold_24_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_24_usascii(stb_fontchar font[STB_FONT_times_bold_24_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_24_usascii_BITMAP_HEIGHT][STB_FONT_times_bold_24_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_24_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_24_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_24_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_24_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_24_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_24_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_24_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_24_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_24_usascii_s[i] + stb__times_bold_24_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_24_usascii_t[i] + stb__times_bold_24_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_24_usascii_x[i];
            font[i].y0 = stb__times_bold_24_usascii_y[i];
            font[i].x1 = stb__times_bold_24_usascii_x[i] + stb__times_bold_24_usascii_w[i];
            font[i].y1 = stb__times_bold_24_usascii_y[i] + stb__times_bold_24_usascii_h[i];
            font[i].advance_int = (stb__times_bold_24_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_24_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_24_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_24_usascii_s[i] + stb__times_bold_24_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_24_usascii_t[i] + stb__times_bold_24_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_24_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_24_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_24_usascii_x[i] + stb__times_bold_24_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_24_usascii_y[i] + stb__times_bold_24_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_bold_24_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_24_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_24_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_24_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_24_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_24_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_24_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_24_usascii_LINE_SPACING
#endif

