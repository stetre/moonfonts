// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_8_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_8_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_8_usascii_BITMAP_WIDTH         128
#define STB_FONT_times_bold_8_usascii_BITMAP_HEIGHT         30
#define STB_FONT_times_bold_8_usascii_BITMAP_HEIGHT_POW2    32

#define STB_FONT_times_bold_8_usascii_FIRST_CHAR            32
#define STB_FONT_times_bold_8_usascii_NUM_CHARS             95

#define STB_FONT_times_bold_8_usascii_LINE_SPACING           5

static unsigned int stb__times_bold_8_usascii_pixels[]={
    0x150a2982,0x262488e6,0x0d554099,0x13040473,0x20cd5411,0x98513089,
    0x109a9261,0x88ea6355,0x4c7baa3a,0xdb04cc49,0x0a2ae0c1,0x2489614b,
    0x86665118,0x11ccd159,0x9ca86547,0x97534b30,0x24cef2e5,0xb8664d26,
    0x6432f233,0x4c9131d9,0x21d370e8,0xc98e20aa,0x485241ba,0x32559922,
    0x1f932159,0xd12e5873,0x323f2645,0x295752ba,0x54ca0dcb,0x7c43ba23,
    0x87076ee5,0xea92ea18,0x39595706,0x114450a8,0xbd8aacc9,0x33c56a0b,
    0x370ea687,0x6654f2d4,0x2b259952,0x8ede421d,0x87e72971,0x50214469,
    0x56a39057,0x222aabac,0x3244b0a4,0x22af666b,0x398aeb20,0x40cc932c,
    0x52b8299b,0x930cc987,0x2335714a,0x702a24aa,0x965d41b0,0xdc98c1bb,
    0x4b0a4853,0x0c196a48,0x447306d4,0x20002a01,0x0000552a,0x26000000,
    0x22000019,0x86211060,0x1004c40a,0x00010c43,0x00000000,0x00000000,
    0x00000000,0x10a00000,0x2a1d447b,0x8711b50d,0x1cf632e2,0x8ea92aa6,
    0x55304429,0x26396a1d,0x5b8cc2ad,0x36615c71,0x42ae2388,0x950312a8,
    0x10a75750,0x260dab96,0x8a0d7226,0x5986b778,0x9a859b06,0x2ba26424,
    0xb87de208,0x4111f169,0x219a21ba,0x1d6aa14c,0x19661e54,0x2765b813,
    0xd889a61d,0x55b0621c,0x1026413f,0xe982c83f,0x3e20f540,0xbc9aa23a,
    0x689de541,0x2a24e886,0x47d418a9,0x20a0990b,0x263b590d,0x51744269,
    0xb89b1d50,0x35cc1f34,0x025d0b66,0xbb87881f,0xba83d30e,0x260cf14a,
    0x9d5cc41d,0x16e2eaab,0x5cc53914,0x31a8ef24,0x03348145,0xe954d359,
    0x1dcf5c04,0x00f985f1,0x437950b0,0x2eea09ad,0xd53ba9c0,0x4d643db7,
    0x00000001,0x00000000,0x00000000,0x00200200,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x3a800000,0x30e98ecc,
    0xc88e981b,0x22211130,0x1b51b309,0x5cecc262,0x2a173b30,0x6ccaa3ad,
    0x8110284a,0x2004404b,0x4cae302a,0x2ca80cad,0xf13d5322,0x3950af10,
    0x37895dd4,0x1788d64b,0x44223e21,0xb4466996,0x26a0f41e,0x20ba96a4,
    0x4ea20daa,0x54e208ba,0xac8b2d13,0x3f112cda,0x7c43c4f3,0x2ea1e82d,
    0x4b75f12b,0x437f11e9,0x55a20cf8,0x16fe2776,0x21bc8b73,0xb394b859,
    0x057512e3,0x0dae89d4,0x84af2a62,0x09e278cd,0x0b81f3f1,0x9bc4f766,
    0x0bc4aea5,0xb44223e2,0x6da2755b,0xd983eaa2,0x22b99261,0xa95d44a9,
    0x13aa4c6d,0x99701d3d,0x3e6666a7,0x26553f30,0x4000ec8f,0x300eb8f9,
    0x2b9f981f,0x52e195f5,0x2170caf9,0x012d404d,0x1332e100,0x5c8faa5c,
    0x00000000,0x00000000,0x00000000,0x00000000,0xab822626,0x081b32ad,
    0xd886e248,0x18882663,0x8a888662,0x4c40a222,0xbb982a19,0x5314c551,
    0xbb806a11,0x5400001b,0x5e221bbc,0x54188f10,0x4f110e46,0x88f6a1e8,
    0x332f6a4b,0x4ae59b52,0x17732aa9,0x714c2ee2,0x086e2217,0x000001b9,
    0x220f4f40,0x79753c47,0x88391a26,0x88951e43,0x2eeb2a0e,0x55057953,
    0x110ea255,0x00061108,0x48000000,0x4788f109,0xc87f7218,0x1f530941,
    0x5c79916e,0x9973ccbd,0x00000007,0x00000000,0x260f9800,0xb1a0220f,
    0x0007fdc7,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_bold_8_usascii_x[95]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, };
static signed short stb__times_bold_8_usascii_y[95]={ 6,1,1,1,1,1,1,1,1,1,1,1,4,3,
4,1,1,1,1,1,1,1,1,1,1,1,2,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,2,1,2,1,2,1,2,1,1,
1,1,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,1,1,3, };
static unsigned short stb__times_bold_8_usascii_w[95]={ 0,2,4,4,4,7,6,2,3,3,4,4,2,3,
2,3,4,4,4,4,4,4,4,4,4,4,2,2,4,4,4,4,7,6,5,5,5,5,5,6,6,3,4,6,
5,7,6,6,5,6,6,4,5,6,6,8,6,6,5,3,3,2,4,5,2,4,4,4,4,4,3,4,4,2,
3,5,2,6,4,4,4,4,4,3,3,4,4,6,4,4,4,3,2,3,4, };
static unsigned short stb__times_bold_8_usascii_h[95]={ 0,6,3,6,6,6,6,3,7,7,3,5,4,2,
3,6,6,5,5,6,5,6,6,6,6,6,5,6,5,3,5,6,7,5,5,6,5,5,5,6,5,5,6,5,
5,5,6,6,5,7,5,6,5,6,6,6,5,5,5,7,6,7,3,1,2,5,6,5,6,5,5,6,5,5,
7,5,5,4,4,5,6,6,4,5,6,5,5,5,4,6,4,7,7,7,2, };
static unsigned short stb__times_bold_8_usascii_s[95]={ 92,77,78,80,20,25,33,83,1,42,73,
18,125,99,65,72,55,28,33,50,23,115,72,100,90,95,112,120,101,68,91,
105,23,75,69,40,60,54,48,85,37,14,60,20,14,6,65,55,117,31,118,
85,8,13,1,76,92,110,104,38,46,16,86,103,96,123,8,99,123,82,87,
110,1,66,19,106,115,53,60,96,67,62,43,44,46,32,27,1,38,50,48,
12,9,5,91, };
static unsigned short stb__times_bold_8_usascii_t[95]={ 14,1,22,1,9,9,9,22,1,1,22,
22,16,22,22,8,8,22,22,8,22,1,1,1,1,1,16,1,16,22,16,
1,1,16,16,9,16,16,16,8,16,22,8,16,16,16,8,1,8,1,16,
1,22,9,9,8,8,8,8,1,8,1,22,22,22,8,9,8,1,16,16,
1,16,16,1,16,16,22,22,16,1,1,22,16,1,16,16,22,22,1,22,
1,1,1,22, };
static unsigned short stb__times_bold_8_usascii_a[95]={ 29,38,64,58,58,116,96,32,
38,38,58,66,29,38,29,32,58,58,58,58,58,58,58,58,
58,58,38,38,66,66,66,58,108,83,77,83,83,77,71,90,
90,45,58,90,77,109,83,90,71,90,83,64,77,83,83,116,
83,83,77,38,32,38,67,58,38,58,64,51,64,51,38,58,
64,32,38,64,32,96,64,58,64,64,51,45,38,64,58,83,
58,58,51,46,25,46,60, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_8_usascii_BITMAP_HEIGHT or STB_FONT_times_bold_8_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_8_usascii(stb_fontchar font[STB_FONT_times_bold_8_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_8_usascii_BITMAP_HEIGHT][STB_FONT_times_bold_8_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_8_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_8_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_8_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_8_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_8_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_8_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_8_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_8_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_8_usascii_s[i] + stb__times_bold_8_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_8_usascii_t[i] + stb__times_bold_8_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_8_usascii_x[i];
            font[i].y0 = stb__times_bold_8_usascii_y[i];
            font[i].x1 = stb__times_bold_8_usascii_x[i] + stb__times_bold_8_usascii_w[i];
            font[i].y1 = stb__times_bold_8_usascii_y[i] + stb__times_bold_8_usascii_h[i];
            font[i].advance_int = (stb__times_bold_8_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_8_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_8_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_8_usascii_s[i] + stb__times_bold_8_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_8_usascii_t[i] + stb__times_bold_8_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_8_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_8_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_8_usascii_x[i] + stb__times_bold_8_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_8_usascii_y[i] + stb__times_bold_8_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_bold_8_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_8_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_8_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_8_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_8_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_8_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_8_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_8_usascii_LINE_SPACING
#endif

