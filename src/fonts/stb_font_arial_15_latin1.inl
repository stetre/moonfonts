// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_15_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_15_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_15_latin1_BITMAP_WIDTH         256
#define STB_FONT_arial_15_latin1_BITMAP_HEIGHT         76
#define STB_FONT_arial_15_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_15_latin1_FIRST_CHAR            32
#define STB_FONT_arial_15_latin1_NUM_CHARS            224

#define STB_FONT_arial_15_latin1_LINE_SPACING          10

static unsigned int stb__arial_15_latin1_pixels[]={
    0x00000000,0x20000000,0x0ea01939,0x99951012,0xaa803019,0x5d64c048,
    0x5c17b501,0x5990003c,0xb9510244,0x00ea8037,0x40e40000,0x0000adca,
    0x64000000,0x201f400c,0x00f500fa,0x5d1007fa,0x7306f980,0x220f4032,
    0x33bfea07,0x37f220df,0x80d17702,0x3b704c9c,0xc8364cd9,0x4437f105,
    0x7359d906,0x80be20bb,0x07d002fd,0xdbbed83b,0xd806b80e,0x2613ee04,
    0x6cc3ae0f,0x32012604,0x2e015c01,0x0498059c,0x0001e4ec,0x7ec0f101,
    0xdbd83b5f,0xbdca80fa,0x02f72a00,0x1aa0c8f6,0x00f880d8,0x42dc0b70,
    0x3636a069,0x1d824c00,0x641361b2,0xd8816201,0x363a81d8,0xdca82d40,
    0x9540e40b,0xca82a81c,0x372a00bd,0x9540e40b,0x44c96c4c,0x9ff9f12d,
    0x21dafff4,0xe886e978,0x441fdacf,0x41fdacfe,0x20d503fa,0x40f880c9,
    0xfd8acc78,0x698596ae,0x4c0064c0,0x07e1d80c,0xccccc822,0x3333324c,
    0x3333324c,0x85715c4c,0x567f445a,0x320be1fd,0x449905f4,0x41fdacfe,
    0x1fdacfe8,0x3cd320be,0xf89e61f1,0x4ba2bf10,0x443b5ffb,0x50b9049f,
    0x7d42e41f,0x5037b360,0x220fb60d,0x4763c40f,0x12abf33d,0x03ed80b5,
    0x11d83ed8,0x99bf001f,0x666fc999,0x3337e4cc,0x7b1ec4cc,0x542e4698,
    0x29905f0f,0x1724c82f,0xa85c83ea,0x49905f0f,0x72e8b72e,0x4b70fc4b,
    0xfb83b5ea,0x407e20af,0x3a03f13e,0x87f62b53,0x86af886a,0x5e3c40f8,
    0x2599f46a,0x2be203d8,0x4357c406,0x3e00f30a,0x3e017c02,0x0f63d802,
    0xe80fc47a,0x3e9905f3,0x03f14c82,0xe80fc4fa,0x5c9905f3,0x3d5b83d5,
    0xb51aa3c4,0x3fb62076,0x53201f30,0x269900f9,0x86a9720f,0x0f883f5b,
    0x0f2b13c4,0x05c92a3d,0x2e01fadc,0x0fc403f5,0xf805f0c4,0x6c017c02,
    0x23e60f63,0x3e9900f9,0x905f4c82,0xa6403e69,0x3e9900f9,0x27e24c82,
    0x4479f887,0x2b516e1f,0x4d76901d,0x03cd7207,0x4a97e4b9,0x2e4ba1aa,
    0x44f103e2,0xe87cc7b6,0x2e80b621,0x5c9740b9,0xd907d054,0x166666fc,
    0x459999bf,0x42ccccdf,0x4ba0f63d,0x17d72079,0x4c82fa64,0x79ae40f3,
    0x6417d720,0xed8276c4,0x2e8a7c44,0x52a1dad4,0x40be2b74,0x3a05f13e,
    0x506f74c3,0x83e6798d,0x3e3c40f8,0x9fe88ea8,0xf305a84d,0x33cc07cc,
    0x7f30ec1f,0x6fc3f511,0x37e2cccc,0x37e2cccc,0x1ec2cccc,0x3e26987b,
    0x20ba7d02,0x27b05d3d,0x227d02f8,0x0ba7d02f,0x203f50f6,0x7e7c41fa,
    0x43b5a83f,0x22e8c9f8,0x3a2f985e,0xd902f985,0x3ff23541,0x03e23fff,
    0xbf93d8f1,0xd3063bf3,0x3fffff20,0xfffffc83,0xffb50763,0x7c02f85b,
    0x6c017c02,0xe8b50f63,0x07b2f985,0x8be0f65f,0x3a2f985e,0x07b2f985,
    0x2a05a85f,0x54017885,0xeffa83b5,0x5c4e7444,0x44e7444e,0x5d0e44eb,
    0xd707e354,0x11e207c4,0x226c407f,0x6b83f069,0x3b35c1f8,0x017c0b60,
    0x005f00be,0x16a1ec7b,0x9d7139d1,0x0fc997d4,0x83f265f5,0x4eb89ce8,
    0x75c4e744,0x7e4cbea4,0x5105d510,0x500f105d,0x806c076b,0x303effd9,
    0xb707dffb,0x9b261f53,0xf12f886a,0x261ae237,0xeca99bde,0x3542f884,
    0x10d517c4,0x7cc0765f,0x9999bf80,0x26666fe1,0x26666fe1,0x447b1ec1,
    0xeffd984d,0x1dffeb83,0x40efff5c,0x303effd9,0xd707dffb,0x1f443bff,
    0x01203e88,0x01805ce6,0x20040010,0x8f2e1dda,0x664b903d,0x65403b72,
    0x2e00bced,0x2e40f60e,0x0e57207b,0xfff816dc,0xfff1ffff,0x3fe3ffff,
    0x361fffff,0x00dc8f63,0x04004004,0x00400100,0x00000004,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x91050000,0x40007224,0xa8002a8c,0x56440192,0x405cc03a,0x4e542a8c,
    0x01ba440c,0x80c98093,0x554882c8,0x2a00bdb8,0x59100bdc,0x5221c6a0,
    0x1019102a,0x5ee54057,0x80750000,0x82c880c8,0x27305548,0x64244039,
    0xb01d8ae1,0x41dc7409,0x3a9506f9,0x036eae00,0x2a760a70,0x441e4e44,
    0x016c0596,0x07afa07b,0x9eb8aa91,0xb79fb06b,0x83d7d03f,0xa442ecda,
    0x2a07902a,0xacfe8839,0x77f4c1fd,0x3200e882,0x883d7d04,0x2e590554,
    0x1a215c03,0x05881d9a,0x56c55039,0x0019303b,0x3d700193,0xa82c8ae0,
    0x99999992,0x10180220,0x2e800223,0xf70bb03e,0x00011181,0x01500600,
    0x741f50b9,0x01101f13,0x0111880c,0x20763b00,0x1e44ffd8,0x0771d96c,
    0x26417cae,0x03ed80ae,0xed803ed8,0x07fc7b03,0x6666fd32,0x6fff544c,
    0xf13c8f10,0x3c8f13c8,0x0be16a3f,0x5dd91174,0x20dffea8,0x2a0dffea,
    0x3aa0dffe,0x03f10dff,0x8223ccfa,0x6442eec8,0x7ff542ee,0x8bbb220d,
    0x1ffffffe,0x3a2eda6c,0x263b4b81,0x2f87d41f,0x881ec4c8,0x57c406af,
    0x8357c406,0x9917be3d,0x23f100be,0x3c8f12e8,0x8f13c8f1,0x30ba1f3c,
    0x3e93201f,0x447e23d3,0x3a23f12e,0x4ba23f12,0x265d11f8,0x1aa9900f,
    0xe87a67d0,0x47e23d33,0x74cfa2e8,0x44345a21,0x3e08b98f,0x643b6a80,
    0x82f8be26,0x5b81ec4c,0x1fadc03f,0x6c0fd6e0,0x4c8bebe3,0x2621005f,
    0x13c8f13e,0xc8f13c8f,0xf51761f3,0x99f8ae40,0x74c424c9,0x11f4c423,
    0x3108fa62,0x5c81e67d,0x3f11a8f1,0x27e29933,0x4c424c99,0x9333f13e,
    0x984aa549,0x30788397,0x329d076f,0x226417c5,0x1725d03d,0x740b92e8,
    0x7c7b0b92,0x3e990fa9,0x5c2ccccd,0x8f13edfe,0x13d8f13d,0x6c1f3d8f,
    0x3603f10e,0xbddddf53,0x71f6ff5c,0x75c7dbfd,0x3fae3edf,0x205f13ed,
    0x87c4fa3e,0x55eeeefa,0x5cbddddf,0xdf53edfe,0x37aebddd,0x5e20cedc,
    0x5407c335,0xfbf983b5,0x226417c0,0x3e67983d,0x03e67980,0x6c0f99e6,
    0x4caec7e3,0x459999bf,0x7c4f61fa,0xb07c4f60,0xf3d83e27,0xa93a4d81,
    0x88f31f88,0xa9ec3f50,0x0fd4f61f,0x3d87ea7b,0x98be617a,0x11e62eed,
    0x2a111e61,0x23ccf61f,0x7d57d508,0xe8cce815,0x6d2e0b61,0x2e82fc81,
    0x641ec3d8,0xc83fffff,0xc83fffff,0x6c3fffff,0x657c47e3,0x26a805f4,
    0x7ccbe4f9,0xf1fccbe3,0x647cfe65,0x4e7cc792,0xd1f44efa,0x54f99aa7,
    0x26aa7ccd,0x7ccd54f9,0x2e273a24,0xe81e884e,0x3a3e8fa3,0xd27ccd53,
    0x03cf1f47,0x3c87ddd1,0xf303b2d8,0xb0be0f60,0x86b83f07,0x0fc35c1f,
    0x0fc7b1ae,0x00be9bf5,0xb9737bf6,0x3ee3cbef,0x3bee3cbe,0xdd31f3cb,
    0xeffd981b,0x3bb262ec,0x2e6f7ec4,0x6cb9bdfb,0x3f65cdef,0x7ecc5cde,
    0x0b9303ef,0xc989dd93,0x6f7ec4ee,0x93bb265c,0x1d80d158,0x36688d30,
    0x5f507981,0x87b03f26,0x2a2f886a,0x1aa2f886,0x3e3d8be2,0x9bfa7ec1,
    0x80081999,0x00200400,0x83882002,0x80100200,0x01000400,0x00200bc8,
    0x80400401,0x40588020,0x81d8b22c,0x3ffae079,0x1ec3d81d,0x640f65c8,
    0xb2e40f65,0x53e20fc7,0x1fffffff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x22000000,0xc8924401,0x00807981,0x000001ec,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x50000000,0x8145d407,0x4488cdca,0x81cc8849,0x5701b03a,0x807501b0,
    0x8838d42a,0x064401cb,0x1e441644,0x20122162,0xb05e4c39,0x4c155220,
    0x03c980ac,0x40159951,0xa881cdb9,0x0bb81aaa,0x40acca88,0x0002a81c,
    0x00e88f50,0x9fb03fd1,0x7b01df95,0x74469aa8,0x2607ec40,0x2207ec45,
    0xb326400e,0xf57d07d9,0xbe826401,0x91dcf41e,0x5900f105,0x3936df54,
    0xd90aa910,0xdaec8bb7,0x5c45f446,0xbabec80e,0x66675c4f,0x83f2faa1,
    0x0eb88be8,0x7c5320be,0x774c4ffb,0x110513cb,0xd90b6720,0x0807f441,
    0x00ec3e88,0x1d00e81d,0x04c801d8,0x00f43e20,0x22088c03,0x441a2b36,
    0x3f10e807,0x8004a974,0x07c4f60f,0x2aa7a23f,0x435c1d12,0xf80f21f8,
    0x44744ae1,0x5f0e88bb,0x457e2990,0x3ea5f12e,0x77ecc513,0x07f7e442,
    0x13ead87f,0x87413c8f,0x5907404b,0x00970740,0x2efd9932,0xb306cde8,
    0xefd985df,0x05949b42,0x113fabe2,0x452e34cd,0x22efd986,0xf8825c6a,
    0xb75b3370,0x1302e8ea,0x5a604cf4,0x5744dc08,0x20be7559,0xadc3f14c,
    0x1599f47a,0xbe87a67f,0x41f33fa8,0x91e2b93c,0x345b36a7,0x405a8740,
    0x6400d10e,0x07a67f14,0x4fe20df5,0x267f11e9,0x2277721e,0x2237e206,
    0x46a8ea3e,0x3f883a5b,0xd83e23d3,0x4d63fc85,0x7c562b54,0xbfbdf000,
    0x93fb7aa1,0x3eb10775,0xa8f14c82,0xb33c8b76,0x1e2971ea,0x24c9eab9,
    0x23c8f15c,0x81c83a18,0x39911d10,0x01c83a08,0x92e3d532,0x2289fbfb,
    0x47aa5c7a,0x2e59044b,0x5c87e20b,0x2d45a876,0x92e3d457,0xa86ecbed,
    0x37a6d1ec,0x507cd60d,0x83229ffd,0x3a27f73e,0xfac0aed2,0x43f14c82,
    0x53e8f15b,0x2ed516ed,0xb8f9b545,0x6c789f44,0x17dc7903,0x1aa723b0,
    0x405f71e4,0x16a8b74c,0xb977ee1f,0x545bb545,0x2af2d106,0x34d51e25,
    0x2cc971aa,0x6546a8b7,0x653204ab,0x92659498,0x1366621f,0x5b8f56b8,
    0x4c6cb119,0x227b05d4,0x9f45d14f,0x1e6d53f9,0x4991e6b7,0x88fcc5de,
    0x9660f60f,0x09702cda,0x6d4b3099,0x34c8ea2c,0xd8f55b8f,0x2b71e61f,
    0x2c82dc79,0x20f89e1d,0x4788b34c,0xb8f3343c,0x12679065,0x45272ab7,
    0x41761d8e,0x34b8934c,0x2a955b8f,0x0f63b2dd,0x7fefc4be,0x9ef7ecc3,
    0x1f44ba7b,0xfb87a65f,0x2f89d713,0x10e887f3,0x0d10bd9f,0x221d107b,
    0x23a65ecf,0x744ba2e8,0x2ff44fe3,0x5d1f44ba,0xd9a60fa2,0x233e2688,
    0x9b0571e8,0x743b03e6,0x98f47d12,0x0f44ba0e,0x216c4197,0x7f711ce8,
    0x3a2e9974,0x065c5d13,0x997d45b1,0x002f10fc,0xb33dcf21,0xeee989fd,
    0x3ffaba22,0xcbefb83e,0x366616c3,0x676c1e83,0x366616c4,0x2627fe43,
    0x7ecc4fed,0x3662e8bf,0x7f6cc4fe,0x6ed43b04,0x8bbabe23,0x2eec880d,
    0x3fb663a8,0x20f77544,0xda83eed9,0xdb102dee,0xed983bff,0x27f6442d,
    0x416f76d4,0x221dffeb,0x499e4007,0x40804008,0x05100800,0x26062044,
    0x880a2199,0x04008000,0x20040080,0x0c000882,0x01010020,0x00004008,
    0x00040040,0x24010000,0x00006a00,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x20200000,0x399502b9,
    0x007372a0,0x00adca80,0x666641a8,0x6441b81b,0x00c835c0,0x33201930,
    0x65401bcc,0x92cccccc,0xa8837999,0x0192aaaa,0x4cccccc8,0x2a00ab98,
    0x6665cae2,0x2f6a22cc,0x90091220,0x3e048907,0x0dc892e1,0xd0e47319,
    0x46cbeb83,0x5c1faaea,0x4c2fcacf,0x76c4ccfe,0x6400edbb,0x7e666fc3,
    0x21723544,0x2003f029,0x99bf03ed,0x76f403f9,0xbf2cccce,0x64c9f999,
    0x03f5eccc,0x4ccccdf8,0x407e5f64,0x6f53a3f9,0x3762cccc,0x44f10fb9,
    0x11eee407,0x43f03c4d,0x8c8b764b,0x41e8b739,0x22e8ba1e,0x9721743b,
    0x649f52f8,0x1e404d86,0xe85f107e,0x07303f13,0x2be2007e,0x04c83f06,
    0x1f8132f5,0x0f9817cc,0x415999bf,0x907c402f,0xa747dd07,0xc83e202e,
    0x203c4f14,0x03c40311,0x05d25c3f,0x23ffd810,0x02f87e2e,0x8d504274,
    0x02207e4e,0xf87bbfd3,0x47cc5c81,0x3e09904c,0x03f5b801,0x7d04c83f,
    0xd81f8132,0x567c5d05,0x00be5eca,0x5e44c811,0x0174f63c,0x89e29902,
    0x87b03b27,0x3fabe278,0xfd4b87e5,0x0f63d8bf,0x3fde983d,0x4c06b7a6,
    0x2dc0adff,0x4007c532,0x4c7f52f8,0x21aa19bf,0x1f980fdd,0x25d003f0,
    0xdccdf85c,0x3b27a80d,0x03f0cccc,0x1f8d70d7,0xccdf8fc4,0x87e602cc,
    0xe9ec795a,0x2a03cccd,0xcbc4f10e,0x3c43d80e,0x7cbe29f1,0xd82e9322,
    0xc83d0f63,0xfb50ecbd,0xffca8059,0x269d1e62,0x3e8f5007,0x6a9337f2,
    0x9ffffff2,0x007e01f9,0x3e07ccf3,0xe82fcccd,0x33333b23,0xd0f503f0,
    0x8fc41f85,0x02ccccdf,0xc87447f3,0x666f4b23,0x443f503c,0x403b3e27,
    0x1f13c43d,0x9d15f9e4,0x7b1ec174,0xc83e61e8,0x70101aa4,0x4fa8bf8f,
    0x5c3103f1,0x207e1e45,0x7b03d05b,0x7e401f80,0x0fc3ffff,0xffff31ea,
    0x5c0fc09f,0x30fc3cc6,0x98017cd9,0x6d56ec3f,0x00ba592d,0xf89e216c,
    0x887b02fd,0xf4c83e27,0x1749bffb,0x1e87b1ec,0x264b71aa,0x883e0f30,
    0x0fa3dbec,0x1f47a9b2,0xeb8fa07e,0x8ba6eefe,0x3e00fc79,0x107e35c1,
    0x4cce6c1f,0x3a07e04d,0x7ffc2643,0x00be1dff,0x332e0be6,0x3a153eec,
    0x78817002,0x203aa3e2,0x8f13c43d,0x3a013f4c,0xd0f63d82,0x25d11e85,
    0xe8109be9,0x0c4d911d,0x88bf98b6,0x4cbe21fa,0x4ccdfc3f,0x2a07a06d,
    0x57c3e9ae,0x21aa1999,0x266be2f8,0x903e66d9,0x3e13333b,0x40ed999b,
    0x7c01f83d,0x2219999b,0x900999bf,0x002e8d47,0x9e278815,0x3c43d84d,
    0x03f4c8f1,0x7b1ec174,0x3b663fc8,0x3f73b23e,0x7ffec46f,0x7dcdf40d,
    0x16ffed40,0x21ee774c,0x00cfffff,0x16e4c07a,0xb3fffffc,0xfff97207,
    0x21360dff,0xf5fffffc,0xf019dfff,0xff803f03,0xf71fffff,0x320bffff,
    0x80175363,0x4f13c42f,0x221ec2f8,0x32991e27,0x8f60ba00,0x4002003d,
    0xd9300401,0x00008019,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x4c722064,0x0e472984,
    0x8992b954,0x332a482d,0x0574cccc,0x666644ea,0x2e0772cc,0x23901912,
    0x2e064c2b,0x85999991,0x9992a82c,0x09901799,0x0000032a,0x00000010,
    0x98800000,0x7d099999,0x01e47880,0x227443f0,0x93afa22d,0x27b4c82f,
    0xfb03e279,0x66776654,0x44ba0d74,0x34fccccc,0x360fa83f,0xd8b72e45,
    0xcdf8fc3f,0x03fe5ecc,0x2eab3e99,0x40ffc1fd,0x3bb220fe,0x40f7fe42,
    0x2a0ddfeb,0xdffbcfef,0x2177ecc0,0x7542efe9,0x41e80dff,0xf88d4601,
    0x3c8f13fc,0xf8bfb3f1,0x01109d11,0x6d320be0,0xd32dcba3,0x2216e0fd,
    0x3203cc0f,0x2f89b20e,0x20fa9fc4,0xf32dfc79,0x7c7e20fc,0x82fa645e,
    0x2626fc4d,0x74cfa0fd,0x322dcd31,0x87c4dd0d,0x44d70ef8,0x9f43d33f,
    0x223f10f8,0x00c1e82e,0x2139f103,0xdf89e478,0x227e2e88,0x3e27b03f,
    0x20be5fd9,0xeadc7b4c,0x5c1e2aa1,0x04c87b05,0x653a03ee,0x03f5f305,
    0xb9e3a61f,0x23f107e4,0x7d322faf,0x3d7c3d82,0x4fc43ef2,0x17f34c99,
    0x0fddcbe0,0x4cce74c1,0x34b8f51f,0x4c42088f,0x57f5533e,0xf8818065,
    0x44f63c40,0xfaf8f21f,0x6fc4f606,0x99bf2e88,0x88f69d99,0x20f1079f,
    0x1f8d505b,0x3e605f30,0x0ff200fb,0x23d3b96c,0x6c987e2d,0xa643ea7e,
    0x0fdaaacf,0xf1d0f4fc,0x3bbbbea1,0x88bbf6a5,0x5c5d498f,0xeeeefcee,
    0x56a8b71e,0xedfeb80d,0x79bf9933,0x87881806,0x7c4f60f8,0xebff8f20,
    0x87e27b04,0x55559f3c,0x9db0f69b,0x02dc1e20,0x7c41aa3f,0x2017e403,
    0x3a9704fc,0xff83e791,0x47e1efff,0x3bbe995d,0x973f03fe,0x47987d66,
    0x3ee21108,0x8fc56be0,0x130fa0fa,0x1e2b71e6,0x3d87ea35,0x2300c1e8,
    0x4be0f11a,0x3c8f13f9,0x6c17ccfe,0xf9e41f13,0xa87b4c82,0x2e0f101f,
    0x81ed3205,0x4079805e,0xe982f9fa,0xf1a76a78,0x5f11f803,0x0fb8be99,
    0x259799f8,0x33e8fa0f,0x3fb1e61d,0x3ea6a9b2,0x12e8d50e,0x0f89f47d,
    0x7427ccd5,0x4fa300c1,0x97df7078,0x7c791e27,0x27b03ee1,0x82f9e478,
    0x05a87b4c,0x302dc1e2,0x0d901f1f,0x2f881e60,0x8b7f01f7,0x200fc4bf,
    0x7d37ea1f,0xe8fc36c2,0xec983e69,0x17f7644e,0xb037ff72,0xbdf71bdf,
    0x44fed983,0x7ec2eed9,0x53315cde,0x31806133,0x10101e25,0xb07e3c8f,
    0xc8f13d8b,0x369905f3,0x4405d513,0xde80b707,0x999afb84,0x36079809,
    0x176c2ec4,0x803f07b6,0x2fa7ec1f,0x5c7e27c4,0x00203e4e,0x80400601,
    0x10000400,0x3ffffee0,0x33333336,0x000002e3,0x47f107e0,0xf3c8f13d,
    0x44f69905,0xb83c403e,0x6c0fd405,0x86ffffff,0x881d7079,0x2e07d43f,
    0x0fc01f87,0x5417d3e2,0x17c47e1f,0x0000001f,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x20000000,0xb0f21328,0x323e8b65,0x43a61d52,
    0x20fefffb,0x41e40312,0x232601c9,0x96a03a9b,0x51ec2209,0x2e02a059,
    0x1904a83d,0x8b2e0e64,0x85ddddd8,0x6eeeec45,0x273164c5,0x91930409,
    0x811115c1,0x22130cda,0x45546a1c,0x4cccccc4,0x44441309,0xbf888888,
    0x84fd8bff,0x89a668ac,0xf37c52e7,0x01746e41,0x01d3b89b,0x1775c0f2,
    0x41fecfe8,0x3b22eeb8,0x26352f88,0x41e80d9d,0x0ee83939,0x454c3f62,
    0x443a2ea6,0x267aaaaa,0x55512adb,0x23758555,0x52547b6a,0x43a61f1f,
    0x2f6a7ffb,0x96e0fffd,0x4491553d,0x2ccccccc,0x3777627b,0x34f8bddd,
    0x541f11bf,0x971e85b6,0xd37cab4c,0x3204ee88,0x44b53d05,0x5019cd99,
    0x3a1e87fb,0x2039f911,0x25903fec,0x3333313a,0xa8bb7223,0x207424bd,
    0x7806a83e,0x00033ee2,0x29b4c6e9,0x3c74cb62,0x10444411,0x00180988,
    0xf1000000,0x743d17c1,0x3d4b86aa,0xc9dac8f8,0xd701fb83,0xd32fadc0,
    0x4c0dddfd,0x25b07c7d,0x3e600cf9,0x4b27500e,0x94eeeeea,0xf8ad8b27,
    0x83a08740,0x9d8f005b,0x3bbbba66,0x2711ecc6,0xa447b10b,0x00000005,
    0x10000000,0x45d0fc1f,0x9f883d5b,0xcb8fbc86,0x4367c41e,0x2a7a00fa,
    0x6d407906,0x5466c0be,0x077ee20f,0x101d97f1,0x302e0bdb,0xc9e6999d,
    0x6cda8743,0x300333ee,0x4ccc4108,0x00000199,0x00000000,0x88000000,
    0xd85d0fc7,0x83ee8699,0xb0df36ea,0x01f98f67,0x3c80752e,0xf302df88,
    0x2a09bbf9,0x33c8f26e,0x800f4001,0x8810a229,0x000ccc41,0x00000000,
    0x00000000,0x40000000,0x85d0fc78,0x0fb81528,0x2e27c9f0,0x7fec7e26,
    0x144e2fff,0x00310330,0x00180101,0x0000007b,0x00000000,0x00000000,
    0x00000000,0x88000000,0x005d0fc7,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_15_latin1_x[224]={ 0,1,0,0,0,0,0,0,0,0,0,0,1,0,
1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,-1,0,0,1,1,1,0,1,1,0,0,
0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,-1,
1,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,1,-1,-1,-1,-1,
-1,-1,0,0,1,1,1,1,0,0,-1,0,-1,1,0,0,0,0,0,1,0,1,1,1,1,0,1,1,0,0,
0,0,0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__arial_15_latin1_y[224]={ 12,2,2,2,1,2,2,2,2,2,2,4,10,7,
10,2,2,2,2,2,2,2,2,2,2,2,5,5,4,5,4,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,13,2,4,2,4,2,4,2,4,2,2,
2,2,2,4,4,4,4,4,4,4,2,5,5,5,5,5,5,2,2,2,6,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,12,5,2,2,4,2,
2,2,2,2,2,5,5,7,2,0,2,3,2,2,2,5,2,6,11,2,2,5,2,2,2,5,-1,-1,-1,0,
0,0,2,2,-1,-1,-1,0,-1,-1,-1,0,2,0,-1,-1,-1,0,0,4,2,-1,-1,-1,0,-1,2,2,2,2,
2,2,2,2,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,2,2,2,2,2,2,2,
 };
static unsigned short stb__arial_15_latin1_w[224]={ 0,2,5,8,7,12,9,2,4,4,5,8,2,5,
2,4,7,5,7,7,7,7,7,7,7,7,2,2,8,8,8,7,14,10,9,10,8,8,7,10,8,2,6,9,
7,11,8,10,8,10,9,9,8,8,9,13,9,9,8,4,4,3,6,9,4,7,7,7,7,7,5,7,7,3,
4,7,3,11,7,7,7,7,5,7,4,7,7,10,7,7,7,5,2,5,8,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,2,7,8,7,9,
2,7,5,10,5,7,8,5,10,9,5,7,5,5,3,6,8,2,4,4,5,7,12,11,12,7,10,10,10,10,
10,10,13,10,8,8,8,8,3,4,5,4,10,8,10,10,10,10,10,6,10,8,8,8,8,9,8,7,7,7,
7,7,7,7,12,7,7,7,7,7,3,3,6,4,7,7,7,7,7,7,7,7,8,7,7,7,7,7,7,7,
 };
static unsigned short stb__arial_15_latin1_h[224]={ 0,10,4,11,13,11,11,4,13,13,5,7,4,3,
2,11,11,10,10,11,10,11,11,10,11,11,7,9,7,5,7,10,13,10,10,11,10,10,10,11,10,10,11,10,
10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,13,11,13,6,2,3,9,11,9,11,9,10,11,10,10,
13,10,10,8,8,9,11,11,8,9,11,8,7,7,7,10,7,13,13,13,3,9,9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,13,11,7,10,
13,13,2,11,6,7,5,3,11,2,4,9,6,6,3,10,13,2,4,6,6,7,11,11,11,10,13,13,13,12,
12,12,10,13,13,13,13,12,13,13,13,12,10,12,14,14,14,13,13,7,11,14,14,14,13,13,10,11,11,11,
11,11,11,11,9,11,11,11,11,11,10,10,10,10,11,10,11,11,11,11,11,6,9,11,11,11,11,13,13,13,
 };
static unsigned short stb__arial_15_latin1_s[224]={ 61,183,194,245,94,115,89,183,9,14,162,
64,186,204,243,136,141,43,167,170,175,200,208,141,6,162,106,230,90,168,73,
194,157,97,108,41,132,158,186,189,23,32,74,1,89,139,120,194,111,143,129,
23,49,227,58,97,87,77,68,147,149,132,129,233,219,205,128,197,52,151,240,
33,225,221,152,206,202,1,247,189,236,244,233,159,1,239,21,29,40,35,48,
172,19,250,210,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,61,252,1,
14,82,71,200,124,227,216,123,13,153,204,178,246,177,213,147,141,200,233,85,
224,189,136,109,56,61,49,36,81,136,189,178,58,47,69,118,203,214,223,232,
94,241,245,41,80,60,85,41,1,30,113,102,99,17,21,12,52,32,22,149,
135,103,178,229,162,170,186,176,205,213,221,154,237,11,251,214,246,9,15,1,
99,107,81,154,115,167,28,111,119,127,69,77,61, };
static unsigned short stb__arial_15_latin1_t[224]={ 15,42,65,16,1,30,30,65,16,16,65,
65,65,65,65,30,30,54,42,30,42,30,30,42,42,30,65,54,65,65,65,
42,1,42,42,42,42,42,42,30,54,54,30,54,42,54,54,16,54,16,54,
42,54,30,54,54,54,54,54,1,30,1,65,65,65,54,30,54,42,54,42,
42,42,42,1,42,42,65,54,54,30,30,54,54,42,54,65,65,65,54,65,
1,16,1,65,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,
54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,15,30,16,
42,65,42,1,1,65,30,65,65,65,65,30,65,65,54,65,65,65,42,1,
65,65,65,65,65,30,30,30,42,1,1,1,16,16,16,42,1,1,1,1,
16,1,1,16,16,42,16,1,1,1,1,1,65,30,1,1,1,16,16,42,
16,16,16,16,16,16,16,54,16,16,16,16,16,54,42,42,42,30,54,30,
30,30,30,30,65,54,30,16,16,16,1,1,1, };
static unsigned short stb__arial_15_latin1_a[224]={ 60,60,76,119,119,191,143,41,
72,72,84,125,60,72,60,60,119,119,119,119,119,119,119,119,
119,119,60,60,125,125,125,119,218,143,143,155,155,143,131,167,
155,60,107,143,119,179,155,167,143,167,155,143,131,155,143,203,
143,143,131,60,60,60,101,119,72,119,119,107,119,119,60,119,
119,48,48,107,48,179,119,119,119,119,72,107,60,119,107,155,
107,107,107,72,56,72,125,161,161,161,161,161,161,161,161,161,
161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,
161,161,161,161,161,161,161,161,60,72,119,119,119,119,56,119,
72,158,80,119,125,72,158,119,86,118,72,72,72,124,115,60,
72,72,78,119,179,179,179,131,143,143,143,143,143,143,215,155,
143,143,143,143,60,60,60,60,155,155,167,167,167,167,167,125,
167,155,155,155,155,143,143,131,119,119,119,119,119,119,191,107,
119,119,119,119,60,60,60,60,119,119,119,119,119,119,119,118,
131,119,119,119,119,107,119,107, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_15_latin1_BITMAP_HEIGHT or STB_FONT_arial_15_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_15_latin1(stb_fontchar font[STB_FONT_arial_15_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_arial_15_latin1_BITMAP_HEIGHT][STB_FONT_arial_15_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_15_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_15_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_15_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_15_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_15_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_15_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_15_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__arial_15_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__arial_15_latin1_s[i] + stb__arial_15_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__arial_15_latin1_t[i] + stb__arial_15_latin1_h[i]) * recip_height;
            font[i].x0 = stb__arial_15_latin1_x[i];
            font[i].y0 = stb__arial_15_latin1_y[i];
            font[i].x1 = stb__arial_15_latin1_x[i] + stb__arial_15_latin1_w[i];
            font[i].y1 = stb__arial_15_latin1_y[i] + stb__arial_15_latin1_h[i];
            font[i].advance_int = (stb__arial_15_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__arial_15_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_15_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_15_latin1_s[i] + stb__arial_15_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_15_latin1_t[i] + stb__arial_15_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_15_latin1_x[i] - 0.5f;
            font[i].y0f = stb__arial_15_latin1_y[i] - 0.5f;
            font[i].x1f = stb__arial_15_latin1_x[i] + stb__arial_15_latin1_w[i] + 0.5f;
            font[i].y1f = stb__arial_15_latin1_y[i] + stb__arial_15_latin1_h[i] + 0.5f;
            font[i].advance = stb__arial_15_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_15_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_15_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_15_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_15_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_15_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_15_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_15_latin1_LINE_SPACING
#endif

