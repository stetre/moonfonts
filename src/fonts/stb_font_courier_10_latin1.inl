// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_10_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_10_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_10_latin1_BITMAP_WIDTH         256
#define STB_FONT_courier_10_latin1_BITMAP_HEIGHT         36
#define STB_FONT_courier_10_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_10_latin1_FIRST_CHAR            32
#define STB_FONT_courier_10_latin1_NUM_CHARS            224

#define STB_FONT_courier_10_latin1_LINE_SPACING           5

static unsigned int stb__courier_10_latin1_pixels[]={
    0x0a004c08,0x22041062,0x460a0d43,0x40b818c0,0x85413031,0x82300140,
    0x98040981,0x30330281,0x01501081,0x05013015,0x2602a031,0x02060980,
    0x02810042,0x02a02605,0x11026021,0x20180888,0x0e283009,0x02228313,
    0x811106a2,0x83010831,0xaa8110a2,0x0c2a130a,0x47535044,0xa80883a8,
    0x418c0982,0x03031831,0x230a5022,0x44830181,0x5418c299,0x02e6a2b9,
    0x06303011,0x26206063,0x770e2912,0x11c52217,0x22894555,0xa8942aa8,
    0x88aaa22a,0xa55262aa,0x55269549,0x95499454,0x9c132826,0x04caaa09,
    0x530dd4c1,0x2a0cba85,0x26154c2a,0x2a15542a,0x2a15542a,0x71154c19,
    0x0e2a98aa,0x22a98553,0x20543508,0x54a61529,0x94c2a530,0x498aa60a,
    0x8e0c4a73,0x4c50c4a3,0x26286a10,0x8a1314a0,0x1884c509,0x86250c4a,
    0x4a189452,0x289c3942,0x44220528,0x53114313,0x444c4730,0x98311311,
    0x43983983,0x22862152,0x72862289,0x286250c4,0x82a614a5,0x22862862,
    0x113118a1,0x53128d43,0x85311470,0x14330942,0x8528528a,0x94312852,
    0x250c4a18,0x2650c4a2,0x0cd214a0,0x8c181994,0x0bab8a09,0x4ccc5151,
    0x21333309,0x22a228a8,0x450a2a22,0x82e14132,0x28260a09,0x50a99413,
    0x218a0994,0x22862862,0x4c133331,0x55c0d452,0x98a0d40a,0x2628a250,
    0x8a1314a0,0x4504c509,0x518a18a1,0x5550c514,0x09944261,0xa86aae28,
    0x82a6a099,0x2e6a2189,0x9a86a6a1,0x2373511a,0x3511b9a8,0x82aae237,
    0x54140a9a,0xa9a890a9,0x5c42a6a0,0x506e60aa,0x15d54575,0x5d545755,
    0x5186a6a2,0x0a018145,0x8e28aaa2,0x44a62aa8,0x8aaa22aa,0x14dc2aa8,
    0x45370a6e,0x214dc50b,0x8a512aca,0x00098503,0x00004440,0x00000000,
    0x0000b260,0x00180100,0x73000000,0x220a62a6,0x0014c40a,0x00011000,
    0x06000000,0xaa800000,0x000004c0,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x81330000,0x83102600,
    0x81100009,0x104d441a,0x55306a20,0x55000a88,0x00054415,0x00140835,
    0x22411004,0x01503182,0x06305013,0x2102602a,0x31050080,0x100c0c60,
    0x22066015,0x21835101,0x140e66a0,0x0a030226,0x5c452850,0x11cce619,
    0x88510506,0x09840999,0x1333114a,0x45370994,0x542aa882,0x015cc399,
    0x4c088811,0x4404c418,0x22604441,0x0c604c41,0x83110a66,0x30111028,
    0x20113015,0x228c0601,0x4104c298,0x44cc29aa,0x6442a6a0,0x8941882a,
    0x21833511,0x86ae1c42,0x2622608b,0x228a8501,0x44a18999,0x4c30a142,
    0x20c04130,0x5950aa61,0x95056541,0x88565415,0x55912aac,0xa8aab225,
    0x9115542a,0x40654555,0x80ca80ca,0x80ca80ca,0x239980ca,0x4c0a1318,
    0x41998510,0x20a028a3,0x0c1a9862,0x4c20a885,0x86613570,0x1dd42808,
    0x26113513,0x8506a2aa,0x20662942,0x188989c1,0x20502814,0x85410a82,
    0x0e6042a0,0x982150e6,0x98289828,0x98289828,0x98289828,0x1319981a,
    0x4cc14450,0x180a28a0,0x41981328,0x8c40c062,0x0ccc4ca2,0x98c4a044,
    0x21981989,0x098a1880,0x830ce213,0x28133334,0x4140a050,0x205dc0bb,
    0x8a2a20bb,0x05dc28a8,0x0a2a0a2a,0x0a2a0a2a,0x0a2a0a2a,0x83082e6a,
    0x266e1aab,0x37309984,0x50d54c15,0x0660aaa0,0x42ab8555,0x42aa22ab,
    0x82809998,0x2666229a,0x20b0ae60,0x570aaa22,0x5066a253,0x40a0d4d4,
    0x8a0a0502,0x118a18a1,0x26a23735,0x2ae18a1b,0x20d55c1a,0x555c1aab,
    0x2e0d55c1,0x9a81c1aa,0x00000080,0xa8800300,0x00000009,0x80000000,
    0x04001100,0x15950000,0x59505654,0xc8856541,0x755913aa,0x000eab22,
    0x2b9d5644,0x23895c71,0x895c712b,0x571c4ae3,0x003510e2,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x40008040,
    0x18044088,0x0a011010,0x710420a2,0x215298e2,0x80804019,0x004c0009,
    0x554c7355,0x5530320b,0x98222223,0x02220281,0x2aa0130a,0x110d4429,
    0x1a800081,0x51031004,0x20403101,0x06a6a088,0x5c553885,0x405643ac,
    0x0c14cc1b,0x20c4c044,0x28312811,0x0a660386,0x00445573,0x40225553,
    0x0a385109,0x20408c30,0x55910282,0x09828087,0x56442815,0x2155912a,
    0x204c931b,0x14c2a8c8,0x2e2a8294,0x56554912,0x9b988453,0x1550a260,
    0x4a1aaa81,0x41cc0a09,0x39839839,0x86282988,0x2ae22989,0x9844a182,
    0x446a2622,0x2884c530,0x0621451c,0x72828102,0x1cc11283,0x2613155c,
    0x0a82b2a0,0x52518941,0x33504a22,0x220980a0,0x46189429,0x510aa232,
    0x5542d981,0x8828a283,0x40a0502b,0x206a0502,0x15332bac,0x5d431287,
    0x8e6aa651,0x2aa65289,0x0a6aa09a,0x202a1555,0x4081199a,0xaa80aa82,
    0x43128282,0x5c140aaa,0x985d5c0b,0x0e6a29a8,0x4c0a0179,0x02942941,
    0x82850445,0x4125c1b9,0x0aa61aaa,0x50281403,0x028140a0,0x06250a65,
    0x88a65143,0x4c510a9d,0x12818500,0x50204130,0x40503350,0x13031282,
    0x22862828,0xaa8aa712,0x82814a0c,0x444aa819,0x4d445028,0x4355510a,
    0x2b26a1c8,0x0a02b20a,0x65435591,0xa82b2a0a,0x42b2a0ac,0x880303a8,
    0x98a6910c,0x219102ab,0xa80aa800,0x55302a63,0x08889830,0x55382b2a,
    0x32a05644,0x88aa910a,0x9116542a,0x2ab26755,0x2200d521,0x5654388c,
    0x88155910,0x2c980c84,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x40000000,
    0x00002200,0x00440201,0x00811000,0x30554c02,0x854a6355,0x2aa8711a,
    0x4c0c154c,0x8641042a,0x4320600a,0x4501aaa8,0x54e22ab8,0x55c26261,
    0x42eae1aa,0x04c47339,0x05403535,0x28986213,0x08111114,0x40654030,
    0x2a710bab,0x644aa712,0x8aa910aa,0x22571aac,0x951cd264,0x10ab2215,
    0x18137057,0x9cc46286,0x22623982,0x450c4018,0x0a6144ab,0x23261414,
    0x189414c2,0x29aa8aa6,0x0a22294a,0x44310265,0x21b14542,0x4d1b0c30,
    0x98dcdc49,0x40aa208a,0x98518289,0x8a14cc28,0x9450c4a2,0x51a85529,
    0x03062828,0x50188544,0x4435550c,0x2666628a,0x26355510,0x828328a0,
    0x06b2a248,0x370cdc5c,0x3510c4a0,0x4a50dcdc,0x8144c142,0x48360222,
    0x24a43062,0x8955540b,0xa809942d,0x02e05028,0x57145032,0x18d55435,
    0x85298535,0x0183ab82,0x4cd41537,0x948aeaa1,0x2a1b9a88,0xa9a801a9,
    0x24c2eae0,0x874140aa,0x14c2ac9a,0x54994d22,0x8b854545,0x06ab238a,
    0x51098837,0x88145457,0x04013109,0x1888a2a2,0x20d55c00,0x89828309,
    0x18945142,0x8c28c60a,0x8294142a,0x000000a1,0x00060000,0x0600a850,
    0x000a0020,0x00000000,0x00000000,0x895c0000,0x93155643,0x91399cc5,
    0x1d522155,0x488dc159,0x59514ce6,0x711c3221,0x00000755,0x00000000,
    0x00000000,0x00aaaaa0,0x84c35551,0x351000a9,0x98211418,0x98222220,
    0x7711aaaa,0x00000037,0x00000000,0x00000000,0x00000000,0x00000000,
    0x80000000,0x8882aaa2,0x0d4ce2a0,0x83287413,0x218c220d,0x04ccccc1,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x2aaa200c,0x8aaa5731,0x0006a201,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__courier_10_latin1_x[224]={ 0,2,1,0,0,0,1,2,2,1,0,0,1,0,
1,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,0,0,0,
2,0,1,0,0,0,0,0,0,-1,1,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__courier_10_latin1_y[224]={ 7,1,1,1,1,1,2,1,1,1,1,2,5,4,
5,1,1,1,1,1,1,1,1,1,1,1,3,3,2,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,1,3,3,3,3,3,3,1,1,1,3,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,3,1,1,2,1,
1,1,1,1,1,3,4,4,1,0,0,1,1,1,1,3,1,3,6,1,1,3,1,1,1,3,0,0,0,0,
0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,1,0,0,0,0,0,1,1,1,1,
1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,
 };
static unsigned short stb__courier_10_latin1_w[224]={ 0,2,4,5,5,5,4,2,3,2,4,5,3,5,
3,5,5,5,5,5,5,5,4,5,5,4,3,3,5,5,5,4,5,6,5,5,5,5,5,5,5,5,6,6,
5,6,5,5,5,5,6,5,5,5,6,6,5,5,5,2,4,2,5,6,3,5,5,5,6,5,5,5,5,5,
4,6,5,6,5,5,5,6,5,5,5,5,6,6,5,6,4,2,1,2,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,2,5,5,5,5,
1,5,3,6,3,5,5,5,6,7,3,5,3,3,3,5,5,3,3,3,4,5,6,6,6,4,6,6,6,6,
6,6,6,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,6,
 };
static unsigned short stb__courier_10_latin1_h[224]={ 0,7,4,7,7,7,6,4,8,8,4,5,4,1,
3,7,7,6,6,7,6,7,7,7,7,7,5,5,5,3,5,7,7,6,6,7,6,6,6,7,6,6,7,6,
6,6,6,7,6,8,6,7,6,7,6,6,6,6,6,8,7,8,3,1,2,5,7,5,7,5,6,6,6,6,
8,6,6,4,4,5,6,6,4,5,7,5,4,5,4,6,4,8,8,8,3,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,5,6,
8,7,2,7,3,4,3,1,7,2,3,6,4,4,2,6,7,2,3,4,3,4,6,6,6,6,7,7,7,7,
7,7,6,8,7,7,7,7,7,7,7,7,6,7,8,8,8,8,8,4,7,8,8,8,8,7,6,7,7,7,
7,7,7,7,5,6,7,7,7,7,6,6,6,6,7,6,7,7,7,7,7,5,6,7,7,7,7,8,8,8,
 };
static unsigned short stb__courier_10_latin1_s[224]={ 253,193,227,127,214,134,213,216,29,98,242,
141,232,234,194,152,158,225,231,176,237,182,188,200,206,219,147,131,158,176,135,
224,109,1,200,121,26,194,164,240,32,57,246,218,70,44,51,234,38,89,63,
1,250,170,243,206,20,14,8,78,229,39,247,227,207,101,140,82,127,107,188,
182,176,170,104,157,151,182,164,119,128,121,205,76,146,88,194,94,170,68,189,
95,81,101,170,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,
145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,253,253,32,
38,125,13,27,115,211,193,186,176,164,234,212,219,182,7,219,201,215,75,164,
203,190,223,198,236,101,114,81,134,102,95,88,81,74,67,19,109,61,43,37,
31,25,19,13,7,94,250,21,42,33,48,54,211,208,83,72,60,66,181,26,
169,163,157,151,55,49,133,151,139,1,244,145,139,44,50,56,62,115,88,121,
187,175,196,202,113,108,220,226,232,238,14,8,1, };
static unsigned short stb__courier_10_latin1_t[224]={ 16,1,26,1,1,9,18,26,1,1,26,
26,26,31,31,9,9,18,18,9,18,9,9,9,9,9,26,26,26,31,26,
9,10,26,18,9,26,18,18,9,26,26,9,18,26,26,26,9,26,1,26,
18,18,9,18,18,26,26,26,1,9,1,26,31,31,26,9,26,9,26,18,
18,18,18,1,18,18,26,26,26,18,18,26,26,9,26,26,26,26,18,26,
1,1,1,31,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,16,9,18,
18,26,18,1,9,31,9,31,26,31,31,9,31,31,18,26,26,31,18,9,
31,31,26,31,26,18,18,18,18,10,10,10,10,10,10,18,1,10,10,10,
10,10,10,10,10,18,1,1,1,1,1,1,26,1,1,1,1,1,1,18,
1,1,1,1,10,10,1,26,18,10,1,1,1,18,18,18,18,1,18,1,
1,1,1,1,26,18,1,1,1,1,1,1,1, };
static unsigned short stb__courier_10_latin1_a[224]={ 85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_10_latin1_BITMAP_HEIGHT or STB_FONT_courier_10_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_10_latin1(stb_fontchar font[STB_FONT_courier_10_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_courier_10_latin1_BITMAP_HEIGHT][STB_FONT_courier_10_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_10_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_10_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_10_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_10_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_10_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_10_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_10_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__courier_10_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__courier_10_latin1_s[i] + stb__courier_10_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__courier_10_latin1_t[i] + stb__courier_10_latin1_h[i]) * recip_height;
            font[i].x0 = stb__courier_10_latin1_x[i];
            font[i].y0 = stb__courier_10_latin1_y[i];
            font[i].x1 = stb__courier_10_latin1_x[i] + stb__courier_10_latin1_w[i];
            font[i].y1 = stb__courier_10_latin1_y[i] + stb__courier_10_latin1_h[i];
            font[i].advance_int = (stb__courier_10_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__courier_10_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_10_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_10_latin1_s[i] + stb__courier_10_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_10_latin1_t[i] + stb__courier_10_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_10_latin1_x[i] - 0.5f;
            font[i].y0f = stb__courier_10_latin1_y[i] - 0.5f;
            font[i].x1f = stb__courier_10_latin1_x[i] + stb__courier_10_latin1_w[i] + 0.5f;
            font[i].y1f = stb__courier_10_latin1_y[i] + stb__courier_10_latin1_h[i] + 0.5f;
            font[i].advance = stb__courier_10_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_10_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_10_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_10_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_10_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_10_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_10_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_10_latin1_LINE_SPACING
#endif

