// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_bold_12_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_bold_12_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_bold_12_usascii_BITMAP_WIDTH         128
#define STB_FONT_arial_bold_12_usascii_BITMAP_HEIGHT         54
#define STB_FONT_arial_bold_12_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_arial_bold_12_usascii_FIRST_CHAR            32
#define STB_FONT_arial_bold_12_usascii_NUM_CHARS             95

#define STB_FONT_arial_bold_12_usascii_LINE_SPACING           8

static unsigned int stb__arial_bold_12_usascii_pixels[]={
    0xd0372044,0x3cbae441,0x501d4322,0x991079b7,0xb8220d83,0x3bb70ae3,
    0x22757710,0x8e882c9c,0x0d83722c,0x2a017b70,0xa877a61c,0x5f507c4e,
    0x10c89b6a,0x537bb01f,0x05fcc1db,0xf717c4b7,0xcefc8be2,0xb7e77c6f,
    0x4c4fcef9,0x52f6a3f6,0x7d3f504a,0xf11f9dd0,0x7c4d8fdb,0x44d91ae0,
    0x27b0fa0c,0x265bc9ba,0xbf917c0f,0x43eabe23,0x4cbe24f9,0x4be6db0f,
    0x3fbfb67b,0x03ab5955,0x2a1f57d4,0x57f5131f,0x907c5c81,0x87e66c8b,
    0x566d625c,0x83e678ef,0x877f20f8,0x07ea4dcd,0x36c9eabd,0xdea9ea3f,
    0x55dd12ec,0xb84ff809,0x13fe3ecf,0xf50f8fea,0x87e66c87,0xe9a6ea6b,
    0xf307ccd4,0x7fd42f88,0x2bb03ea1,0xf36f9bf8,0xbae8bb1b,0x3951d084,
    0x1cf77744,0x223f57f7,0x97e20ffd,0x6c83f90f,0x327a87e6,0x962be5ca,
    0xf11ea0f9,0x3f88ff05,0xdffb8fe2,0x43dfbf36,0xa86ffffe,0x3ea6af8d,
    0x3e65ff98,0xd57117d0,0xd83e35c5,0x43f33645,0x5daeea6b,0x83e62eaf,
    0x82fe20f9,0xabfd84f8,0x26d900fd,0x07ed301f,0x33c74c74,0x41bfd15f,
    0xcfa9f9cf,0x1f1721fb,0xf99b22e4,0xc8e89321,0x7cc2efce,0x4bfa0fc0,
    0xeb880ffb,0x4db201cf,0x0f1b701f,0x5c4de96a,0x2a1fbefe,0x0fff24fe,
    0x1ae0f89b,0x3f07dcd9,0x25b80eb8,0x201e40f9,0x22000018,0x03088060,
    0x00401022,0x17ec2b80,0xfb6f983e,0x0599bead,0x19dddfd5,0x0d117fcc,
    0x00000000,0x00000000,0x40c04400,0x06213108,0x40130011,0x00004099,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x22000000,
    0x4cb102dc,0x05b7102c,0xc98e6ae2,0x01dc41bd,0x20bc98ea,0x332a00c8,
    0x05ee540c,0x1c882f26,0x1b1260ea,0x21914da8,0xa84fddfb,0xc8bd9f15,
    0xdf86fdef,0xd7bf16fc,0x206edf8f,0x4ddbf16c,0x3bb600f9,0x3b3bee1e,
    0x4db9f10f,0x2e1b22f9,0x3bf0b60f,0x971f4322,0x3d5ae790,0x2a2f993e,
    0x4be6db0f,0xf31f51c8,0x8b655c43,0x5cfccd52,0x4f882f82,0x4c7cc722,
    0x3645f30f,0x5c9707dc,0xf31912df,0x5ee3d003,0xe83f31fa,0x366d9ee5,
    0x45ee1cef,0x1bf37e2f,0x5f7cc5f7,0x93ffe24f,0x413311fa,0x8be64eed,
    0x260fb86c,0x7ccb7ee6,0x3c401fa9,0x2a7fddd1,0x9f336c0f,0xffda8df5,
    0x54be2f71,0xed98db0f,0x89ee5f30,0x3f51f99c,0x6f457ff2,0x645f30ed,
    0x07c0fb86,0x7c4fcc5f,0x30b512a3,0x54fe25f3,0x6e7545e8,0xba7c4956,
    0x4f72f98f,0x997c426c,0xa7c0f71f,0x2bd313f8,0x17c4be7b,0x43dca6db,
    0x1f98be2d,0xc8bf55db,0x83f27a63,0x21ffdbed,0x3e2bb0b8,0x5f32fb9c,
    0x26fe21f7,0x1f73f56f,0x997637e6,0x3f61faaf,0x3f35fb9b,0x54f7c1f5,
    0x0db5f74f,0x3f317c97,0xd037fae2,0x441dfd83,0x745fefeb,0x3fae2fff,
    0x2177544f,0x3f26dffb,0x3bf3e63e,0x64177e41,0x3f20cffe,0x77ffcc3f,
    0x303dfb10,0x03f317cd,0x4c0000c0,0x01009884,0x00000000,0x00000000,
    0x000000c0,0x00000000,0x00000000,0x00000000,0xcb872200,0x0ccccc98,
    0x64c7712e,0x715c5910,0x87712a19,0x2e03224a,0x911ccccc,0x64417999,
    0x2cccc880,0x51644322,0x64433227,0x2603910c,0x3265f92f,0x3e60ffcc,
    0xaf445f33,0x7c5b60fc,0x0fc8db2f,0xb81f997a,0xf31ccfdc,0x7ccbf99b,
    0xfecdf980,0x3fe63f31,0x4bfe6d70,0x05f10ffb,0x40feebe6,0xe8fc82fc,
    0x43fcfa85,0xd4efa8fb,0x5f32f989,0x2065cfcc,0x322f987b,0x47263e67,
    0x7cd3e2f9,0x5ae9ff31,0x1fdb4ef9,0x6fcc0be2,0x209f506f,0xfb00fff8,
    0x9b93f30d,0x2bd05f1d,0x7df7cc7b,0x67cc3dc4,0x27e65eba,0x2e6fe65e,
    0x3e63f33f,0x9f36b9fd,0x7c43f3ed,0x7fbff302,0x7d405f98,0x7c1bf603,
    0x0fafabeb,0x4c4e8fb8,0x87b8db2f,0x4c3feef9,0x7ffcc7ff,0x7cc7e65f,
    0x5f36cee9,0x221f5f5f,0x369f302f,0x801dd10f,0xfbf502f9,0xf13fdb07,
    0x3f3e20dd,0x46c8fcc1,0xfd2f987b,0x317f7cc1,0x4c7e605f,0xf36ff99f,
    0x21f3ddd3,0x25f302f8,0x335fb5f8,0x105f3013,0xf703f6df,0xfd027f4f,
    0x1b23f30f,0x225f30f7,0x3f27e65f,0x3e605f30,0x5bf23f31,0xf9cfc9f9,
    0x43337f10,0x3abf22f9,0x982fffff,0xf11fc82f,0x3ee5f98b,0x2613ee02,
    0x87b8d91f,0x4cbee2f9,0x5f34f88f,0x8fcc7e60,0xf53f36e8,0x3fe21f35,
    0x00001fff,0x00000000,0x00000000,0x00000000,0x64400000,0x50e44b20,
    0x9910e889,0x66644999,0x999911cc,0x3cccc883,0x999951c8,0x9303c883,
    0x0adb8837,0xa8644970,0x80665103,0x87e62cc9,0x3e45f34f,0x37e63fd1,
    0x337e64cc,0xb9bf31cc,0x666fcc5f,0xeea9fc4f,0x07fdc2fe,0xe83f77e2,
    0x5f984ebd,0x262e43e6,0x85df55fd,0xf30fcbf8,0x22f99fc3,0x23fbf17c,
    0x05f302f9,0x267d8be6,0x6401762f,0x4c3fde85,0xb9225f14,0xf32ff447,
    0x67f4d721,0x11ff5c41,0x87e63f93,0xd99bf32e,0x4c7e662f,0x3e62ccdf,
    0x5f30cccd,0xcdf987dc,0x0f8801fd,0x7036cfcc,0xc89f301f,0x6c7e65cd,
    0x2203bf75,0xf7bf35fb,0x32d87e63,0x98fd99bf,0x7dddf31f,0x86666fcc,
    0x4c3ea2f9,0x544fdcdf,0xab642ec1,0x883fa81f,0x2e47d44f,0x4cbd15f1,
    0xdfb32efd,0x31fabdc5,0x2f98ec3f,0x263f31f2,0x205f302f,0xf99f22f9,
    0x43f83ee2,0xfffff82f,0x7a81fd45,0x24ffefd8,0xc885defd,0xfd103b75,
    0xa87e65fb,0x23e45f31,0x205f31f9,0x30999bf9,0x4c9f737f,0x5c7da9bf,
    0x5f503e62,0x3e21f933,0x41440aae,0x001edaaa,0x3f300000,0x322f99fc,
    0x2f98fcc7,0x9fffff30,0x313bffe6,0x385dffff,0x2236c3d4,0x7ffff93f,
    0x02e407a8,0x00000000,0x00000000,0x00000000,0x00000000,0xca800000,
    0x20e5c41b,0x1cb883b8,0xc8864e44,0x2e390cb8,0x54322952,0xb8ae3914,
    0x232214c2,0x950cc8bb,0x66654999,0x14c2dc3c,0x32326171,0x65fcc952,
    0xf0fe6fc6,0x67744db9,0x997be63f,0x27d4fbdf,0x4f51fb5c,0x5ee6dcf8,
    0x262dc2f8,0x5fbefcdf,0x6d4dfb95,0x3fe24ddd,0x7cd37722,0x2e7f1f50,
    0xf30b7e67,0x4cfd4261,0x9ae1f51f,0xc97cc2f9,0xaef8f986,0x10ffd45c,
    0x6dccf55f,0x3e3f32be,0x20fd8d94,0x2e1aaaa8,0xb07745ce,0x7a975e61,
    0x7a87fed4,0x23999f70,0x1f99ea7b,0xf06c8fcc,0x885f97d9,0x26eec0ff,
    0x269dffd7,0xc9b27f0f,0x7fffdc1f,0x447e2fe5,0x008511aa,0x11f88da8,
    0x3e65f37f,0x37f30d99,0x2607cc9d,0xd86ed90f,0x740ff9cf,0x0ffcc5ed,
    0x7c3e62dc,0x273eed93,0x51044441,0x000006a1,0xd713ff62,0x44feb8bf,
    0x3e60cffa,0xf6c87cc0,0x45f97d47,0x743f98fb,0x0f989706,0x7fedb27f,
    0x000000ff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x22b72200,0x77417753,0x89666eee,
    0x0000000b,0x00000000,0x00000000,0x3ff77200,0x4443ff95,0x88dc0888,
    0x0000001f,0x00000000,0x00000000,0x00188200,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_bold_12_usascii_x[95]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,-1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, };
static signed short stb__arial_bold_12_usascii_y[95]={ 9,1,1,1,0,1,1,1,1,1,1,2,7,5,
7,1,1,1,1,1,1,1,1,1,1,1,3,3,2,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,1,3,3,3,3,3,3,1,1,1,4, };
static unsigned short stb__arial_bold_12_usascii_w[95]={ 0,3,5,6,6,10,8,3,4,4,4,6,3,4,
3,4,6,5,6,6,6,6,6,6,6,6,2,3,6,6,6,7,11,8,8,8,8,7,7,8,7,3,6,8,
7,9,7,8,7,9,8,7,7,7,9,11,8,9,7,4,4,3,6,8,3,6,7,6,6,6,4,6,6,3,
4,6,3,9,6,7,7,6,5,6,4,6,6,9,6,6,6,4,3,4,6, };
static unsigned short stb__arial_bold_12_usascii_h[95]={ 0,8,4,9,11,9,9,4,11,11,4,6,4,2,
2,9,9,8,8,9,8,9,9,8,9,9,6,8,7,5,7,8,11,8,8,9,8,8,8,9,8,8,9,8,
8,8,8,9,8,9,8,9,8,9,8,8,8,8,8,11,9,11,5,2,2,7,9,7,9,7,8,9,8,8,
11,8,8,6,6,7,9,9,6,7,9,7,6,6,6,9,6,11,11,11,3, };
static unsigned short stb__arial_bold_12_usascii_s[95]={ 58,5,117,94,1,101,112,123,53,31,108,
70,113,8,26,10,47,17,77,61,92,76,121,61,92,15,43,57,106,94,113,
84,36,68,48,1,39,31,23,83,9,1,107,119,111,101,93,70,81,22,65,
39,57,99,40,28,19,9,1,48,114,22,101,13,22,120,68,8,54,15,119,
32,50,124,26,74,89,77,36,22,86,79,30,1,58,99,63,46,56,63,87,
17,13,8,1, };
static unsigned short stb__arial_bold_12_usascii_t[95]={ 11,32,41,1,1,1,1,41,1,1,41,
41,41,49,49,13,13,32,32,13,32,13,1,32,13,13,41,32,32,41,32,
32,1,32,32,13,32,32,32,13,32,32,13,22,23,23,23,1,23,13,23,
13,23,13,23,23,23,23,23,1,13,1,41,49,49,32,13,41,13,41,13,
13,23,13,1,23,23,41,41,41,1,1,41,41,1,32,41,41,41,1,41,
1,1,1,49, };
static unsigned short stb__arial_bold_12_usascii_a[95]={ 48,57,81,96,96,153,124,41,
57,57,67,100,48,57,48,48,96,96,96,96,96,96,96,96,
96,96,57,57,100,100,100,105,168,124,124,124,124,115,105,134,
124,48,96,124,105,143,124,134,115,134,124,115,105,124,115,162,
115,115,105,57,48,57,100,96,57,96,105,96,105,96,57,105,
105,48,48,96,48,153,105,105,105,105,67,96,57,105,96,134,
96,96,86,67,48,67,100, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_bold_12_usascii_BITMAP_HEIGHT or STB_FONT_arial_bold_12_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_bold_12_usascii(stb_fontchar font[STB_FONT_arial_bold_12_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_bold_12_usascii_BITMAP_HEIGHT][STB_FONT_arial_bold_12_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_bold_12_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_bold_12_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_bold_12_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_bold_12_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_bold_12_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_bold_12_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_bold_12_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_bold_12_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_bold_12_usascii_s[i] + stb__arial_bold_12_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_bold_12_usascii_t[i] + stb__arial_bold_12_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_bold_12_usascii_x[i];
            font[i].y0 = stb__arial_bold_12_usascii_y[i];
            font[i].x1 = stb__arial_bold_12_usascii_x[i] + stb__arial_bold_12_usascii_w[i];
            font[i].y1 = stb__arial_bold_12_usascii_y[i] + stb__arial_bold_12_usascii_h[i];
            font[i].advance_int = (stb__arial_bold_12_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_bold_12_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_bold_12_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_bold_12_usascii_s[i] + stb__arial_bold_12_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_bold_12_usascii_t[i] + stb__arial_bold_12_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_bold_12_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_bold_12_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_bold_12_usascii_x[i] + stb__arial_bold_12_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_bold_12_usascii_y[i] + stb__arial_bold_12_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_bold_12_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_bold_12_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_bold_12_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_bold_12_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_bold_12_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_bold_12_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_bold_12_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_bold_12_usascii_LINE_SPACING
#endif

