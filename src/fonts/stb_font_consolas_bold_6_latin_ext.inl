// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_bold_6_latin_ext_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_bold_6_latin_ext'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_bold_6_latin_ext_BITMAP_WIDTH         256
#define STB_FONT_consolas_bold_6_latin_ext_BITMAP_HEIGHT         42
#define STB_FONT_consolas_bold_6_latin_ext_BITMAP_HEIGHT_POW2    64

#define STB_FONT_consolas_bold_6_latin_ext_FIRST_CHAR            32
#define STB_FONT_consolas_bold_6_latin_ext_NUM_CHARS            560

#define STB_FONT_consolas_bold_6_latin_ext_LINE_SPACING           4

static unsigned int stb__consolas_bold_6_latin_ext_pixels[]={
    0x81020220,0x40430200,0x26044080,0x70810260,0x04381022,0x82010204,
    0x40881010,0x8820dc19,0x0571041b,0x4041e4c1,0x09b71c1b,0x482205c1,
    0x0205c087,0x02a15433,0x20803cb8,0x3602200a,0x42989661,0x70dc0643,
    0x922141c1,0x370644b9,0x45239144,0x0cc905c4,0x05c1702e,0x5c38a8d4,
    0x48761543,0x88e91b87,0x4330e92b,0x6cc2b83c,0xb858fae4,0x22987930,
    0x7930b895,0x527930cc,0x25cb85c3,0xb8b2a59c,0x525cc2e0,0x56487485,
    0x5cc8d30c,0x36542e24,0x991a8d95,0x54661c39,0x42e4923c,0x0cace195,
    0x73654d95,0x8c9e5495,0x8b487a65,0x5692561d,0x92b5a495,0xb96a0dda,
    0x906d6c3e,0x3c965458,0xa92b2ed4,0x1654792c,0xad24ac79,0x98b3209b,
    0xa5cd693d,0x589955b9,0x912ea489,0x98e248c8,0x65c7974b,0x1dcc9cc3,
    0xa9c4330e,0x9754a924,0x32e4ba8c,0x0eb8f2e3,0x2258c9c4,0x7932d20d,
    0x95ad24ac,0xdb92b5a4,0x8489970b,0x58f60cbd,0x64b51ecc,0xd9932e4b,
    0x21ecd6a3,0x2b492b5a,0x752c641b,0x75b9ad29,0x2562d6b9,0xd30f47d3,
    0x99626647,0x65c5975b,0x44cc8d42,0x24710cc3,0x2487a1c9,0xcb8b2e1e,
    0x271166e2,0x32e2458c,0x4cb96ee5,0x7265d72e,0xdc932eb9,0x2e1ec1c3,
    0x750a144e,0x4eb932e9,0x2e975064,0x65c9754c,0x2e5c9974,0x65c70505,
    0x9758b975,0x5144cb89,0xa80c9609,0x96b2b972,0xab9225ac,0x31c886c1,
    0xb148dc57,0x22552254,0x516b25ac,0xb96a2b98,0x00d9d801,0x02000000,
    0x020404c0,0x00206200,0x80800000,0x00800080,0x41004100,0x03030000,
    0x22081030,0x20201080,0x20606010,0x00020440,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xb8105500,0x806e2041,
    0x020ec39c,0x41ce4011,0x04401000,0x1a8a2004,0x04402008,0x5c144917,
    0x08170660,0x36639980,0x19828843,0x26040218,0x82020839,0x02e264c0,
    0x042b8015,0x9810206a,0x7b305c3d,0xc8f661b8,0x64c9995c,0x22c98dc3,
    0xa89995cc,0x58dcb953,0x05c3d992,0x3526443b,0x26ca8d44,0xc97ee3bc,
    0xc98f661c,0x1ecc7b33,0x32e64597,0x2958587b,0x49b31d23,0x292dd40c,
    0x4c151483,0x218d8a21,0x36264c74,0x95c49930,0x9885c4c9,0xca92b1b2,
    0x49952564,0xacac6495,0x4b996ee6,0xcac647b7,0x5ac72e5b,0x2e472c2a,
    0x321d92e6,0x5cb30d40,0xfc86ea3c,0x09583724,0xa92b2569,0x9592321c,
    0x4adb2a58,0x21b5b256,0x58af25cc,0x4c191a89,0x46d2e64b,0x031b2565,
    0x29730c6c,0x4d32618d,0x2b0cac4b,0x4b586565,0xa5632195,0x5cc36766,
    0xac64b775,0x5c32e78c,0x891c756c,0x64d6e65c,0x47b50363,0x4990b2e4,
    0x596324a8,0x432b4819,0xc9732195,0xea86564c,0x564ad6b3,0x46432f64,
    0x89596b24,0x2dcd7324,0x59b6ab73,0x4362c6c9,0x6d6e658d,0x5cd2f258,
    0x5c9951b5,0xcb932a4c,0x493132a4,0x972e4858,0x360a144a,0x491d9ac1,
    0x5cb936e5,0x226ccb77,0x5cb59242,0x50a240d9,0xca964c99,0xecc932a4,
    0x84ca8190,0x932eb974,0xc93ae4cb,0xcb96b24c,0x758c8a64,0x852e5cb9,
    0x89b6a4cb,0x5cb9b6a4,0xb9e54db5,0x0000005c,0x40101010,0x202041ca,
    0x20404082,0x006cec02,0x0063e982,0x00010b22,0x40008000,0x004c0000,
    0x58c85000,0x00000400,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x2a000000,0x8200823c,
    0x20404040,0x82011880,0x0415021a,0x2210106a,0x0084042b,0x81008201,
    0x20810080,0x041983d9,0x5c0b86e2,0x10a02e21,0x101040b8,0x70e05c04,
    0x0b800044,0x210c0022,0x1c3754c9,0x05c17035,0x3a60cc37,0x11d87910,
    0x49911a85,0x8d49910a,0x988a24c8,0x10b87b32,0x7d30a253,0x330a2198,
    0x88ae20b8,0x89585c29,0x9505c3cb,0x47951d27,0x8976a3cc,0x2627952b,
    0x221882e2,0x3eb854e2,0xb3166795,0x6dc376a7,0x16543664,0x32ae2535,
    0x3263754b,0x26993124,0x3269934c,0x2b3172a4,0x4d3265cb,0x9ecc193d,
    0x064f660c,0x5a64c7b3,0x2b4a5cc9,0x4972a4ca,0x49955a4b,0xa932a4ca,
    0x195ad24c,0x15192ce4,0x52cec6ea,0x2f25ac37,0x8dd57324,0x4699a669,
    0x542ab269,0x46c3752e,0x05edc171,0x8f667b0b,0x9e55a61a,0x5c9793da,
    0xa5e52f20,0xac9794bc,0xbc96b245,0x1706c174,0x06c1706c,0x2b4bc817,
    0xad2b730c,0x2d25acb5,0x2d65ad69,0x5a4b596b,0x22cc89b5,0x6c6ea4dc,
    0xb586ea5a,0x2b19275c,0x489121ba,0xd8377248,0x9c6c3753,0x587b93d9,
    0x549752cc,0x54855241,0x7951c479,0xa9e54f2a,0x49172e3c,0x4cf2a4cc,
    0x3669b33d,0x4f669b33,0x547b34d9,0x65c9953c,0x932eb975,0xb972e4cb,
    0x65c9975c,0x4cb932e4,0x20cb972e,0xa9af258c,0x3da92b3d,0x64188f36,
    0x3a67b558,0x8fa67d33,0x40f3b3e9,0x385d53da,0x71f4c580,0x47d33da8,
    0x000a0040,0x00000000,0x00000000,0x00000000,0x00200000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x08571020,0x5c46e0cc,
    0x043c9821,0x44443a47,0x30202e20,0xcda8ae23,0x305c7330,0x03998a23,
    0x322288cc,0x4c370664,0x170ae239,0x040a2198,0x45a40001,0xb885080b,
    0x10b485c1,0x02264405,0x9821e4c1,0x3667b53c,0x8f60ae63,0x7482e3d9,
    0x23d99ecc,0x31b8791b,0x3662567b,0x8661e5c2,0x9d8e721a,0x9eccf663,
    0x2a7b33d9,0x2a19b73c,0x8327953c,0x360ec39c,0xb0760ec1,0x70cc1d83,
    0x171c5c75,0x0e725a47,0xa8760e17,0x3321693c,0x70321910,0x8d1b16c1,
    0xb0bba543,0x1d0acb92,0xb972c997,0x4b16264c,0x469ad469,0x64242565,
    0x1a972e59,0x449d9332,0x54b162c5,0x2a17971b,0x8363751b,0x98f264cc,
    0xc98f263c,0x3c98f263,0x21ba9732,0xb86a21a8,0xcc93325c,0x8f26b975,
    0x41d991ba,0x0da4c3d8,0x361c576a,0x54bb50cb,0x8656b315,0x2c5c0adb,
    0x03a04dcb,0x9972458b,0x85ad9624,0x26e2cc84,0x25bc86a0,0x8b160ddb,
    0x323752c5,0x5d46ea3d,0x96f29b31,0xb96ee5bb,0xbb96ee5b,0x58c96ee5,
    0x770ee1dc,0x192de4b0,0x2ddd62eb,0x2e032375,0x4d99224c,0x32a1c436,
    0x54ca86c4,0xba932a99,0x7d558b83,0x7d51606e,0x71f4cfaa,0x03ea9f4c,
    0x96321f4c,0x8c9ed41b,0xea9f5407,0x4faa7d53,0x4f6a03da,0x78c8e3da,
    0x6cec3676,0x2761b3b0,0x361b3b0d,0x5cb190d9,0x5c362e5a,0x9e32085a,
    0x36b1758c,0x027b50d9,0xb8006d64,0xd700713e,0x03800007,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x44000000,0x0b8f262c,0x64c00f26,0x43998e03,0x95840419,0x007485c1,
    0x44040041,0x08713260,0x33200b22,0x0dc47970,0x91043cb8,0x9171cdc7,
    0x2140055c,0x41025a40,0x3a4335ca,0x2153922e,0xb8f32174,0xcb8aa24d,
    0xa8f2e043,0xa5dc3791,0x5951e474,0x32690f66,0x51d27d74,0x4b20ccb9,
    0xad72a4ba,0x22d92e64,0x0b932a0c,0x5431b2cc,0xb3b98e5c,0x2a3d88bb,
    0x664f664a,0x5344b3b5,0xb12e5417,0xb972d645,0x23ca9f54,0x6c4b22b4,
    0x98ed4ea1,0xac8ba24c,0x5acb190a,0x64376e2c,0x96321c59,0x5d4b391a,
    0x35a89935,0x65202e7b,0x44c9924b,0x254bb53a,0x2567507a,0xc8faab73,
    0x4ab96b5c,0x3a8b1b24,0xcc9644d3,0xba932e0b,0xac64b222,0x5c76259d,
    0xe992ea1c,0x09b96b22,0x65c79524,0x4b223d15,0x41d0b258,0x437722e8,
    0x162d64b9,0x51664b99,0x35166477,0x24cb9726,0x5d532e0e,0x4b267b34,
    0x0e8f63ca,0x2a81b162,0x32e58895,0x645972e4,0x75c99758,0x44db5240,
    0x17990245,0x4cc86d64,0x1e656320,0x5726e422,0x859174c9,0xa89dd41b,
    0x64104401,0x22c9b54d,0xf1e7658c,0x5161e6c3,0x122c6453,0x003da819,
    0x00000016,0x3ae9b916,0x13720203,0x058c8b00,0x03e9966e,0x01f4d372,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x08000000,0x11064551,0x47352998,0x2d5d76a0,0xab9a6573,
    0x41010444,0x55052ea0,0x000b2215,0x00000000,0x21d80000,0xb966e39c,
    0xd98f2e48,0x540a8e93,0x2607953c,0x6dc7970d,0x3208f264,0x407950c9,
    0x408ee5cb,0x432b0a8c,0x2a757298,0xb8973248,0xb0dc5f14,0x45730fc1,
    0x4b983ae4,0x0b0cc975,0x00ccc365,0x00000000,0x30000000,0xb9266479,
    0xb3b0e64b,0x8b967658,0x0dd42aa1,0x5642e21b,0xd9ac06c4,0x2361d9b2,
    0x5c522125,0x24dc8a24,0x014c04ba,0x144c6260,0x4b573eb8,0x2e7d3198,
    0x64422259,0x00000602,0x00000000,0xb8000000,0xcb96f25b,0x59d83723,
    0x45cb5b2c,0x2ea3750b,0x590b8911,0x4720f44b,0x4cd793d9,0x0c87d56b,
    0x35e40b7b,0x0000007a,0x00000000,0x00000000,0x00000000,0xd8000000,
    0xa4f190d9,0x664b190b,0x24acfaa3,0xda86a3db,0x3329d503,0x193ae2c4,
    0x245952d2,0x00598922,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_bold_6_latin_ext_x[560]={ 0,1,0,0,0,0,0,1,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0, };
static signed short stb__consolas_bold_6_latin_ext_y[560]={ 4,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,0,2,2,
2,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,4,-1,0,-1,0,-1,0,-1,0,-1,-1,
-1,-1,-1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,-1,-1,-1,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,-1,0,0,0,
-1,-1,-1,0,0,1,2,2,-1,-1,-1,0,-1,-1,-1,1,-1,1,4,-1,0,1,-1,-1,-1,0,-1,-1,-1,-1,
-1,-2,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,
-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,
-1,-1,-1,-1,0,-1,-1,-2,0,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,1,0,-1,-1,-1,0,-1,1,-1,-2,0,
-1,-1,-1,0,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,0,0,-1,-1,0,0,-1,-1,
-1,-1,-1,-1,0,0,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-2,-1,-1,-1,0,1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-2,-2,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0, };
static unsigned short stb__consolas_bold_6_latin_ext_w[560]={ 0,2,3,4,4,4,4,2,3,3,3,4,3,3,
2,3,4,3,3,3,4,3,4,3,3,3,2,3,3,3,3,3,4,4,4,3,4,3,3,4,4,3,3,4,
3,4,4,4,4,4,4,3,4,4,4,4,4,4,3,3,4,3,4,4,3,3,4,3,3,3,4,4,3,3,
3,4,3,4,3,4,4,3,4,3,3,3,4,4,4,4,3,3,1,3,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,2,3,4,4,4,
1,4,3,4,3,3,3,3,4,3,3,3,3,3,4,4,4,2,2,3,3,3,4,4,4,3,4,4,4,4,
4,4,5,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,
3,3,3,3,4,3,3,4,3,3,3,4,3,3,4,3,4,4,4,4,4,4,4,3,4,3,3,4,4,4,
4,3,4,3,4,3,4,4,3,3,3,3,3,3,5,4,4,4,3,3,3,3,3,3,3,3,3,3,4,4,
4,4,4,4,4,4,4,3,4,3,3,3,3,3,3,3,3,4,3,3,4,4,3,3,4,4,4,3,3,3,
3,4,5,4,4,3,3,4,4,4,3,4,3,3,4,3,4,4,4,4,4,4,4,4,5,4,4,4,5,4,
3,4,3,3,3,3,3,3,4,3,4,5,4,3,4,3,4,3,4,3,4,3,4,4,4,4,4,4,4,4,
4,3,4,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,3,5,4,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,3,3,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4, };
static unsigned short stb__consolas_bold_6_latin_ext_h[560]={ 0,6,3,4,6,6,6,3,7,7,4,4,4,1,
3,6,5,4,4,5,4,5,5,4,5,4,5,6,5,3,5,6,7,4,4,5,4,4,4,5,4,4,5,4,
4,4,4,5,4,6,4,5,4,5,4,4,4,4,4,7,6,7,3,2,3,5,6,5,6,5,5,6,5,5,
7,5,5,4,4,5,6,6,4,5,5,4,3,3,3,5,3,7,7,7,3,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,6,6,4,4,4,
7,6,3,5,4,3,2,1,4,3,3,4,4,4,3,5,6,2,1,4,4,3,5,5,5,6,5,5,5,5,
5,6,4,5,5,5,5,5,5,5,5,5,4,5,6,6,6,6,6,3,6,6,6,6,6,5,4,6,6,6,
6,6,6,6,5,5,6,6,6,6,5,5,5,5,6,5,6,6,6,6,6,4,5,6,6,6,6,7,7,7,
5,6,5,6,6,6,6,6,6,6,6,6,6,6,5,6,4,6,5,6,5,6,5,6,6,6,5,6,6,7,
6,7,6,7,6,7,5,6,4,5,5,5,5,5,5,5,6,7,5,3,5,7,6,7,6,7,3,5,6,6,
7,5,5,4,5,4,5,5,5,6,6,5,5,5,6,6,6,6,6,6,6,6,5,5,5,5,6,6,5,5,
6,6,6,6,5,5,6,6,6,6,5,6,4,5,6,6,6,6,6,6,7,6,6,6,6,5,5,5,5,7,
5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,6,7,5,6,6,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,6,6,6,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4, };
static unsigned short stb__consolas_bold_6_latin_ext_s[560]={ 254,70,163,232,76,108,142,176,25,43,70,
83,48,191,253,195,226,52,66,235,92,239,1,88,6,79,253,227,53,150,209,
40,47,1,56,213,222,44,40,98,30,26,27,16,252,11,6,243,247,142,237,
15,227,66,217,212,207,202,194,52,13,56,119,186,97,71,180,23,161,31,75,
103,80,107,60,89,94,115,135,84,147,62,168,19,35,182,106,101,145,57,141,
64,68,70,124,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,
126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,254,73,58,
148,153,158,79,44,111,248,131,115,179,191,177,137,167,173,186,190,171,198,113,
183,253,144,111,129,166,161,156,66,146,141,136,131,126,85,120,112,108,104,194,
95,91,87,83,79,139,69,123,132,137,86,152,133,175,165,170,217,190,14,163,
185,208,203,91,236,249,241,229,225,49,30,22,82,203,198,194,190,104,182,99,
118,123,128,133,242,177,114,109,138,95,81,20,10,189,40,121,81,35,245,90,
77,73,69,65,61,57,53,171,44,21,35,158,26,167,18,216,9,5,1,186,
245,240,91,231,86,222,33,212,38,162,199,74,1,5,252,23,27,19,35,157,
15,39,154,43,105,128,101,118,96,158,65,99,95,6,247,48,35,220,198,239,
116,151,53,49,176,181,185,30,26,21,16,11,6,1,249,74,99,147,60,228,
223,54,9,210,205,201,197,31,243,182,178,173,169,234,157,61,212,143,139,134,
130,125,237,1,219,214,115,192,171,207,153,10,74,39,44,48,103,231,62,217,
221,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,110,
126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,
126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,
126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,
126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,
126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,
126,126,126,120,29,203,148,163,186,126,126,126,126,126,126,126,126,126,126,126,
126,126,126,126,126,126,126,126,126,126,126,126,126,153,233,173,169,126,126,126,
126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,
126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,
126,126,126,126,126,126,126,126,126, };
static unsigned short stb__consolas_bold_6_latin_ext_t[560]={ 1,9,34,29,9,9,9,34,1,1,35,
35,35,34,23,9,23,35,35,23,35,23,29,35,29,35,9,9,29,34,23,
16,1,35,35,23,29,35,35,29,35,35,29,35,29,35,35,23,29,16,29,
29,29,29,29,29,29,29,29,1,16,1,34,34,35,29,9,29,9,29,29,
9,29,29,1,29,29,29,29,29,9,9,29,29,29,29,35,35,34,29,34,
1,1,1,34,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,1,9,9,
29,29,29,1,9,34,23,29,34,34,34,29,34,34,29,29,29,34,23,9,
34,27,29,29,34,23,23,23,9,23,23,23,23,23,9,29,23,23,23,23,
23,23,23,23,23,29,23,9,9,9,16,9,34,9,9,9,9,9,23,29,
9,9,9,16,9,9,1,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,29,16,16,16,16,16,1,1,1,23,9,23,9,9,1,9,
16,16,16,16,16,16,16,16,16,35,16,16,16,16,16,16,16,16,16,16,
9,9,1,9,1,9,1,9,1,16,9,35,23,23,16,23,23,23,23,9,
1,23,34,23,1,9,1,9,1,34,23,9,9,1,16,23,35,16,29,16,
23,23,9,9,23,23,23,9,9,9,9,9,9,9,1,23,23,16,23,1,
1,23,23,1,1,1,1,23,16,1,1,1,1,16,1,35,16,1,1,1,
1,1,1,1,1,1,1,1,23,16,16,29,1,29,29,29,29,23,29,23,
23,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,1,
29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,
29,29,29,1,1,23,1,1,1,29,29,29,29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,29,29,29,29,29,1,1,1,1,29,29,29,
29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,29, };
static unsigned short stb__consolas_bold_6_latin_ext_a[560]={ 53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_bold_6_latin_ext_BITMAP_HEIGHT or STB_FONT_consolas_bold_6_latin_ext_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_bold_6_latin_ext(stb_fontchar font[STB_FONT_consolas_bold_6_latin_ext_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_bold_6_latin_ext_BITMAP_HEIGHT][STB_FONT_consolas_bold_6_latin_ext_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_bold_6_latin_ext_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_bold_6_latin_ext_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_bold_6_latin_ext_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_bold_6_latin_ext_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_bold_6_latin_ext_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_bold_6_latin_ext_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_bold_6_latin_ext_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_bold_6_latin_ext_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_bold_6_latin_ext_s[i] + stb__consolas_bold_6_latin_ext_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_bold_6_latin_ext_t[i] + stb__consolas_bold_6_latin_ext_h[i]) * recip_height;
            font[i].x0 = stb__consolas_bold_6_latin_ext_x[i];
            font[i].y0 = stb__consolas_bold_6_latin_ext_y[i];
            font[i].x1 = stb__consolas_bold_6_latin_ext_x[i] + stb__consolas_bold_6_latin_ext_w[i];
            font[i].y1 = stb__consolas_bold_6_latin_ext_y[i] + stb__consolas_bold_6_latin_ext_h[i];
            font[i].advance_int = (stb__consolas_bold_6_latin_ext_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_bold_6_latin_ext_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_bold_6_latin_ext_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_bold_6_latin_ext_s[i] + stb__consolas_bold_6_latin_ext_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_bold_6_latin_ext_t[i] + stb__consolas_bold_6_latin_ext_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_bold_6_latin_ext_x[i] - 0.5f;
            font[i].y0f = stb__consolas_bold_6_latin_ext_y[i] - 0.5f;
            font[i].x1f = stb__consolas_bold_6_latin_ext_x[i] + stb__consolas_bold_6_latin_ext_w[i] + 0.5f;
            font[i].y1f = stb__consolas_bold_6_latin_ext_y[i] + stb__consolas_bold_6_latin_ext_h[i] + 0.5f;
            font[i].advance = stb__consolas_bold_6_latin_ext_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_bold_6_latin_ext
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_bold_6_latin_ext_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_bold_6_latin_ext_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_bold_6_latin_ext_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_bold_6_latin_ext_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_bold_6_latin_ext_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_bold_6_latin_ext_LINE_SPACING
#endif

