// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_16_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_16_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_16_latin1_BITMAP_WIDTH         256
#define STB_FONT_times_16_latin1_BITMAP_HEIGHT         82
#define STB_FONT_times_16_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_16_latin1_FIRST_CHAR            32
#define STB_FONT_times_16_latin1_NUM_CHARS            224

#define STB_FONT_times_16_latin1_LINE_SPACING          10

static unsigned int stb__times_16_latin1_pixels[]={
    0x00000000,0x98000000,0x0001bacb,0x12a01894,0x1c800320,0x01004a80,
    0x00aa0000,0x32600390,0x00002001,0x3327b930,0x5500080c,0x01799500,
    0x007aa033,0x5554c022,0x212e00aa,0x92066919,0x2a075ffb,0x5cfc05d6,
    0x2a003605,0x100b1003,0xcfc80799,0x3e6f6019,0x10034400,0x02d6400b,
    0x4019cfc8,0x2a00f9cc,0x336a03d4,0xb1007401,0x2a07a617,0x09803f01,
    0x402e0370,0x4c91cc18,0x2bfff242,0x00265103,0x02800600,0x01860030,
    0x2601dc44,0x00260050,0x1088004c,0x07711001,0x9500a130,0x22e3607a,
    0xb9006206,0x20b01f50,0x5c12601f,0x59001c01,0x3e48b324,0x664c75ff,
    0x5551e543,0x4c55514c,0x01797102,0x1005e5c4,0x5c401797,0x32e200bc,
    0x21e64c0b,0x0f3263ca,0x1e64c795,0x2cb88f2a,0x0a203ca8,0x220f52a0,
    0x3cca8a77,0x05f11e5c,0xf07709f1,0x82c81753,0xaa55542a,0x92642980,
    0xffc922d4,0x8d07c875,0xf88aa2f8,0x17b10aa2,0x17b10baa,0x17b10baa,
    0x17b10baa,0x17b10baa,0x20f90baa,0x90d07c86,0x0fdc1a0f,0x201ae034,
    0x79f03d4a,0x8b307f20,0x50bd01fa,0x1fb79f0d,0x43224074,0x5d88314d,
    0x225491dc,0x5c3ae544,0x24b70906,0x0b9092dc,0x542e41f5,0x3ea1720f,
    0x83ea1720,0x2e0fa85c,0x20d70906,0x20906b84,0x20240fe9,0xea5401fd,
    0xd00ee981,0x07d40c8b,0xf87985d8,0x483c4be1,0x0331e8ee,0x9120b8b7,
    0xd70e7008,0x1c4fc120,0x7c4389f8,0x0be29f02,0xf02f8a7c,0xa7c0be29,
    0x5c9f02f8,0x20d70906,0x20906b84,0x50246ea9,0xd4a809b5,0x207fa203,
    0xf30532f9,0x3e20fa03,0x2a9b0fc0,0x789e3987,0x8192dc0a,0x39c00c84,
    0xb704835c,0x02f6e017,0x557a03f5,0x3eabd01f,0x07eabd01,0xd01faaf4,
    0xb84835cb,0x20d70906,0x4bd13304,0x007d5204,0xcb807a95,0x048fb80f,
    0x203e20fe,0x4b21f879,0x4b538879,0x22dc0e5c,0x0089120b,0x120d70e7,
    0x9f1027c4,0x5b601f70,0x2edb00fb,0x3eedb00f,0x03eedb00,0x120d736c,
    0x35c241ae,0x3e633048,0x3e8e6093,0x820f52a0,0x03ba05b3,0x82640f98,
    0x83a1f85a,0x51d5480f,0x2dc04e79,0x912648ee,0x41ae1ce0,0x39007204,
    0x53a03f30,0x269d01f9,0x3e69d01f,0x07e69d01,0x120d7274,0x35c241ae,
    0x7d433048,0xd999904a,0x41ea540d,0x5c036729,0xdace9806,0x37e0ae01,
    0xa40ec2ba,0x115933c8,0x24c8b705,0x4e0916a4,0x20483d43,0x0fa04804,
    0x883e87e2,0x3e20fa1f,0x87e20fa1,0x2a1f883e,0x20f50907,0x20907a84,
    0x442fe419,0x4a817c44,0xbcce883d,0xc801ae02,0x7c06c05f,0x71091009,
    0x90ee0700,0x048d3247,0xa83f10e7,0x88154c42,0x03ea02a9,0x640fa899,
    0x13207d44,0x544c81f5,0x3e22640f,0x0fc41541,0x507e20aa,0x1b60aa05,
    0x541b606e,0x012203d4,0x7d5001ae,0x00fc0260,0x440e202e,0x4c1b840b,
    0x82439923,0x977b3073,0x5c09f707,0xbce9804f,0xd79d303e,0x3af3a607,
    0x7d79d303,0x0faf3a60,0x01e5decc,0x407977b3,0x103cbbd9,0x545881bb,
    0x867ec43f,0x15793ca9,0x2fe98010,0x221ba800,0x8017f300,0xaaaa8809,
    0x2059f01a,0x120a691a,0x00220084,0x02200000,0x08800440,0x22001100,
    0x40011000,0x00220008,0x00000100,0x00000000,0x00000000,0x80100000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x2a883000,0x32000640,0x9bbb9801,0x00012a02,
    0x00c98002,0x02a8015c,0x00193057,0x00001540,0x05dc0000,0x20000000,
    0x1037504a,0x995dd405,0x5c188c40,0x4381540d,0x01d40574,0x49900b10,
    0x779105c8,0x5c0fd6e0,0x56c019cf,0xe802c405,0xb5b0b300,0x7407ad50,
    0x20e5dc40,0xbb81a8b8,0x45441201,0x241d7002,0x1b003d70,0x0481b688,
    0x427445b1,0x5644150a,0x10cc25c4,0x0050022d,0x582e400c,0x51880c30,
    0x80771101,0x01801108,0x820c0188,0x80a8c409,0x0d34a808,0x01ce03f5,
    0x00065c07,0x3f005c1f,0x95a81100,0x85c80d47,0x189240fd,0x81b51006,
    0x0028805d,0x207f00a2,0xb880a200,0x405100bc,0x2cccccc9,0x33333326,
    0x33333262,0x42f2e22c,0x9930bcb8,0x5c459999,0x7c4b20bc,0x4c1a6660,
    0x6b806a03,0x05107c00,0x06ea00fc,0x81c4b2b5,0xa7c642f8,0x24eccecb,
    0x32201ba8,0x02edc7d8,0x06b801ae,0x2e0007e6,0x7007d406,0x2447a80d,
    0x7a8911ea,0x503ea244,0x2447a81f,0x2a5d03ea,0x444eb885,0xd80901ba,
    0x7d54401f,0x713f0240,0x44b71c81,0x54090d8d,0x22f46e1f,0x03e2d0e3,
    0x191454e4,0x01fd8176,0x3ea03fb0,0x01fd8000,0x1fd803e6,0xf5061ea0,
    0x4187a830,0x207cc0f9,0x07cc187a,0x570beaba,0x1f1683f2,0x36aa0388,
    0x07d4ae04,0x6d5fc02e,0x22f8d10f,0x15d46a18,0x6d8aa3f5,0x47114ca6,
    0x1c7c221f,0x6d541a34,0x04daa804,0xaa8005f1,0x403e604d,0x1ea04daa,
    0xa818f503,0x207cc0c7,0x063d40f9,0x225d03e6,0x225f1a2f,0x401507e3,
    0x83e01f54,0x1f81c40f,0x136354ba,0x23d699c4,0xa7439af9,0x24ddcddb,
    0x5721eab8,0x86dc22af,0x003ea904,0x27403ea9,0x03ea9008,0xf54807cc,
    0x2a67ea01,0x5a99fa85,0x85a99fa8,0x207cc0f9,0x985a99fa,0x29b1740f,
    0x5712746a,0x8e60483d,0x07c6a83e,0x5321f824,0x240f20f9,0x4ce8f297,
    0x22490fc4,0x3603d0e8,0x0bec850f,0x980fa398,0x0fd40fa3,0x3e8e60a2,
    0x47301f30,0x533f503e,0xb533f50b,0x0b533f50,0x40f981f3,0x985a99fa,
    0x2971740f,0x0e89ec79,0x9901c43d,0x1f50dd99,0x7c05c07c,0x3a2f8b21,
    0x6d6a0b81,0x89903e62,0x3e2d5124,0x03dff101,0x333320d9,0x3333206e,
    0x2f7a606e,0xd999902b,0x3203e60d,0xf506eccc,0x40c7a818,0x07cc0c7a,
    0x18f503e6,0x9d740f98,0x51e8ba2c,0x00a87e2d,0xf82f8891,0x20e207e2,
    0x79911a1f,0x8d887105,0x555ed5c6,0xdd10e382,0x133019b7,0x12216460,
    0x889105f1,0x1015c02f,0xf982f889,0x0be22440,0x0f5041ea,0x4c107a82,
    0x2a07cc0f,0x307cc107,0xc985795f,0x2fba22bb,0x0dc090cd,0x66f5436c,
    0x5b90904f,0x01802037,0x00441031,0x07000041,0x0dc0aacc,0x6c0dc36c,
    0x3702d406,0x81f30db0,0x7a86d81b,0x2a1ea0a8,0x982a1ea0,0x2a07cc0f,
    0x03e60a87,0x04000400,0x7ec43fa8,0x0401080c,0x00000010,0x80000000,
    0x2a0cd401,0x867ec43f,0x67ec43fa,0xf501b880,0x10cfd887,0x0fea17fb,
    0x36219fb1,0x226ccccf,0x26ccccfd,0x6ccccfd8,0x6c42ff62,0x99fb10bf,
    0x5fec4d99,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x18800000,0x332e6013,0x3355302a,0x441e9800,0x16c02c84,0x825c44a8,
    0x50703a83,0xcb880e07,0xb81f4402,0x540f2011,0x3026301b,0x32e20543,
    0x01999101,0xccca86aa,0x4055542c,0x2ea602b9,0x0373101a,0xbbb9812e,
    0x82eb5429,0x95c3d44b,0x26d442ec,0x03ea2ce4,0x302c40b1,0x1a839187,
    0x980b8498,0x47201a84,0x0367200d,0xb107dd73,0x26255260,0x363c87d7,
    0x40fdd642,0x1d883ccc,0x22eccce8,0x51c8b11c,0x83983709,0x40360fa4,
    0x0017224c,0x47e0e0d7,0x4190d879,0x80f98220,0x20200601,0x4c0e20da,
    0x44981c44,0x0587c048,0x40601822,0x07c3d008,0x216c7900,0x80510b60,
    0x22c0981e,0x23443a0f,0x9dde45c6,0x45b9a638,0x160b9008,0x013e06e6,
    0x788b53e8,0x1e20dcc0,0x75103751,0x25c06203,0x81224c09,0x3e006449,
    0x40998abb,0x037501ba,0xe8f106e6,0x1e40dd43,0x7e41c05b,0x22009903,
    0x2a49aec4,0x4b2516c7,0x0f21852d,0x207f0375,0x263d8640,0x20ccc41f,
    0x2e20bad8,0x7b0c81af,0x40f8b468,0x10701f16,0x9806a351,0x249806e4,
    0x30fd8029,0x5b8e417f,0x8645b8e4,0x49b1ea3d,0x24c8b71c,0x984c882d,
    0x567c1fea,0xd10ae03e,0x361f887d,0x3a2b2153,0xc8d10311,0x00fccb71,
    0x2a6daad8,0x643fb81f,0xad81e200,0x4712c6da,0x41f8e21f,0x710a8849,
    0x222aa244,0x0aa85953,0x7d642449,0x7c688934,0x362f8d12,0xb1ea6daa,
    0x645f1a29,0xb9815d34,0xf993204f,0x41603f30,0x4eec0edb,0x766451fa,
    0xd10dc141,0x001f52f8,0x417c40b5,0x7ffec0f9,0x2d41e21d,0x3d5710e0,
    0x741eab88,0x1ae0c801,0xb8074648,0x2e5b1ae0,0x23540c9f,0x54d8d54d,
    0x4fa3c40b,0xbf926c6a,0x1aa03d97,0x7d1ea788,0x36590910,0x227aa986,
    0x04cb3591,0x29b1aa14,0x479802f8,0x07cc2ec0,0xf124cc4e,0x20811e60,
    0x7443d0e8,0x953cc3d0,0x8345c550,0x4530581a,0xe83e668b,0x320f982e,
    0x99e41f33,0x1f87e047,0x1b1e41f3,0x80b10041,0x82c83e26,0x80f4782b,
    0x973d9c3d,0x83e60c0e,0x20413a3c,0x7cc288ce,0x89707cc3,0xce81e228,
    0x2d50c288,0x7c5aa1f8,0x424c3e21,0x10bf36a4,0xb5240707,0xb8be65f9,
    0xd17c50df,0x743d17c3,0x8964288c,0x743d17c6,0x410aa000,0x01d16c2a,
    0x80d87a0b,0x219b883b,0xf81880b9,0x41fa87a2,0x06ff4c28,0x26d566c4,
    0x30b37b22,0x06ff4c0f,0x2fba21f3,0xb7dd10cd,0x05565419,0x4243402e,
    0x805c1abd,0x44eefe46,0x33220efe,0x15e6442b,0xb1037fa6,0xbcc88197,
    0x9f3007c2,0x3cdf8877,0x8819ac88,0x85557304,0x2ae203a9,0x0b900ba9,
    0xd3057991,0x0040577b,0x91000088,0x0804017f,0x0c000000,0x99883010,
    0x04020181,0x00801004,0x01002004,0x00400800,0x01002200,0x20010002,
    0x02200200,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x001aba98,0x000098c0,0x202f2e20,
    0x085c42aa,0x82cb8962,0x797103ca,0x32016a01,0x4c0ba203,0x262aa850,
    0x22acca82,0x1e543cc9,0xcc987995,0x97139950,0x1072e217,0x09701577,
    0x05d45c40,0x971015c4,0x10599999,0x0dc046e0,0x805d50e6,0x2ea87d79,
    0x0fcc25c0,0x32a1d95c,0x2e1221df,0xbd88681f,0x03605d50,0x0d9c80b0,
    0x220f8cc8,0x4770aa2f,0x8683e44c,0x641d80fc,0x8550fe26,0x1601f32b,
    0x79f51322,0x3d8e41fb,0x3887f620,0x775cc15c,0x5ccc45c3,0x0017438e,
    0x06201740,0x043a03e2,0xfd300088,0xa85c8481,0x0440300f,0x4000c110,
    0x903e125b,0xf10906b8,0x41f30905,0x3e34245c,0x09901100,0x44d17c3f,
    0x107e6e01,0x030167d4,0x5d0a7165,0x82a854c0,0x1f10002e,0x2ea201f0,
    0x6ea98281,0x7c0be224,0x30aa1534,0x1530aa15,0x06ea20aa,0x7741c4fc,
    0x120d7060,0x7406a2ec,0x4c483ee3,0x0dcc07c5,0x9b0fc25c,0x45c4016a,
    0x10ba061f,0x45437137,0x5743103a,0xf11f81c9,0x83532e81,0x220f8829,
    0xf1682bfa,0xe8998481,0x203f5125,0x07c47e5e,0x3e07c47e,0xf1681f11,
    0x3017b701,0x41ae07ff,0x0241f304,0x299fe4d9,0x1903e3d4,0x3f0970f6,
    0x80479964,0x5a9af88b,0x567cc2e8,0x50264a7b,0x7435d674,0x325d03e1,
    0x7c426c41,0x10b3ea20,0x261a0fc7,0xf7127f31,0x21e9b601,0x81f0f40f,
    0x23883e1e,0x204f881f,0x35c1efd8,0x1cd3a048,0xb9531f30,0x7c4be212,
    0x236d56c0,0x83a1f84b,0xc88298cf,0x8499af99,0x43e2e82e,0x41306998,
    0x43d03e2e,0x80dd740f,0xe80f884b,0x43d57101,0x3ea19878,0xe80fcc4a,
    0x740f87a4,0x7c3d03e1,0x80f55c40,0x46e9801c,0x7d40906b,0x8bbe8048,
    0xdf7048f9,0x202d41f5,0x2badf84b,0x9c82ff54,0x3a061f99,0x383e2e82,
    0xd0e75179,0xf87a07c5,0x97036f40,0x01d01f10,0x7987a1d1,0x42fe4198,
    0x3a1f883e,0x7c3d03e1,0x441f0f40,0x81203d0e,0x0f507cc2,0x0097f012,
    0x016f49d7,0x811e60f8,0x2009f84b,0x7c471048,0x3a0ba081,0x2a3883e2,
    0x3e2e8170,0x40f99f40,0x49704dae,0x754c6999,0x22d5288b,0x5503ea1f,
    0x81f50db0,0x0f99f44c,0x740f99f4,0x8b541f33,0x80aa621f,0x07e23446,
    0x01fb8055,0x01ee2f88,0x446740f8,0x00fc25c2,0xf11603a2,0x0bae0b83,
    0x2e207c5d,0x2e80ba9a,0xf3bf703e,0x83e8ae87,0x506fee5b,0x221df955,
    0xf30cdbee,0x2206ec41,0x7d79d305,0x87f3bf70,0x5c3f9dfb,0x3a23f9df,
    0x9f70cdbe,0x1cbbde80,0x03cbbd98,0x31600688,0x30fe6009,0x45b81bfd,
    0x0ea00bf9,0x6fe447b2,0xf9806dcc,0x0203fa8c,0x3fa8df98,0x1bf30208,
    0x0f6c47f9,0x00010401,0x08801000,0x08201040,0x00000410,0x02200220,
    0x40400100,0x10100000,0x000003db,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x93000000,
    0x13035799,0x64c5c831,0x13cb80bc,0x10362177,0x664c001b,0x65cc1acc,
    0x4459950b,0x99930bcb,0x0dc43999,0x570072e2,0xcb85e5cc,0x4733260b,
    0x33263cb8,0x3332e01b,0x79950ccc,0x33263cb8,0x0264c2bc,0x33261791,
    0x2202cccc,0x2f332602,0xcccc981a,0x20551ccc,0x2a1f7009,0x9aaba0ee,
    0x03dc3bb9,0x1d41b8ba,0x9999a8ae,0xd99ee199,0x43643dc4,0x2a3dc0fa,
    0xbc83f512,0x87f303fc,0xf8825c7b,0x07dc1dc6,0x44f88320,0x5c2cc1fc,
    0x3fb8bd17,0x47a83f90,0x701ae048,0xb83baa1f,0x5caa1f32,0x1ea03503,
    0x0c3003b2,0x2e02abea,0x3060c125,0xf98f50c0,0x21721ea1,0x0c3d40f9,
    0x1ae0887e,0xa9ea1ee4,0x4897cc03,0xd8300f50,0x80c8bd06,0xda8be67a,
    0x540fd886,0x07f60187,0x30fc87a8,0x500307cc,0x3ea1ea03,0x20a60a62,
    0x444ea9fa,0x42981a9f,0x2a180629,0x0f50fcc7,0xa81f30b9,0x807a0227,
    0x43d8b869,0x2e00757a,0x01ea048f,0x3e601f50,0x99ea0532,0x70be6a2f,
    0x0c7a81f3,0x5409b550,0xf983fa87,0x4c0d4000,0x57e1aafc,0x426c44d8,
    0x9907ea7a,0x6c49b109,0x3ea18064,0x7d44ea99,0x985c9999,0x64cfd40f,
    0x0f201e81,0x7f50f655,0x00fe8009,0x3f8801ea,0x50247dc0,0x326a3e4f,
    0x2a07c646,0x5205a99f,0x20f500fa,0x800f985f,0x2aabcaaa,0x74133f71,
    0x212e12e6,0x664be67a,0x2e0ccdfd,0x0c0325c4,0x87d955f5,0x5daaaafa,
    0x57d40f98,0x201e81ca,0xa87b1c45,0x2e001fdf,0x801ea02f,0x01dd005d,
    0x205657d4,0x1371f89a,0xa99fa81f,0x81f47305,0xf30bd07a,0x06a01301,
    0x727c43d4,0x4f509709,0x701f80fc,0x18064b89,0x547f11ea,0x0f985c87,
    0x3d0113d4,0x999902e0,0xfdbd45bd,0x0fbb9801,0x3ee00f50,0xa80d7000,
    0x95d8d407,0x18f503e2,0x0dd99990,0x20be21ea,0x506e80f9,0x3ee1ea03,
    0x212e12e1,0x320ccbfa,0x20ccdfcc,0x40325c4b,0xa97a1ea1,0x0f985c87,
    0x40f403d4,0xeaaaa81a,0x1fd9ea1c,0x505e9220,0x82f9860f,0x7a80d701,
    0x1cf98d40,0x107a81f1,0x20be2244,0x980fb87a,0x32e3880f,0x2a3ccddc,
    0x16e1f547,0x401ea16e,0x5b8b701f,0x31ea1806,0x2e43d47f,0x01ea07cc,
    0x0cc3507e,0x363d43d8,0x7cc1b01f,0x20a87a83,0xd701a84e,0x0d407a80,
    0x2a0fccdb,0x206e0a87,0x7547a86d,0x5301f303,0xccfd9800,0x0f6c41dd,
    0x7ecc3db1,0x033ee00b,0x3b623db1,0x33333351,0x3333f663,0x42ff663e,
    0x3f622fe9,0x017fb30b,0x7fd433ea,0x47b00fff,0xff70bfd9,0x9837aa39,
    0xbfb30bff,0x6fe4dd99,0xd307dccc,0x2ff6605f,0x550cd980,0x6c433f22,
    0x2a6ccccf,0x867ec43f,0x1ddccfd9,0x0819fb10,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x93192632,0x88015799,0x20375101,0x542a62b8,0xa82ba982,0x2a98001b,
    0x551aa8a6,0x37302a63,0x4ca2eea0,0x10008110,0x00573377,0x4dc30c04,
    0x2a9a81b8,0x3bbbb880,0x805d4ee6,0x2a282819,0x83951c99,0x12e20cb8,
    0x9223a81c,0x29f16a9f,0x401d917b,0x03e2d029,0x11f8f639,0xc891481f,
    0x6655cb71,0x351f44ac,0x227a8fc4,0x5c3d8644,0x192c1f52,0x2f100e54,
    0x980b73f9,0x31b8643c,0xf98d759f,0x260743bc,0x2ed91361,0x92206602,
    0xf559f31b,0x7518f755,0x0ddc1b84,0x474d524c,0x13d4e259,0x4414c09f,
    0x0c4d07e3,0x3d107c3d,0xb17c6886,0x39aa0641,0x05c7e4c8,0x789b6ab6,
    0xb34b8bae,0x44e05950,0x9507bacf,0xd16a7705,0x90ba07c5,0xb821b1b3,
    0x22059d06,0x64408888,0x43d1741b,0x6cc1a80f,0x24424e20,0x2638a4b3,
    0x01fc4f51,0x3aae2053,0x21e816a1,0x5067dc0f,0x70534d8d,0xf30513f0,
    0x16a1d72a,0x899356a8,0x32607d2f,0x07eee20b,0x7980e5c4,0x3e1e83f1,
    0x37260ec0,0x300f982c,0x7777501f,0xd84c8577,0x4c0f87a2,0x98649502,
    0x20922442,0x3766f500,0x565d54c0,0x87a1d12a,0x7c3d0479,0x3e66e980,
    0x1c0d4f20,0x75d01e64,0x479835f1,0x1e46bea0,0x401d11d3,0x3e1d13c9,
    0x201da822,0x1e87b1e8,0xdb83b03e,0x017444cc,0x5c000b97,0x3d16c489,
    0x4759307c,0xc8531a88,0x80011260,0x9804fcfa,0x83f16a82,0x4fa298cf,
    0x3c4a60f9,0x8911e8be,0x203f881a,0x3a0db1eb,0x8fe2288c,0x815c761e,
    0xbd3542ca,0x05950511,0x8ba2c562,0x22e16c0f,0x8326c38d,0x15c07d1a,
    0x16c710dc,0x5530fc3d,0x10105443,0x000054c1,0x3007eaf5,0x9b7dd105,
    0x2e2ff541,0x3a63f9df,0x5e6443aa,0x372b7622,0x2c401b02,0x37fa6075,
    0x8aefb220,0xcb887129,0xd37bf101,0x5e4c01df,0xf3288cc0,0x7cc7f519,
    0xbfb8480d,0x643aa6bb,0x2600003f,0xa8cfa8cf,0x0000003f,0xd93d4000,
    0x40002980,0x00804100,0x0a188c04,0x20004004,0x20006180,0x0081000a,
    0x00000e20,0x00000000,0x00000000,0x80000000,0x0002f47a,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x217fb300,0x4c001df8,0x205dcc1a,0x26620399,0x33109999,0x42613333,
    0x3188b20a,0x770c2cb8,0xbb83bbaa,0x910bbbbb,0x01999999,0x00000000,
    0x00000000,0x00000000,0x00000000,0x5c000000,0x289148d1,0xaa98645b,
    0x5534aaaa,0x4fa35555,0xf5b9622d,0x5e6542a3,0x41998961,0x00888888,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x14436590,
    0x322ca989,0x02003802,0x10200030,0x00000001,0x00000000,0x00000000,
    0x00000000,0x00000000,0x20000000,0x398c894a,0x0399ecfc,0x33332a50,
    0x000003cc,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x981a80c4,0x00000189,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_16_latin1_x[224]={ 0,1,0,0,0,0,0,0,0,0,1,0,0,0,
1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,
-2,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,0,0,0,0,
1,1,0,0,-1,0,0,0,0,-1,0,0,0,0,1,0,-1,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,
 };
static signed short stb__times_16_latin1_y[224]={ 12,2,2,2,1,2,2,2,1,1,1,3,10,8,
10,1,2,2,2,2,2,2,2,2,2,2,5,5,3,5,3,2,1,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,14,2,5,1,5,1,5,1,5,1,1,
1,1,1,5,5,5,5,5,5,5,3,5,5,5,5,5,5,1,1,1,7,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,12,5,2,2,3,2,
1,2,2,2,2,5,5,8,2,1,2,3,2,2,2,5,2,6,11,2,2,5,2,2,2,5,-1,-1,-1,-1,
-1,0,2,2,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,4,2,-1,-1,-1,-1,-1,2,1,2,2,
2,2,2,1,5,5,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,4,5,2,2,2,2,2,1,2,
 };
static unsigned short stb__times_16_latin1_w[224]={ 0,3,5,7,7,12,11,2,5,5,6,8,3,5,
2,5,7,5,7,7,7,7,7,7,7,7,2,3,8,8,8,6,13,11,9,10,10,9,8,11,11,5,6,11,
9,13,12,10,8,10,10,8,9,11,11,14,11,11,9,4,5,4,7,9,4,7,8,6,8,7,7,7,8,4,
5,8,4,12,8,7,8,8,5,6,5,8,8,11,8,8,7,5,1,5,8,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,3,7,7,8,8,
1,6,5,11,5,7,8,5,11,9,6,8,5,4,3,8,8,2,3,4,5,7,11,11,11,6,11,11,11,11,
11,11,14,10,9,9,9,9,5,5,5,5,10,12,10,10,10,10,10,6,10,11,11,11,11,11,8,7,7,7,
7,7,7,7,10,6,7,7,7,7,4,4,5,5,7,8,7,7,7,7,7,8,7,8,8,8,8,8,8,8,
 };
static unsigned short stb__times_16_latin1_h[224]={ 0,11,5,11,13,11,11,5,15,15,7,9,5,2,
3,12,11,10,10,11,10,11,11,11,11,11,8,10,8,4,8,11,15,10,10,11,10,10,10,11,10,10,11,10,
10,10,11,11,10,13,10,11,10,11,11,11,10,10,10,13,12,13,6,2,3,8,12,8,12,8,11,11,11,11,
15,11,11,7,7,8,11,11,7,8,10,8,8,8,7,11,7,15,15,15,3,10,10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,11,13,11,8,10,
15,13,3,11,5,8,4,2,11,1,5,9,6,6,3,11,14,3,4,6,5,8,11,11,11,11,13,13,13,13,
13,12,10,13,13,13,13,13,13,13,13,13,10,14,14,14,14,14,14,7,11,14,14,14,14,13,10,12,11,11,
11,11,11,12,8,10,11,11,11,11,10,10,10,10,12,10,11,11,11,11,11,7,8,11,11,11,11,14,15,14,
 };
static unsigned short stb__times_16_latin1_s[224]={ 254,45,246,237,223,213,108,243,16,1,166,
12,252,92,62,163,144,98,104,169,112,177,185,193,201,209,253,242,134,53,114,
229,22,209,61,244,221,199,89,9,71,83,45,120,144,185,72,85,176,243,1,
140,232,149,161,173,132,164,154,218,190,213,230,98,68,21,196,29,181,90,29,
21,13,40,36,31,205,206,151,52,210,188,160,45,241,36,69,78,181,131,173,
42,48,50,79,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,
52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,254,68,1,
52,60,33,56,9,73,1,34,143,44,92,217,108,27,246,219,225,88,160,58,
65,40,238,21,106,96,84,72,65,16,28,51,69,201,169,226,40,91,101,81,
123,111,133,117,63,1,188,97,108,119,130,141,199,226,152,164,176,67,231,24,
139,49,57,245,60,123,155,123,219,197,136,37,1,42,47,18,12,147,247,205,
236,120,128,152,190,98,96,105,114,22,88,7,79, };
static unsigned short stb__times_16_latin1_t[224]={ 1,31,65,17,1,17,31,66,1,1,66,
66,65,75,75,17,31,55,55,31,55,31,31,31,31,31,17,55,66,75,66,
31,1,55,55,31,55,55,55,31,55,55,43,55,55,55,43,43,55,1,66,
43,55,43,43,43,55,55,55,1,17,1,66,75,75,66,17,66,17,66,31,
31,43,43,1,43,43,66,66,66,43,43,66,66,43,66,66,66,66,43,66,
1,1,1,75,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,
55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,1,43,17,
43,66,55,1,17,75,43,75,66,75,75,31,75,75,55,66,66,75,31,1,
75,75,66,75,66,31,31,31,31,17,17,17,17,1,17,43,17,17,17,17,
17,17,17,17,17,55,1,1,1,1,1,1,66,17,1,1,1,1,1,55,
17,31,31,17,43,43,17,66,43,43,31,31,31,55,55,55,55,17,43,17,
31,31,31,31,66,66,43,43,43,43,1,1,1, };
static unsigned short stb__times_16_latin1_a[224]={ 58,77,94,116,116,193,180,42,
77,77,116,130,58,77,58,64,116,116,116,116,116,116,116,116,
116,116,64,64,130,130,130,103,213,167,154,154,167,141,129,167,
167,77,90,167,141,206,167,167,129,167,154,129,141,167,167,218,
167,167,141,77,64,77,108,116,77,103,116,103,116,103,77,116,
116,64,64,116,64,180,116,116,116,116,77,90,64,116,116,167,
116,116,103,111,46,111,125,180,180,180,180,180,180,180,180,180,
180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,
180,180,180,180,180,180,180,180,58,77,116,116,116,116,46,116,
77,176,64,116,130,77,176,116,92,127,69,69,77,133,105,58,
77,69,72,116,173,173,173,103,167,167,167,167,167,167,206,154,
141,141,141,141,77,77,77,77,167,167,167,167,167,167,167,130,
167,167,167,167,167,167,129,116,103,103,103,103,103,103,154,103,
103,103,103,103,64,64,64,64,116,116,116,116,116,116,116,127,
116,116,116,116,116,116,116,116, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_16_latin1_BITMAP_HEIGHT or STB_FONT_times_16_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_16_latin1(stb_fontchar font[STB_FONT_times_16_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_times_16_latin1_BITMAP_HEIGHT][STB_FONT_times_16_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_16_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_16_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_16_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_16_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_16_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_16_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_16_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__times_16_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__times_16_latin1_s[i] + stb__times_16_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__times_16_latin1_t[i] + stb__times_16_latin1_h[i]) * recip_height;
            font[i].x0 = stb__times_16_latin1_x[i];
            font[i].y0 = stb__times_16_latin1_y[i];
            font[i].x1 = stb__times_16_latin1_x[i] + stb__times_16_latin1_w[i];
            font[i].y1 = stb__times_16_latin1_y[i] + stb__times_16_latin1_h[i];
            font[i].advance_int = (stb__times_16_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__times_16_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_16_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_16_latin1_s[i] + stb__times_16_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_16_latin1_t[i] + stb__times_16_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_16_latin1_x[i] - 0.5f;
            font[i].y0f = stb__times_16_latin1_y[i] - 0.5f;
            font[i].x1f = stb__times_16_latin1_x[i] + stb__times_16_latin1_w[i] + 0.5f;
            font[i].y1f = stb__times_16_latin1_y[i] + stb__times_16_latin1_h[i] + 0.5f;
            font[i].advance = stb__times_16_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_16_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_16_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_16_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_16_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_16_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_16_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_16_latin1_LINE_SPACING
#endif

