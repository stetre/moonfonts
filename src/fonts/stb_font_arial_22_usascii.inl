// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_22_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_22_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_22_usascii_BITMAP_WIDTH         256
#define STB_FONT_arial_22_usascii_BITMAP_HEIGHT         70
#define STB_FONT_arial_22_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_22_usascii_FIRST_CHAR            32
#define STB_FONT_arial_22_usascii_NUM_CHARS             95

#define STB_FONT_arial_22_usascii_LINE_SPACING          14

static unsigned int stb__arial_22_usascii_pixels[]={
    0x02a62000,0xa8804cc0,0x4a605100,0x00050019,0x80131000,0x10026018,
    0x00100013,0x14c15000,0x01510044,0x00000220,0x2a000980,0x31000200,
    0x40fb0001,0xfffffeb8,0x07fee03d,0x3ff60be2,0x80d52e80,0xff902fb8,
    0x03fff21f,0x677fff5c,0xfa82fa80,0xdffff702,0xefeb8019,0x05f7000c,
    0x322ec3f3,0x06c80dff,0x01effd98,0x056ff5c4,0x37fffae0,0x107e200b,
    0xc807bffb,0xd83fffff,0xff307d87,0xfb73139d,0x217ea20b,0x0efcc2f8,
    0x640f6354,0x4c2fffff,0x57f90fda,0x2eaf7f60,0x85f80efd,0xbefe887d,
    0xb00efdba,0x00df95bf,0xf1ea0bee,0x2744fd47,0x3b600be2,0x7ec06e99,
    0x3604fdac,0x5febacef,0xbff11ea0,0x3f607fb5,0x45fecabe,0x3be6006c,
    0x902fcc00,0xfa85f10f,0x87985d01,0x6e9f8cfb,0x81f21f70,0x0df503fd,
    0x427c41f9,0x1df503fc,0x17d44f98,0x36417dc0,0xd73643f1,0x3f9806c8,
    0x1fcc07ee,0x0ff203f6,0x45d817ec,0x20fdc2fd,0x03fd05f9,0x0ef88310,
    0xbd3130d4,0x0be21f20,0x20f701f5,0x578bf43f,0x321f707f,0xc809f507,
    0xf51fcc4f,0x5c05f983,0x1a83ec4f,0x3312fb80,0x13f733bd,0xf10fa976,
    0x64bf3003,0xa83f700f,0x102fcc2f,0xff0be0df,0x2fb89f10,0x40c47f50,
    0xf907e47d,0x2a7f3bff,0xf887c80f,0x27c07dc2,0x45be0fc8,0xc87dc027,
    0x8801f907,0x1b66e85f,0x1be007f2,0xfb8000bf,0xffffffb2,0xc9aebfff,
    0xfd801726,0x3ea04fba,0x3ee0fe44,0x0f980401,0x22f417e2,0x1f6005f9,
    0x2e2f89f6,0x2ffea8bf,0x81f705f1,0x207dc2f8,0x43f502f9,0xb80789fd,
    0x1fa0f90f,0x4fdc3f40,0x00fd83f8,0x273e0fd8,0x2e003efe,0x35f5312f,
    0x3e613bd3,0x03f13e9a,0x01fffc40,0x27ed6fe4,0xb80007ec,0x6f886f86,
    0x00acffd8,0xf99f61f6,0xffa89f50,0x07e61360,0xa87c85f1,0x4c5f301f,
    0xfb807cff,0x01be0f90,0x33e20fe4,0x007f80fb,0x3f7e25f9,0x800ffebe,
    0x3e3d42fb,0x323fea83,0x7ffe4005,0xfffe8800,0x4000ff05,0x5c1fe84e,
    0xffff907f,0xfb0fb07d,0xf01fb3dc,0xdf885d8d,0x4f98be20,0x9f100fc8,
    0x0cfffe98,0x41f21f70,0x03fb006f,0x1fe0dbdb,0xff98fe40,0x5c027dc3,
    0x3f13642f,0x6447e200,0xbbfe882d,0xf983715f,0x40efb9be,0x3f10007e,
    0xfb5bff30,0xfec980fd,0x361f60df,0xf05f9767,0xfd104f8b,0x04fb97c4,
    0x305f80fb,0xf701ffdf,0x03f41f21,0x7ff507e8,0x36003f60,0x881ff10f,
    0x12fb806f,0x3f733bd3,0xf15d8013,0x2fc89d5b,0xb0bef3f6,0x6c4f981f,
    0x07a8000f,0x367bff22,0x93f62006,0x53a7d87d,0x23f984f9,0x4df502f9,
    0x20bf52f8,0x882fc07d,0x1f70bf77,0x00fe41f2,0x01ff037c,0x1ba007ee,
    0x011fa0df,0x3fff63f7,0x05ffffff,0xd73d47e6,0x7ff446e8,0x7e82fc47,
    0x372017dc,0xd0401721,0x3f403c8b,0xaecfb0fb,0x21fd85f8,0x889f106e,
    0x2e17e22f,0x087f101f,0x7dc3fcf1,0x17ea0f90,0xf01fe432,0x2037cc09,
    0xf83f44fb,0x1f90fea6,0x3a66bea2,0x9760099d,0x6f83e66c,0x7c44ff88,
    0x6f98fd05,0x3f83fe60,0x89f10530,0xfb3f407e,0xfd3dcfb0,0x3fb0ffa8,
    0x5f103ee0,0x02f986c8,0x457e25f5,0x43ee1ba7,0x893f207c,0x2a06fdfe,
    0x827dc01f,0x17dc0efa,0x45f993ea,0x0fe3dc7e,0x26b87e60,0x50bf20fa,
    0x0fe83fff,0x27e42fcc,0x1f327ec4,0x1f903f20,0xfa80dfb8,0xa9f61f64,
    0xdb7df51f,0x405fdbfd,0x217c40fc,0x703f887b,0xbc47f41f,0x90fb83f9,
    0xacefc80f,0xcc83ffeb,0x9df9005f,0x201dfb75,0x0efc9bfe,0x27edeff4,
    0x801f8972,0x5c87cc5d,0x7e56ffcc,0x3e61ffce,0x00ffc9be,0xffb59dfb,
    0x3e206b8b,0xb02fc9ae,0xdfb97bff,0x13ec3ec1,0x467f54bf,0x0311dffa,
    0xb85f10f9,0xf905e80f,0xfbfbffa8,0xf90fb80f,0xbfffb700,0x7f43df97,
    0x3f2a000e,0x2200bdff,0x880dfffc,0x4e84ffeb,0x1f3003ea,0x305fdfb0,
    0x2a1bfffd,0x7fff4c1f,0x3f6e201e,0x04d81cff,0x01effed4,0x37ffffae,
    0x23ec3ec0,0x7d4005f9,0x2f887c85,0x07dc07d4,0x3fae0fe2,0x1f700cff,
    0x303001f2,0x4000083b,0x40030000,0x01882601,0x00a603a8,0x31004062,
    0x13006000,0x20002200,0x86e80008,0xfb800efc,0x5f10fb06,0x89d01fa8,
    0x007cc06c,0x003e43ee,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xa827dcc0,0xcaabdefe,0xfc983ffe,0x7c42f885,0xf10fa83e,
    0x2a078805,0x99f90fec,0x00000001,0x00000000,0x00000000,0x00000000,
    0x00000000,0x33f60000,0x7ff6d400,0xf700cdef,0x705f101d,0x2e7b01ff,
    0xffc80006,0x01fff90f,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x08000400,0x13002200,0x11088040,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x09854c00,0x00010000,0x01500400,0x00009980,0x08866200,0x20000351,
    0x9854c019,0x00000000,0x00000000,0x00000000,0x2e000000,0xb4faffff,
    0xfeb8800f,0x1fc4004e,0x20fbfae2,0xffdb804d,0x2fb82eff,0xff913e60,
    0x7ffdf6cf,0xa803ec2f,0xffff702f,0x7ffec7f3,0x71ffffff,0x24fc80bf,
    0x87fa02fe,0x09ff01fc,0x017e47f2,0x7ffdd7e2,0x4fffffff,0xfff700fb,
    0x81bdffff,0x915df57d,0x001f69ff,0x09fd7bf9,0x3fa1fc40,0x35c4fdac,
    0x2ab3bee0,0x17dc4feb,0x77c49f30,0x22fff61a,0x01f60fea,0x6fd417d4,
    0x2e3ffc89,0xfccccccc,0x4c0bfa1f,0x407fc46f,0x41fd43fc,0x4fd06ff9,
    0x97dc04f9,0xcffcccca,0x00fb2ccc,0x955559f7,0xebec1dff,0x0fb4fc87,
    0x3f21fd40,0x5c7f1000,0xf307f42f,0x4413ee01,0x80bee1fd,0x20fe64f9,
    0xb2fcc4fd,0x37f7100f,0x1fec0fe8,0x7cc3fd80,0xa81fe80f,0x442fd45f,
    0x0fbfb85f,0x01fa27c4,0x207e80fd,0x02fb807d,0xf8fd8ff2,0x2fb4fa85,
    0x1fb009a8,0x2a604f98,0x216e3f88,0x441fc1fb,0x727c406f,0x8a7cc05f,
    0x3f609bfa,0x45f66f81,0x7ffe40aa,0x1fdc37c7,0xfb82fe40,0xfb01fdc4,
    0x7403be27,0x43f9ed87,0x817dc2fa,0x03f404f9,0x7dc330fb,0xfd97e602,
    0xb4f883f9,0x05ffff7f,0x2e17e0bd,0x03fbffff,0x42e40fe8,0x5c0802fa,
    0x753e602f,0x1f62ffff,0xfafd87ec,0x3ee23fff,0x2213e61b,0x077d403f,
    0x17e63fd0,0x3fd3ff10,0x7f10fdc0,0x881f917e,0x801f905f,0xf91f607e,
    0xf5017dc9,0x427c7ec7,0x19ffb4f8,0x05f83fd5,0x8aef98dd,0xb5103ffc,
    0xf90f507f,0x05f70003,0xbfa8a7cc,0x3ec1f609,0xfd515ffb,0x3e617d43,
    0x2603f884,0xb7cc00ff,0xff9800fe,0x51fcc03f,0x0dd1f23f,0x017e03f6,
    0x2e7d81fa,0x9817dc4f,0x375f60fe,0x43fda7dc,0x413e25f9,0x3607f47e,
    0x0bff903f,0x20fd07e2,0x2e199998,0x993e602f,0x441fd83f,0xf50bf66f,
    0x3fc17d47,0xfe881fd4,0x7fdf9002,0x8037e400,0x1fa9f24f,0x0fea09f1,
    0x0fd005f5,0xb84fbbec,0xffeeeeef,0x1fbbec2e,0x0fed3f62,0x209f13fc,
    0x2e1be27e,0xdf73103f,0x0fe89d03,0x0fffffe8,0x27cc05f7,0x89fb07f3,
    0x103f64fa,0x6c17d49f,0xd81fec1f,0x2ff4003f,0x05fff100,0xf12f4db0,
    0x6f807ea9,0x07e803ec,0x5c17eff6,0x2ffeeeef,0x37fe2fb0,0x0fb4fffc,
    0xd05f83f6,0x7cc27ccd,0xb84fa803,0x5540fe46,0x7f50feaa,0x7f327cc0,
    0xf95bffb0,0x4f887d8d,0x3fe20bea,0xc83ffdac,0x2fb8005f,0x3febf600,
    0x7c47dc00,0x407caf42,0x009f10fc,0xfffd81fa,0x4c2fb80f,0x227d80ff,
    0xb4f9ceed,0x0bf1f60f,0x884f997e,0x30fd003f,0x401fd41f,0x409f30fd,
    0x20fe62fa,0x0dfffafd,0x527c43ec,0x3ffa205f,0x37d43fae,0x002fb800,
    0x017ee9f9,0xc81f75f3,0x3f980bd7,0x1fa003f7,0x85f9bfd8,0x0efa82fb,
    0x7f300bec,0x8df103f6,0x7c4f887d,0x1763fb86,0x222f83fc,0x87ec00ef,
    0x87f205f8,0x027d83f9,0x24f887d8,0x884402fa,0x003fe63f,0x4c017dc0,
    0x201fec6f,0x9f986dcf,0xdd6e803f,0xfb03f400,0x0bee17e4,0x75f62fe4,
    0x7fb1fc86,0x17d44fa8,0x83fb07f2,0x507f23fd,0xf51760bf,0x83fee01d,
    0x0ff882fe,0x01f60fe6,0x327c43ec,0xf10017df,0x0007fa27,0x7c402fb8,
    0x00ffc40f,0x37e09fbb,0xfafb801f,0xd81fa003,0xfb83fa27,0x7d8bfa02,
    0x9fb57bf9,0x7e4dffec,0xeadfe80f,0xacff884f,0x3be23ffe,0x500ffc9b,
    0x79dff50f,0xf885dfdb,0x1ffcbbdf,0x03ec1fcc,0x44f887d8,0xf8801ffd,
    0x9999df93,0x5c059999,0x817ec02f,0x3fee06fa,0x200dfb01,0x2000fff8,
    0xf51f607e,0xf5017dcb,0xfdb9f61f,0x7cf6c3ef,0xfb100dff,0x7ecc09df,
    0x64c3f9ef,0x2200dfff,0xffec981f,0x3b6603ef,0xf981deff,0xfb007d83,
    0x80009f10,0xffff93f8,0x07ffffff,0xbf7017dc,0xf104fc80,0x0027dc0f,
    0x7e8009f9,0x4bf61f60,0xa7ec02fb,0x0440007d,0x04400100,0x04c00300,
    0x22000620,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x08800000,0x00cc0000,
    0x00000000,0x00000000,0xfff90000,0x00807fff,0x3ffffffe,0x54c04c7f,
    0x09a88009,0xffb84130,0x42dfffff,0x40bf75f8,0x07ff74f8,0x03f96fd8,
    0x3ea03f90,0x2a1be61f,0x4c07f52f,0x7ffecc4f,0x3fffea2e,0xf70fffff,
    0xffffffff,0x7ffffdcb,0x36000cff,0x7fffe40f,0x3a003eff,0xddfb004f,
    0xd7105ddd,0xeee81bff,0x267feeee,0x3fffa65f,0xfffb504f,0xf15f985d,
    0x9999bf7d,0xafc45ff9,0x9f103ffb,0xf8817fee,0x9003f96f,0x83ff503f,
    0x97fcc6f9,0x93e603fa,0xfeb8bef8,0x9999bf50,0x37ee1999,0x3ccccccc,
    0x373337ee,0xfb801ffe,0x666fe40f,0x9804fedc,0x5f800fef,0x32b3fe00,
    0x43f9006f,0x447fa4e9,0x577d42fd,0x3a21ffb8,0x05f7df14,0x75f89fe6,
    0x9f101fff,0x5c03fbee,0x003f96ff,0x1ffa83f9,0x3fee6f98,0x4c07f52f,
    0xf507ee4f,0x5c00fea7,0x0bee002f,0x3e2037dc,0x40fe40ff,0x7e400fe8,
    0x1fc403fa,0x7d41fa80,0x4027d402,0x3a0e444f,0x102fcc0f,0x7405f7bf,
    0x3eebf10f,0x74f886fc,0x33a07f7f,0x9003f96e,0x80ffd43f,0xf7bfb6f9,
    0xf980fea5,0xab741764,0x05f7003f,0xf9017dc0,0x07e6f407,0x17dc07f2,
    0x2037d7e0,0x740332fa,0x7c40bf06,0x059fd006,0x07f837c4,0xd017de74,
    0x7dd7e21f,0xa7c43fc9,0xf885e9fb,0x003f96ea,0x03bea3f9,0x2a5b5f98,
    0x4c07f52f,0x55f8804f,0x0bee007f,0x2602fb80,0xf91f705f,0xf901fc81,
    0xfc97d401,0x3fb7ee01,0x3e2002ff,0x4007f205,0x42dfffe8,0x01fb04f9,
    0x9817dd64,0x7dd7e25f,0x3e20ff89,0x81f93f74,0x07f2dd7b,0x3fea7f20,
    0x5427c400,0x5559f52f,0x009f7555,0x00fea3fd,0x4cccdfdc,0x017dc199,
    0x64be61fe,0x4cdfe40f,0x6c04fc99,0x6c09f30f,0x1ffc9aef,0x2207f900,
    0xeb98006f,0x413e63ff,0xcfb800fd,0x2ffdbaaa,0xa8fdd7e2,0x7dd3e26f,
    0xea743f99,0xf9003f96,0xf009fff9,0x3ea5f509,0xffffffff,0x8bf6204f,
    0xfffffffa,0x3fffee0f,0x2e1fffff,0x107f402f,0x3207e4bd,0x5fffffff,
    0x3fa2fc40,0xdf507500,0x5c0df500,0x1026003f,0xf837c4ff,0x3ef7e206,
    0x2fffffff,0x21fbafc4,0x2e9f13fc,0x8fc4bd1f,0x9003f96e,0x03fd1dff,
    0x52fa83f8,0x5555559f,0x1fec09f7,0x333337ea,0x666fdc4c,0x2e0ccccc,
    0x907f402f,0x3207e41f,0xfdcbaacf,0xb85f700d,0x07f8003f,0xfd0077d4,
    0x217e2001,0x2a0ff47e,0x2f7e205f,0x009999bf,0x887eebf1,0xf74f88ff,
    0xd35c3ee3,0x32007f2d,0x01ff30ef,0xa97d41fc,0x413e603f,0x03fa84f9,
    0x5c005f70,0xf53fc02f,0x7e40fc85,0x3a09f501,0x6feeeeef,0x700fd800,
    0x27cc01df,0x67e4bf30,0x7cc4fcaa,0x20efc9cf,0x02fb85f9,0x0fdd7e20,
    0x5d3e7bea,0x93a7f31f,0x9003f96e,0x205fb83f,0xf52fa82e,0xa827cc07,
    0x003fa81f,0x7dc005f7,0xfd9be202,0x7fffffff,0x87f807f2,0xeeeeeef9,
    0x884d81fe,0x01bf705f,0x3e601fb8,0x3fffae25,0xbfffd303,0xfb85f981,
    0x5d7e2002,0x4fcfd81f,0x7cf743f7,0x00fe5ba1,0x1ff40fe4,0x52fa80a8,
    0x827cc07f,0x03fa80c9,0x5c005f70,0xb8bf202f,0xcfeccccc,0x7f807f24,
    0xbf301fc8,0x2fa83f90,0xfb005fc8,0x1104a801,0xb8000c00,0x57e2002f,
    0xfff881fb,0x67dc3f74,0x01fcb746,0xff881fc8,0x54bea001,0x013e603f,
    0x5c00fea0,0x0bee002f,0xfc8037dc,0xfb80fe40,0x7f406f85,0x6cdf7c40,
    0x027d40ef,0x05b00fd0,0xb8000000,0x57e2002f,0x9ff501fb,0x3ff987ee,
    0xccdfcb74,0x3f90cccc,0xf983bea0,0x7f52fa85,0xfc827cc0,0x7003fa82,
    0x999999bf,0x666fdc99,0x000fffec,0xcdfc81f9,0x40ffedcc,0x1fdc03fa,
    0x06fffe4c,0x33333fe2,0x405f83cc,0x00000038,0x2002fb80,0x403f75f8,
    0xe83f74fd,0xffcb741f,0x91ffffff,0x32fec03f,0x2a5f50bf,0x413e603f,
    0x03fa82fc,0xffffff70,0x7fdcffff,0x00beefff,0xff903f20,0x019dffff,
    0x6f8801fb,0xfff500c0,0x00dfffff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x01553100,0x4c026031,0x4d4c400a,0x15310880,0x98260188,0x21999999,
    0xa8835108,0x44330881,0x11098809,0x00310310,0x0000b8d4,0x002a0059,
    0x3a081013,0xffffffff,0x80ccbf32,0x2a2102a8,0xaaaaaaaa,0x3fffea2a,
    0xff700007,0x87d89fff,0x7ffd43f8,0xfffa80ef,0x7d76c1ef,0x0bee4fff,
    0x7ffccbea,0xdb0fffff,0xf53ffff5,0x5f6c3dff,0x41ff14ff,0x3e1f66f8,
    0x2203740f,0x3bff2feb,0xb804f800,0x7c17404f,0x6eee4fd6,0xf31ddddd,
    0x3f21fe4b,0x4c99cfff,0xfffffff3,0x3a61ffff,0x80005eee,0x5fd51cfb,
    0x31fc43ec,0x8bf515df,0xfeb8aef9,0x262fff60,0xb0bf11fe,0xc999998f,
    0x22bff64f,0xfa8bfefb,0x86efff64,0xa87fa5fa,0x88ffe61f,0xbff9303f,
    0x1f7fe445,0xfe804f80,0xbad9d80f,0x003f5be3,0x226d8950,0xffffcabf,
    0x0000003f,0xf50db000,0x1fc43ec7,0x21fb83fb,0xb2fc41fe,0x363fa85f,
    0x5013e20f,0x742fd8bf,0x5fb3ec4f,0x1fe57e40,0x5efb93e2,0xffd507ea,
    0xffea8039,0x5013e00c,0xfd887f5f,0x757e3eff,0x10b60007,0x32a02217,
    0x0000001b,0x7dcc0000,0x8fe21f63,0x20bf007f,0xf103f67e,0x3f717d49,
    0x36077cc0,0x320fe40f,0x4401fb0f,0x4dd05ffe,0xd1b67cdd,0x930005df,
    0x3bbb65ff,0x6c2eeeef,0x3baa0f96,0x2e6ca740,0xcccccccc,0x00000511,
    0x00000000,0x3fffb6a0,0x3e21f64f,0xf3009f13,0xffffffff,0x13e21f61,
    0xd10374bf,0xf90fb01f,0x0fb0fc81,0x2e01ff50,0x23f57f0f,0x016ff44f,
    0xd97fe440,0xeeeefeee,0x1fccfe62,0x591b27e6,0xffffe92e,0x0002ffff,
    0x00000000,0x677e4000,0x1f64f98a,0x02fc4fe6,0x55556fcc,0x221f62aa,
    0x7cc7e44f,0x203fd103,0x640fc87d,0xfb00fb0f,0x26be607f,0x1f9bf88f,
    0x00bffeb8,0x00e7fed4,0xd07e409f,0x000a250d,0x00000000,0x00000000,
    0x4fa86f88,0xf8fea1f6,0x1be2c887,0xf10fb044,0x0fcbf989,0x3ec05fb0,
    0x43f207e4,0x6e7d407d,0x4f9bd01f,0x6cc07cde,0x3ae21dff,0x4f800bff,
    0x1fa89f10,0x00000000,0x00000000,0xbf100000,0x0fe49fb0,0x41fd8ff6,
    0x307f60fc,0x7c43ecbf,0x905ede84,0xc87d807f,0x7d87e40f,0x37c5be20,
    0x3f24efc8,0xff91004e,0x000b7fe5,0x202a209f,0x0000001a,0x00000000,
    0x20000000,0xffda9bfd,0x36afbea4,0x33fe23fe,0x7fcc4fc9,0x360feb9c,
    0xfb84f887,0xaaefb82f,0x0fb0aaaa,0xb0fc81f9,0xf50fec0f,0x545ff309,
    0x2b8002ff,0x0fa00039,0x00000000,0x00000000,0x00000000,0x233fff66,
    0x6fffdc6e,0x7ff4c3f8,0xffe880be,0x443ec1df,0x907f884f,0xffffffff,
    0x03f21f65,0x5c1f61f9,0xf82fd84f,0x001fe20f,0x00000000,0x00000000,
    0x00000000,0x20000000,0x10002001,0x00000c00,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_22_usascii_x[95]={ 0,1,0,0,0,1,0,0,1,1,0,1,1,0,
1,0,0,2,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,-1,1,0,1,1,1,1,1,1,0,1,
1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,-1,0,0,1,0,0,0,0,0,1,1,
-1,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0, };
static signed short stb__arial_22_usascii_y[95]={ 17,2,2,2,1,2,2,2,2,2,2,5,15,11,
15,2,2,2,2,2,2,3,2,3,2,2,6,6,5,7,5,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,19,2,6,2,6,2,6,2,6,2,2,
2,2,2,6,6,6,6,6,6,6,3,6,6,6,6,6,6,2,2,2,8, };
static unsigned short stb__arial_22_usascii_w[95]={ 0,3,7,11,11,16,13,3,5,5,7,10,3,6,
3,6,11,6,10,11,11,11,11,11,11,11,3,3,10,10,10,10,19,15,12,14,13,12,11,14,12,3,9,13,
10,14,12,15,12,15,13,13,12,12,13,19,14,13,12,5,6,5,9,13,5,11,10,10,10,11,7,10,9,3,
5,9,2,15,9,11,10,10,6,10,6,9,10,15,10,10,10,7,3,7,11, };
static unsigned short stb__arial_22_usascii_h[95]={ 0,15,6,16,19,16,16,6,20,20,7,10,5,2,
2,16,16,15,15,16,15,15,16,14,16,16,11,14,10,6,10,15,20,15,15,16,15,15,15,16,15,15,16,15,
15,15,15,16,15,17,15,16,15,16,15,15,15,15,15,19,16,19,9,2,4,12,16,12,16,12,15,16,15,15,
20,15,15,11,11,12,15,15,11,12,15,12,11,11,11,16,11,20,20,20,4, };
static unsigned short stb__arial_22_usascii_s[95]={ 255,71,179,148,59,160,177,252,47,53,171,
150,198,234,252,218,23,75,198,46,145,186,126,209,191,225,248,221,128,187,139,
95,7,170,157,203,131,118,106,65,82,14,138,57,46,31,18,110,1,83,239,
237,216,80,202,182,167,153,140,77,58,71,161,220,202,1,12,23,35,34,93,
1,112,251,1,229,253,78,46,236,101,129,94,225,122,13,56,112,101,99,67,
39,35,27,208, };
static unsigned short stb__arial_22_usascii_t[95]={ 1,39,55,1,1,1,1,39,1,1,55,
55,55,55,46,1,22,39,39,22,39,39,1,39,1,1,39,39,55,55,55,
39,1,39,39,1,39,39,39,22,39,39,1,39,39,39,39,1,39,1,22,
1,22,22,22,22,22,22,22,1,22,1,55,55,55,55,22,55,22,55,22,
22,22,1,1,22,22,55,55,39,22,22,55,39,22,55,55,55,55,1,55,
1,1,1,55, };
static unsigned short stb__arial_22_usascii_a[95]={ 88,88,112,175,175,280,210,60,
105,105,123,184,88,105,88,88,175,175,175,175,175,175,175,175,
175,175,88,88,184,184,184,175,320,210,210,228,228,210,192,245,
228,88,158,210,175,262,228,245,210,245,228,210,192,228,210,297,
210,210,192,88,88,88,148,175,105,175,175,158,175,175,88,175,
175,70,70,158,70,262,175,175,175,175,105,158,88,175,158,228,
158,158,158,105,82,105,184, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_22_usascii_BITMAP_HEIGHT or STB_FONT_arial_22_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_22_usascii(stb_fontchar font[STB_FONT_arial_22_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_22_usascii_BITMAP_HEIGHT][STB_FONT_arial_22_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_22_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_22_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_22_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_22_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_22_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_22_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_22_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_22_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_22_usascii_s[i] + stb__arial_22_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_22_usascii_t[i] + stb__arial_22_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_22_usascii_x[i];
            font[i].y0 = stb__arial_22_usascii_y[i];
            font[i].x1 = stb__arial_22_usascii_x[i] + stb__arial_22_usascii_w[i];
            font[i].y1 = stb__arial_22_usascii_y[i] + stb__arial_22_usascii_h[i];
            font[i].advance_int = (stb__arial_22_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_22_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_22_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_22_usascii_s[i] + stb__arial_22_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_22_usascii_t[i] + stb__arial_22_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_22_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_22_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_22_usascii_x[i] + stb__arial_22_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_22_usascii_y[i] + stb__arial_22_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_22_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_22_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_22_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_22_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_22_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_22_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_22_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_22_usascii_LINE_SPACING
#endif

