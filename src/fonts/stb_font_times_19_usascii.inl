// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_19_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_19_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_19_usascii_BITMAP_WIDTH         128
#define STB_FONT_times_19_usascii_BITMAP_HEIGHT         96
#define STB_FONT_times_19_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_19_usascii_FIRST_CHAR            32
#define STB_FONT_times_19_usascii_NUM_CHARS             95

#define STB_FONT_times_19_usascii_LINE_SPACING          12

static unsigned int stb__times_19_usascii_pixels[]={
    0x24062013,0x202a0188,0x199930e8,0x1aabb980,0x01597300,0x00409995,
    0xa80565cc,0x2aaaaa21,0x3a605d42,0x242c0550,0x203901d4,0x701f80d8,
    0x44073017,0x42ea8add,0x056dc04c,0x7e44eec4,0x3ff25f82,0x21b14fff,
    0x0d83a64b,0x1d8483b0,0x3e000770,0x1c402b81,0x17cc1fc4,0x2e766099,
    0x20fa20fb,0x1b2fc2f8,0x0f8791c8,0x226c1660,0x0f882f84,0x3b83f000,
    0x07d81500,0xd82643f6,0x3ec1928a,0x0a741fb0,0x03e2ecd0,0x487f05f0,
    0x405a83f8,0x261f80da,0x14bbbb84,0xf702fc45,0x45fc1325,0x502fc112,
    0x9501ec5f,0x803c9fd4,0x4242e84e,0x2203c82d,0x2e1f81fb,0x22f88ec2,
    0xfa813e63,0x2ff60994,0x2604f982,0x1c80b64f,0xd80177dc,0x2c243a85,
    0x0fcc03e8,0x2641b0fc,0x0fea38f3,0x40994f98,0x04fa85fc,0x201c93e6,
    0x20dfd886,0x7307c839,0x3e205324,0x7c0fc402,0x2e0f89a1,0x04f88a25,
    0x20264be6,0x13e60efb,0x406e3f98,0x7d46c44a,0x0d90ff66,0x02a248aa,
    0x3f100be2,0x5b9223f0,0x7c0b8fe2,0x04c9ea05,0xdf07fe44,0x0150fd40,
    0x7d479072,0x709b0e61,0x7f068485,0x1f81f880,0x47ee3d96,0xb01fb838,
    0x2a20264b,0x407ee3f8,0x3a1a005d,0xe8171ec2,0x74242e81,0x7c403d82,
    0x64321f81,0x398f8bae,0x5c0dd811,0x4a21320d,0x0dd89b28,0x206e075c,
    0x86c5b849,0x87d0780a,0x05b82f84,0x50fc0fc4,0x1cb8f225,0x75e7dc16,
    0x15884c83,0x33ee03a5,0x84f80cfb,0x5557702c,0x89b05a80,0x01d01f84,
    0x641f83c4,0x44059000,0x209906fd,0x402ccbed,0x00804018,0x201b0008,
    0x80ec241d,0x7c166049,0x1dc00c81,0x4c85fc80,0x00001cc0,0x37000000,
    0x26121220,0x9d88aa03,0x07e6622a,0x59730de4,0x22dc8800,0x002019dc,
    0x00000000,0x0e01100c,0xbb822018,0x00555440,0x000aeee6,0x1554c620,
    0x00000000,0x00000000,0x00000000,0x00000000,0x2b260573,0x0aaaaa18,
    0x12015555,0x22282da8,0x06202b82,0x04806ea0,0x54401dc4,0xa88031cc,
    0x432188ac,0x515d11fa,0x704fc8dd,0x440aa01d,0x0a6582fa,0x0160b35b,
    0x5c0762b6,0x5b13b100,0x7e4c7720,0x64c73604,0xaf41f12f,0x3e63444b,
    0x02409302,0x1b920be2,0x703e23e6,0x0ee69803,0x263d81c4,0x0b305c87,
    0x3f1ec176,0x4485eb6c,0x409102f9,0x1cc2f804,0x98be7a8b,0x03a7b803,
    0x1f83f048,0xc83807ee,0x7407100f,0x20419f93,0x209102f9,0xfbbc982a,
    0xd99bb952,0x07c5e219,0x36fea00b,0x2e0aaa8a,0x93617cc0,0x06e8007e,
    0x7f45a804,0x205f302f,0x4d509048,0x091242fb,0x0064b53b,0x3f20ff88,
    0x227c1c41,0x260bf15e,0x017e2199,0x7fdc06c0,0x8817cc0e,0x447b0904,
    0x20532c2f,0x1ba8e61a,0x323fcd88,0x25f90902,0x209f53f9,0x13e62ff9,
    0xd880a600,0x40be60ff,0x7c41a839,0x9d9897c1,0x24801ac9,0x87541d4b,
    0x2e0488fe,0x1fabda80,0x236c0df1,0x828005f8,0x3e23fb81,0x50905502,
    0x9932f83f,0x40155d55,0xd1ecbe0c,0x0066fcc7,0x6c6d8071,0x1b61b607,
    0x7c120200,0x81b827c3,0x17c4f884,0x15402c37,0x3f9a647e,0x12022fe4,
    0x1fd40e88,0x01fb86d8,0x85d02e0a,0x4c0fb879,0x3db01a85,0x12248be6,
    0x3a5d0910,0x7643df12,0x1b8298cf,0x5f901e88,0x07f60db0,0xbb0fe20e,
    0x3203997b,0x480ccbce,0x3efbf220,0x2014cb1d,0x469da80c,0xf90defea,
    0xa98e20df,0x5ef5400b,0x3f202dca,0x0100bcce,0x088004c1,0x08440040,
    0x40300104,0x22022029,0x00010400,0x01100066,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x20730000,0x2b8804c9,0x005554c0,
    0x2aaaa373,0x222aaa88,0x2aaaa2aa,0x10555442,0x2a235555,0x0555502a,
    0x5b88f6e6,0x3c80e880,0x404e9859,0x880ffcd9,0xd880ffff,0x3e63fc83,
    0x7e40e987,0x3a03f505,0x81fe441f,0xf35980db,0x2201b625,0x1f13540d,
    0xf11404d8,0xf8801707,0x7d87f101,0x05f88398,0xf03ec095,0x3209305f,
    0x000d9024,0x9b0fe274,0x2c42e800,0x1ba01f40,0x900c85f5,0x6401901f,
    0x307fb607,0x6c80f607,0xbd0be000,0x01cd9cd8,0x2ffee162,0x5c00fb80,
    0x0b13ea1f,0x016227c4,0x77c6c0f9,0xdf930e60,0x65cd9059,0x5f306d42,
    0x5df6c6d8,0x82e981fe,0x741ffb98,0xf883fdae,0x0399f363,0x9006e3ec,
    0x25f9ac0f,0x6407d039,0x1f710766,0xb1b60fd4,0x75c43f89,0xf13a203f,
    0xb6c17d47,0x0192f9c8,0x20162fa8,0x4fa9607c,0xc80fa073,0x1f300c8e,
    0xb17a17c4,0x1f606d89,0x0be61f30,0x353f509f,0x6e802d7a,0x40f90073,
    0x81cd7e45,0x0bbb203e,0x21f40f98,0x1ae26c4f,0x10f80798,0x9f05d85f,
    0x801d7e4b,0xc800d9fb,0x2ff61606,0x76407d03,0x81f300fc,0x13617c5c,
    0x202cc09b,0x0f627468,0x1ff327e4,0x0137e200,0xd10b02e4,0xc80fa07f,
    0x03e60db6,0x3616a1d3,0x64183e24,0xa8390541,0x7d403e0f,0x32002f41,
    0x1ed6a01f,0x40fe60d0,0x7c5b204e,0xea81f985,0xbcea80cb,0x373be21c,
    0x01ddfe81,0x6803b595,0x344002b8,0x4c133ea0,0x43a80bfc,0x540befb8,
    0x23bfb2fe,0x0100cfc8,0x40040110,0x04002000,0x10010000,0x00100001,
    0x00000000,0x00000000,0x00000000,0x00000000,0x55540000,0x3155542a,
    0x55435555,0xabba982a,0x880b710a,0xaaaaaaaa,0x26aaaa62,0xaaa98001,
    0x332a009a,0x6c5dc41c,0x006aa61d,0x6fc85551,0xffa81bd0,0x26983f84,
    0x0bb30aed,0xafdaaea8,0x56fd47ba,0x21200eeb,0x44fbadfa,0x985f50d9,
    0x21febcde,0x27ec06fa,0x20680fe8,0xd81d46f9,0x01721ee4,0x10e3e415,
    0xb82fc47f,0x3ea3f885,0x82f88b63,0xf88fe25d,0x05ff102f,0x803717e6,
    0x6c0b13fa,0x01721aa6,0x7c047c81,0x77dc3f43,0xf88fe22c,0x82f81f16,
    0xd913744d,0x807ef20d,0x200912fb,0x2600d9fd,0x1b905b1f,0x07c805d9,
    0x41be23f8,0x223f885c,0x2f81f54f,0x912e44d8,0xfad883f5,0x06c77401,
    0x801ff880,0x7d900aab,0x3e401f73,0x1ed99fc0,0x47f10b90,0xf87f11fc,
    0x116c4d82,0xf53717e9,0x02ef9803,0x2e01fe40,0x89b2019c,0x201f201f,
    0x6404fddf,0xbdadf885,0x2fa976c1,0x9107c6d8,0x3f5587ee,0x9800fb00,
    0x3ea01fdc,0x2e43ffff,0x03e403f1,0x200fd9fc,0x403f885c,0x82f9efd9,
    0x442caced,0x54ae9f14,0x007c801f,0x7037c562,0xb916a661,0x01f202f8,
    0x902f44fe,0x2007f10b,0x23360be0,0x47e49100,0x32007ea5,0xfa836007,
    0xc8706984,0x0f9017c5,0x81fcc7f0,0x01fc436b,0x026c17c0,0x23ef8922,
    0x07d801fa,0x85fb03b0,0x1cbabdf9,0x405f1364,0x13e200fc,0x1df305f7,
    0x220027c4,0x4405d82f,0x0bea3e45,0x01cffb88,0xfe987fd5,0x332a20bf,
    0xb8afea82,0x7f5c40df,0xbefd981c,0x30073f60,0x54007dfb,0x0732a0bc,
    0x4985fecc,0x000b7faa,0x00000000,0x00000000,0x00000000,0x2a600000,
    0x2a601aaa,0x0aaaa2aa,0x5553036a,0x54c35555,0x55550aaa,0x855554c5,
    0xaaaaaaa9,0x55555531,0xaaaa9855,0x8732a009,0x555530ca,0x41b30135,
    0xfa800efa,0x5c41fcc5,0x5556640f,0x2fd41fea,0x77cc27dc,0x54ce7d40,
    0x2673e65c,0x6fd40ea9,0xd81debaa,0x37ea1d46,0x74c3eca9,0xf88027c0,
    0x1f3016c3,0x884fa838,0xf02f983f,0x8707f10b,0x7c41984f,0x7cc1fc83,
    0x87f10321,0x04f803f9,0x01647f10,0xf88103e6,0xf307f106,0x3e213e05,
    0x2004f803,0xbb0fd03f,0x741fc122,0x1004f806,0x2600b67f,0x80fec00f,
    0x02f983f8,0x447f109f,0x804c4f81,0x983f703f,0x07f01b8f,0x009f00bf,
    0x400b73e2,0x0fea00f9,0x2f983f88,0x39f109f0,0x339f0593,0x40fe01b5,
    0x05ce83f9,0x3baa673e,0x1004f800,0x3001dfbf,0x017e201f,0xb9999df1,
    0x2213e05f,0xf82daadf,0xf00eaaad,0x2a17e607,0x2eb7e03f,0x20e20cfd,
    0x57f1004f,0x0f9801df,0xf8801fb0,0x9f02f983,0xf8287f10,0x03f804c4,
    0xf01a07f5,0x3ea6f987,0xf88027c1,0x4c01df33,0x802fb80f,0x02f983f8,
    0x007f109f,0x81fc009f,0x404881fc,0x022fc83f,0x3e21c13e,0x4c03be63,
    0x382fcc0f,0x17cc1fc4,0x03f884f8,0x7f0504f8,0x0320bf10,0x03f907f0,
    0x224c27c4,0x0f7d44f8,0x03ba0fcc,0x309f1162,0x2217e07f,0x984f804f,
    0x3a61fc44,0x00fbea0d,0x06f987f1,0x3bbbff66,0x3bf661fe,0x473ffea2,
    0xdf90cfc8,0x49fd9999,0xb50aefd9,0x7fe4c5df,0x05dfb30b,0x3333ff26,
    0x3bf661fd,0xc882cccd,0x6f7ecc02,0x00003edc,0x00000000,0x00000000,
    0x00000000,0x22000000,0x35007001,0x01005510,0x6546e200,0x64c32a1c,
    0x65419712,0x2e2cc88b,0x4400370c,0x97102dbb,0x02dc0707,0x7f301faa,
    0x01ffdfa8,0xcc88002e,0xb0aa3e41,0x97a0fccb,0xb88ae0fa,0xf52d802d,
    0x993e4a81,0x801fd01f,0x21fec07a,0x0b817a24,0x300cd980,0x12e4243f,
    0x3e27a83f,0x0bda8122,0xd07e21b0,0x01f11543,0x7a809f95,0x088fe320,
    0x00b807dc,0xaec00f6a,0x3e25c838,0x2dd52f81,0x1cc98039,0x221fcb88,
    0xb1b07807,0x7507a80f,0x40d500fe,0x005d700b,0x6405c7d4,0x57207e25,
    0x000b9f9c,0x88da83ae,0x9007e61f,0x80be6910,0x0fe4887a,0x666547b0,
    0x5c1cccce,0x097d003d,0x981f8972,0x0099d2af,0x0f885b71,0x143f83f1,
    0x06e83202,0x3f8321ea,0x01701620,0xb80336a0,0x7dcf701f,0x0fd4dd02,
    0x26039930,0x6415f71f,0x4401b8cf,0x01fdaaae,0x999ba8f5,0x801901cf,
    0x664c000b,0x3e206880,0xb81df9df,0x5ecc1a23,0xf9dfd800,0x01ffe444,
    0x7ccccd5c,0xffd8f504,0x1b87ffff,0x10000b80,0x08200201,0x00180400,
    0x40010008,0xf501f905,0x85507f00,0x00001500,0x00000000,0x00000000,
    0x09f303b8,0x43f801f5,0x03b999ca,0x5dc40000,0x0000003b,0x00000000,
    0xc883bf50,0x7fb50cff,0xff51fc03,0x0003ffff,0xbbbbbbb1,0x1bbba67b,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x54000000,
    0x5dcc0ccb,0x02cb882c,0x333320b3,0x259930cc,0x272e20cb,0xd919713d,
    0xec8cb885,0x4403bb33,0x26531a81,0xaaaaaaaa,0x4c970aa0,0x83f24a82,
    0x22550ea5,0x15a6663e,0x2a2f4471,0xee98392f,0x3bdd33cb,0x5f6cc1f9,
    0x6d9abfb8,0x6d7a1720,0x33333316,0x10ffc133,0x87e1f21d,0x145f13f8,
    0xb9b66676,0x821fccaf,0x2afc80ed,0x89b20d90,0x8fe3641f,0x8555507a,
    0x2000b94d,0x8114c1a8,0xf92f40f9,0x999f883b,0x01f6c419,0x037403f7,
    0x5f1720b9,0xf31f46c8,0x4b22cb01,0x9999973b,0x10483999,0x1b217d40,
    0x0fcc5ff5,0x1db95f70,0x7ec02f98,0x1720b902,0x1f46c85f,0x261b81f3,
    0x001546a3,0x13e00028,0x36c4229b,0x4cd450fe,0x22f44176,0x407e4dc0,
    0x2f8b905c,0xf98fa364,0x04321220,0xc9800002,0x41d90882,0x22ccb11f,
    0x983a9dfc,0x2098db06,0x1b217a3a,0xd90be2e4,0x983e63f8,0x00001880,
    0x66dcdcc0,0x6dfec49a,0x072b3e21,0x8009ff91,0x0ecccdfb,0x37f625f5,
    0xea87fd50,0x31dfb8af,0x3bf717fd,0x00019f93,0x30300000,0x40110177,
    0x00000008,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__times_19_usascii_x[95]={ 0,1,1,0,0,0,0,0,0,0,1,0,0,0,
1,0,0,2,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,
-2,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,2,1,1,0, };
static signed short stb__times_19_usascii_y[95]={ 15,3,3,3,2,3,3,3,3,3,3,4,13,10,
13,3,3,3,3,3,3,3,3,3,3,3,7,7,5,7,5,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,17,3,7,3,7,3,7,3,7,3,3,
3,3,3,7,7,7,7,7,7,7,4,7,7,7,7,7,7,3,3,3,9, };
static unsigned short stb__times_19_usascii_w[95]={ 0,3,5,9,8,14,13,3,6,6,7,10,4,6,
3,5,8,5,8,8,8,8,8,8,7,8,3,3,10,10,10,7,16,13,11,11,12,11,9,13,13,6,7,13,
11,15,14,12,9,12,12,8,11,13,13,17,13,13,11,5,5,5,8,10,4,8,9,8,9,8,8,9,9,5,
6,9,5,14,9,8,9,9,6,7,5,9,9,13,9,9,8,6,2,6,10, };
static unsigned short stb__times_19_usascii_h[95]={ 0,13,6,13,15,13,13,6,16,16,8,10,5,2,
3,13,13,12,12,13,12,13,13,13,13,13,9,11,9,5,9,13,16,12,12,13,12,12,12,13,12,12,13,12,
12,12,13,13,12,16,12,13,12,13,13,13,12,12,12,16,13,16,7,2,4,9,13,9,13,9,12,12,12,12,
16,12,12,8,8,9,12,12,8,9,12,9,9,9,8,12,8,16,16,16,3, };
static unsigned short stb__times_19_usascii_s[95]={ 124,103,95,1,81,11,26,124,25,1,27,
39,112,61,122,112,1,15,30,20,21,29,38,107,116,46,123,124,50,101,95,
81,45,1,111,69,88,76,66,55,45,59,79,13,1,110,87,90,80,62,61,
89,49,98,65,47,15,1,33,75,40,39,86,50,117,106,10,115,118,18,102,
29,39,121,32,111,27,71,61,1,100,90,54,10,74,71,61,81,44,101,35,
18,15,8,117, };
static unsigned short stb__times_19_usascii_t[95]={ 13,1,85,18,1,18,18,72,1,1,85,
72,85,82,85,17,32,72,72,32,72,32,32,1,1,18,59,1,72,85,72,
17,1,72,59,18,59,59,59,18,59,59,32,59,59,46,32,1,46,1,46,
17,46,17,32,32,46,46,59,1,18,1,85,82,85,72,32,72,17,85,32,
46,46,32,1,32,59,85,85,85,46,46,85,85,46,72,72,72,85,59,85,
1,1,1,90, };
static unsigned short stb__times_19_usascii_a[95]={ 69,91,112,137,137,229,214,49,
91,91,137,155,69,91,69,76,137,137,137,137,137,137,137,137,
137,137,76,76,155,155,155,122,253,198,183,183,198,168,153,198,
198,91,107,198,168,244,198,198,153,198,183,153,168,198,198,259,
198,198,168,91,76,91,129,137,91,122,137,122,137,122,91,137,
137,76,76,137,76,214,137,137,137,137,91,107,76,137,137,198,
137,137,122,132,55,132,149, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_19_usascii_BITMAP_HEIGHT or STB_FONT_times_19_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_19_usascii(stb_fontchar font[STB_FONT_times_19_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_19_usascii_BITMAP_HEIGHT][STB_FONT_times_19_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_19_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_19_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_19_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_19_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_19_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_19_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_19_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_19_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_19_usascii_s[i] + stb__times_19_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_19_usascii_t[i] + stb__times_19_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_19_usascii_x[i];
            font[i].y0 = stb__times_19_usascii_y[i];
            font[i].x1 = stb__times_19_usascii_x[i] + stb__times_19_usascii_w[i];
            font[i].y1 = stb__times_19_usascii_y[i] + stb__times_19_usascii_h[i];
            font[i].advance_int = (stb__times_19_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_19_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_19_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_19_usascii_s[i] + stb__times_19_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_19_usascii_t[i] + stb__times_19_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_19_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_19_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_19_usascii_x[i] + stb__times_19_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_19_usascii_y[i] + stb__times_19_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_19_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_19_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_19_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_19_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_19_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_19_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_19_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_19_usascii_LINE_SPACING
#endif

