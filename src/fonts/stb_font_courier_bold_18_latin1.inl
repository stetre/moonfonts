// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_18_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_18_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_18_latin1_BITMAP_WIDTH         256
#define STB_FONT_courier_bold_18_latin1_BITMAP_HEIGHT         94
#define STB_FONT_courier_bold_18_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_bold_18_latin1_FIRST_CHAR            32
#define STB_FONT_courier_bold_18_latin1_NUM_CHARS            224

#define STB_FONT_courier_bold_18_latin1_LINE_SPACING           8

static unsigned int stb__courier_bold_18_latin1_pixels[]={
    0x50000000,0x00000001,0x36000000,0x08000b73,0x00000000,0x00000000,
    0x40000000,0x1005b100,0x86200801,0x88020002,0x00bff01e,0xfb801d90,
    0x3a009902,0x40ba2003,0x98dc4ffe,0x13e65d03,0x5fff00d9,0x02f4c4e8,
    0x03a600f6,0x3a600990,0xd3009900,0x7d405d01,0x02f67cc0,0xf03b7fd9,
    0x07cdb207,0x0bf505d0,0x2fd405f3,0x54016e00,0x2017601c,0x3e9804e8,
    0x0013f2a0,0x22fc8a7c,0x5f7c02fa,0x5db0bee0,0x2a013a20,0x80bb002f,
    0x02ec02fa,0x813e05f5,0x02e1a86e,0xfb03d98c,0x26008201,0x1fee1adf,
    0x45760066,0x00000000,0x200e0015,0x2e9f0019,0x1fff35ff,0xe87f127c,
    0x3741fc06,0x0051027c,0x0150002a,0x00a80054,0xa827c015,0x0377102f,
    0xf301bb88,0x406ee209,0x2e6ffffd,0x01bb886f,0x0ffffbf6,0x3fe6bff7,
    0xfffff50f,0x10377103,0x8aaa2555,0x55512aa8,0x8ff4d3e0,0x227c4fd8,
    0xf017d43f,0x4f83fa87,0x101aaa88,0x11554155,0x15555555,0x2aaaaaa2,
    0x5555510a,0x55555445,0x86d827c2,0x83ffffd8,0x03ffffd8,0xfffd88fd,
    0x4467c43f,0xd897ea6d,0xfb03ffff,0x4c7fd79d,0x49fb11fe,0x21fdccb8,
    0x43ffffd8,0xffd9fffd,0xb3fffb1f,0x49f03fff,0x3e1ba2fa,0x03741fc4,
    0xf81fb87f,0x07fffd84,0x3fe6bff9,0xfffff90f,0x3fff27ff,0xff93ffff,
    0x3f21ffff,0x3e0fffff,0xfd83f983,0x6c2fd98c,0x82fd98cf,0x233f60fc,
    0x33e22fd9,0x365f9820,0x82fd98cf,0x2a3740fd,0xf301ba2f,0x6cc67ec3,
    0xf507742f,0x3ea0ee87,0x56e89f03,0xff89f05f,0x3f80fdc2,0x5fb107ec,
    0x40bffe60,0x903be3fb,0x47f5333f,0x3fa999fc,0x30273e66,0x098139f3,
    0x27d40fd8,0xf09f537c,0x3ea5f70d,0x7fe46f84,0x553e20be,0x7d86f84f,
    0xf56e87c8,0xf51f9805,0x45e8df09,0x222f42f8,0xfa89f02f,0xe89f06ea,
    0x7f05f84f,0x0ffc47d8,0x206ebf98,0xb81fc8fd,0x5c3f388f,0xf03f388f,
    0x2004f809,0x81fb84f8,0x903f70fc,0xf72fa81f,0xc981f903,0xfb97c5fe,
    0x7ec0fc81,0x3ea13e23,0x1f9806ea,0x41f903f7,0x3a17c45e,0x4f817c45,
    0x9f02ffe8,0x03f704f8,0xf80fc87f,0x3f71fb03,0x413fbe20,0xb80fdcfb,
    0x3e00fdcf,0x2e827c04,0x83e407e4,0x2e0f90fb,0x7c8fdc0f,0x70a61f70,
    0x5c1f201f,0x77ffec0f,0x5ffd00ff,0x1f23f300,0x88bd07dc,0x3e22f42f,
    0xdf509f02,0x40fe27c0,0x543f84f8,0xf884f82f,0x2a04f99d,0x3ffee06f,
    0xffffb80f,0x9f013e00,0x04f893e0,0x5cfb05f7,0x7d87d82f,0xd9f60bee,
    0x0a8fb32f,0xb0fb05f7,0xa805bb7d,0x23f3006f,0x747d82fb,0x17a17c45,
    0x213e05f1,0xf13e02fa,0x3e07e407,0x27c2fc43,0x3fffffdc,0x8fb813e0,
    0x47dc337a,0x09f0337a,0x649f04f8,0x98bf100f,0xf317e25f,0x3e25f88b,
    0xff92fcc5,0xa7c47fff,0x42fcc5f8,0x17d4005d,0xbf11fa80,0x07ec5f98,
    0x20fd81f5,0x24f980fa,0x3e00fe99,0xf880fe64,0x3f2067c4,0x57742fc1,
    0x3e02fbaa,0xd843ee04,0x5d843ee5,0x827c04f8,0xb80bf14f,0x40ffdbff,
    0x0ffdbffb,0x3fee0fe4,0x2620ffdb,0x5c080dfa,0x40ffdbff,0x4c009ee8,
    0x26600fe9,0x5ffdc7ea,0x77cc0ffd,0xef984fcb,0xffe84fcb,0x0dffff94,
    0x00ff99fc,0x7fff07ec,0x57f227c4,0xf712efc8,0xcefcb85d,0x6667ecc1,
    0x99fb35fc,0x3326bf99,0x33263cef,0xb9fc3cef,0xffda801f,0xdffb500e,
    0x36a0bf01,0x13e00eff,0x0effda80,0x205ffff8,0x706ffffc,0xb503ffff,
    0x3ea01dff,0xff500bff,0x3553017f,0x802aaaa2,0x22002a0a,0x302aaa0d,
    0x3fe63503,0x89fff35f,0x5c3ffffe,0x5fffffff,0xfffffff7,0x3ffffeeb,
    0xfffff70e,0x04a8541d,0x08800440,0x011002a0,0x110005d0,0x005554c0,
    0x20155551,0x08801aa8,0x00c00300,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x050c4004,
    0x9d802d88,0x800200e8,0x286202d8,0x026b2e60,0x2b88025c,0x02601000,
    0x218816c4,0x00ccc402,0x80098a00,0x05b30008,0x000c0060,0x2200b800,
    0x0f36001e,0x403e6d90,0x2205ecf9,0xf981fabf,0x3e604bcf,0x26d905ec,
    0xffffe80f,0x766f445f,0xffffb101,0x5455c407,0x13ffa61f,0xd90bd9f3,
    0x3f6203e6,0x7edc0fff,0x87cc3fff,0x5ff6403f,0x402d601d,0x3ee01efc,
    0x33f6a01e,0x4c02ec00,0x58d8802f,0x1a802080,0x55fc402e,0x1990981f,
    0x20170d40,0xb8bf6020,0x03514c5f,0x3f6633f6,0x7fffec42,0x1f8a746f,
    0x2080b86a,0x07c1b900,0x05d9b9f9,0xb3180082,0x404cb807,0xc80fa8dc,
    0xf881e98d,0x13204fce,0x95002880,0x44aaa201,0x4aaa22aa,0xbfa82aa8,
    0xaaa881fb,0x55555101,0x2aaa2155,0x7f10aaaa,0xaaa889b0,0xdf09f501,
    0xff98cfd8,0x22791e23,0x222aaaaa,0xd82aaaaa,0x5ed7e1c4,0x1aaa881e,
    0xaa88aa60,0x44003102,0x2e00c400,0x0c40f90f,0x006aaa20,0x36035551,
    0xfffd9fff,0xfb3fffb1,0x7ffe43ff,0x7fec2fff,0xffff907f,0x3ff27fff,
    0xf53fffff,0x3fff6003,0xf903f707,0xffd93ea1,0xa7e456a6,0x0ffffffc,
    0x1ffffff9,0xf806fff4,0xfb03d7b5,0x7ffc0fff,0x4c3fffb2,0x2e05ffff,
    0x7cc1effe,0x3f705fff,0xfff30df7,0x3fff60bf,0x3fffec07,0x1fd41dd0,
    0x43fa83ba,0x0afdbfc8,0x902fff98,0x47f5333f,0x3fa999fc,0x7cc001f7,
    0x707c82ff,0x7dc7ee1f,0x3e990fbc,0x33e664dc,0x4e7ccc09,0x3f623e20,
    0xebecfb83,0x05fff301,0x7d43bfa2,0x7dd5e4c3,0xfbacfc83,0x2eaf260f,
    0xffbfb83f,0x5d5e4c0e,0x5fff303f,0x02fff980,0x742f88bd,0x7dc17c45,
    0x2fe607c8,0x711f706e,0x388fb87e,0x800bea3f,0xfa86ebf9,0x4df26e82,
    0x3321f75f,0x09f0996a,0x25f704f8,0x7ed40de9,0xd7f301eb,0x8a7ff40d,
    0xbd99503f,0xf9555bf0,0x0bd99507,0x0df711f7,0x4c17b32a,0x7cc06ebf,
    0x88bd06eb,0x3e22f42f,0x7ff7f642,0x3f71fb05,0x01fb9f70,0x881fb9f7,
    0xfd82885f,0x2fc41fb8,0xfaf98fe6,0x4664fb0e,0x04f84dbf,0x1bf5027c,
    0x0f5ec136,0x01fb8fd8,0x7f13f9bd,0x5fffffa8,0x7fffffd4,0x3fffea5f,
    0x320fb85f,0x3fffea1f,0xf71fb05f,0x7dc7ec03,0x17c45e81,0xc85f117a,
    0x885ffeff,0xb84f99df,0xfb80ffff,0xffb80fff,0x7c46fcac,0xfb84f99d,
    0x7c0efdbf,0x5cbf31ff,0x9f0bfd56,0x64404f80,0xd7b04ecf,0xf33bf103,
    0x3be37a09,0xd0efc3f9,0x999cf88b,0xe877e099,0xf328fb85,0x0bd0efc5,
    0x09f33bf1,0x13e677e2,0xe85f117a,0xbe417c45,0xffff705e,0xf51f70ff,
    0x7a8fb866,0xfffea833,0x7fffdc0d,0x7fff507f,0x3f6fbf60,0x2003e60f,
    0x8827c04f,0xbd813ea0,0xffffb81e,0x3eabd07f,0x2b7e23fd,0x7e43ffeb,
    0xf13dcbac,0x47ffd75b,0xfdcfcfd9,0xfd75bf10,0xffffb87f,0xffff707f,
    0x541fb0ff,0xf507ec0f,0x413edb01,0x2fbaaaee,0x4bb087dc,0x417610fb,
    0x2abba04c,0xffb82fba,0x37ea4aad,0x4e80bffe,0xf013e02a,0x1f892e09,
    0x3a07af60,0x82fbaaae,0x70fff65e,0x8dffdffd,0x2efffeb8,0x3ffbffae,
    0x3f73ff26,0x77ff5c3f,0x557746ff,0xaee82fba,0x7cc2fbaa,0xf984fcbe,
    0xbb04fcbe,0x5df9113e,0x6ccbbee2,0x35fccccf,0xbf9999fb,0xc881f730,
    0x5df712ef,0x6ffffff8,0x7c4009b6,0xf9930eff,0x7e64c79d,0x777e43ce,
    0xfbfd505f,0x4bbf225d,0x3e62efb8,0x03ff88be,0x00c40013,0x80100026,
    0x5df91009,0x644bbee2,0x5df712ef,0x00bfffa8,0x2017fff5,0xff981519,
    0x29fff35f,0xfffffffb,0xffffff75,0x30bd50bf,0x3fe6bfff,0x0330cc4f,
    0xf7026000,0x2e1dffff,0x20efffff,0x2201aaa9,0xf30aa9aa,0x3ffe6bff,
    0x5c7fff24,0x0000003f,0x20000000,0xff35fff9,0x57ffe69f,0x0304fff9,
    0x000000c0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00e2002a,0x00088070,0x00260011,
    0x00000000,0x18000010,0x01100000,0x00200388,0x70014400,0x09801801,
    0x00001700,0x301c804c,0x01bb005f,0xfd905d88,0xeffe81bf,0xfb882dff,
    0x3e1ffeff,0x5ffb805f,0x5401fff3,0x00fe02ff,0xb10959df,0x1ff901bf,
    0x3ae03ffa,0xd84ffdff,0x67ff5405,0x3fffffa0,0x804e880f,0x0f7e405d,
    0x2027ffcc,0xffff105d,0x3fff209f,0x3a604f82,0x6c04b800,0xf75bf503,
    0xbcfffa89,0x5e7e41fd,0x3ea0cffe,0x11fe9805,0xfc8809fb,0xf9013e02,
    0x327d07ff,0xb50fd986,0xcbefc81f,0x09901dff,0xb27dd6fc,0x80fd999d,
    0x9013203c,0xee81f51b,0x09903fcb,0x0e666fc4,0x205d67ec,0x01881df8,
    0x02200220,0x3f61f204,0x87f12f41,0x115e80fe,0x0dd17d40,0x202f8898,
    0x26f6204f,0x3ee0004f,0x4f883ee0,0xa8001fdc,0x4099f20f,0x2002205e,
    0x98088008,0x4001ba2f,0x17e402f8,0x2bffff50,0x205ffff9,0xb81effeb,
    0x3101effe,0xf90db0dd,0x03f20fd4,0x077ffbba,0x882fab74,0x42fdffeb,
    0x1aadfaaa,0x90fccca8,0x03ffa1ff,0x507dc1f7,0x323f983f,0x41ffd0ff,
    0x40dd13fa,0xfffb83f9,0xefffb80e,0x0efffb80,0x90fb83ee,0x83ffa1ff,
    0xe81cddf8,0x9df8818d,0x757936e9,0x759f907f,0x567e41ff,0x7fd40ffb,
    0x263fd81f,0xfd0fe26f,0xd79ffd01,0xdd5f503f,0x3f6f7f20,0x3fffe62f,
    0x3fe65fff,0xfb32fffe,0xf703f6a1,0xbf107dc1,0xd98ff621,0xd81fb50f,
    0x3202ffff,0x65f7dc0f,0x2fbee0ff,0x3bee0ffc,0x8db0ffcb,0x21fb31fa,
    0x3fe20fda,0x3be24ffe,0x83ee2eff,0x2f665429,0x7e5556fc,0x32aab7e3,
    0x85fdb83f,0x1ffefffd,0x7ff5efe4,0x27c1fe80,0xf882ffe8,0x26217e44,
    0x7ec09cf9,0x7dc7fd10,0x9f703ee0,0xfb87ffb5,0x5c3fffef,0xe883ee0f,
    0x3a03ffef,0x27c45f85,0x3e4f88bf,0x46da7c45,0xb83ee1fa,0x4f90d40f,
    0x27eadff9,0xfff500fb,0xfffa8bff,0xff55ffff,0x40bfffff,0x6df6c1fb,
    0xfeb880ad,0x86e80fef,0x20df507c,0x017cc0fa,0xa89f109f,0xfb83ee3f,
    0x77fffdc0,0xaddb886f,0xf707dc3f,0x0fb17dc1,0x05f30fe6,0x3a0be6dd,
    0x2dd05f36,0xf71f20fb,0x26007dc1,0x7ccdf12f,0xbb53bf12,0x445e877e,
    0x099999cf,0x333339f1,0x3617d401,0x0f918005,0x20bd03fa,0x85f102fa,
    0x40fe02fb,0xf717dc5f,0x3ee07dc1,0x7c400099,0x1f707dc3,0x203ee3e4,
    0x22fc40fc,0x88bf14f8,0xf88bf14f,0x22f45f34,0x003ee0fb,0xf12fc1f5,
    0x5ffffd47,0xffebadf8,0x65d67e43,0x2eb3f23d,0x9559b3dc,0x4f7441fd,
    0xfb998800,0xbbeffb86,0x7f4cc2fd,0x36b3f600,0x03901dff,0x1bf2b7ee,
    0x7ffb59f3,0x88000fb8,0x33e60cf9,0x3ea3ffda,0xbf06fbbd,0x3f2f7f20,
    0x32f7f21f,0x2f7f21ff,0x2ffa1ffc,0x567cc2fd,0x2bba3ffd,0x67dc5fca,
    0x6fc40feb,0x3fbffae0,0x7ff5c46f,0x3fae22ef,0xffd72eff,0xffff83df,
    0xefffd805,0xffeefe80,0x7fffe42d,0x3ffae206,0x99913ffe,0xeb859999,
    0xffd80cff,0x07d46fef,0x2ffffc00,0x1bfbfff6,0x201dfff7,0x3fff202e,
    0xefffc81e,0x1efffc81,0xd827ff44,0x2a6fefff,0xc81ceffd,0x07f02eff,
    0x01880026,0x300c0188,0x51001555,0x804c0035,0x000aaaa8,0x3ffe6013,
    0x0105ffff,0x00300310,0x202aaa60,0x00110018,0x22002200,0x44008800,
    0x0800c400,0x00a80100,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x40000000,0x019d7009,0x200e9adc,
    0x000401a8,0x07b10003,0x06201a88,0x22006200,0x2a201000,0x800c00bc,
    0x5c2d8819,0x5cc01d35,0x9adc09ac,0x0002880e,0x026b2ea0,0x8804cf22,
    0x880aaaaa,0xfe8801bb,0x25c7445f,0x44122750,0x642eddfd,0x07fb805f,
    0xb103d880,0xeb85dbbf,0xffb5006d,0x5ff705df,0x309fb710,0x705fffff,
    0x2e019fff,0x3a85900e,0x7fff4091,0x489d45ff,0xf5009d10,0xfffd881f,
    0xfcbc85ff,0xffffb00e,0x7ffec49f,0xfea7cc3f,0x452a4fbb,0xd1008806,
    0x2a16c137,0x000f1005,0x088be880,0x803d305b,0x4fdbbef9,0x2174c75c,
    0xfa84fefc,0xdfb8db12,0x0da83fca,0x6c018800,0x4417ee2f,0x7403d800,
    0x857ec0ff,0x006205f9,0xfb07ba66,0x4c5fb319,0x3f23f8df,0x40cfb3a0,
    0x5c1effeb,0xe89eefbd,0x10a216a0,0x1c802a0f,0x1bdbb5b8,0x307f4c1d,
    0x03e87c83,0x2213e100,0x8bb07dc3,0x43b0006c,0x885ffff9,0x7dc4d83f,
    0x20000eff,0x1fc0fefb,0x7ffdc154,0x545e800e,0xf306f84f,0x2ea17d45,
    0x33f20dfc,0x47a0ffba,0x5a8b2956,0x11e22fdc,0x0fe603fb,0x5948ea7a,
    0xf13ee7b0,0x3ffe6009,0x54027c04,0x4c7e806f,0x4f884fff,0x0feeaf26,
    0xdf7003f5,0x7cc1ff97,0x7bf104ff,0x800fd41f,0x0ffcbefb,0x07ee2f40,
    0x8af403f2,0x7bf933ff,0x9555bf01,0x1fdf3c7f,0x4eff6cea,0x3fae1bfd,
    0x80aefbae,0x39782ffc,0x3bbb6750,0x37c0beea,0x27e5c408,0xbff013e0,
    0x442fd801,0x4f984fcb,0x5c5ecca8,0x445f800f,0x13f2e24f,0x707dcfe4,
    0x2f32e21f,0x49f117e0,0x1f22f40a,0xffa807dc,0xb1553fff,0x7ffd43dd,
    0x4b65ffff,0x70392e8e,0x220fd1bf,0x24ddebfe,0x2ab604fa,0x9110e463,
    0xfb8df19f,0x206ebabd,0x2027c04f,0x1fec404e,0x97ea13e0,0x45fffffa,
    0x17cc02fa,0x984f8374,0x7d41f74f,0x25ffff51,0xf16e82f9,0x17dc5e85,
    0x447b13ec,0xacc2fccc,0x2673e258,0x2f6e0999,0xe86ae8bf,0xf50fd92f,
    0xf93cca1b,0x7656e398,0x774468ce,0xfd70ddb1,0x27c03bff,0x801013e0,
    0x4f803fe8,0x877e6fb8,0x442fc45e,0x4f88bf12,0xddfb09f0,0x427c4bfd,
    0xf117e25e,0x89d0fe29,0x32fcc5f8,0x81ff10df,0xcfc8b359,0x66c3dcba,
    0x42a07a61,0x829879e9,0x2b7e62e9,0x30e6c6eb,0x4f54503d,0x7c013206,
    0x2a027c04,0x005ff300,0x45fee13e,0x3ffebadf,0x7e567fdc,0x3f2f7f26,
    0xd909f01f,0xfd89fddd,0x645fcabe,0x11ffcbdf,0x05fb59df,0x1ffb7ff7,
    0xffb59108,0x107bb603,0x05dfffd7,0x003bddd9,0x7005fdd9,0xfffd703d,
    0x3bddd907,0x03fdd900,0x32a01fb5,0x930ccefc,0xf3079df9,0x99dff10b,
    0xefcca8b9,0x5cbf30cc,0x86ffeffe,0x40dfffea,0x541efffc,0x80ccefcc,
    0xffc83feb,0xffc81dff,0x7fed41ef,0x3ff6a02e,0x3bfe200e,0x4400400b,
    0x20001001,0x7fd402fe,0x1003307f,0x03fd1000,0x7fec09b5,0xff72ffff,
    0x0101dfff,0x3fffffe2,0x3ffff60f,0x04c022ff,0x11003100,0x3fffff60,
    0x06ffe82f,0x02200262,0x00880020,0x00000020,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x80267b10,0x0b819cb9,0x544aaa20,0x0000002a,0x00016e7b,
    0x5c400000,0x5d0e980a,0x4414b6a0,0x306aa1aa,0xa8805555,0x01aaaaaa,
    0x55116a13,0x2aae0355,0x5513aaaa,0xaa880555,0x44aaa01a,0xcec881aa,
    0x32f20001,0xfffd00ef,0x017c41ff,0xffb3fffb,0x305f903f,0x46e007ff,
    0x00ffc839,0x997ffae0,0x3ea04fff,0x72440fff,0xbfd5b103,0x3e6dff90,
    0x3fffe0ff,0x3ffee02f,0x7e44ffff,0x7e46feff,0x0c1effff,0x3ffff630,
    0xfffb03ff,0x27ffe60f,0xefd86ffd,0x100ba02f,0x897d4033,0x00be61fd,
    0x81fd41dd,0x3fb881ca,0x3f660000,0x99bf7000,0x027e5c49,0x001b31bb,
    0x7dc03100,0xfb103fa4,0x7dc01399,0x364f99fd,0x82ffdbdf,0x0ffb99ee,
    0x27f21806,0xf300fd99,0x87ee05ff,0x09fc40fc,0xff9827c0,0x41f905ff,
    0xffff90e8,0x445e83ff,0x7f10002f,0xfd0ffc80,0x188fb81f,0x4f802f40,
    0xff3013a0,0xfdff309f,0x27f603bf,0xfffb02fc,0x373207ff,0x9f13f88e,
    0x3617fbe6,0x4031fcc6,0x2fa83ee1,0x20dd7f30,0x203ee0fb,0x209f006f,
    0x83fbabc9,0x4c0acff9,0x40bccdfd,0x2617c45e,0x7f104fff,0x6cc3fff5,
    0xb81fb50f,0x5c1fffef,0x00ffffff,0x9fd7109f,0x13f2e205,0x3aefff62,
    0x09fdf105,0x20fb136c,0x20defdaf,0xd8ef99fa,0xf1e7f5c7,0x7dc300cb,
    0xb00ffdcc,0xf703f71f,0x881fb557,0x260b8bff,0x80aadfaa,0xb305ecca,
    0x2f989fff,0x0be22f40,0x2209f971,0x40befcbf,0x703ee0fb,0x98dd77ff,
    0x203ccefc,0xffffa84f,0xf704f806,0x75c07dc3,0x8db01cff,0x6cfcc0fb,
    0x7e7c46ff,0x3e25f88e,0x4bb0ffff,0xfffb8601,0xdf880eff,0xffb84f99,
    0x7f40ffff,0xff34fcfe,0x54bfffff,0x085fffff,0x5f30fecc,0x17c45e80,
    0x3fe209f0,0xb83ee05f,0xf70fdc0f,0x3e00bd01,0x4007ea04,0x5c1f704f,
    0x1cf9880f,0x3f2abb60,0xbefffc86,0xfcbffd84,0x4f86d81f,0x43ee1806,
    0xffb86fb8,0x9fb87fff,0x3e20fc99,0x4cc6ff8b,0x3e099cf9,0x13a17a1d,
    0x017cc7f1,0x00fa83f6,0x7ffc413e,0xfb83ee03,0x1f707dc0,0x13e00bd0,
    0x40220fc8,0x5c1f704f,0xcefcc80f,0x9dfffb02,0xb9b673a0,0xdfffff35,
    0x7f51b603,0x07dc300c,0x2abba1f2,0x07dc2fba,0xdaee81f7,0x109f01ef,
    0x7ffd75bf,0xfebadff8,0x7edd77c0,0x3f2fbe61,0xf8827c04,0x9f304fdc,
    0xfb87ffb5,0x17a03ee0,0xffb827c0,0x32a5eccc,0xb10ccefc,0x20ff629f,
    0xa80befc9,0xf900ccfe,0xdd99fd79,0x300443ee,0x8dfb99fd,0x67ecc601,
    0x3226fdcc,0x5df712ef,0x3a633f62,0x7fff544f,0x2e09f03f,0x46ffeffe,
    0x82dfffdd,0xa84fffea,0xca80bfff,0x910ccefc,0x20f7f67f,0x26fefffd,
    0x9fb34fd8,0x1e677e4c,0x333bf32a,0x3fffffa0,0x3ffff62f,0x1fff52ff,
    0xff90dff3,0xfffd03ff,0xdfff105f,0x00dfffff,0x3bfffee0,0x99999a84,
    0xfffff929,0x7ffcc1bf,0x2e9fff35,0xfffc9fff,0x2e800880,0x130004c0,
    0x03001100,0xffffffd8,0x3f27ff32,0x5403106f,0xfffa8fff,0xdfffff90,
    0xffffffd8,0x00000002,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x55555100,0x2aa60005,0x2aa22aaa,0xaa88aaa0,
    0x5530aaa0,0x55055543,0x88555415,0x5101aaaa,0x25555555,0xaaaaaaa8,
    0xaa88aa60,0x06aaaa22,0x8055554c,0x20aa81a9,0xaaaaaaaa,0x2a155510,
    0x0d55542a,0x11000c40,0x00c40000,0x17d400c4,0xffcaecc0,0x9f30ffff,
    0xffffb801,0x4d7ff27f,0xdff90fff,0x7c43ffe6,0x9fff57ff,0x7cd7ffe6,
    0xffff95ff,0xfffa85df,0xff96ffff,0x7c7fffff,0x3fffb2ff,0x3bfffff2,
    0x7fffffc1,0x707ffc1d,0x3ffe29ff,0xfb2fffff,0x1fff59ff,0x81ffffea,
    0x205ffff9,0x320efffb,0x81ffd0ff,0xa86fffeb,0x702efffd,0x7fec407f,
    0x8273e662,0x2e03ffd8,0x5c5fb99f,0xf703be3f,0xf503fe29,0x263ec415,
    0x322fcc5f,0x547da99f,0x6d9cf9af,0x3ea667f2,0x543bfa23,0x5ccf743f,
    0x4cf6c46f,0x1ffd44fb,0x9df88ffd,0x3f22fa99,0xc881bf71,0x2f26009f,
    0xefb83fba,0xfb30ffcb,0xf983f6a1,0x7cc7ebac,0x004fdbbe,0x00cffc88,
    0x77f4c09f,0x1fd17b82,0x03f91fb0,0x207fabf2,0xdb5f9af9,0x41fb8fb0,
    0xa8be60fb,0xb9b67f1f,0xe83f388f,0xd87f14ff,0x1b61fd45,0xbffcc1f7,
    0x54e87ffa,0x47dc1f13,0x03ee05fc,0x42f66540,0xf727c45f,0xbf307dc1,
    0x87c85337,0x7fdc003e,0x4027c00d,0xd8c1dfea,0x9fdf101f,0x102ffd80,
    0xbd1ff97f,0x43745f30,0x0feb99fb,0x4753f922,0xd00fdcfb,0x87f13f9b,
    0x36c5f85d,0xfcf98fd1,0xee87dfda,0xfdf704fc,0x400fb80b,0x45fffffa,
    0x2e6e82f9,0xb703ee0f,0x04f87fff,0xffb05540,0x4013e007,0x7dc2ffe8,
    0x4037d403,0x33e00ffb,0xd04fbfee,0x3ee0be6d,0x7c01ffff,0x1ffff703,
    0x27be37a0,0x2f42ec3f,0x0bffbbf6,0x97ffd3f3,0x09fffd0f,0x807fffee,
    0x0efc00fb,0x445f88bd,0xfb83ee4f,0x7e4c4aa0,0xf8041be1,0x01dffa85,
    0x7fdc027c,0x1b2fd40d,0xbf5013e0,0x5ff7c0df,0x3f703fee,0x2efee0fb,
    0x81fc01ff,0x8337a8fb,0x87fbf55e,0x7ec4f85d,0x9f981cde,0xe87c8ffb,
    0x2bee09d4,0x1f700fe8,0x75bf13d4,0xdfc87ffd,0x3e61ffcb,0x3a3ffdac,
    0x20fdbacf,0x6ebabdfb,0x3ee00fa8,0x409f00cf,0xf881efea,0x27c0be26,
    0xbf51df10,0x3ee3ffa0,0x9fbf102f,0x7f443ee0,0x7dc0fe00,0x4bd17610,
    0x22ec3ffd,0x4036c2fb,0x1f27b1f9,0x1f70053a,0x07dc13e2,0x7ff5c1f7,
    0xffc86ffe,0xfffd81ef,0x3ffb26fe,0xffeb82df,0x803c81df,0x9933ffc8,
    0x7ec479df,0x337f602e,0x7e5c2fdc,0xa7f4c1ce,0x7ec0cfe8,0x6403ff36,
    0xcfd980ff,0xcb85df31,0x3f661cef,0x265fcccc,0x3ff88bef,0x3f733fe6,
    0x0667f546,0x3ae2dfc8,0x2f3bee2f,0x91cfd980,0x3f6e219f,0x980fdccc,
    0x10022000,0x00131003,0x40038011,0xffff75d9,0x00fa61df,0x3ffffffa,
    0x1fffff42,0x7fd5bff2,0xfd1fe41f,0xc82fcc01,0x13ee3fff,0x5c7ffffd,
    0x5fffffff,0x7dc7fff2,0x3bffff23,0x2ffffe84,0xf15fff88,0x3ffa2bff,
    0xfffc81ff,0x3e65ff13,0x0fffffff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x08800000,0x00110022,0x9800005b,0x00000030,0x00002200,0x08800022,
    0x26481818,0x8e004c02,0x19104428,0x401311d4,0x2aaaa601,0x06e21aaa,
    0x36206022,0xdddddb53,0x4b8020bd,0xffe88395,0xeb82ffcd,0x06a01eff,
    0x3ee3fffa,0xfdff12ff,0x7cc5ffdf,0x45ffb8ff,0x3ffa2ffe,0x3f73ff22,
    0xf305d04f,0xb83bffdf,0xb0ffffff,0x23f9bd9f,0x3722ede8,0xde883e88,
    0xd34d882e,0xf987fa65,0xbd15fa8e,0x109f105d,0xffffffff,0xb13fbe2d,
    0x93b7a21f,0xdddb54f8,0xfd88bddd,0xfbbec6e5,0x7fdde441,0x33f20fdc,
    0x4000ffba,0x9fd13fea,0x7fd77e41,0x3ff225eb,0x7d42efb8,0x0efaac8d,
    0x333fff26,0xfb107f05,0xfb8bd77f,0x3e66fecc,0x4a25ffef,0x7447645b,
    0xe88b9105,0x83b05f55,0x2a0efefa,0x2ffe85dc,0x99999998,0xf1e6b76d,
    0x7c1d16c9,0xf9fb0003,0x55725fbd,0xffcb980f,0x2b7e4fba,0x2a63fcaa,
    0x260aaaaa,0x3e61be3f,0x2a1f29f2,0xbf00efef,0x107f1df5,0x37f203df,
    0x3ee0feef,0x54883ee1,0x8a7c41bf,0xe81ea85f,0xfd85f98f,0x1fd5be23,
    0x0ffc81d8,0xfb172732,0x6c003fb5,0xfa9ead76,0x3a1e8b20,0xdddddb52,
    0xfd31b8bd,0xd879a5c7,0xffffffff,0xffffff55,0x3fffe6bf,0xbbec6fff,
    0x9f1f982f,0x0ffec1f2,0xf9ffbfb0,0x4407f103,0x5c3efffd,0x2a03ee0f,
    0x3a2f985f,0x32037226,0x300de89f,0x3f93fa8d,0xfefa83b0,0x5ffdd70e,
    0x07f44fee,0xffd16d80,0x3b622647,0xdda8e43e,0x004ddddd,0x9f30e298,
    0x42667be1,0x99999cf8,0x26666660,0x375fcc09,0x329f1f98,0x2fecfd87,
    0xfffbff70,0x3a00fe20,0x20fb82ff,0x52fd40fb,0x24fb9ef8,0x3b25eefc,
    0xde984e88,0xf73e983e,0x4d3bfa23,0x225fa8ef,0x1221d410,0x204c4b80,
    0x0000100a,0x77c00000,0x3dbbffda,0x372eb3f2,0x3ff60003,0x3be9f902,
    0xdfd32fc8,0x3e213fea,0xcb85fc9f,0xfb81ccdf,0x3f620fea,0x7d47fb14,
    0xf71fdccf,0x441fffff,0x80531c08,0x85324400,0x29832208,0x00000000,
    0x00000000,0xfff30000,0x445dffdd,0x02efffeb,0x06fa8037,0x5ff1fff1,
    0x3bfeebf9,0xf80effb8,0xffd09f36,0x25307fff,0x47ffd438,0x3ff26ff9,
    0x1991ffff,0x0003d355,0x00000000,0x05402a00,0x989ec413,0x44419999,
    0x40888888,0x36a1d35b,0xeeeeeeee,0x04c00005,0x80188011,0x0000002d,
    0x00000000,0x00000000,0x00000000,0x44000000,0x5d85d34e,0x2edf31ec,
    0x2e7fffff,0xffffffff,0x922730ff,0xeeeeeed9,0x000005ee,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xd12fcc00,0x1f951321,
    0x33333104,0x5ddddc43,0x0002bbbb,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x9b500000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__courier_bold_18_latin1_x[224]={ 0,3,2,0,1,1,1,3,4,1,1,0,3,1,
3,1,1,1,0,1,1,1,1,1,1,1,3,3,-1,0,0,1,1,-1,0,0,0,0,0,0,0,1,0,0,
0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,1,3,1,1,1,-1,3,0,-1,0,0,0,1,0,0,0,
1,0,1,-1,0,0,-1,0,0,1,1,0,0,-1,0,0,1,2,3,2,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,3,1,0,1,0,
3,0,2,-1,2,0,-1,1,-1,-1,2,0,2,2,3,0,0,3,3,2,2,0,0,-1,0,1,-1,-1,-1,-1,
-1,-1,-1,0,0,0,0,0,1,1,1,1,-1,-1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,
 };
static signed short stb__courier_bold_18_latin1_y[224]={ 13,2,3,2,1,3,4,3,2,2,2,3,10,7,
11,1,2,2,2,2,2,2,2,2,2,2,5,5,3,6,3,3,2,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,2,2,16,2,5,2,5,2,5,2,5,2,2,
2,2,2,5,5,5,5,5,5,5,3,5,5,5,5,5,5,2,2,2,6,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,13,6,2,3,4,3,
2,2,3,3,2,6,7,7,3,0,1,1,2,2,2,5,2,6,12,2,2,6,2,2,2,6,-1,-1,0,0,
0,-1,3,3,-1,-1,0,0,-1,-1,0,0,3,0,-1,-1,0,0,0,5,2,-1,-1,0,0,-1,3,2,2,2,
2,3,3,2,5,5,2,2,2,3,2,2,2,3,2,3,2,2,2,3,3,4,5,2,2,2,3,2,2,3,
 };
static unsigned short stb__courier_bold_18_latin1_w[224]={ 0,3,6,9,8,8,8,3,4,5,8,9,4,8,
3,8,8,8,9,8,8,8,8,8,8,8,3,4,10,10,10,8,7,11,10,9,9,9,10,10,10,8,10,10,
10,11,11,10,10,10,10,9,9,10,11,11,10,10,8,5,8,5,8,12,4,10,11,10,10,9,9,10,10,9,
7,10,8,11,10,9,11,10,10,8,9,10,10,11,10,10,8,5,3,5,9,9,9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,3,7,9,8,10,
3,9,6,11,6,9,10,8,11,12,6,9,5,6,4,10,9,3,4,5,6,10,10,12,10,7,11,11,11,11,
11,11,11,9,9,9,9,9,8,8,8,8,10,11,10,10,10,10,10,7,10,10,10,10,10,10,10,9,10,10,
10,10,10,10,11,10,9,9,9,9,9,9,9,9,9,10,9,9,9,9,9,9,10,10,10,10,10,10,11,10,
 };
static unsigned short stb__courier_bold_18_latin1_h[224]={ 0,12,5,13,14,11,10,5,14,14,8,10,6,3,
3,14,12,11,11,12,11,12,12,12,12,12,9,10,10,5,10,11,13,10,10,11,10,10,10,11,10,10,11,10,
10,10,10,11,10,13,10,11,10,11,10,10,10,10,10,14,14,14,6,2,4,9,12,9,12,9,11,12,11,11,
15,11,11,8,8,9,12,12,8,9,11,9,8,8,8,12,8,14,14,14,5,10,10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,11,12,10,8,10,
14,13,2,11,6,7,6,3,11,3,6,12,7,7,4,12,13,4,4,7,6,7,11,11,11,11,14,14,13,13,
13,14,10,13,14,14,13,13,14,14,13,13,10,13,15,15,14,14,14,7,13,15,15,14,14,14,10,12,12,12,
12,11,11,12,9,11,12,12,12,11,11,11,11,10,12,10,12,12,12,11,11,9,10,12,12,12,11,15,15,14,
 };
static unsigned short stb__courier_bold_18_latin1_s[224]={ 255,251,247,47,242,10,236,222,118,225,90,
245,210,199,195,194,210,117,135,32,200,230,239,171,162,1,252,1,6,226,26,
126,133,213,202,170,135,113,168,209,225,17,230,179,190,156,123,241,145,111,92,
12,103,32,80,68,57,46,37,112,103,76,183,228,180,201,64,242,87,13,86,
53,75,43,35,53,96,44,99,212,41,140,79,233,22,222,33,67,56,76,110,
123,93,97,237,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,255,155,248,
105,119,136,190,159,221,73,176,152,192,199,29,208,203,98,128,145,185,129,169,
176,190,162,215,134,41,52,85,65,1,129,99,57,179,13,158,89,152,162,69,
79,172,181,141,150,181,191,43,1,203,214,231,168,122,54,65,36,25,141,147,
235,1,245,224,1,159,203,1,96,12,22,214,19,190,145,107,115,108,125,180,
190,200,220,180,23,170,151,219,118,64,24,12,82, };
static unsigned short stb__courier_bold_18_latin1_t[224]={ 1,1,81,17,1,45,58,81,1,1,81,
58,81,88,88,1,32,45,45,32,45,32,32,32,32,45,45,70,70,81,70,
45,17,58,58,45,70,70,70,45,58,70,45,70,70,70,70,45,70,17,70,
58,70,58,70,70,70,70,70,1,1,1,81,88,88,70,32,70,32,81,58,
32,58,58,1,58,58,81,81,70,32,32,81,70,58,70,81,81,81,32,81,
1,1,1,81,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,
58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,1,45,32,
58,81,58,1,17,88,45,81,81,81,88,45,88,81,32,81,81,88,32,17,
88,88,81,81,81,45,45,45,45,17,1,17,17,17,17,58,17,1,1,17,
17,1,1,17,17,58,17,1,1,1,1,1,81,17,1,1,17,17,1,58,
17,32,17,17,58,45,17,81,45,32,32,17,45,45,45,45,58,32,58,32,
32,32,45,45,81,58,32,32,32,58,1,1,1, };
static unsigned short stb__courier_bold_18_latin1_a[224]={ 153,153,153,153,153,153,153,153,
153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,
153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,
153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,
153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,
153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,
153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,
153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,
153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,
153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,
153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,
153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,
153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,
153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,
153,153,153,153,153,153,153,153, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_18_latin1_BITMAP_HEIGHT or STB_FONT_courier_bold_18_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_18_latin1(stb_fontchar font[STB_FONT_courier_bold_18_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_18_latin1_BITMAP_HEIGHT][STB_FONT_courier_bold_18_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_18_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_18_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_18_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_18_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_18_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_18_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_18_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_18_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_18_latin1_s[i] + stb__courier_bold_18_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_18_latin1_t[i] + stb__courier_bold_18_latin1_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_18_latin1_x[i];
            font[i].y0 = stb__courier_bold_18_latin1_y[i];
            font[i].x1 = stb__courier_bold_18_latin1_x[i] + stb__courier_bold_18_latin1_w[i];
            font[i].y1 = stb__courier_bold_18_latin1_y[i] + stb__courier_bold_18_latin1_h[i];
            font[i].advance_int = (stb__courier_bold_18_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_18_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_18_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_18_latin1_s[i] + stb__courier_bold_18_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_18_latin1_t[i] + stb__courier_bold_18_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_18_latin1_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_18_latin1_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_18_latin1_x[i] + stb__courier_bold_18_latin1_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_18_latin1_y[i] + stb__courier_bold_18_latin1_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_18_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_18_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_18_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_18_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_18_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_18_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_18_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_18_latin1_LINE_SPACING
#endif

