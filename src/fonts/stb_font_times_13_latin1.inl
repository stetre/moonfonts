// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_13_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_13_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_13_latin1_BITMAP_WIDTH         256
#define STB_FONT_times_13_latin1_BITMAP_HEIGHT         60
#define STB_FONT_times_13_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_times_13_latin1_FIRST_CHAR            32
#define STB_FONT_times_13_latin1_NUM_CHARS            224

#define STB_FONT_times_13_latin1_LINE_SPACING           8

static unsigned int stb__times_13_latin1_pixels[]={
    0x40000080,0x50008801,0x02004001,0x00660054,0x4000002a,0x065ee441,
    0x1b2a1551,0x00220054,0x0cc057b3,0x20180a20,0x39f02aa9,0x022140a2,
    0xb300decc,0x2a053530,0x06a81980,0x2e036044,0x006e403c,0x3282a02c,
    0x20160503,0x803a8048,0x2019999a,0x147ff428,0x20d0a62e,0x201dc805,
    0x02c40570,0x41e54072,0x21a1a23b,0xb911cc1c,0x15015c20,0x2a051510,
    0x06881503,0x03080066,0x04401844,0x21228910,0x03000882,0x10170060,
    0xff819103,0x682cc28f,0x18440088,0x100aea60,0x40c60180,0x41a1640f,
    0x2a0820c1,0x998f221e,0x44266110,0x222c0300,0x1305828e,0x66443366,
    0x3015d4c0,0x51660575,0x66cca074,0x36619910,0x9819910c,0x4c1702ba,
    0x6c9b8529,0x26147fec,0x1c4340ec,0x47901c40,0x5566cc68,0xb559b31d,
    0x36ab3663,0x68b50d51,0xcd8866c4,0xec819b10,0x2e7986a0,0x4405cf30,
    0xbe883a03,0x3a21626c,0xc8350ba0,0x88f21a23,0x0b144886,0xd06a1745,
    0x11e41a85,0xacc6470d,0x540cc642,0x45a9c28c,0x6b806b86,0x42d81f30,
    0x187b0c3d,0x21ae30f6,0x21e4346a,0x65c1e43c,0x0e5b0665,0x035c0e5b,
    0x23d3443b,0x0f41b04a,0x6c0f9866,0x85b03e62,0x0833140a,0x1e83307a,
    0xd81f30cc,0x3a95ca62,0x2a016c45,0x86892c28,0x175c02eb,0x322dc35c,
    0x20479023,0x40f9823c,0x21e4344c,0xd9c1e43c,0x28d98334,0xeb8146cc,
    0x93445b02,0xd06c12e5,0x21ae1983,0x96e1ae5b,0x80542828,0x07a0cc1e,
    0x2dc35c33,0x851d9a15,0x0a2a033f,0x546853b5,0x2a2a05a8,0x46a86a85,
    0x6643a9cc,0x54e643a9,0xd07a16c3,0x643c8790,0x335d1383,0x41760bb0,
    0x41b05a8a,0xb0599668,0xa8660f41,0x21aa6a86,0x48a1c46a,0x83307a28,
    0x0d50cc1e,0x9b44c4d5,0x1dfb8136,0x0d505150,0x1c03e38d,0x640f881f,
    0x21cce643,0x664399cc,0x56644399,0x43c8680c,0x31c1e43c,0x2073037f,
    0x407c7039,0x21557c45,0x216c1b06,0x7903e20a,0x30f207c4,0xd8a1a28b,
    0x50b60542,0x0f207c41,0x4cd65327,0x0a2a00a0,0x5ccd0aa3,0xab984daa,
    0x742d84da,0x3c811e40,0xa8047902,0x8790d03f,0x21c1e43c,0x500a81fa,
    0x9b557301,0x70344298,0x1c3c8b01,0x5b03a16c,0x8a24c0e8,0x3879140d,
    0x16c1c3c8,0x2203503a,0x14540142,0x34c42a6a,0x21c0f887,0x55d440f8,
    0x9143c80b,0x050f2287,0x13d02f22,0x790f21e4,0x50dc1e98,0x20775077,
    0x81887c43,0x9151c068,0x103757b0,0x51017575,0x50e01757,0x2af6141c,
    0x3757b01b,0x01757510,0x014c42aa,0x98103180,0x7cc1d52a,0x7cc1d50d,
    0x3a20100d,0xbd12caad,0x37a25955,0x41802caa,0x21bd11aa,0x1bd10de8,
    0x26053000,0x7cc1d502,0x0397008d,0x00805308,0x20020010,0x10180460,
    0x00400200,0x00001a98,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x16b00660,0x40cbaba8,0x100039b9,0x00800000,
    0x0200e6e6,0x04003232,0x6cc2aaa8,0x14c0082b,0x8b831990,0xe883b80b,
    0x89d09702,0x83440068,0x40cc1a9a,0x8701aaa9,0x320543b9,0x03600540,
    0x225c0a50,0x80c4c40c,0x5e542bba,0x29bb9983,0x2a60d5cc,0x80313102,
    0x2a052879,0x4c4c1aa0,0x0382b840,0x544404d4,0x07039c0c,0x8a83814a,
    0x5dc0c40a,0xa8a81985,0xaa8f2320,0x0c8188aa,0x19051144,0x980c014c,
    0x219910cd,0x54c08878,0x9134b02b,0x7cc570e5,0x54c25d40,0x3c00e202,
    0x83b559b3,0xcd883443,0x80503880,0x202a2049,0x80a880a8,0x301300a8,
    0x13a81301,0x41300a88,0x26621139,0x8081368c,0x70640e5a,0x6c433aa0,
    0xa86a1743,0x1a23c806,0x27d32c5a,0x216ee340,0x005442d9,0x479980d7,
    0x88510c3d,0x2e079036,0x35c05106,0xa441d488,0x1075220e,0x591703a9,
    0x9171645c,0x9102f225,0x2591703a,0xb193283b,0x27130a14,0x02a1900a,
    0x0f4246b8,0x4c05b866,0x23a16c0f,0x2a0fdc2e,0x191ea2e5,0x00ea44f7,
    0x263205d7,0x0a811e47,0x3236d744,0x0e05d703,0x89882eb8,0x8762621d,
    0x2621d898,0x2eb261d8,0x26975934,0x17914bac,0x261d8988,0x21d34bac,
    0x28372651,0x8a21106a,0x5c5444c5,0x202a5d04,0x0f10cc1e,0x345b86b8,
    0x2a2fb83d,0x499ea356,0x0ec4c47a,0x24c2d454,0x43a9cc8f,0xc87a6883,
    0x505a8a83,0x20b51501,0x64dc1c9b,0x2e0e4dc1,0x2e0ee1c9,0x05703b83,
    0x03b8726e,0x26261bf9,0x1a21358c,0x4382d470,0x039f980b,0x1741983d,
    0x35435422,0x74542c9a,0x25b8a7e0,0xc9b8b63b,0x7703e381,0x8e67323c,
    0x8b268828,0x203e383c,0x703e3828,0x393b8727,0x4ee1c9dc,0x9943a61c,
    0x143a650e,0x87277057,0x40c850e9,0x545533aa,0x350a8934,0x0a20a81b,
    0x50b606c8,0x1aacd881,0xe87903e2,0x25151c88,0x43b1320d,0xc9dc3659,
    0x26d55cc1,0x11e479a6,0x8b344054,0x6d55cc3c,0xaab98704,0x1edf4c4d,
    0x74c7b7d3,0x36fa63db,0xf906fe43,0x706fe41b,0x87b7d305,0x40dc0dfc,
    0xb442a9aa,0xd988e228,0x1ad88a20,0x21e40b50,0x16c0aa03,0x3bae983a,
    0x970eb326,0x57903537,0x21edf4c5,0x37207c43,0x250f22fb,0x8555b103,
    0x03e21c3c,0x07c4382a,0x00000000,0x06ec4000,0x08010000,0x20106a20,
    0x806620c0,0x5d5ec05a,0x54412601,0x28000bab,0x40000080,0x037e60ea,
    0xaade8821,0x8808012c,0x4c1d50de,0x83aa00df,0x00000df9,0x00000000,
    0x00000000,0x80000000,0x00801ec8,0x00010018,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x540c8000,0x54057900,0x910f543a,0x20575307,0x10040ab8,0x2066d404,
    0x415705ed,0x2aa1eeed,0x205d441a,0x5541c0bb,0xba80740b,0x554c0cba,
    0x9979501a,0x1760b303,0x866cc0cc,0x832e0cda,0x406619da,0x223d73ea,
    0x206a6a3c,0x1d0ae153,0x28832790,0xa4412570,0x06a0ec82,0x8b434479,
    0x36681aa4,0x3516ca20,0x4c0d8813,0x4b24599a,0x555cb158,0x2e5502e3,
    0x225c1444,0x2a622a0c,0x5506541a,0x06626050,0x85b076eb,0x2620d44c,
    0x20d86a1c,0x4c383e2d,0x64738199,0x191c1444,0x0559901c,0x25cb812a,
    0x5b03e619,0x2068d2cc,0xb05c0366,0x12007605,0xb254911d,0x0cd26ae1,
    0x04c4a8c4,0x4c4221e2,0x2213711a,0x0098080f,0x0d168813,0x81c7985b,
    0x96a00409,0x50260e3d,0x4ee3b597,0x90983109,0x1fa806a1,0x0b7221bb,
    0x5c334d9c,0xd92e5b86,0xd9a055a1,0x7e544a80,0x40b67e21,0x2627542a,
    0x8ddc4766,0x2320d803,0x2501aa4a,0x311aa505,0x644a8c83,0x154f44a8,
    0x2896c16c,0x8264a8c8,0x36d87c09,0x224a8c83,0x2550c99b,0x874cf168,
    0x55162889,0x3b71129b,0x0cd744e0,0x25cd50d5,0x22dd7c5b,0x9b301d0e,
    0xf8a54950,0x2fb98480,0x4223ce6c,0x43305533,0x02dc3e3a,0x0d72834a,
    0x21f1d49d,0x09b83e3a,0x0ed505b0,0x2350f8ea,0x455ec0e9,0x1f1d439f,
    0x446a289c,0x2381b1e6,0x5fc5665a,0x98e04981,0x903e21bf,0x343d2cc7,
    0x04ccde8f,0x249960d1,0x9ac4482d,0x3305a886,0xb8307236,0x203c4b64,
    0x13111c89,0x4b8f21e2,0x45b25cb6,0x16c0ceee,0x24b839e8,0x206c572d,
    0xb87993da,0x6e6dcb64,0x79a2132c,0x26a3306c,0x87dcd70d,0x0e0c7710,
    0x742d83f5,0x1e68d340,0x10710019,0x53036587,0x06c12588,0x020e5a38,
    0x85d06cd3,0x2854ca08,0x698f226c,0x21b34c36,0x6c253128,0xd301d701,
    0x0363c86c,0x260fccbe,0x80738366,0x11c1b1e6,0x337a21b3,0x7751dfba,
    0x20f4c1df,0x5d5d441b,0x341ba880,0x3b502c4f,0x541df4c3,0x5704819b,
    0x700b9853,0xb87859b8,0x566c42ac,0x2a9aa81a,0x83b53990,0x565c2acb,
    0x42a672e2,0x816203cc,0xd9322acb,0x5c160c80,0x21c662ac,0x47eb763c,
    0x202012e8,0x00000000,0x33f30001,0x00000c3f,0x02000400,0x00006020,
    0x40020020,0x4c000008,0x0080081b,0x05d10980,0x02080010,0x00000420,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x42660000,0x4b2eea08,0x19910cd9,0x20bb04a8,0x1a9a8289,
    0x0d440080,0x9850676a,0x4c0acbdd,0xdda800cd,0x436e2baa,0x34c7d12c,
    0x26621717,0x79b30999,0x10cd8859,0xc866cc59,0x80675c0c,0x07b30c2b,
    0x40e207d1,0x57b01cd9,0x433aa5b5,0x4bb663d8,0x98d443d8,0x8a6582e7,
    0x81c0d42e,0x5f5c1989,0x10cccc6c,0x3703541d,0x21c988f3,0xb896c1e9,
    0x98016c0e,0x1c3a0c6b,0x270a82a5,0x2d82010b,0x3c8790f6,0x1884896c,
    0xd85b3099,0x03ee1f20,0x207b035c,0x8d71aa18,0x8712f884,0x1cb648a8,
    0x83d0c3f1,0x30c42619,0x74d10621,0x1d062131,0x23c73068,0x20f4c131,
    0x3362742c,0x9a6e01db,0x4c28bb80,0x041304c0,0x45b8b208,0x2b61dc3c,
    0xb8688048,0x11edc02b,0x0bae01f7,0x07c401e4,0xd300a974,0x411b3071,
    0x27e428d9,0x688660f4,0x478b44f1,0x8b44b268,0x4c5a06c7,0x5f53c770,
    0x675468d7,0x52d8d71a,0x27a6660d,0x4c3e884a,0x74c3a60e,0x37904020,
    0x5c3c83d5,0xa80266c3,0x5c02b9c3,0x203e2e69,0x07905a8a,0x27e607d0,
    0xa8076403,0xe982ec1f,0x43307a1e,0x1e689e68,0x3cd12cd1,0xa8aad036,
    0x1a3cd1e5,0x1aa137b1,0x5641ea5b,0x554399eb,0xb0362ade,0x820106c1,
    0x642ea9bc,0x3f361dc3,0xb8cc4802,0x272e9c02,0x203e380f,0x202dc03c,
    0x82ea806c,0x04398d11,0x0542d972,0x3cd13cd1,0x688aabe2,0x1ae81b1e,
    0xf347bed8,0x1ec2c868,0x260fa6f6,0x6d540d31,0x1b0362ac,0xc820106c,
    0xb8791e62,0x017cd6c3,0xeeeed817,0xea9c3f12,0xab981f0a,0x203c84da,
    0x02d400f9,0x9503e6a6,0x1440a873,0x20e1e4b3,0x223cd1e6,0x06c79a06,
    0x47840b7e,0x2d87d1e6,0x137b03e6,0x414698e0,0x06c0d82c,0x3608041b,
    0xb8791ea2,0x82f996c3,0x10ae020b,0x07c9d1c5,0x3c81f10e,0xa8285d14,
    0x05c8e205,0x6c41dd41,0x55ec1cab,0x1fadd81b,0x6887eb76,0xd87eb760,
    0xf00f4740,0x00fcc7d4,0x81b97bd3,0x29900de9,0x44caafc8,0x8ba20dd8,
    0x4c5d12e8,0xd3199999,0x7443b95b,0x2619b10d,0x219fb0de,0x5707eeeb,
    0x8d47a618,0x983aa3fa,0x77dd30df,0x2aabb25b,0x40f6444d,0x033ee2ea,
    0x40080298,0x10808400,0x04201cb8,0x54fcc5d1,0x002ca81f,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x219b3000,0x2b3663ea,0x97bb31da,0x666e65c1,0x1797bb34,0x40cbdd98,
    0x985bacd9,0x44cc4cc0,0x220cc098,0x1984cc0a,0x02606633,0x20208c66,
    0x080a88a8,0x14060a02,0x54618c00,0x88998330,0x2a000001,0x8c333310,
    0x2098c32a,0x4c0b800a,0x03e16c3b,0x5cb6187b,0x6c50f8a6,0x2d81d712,
    0x2145b0f5,0x4da64a8c,0x25919126,0x53c41d48,0x2e3c5a21,0x9a6322c8,
    0xea4c1728,0x0b94468b,0x0280c828,0x4f546a17,0x55d55f54,0x1557441d,
    0x02b881c4,0x44d41751,0x9627624c,0x5d45bafa,0x90875101,0x3207c2d8,
    0x1e65b023,0x3a16407c,0x40f89644,0x3a3a812d,0x0c47c360,0x44c42273,
    0x3429641d,0xa9dd5ccf,0x44e41d54,0x2afa2225,0x111d561c,0x22201171,
    0x1bb808b8,0x0e4d3434,0x11110ba6,0x25bbd811,0x1a600ab8,0x3cd0c415,
    0x199c2b98,0x266f60cc,0x54e640f9,0xf04c96c3,0x46b85901,0xbd84d9ac,
    0x45925c49,0x5c2baaba,0x98393703,0x5cf3418d,0x2c8abb83,0xb370ed6a,
    0x987a9503,0x980aacaa,0x540aacaa,0x4d34340c,0x54c4d81c,0x32a0aaaa,
    0x8806e61c,0x6862140e,0x150ba81a,0x6c15751c,0x640f999b,0x566c399c,
    0x0b203e01,0x04dcc8d5,0x2598737b,0x42e9740d,0x64ee30e9,0x9e683e81,
    0x47a630e8,0xb8e6360d,0x8c822793,0x14005048,0x434171a8,0x2a0e43a6,
    0x702881d8,0x05730735,0x9138825b,0x17711a68,0xb0662008,0x11e40f85,
    0x80f802d8,0x2b21ec2c,0x202d81e8,0x90c82acb,0x261bf901,0x82a83cbe,
    0x3f21facd,0x4557b30d,0xabe98709,0x033384ee,0x26661d05,0x2102099c,
    0x227e61f9,0x52a3e8af,0x260181fa,0xeb85c400,0x2ae6a4aa,0x3f33f529,
    0xb00000aa,0x21e40f85,0x03e00b62,0x6c0f98b6,0x02d81d32,0x00000000,
    0x04200080,0x00020400,0x26662004,0x00000019,0x00000000,0x00000000,
    0xf50de980,0x6556f447,0x5401bd32,0x656f4c3f,0xb86f4c0d,0x001bd32e,
    0x00000000,0x00000000,0x80000000,0xac4323b9,0x2220ddc5,0x40e66088,
    0x000e6a3a,0x51621d00,0x4110ccd4,0x00111cb8,0x00000000,0x00000000,
    0x00000000,0x00000000,0x20000000,0x6ac42e28,0x55551c26,0x995d6155,
    0x32cc4752,0x2aaaaa1f,0x2a311e2a,0x23333240,0x64c32eea,0x00000002,
    0x00000000,0x00000000,0x00000000,0x00000000,0x20b96600,0x22394494,
    0x37099999,0xb0cd2215,0x140098b1,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x105c7130,0x4cc17302,0x82609999,
    0x44535040,0x20000801,0x2e3bbbbb,0x0003bbbb,0x00000000,0x00000000,
    0x00000000,0x00000000,0x20000000,0x00004c08,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_13_latin1_x[224]={ 0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,
-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,
0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,1,0,-1,0,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,
 };
static signed short stb__times_13_latin1_y[224]={ 10,2,2,2,1,2,2,2,1,1,1,3,8,6,
8,1,2,2,2,2,2,2,2,2,2,2,4,4,3,4,3,2,1,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,12,2,4,1,4,1,4,1,4,1,1,
1,1,1,4,4,4,4,4,4,4,3,4,4,4,4,4,4,1,1,1,6,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,10,4,2,2,3,2,
1,2,2,2,2,4,4,6,2,1,2,3,2,2,2,4,2,5,9,2,2,4,2,2,2,4,-1,-1,-1,0,
0,0,2,2,-1,-1,-1,0,-1,-1,-1,0,2,0,-1,-1,-1,0,0,3,1,-1,-1,-1,0,-1,2,1,2,2,
2,2,2,1,4,4,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,3,4,2,2,2,2,2,1,2,
 };
static unsigned short stb__times_13_latin1_w[224]={ 0,2,5,6,6,10,9,2,4,4,6,7,3,4,
3,4,6,4,6,5,6,6,6,6,6,6,2,3,7,7,7,5,11,9,8,8,9,7,7,9,9,4,5,9,
7,11,10,9,7,9,8,6,7,9,9,11,9,9,7,4,4,3,6,7,3,6,7,5,6,5,6,6,6,3,
4,6,4,10,6,6,7,6,4,5,4,6,6,9,6,6,6,4,2,4,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,2,6,6,6,6,
2,5,4,9,5,6,7,4,9,7,5,7,4,3,3,7,7,3,2,3,4,6,9,9,9,5,9,9,9,9,
9,9,12,8,7,7,7,7,4,4,4,4,9,10,9,9,9,9,9,6,9,9,9,9,9,9,7,6,6,6,
6,6,6,6,8,5,5,5,5,5,3,3,4,4,6,6,6,6,6,6,6,7,6,6,6,6,6,6,7,6,
 };
static unsigned short stb__times_13_latin1_h[224]={ 0,9,4,9,10,9,9,4,12,12,6,7,4,2,
3,10,9,8,8,9,8,9,9,9,9,9,7,8,6,4,6,9,12,8,8,9,8,8,8,9,8,8,9,8,
8,8,9,9,8,11,8,9,8,9,9,9,8,8,8,11,10,11,5,1,3,7,10,7,10,7,9,9,9,9,
12,9,9,6,6,7,9,9,6,7,8,7,7,7,6,9,6,12,12,12,2,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,11,9,6,8,
12,11,2,9,4,7,4,2,9,1,4,7,5,5,3,9,11,2,4,5,4,7,9,9,9,9,11,11,11,10,
10,10,8,11,11,11,11,10,11,11,11,10,8,11,12,12,12,11,11,6,10,12,12,12,11,11,8,10,9,9,
9,9,9,10,7,9,9,9,9,9,8,8,8,8,10,8,9,9,9,9,9,6,7,9,9,9,9,11,12,11,
 };
static unsigned short stb__times_13_latin1_s[224]={ 112,242,169,235,47,112,11,197,14,1,199,
142,206,239,218,103,49,159,174,71,181,77,84,91,98,105,150,188,206,181,235,
123,100,204,145,136,35,11,54,155,1,154,186,164,214,192,28,39,19,191,45,
8,27,15,192,216,240,230,222,201,131,133,243,238,222,85,108,79,88,106,192,
179,56,212,19,59,54,173,228,62,39,66,168,250,80,99,92,69,184,1,214,
54,59,62,244,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,112,209,112,
21,221,116,67,127,234,145,200,135,210,239,218,230,175,153,250,161,226,63,119,
230,194,165,189,119,1,244,234,228,246,137,147,121,78,136,103,21,167,175,183,
95,206,211,216,116,85,221,90,44,34,157,30,161,54,80,70,24,11,1,95,
40,199,160,167,146,153,71,126,212,186,174,180,206,128,252,123,132,64,73,129,
165,172,202,228,191,112,245,25,32,47,232,6,239, };
static unsigned short stb__times_13_latin1_t[224]={ 13,26,53,26,14,26,26,53,1,1,46,
46,53,53,53,14,26,36,36,26,36,26,26,26,26,26,46,36,46,53,46,
26,1,36,36,26,46,46,46,26,46,36,26,36,36,36,26,26,46,1,46,
36,46,36,26,26,36,36,36,1,14,1,46,56,53,46,14,46,14,46,14,
26,26,26,1,36,36,46,46,46,36,36,46,36,36,46,46,46,46,36,46,
1,1,1,53,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,13,26,1,
26,46,36,1,1,53,26,53,46,53,53,14,56,53,46,46,53,53,26,1,
53,53,53,53,46,26,14,14,14,1,1,1,14,14,14,36,14,1,1,1,
14,1,1,1,14,36,1,1,1,1,1,14,46,14,1,1,1,14,14,36,
14,14,14,14,14,14,14,46,14,14,14,14,14,36,26,36,36,14,36,26,
26,26,26,26,46,46,26,36,36,36,1,1,1, };
static unsigned short stb__times_13_latin1_a[224]={ 47,63,77,94,94,156,146,34,
63,63,94,106,47,63,47,52,94,94,94,94,94,94,94,94,
94,94,52,52,106,106,106,83,173,136,125,125,136,115,104,136,
136,63,73,136,115,167,136,136,104,136,125,104,115,136,136,177,
136,136,115,63,52,63,88,94,63,83,94,83,94,83,63,94,
94,52,52,94,52,146,94,94,94,94,63,73,52,94,94,136,
94,94,83,90,38,90,102,146,146,146,146,146,146,146,146,146,
146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,
146,146,146,146,146,146,146,146,47,63,94,94,94,94,38,94,
63,143,52,94,106,63,143,94,75,103,56,56,63,108,85,47,
63,56,58,94,141,141,141,83,136,136,136,136,136,136,167,125,
115,115,115,115,63,63,63,63,136,136,136,136,136,136,136,106,
136,136,136,136,136,136,104,94,83,83,83,83,83,83,125,83,
83,83,83,83,52,52,52,52,94,94,94,94,94,94,94,103,
94,94,94,94,94,94,94,94, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_13_latin1_BITMAP_HEIGHT or STB_FONT_times_13_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_13_latin1(stb_fontchar font[STB_FONT_times_13_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_times_13_latin1_BITMAP_HEIGHT][STB_FONT_times_13_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_13_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_13_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_13_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_13_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_13_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_13_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_13_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__times_13_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__times_13_latin1_s[i] + stb__times_13_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__times_13_latin1_t[i] + stb__times_13_latin1_h[i]) * recip_height;
            font[i].x0 = stb__times_13_latin1_x[i];
            font[i].y0 = stb__times_13_latin1_y[i];
            font[i].x1 = stb__times_13_latin1_x[i] + stb__times_13_latin1_w[i];
            font[i].y1 = stb__times_13_latin1_y[i] + stb__times_13_latin1_h[i];
            font[i].advance_int = (stb__times_13_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__times_13_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_13_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_13_latin1_s[i] + stb__times_13_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_13_latin1_t[i] + stb__times_13_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_13_latin1_x[i] - 0.5f;
            font[i].y0f = stb__times_13_latin1_y[i] - 0.5f;
            font[i].x1f = stb__times_13_latin1_x[i] + stb__times_13_latin1_w[i] + 0.5f;
            font[i].y1f = stb__times_13_latin1_y[i] + stb__times_13_latin1_h[i] + 0.5f;
            font[i].advance = stb__times_13_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_13_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_13_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_13_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_13_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_13_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_13_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_13_latin1_LINE_SPACING
#endif

