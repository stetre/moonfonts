// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_6_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_6_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_6_usascii_BITMAP_WIDTH         128
#define STB_FONT_times_bold_6_usascii_BITMAP_HEIGHT         24
#define STB_FONT_times_bold_6_usascii_BITMAP_HEIGHT_POW2    32

#define STB_FONT_times_bold_6_usascii_FIRST_CHAR            32
#define STB_FONT_times_bold_6_usascii_NUM_CHARS             95

#define STB_FONT_times_bold_6_usascii_LINE_SPACING           4

static unsigned int stb__times_bold_6_usascii_pixels[]={
    0x30c30826,0x45431102,0x31a82660,0x884c6550,0x32a15519,0x884c4621,
    0x2a213319,0x330c3910,0x8226a6a3,0x998a219a,0x813302a2,0x118cc509,
    0x4cc4c667,0x2c6e1751,0x546e1193,0x9c6c2a12,0x2a33158c,0x2b21592b,
    0x46e63790,0x1ac8aa2b,0x8dc19573,0x046e7510,0x22c6e359,0x318c491a,
    0x5d5cce21,0xd8d1c920,0x109542e1,0x23ac9d5c,0x8ec46ee2,0x043b53c8,
    0x54ab6593,0x3b0f4f43,0x713b38d8,0x8d1cac64,0x118cc71a,0x55e4ca25,
    0x14d4c150,0x3911b86a,0x19488261,0x1aa86628,0x286ae517,0xb8d5c26a,
    0x730e2e2b,0x5cd2ae13,0x5cce6e49,0x5088dc2a,0x2219c461,0x00000110,
    0x40004200,0x04000000,0x88000000,0x0000041c,0x00000001,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x30329800,
    0x30c26305,0x22188a61,0x0b862aa3,0x43105451,0x4c326618,0xaa8caa2a,
    0xa8a65318,0x21884542,0x44535329,0x54c2aa62,0x640c5dc2,0x18cc220a,
    0x9c956c2a,0x04ecc2e2,0x55c6ea19,0x894e4191,0xd896aa4a,0x8e887a20,
    0x1750aa3b,0xba9d42b2,0x0ba8ae49,0x26a202ea,0x218b2aa2,0xca854319,
    0x88e473b2,0x5e4321e8,0xb8ee9371,0x1ba83a1a,0xa892a164,0x8e0aa39c,
    0x5654ea2b,0x22ca86a4,0x3b8981ca,0x261932ee,0x22885461,0x4a1350ab,
    0x56409719,0x25399004,0x22a3b83b,0x4957152d,0x750019cb,0x21b926ea,
    0x00d6543a,0x35035000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x20545550,0x450442aa,0x0330099a,
    0x50a84c26,0xba8c4c55,0x810a5319,0x324c5109,0x22861413,0x45353199,
    0x263530a9,0x5545530a,0x5543373a,0x2a28ee0d,0x321550db,0x20825512,
    0x2e37550c,0x5d419139,0x58322181,0x312c4322,0x15142ea3,0x1b9326e5,
    0x532c4eae,0x4ba55545,0x4d506654,0x2750ee0c,0x46a15549,0x9b2a190a,
    0xda8324bb,0x1db96545,0x08ecc516,0x56400221,0x564370cd,0x65c01594,
    0x65c9790c,0x064f250c,0x02230030,0x01dddc32,0x225dd439,0x73447221,
    0x0000003b,0x00000000,0x00000000,0x00000000,0x00000000,0x2b8e0000,
    0x4c2661c5,0x0000002a,0x00000000,0x00000000,0x00020000,0x00000266,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_bold_6_usascii_x[95]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, };
static signed short stb__times_bold_6_usascii_y[95]={ 4,0,0,0,0,0,0,0,0,0,0,0,3,2,
3,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,1,0,1,0,1,0,1,0,0,
0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,2, };
static unsigned short stb__times_bold_6_usascii_w[95]={ 0,2,3,3,3,6,5,2,2,2,3,3,2,2,
2,2,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,5,4,4,4,4,4,4,5,5,2,3,5,
4,6,4,5,4,5,4,3,4,4,4,6,4,4,4,2,2,2,3,4,2,3,3,3,3,3,3,3,3,2,
3,4,2,5,3,3,3,3,3,2,2,3,3,4,3,3,3,2,1,2,3, };
static unsigned short stb__times_bold_6_usascii_h[95]={ 0,5,3,5,5,5,5,3,6,6,3,4,2,2,
2,5,5,4,4,5,4,5,5,5,5,5,4,4,4,2,4,5,6,4,4,5,4,4,4,5,4,4,5,4,
4,4,5,5,4,5,4,5,4,5,5,5,4,4,4,5,5,5,3,2,2,4,5,4,5,4,4,5,4,4,
6,4,4,3,3,4,5,5,3,4,5,4,4,4,3,5,3,6,6,6,1, };
static unsigned short stb__times_bold_6_usascii_s[95]={ 127,48,100,63,67,1,8,97,5,16,93,
69,1,4,10,14,30,77,81,34,73,83,87,59,75,26,43,40,36,122,29,
79,19,16,11,102,1,121,116,111,106,103,43,63,90,83,38,29,68,121,49,
71,58,43,35,95,78,73,63,23,20,17,89,13,7,47,117,55,107,99,112,
91,51,21,1,6,46,104,114,59,55,51,110,33,40,54,95,24,85,25,118,
13,11,8,18, };
static unsigned short stb__times_bold_6_usascii_t[95]={ 1,1,14,1,1,8,8,14,1,1,14,
14,19,19,19,8,8,14,14,8,14,1,1,1,1,8,14,14,14,14,14,
1,1,14,14,1,14,8,8,1,8,8,8,14,8,8,8,1,8,1,14,
1,14,1,1,1,8,8,8,8,8,8,14,19,19,8,1,8,1,8,8,
1,8,14,1,14,14,14,14,8,1,1,14,14,1,14,8,14,14,1,14,
1,1,1,19, };
static unsigned short stb__times_bold_6_usascii_a[95]={ 22,29,48,43,43,87,72,24,
29,29,43,49,22,29,22,24,43,43,43,43,43,43,43,43,
43,43,29,29,49,49,49,43,81,63,58,63,63,58,53,67,
67,34,43,67,58,82,63,67,53,67,63,48,58,63,63,87,
63,63,58,29,24,29,50,43,29,43,48,38,48,38,29,43,
48,24,29,48,24,72,48,43,48,48,38,34,29,48,43,63,
43,43,38,34,19,34,45, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_6_usascii_BITMAP_HEIGHT or STB_FONT_times_bold_6_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_6_usascii(stb_fontchar font[STB_FONT_times_bold_6_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_6_usascii_BITMAP_HEIGHT][STB_FONT_times_bold_6_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_6_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_6_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_6_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_6_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_6_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_6_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_6_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_6_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_6_usascii_s[i] + stb__times_bold_6_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_6_usascii_t[i] + stb__times_bold_6_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_6_usascii_x[i];
            font[i].y0 = stb__times_bold_6_usascii_y[i];
            font[i].x1 = stb__times_bold_6_usascii_x[i] + stb__times_bold_6_usascii_w[i];
            font[i].y1 = stb__times_bold_6_usascii_y[i] + stb__times_bold_6_usascii_h[i];
            font[i].advance_int = (stb__times_bold_6_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_6_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_6_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_6_usascii_s[i] + stb__times_bold_6_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_6_usascii_t[i] + stb__times_bold_6_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_6_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_6_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_6_usascii_x[i] + stb__times_bold_6_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_6_usascii_y[i] + stb__times_bold_6_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_bold_6_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_6_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_6_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_6_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_6_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_6_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_6_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_6_usascii_LINE_SPACING
#endif

