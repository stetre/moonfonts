// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_13_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_13_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_13_usascii_BITMAP_WIDTH         128
#define STB_FONT_courier_bold_13_usascii_BITMAP_HEIGHT         56
#define STB_FONT_courier_bold_13_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_bold_13_usascii_FIRST_CHAR            32
#define STB_FONT_courier_bold_13_usascii_NUM_CHARS             95

#define STB_FONT_courier_bold_13_usascii_LINE_SPACING           6

static unsigned int stb__courier_bold_13_usascii_pixels[]={
    0x10000088,0x03232040,0x44221a01,0x03310cc0,0x00c02a00,0x266202a2,
    0x20041409,0x7c4d81a8,0x13a69800,0x43d3f1b6,0x16fec478,0xef896e7d,
    0xafe4fd51,0x3fba64fe,0x1ffbfee0,0xec85fdf9,0xb87ee2ee,0x1ddf505c,
    0x7b009900,0xf11e23c4,0x323c43f5,0x21f34c9d,0xf10f11f8,0x3c8d52f8,
    0x7dc7e299,0x645a84c0,0xbac3f703,0x7f417cc1,0x803e21ff,0xf11e20f9,
    0x10ffffe8,0x26c2dc8f,0x3c43c532,0x43e175ae,0x07c4b769,0x3b2275c4,
    0xa83ea0ce,0x2f2e39cd,0x09b07a02,0xa87e2264,0x223c7c47,0xe97f5c47,
    0x8878b5c2,0x0f86de87,0x36afe2f3,0x42fd980f,0x1e64c9ba,0x7ec17b93,
    0x983d04ed,0xf80f880f,0xefd89b64,0x5471e24f,0xf16a85d6,0x05f70f10,
    0xec996a3f,0x81ea00fc,0xb3716278,0x0f8ae43b,0xc83d81e8,0x23c47884,
    0x1e21fcfb,0x0f69d7bf,0x1e21e2b7,0x6c6641ae,0x54303e03,0x02dc4a27,
    0x23aa4954,0xf303d079,0x47881f88,0x23575478,0x71fe5c78,0x10f13e8d,
    0x4077f5cf,0xfb304fe8,0x17fff44b,0x68877ff6,0x7ec2dd88,0x3a03f03f,
    0x235c16e2,0x16b6a2f8,0xf88f10f1,0x2be21f51,0x554cf710,0x55100402,
    0x20100205,0x64040200,0xf9aa05ee,0x09503b01,0x2a8182c0,0xa8f74455,
    0x0000006e,0x00000000,0x41003530,0x00000001,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x20180000,0x400cc0a8,
    0x0540300a,0x8804cccc,0x00bec881,0x22018826,0x80662009,0xc8804405,
    0x7f7fc0be,0x0ff7d43f,0x75ecc0fd,0x57ffff20,0x3e21fee9,0x1fb06eee,
    0x985d9ce8,0x03f93fff,0x7ec80fea,0x06b803e0,0xf88db39d,0x4ba0e88c,
    0x640de25b,0x223a6570,0x235cf26d,0x3e261322,0xc83d1660,0x90133d03,
    0xf8878807,0x26007fff,0x41f10f45,0x936b763d,0x5a3efef8,0x354973ec,
    0x1e81ee79,0xc83fbfee,0xffff1e43,0x42fffe8d,0x7887fcbc,0x3fec03e0,
    0xf89321e4,0x7fd47bad,0x7cd3e21f,0x267593d0,0x3e66d89f,0x27980ffc,
    0x20fc89f9,0x0f61745b,0x6e45a9f4,0x7c0f103f,0x16a1e200,0x6767c45d,
    0x226b9fc1,0x7474f60f,0x1bbfee3c,0x9320f993,0xf983e24b,0x03d87b8a,
    0xdf91a63d,0x1f81e201,0x5d078833,0x40788f71,0x9fccd72f,0x3731d0f9,
    0xea84b510,0x474c3d04,0x7fcc0fc8,0x40dec41d,0xcbd8d52e,0x04fcc41e,
    0x3117ffdc,0xdfd9813f,0xa80efec1,0x3ffe1fff,0x044ee3ef,0x7e45fdb3,
    0xf70d103e,0xff98dfdf,0x3fffe3cc,0x9ffdff25,0x13ff8bfb,0x040fffff,
    0x41ffffe2,0x80155500,0xdec80400,0x0202aa20,0x65401000,0x00000bca,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x4067ed40,
    0x2a030018,0x1bd90dee,0x881987db,0x3220ddfd,0xeeeb84df,0x77542985,
    0x53b61eee,0x4fb625ed,0x37bae5ec,0x6cef5c0b,0x264e742e,0x6cbb07f4,
    0xfa9ce87f,0x87ea5f52,0x33e21fec,0x27362fb9,0x1dda887c,0xdb8ff7e4,
    0x3722eafa,0x7dc3d989,0x5fcc5f30,0x45fcc5da,0x8d50c0de,0xa8660fea,
    0x4262d479,0x03f1e278,0x8be0b8b7,0x43e12e03,0x36f1775b,0x367eb6e2,
    0xd0d51f82,0x3aba1e63,0xf117ec04,0x478801f5,0x2213313c,0x86bd1e27,
    0x6ff5403c,0xd8097041,0x7540bc44,0x4c81ebfc,0x7fddd07b,0xe803ffd0,
    0x320fae40,0x5d323c40,0x3c4f14fe,0x2e1fbdd7,0x27b98405,0xed812e5a,
    0xff983c40,0x9f880feb,0x1fbbe80f,0x000faae8,0x4cffbbe2,0x57cc7885,
    0x5cfe2e88,0x993e7325,0xf31c88af,0x47543ea3,0x0ed883d8,0x6f880f98,
    0x827ec0ff,0x2e81f52e,0x81f30199,0x8392fbaa,0x3ee09f98,0x3fe60eff,
    0x3fffa60d,0x437ffaa0,0x222effe8,0xee884ffd,0x3ffee099,0x40f93f82,
    0x1ffc81fa,0x44ffe4f9,0x3e20105f,0xfffd015f,0x0040110d,0x00400801,
    0x7fffd402,0x00000006,0x00000000,0x00000000,0x00000000,0x00000000,
    0x3b620000,0x7776c1ce,0x3bb1bb34,0x9f6c476c,0x74eeeed9,0x75cddddd,
    0xeeed83de,0x82fbbae4,0x2e5d93eb,0x6ec5d93e,0x0144bd10,0x40077baa,
    0xfbaec80a,0x446bea61,0x7d41d73f,0x37223f55,0x57f35caa,0x7557ccf5,
    0x32755f44,0x744b957f,0x4fa21db4,0x5cff20dd,0x4077a63f,0xe9802fb8,
    0x0f25a80e,0x1a63d0f1,0x971e5df1,0x5cf45171,0x0f89e249,0x47a1ae36,
    0x07e7c47a,0xd703ebe6,0x3ee0bbed,0x4407880c,0x2faa03fd,0x743c41fc,
    0x4fc46fff,0x2ffdc78f,0x1e217ff4,0xe80f983d,0x2fb85fff,0xd9707f90,
    0x362059bb,0xf903c43f,0xccfa801b,0x9ae87881,0x7dcbc46b,0x5742d6dc,
    0xe8f10aac,0x3a24be21,0x3e22ea9a,0x707880ed,0x10595f79,0x278819f9,
    0x033f223a,0xf3100ea8,0x46a8f411,0x5c7f88f8,0xd115d00d,0x1b263e23,
    0xae8f319d,0x29d13d98,0xb80f985d,0x5c3d8a8c,0x11f300df,0x07fb3099,
    0xfd07fff1,0x23ff2bff,0x55ff63ff,0x90fffe67,0x323fffff,0x3e20dfff,
    0x3ff27fff,0x2bfb0dff,0x3ffee4fe,0x7ed3fe22,0xfb8076a7,0x2a04ffff,
    0x0000001e,0x00000000,0x00000000,0x00000000,0x00776c00,0x40088002,
    0x00402008,0x040a0098,0x10088402,0x88021022,0x08040808,0xf504fe98,
    0xb07cc5ff,0xfea81dff,0x3ffee0ff,0x1be67f62,0xf10bfff5,0x97fedfd0,
    0x40ffefff,0xf52ffcff,0xffe85ffd,0x7e4bfa6f,0x57c43c45,0x1f51f987,
    0x0f6a2214,0x7c43e25d,0x47a0fb89,0x1cce6c69,0xb72e83c4,0x3c9f8db8,
    0x3a089ef8,0xfb9d8b53,0x3e3e7a61,0xb933f360,0x745a85d5,0x93fbf602,
    0xfff70469,0x698f43ff,0xd517fe4c,0xb543ddfd,0x797a5c1f,0x4c7a03f0,
    0xdf81fa86,0x6ff4c7df,0x317fffa1,0x2183ea3f,0x2e89b16a,0x4c4fc46a,
    0x6c6b9742,0x7d544f50,0xb85de82a,0xf88791f5,0x8d31e809,0x7ec48afa,
    0x367c45fb,0x83f311f5,0x3e62fffa,0x5fdffd10,0x706fff54,0x7dc1dffd,
    0x3ffa3fef,0x2a07883e,0xcf9ff81f,0x3fffe67c,0x17f5fee3,0x6c8fffff,
    0x2272887d,0x20ffb4ff,0x80110100,0x01100400,0x001a0044,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x20010000,0xff71b801,
    0x7daa7fff,0x20540541,0x4d3bbb61,0x0ddddddd,0x00000000,0x2a000000,
    0xfb83ff6f,0x87c43e62,0x30999998,0xaeee83ab,0x8fcc7627,0x77119999,
    0x00177777,0x00000000,0xcfa80000,0x87dfcc2f,0xddb92a78,0x96912ddd,
    0x4105d728,0x00000000,0x00000000,0x09fb0000,0x2e69ae5d,0x2aaaaa60,
    0x00000420,0x00000000,0x00000000,0x27d76400,0x00004102,0x00000000,
    0x00000000,0x80000000,0x007ff6fc,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_bold_13_usascii_x[95]={ 0,2,1,0,0,0,1,2,3,1,0,0,2,1,
2,0,0,0,0,0,0,0,1,0,0,1,2,2,-1,0,0,1,1,-1,0,0,0,0,0,0,0,0,0,0,
0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,2,0,1,0,-1,2,0,-1,0,0,0,0,0,0,0,
0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,1,2,1,0, };
static signed short stb__courier_bold_13_usascii_y[95]={ 9,1,2,1,1,1,2,1,1,1,1,2,7,5,
7,0,1,1,1,1,1,1,1,1,1,1,3,3,2,4,2,2,1,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,1,1,11,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,2,3,3,3,3,3,3,1,1,1,4, };
static unsigned short stb__courier_bold_13_usascii_w[95]={ 0,3,5,7,6,7,6,3,3,3,6,7,3,5,
3,6,6,6,6,7,6,7,6,6,6,6,3,3,8,7,8,5,5,9,7,7,7,7,7,7,7,6,8,7,
7,9,8,7,7,7,8,7,7,7,9,9,7,7,7,4,6,4,6,9,3,7,8,7,8,7,7,7,7,7,
6,7,7,9,7,7,8,8,7,7,7,7,7,8,7,7,6,4,3,4,7, };
static unsigned short stb__courier_bold_13_usascii_h[95]={ 0,9,4,10,10,9,8,5,10,10,6,7,4,2,
3,11,9,8,8,9,8,9,9,9,9,9,7,8,7,4,7,8,9,7,7,8,7,7,7,8,7,7,8,7,
7,7,7,8,7,9,7,8,7,8,7,7,7,7,7,10,11,10,5,2,3,7,9,7,9,7,8,9,8,8,
11,8,8,6,6,7,9,9,6,7,8,7,6,6,6,9,6,10,10,10,3, };
static unsigned short stb__courier_bold_13_usascii_s[95]={ 69,109,32,32,44,113,41,16,51,55,121,
63,20,54,50,15,77,18,73,93,7,101,121,47,10,40,19,14,116,24,99,
1,26,1,65,48,49,41,33,25,16,9,64,117,108,89,24,119,1,63,108,
56,80,33,98,88,73,81,57,59,8,64,9,60,46,23,17,31,54,39,71,
32,79,111,1,87,95,79,97,11,1,84,89,55,103,47,71,112,1,69,105,
27,40,22,38, };
static unsigned short stb__courier_bold_13_usascii_t[95]={ 11,1,48,1,1,1,23,48,1,1,40,
40,48,48,48,1,1,23,23,1,23,1,1,13,13,13,40,23,32,48,32,
23,13,40,32,23,32,32,32,23,32,32,23,23,32,32,32,13,32,13,23,
23,23,23,23,23,32,32,32,1,1,1,48,48,48,40,13,40,13,40,13,
13,13,13,1,13,13,40,40,40,13,1,40,40,13,40,40,40,48,1,40,
1,1,1,48, };
static unsigned short stb__courier_bold_13_usascii_a[95]={ 110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_13_usascii_BITMAP_HEIGHT or STB_FONT_courier_bold_13_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_13_usascii(stb_fontchar font[STB_FONT_courier_bold_13_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_13_usascii_BITMAP_HEIGHT][STB_FONT_courier_bold_13_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_13_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_13_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_13_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_13_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_13_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_13_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_13_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_13_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_13_usascii_s[i] + stb__courier_bold_13_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_13_usascii_t[i] + stb__courier_bold_13_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_13_usascii_x[i];
            font[i].y0 = stb__courier_bold_13_usascii_y[i];
            font[i].x1 = stb__courier_bold_13_usascii_x[i] + stb__courier_bold_13_usascii_w[i];
            font[i].y1 = stb__courier_bold_13_usascii_y[i] + stb__courier_bold_13_usascii_h[i];
            font[i].advance_int = (stb__courier_bold_13_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_13_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_13_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_13_usascii_s[i] + stb__courier_bold_13_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_13_usascii_t[i] + stb__courier_bold_13_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_13_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_13_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_13_usascii_x[i] + stb__courier_bold_13_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_13_usascii_y[i] + stb__courier_bold_13_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_13_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_13_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_13_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_13_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_13_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_13_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_13_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_13_usascii_LINE_SPACING
#endif

