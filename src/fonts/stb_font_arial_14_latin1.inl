// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_14_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_14_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_14_latin1_BITMAP_WIDTH         256
#define STB_FONT_arial_14_latin1_BITMAP_HEIGHT         70
#define STB_FONT_arial_14_latin1_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_14_latin1_FIRST_CHAR            32
#define STB_FONT_arial_14_latin1_NUM_CHARS            224

#define STB_FONT_arial_14_latin1_LINE_SPACING           9

static unsigned int stb__arial_14_latin1_pixels[]={
    0x41000200,0x00010000,0x10080180,0x20040001,0x800c0008,0x10098008,
    0x9827ec0f,0x13000602,0x08800980,0x03ff1688,0x20620022,0x25fffeb8,
    0x08848818,0x161a72e0,0x0e8742e8,0x3a037ba6,0xdeeeb986,0x5026ec02,
    0xda80f605,0x03f20cff,0x6a8007c4,0x400ee980,0xb80f105b,0x26401904,
    0x5c00e980,0x4407c405,0x77440f12,0x321ef401,0x1e468bff,0xf88bbbae,
    0x04221d30,0x741c41d4,0x4b96c1d0,0x0574c2d4,0x54a207b1,0x50140b00,
    0x7917223d,0x0a800cc0,0x80199a80,0x0593f102,0x806ca897,0x20013002,
    0x2880c402,0x0c4cc0f1,0xfe851510,0x221468bf,0x5198d396,0x4d050663,
    0x3a1d1419,0x44a81360,0x151750e8,0x3c40f85b,0x7881f0ee,0x770640fc,
    0x03bffd50,0x4077ffaa,0xf81dffea,0x5df13c40,0x3724b8bb,0x01b606ea,
    0xffff036c,0x7fffc7ff,0x3c5a23ff,0xfff81b60,0x7ff93fff,0x5a62e8d1,
    0x542a5d04,0x54b61665,0x1d0e9665,0x254077dc,0x7ed66c76,0x2207c498,
    0x103e0747,0x4a803c4f,0x7dc45f54,0x5c45f540,0x445f540f,0x2207c0fb,
    0x21f83e27,0x0e6ef14b,0x2200ef44,0x801f01de,0x78b4400f,0x7c077a20,
    0x22ff6200,0x173a1746,0x1f11d974,0x7c4f20b6,0x0d8745b0,0x790beeb3,
    0xd3dc9768,0x1e3c40f8,0x354f103e,0x40fc5980,0x2e40fc5c,0x1f17207e,
    0x5b1a2788,0x80b69a5c,0x65c05bcb,0xf801f05b,0x078b4400,0x07c16f2e,
    0x3a345dc0,0x217fdc42,0x45e43b2e,0x2f24b80f,0x2a03a0f8,0x22e47e65,
    0x8ad43b58,0x89e207c4,0x13c40f87,0x79adc00f,0x983ccf30,0x23cc1e67,
    0x8f13c40f,0x4b452e1e,0x03e27a05,0xf80f89e8,0x57c1999a,0x8b441999,
    0x03e27a07,0x206666be,0x817468bb,0x6cba0fac,0x5c12ba61,0x1d12ba64,
    0x4761bb02,0x0fd661e9,0x81f06e79,0x03e1e278,0x1f81f8f1,0x88354ba2,
    0x3e20d50f,0x83e20d50,0x5f13c40f,0x3e4b83e6,0x269869ac,0x1ecd303d,
    0x0777777c,0x41dddddf,0x9a60f168,0xeeeef83d,0x2345dc0e,0x1ea4a62e,
    0x3ba0ecba,0x1ee85901,0x7dc0e874,0x6de1dc4d,0xf0b55f54,0x20747983,
    0x3ea3cc1f,0x24a8b911,0x267a80f9,0x3e67a80f,0x20fc7a80,0x3bb7e279,
    0xddf325c1,0xdb99d903,0x1b733b20,0x801f003e,0x3b20f168,0x00f86dcc,
    0x17468bb8,0xe8f191f3,0x206b83b2,0x87435c0e,0x543e880e,0x5f744ec4,
    0x42e812ed,0x0ba16c6b,0x9ffd70d7,0x41fc4b81,0x2e41fc5c,0x5d1720fe,
    0x805e26b8,0x3f006c4b,0x3f05f333,0x0f85f333,0x5a6007c0,0x3333f078,
    0xb800f85f,0x2e17468b,0xd9742eff,0x85981dc1,0x41d0e83b,0x44a8d30c,
    0x917201f8,0xb313a61d,0x09d30ec8,0x21dc03a2,0x1ec88bea,0x76445f54,
    0x6445f541,0xe987641e,0x4c981e24,0xc85a80e6,0x22e42d45,0x1007c00f,
    0xa82be2b9,0x007c5c85,0x0ba345dc,0xb882e82c,0x5c43b00e,0x41d0e80e,
    0x74c4dadc,0x555ef4c2,0xfff904ec,0xff903609,0x425c409f,0xffda82e9,
    0xbffb501d,0x37ff6a03,0x89fff901,0x886a6028,0x3e20b600,0x83e20b60,
    0x24ffffff,0x54ffffff,0x5b055417,0x7ffc1f10,0x28cc4fff,0x5d008174,
    0x21c03910,0x41c701c8,0x207502c9,0x800accaa,0x00814400,0x03a80bb8,
    0x00000000,0x00000008,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x01646c00,0x95000040,0x000000d1,
    0x80000800,0x4aab803b,0x006df540,0x09816f72,0x10077390,0x40dac401,
    0x22000000,0x00000010,0xdd800000,0x4c54004b,0x5c07da60,0x44099029,
    0xc82e4051,0x01f6982f,0x1d5dffb5,0x02effd98,0x222600ee,0x80198c01,
    0xdd700a89,0x100662a0,0x0a94401f,0x20990074,0x363902fc,0x407bba60,
    0xdffb105b,0x5c809903,0x20151310,0x082e83fb,0x4806e603,0x7ffffff0,
    0x12322070,0x0bea8184,0x22e985f7,0x00db02e9,0x036c01b6,0x40efff54,
    0x7f54098a,0x806601df,0x0573c40f,0x048c8824,0x2a5d1a1d,0x2fa02e05,
    0x80901f50,0x47887f03,0x42e848c8,0x5c40bcb8,0x81b980bc,0x01b9800f,
    0x06e60373,0xe8bbb0fe,0xde883a82,0x00ef4401,0xea8077a2,0xe80fb88b,
    0x5c45f542,0x1aa1720f,0x1267881f,0x7102f2e2,0x57d54179,0x25c3e2eb,
    0x3e05e5c4,0x07260dc0,0x07fc0e4c,0xd03930f1,0x46cabe85,0x6ec6cabe,
    0x2007c4da,0x6ec4dadd,0x6d6ec4da,0x9ad83e24,0xb8003e27,0x5e5c05bc,
    0x02de5c05,0x5d0b903f,0x225c81f8,0x1f07e22e,0x5f434788,0x655f46ca,
    0x372b72a6,0xbe80f9e2,0x0df646ca,0x6c5dadd8,0x367c5dad,0x5dadd8f1,
    0x7c451174,0x887c4510,0x266be346,0x44d1a219,0x268d1346,0x87c4f26a,
    0x42665c79,0x3a00f89e,0x27a00f89,0x307980f8,0x83cc5d0f,0x4d87d479,
    0x363c40f8,0x10f88a20,0x27507c45,0x40f8bc2c,0xb503e228,0x3e3447df,
    0x3e0f8d10,0x344f13e8,0x6542e83e,0x3b2a0fee,0xdddf50fe,0x77777c5f,
    0xfdddf50e,0x3fbbbea5,0x5fdddf52,0x4f525da6,0x1eeaa0f8,0x6981ecd3,
    0x7b34c0f6,0x03e20d50,0xf883545d,0xf8356e40,0x50ee3c40,0x6541fdd9,
    0x59b50fee,0x5f53c57d,0x00feeca8,0x3625cbaa,0x3e2d8972,0x2e788f98,
    0x4c5d16c4,0xd30f88ae,0x1661f115,0x02cc01f0,0x202cc0b3,0x3a2ec5cf,
    0x67647982,0x99d906dc,0x333b20db,0xa80f986d,0x03e62e87,0x07fa21ea,
    0xb11e60fc,0x87c4574c,0x70f88ae9,0x3c79f99f,0x4574c3e6,0x970d30f8,
    0x16a5d16a,0x8eb87c5d,0x745d16a7,0x50fb96a2,0x23f07dcb,0xf003e0f8,
    0x11f83e23,0x0f88fc1f,0x076447f2,0x36cc2be6,0x0be6667e,0x0be6667e,
    0x0be6667e,0x3a1720fe,0x82e41fc2,0xd70ba05b,0x1f72d4d0,0x5a0fb96a,
    0x3e197858,0xf07dcb50,0x1f8ba217,0xf98fc1f3,0x47ce83e0,0x1741f31f,
    0x23d7ddb1,0x21ebeed8,0x07c2eed9,0x30bbb660,0xed985ddb,0x3feb662e,
    0xffb301df,0x642d419f,0x22e42d45,0xea85c85a,0xe81ec88b,0x6445f542,
    0x6409701e,0x3909d30e,0x47afbb62,0x31ebeed8,0x75de0eab,0x2fbb623e,
    0x3fff621e,0x20f76d43,0x07c1eeda,0xeeda8ff3,0x20041741,0x3ffe0000,
    0x00004fff,0x40008200,0x1f105b00,0xb07c416c,0xb501f105,0x0ba03bff,
    0x8077ff6a,0x7ffe404b,0x40081104,0x00221100,0x00100080,0xf903e000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x0005d000,0x00200970,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00100000,0x00040008,0x00001100,
    0x00000000,0x00000220,0x00000000,0xeea80000,0x4003506e,0xccd882ca,
    0x1bfb1001,0x819ffb50,0xb4c0cfd9,0x10b7660f,0x0930d70b,0xb10b10d7,
    0x45db85dd,0x03dd700d,0x6d407da6,0xfc980dff,0xcdddb80c,0x7ecc3900,
    0x3209900d,0xbffd502f,0x33776e03,0x75c0d500,0x322f4c1d,0x8590199b,
    0x2b763c9f,0x814c4c3d,0x45c9f44b,0xd8b911ea,0x10610b72,0x4c0d8791,
    0x54c3446a,0x13c80d86,0x9965a21f,0x81a6d104,0x117d5030,0xb72e81d7,
    0x406cc2c8,0x905c8f46,0x2a123220,0x40fb88be,0xb806cc2c,0xb8d53d80,
    0x2007a1b9,0xf3088c08,0x2f2e21c4,0x8d327dc0,0x83207e0f,0x2144f30f,
    0x0591e442,0x46807634,0x84c1f02c,0x40367758,0x2605b8f8,0x4c82f81c,
    0x2ea1f1a6,0x4588ddea,0x2698a258,0x28511428,0x752e40fc,0x4b13bbb1,
    0x18d31428,0x6767c0a8,0x41505b00,0x655f405b,0x5a92f726,0x900788f4,
    0x234c7b5b,0x24d66ae7,0x3403a9a0,0xd00fc093,0xc80951b3,0xb5bb00df,
    0x34c07ccb,0x2ab1f8d3,0x07516572,0x3c698faa,0x41e678d3,0x1895d679,
    0xda9e34cb,0x21d80bda,0xa86b8ae8,0x1a61d80f,0x21f11445,0x3625c970,
    0x3aa00d52,0x4f1a62ed,0x10e88bb8,0x54562703,0x221d1380,0x20bfff61,
    0x2061b1b8,0x68815ee9,0xf106a87c,0xb2fb8bf8,0x20c93baa,0x22ed981d,
    0x78d33c69,0x587c41aa,0x1a61901b,0x364e7dcf,0x987a00ec,0x1f83b01f,
    0xfeeca8b5,0xe8b525c0,0x4f300f11,0x078d30f8,0x3604e876,0xb00ead98,
    0x012e2743,0x226bea54,0x21ebe89f,0x0f996c4b,0x5f64c798,0x966aab1d,
    0x43e20345,0x78d33c69,0x59ea03e6,0xd32ce257,0x81f1ee78,0x43d0a21d,
    0xb507602e,0x4574c3bd,0xd325c0f8,0x3e07e0f8,0xf32e8b51,0x363a83c4,
    0x6885704b,0x225ec750,0x951d003c,0xdf335476,0x5f1745a8,0x3a045c8c,
    0x2ee55770,0x85112658,0x33c4f31e,0x20fe3c4f,0x3322ee5c,0x89e6589d,
    0xd83d1aa7,0x23cc3e21,0x81d8f21e,0xf72d40d9,0xa8f44b81,0x5c88fd45,
    0xf13cc3a2,0xb9621ee1,0x22cc0dcd,0x2e5880e9,0x33d30dbd,0xb499d404,
    0x7fcc7e23,0x20f98fc1,0x0fec8aea,0x322d43e2,0x85706cc2,0x7c4d30f8,
    0xb87c4f70,0x6445f547,0x3661641e,0x23dc3e20,0x1d81f31e,0x2e067754,
    0x0760fbbe,0xddb10b6a,0x4c4b83d7,0xfeb80eed,0x6f6d40cf,0x4356fe42,
    0x116a620d,0x0667cc1d,0x25a98836,0x83ffdcec,0xb516fa0e,0xda8d73dd,
    0xffea81ee,0x6f7544ed,0x0cdddb80,0x6f75406c,0x2356fe41,0xda86adfc,
    0xbb701dff,0x5bf9019b,0x81eec98d,0xab88001d,0x00d40ec0,0x0004b801,
    0x88000002,0x88330201,0x100c4199,0x40c40440,0x80000201,0x000081c0,
    0x00002004,0x00000000,0x00000040,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x80000000,
    0x86602cdb,0x4001ccd8,0x27710542,0x20cc0002,0x00b26a22,0x0517711e,
    0x7881f0f4,0x440d1054,0x6c1dffff,0xeeeaa643,0x40db02ee,0x33ffffff,
    0x12e81e2d,0x7c401e2f,0x16ffffc0,0x17a1ec2a,0xb907e699,0x49d107c4,
    0xbb9100f8,0x8992a6a8,0x1cfd9829,0xace87a3c,0xd52fdc7d,0xb32d45bd,
    0x02ed6fc4,0x1fb59d1e,0x440f87a0,0x40d107c7,0x98f730f8,0x2621f10f,
    0xe880fa99,0x4c01f01d,0x31740f16,0x07ec01e2,0xb1fd443e,0x0fe896e3,
    0x3aa6b87a,0x27443e20,0xea9803e2,0xc9810d42,0x78d52e81,0x1e66a8f4,
    0x4f31f83d,0x7c45b0f8,0x9cb887e0,0x00f99aa7,0x9e207c3d,0x71d10bfa,
    0x07c0f887,0x5d01ed32,0x7c16f2e0,0x33c5a600,0xf1289743,0xf9701771,
    0x83cc0f81,0x44b6ee79,0x41f8cd87,0x884e88f8,0xfd7b900f,0x6ec730a8,
    0x3f0e25da,0x12e3d07c,0x3885fd4f,0x1f1790f4,0xce8b6344,0x1f12e7ea,
    0x440f87a0,0x7c42fea7,0x27e25dad,0xaf885b99,0x9e816e06,0x99af80f8,
    0xbbc5a619,0x8bc4ba0e,0xb4c6dadf,0x0fc07c0f,0x2973b0f8,0x83ef885a,
    0xf104e8f8,0x07c4f101,0x23452a3b,0x7c1f300f,0xf12cc7e0,0x6a805fd4,
    0x1e22574c,0x2799aa3d,0x7403e25a,0xf8f103e1,0x11f83e20,0xa87fdddf,
    0xf82cefec,0x41ecd301,0x30eeeeef,0xd03abe2d,0x887c5e25,0x7c0f8f47,
    0x25902e80,0x6c0f2d17,0xfdef880f,0x4a80f880,0x52e3b16c,0x74416c4b,
    0x21f99fc2,0x00e8f71f,0x83dd01d5,0x2e1f32f8,0x7e47e3c4,0x20fc3d00,
    0x8d107c79,0x7441f12d,0x267e6622,0x9d903540,0x401f0db9,0xd0dff169,
    0x3e3c5e25,0x15f33990,0x088fc07c,0xe8e9672a,0x885dea80,0x1f10bb3f,
    0x361e8b50,0x5d16ab71,0xfdf82f98,0x37b661ee,0x01f80747,0xddbf10d7,
    0x98f12d43,0x4550faec,0x8d70ba1f,0x21d1e20f,0xd72640f8,0x3d85ddfd,
    0x3e6667e0,0x2d3007c2,0x9743d8f8,0x90f8f178,0x7c3dfddd,0x22e87cc0,
    0x1ab23ce8,0x10fa27e2,0xf10fa21f,0x1aa1f101,0x31f9723b,0x7817cc1f,
    0x01d1e001,0x441dc0b1,0x2e1f1017,0x2a788627,0x87641f35,0xf107c4e9,
    0x20f89a67,0x207882e9,0xb90b501e,0x45a600f8,0x89743f17,0xf00f8f17,
    0x7d310f81,0xa83ba0d4,0x3e64d84e,0x1f983e21,0x76cc03e2,0x25c8ec1d,
    0x3e21eeda,0x8f001e01,0xd710300e,0xfa80f101,0x6d5f47be,0x641ffec4,
    0x1fc84fff,0x443bd7d1,0x103effff,0x05b03c0f,0x7fffc1f1,0x9e2d34ff,
    0x8bc4ba6b,0x40f807c7,0x1c3effff,0x70be2364,0x07c4d70d,0x7ffc43b2,
    0x23b003ff,0xfff70029,0x200143ff,0x43c40742,0x005101c8,0x102cb880,
    0x00000100,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x01ffffff,0x3ffffffa,0xf87881f4,0x0f82dfff,0x9fcc37c0,
    0x0ffffff9,0x3f8d50b9,0xffffb3c4,0x220f65ff,0x3bfffe0f,0x77fffc0d,
    0x579b0fe4,0x9710a144,0x8bcb8817,0xcb880bc9,0x40732639,0x4c072604,
    0x9859501b,0x40199999,0x4f26a001,0x2e6a22b8,0x2d5001f8,0x7881f00f,
    0x87d510f8,0x3ff019af,0x9b203fc8,0xf07e22e8,0x3d83c41f,0x7c4b86a8,
    0x21f1b220,0x447f3e98,0xf1a60a89,0x746cabe8,0x6baefdab,0x997dd754,
    0x3c41faae,0x6c5dadd8,0x56ec4dad,0x440c023d,0x744b63fb,0x9bd5bf10,
    0x537a23d5,0x3e5d001f,0x87881f00,0x3fe3cc0f,0x33e0dfff,0xfa81ef43,
    0x84d87d40,0x6c1e26cf,0x41e83f03,0x1f07c40f,0x4a25d5b8,0x4f1a60bb,
    0x1443e228,0x3b16c1f3,0x88755772,0x23443c40,0x2668d10f,0x43008e27,
    0x74c0bed9,0x543e23ea,0xf07c4ee7,0xd5013335,0xf84ccd7c,0xf87a999a,
    0xb03e1f80,0x99334fc9,0x3203f307,0x7d1f06ad,0xc81ec1e2,0x883e1a64,
    0x4f607c5c,0xd95bf12e,0xd951e34c,0x7764c1fd,0xf14eeeef,0xefc9a6ea,
    0x3ffffee3,0xf52d8972,0x16e5fddd,0x0fe63008,0x27889f50,0x23c52a59,
    0xe82fffff,0x4bffffe3,0x47eeeeef,0x8ba3eefe,0x3af2dc0f,0xe8879391,
    0x407fa203,0x0788f98f,0x3c9a607b,0x0bfffff8,0x877f777c,0x87c3f11d,
    0xae99e279,0x25d30f88,0x567e2079,0x444ea85b,0x99745a87,0x0451a605,
    0x20b7aa18,0x9a22ece8,0x23452a59,0x667cc01f,0x881f00fc,0x21f80f87,
    0x778ba20f,0x1361e5a7,0x70f816e0,0x80f60f1d,0x21f01f1e,0xaabf82e9,
    0x7c788ec1,0xa9ee1f10,0x92dc3ee5,0x1dd0f45f,0x4b96a7d1,0xf31f83c4,
    0x20f88fc1,0x1804b51f,0x4f62ed98,0x2ccd10e9,0x03f1a295,0x0faaacd8,
    0xf87881f0,0x3bbe3cc0,0xae9bc5fe,0x80364794,0xce83e04b,0x65c07b07,
    0x7cc1f05a,0x217007c1,0xbf907c78,0x5f76c4d5,0x17ddb11e,0xedd87ddd,
    0x0777644e,0x1eeda814,0x2a1776cc,0x0c021ded,0x9a200310,0x23452a59,
    0x3e1e601f,0x87881f00,0xf87d310f,0x774f019a,0x003aa791,0x4c1f025c,
    0x4407b07f,0xb81f02df,0x211007c6,0x20007c78,0x18040400,0xfffb8100,
    0x000002ff,0x53333330,0x00000000,0xf83d807e,0x81f6ffff,0xeffff878,
    0x73c00f83,0xfffd9e4d,0x04b82fff,0x360f903e,0x1f03e403,0xd007c9d0,
    0x001f1e25,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xa8800000,0x2041aaaa,0x7542605a,0x2200006a,
    0x5504c20a,0x75c55555,0x5555514e,0x00000055,0x82ee5000,0x5c151c0a,
    0x298a6510,0x44aeeee6,0x50000000,0x02a08101,0x20688000,0x55440000,
    0x6cc01aaa,0x22c4eddd,0x52e8ee5a,0x5e4bad5b,0x3e23d159,0xbbbfdd51,
    0x5dddc4ba,0x46aa63bb,0x2aaaaaa8,0x00000000,0x73656744,0x26592d49,
    0x27a2952f,0x2aaa61e8,0x203bf33e,0x35903b8d,0xbd303a0b,0x4c721dbf,
    0x87bb12dd,0x1360286a,0x6eccb9b1,0x7bbbbb33,0x52a01e64,0x4931deda,
    0x326350e9,0x04221149,0x2208a653,0x000000bb,0x00000000,0x2787e200,
    0x75a8b678,0xde98b29b,0x36a17203,0x41eacc2e,0x03a01d59,0x4416e2fa,
    0x996573b8,0xfffff76a,0x31076cc5,0x162221d5,0x54049c40,0x2210b6e4,
    0x00210a1b,0x00000000,0x00000000,0x3c788000,0x2f11e2b6,0x0db0d69e,
    0x13e6035c,0xb9e8d57b,0x7ffffcc4,0x6440f1e4,0x4d036393,0x56408988,
    0x83ab6e3b,0x999911d9,0x2025e459,0x00014a18,0x00000000,0x00000000,
    0x22000000,0x12b6a3c6,0x22d75ab6,0x0ea82ee8,0xe819d930,0x34de44b9,
    0x3a04f444,0x26aa0b52,0x8d0b7b35,0x4d168878,0x5d31fbcb,0x2eeeee23,
    0x00000041,0x00000000,0x00000000,0x00000000,0x1ef878d1,0x85d94eb8,
    0x3a60f8ad,0x702ee880,0x91d10d17,0xdd303a05,0x44261ddf,0x1c0a20bb,
    0x4391d404,0x7775088a,0x00000000,0x00000000,0x00000000,0x00000000,
    0x1b21e344,0x20fa97c4,0xffd96e5b,0x380316ff,0x81c66033,0x4308c40b,
    0x0000002e,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__arial_14_latin1_x[224]={ 0,1,0,0,0,0,0,0,0,0,0,0,1,0,
1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,-1,0,0,0,0,1,0,1,1,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,-1,
1,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,-1,-1,-1,-1,
-1,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__arial_14_latin1_y[224]={ 11,2,2,1,1,1,1,2,1,1,1,3,9,7,
9,1,1,1,1,1,2,2,1,2,1,1,4,4,3,4,3,1,1,2,2,1,2,2,2,1,2,2,2,2,
2,2,2,1,2,1,2,1,2,2,2,2,2,2,2,2,1,2,1,12,1,4,2,4,2,4,1,4,2,2,
2,2,2,4,4,4,4,4,4,4,2,4,4,4,4,4,4,1,1,1,5,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,4,2,1,3,2,
1,1,1,1,1,4,4,7,1,0,1,3,1,1,1,4,2,5,10,1,1,4,1,1,1,4,-1,-1,-1,0,
0,0,2,1,-1,-1,-1,0,-1,-1,-1,0,2,0,-1,-1,-1,0,0,3,1,-1,-1,-1,0,-1,2,1,1,1,
1,2,1,1,4,4,1,1,1,1,1,1,1,1,2,2,1,1,1,2,1,4,4,1,1,1,1,1,2,1,
 };
static unsigned short stb__arial_14_latin1_w[224]={ 0,2,4,7,7,11,9,2,4,4,5,7,2,4,
2,4,7,4,7,7,7,7,7,7,7,7,2,2,7,7,7,7,13,10,8,9,9,8,7,9,8,2,6,9,
7,10,9,10,8,10,9,8,8,9,9,12,9,9,8,4,4,3,6,9,3,7,7,7,7,7,4,7,7,2,
3,7,2,10,7,7,7,7,5,6,4,7,7,9,7,7,6,4,2,4,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,2,7,7,7,8,
2,7,4,10,5,7,7,4,10,9,5,7,4,4,3,7,7,2,4,3,5,7,11,11,11,7,10,10,10,10,
10,10,12,9,8,8,8,8,3,4,5,4,10,9,10,10,10,10,10,7,10,9,9,9,9,9,8,8,7,7,
7,7,7,7,11,7,7,7,7,7,3,3,5,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
 };
static unsigned short stb__arial_14_latin1_h[224]={ 0,9,4,11,12,11,11,4,13,13,5,7,4,2,
2,11,11,10,10,11,9,10,11,9,11,11,7,9,7,5,7,10,13,9,9,11,9,9,9,11,9,9,10,9,
9,9,9,11,9,11,9,11,9,10,9,9,9,9,9,12,11,12,6,2,3,8,10,8,10,8,10,10,9,9,
12,9,9,7,7,8,10,10,7,8,10,8,7,7,7,10,7,13,13,13,3,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,10,12,11,7,9,
13,13,3,11,6,7,5,2,11,2,5,8,6,6,3,10,12,3,4,6,6,7,11,11,11,10,12,12,12,11,
11,11,9,13,12,12,12,11,12,12,12,11,9,11,13,13,13,12,12,7,11,13,13,13,12,12,9,11,11,11,
11,10,11,11,8,10,11,11,11,11,10,10,10,10,10,9,11,11,11,10,11,6,8,11,11,11,11,13,12,13,
 };
static unsigned short stb__arial_14_latin1_s[224]={ 252,129,165,70,240,79,91,154,65,9,148,
66,162,207,194,139,1,249,24,144,194,212,198,141,19,120,82,212,223,126,42,
53,41,149,123,9,202,160,1,211,22,180,93,238,248,51,81,168,120,109,110,
95,91,100,100,215,228,71,62,202,49,146,108,197,178,148,115,207,77,199,48,
85,186,183,198,172,169,239,1,191,69,40,250,176,110,140,9,17,27,61,35,
36,22,90,186,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,
215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,252,13,150,
71,74,132,25,28,173,179,115,58,140,207,128,212,134,183,121,85,182,32,227,
170,157,96,90,50,59,47,35,220,158,169,207,243,232,221,9,80,180,189,218,
167,248,235,12,138,31,120,95,106,117,1,18,231,200,128,70,55,39,29,42,
78,87,54,62,241,143,151,156,233,159,176,184,192,9,252,206,228,1,132,104,
112,130,16,101,100,168,190,152,160,27,14,138,1, };
static unsigned short stb__arial_14_latin1_t[224]={ 12,51,60,15,1,28,28,60,1,1,60,
61,60,60,60,28,28,28,40,28,40,28,28,40,28,28,61,40,51,61,61,
40,1,40,40,28,40,40,51,14,51,40,40,40,40,51,51,28,51,28,51,
15,51,40,51,40,40,51,51,1,15,1,61,60,60,51,40,51,40,51,40,
40,40,40,1,40,40,51,61,51,40,40,51,51,40,51,61,61,61,40,61,
1,1,1,60,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,12,40,1,
28,61,40,1,1,60,28,61,61,60,60,28,60,61,51,61,61,60,40,1,
60,60,61,61,61,28,28,28,28,1,1,1,14,14,14,51,1,1,1,1,
14,1,1,15,14,51,15,1,1,1,15,15,51,14,1,1,1,15,15,51,
15,15,15,15,28,14,14,51,28,14,14,14,14,40,1,28,28,40,51,15,
15,15,40,28,61,51,28,28,28,28,1,1,1, };
static unsigned short stb__arial_14_latin1_a[224]={ 56,56,71,112,112,178,134,38,
67,67,78,117,56,67,56,56,112,112,112,112,112,112,112,112,
112,112,56,56,117,117,117,112,204,134,134,145,145,134,122,156,
145,56,100,134,112,167,145,156,134,156,145,134,122,145,134,189,
134,134,122,56,56,56,94,112,67,112,112,100,112,112,56,112,
112,45,45,100,45,167,112,112,112,112,67,100,56,112,100,145,
100,100,100,67,52,67,117,150,150,150,150,150,150,150,150,150,
150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,
150,150,150,150,150,150,150,150,56,67,112,112,112,112,52,112,
67,148,74,112,117,67,148,111,80,110,67,67,67,116,108,56,
67,67,73,112,167,167,167,122,134,134,134,134,134,134,201,145,
134,134,134,134,56,56,56,56,145,145,156,156,156,156,156,117,
156,145,145,145,145,134,134,122,112,112,112,112,112,112,178,100,
112,112,112,112,56,56,56,56,112,112,112,112,112,112,112,110,
122,112,112,112,112,100,112,100, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_14_latin1_BITMAP_HEIGHT or STB_FONT_arial_14_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_14_latin1(stb_fontchar font[STB_FONT_arial_14_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_arial_14_latin1_BITMAP_HEIGHT][STB_FONT_arial_14_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_14_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_14_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_14_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_14_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_14_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_14_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_14_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__arial_14_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__arial_14_latin1_s[i] + stb__arial_14_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__arial_14_latin1_t[i] + stb__arial_14_latin1_h[i]) * recip_height;
            font[i].x0 = stb__arial_14_latin1_x[i];
            font[i].y0 = stb__arial_14_latin1_y[i];
            font[i].x1 = stb__arial_14_latin1_x[i] + stb__arial_14_latin1_w[i];
            font[i].y1 = stb__arial_14_latin1_y[i] + stb__arial_14_latin1_h[i];
            font[i].advance_int = (stb__arial_14_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__arial_14_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_14_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_14_latin1_s[i] + stb__arial_14_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_14_latin1_t[i] + stb__arial_14_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_14_latin1_x[i] - 0.5f;
            font[i].y0f = stb__arial_14_latin1_y[i] - 0.5f;
            font[i].x1f = stb__arial_14_latin1_x[i] + stb__arial_14_latin1_w[i] + 0.5f;
            font[i].y1f = stb__arial_14_latin1_y[i] + stb__arial_14_latin1_h[i] + 0.5f;
            font[i].advance = stb__arial_14_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_14_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_14_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_14_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_14_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_14_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_14_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_14_latin1_LINE_SPACING
#endif

