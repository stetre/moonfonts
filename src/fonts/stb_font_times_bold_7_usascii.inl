// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_7_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_7_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_7_usascii_BITMAP_WIDTH         128
#define STB_FONT_times_bold_7_usascii_BITMAP_HEIGHT         26
#define STB_FONT_times_bold_7_usascii_BITMAP_HEIGHT_POW2    32

#define STB_FONT_times_bold_7_usascii_FIRST_CHAR            32
#define STB_FONT_times_bold_7_usascii_NUM_CHARS             95

#define STB_FONT_times_bold_7_usascii_LINE_SPACING           5

static unsigned int stb__times_bold_7_usascii_pixels[]={
    0x81010410,0x22101008,0x88620200,0x44083310,0x82082040,0x30081108,
    0x4c081301,0x44106040,0x88914a21,0xc884c2a1,0x4a6530c8,0x41919109,
    0x2e5cea3b,0x57154937,0x2862aea5,0x535063a6,0x488546c4,0x45d26e53,
    0x49a9a143,0x12294c17,0x8cddc675,0x4c66772c,0x23b964e2,0x5450663b,
    0x75c9772e,0x22853730,0x46641ea8,0x20570592,0x8c43d529,0x65a366ba,
    0x983129c0,0x5c2b7333,0x14c66773,0xb89dceeb,0x5dc15043,0x45b89775,
    0x42313b89,0x42fa6e5b,0x4572c82c,0xb143a620,0x0bb46cd1,0x398914a2,
    0x2211b753,0x26330c9c,0x8545c4e2,0x438a61cc,0x5413539b,0x5264623a,
    0xd7b7242a,0xc8867225,0x39b921c9,0x550eba8a,0x45288627,0x40c31dc4,
    0x4a6530bc,0x00000009,0x00001020,0x00000000,0x30208200,0x42040110,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x20000000,0x84098100,0x44621118,0x10231110,0x88c41088,0x2a086310,
    0x4466624a,0x02204c40,0x265bb831,0x1088225a,0x22111883,0x279306e1,
    0x34a8e2c9,0x232e1ad4,0xb9a4dc36,0x30da6371,0xab84c51d,0x15cb2aa4,
    0x42b9676a,0x1b372bd9,0x88e99a32,0x5598b31e,0x44bb8f21,0x2ee3b92c,
    0x349863a1,0x321ad8e8,0xb0dc9768,0x8dc5b815,0x772540ba,0x57256ccb,
    0xbb966cc5,0xbb89aea5,0xd98b31d9,0x1b3715c4,0x276b32cc,0x069312e6,
    0x4b88b399,0x0b30dc75,0xbb8dc3d3,0x4d572544,0x8b6e2dd9,0x2680dc59,
    0xb31d9e88,0x751eecc2,0x2337255c,0x449551ab,0x260cec43,0x8ea28892,
    0x3351aa2c,0x04c4b21d,0x50ebb92e,0x3aee1d1b,0x50098b50,0xd52d9c54,
    0x0be36a93,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x155ca600,0x40508006,0x36ae5318,0x55455708,0x4c6a60c2,0x15cb573a,
    0x57504553,0x89882662,0x4cc43109,0x26213310,0x40262080,0x88f6a0d8,
    0x42ea3a84,0x79b301aa,0x497306c4,0x233909b9,0x54d5768c,0x22b98325,
    0x4c5b130e,0xd99663b5,0x2a51b328,0xd99a249d,0x4c2c754a,0x3a883a62,
    0x8aa61551,0x890a3229,0x422e25bc,0x2a7350ca,0x65432a6c,0x92e63710,
    0x874ecc59,0xd98b6659,0x4d075263,0x0cc22cd9,0xdc8f2a14,0x00008035,
    0x00000300,0xb307a000,0x5b32cc36,0x3e930ecc,0x859c99a0,0x1174eb81,
    0x0001d41f,0x00000000,0x4edc0000,0x547a36a4,0x93d516a5,0x0e88eb6a,
    0x000075b5,0x5933ba80,0x411116ee,0x5543020b,0x0000991a,0x00000000,
    0x08100000,0x1c92b6ee,0x688aa111,0x05551aae,0xa8442ea6,0x000001aa,
    0x00000000,0x715c0000,0x89636aa3,0xc8eeb550,0x000d772b,0x00000000,
    0x00000000,0x8a260000,0x41a7aee1,0x00000188,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_bold_7_usascii_x[95]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, };
static signed short stb__times_bold_7_usascii_y[95]={ 5,0,0,0,0,0,0,0,0,0,0,1,4,3,
4,0,0,0,0,0,0,0,0,0,0,0,2,2,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,2,0,2,0,2,0,2,0,0,
0,0,0,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,0,0,2, };
static unsigned short stb__times_bold_7_usascii_w[95]={ 0,2,3,4,3,6,5,2,3,2,3,4,2,2,
2,2,3,3,3,3,3,3,3,4,3,3,2,2,4,4,4,3,6,5,4,5,5,4,4,5,5,3,4,5,
4,6,5,5,4,5,5,4,4,5,5,7,5,5,5,2,2,2,4,5,2,4,4,3,4,3,3,4,4,2,
3,4,2,6,4,3,4,4,3,3,3,4,4,5,4,4,3,3,1,2,4, };
static unsigned short stb__times_bold_7_usascii_h[95]={ 0,6,3,6,6,6,6,3,7,7,4,4,3,1,
2,6,6,5,5,6,5,6,6,6,6,6,4,5,4,2,4,6,7,5,5,6,5,5,5,6,5,5,6,5,
5,5,6,6,5,7,5,6,5,6,6,6,5,5,5,7,6,7,3,2,2,4,6,4,6,4,5,5,5,5,
7,5,5,3,3,4,5,5,3,4,5,4,4,4,3,5,3,7,7,7,2, };
static unsigned short stb__times_bold_7_usascii_s[95]={ 127,51,60,63,68,72,88,47,1,37,119,
93,57,99,83,115,123,33,50,6,60,10,14,54,59,38,74,42,69,94,64,
106,18,54,37,94,27,22,17,100,7,13,46,117,112,105,82,40,90,25,79,
110,69,24,18,30,55,49,1,31,79,34,42,77,91,88,1,115,118,98,42,
64,74,61,14,85,46,50,72,102,95,100,64,111,123,106,83,77,123,45,68,
10,8,5,86, };
static unsigned short stb__times_bold_7_usascii_t[95]={ 1,1,21,1,1,1,1,21,1,1,15,
15,21,20,20,1,1,16,15,9,15,9,9,1,1,9,15,15,15,20,15,
1,1,15,16,1,16,16,16,1,16,16,1,9,9,9,1,1,9,1,9,
1,9,9,9,9,9,9,16,1,1,1,21,20,20,15,9,15,1,15,9,
9,9,9,1,9,9,21,20,15,9,9,20,15,9,15,15,15,15,15,20,
1,1,1,20, };
static unsigned short stb__times_bold_7_usascii_a[95]={ 25,34,56,51,51,101,84,28,
34,34,51,58,25,34,25,28,51,51,51,51,51,51,51,51,
51,51,34,34,58,58,58,51,94,73,67,73,73,67,62,79,
79,39,51,79,67,95,73,79,62,79,73,56,67,73,73,101,
73,73,67,34,28,34,59,51,34,51,56,45,56,45,34,51,
56,28,34,56,28,84,56,51,56,56,45,39,34,56,51,73,
51,51,45,40,22,40,53, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_7_usascii_BITMAP_HEIGHT or STB_FONT_times_bold_7_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_7_usascii(stb_fontchar font[STB_FONT_times_bold_7_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_7_usascii_BITMAP_HEIGHT][STB_FONT_times_bold_7_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_7_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_7_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_7_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_7_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_7_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_7_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_7_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_7_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_7_usascii_s[i] + stb__times_bold_7_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_7_usascii_t[i] + stb__times_bold_7_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_7_usascii_x[i];
            font[i].y0 = stb__times_bold_7_usascii_y[i];
            font[i].x1 = stb__times_bold_7_usascii_x[i] + stb__times_bold_7_usascii_w[i];
            font[i].y1 = stb__times_bold_7_usascii_y[i] + stb__times_bold_7_usascii_h[i];
            font[i].advance_int = (stb__times_bold_7_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_7_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_7_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_7_usascii_s[i] + stb__times_bold_7_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_7_usascii_t[i] + stb__times_bold_7_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_7_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_7_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_7_usascii_x[i] + stb__times_bold_7_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_7_usascii_y[i] + stb__times_bold_7_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_bold_7_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_7_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_7_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_7_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_7_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_7_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_7_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_7_usascii_LINE_SPACING
#endif

