// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_30_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_30_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_30_usascii_BITMAP_WIDTH         256
#define STB_FONT_consolas_30_usascii_BITMAP_HEIGHT        118
#define STB_FONT_consolas_30_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_30_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_30_usascii_NUM_CHARS             95

#define STB_FONT_consolas_30_usascii_LINE_SPACING          20

static unsigned int stb__consolas_30_usascii_pixels[]={
    0x000627ff,0x266200e2,0x20009999,0x26388018,0x00199999,0x710037aa,
    0x000159d9,0x530009d5,0x64c00001,0x30013264,0x65c40799,0x2a6cbdee,
    0x3100003c,0xded98001,0xdb132602,0x23dd500b,0x93ffbcc9,0x3a007fff,
    0x7ffec03f,0x6cc03fff,0x3a200fff,0xffffff2f,0xfff1003f,0x7fffd409,
    0x5c001fff,0xffb1004f,0x0001bfff,0x3fe24fd8,0x17fe6001,0x7fffffdc,
    0x01bf27ff,0xffffd500,0xffff5007,0x85ff107f,0x7ec02ffc,0x3ffbfea7,
    0x0dffff73,0x6407ff70,0x03ffeeee,0x03bfffea,0xff877f44,0x801eeeee,
    0xf705fff8,0x3fee617f,0x00ff2001,0x3fffffe6,0x10000eff,0x05fd83ff,
    0x3217fe60,0xeb99adff,0x001bf27f,0xffffffa8,0x4bfe203f,0x2fe40ffb,
    0xf102ffc4,0x7f7fcc9f,0x1ffe4c3f,0x0017fec0,0x77fc07ff,0x07fec00a,
    0x640007ff,0x1ffa81ff,0x5c40df70,0x1deffffd,0x30afff98,0x0001fff9,
    0x1ff30df9,0x317fe600,0x9fee07ff,0xf10006fc,0x3ffa61df,0xff8df300,
    0x6c03fe61,0x3ff700ff,0x1ffeffcc,0xfd005ff8,0x0ffe001d,0x5c01ffcc,
    0x01ffc1ff,0x7fc40200,0x5c0ff402,0xffffffff,0x01ffd82f,0x88007ff9,
    0x07fd02ff,0xfb13fe60,0xf93fdc0d,0x3fea000d,0xa80ffdc1,0xfd17f45f,
    0x81ffd407,0x6ffc46fe,0x0df903ff,0x4013fe60,0x1ff703ff,0xf84ff880,
    0x9000003f,0x89f7009f,0xff9ceffa,0x7fcc1b99,0x0037fc03,0x7fb81fee,
    0xf89ff300,0xc9fee03f,0xff70006f,0x501ff981,0xf91fe8ff,0x30dff00d,
    0xcff887ff,0x0ff503ff,0x400ffe40,0x0df703ff,0xff01ff90,0xeeeea807,
    0x221eeeee,0x6f9800ff,0x7f887ff4,0x2007fe40,0x3a001ffc,0x0bfe204f,
    0xf993fe20,0xc9fee02f,0x33bb6e6f,0xb85ff500,0x7ff100ff,0x3fe6df71,
    0x41ffc801,0xcff80ffb,0x0ff503ff,0x4027fc40,0x0df703ff,0xff03ff88,
    0xffffb807,0x2e1fffff,0x54ddc45f,0x27fc4ff1,0x6fd80df3,0x002ff980,
    0xfc801ff3,0x24ff8805,0x3ee01ffa,0x3f63bf27,0x880effff,0x13fea6ff,
    0x5fffff70,0x7c400ffa,0x982ff44f,0xf503ff89,0x07fc800f,0xdf703ff8,
    0xf00ffb80,0xaaa9807f,0x21ffcaaa,0x3ffee2fe,0x221ff2ff,0x017ee6ff,
    0xff300bfd,0x017f6007,0xf1007fe6,0x00ffd47f,0x777e4ff7,0x6ffcabef,
    0xff97ff90,0x33b6a00b,0xd800df71,0x00bfe67f,0x3fd40ffe,0x00bfea00,
    0x1bee07ff,0x7fc0bfd0,0x3fe60003,0xbffa9fe1,0x41fd1ffc,0x09f93ffe,
    0xf8804ff8,0x1ff8804f,0x8809fb00,0x0bfe63ff,0x3ff27fb8,0x81ffc84f,
    0x04fffff8,0x00ffcc00,0x7e4bfea0,0x207ff007,0x7c000ff8,0x81ffc04f,
    0x3fe204fc,0x000ffe03,0xdf31ff98,0x0ff89ff4,0x7ffcc3fd,0x3e202fee,
    0x09ff004f,0x5400df70,0x3fe200ff,0x4c0ffe23,0x13ff27ff,0x74c27fc4,
    0x80002fff,0xff0004fe,0x7c013feb,0x013fa03f,0xff80dfd0,0x202ff883,
    0x3fe01ffa,0x3fe60003,0x9fe69f71,0x507fa7fa,0x019fffff,0x22013fe2,
    0x3ff803ff,0x201ffc00,0x437f43ff,0x3f27fff8,0x2a2ff407,0x646fffff,
    0x0df7007f,0x7dffe400,0x07ff001f,0x01677fd4,0x3fe037ec,0x09ff9733,
    0x3e00ffa8,0x3e60003f,0x3ee7f91f,0x0fe9bee5,0xfffffb88,0x805ff80c,
    0x7d402ff9,0x37dc000f,0xff70ffe0,0xfbff7119,0x36037e4f,0x23bfe26f,
    0x1bf64ffc,0x5c47fe20,0xfff3001b,0x1ffc00df,0x007ffec0,0x7ff01ff2,
    0x2007fff2,0x3fe00ffb,0x3fe60003,0x93f65fb1,0x803fa4fc,0x1ffffff8,
    0x7d4037f4,0x027f401f,0xf017fc40,0xffffb05f,0x64ff55ff,0xb37ec06f,
    0x9fff41ff,0x4fd805ff,0x00bffff7,0x800bfffa,0x3f6603ff,0x7dc00cde,
    0xca9ffc07,0x7e404ffe,0x001ffc07,0x3f63ff30,0x1fec7fd2,0x8ef980ff,
    0x3f60effd,0x07fec00f,0x0003ff30,0x2ff817f6,0x25bfffb0,0x01bf27fb,
    0x227fcbfd,0x4ffafff8,0x7cc77dc0,0x803ffbbf,0x7c006ffa,0x013fa03f,
    0xff80ff90,0x202ff983,0x3fe00ffb,0x3fe60003,0x8ffa3fd1,0x80bf32fe,
    0x8bfee5fa,0x3e203ffa,0x02fe404f,0x201ff300,0x5c0c00aa,0xf01bf27f,
    0x20ffe29f,0x01fffff9,0x1fe4bfe2,0xff500bf7,0x03ff8007,0xd8001ff1,
    0x81ffc06f,0x3fea04fd,0x000ffe01,0x3fd1ff98,0x8ffc4ff6,0x27dc03fb,
    0xfff89ff1,0x403ffb01,0x40002ff8,0x800004fe,0x81bf27fb,0x13fe2ff9,
    0x2037ffdc,0x987fa5fd,0x3ffc406f,0xa81ffc00,0x5fe8007f,0xfb81ffc0,
    0x80bfe606,0x260003ff,0x2e5fb1ff,0xd15ffb5f,0x23fc801f,0x7fd43ffa,
    0xffda89bf,0x0037dc04,0xba83fd40,0x27fb8000,0x1bf606fc,0x3fa01ffd,
    0x83fea05f,0x01be62fe,0xf0005ffb,0x01fea07f,0xf805ff10,0x80df703f,
    0x0ffe05ff,0x91ff9800,0x3fbfea7f,0x803ffffa,0x07ff62fd,0x3fffffee,
    0x3fe804ff,0x85ff0000,0xb8006ffb,0x30bff27f,0xffb85ffb,0xfffb30ae,
    0x85ff107f,0x313f25fc,0x009ffd53,0x7d40ffe0,0x07fdc007,0x7dc0ffe0,
    0xf03fe406,0x7cc0007f,0x7547f71f,0x509df92e,0xb9fd579d,0x6cc09fff,
    0x802dffff,0x00000ffa,0xfffc8df9,0x93fdc000,0xffffffff,0x3fff605f,
    0xffcfffff,0x4c2fec1f,0x20ffdeff,0x04fffff8,0x540ffe00,0x2ff4007f,
    0xfb81ffc0,0x817fcc06,0x260003ff,0x00bf51ff,0xfffffa80,0x004fffff,
    0x6c007ff1,0x2200005f,0x13fe61ff,0xb89fee00,0x0ceffffd,0x7ffff540,
    0x21fff30d,0xff500ffa,0xeff883df,0x7fc0001d,0x400ff503,0xff801ffa,
    0xd00df703,0x00ffe0df,0xf10ffb80,0x5c40001f,0xbdefffed,0x037f4000,
    0x0001ff88,0x06227ec0,0x00300000,0x000004c0,0x00000088,0x7d40ffe0,
    0x017fa007,0x7fb81ffc,0xf83ffa80,0x3f60003f,0x0001fec7,0x8000df50,
    0x9712dffb,0x00006fc8,0x0000ffa8,0x00000000,0x00000000,0x07ff0000,
    0x7dc01bf2,0x07ff000f,0x36007fea,0x01ffc0ff,0x546ff880,0x700001ff,
    0xfd0000bf,0x43ffffff,0x000002ff,0x000007fd,0xbb80b332,0x22222220,
    0x88888888,0x26666088,0x00009999,0x07ff0000,0x3ea017fe,0x0ffe003f,
    0x4401ffcc,0x01ffc6ff,0x3f2235b1,0x1ffd81ff,0xf9002c88,0x3ee00007,
    0x0cc2efff,0x13100000,0x01dfec88,0xffb10131,0x21fffd05,0xffffffff,
    0xffffffff,0xffffff13,0x000009ff,0xb88ffe00,0x7cc02ffe,0x1ffc004f,
    0x8039ffd0,0x0ffe5ff9,0xffffff88,0x3ff603ff,0x02fffeef,0x00001530,
    0x00000988,0x3fa20000,0xfe82ffff,0x98bfee03,0xfff3ffff,0xffffffff,
    0x227fffff,0xffffffff,0x00000004,0x3fff27ff,0x05fe805f,0x7fffffec,
    0x3fffe603,0x4ffea00f,0x1fffffff,0x37bfffb2,0xffeca800,0x000001ce,
    0x00000000,0x7ff70000,0x7c47ffd5,0x8f74c02f,0x002ffff8,0x99999800,
    0x00000999,0x327ff000,0xd5002def,0xfffffb00,0xfec8807f,0xff2dc00f,
    0x203fffff,0x00000000,0x00000000,0xd0000000,0x6fff449f,0x20007feb,
    0x00005ffb,0x00000000,0x001ffc00,0x00000000,0x00000000,0x00000000,
    0x00000000,0x7fc00000,0xfffffd82,0x00440002,0x00000000,0x7fc00000,
    0x00000003,0x00000000,0x00000000,0x00000000,0x00000000,0x3baa0088,
    0x0000002d,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x332a0000,0xb8fae00a,0x0000ceed,0x76dc0993,0x1eeeeeef,0xa8001993,
    0x4400003c,0x21cdeecb,0x04cccccc,0x000bb620,0x53000062,0x33333001,
    0x20033333,0x100000a9,0x9a988013,0x03ed8800,0x88135310,0x7ffe43ed,
    0xb5fc80df,0x01dfffff,0xd10ff700,0xffffffff,0x07fea3ff,0x000df900,
    0x7ffffd40,0x3fffe2ff,0x3f2007ff,0x3fa000ff,0xffd88004,0xff00dfff,
    0xffffffff,0x3fff6203,0x6dc003ff,0xd503fffe,0x05dfffff,0x880fffec,
    0xdfffffed,0x543fffb2,0x42ffffec,0xabefeefc,0xb8006ffc,0x22ffe87f,
    0x50abffea,0xfc8003ff,0xff100006,0x439555bf,0x07fdaaaa,0x003fff60,
    0x54004ff8,0xffffffff,0xfffff80e,0x881fffff,0xfffefffe,0xffffb805,
    0xffc83fff,0x2ffffeef,0x307ffff0,0xffffffff,0x0ffffe9f,0x90fffdc4,
    0xff909fff,0x47fb8003,0xff982ffa,0x000ffd43,0x40001bf2,0xc8001ffc,
    0x3fe6007f,0x027fc004,0x215fff30,0xff87ffc9,0x2fff8002,0xf7027fe4,
    0x201357ff,0x7d40dffa,0x1fff907f,0x21bfffa8,0xfff94d98,0x26ff9801,
    0xff104ffc,0x47fb8009,0x17fa07fc,0xc8003ff5,0xfd00006f,0x1ff2000d,
    0x3e000200,0x3ff6004f,0xf87ff901,0x7fdc002f,0x501ffb01,0x320019ff,
    0x3ff900ff,0x3fe02ea0,0x02ea001f,0xfc8ffe40,0x002ff407,0x0ffb1fee,
    0x3fea2ff4,0x037e4001,0x004ff800,0x0000ff90,0x3ffbbba0,0x0eeeeeef,
    0xff00ffe6,0x4002ff8d,0x3fe605fe,0x4005fe83,0x3fea06fd,0x17fdc001,
    0x3ea00000,0xd80df93f,0xdd97106f,0xffb8ffbb,0x543ff881,0x9dd501ff,
    0xdfd737e4,0x0ffe2009,0x203fe400,0x05eeeeed,0x7ffffffc,0x20ffffff,
    0x7e400ffc,0x800bfe1f,0x3ee02ff9,0x007fd45f,0x6c03fee0,0x6ff8006f,
    0xfa800000,0xd80df92f,0xffffb86f,0x7c47ffff,0x3ffa20ef,0x540ffd40,
    0x3bf20eff,0xefffffe8,0x01ffc400,0x7c07fc80,0x407fffff,0xadffaaaa,
    0x360aaaaa,0x2ff9806f,0xfa800bfe,0xfffd880f,0x40037e46,0x7dc1eff8,
    0x7fcc003f,0xc8000003,0x80df91ff,0x6ffe45fe,0x87feba9a,0xffeefffd,
    0x41ffa82f,0x7e40effa,0xfeaadffe,0x66665c4f,0xccccceff,0x203fe404,
    0x07fdaaaa,0xe8027fc0,0x3ff9805f,0x0aaf37fe,0xfe987fb8,0xa7f47fef,
    0x202cddca,0xfe9cfffb,0xffa8004f,0x99800002,0x3f25ffca,0xf327fc06,
    0x51fee07f,0xbffff9ff,0xa87fea01,0xffc80eff,0x746fe83f,0xffffffff,
    0x6407ffff,0x3fe4007f,0x4013fe00,0xff8804ff,0x3fffffe4,0x3fe40cff,
    0x3eabffee,0x3ffbfe0f,0x01efffff,0x5fffffd3,0x07fee000,0xfff10000,
    0x37e41dff,0x7ec5ff30,0xfb1fee06,0x7d400447,0x01dff51f,0x7e413ff2,
    0x7e6665c7,0x4cccccef,0x2003fe40,0x7fc007fc,0x04ff8804,0x66649ff0,
    0x0effffec,0x7fec5bf6,0x221ff50d,0xaaacffff,0x3f206ffd,0x200cffff,
    0x3ff21cc8,0x10088000,0xf9059dff,0x3e37ec0d,0xf1fee03f,0xff50009f,
    0x401dff33,0x3fea06fc,0x00ffe200,0x2003fe40,0x7fc007fc,0x009ff004,
    0x98807ff1,0x3bf25ffd,0x7dc4fff9,0x40bff10f,0x7f443ffb,0x0efffbcf,
    0x2e1fff90,0x7d4001ff,0x405ff05f,0x7ecc2ffc,0x80bfe21f,0x77ff47fb,
    0x809abccc,0x0effbffa,0xf5037e40,0x1ffc401f,0x007fc800,0x3e003fe4,
    0x0bff004f,0x4005ff30,0x3ffee7fe,0x27fc81ff,0x7f403ff8,0x887bfe65,
    0xffb06ffd,0x00bfea7f,0xf05fffd0,0x7ffe403f,0x43ffffff,0x3ee01ffa,
    0x7ffff4c7,0x544fffff,0x804ffcff,0x3fea06fc,0x00ffe200,0x2003fe40,
    0x7fc007fc,0x00dfd004,0x64003ff5,0xbfff50ff,0xff1bf201,0x327fd809,
    0x5ffb00ff,0x26bfff50,0x7f4003ff,0x01ff82ff,0x3ffffff2,0x1ffa80de,
    0xff31fee0,0xfffdb99b,0x64ffd49f,0x37e404ff,0x4401ff50,0xf90003ff,
    0x07fc800f,0xd8027fc0,0x7fec00ff,0x43fee000,0x7fc04ff9,0x3602ff45,
    0x8813fa6f,0x9ffb04ff,0x5001bfe2,0x02aa0dff,0x00316fc8,0x7dc05ff3,
    0x9817fe27,0x47fea7ff,0x3f203ffd,0x803fea06,0x90003ff8,0x7fc800ff,
    0x802ff400,0x3e203ffa,0x37ec005f,0xff9817fa,0x3a03fec2,0x807ff15f,
    0x5ff705ff,0x20017fec,0x7e400018,0x1ffc4006,0x3ea7ff98,0x87fe401f,
    0x3ffa1ffa,0x540df902,0x3fe200ff,0x0ff90003,0x4007fc80,0xfd000ffd,
    0x03ff603f,0x5c4ffa80,0x6fe882ff,0xf502ffa8,0x5037fc5f,0x3ff607ff,
    0x00bffe60,0x200bb800,0xfe8006fc,0x27fff886,0x7ec02ffc,0xe887fea7,
    0x06fc82ff,0xf8803fea,0xff90003f,0x007fc800,0x3056ffdc,0x9bfffa81,
    0x444ffda8,0x2ffecc41,0xb317ffc4,0x3ffa05ff,0x362ffd42,0x7fd41dff,
    0x17fecc0f,0x4d67ffe4,0x7004db98,0x37e40dff,0x467fdc00,0x27fcffb8,
    0x4c0afffa,0x3fea3ffd,0x20fffc41,0x3fea06fc,0x00ffe200,0x3f666662,
    0x2621999f,0x99ffd999,0xfffe8019,0xfa80ffff,0x4fffffff,0xffffffa8,
    0xfd300dff,0x05ffffff,0x7f7fff4c,0x7f440eff,0xffffffff,0x0bfffea1,
    0xffffffb8,0xfb004fff,0x037e40ff,0xfffffd80,0x7e47f9af,0xffffffff,
    0x40ffd44f,0x3f21fff9,0x803fea06,0xfb803ff8,0xffffffff,0xffff71ff,
    0x3fffffff,0xffffc880,0xffb300ff,0x3ea05bff,0x01dfffff,0xdffffd88,
    0xfffd8801,0x7fdc03ef,0x540cffff,0xd9800bde,0x1bdefffe,0x409ff500,
    0x360006fc,0xff32dfff,0xfffffb30,0x3ff5019d,0x643ffea0,0x03fea06f,
    0xb803ff88,0xffffffff,0xfff71fff,0xffffffff,0x00998003,0x4c400220,
    0x22000099,0x00620000,0x00004cc0,0x80002600,0x00000008,0x01100006,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x5554c000,0x33333301,0x06621333,0x44002620,
    0x531009aa,0x99980135,0x99999999,0x20026609,0x06660998,0x10099880,
    0x0ccc0153,0x22133100,0x02620019,0x99802660,0x3104c401,0x04cc4013,
    0x26666666,0x31099999,0x00199801,0x3fffffa6,0x3ffe22ff,0x56ffffff,
    0x6fd803ff,0x3ffff620,0x3ffa2eff,0x882effff,0xffffffff,0x3fa4ffff,
    0x0ffec01f,0x3a007ff9,0x7ff5c0ff,0xffd82eff,0x23ff7001,0xf7000ff9,
    0x17ff540b,0x202fff98,0x1ffea5fc,0x3e66ffc8,0xffffffff,0x0dfb4fff,
    0xc801ffe4,0xffeeffff,0x3fffe22f,0xf56fffff,0x06fd803f,0xfffffff7,
    0x3ffe2bff,0x42ffffee,0xfffffff8,0x264fffff,0x3fea06ff,0x007ffc44,
    0xfe893fea,0x2ffffeff,0xe801ffd4,0x007fe66f,0x7f542fe4,0xff302fff,
    0x52fe40df,0x3fe05fff,0x3fffe67f,0xffffffff,0x3ea0dfb4,0xbff5004f,
    0x99815103,0x6fe99999,0xfd803ff5,0x1bfffc86,0x40a97262,0x4c0fffb8,
    0x99999999,0x7fe41ffe,0x701dfd03,0xffe809ff,0xa82ffee0,0x3fe20fff,
    0x23ff8806,0xf9001ff8,0x77fff4c9,0xfff302ff,0xb97f205f,0xffa85fff,
    0x4ccccc7f,0x3ffa9999,0xbff30dfb,0x007ff400,0x2adfd000,0x37ec01ff,
    0x0003bfe6,0x000ffec0,0x7f413fea,0x017fe40f,0x3ea01ffd,0xf700b83f,
    0x00ffd87f,0xff10ffdc,0xd93f6005,0x2ffb9dff,0x0dfdff30,0xfcfb97f2,
    0x3fe7ec0f,0xd87fe400,0x077f446f,0x000bff00,0xff56fe80,0x746fd803,
    0x200000ff,0x22002ffa,0x3fea06ff,0x5017fe65,0x1bfa09ff,0x513fe200,
    0x6fe807ff,0xfb002ff8,0xff70f547,0x3effe605,0x325fc81f,0x3e22fecf,
    0x44007f9f,0xb1bf64ff,0xff8001ff,0x7f400006,0xd803ff56,0x013fea6f,
    0x01ff5000,0x200ffec0,0x1ffb1ffd,0xb83ffd00,0xff0002ff,0x205ff88b,
    0x2ff83ff8,0xb807fb00,0x1ff302ff,0x4bf90bfd,0x2e5fbbfc,0x000ff9cf,
    0x6fd83ff2,0x2000bfee,0x00004ffd,0x0ffd5bfa,0xffb9bf60,0x7ec00000,
    0x13fea006,0x3ebbfe20,0xbff3003f,0x10005ff8,0x1ffb07ff,0x3a07fee0,
    0x3a065c3f,0x17fdc02f,0xffb8ff98,0x7f92fe41,0x27fa1ff1,0xf1000ff8,
    0xf56fd89f,0x3e60007f,0x80002eff,0x03ff56fe,0x1ff66fd8,0xefd88000,
    0x0dff1001,0x2ffffdc0,0x5c7ff600,0xf70001ff,0x05ff503f,0x1ff41bf6,
    0x2fe87ff1,0x9817fdc0,0xc8bff0ff,0x7ecff65f,0x1ff16f8b,0xb03fee00,
    0x009ff1df,0xffffe980,0xdfd0000c,0xfb007fea,0x65437f4d,0x7cc3cccc,
    0x000dffff,0xd0007ff6,0x88001fff,0x04ff8dff,0x20dff100,0xff885ff8,
    0x7d49fb03,0x200ffc6f,0xff302ffb,0xfc83fee1,0x77d4ff65,0x03ff13fb,
    0xfb09ff10,0x0000bfdf,0x27ffffdc,0xfab7f400,0xf37ec01f,0xffff90bf,
    0xffff98df,0xfa801dff,0xffc8004f,0xffc8000f,0xb0000ffd,0x7fec03ff,
    0xd807fd40,0x87fff64f,0x7fdc01ff,0x221ff302,0xe97f24ff,0x1fdff13f,
    0x2e007fe2,0xfffd80ff,0xa800006f,0x000efffd,0x0ffd5bfa,0x6fe9bf60,
    0x6feaaa98,0xffca9998,0x1bfe201f,0x3fffe600,0xfff88005,0xff90003f,
    0x42ffa807,0x97f206fd,0x3fe4fdff,0x817fdc00,0x3ff20ff9,0x1ff4bf90,
    0x2ff8dffb,0xd82ffc40,0x004ffaef,0xdffd3000,0xfab7f400,0xb37ec01f,
    0x0dfb00df,0xc81bfa20,0xfe8001ff,0x8002ffdf,0x90006ffb,0xff1009ff,
    0x2e03ff8b,0xdf5bf55f,0xf7003fe2,0x83fe605f,0x4bf94ff8,0x0bfe62fe,
    0xffb805ff,0x3f2dfb01,0x2000003f,0xfd001ffd,0xb007fead,0x403fe4df,
    0x3ee006fd,0x04ffa81f,0xf8bffb80,0xff88006f,0x4ffc8004,0xfa9ff600,
    0x65bee00f,0xf89ff8af,0x02ffb807,0x7fd81ff3,0x217fcbf9,0x017fc0ed,
    0x6fd817fe,0x00007ffa,0x801ffcc0,0x03ff35fe,0x3fee5ff8,0x0037ec03,
    0xfe885ff5,0x6ff88006,0x20013fee,0x7e4004ff,0x7fd4004f,0xfa80dfb2,
    0x33f61ff6,0xffb807f9,0x981ff302,0x3e5fcaff,0x07ff002f,0xfb00ffdc,
    0x0077fc4d,0x1ffcc000,0xf8a7fcc0,0x93fe603f,0x7ec06ff8,0x03fee006,
    0xb0003ff9,0x1ffe83ff,0x0027fc00,0x10009ff9,0x00ffe9ff,0x54bf5ff5,
    0xb806f9ff,0x1ff302ff,0x4bf9dfb0,0x7ff002ff,0x3602ffc0,0x02ffd46f,
    0x8ffe4000,0x45ff7008,0x3ff206ff,0x806ffdc1,0xff1006fd,0x004ff98d,
    0xf984ffb8,0x27fc006f,0x004ffc80,0x3febff60,0x7e7fcc00,0x1bf3fe22,
    0x4c0bfee0,0xeff980ff,0x005ff15f,0x7fdc0ffa,0x6437ec01,0x7b5004ff,
    0x3f666133,0x226fea5f,0x7dc6ffda,0x3fee21df,0x37dffd05,0x045bfa61,
    0x207ffdcc,0xaaaabffe,0x3e22aaaa,0x7ff900ff,0x4027fc00,0xaaaaeffc,
    0x2a02aaaa,0x9806feff,0x7ec0ffff,0x555445ff,0xaaacffda,0x3a01ff31,
    0x3ff15fff,0x7c13fa00,0x06fd806f,0xf5005ffd,0xffffffff,0xffffa8df,
    0xfd81ffff,0xefffffff,0xffffb100,0x32dfffff,0xffffffff,0x7fffd41e,
    0xffffffff,0x880fff66,0xff000fff,0xffffd009,0xbfffffff,0x1ffffc40,
    0x42fffc40,0x7d45fffa,0xffffffff,0x01ff34ff,0x7cd7ffea,0x09fd001f,
    0xfb005ff7,0x03ffe20d,0xfffffb30,0xd9105bff,0x4019dfff,0x3effffea,
    0xffffb500,0x3ff239df,0x502effff,0xffffffff,0x3eadffff,0x5ffb806f,
    0xd009ff00,0xffffffff,0xfd80bfff,0xfff000ff,0x513ffe05,0xffffffff,
    0x3fe69fff,0x4d7ffa00,0x9fd001ff,0x3600dff0,0x1bfea06f,0x00999880,
    0x20002620,0x4c400018,0x13331009,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x10000000,0x33333333,
    0x4c433333,0x99999999,0x10033119,0x26666213,0x33333001,0x4c133333,
    0x99999999,0x13333109,0x98188000,0x19999881,0x06662000,0x04ccc000,
    0x00ccccc4,0x20000cc4,0x00000a98,0xdc980000,0xfb001cdf,0xffffffff,
    0x3ee3ffff,0xffffffff,0x803ff57f,0xffff76fd,0x3e03bdff,0xffffffff,
    0x3ffffe5f,0xf56fffff,0x7bdfffff,0x7c1fe800,0x7fffe40f,0x000befff,
    0x0003fffb,0xc83fffc8,0xdfffffff,0x0007fc82,0x5fffffd5,0x00007d10,
    0xffb81f44,0x803fffff,0xfffffffd,0x71ffffff,0xffffffff,0x07feafff,
    0x3feedfb0,0x4fffffff,0xfffffff8,0x3ffe5fff,0x6fffffff,0xfffffff5,
    0x3e003dff,0x321fe20f,0xffffffff,0xfff800ef,0x3e60004f,0xffc83fff,
    0xefffffff,0x2001ff20,0xffedfffc,0x027fe44f,0x07ffcc00,0x2a273ff2,
    0xf0003ffd,0x9ff0009f,0xb007fea0,0xa83feedf,0x7fc2fffc,0x013fe004,
    0x9530ffd4,0xf8805fff,0x7e43fcc7,0x2ffeccc7,0x1ffbfea0,0xffefe800,
    0x64c7fc83,0x1ff26ffe,0xb09ff500,0xdffc83ff,0xdff50000,0xb03ff883,
    0xff0001ff,0x09ff0009,0xfb007fea,0x2e03feed,0x027fc5ff,0x2a009ff0,
    0xdff301ff,0x7d47f980,0x3a07fc86,0x56fec07f,0xfb8001ff,0xfc83ff9f,
    0x64bff207,0x2ffc007f,0xff70bfd0,0xffc8001d,0x206fd80e,0xf8002ff9,
    0x4ff8004f,0xd803ff50,0x101ff76f,0x04ff8dff,0x54013fe0,0x3fee01ff,
    0x77e554c3,0xaaefcaaa,0x7e40ff92,0x22ffe00f,0x7cc004ff,0xc83ff8af,
    0x53fe207f,0x3e6007fc,0x03fee02f,0x4007ffe6,0x3fe04ffd,0x001ffc04,
    0x7c0027fc,0x03ff504f,0x1ff76fd8,0x9ff1bfa0,0x8027fc00,0x7f401ffa,
    0x7ffffe47,0xffffffff,0x7e40ff96,0x6c3fea06,0xaff4006f,0x7fc83ff8,
    0x7fcb7f40,0x807fee00,0xfd101ff9,0x7ff4407f,0x2b3fe203,0xffaaaaaa,
    0x04ff8005,0xf504ff80,0x76fd803f,0x9ff101ff,0x3e004ff8,0x3ff5004f,
    0x6547fc80,0xecccefec,0xff93ccef,0xd813fa20,0x007fee6f,0xff887fdc,
    0x7c07fc83,0x400ff95f,0x3e201ffb,0x3ff6202f,0x02fff984,0x7fffffcc,
    0x05ffffff,0x8004ff80,0x3ff504ff,0xff76fd80,0x41ffe881,0x3fe004ff,
    0x03ff5004,0xf901ffb8,0xfc83fd87,0x00efea87,0x4ff88ffe,0x223ff880,
    0x07fc83ff,0x3fe4ffe2,0x807ff300,0xffc803ff,0x01dff50d,0x5559ff10,
    0x03555555,0x0009ff00,0x3fea09ff,0xffffffff,0x99ff76ff,0xf05fffd9,
    0xddddddff,0x7ffffc3d,0xf53fffff,0x2ffa803f,0x2fe87fb0,0xffffffc8,
    0x7fd404ff,0x6c037f41,0x41ffc46f,0x3ff607fc,0x4400ff90,0xff500eff,
    0x1dff7009,0x4007bfea,0x000003ff,0x3e0013fe,0xffff504f,0xffffffff,
    0x3ffffeed,0xfff01cff,0x5fffffff,0x7ffffffc,0x3ff53fff,0xd02ffa80,
    0xc81fe85f,0xffffffff,0x21bf604f,0x3ea01ffb,0x41ffc41f,0x3ae627fc,
    0x01ff23ff,0x779fff50,0x807ffff9,0xff984ffc,0x05ff802f,0x13fe0000,
    0x5413fe00,0x99999aff,0xff76fd99,0x409ffb77,0xaaaaaeff,0x273fe0aa,
    0x50999999,0xffb803ff,0xff83ff02,0x999ffc80,0xf06ffeba,0x09ff309f,
    0x3e20ffe2,0xffffc83f,0x643fffff,0xffa8007f,0xffcfffff,0x07ffd102,
    0x201fff44,0x00002ffb,0xf0009ff0,0x07fea09f,0x3feedfb0,0x7c13fe60,
    0x13fe004f,0x200ffd40,0x33311ffc,0xff3335ff,0x03fe4333,0xffa87ffb,
    0x320dfd01,0x07ff106f,0xbffffff9,0x00ff9019,0x2af2ea20,0xe981ff88,
    0xfd8802ff,0x3ffe204f,0x0002880c,0xff0009ff,0x007fea09,0x03feedfb,
    0x9ff03ff9,0x8027fc00,0x7ec01ffa,0x3ffffea7,0xffffffff,0x440ff90f,
    0x67fec5ff,0xffeccccc,0x5567fcc1,0xadffbaaa,0x133ff91a,0x000ff900,
    0xa81ff500,0x64001eff,0xfd300dff,0xfffddfff,0x013fe000,0x7d413fe0,
    0xbb7ec01f,0x2ffc40ff,0xff0027fc,0x07fea009,0x3265ff98,0xdcccffdc,
    0x3f24ccff,0x3e37fc07,0xffffffff,0x7fd43fff,0xffffffff,0xff95ffff,
    0x007fc800,0x5c5fd800,0x70000eff,0x32203dff,0x5efffffe,0x009ff000,
    0x3ea09ff0,0xbb7ec01f,0x1ffc80ff,0xff0027fc,0x07fea009,0xf502ffd8,
    0xf905fb8d,0x527fc40f,0xddddddff,0xe98dffdd,0xeeeeeeee,0xf94eeeff,
    0x07fc800f,0x0ffd4000,0x0000bff9,0x3001fff3,0xf8000133,0x4ff8004f,
    0xd803ff50,0x101ff76f,0x04ff8bff,0x54013fe0,0xffd881ff,0xf717ee05,
    0xc81ff209,0x01ff62ff,0x10007ff2,0x0ff907ff,0x0007fc80,0xd113fee0,
    0x74400007,0x80000004,0x4cc404ff,0x999cff99,0xd803ff51,0x201ff76f,
    0x13fe0ffd,0x999cff80,0xff509999,0xfff97535,0x227dc01d,0x3ff903fc,
    0x9ffd7333,0xf9804ff8,0x7fc4003f,0x4007fc83,0x99999ffc,0x26620999,
    0x0dfffcba,0x00000000,0x7fc00000,0x7fffdc04,0x57ffffff,0x6fd803ff,
    0x3e601ff7,0x8013fe4f,0xffffffff,0xffff56ff,0x009fffff,0x03fd87f9,
    0xfffffff9,0x2ffa89ff,0x800dff00,0x7fc83ff8,0x7fffe400,0x22ffffff,
    0xeffffffa,0x00000002,0xf0000000,0xfffb809f,0x7fffffff,0xfd803ff5,
    0x6c01ff76,0x009ff0ff,0x7ffffffc,0xfff56fff,0x0017bdff,0x05fd0ff6,
    0x3bfffff2,0x07fd80bd,0x8003ff20,0x7fc83ff8,0x7fffe400,0x22ffffff,
    0x02cdeffa,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xd9710000,0x3003bdff,
    0x039dddb7,0x0737fb2a,0x2f5c0000,0x9301dd30,0x549ddffd,0xeeeeeeee,
    0x227ae4ee,0x5db10cec,0x6c04eea8,0xb87ba0de,0x3eb83dfd,0x019dfd71,
    0xdd500bdb,0xb801baa3,0x0032e05e,0x44006644,0x32664401,0xfd000599,
    0xbfffffff,0x7ffffdc0,0x7fec45ff,0x004fffff,0xdf900ffe,0x3607fd40,
    0x7fffffff,0x3fffffea,0x3f25ffff,0xe8cfffd9,0x7fec4fff,0xf87ff902,
    0xffffe89f,0x74e7e45f,0x40efffff,0x7f401ffc,0x4003fe67,0x07f605fd,
    0x2037ff40,0x3e204ff9,0x013fee7f,0x2a6afba0,0xfd83fffc,0x5dbaabef,
    0x5cd67ff4,0xff004ffe,0x206fc807,0x3ff20ffa,0x24b9999c,0xaaaaaaa8,
    0x33f24ffd,0xafcefabf,0x7ffc45fc,0x7c2ffcc0,0xeaadfebf,0x3fbf22ff,
    0x4ffeaadf,0xf1027fc4,0x00ffc49f,0xf9064fd8,0xfff80441,0x3fffa02f,
    0x54dff101,0x008004ff,0xff51bfe2,0x0bfee00b,0x7c00ffec,0x037e403f,
    0x27fc1ff5,0x37fc4000,0xfff97ff2,0xff50ff33,0xf80efe8b,0x5ff83fff,
    0x3a0ffff2,0x00ffd87f,0x2ff81ff7,0x3e27fd00,0x3ea1f90d,0x07fff904,
    0x817f37ea,0x0ffea6ff,0x9ff60000,0xf1006ff8,0x2ffc409f,0x3201ffc0,
    0x43fea06f,0x80004ff8,0x7fe40ffe,0xff89bfe0,0xf92ffc80,0x0bffe03f,
    0x7ff937f4,0x3ea1ff20,0xd0bfd02f,0x7c2fe87f,0x75ffd32f,0x409ffb1f,
    0x3fd02ffe,0x3fe05ff1,0x000ffe65,0xf99fee00,0x3ff3002f,0xf806fd80,
    0x037e403f,0x7ff41ff5,0x3ff20003,0x7fc5fc81,0x7403fe23,0x203ffaff,
    0x9ff204ff,0x3fee06fc,0xf985ff80,0x264fd82f,0x07fe24ff,0x9fffffd5,
    0x81ffd801,0x03fea4fb,0x2ff997fa,0x332a6000,0x3ee7fdcc,0x1ff7000f,
    0xf807fc80,0x037e403f,0x7fcc1ff5,0x2a001cff,0x89f903ff,0x03fe22ff,
    0x02ffffc4,0xf9000ffe,0x407fd40d,0x3fe40ffc,0x3fee5fc8,0x6403fe67,
    0xf8800fff,0x40ff886f,0x24fe84fe,0x98002ff8,0xfffffffe,0x801ff27f,
    0xffb807fc,0xffffffb0,0x3fffffff,0xffa81bf2,0x7ffff4c0,0x2ffcc03e,
    0x2ff89f90,0xfb803fe2,0x1ffc00ff,0xa81bf200,0x3ff980ff,0x6fb827fc,
    0x7d4bfbfa,0xffffe987,0xfea880bf,0x984fc81f,0x204c41ff,0x7c400099,
    0xdaaaacff,0x003ff27f,0x7e403fdc,0x3fffff67,0xffffffff,0x7d40df91,
    0xfff9300f,0xdfd101df,0x3e27e401,0x403fe22f,0x403fffe8,0x7e4003ff,
    0x403fea06,0x07fea6fe,0xbef8bfcc,0x74cdf75f,0xfd8fbaff,0x3bffee4f,
    0xb00ff981,0x800000bf,0xff700ffd,0xa800ffdc,0x37ec00ff,0xff333331,
    0x64333339,0x03fea06f,0x213ff660,0x7e401ffd,0xff117fc4,0x3f7ff601,
    0x00ffe01f,0x7d40df90,0x23ff700f,0x3fe206fd,0x8ff8bfb8,0x437e24fc,
    0x5c9f50fc,0x0ffa03ce,0x3322ff88,0xcccccccc,0x2ffc02cc,0x7fccff70,
    0x07ff3004,0x7c027fc4,0x07fe403f,0x2000ffd8,0x17fdc6fe,0x3fe27e40,
    0x2e03fe22,0x0ffe8bff,0xc8007ff0,0x03fea06f,0x7fc67fc4,0x7f4ffc03,
    0x87fb5fd0,0x01107e41,0x31003300,0x7fffffc1,0x03ffffff,0xffa82ffc,
    0x800fff47,0xff900ffe,0x807ff003,0xffc82ffb,0x9bfa000f,0xf9004ff9,
    0x3e22ff89,0x32ffcc0f,0x0ffe0dff,0x540df900,0x3ff200ff,0x7f400ffb,
    0x3b7ee6fb,0x00fec02f,0x32000000,0xcccccccc,0x7f402ccc,0x3fff262f,
    0x0dfffcc7,0x77fd4973,0x013ff221,0x3e601ffc,0xfffb12ef,0x2606e61f,
    0xfff14ffc,0x33333333,0x8bfe27e4,0x3fe20ff8,0x427fe40f,0x7e4003ff,
    0x803fea06,0x804ffff9,0x3e23fffd,0x76401fff,0x00000001,0x7cc00000,
    0xbeffffff,0xffffb87f,0x7e45ffff,0x5fffffff,0x200ffe00,0xeffffffd,
    0xfff50ff9,0x1dffffff,0x3ffffff2,0xf91fffff,0x3e22ff89,0x40bff60f,
    0x1ffc2ffe,0xa81bf200,0x7ff400ff,0xfffc801f,0x007ffec0,0x00000000,
    0xd5000000,0x3e69dfff,0xfffdb107,0xffb307df,0xf8005dff,0xfff9003f,
    0x4c3fe29f,0xeffffffe,0x7ffffe43,0x91ffffff,0x222ff89f,0x09ff90ff,
    0xff0fffc4,0x06fc8007,0xf7003fea,0x3fee00df,0x007ffb86,0x00000000,
    0x33333332,0x002ccccc,0x30000262,0x000c4001,0x98001330,0x4cccc001,
    0x00000000,0x00000000,0x00000000,0x00000000,0xf0000000,0xffffffff,
    0x00007fff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x33333332,0x002ccccc,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_30_usascii_x[95]={ 0,6,3,0,1,0,0,6,4,3,2,1,3,3,
5,1,1,1,2,2,0,2,1,1,1,1,6,3,2,1,3,4,0,0,2,1,1,2,3,0,1,2,2,2,
3,0,1,0,2,0,2,1,1,1,0,0,0,0,1,5,2,4,1,0,0,1,2,2,1,1,0,1,2,2,
1,2,2,1,2,1,2,1,2,2,0,2,0,0,1,0,2,2,7,3,0, };
static signed short stb__consolas_30_usascii_y[95]={ 22,1,1,2,0,1,1,1,0,0,1,6,17,12,
17,1,2,2,2,2,2,2,2,2,2,2,7,7,5,10,5,1,1,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,0,2,25,1,7,1,7,1,7,1,7,1,1,
1,1,1,7,7,7,7,7,7,7,2,7,7,7,7,7,7,0,-2,0,10, };
static unsigned short stb__consolas_30_usascii_w[95]={ 0,5,10,16,14,17,17,4,9,10,13,15,8,10,
6,14,15,14,13,13,16,13,14,14,14,14,5,8,12,14,12,10,17,17,13,14,15,12,11,15,14,12,11,14,
12,16,14,16,13,17,14,14,15,14,17,16,17,17,14,8,13,8,14,17,10,14,13,12,14,14,16,15,13,13,
12,14,13,15,13,15,13,14,14,12,15,13,16,16,15,16,13,12,3,12,16, };
static unsigned short stb__consolas_30_usascii_h[95]={ 0,22,8,20,26,22,22,8,29,29,13,16,11,4,
6,25,21,20,20,21,20,21,21,20,21,20,16,21,18,8,18,22,28,20,20,21,20,20,20,21,20,20,21,20,
20,20,20,21,20,26,20,21,20,21,20,20,20,20,20,29,25,29,11,4,7,16,22,16,22,16,21,22,21,21,
28,21,21,15,15,16,22,22,15,16,21,16,15,15,15,22,15,29,31,29,7, };
static unsigned short stb__consolas_30_usascii_s[95]={ 251,163,235,101,101,216,198,251,51,18,197,
45,211,216,191,134,178,173,124,59,150,164,194,220,209,194,248,224,222,235,209,
1,83,132,118,233,85,72,60,43,30,17,16,235,181,203,188,147,167,116,45,
1,1,28,138,156,88,106,73,61,149,29,220,198,180,1,184,16,26,235,86,
41,72,117,70,57,103,102,149,29,12,169,134,75,131,61,163,180,118,234,88,
38,1,5,163, };
static unsigned short stb__consolas_30_usascii_t[95]={ 10,1,99,78,1,1,1,1,1,1,99,
99,99,24,24,1,33,56,56,56,78,33,33,56,33,78,33,33,78,108,78,
33,1,78,78,33,78,78,78,56,78,78,56,56,78,56,56,33,78,1,78,
56,78,56,56,56,56,56,56,1,1,1,99,24,24,99,1,99,33,78,33,
33,33,33,1,33,33,99,99,99,33,1,99,99,33,99,99,99,99,1,99,
1,1,1,24, };
static unsigned short stb__consolas_30_usascii_a[95]={ 264,264,264,264,264,264,264,264,
264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,
264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,
264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,
264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,
264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,
264,264,264,264,264,264,264, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_30_usascii_BITMAP_HEIGHT or STB_FONT_consolas_30_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_30_usascii(stb_fontchar font[STB_FONT_consolas_30_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_30_usascii_BITMAP_HEIGHT][STB_FONT_consolas_30_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_30_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_30_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_30_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_30_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_30_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_30_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_30_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_30_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_30_usascii_s[i] + stb__consolas_30_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_30_usascii_t[i] + stb__consolas_30_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_30_usascii_x[i];
            font[i].y0 = stb__consolas_30_usascii_y[i];
            font[i].x1 = stb__consolas_30_usascii_x[i] + stb__consolas_30_usascii_w[i];
            font[i].y1 = stb__consolas_30_usascii_y[i] + stb__consolas_30_usascii_h[i];
            font[i].advance_int = (stb__consolas_30_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_30_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_30_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_30_usascii_s[i] + stb__consolas_30_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_30_usascii_t[i] + stb__consolas_30_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_30_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_30_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_30_usascii_x[i] + stb__consolas_30_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_30_usascii_y[i] + stb__consolas_30_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_30_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_30_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_30_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_30_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_30_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_30_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_30_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_30_usascii_LINE_SPACING
#endif

