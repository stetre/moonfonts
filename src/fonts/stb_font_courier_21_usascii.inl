// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_21_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_21_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_21_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_21_usascii_BITMAP_HEIGHT         54
#define STB_FONT_courier_21_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_21_usascii_FIRST_CHAR            32
#define STB_FONT_courier_21_usascii_NUM_CHARS             95

#define STB_FONT_courier_21_usascii_LINE_SPACING          10

static unsigned int stb__courier_21_usascii_pixels[]={
    0x4040c750,0x55502081,0x01554020,0x03020814,0x9805e4c0,0x2e201cec,
    0x2002e202,0x555101c9,0x000b8155,0xbb980000,0x88003510,0x7300002b,
    0x2aaaaa03,0x0055402a,0x055026a2,0xb16e4b80,0x446416c4,0x2c06d544,
    0x2c402ae8,0x06c5895c,0x42d45640,0x907910da,0x1550b537,0x26b66017,
    0x556cc0db,0x507e20aa,0x27d55dbb,0xdeed8cea,0x1337b301,0xcb8016e6,
    0xedb885b9,0x3361ed8d,0x557445b9,0x6d406aaa,0x932b3601,0x044006a8,
    0x40aa586e,0x88320735,0x0162adfb,0x591a215c,0x70ea024c,0x21c82c43,
    0x70e1dc49,0x730e6060,0x8b61f880,0x1de81ed8,0x01b10766,0x95160058,
    0x31b661d8,0x44142a87,0x3701b805,0x70000b00,0x560372c3,0x8f41903a,
    0x2c0164c8,0x1b1a61e4,0x791cc2c0,0x581c9a60,0x5800511c,0x987c01cc,
    0x1f81f883,0x4006c598,0x4d075005,0x0646a83a,0x4015402c,0x1600b01b,
    0x5ddddb10,0x80dcb0dc,0x54320555,0x2e016182,0x21e80f82,0xda89603a,
    0x3a7803a3,0x1ddc4680,0x3730ee00,0x0643e035,0x9a0681c8,0xdb1b0048,
    0xc82a817b,0x751a01b0,0x20d803a8,0x1b9deec8,0x2f777f64,0x80fbaa58,
    0x2e586e39,0x66575541,0x0498640a,0x34c2c02c,0x4b02c3c8,0x901639ad,
    0x2602c161,0x3ec880cb,0x0dcbde98,0x3b01c87c,0x1552c0f0,0x8b7a05b9,
    0x3a62c46a,0x90d10191,0xb001b959,0x077662d8,0x16a5802c,0x964a8e60,
    0x6d754c0d,0xb70640ab,0x3a80b037,0xa89705a8,0x1ccaab02,0x20b0e809,
    0x801cc985,0x48800db8,0x3f309134,0x5c5505f0,0x5f0972da,0xa9cb8550,
    0xd70932ad,0x009d9d70,0x7c41dc75,0x65600b01,0x4e873003,0xcac4176b,
    0xb7301900,0x5c1602c3,0x20b0b504,0x038e6735,0x44b059e2,0x44002a1c,
    0x6458b005,0x81ddb89c,0x45c88cdd,0x1e0640fa,0xa8aca858,0x33223321,
    0x00ea2545,0x1d806c19,0x177600b0,0x592a3980,0xb5b75036,0x58019037,
    0xb5039816,0x20ae12e0,0x39937725,0x0682c770,0x6400aa72,0x4400c800,
    0x581b8bdb,0x091039b7,0x01606855,0x25b91032,0x202c06c5,0x01c806c5,
    0x0ee7600b,0x2c371cc0,0x56dd4437,0x070c82ae,0x40360596,0xb1079069,
    0x640988d0,0x30722cc3,0x00382a0b,0x4001600b,0x1a00581b,0x7303f06e,
    0x8b005980,0x0e60580c,0x2c07e077,0x200ee580,0x2e586e39,0x640b3981,
    0xb1dc47f0,0x01f01260,0x3907203d,0x3773aa00,0x40762c40,0x40b8921a,
    0x770b623a,0x0dc00644,0x4455002c,0x3620de85,0x20036600,0x0ae24c49,
    0x20ec40c8,0x200b01ec,0x8e601e45,0xa81b961b,0xab8640b2,0xd82c2ded,
    0x1a61e400,0x10f44588,0x0417b101,0x700b336a,0xceea8377,0xdced983d,
    0x31027dc3,0x27662159,0x399b9001,0x6674ef54,0x26e64c1c,0x01b73310,
    0x5807b9b7,0x75d9bd10,0x777f6c7d,0x323f444e,0x5c5502ef,0x2a82a961,
    0x82c0640b,0x68805885,0x50720164,0xe881bbbf,0x80ddddde,0x11002001,
    0x40180200,0x5531aaaa,0x00080055,0x40044011,0x00802aaa,0x00031000,
    0x23900000,0x70ba2c5b,0x036aa163,0x39157416,0x02c4ae00,0x80008244,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x0c993330,
    0x80820c04,0x2a0702aa,0x4100062a,0x00005000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x001aaa88,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x002a8000,0x0500aaa2,0x3a61eea8,0x4405883e,0x2a201cec,
    0x881a801c,0xcccca802,0x8e6dc43c,0x50bdb982,0x64c73322,0x5bd710cc,
    0x8a2f6e20,0xccccccca,0x59999913,0x970f32e0,0x2e1e6479,0x70f320cc,
    0x66665c99,0xb9333201,0x899950cc,0x99972ccc,0x00354999,0x0580d551,
    0x104981c8,0xc88ed40f,0x5c9bd983,0xdda972a0,0xca998806,0x54476609,
    0xb98ecc5e,0x9827664d,0x45a87a2c,0x6cf931d9,0x5999e999,0x36a66766,
    0x22056c42,0x107a20d9,0x441e983d,0x26b2621e,0x98276600,0x1067a21e,
    0x3a6621b3,0x8002c099,0x2c402c05,0x2203006c,0x40d83906,0x4cb1b02a,
    0x439800b0,0x224980e8,0x82449705,0xc86e0e1b,0x58b16680,0x1cc2c064,
    0x5c4982a8,0x02c89302,0x98320037,0x160c580d,0x2000b02c,0xdddfd505,
    0x2441905d,0xb303c800,0x2570b018,0x39800b05,0x01b8015c,0x03704886,
    0xb0412398,0x20322c58,0x40b0580c,0x2b80b11c,0x800dc095,0x3201b30c,
    0x582c5d30,0x13b76360,0x200b0160,0x3a603248,0x3401d05e,0x59622c40,
    0x439800b0,0x88016005,0x6c403704,0x40803260,0xb3032045,0x809106e0,
    0xb5b001b5,0x19001b80,0x571b8095,0xb02c1229,0x1602541d,0x446400b0,
    0x80d05804,0x3206c01c,0x2002c161,0x0b002c39,0x01b82440,0x9b7103d9,
    0x5e405805,0x16204dca,0x03e98037,0x1b803f10,0x05db9900,0x0e6b5954,
    0x0b01b02c,0x1002c058,0x20b00199,0x3b006c05,0x0582c498,0x45873013,
    0x0b1cccc8,0x81b82440,0x0b510049,0x2a67202c,0x0b06c01e,0x5bc80160,
    0x64040dc0,0x2e603b13,0x20551958,0x202c1605,0x32002c05,0x8160b005,
    0xb03b1068,0x2e0b0581,0x01643982,0x588016cb,0x00310370,0xc80b01b8,
    0x3a803620,0x40160075,0x0dc0773a,0x4160642c,0x37732ac8,0x0b058160,
    0x2002c058,0x2a0b001c,0x3b109503,0x3fbbbba0,0x50570584,0x99605a83,
    0x901d0606,0x37039800,0x88190160,0x000dac05,0x1c8b100b,0x190b0370,
    0x419903a8,0x2c0b00cd,0x2e02c058,0x00588081,0x220bd816,0x4001d885,
    0x112a0b05,0x1620b609,0x5c4b8199,0x0bb81d43,0x816207d4,0x1d406405,
    0x2c00b570,0x406c06c0,0x80c8581b,0x05d8bb05,0x80b05816,0x65e6c405,
    0x1593312d,0x9f901600,0x80d88199,0x20582c02,0x201ccce9,0x82dcbcdc,
    0x702eccfb,0x3e20797d,0x66edcc1f,0x7f7441dd,0x3bf621ee,0x5f105d85,
    0xeefee880,0x362f7441,0xdddd91ee,0x7ec4fddd,0x3a175c5e,0x3bb23dc4,
    0x3bf65eef,0x221dfb11,0x1eeefeee,0xaa981310,0xddd101aa,0x0603dddf,
    0xeeeeeeb8,0x329fd906,0x105eefee,0x004cc001,0x8018004c,0x000c4008,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x80000000,0x79912cca,
    0x0e666644,0x6666664c,0x999911cc,0x32619999,0x9701bccc,0x64479999,
    0x980bcccc,0x8e66444c,0x079503ca,0x98019999,0x0016c2cc,0x05b512e0,
    0x00000000,0x00900000,0x00000000,0x886a65b5,0x303a609d,0x41b7333d,
    0x99999d98,0x2667662c,0x37711c99,0x33b09933,0x9d98b533,0x4c43da99,
    0xb1164c4f,0x101db03b,0x6c409793,0x01db8198,0x7ec16d40,0x816ee4c6,
    0x544bdddc,0x2602dded,0x542abddc,0x82c01cdd,0xdb9ecaeb,0x6ec75c1d,
    0x2a7db05e,0x5dbf63dd,0x82c0644f,0x70584885,0x21b80c85,0x42c3a82a,
    0x20b0480d,0x320dc0dd,0x202d5449,0x4015c0b5,0x6cc00dc8,0xbc872203,
    0x42a8b710,0x4064046a,0xd8fa20ca,0x40b02d42,0x42453e5c,0x4412a1ec,
    0x1c88a3cc,0x580c87f5,0x096160b0,0x98419026,0x122c0aa0,0x06412057,
    0x906e2c6c,0x205ac1b1,0x12605739,0x440cd880,0x058000cc,0x00c16419,
    0x2982c1cc,0x2c0b2073,0x2162c190,0x5f10581c,0x3217cc00,0xb10b0580,
    0x1900dcb0,0xb8154122,0x4240b301,0xb8aeb05a,0x399cc641,0x0588640b,
    0x5d30003a,0x540007ae,0x6e447302,0xeca881bc,0x401c43dd,0xdccccccc,
    0x99d99953,0x58b06479,0x910580c8,0x641f8800,0xb06ccccc,0xd03d5333,
    0x66403d99,0x205504dc,0x6401b02a,0xb00ffccc,0xb0c8372c,0xd8b02c36,
    0xc8adec40,0xc88f6600,0x71ed801d,0x54412203,0x7505ec4c,0x99d80398,
    0xb0099999,0x858b0640,0x0910580c,0x0640e810,0xbccce82c,0x900dcb00,
    0x81541221,0x2401c81b,0x752c1644,0x2ea1906e,0x4ce54164,0xab9543b9,
    0x019b102a,0x7cc03362,0x50dc1225,0x4c0dc360,0x04b80583,0x58320580,
    0x82c0642c,0x02fe4048,0x02c16032,0x832004b0,0x0b02a860,0x0240a895,
    0x1b8d8b0b,0x82c3b064,0x45aaaaad,0x3221760c,0x07b3000d,0x4c2c81f9,
    0xa9603a25,0x15c1f4c2,0x5303d254,0x160c8160,0x20b0190b,0x02fe4048,
    0x02c16032,0x806400b0,0x11660aa5,0x2048370b,0x0dec4585,0x48858032,
    0xb91cc370,0x50001da8,0x5c41f45b,0x3620bdcd,0x641ddbcc,0x85eacdbd,
    0x443cccdb,0x00cdcbed,0x6c3bee0b,0x1efd97a5,0xfee997f6,0x80182eee,
    0x00b0580c,0x2019002c,0x81b30aa5,0x8241b80d,0x1dc8584a,0x570b0064,
    0x7b991220,0x0000a1b9,0x0180588c,0x00188030,0x02620044,0x00000060,
    0x6c000000,0x1dfd32ef,0x417bbfa6,0x104eefea,0xddddddfb,0x37bbbaab,
    0xeeeef80c,0xddfb11ee,0xfd887bdd,0xfb87e22e,0x92ff5c5e,0x5fec8bdf,
    0x00000044,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x2ee98000,0xed89774c,0x3ae17ae0,0x4c9db11e,0xddb11eee,0xddd70105,
    0x884c4bdd,0x6ec01809,0x44444441,0x00807700,0x7777774c,0x9999912e,
    0x00799999,0x00000000,0x00000000,0x00000000,0x4880dc00,0x970580c8,
    0x360b04b8,0xc8190b00,0x27e57ee2,0x37cc0ba6,0x37777776,0x36a760dd,
    0x6d3ee390,0x55555441,0x222220aa,0x00088888,0x00000000,0x00000000,
    0x00000000,0x21b1cc00,0x0580c82a,0x5701dd2a,0x06160488,0xf74fa859,
    0xb81dac47,0x8220002f,0x57f22dd8,0x000002d8,0x00000000,0x00000000,
    0x00000000,0xaac00000,0x0190193d,0x403ea80b,0x3760e458,0x3b84dbeb,
    0x45f53f98,0x5e81b10d,0xaaaaaa98,0x9030002a,0x00000000,0x00000000,
    0x00000000,0x00000000,0x2b195800,0x80b01905,0x11c804cc,0x40fee20b,
    0x263f104a,0x2598391f,0xbbba81f8,0x0003bbbb,0x00000000,0x00000000,
    0x00000000,0x00000000,0x56320000,0xb019058c,0x405a9640,0x4ec05748,
    0x36045985,0x44100960,0x00000003,0x00000000,0x00000000,0x00000000,
    0x00000000,0x32da8000,0xf90aa07b,0x80b30b20,0x54b2058d,0x00321623,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x22000000,
    0xcd80be0f,0x7f45eadc,0x01dfb11e,0x04080fa6,0x1fdddddd,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00044000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_21_usascii_x[95]={ 0,4,2,1,2,1,2,4,5,2,0,1,2,1,
4,2,2,2,1,1,1,1,2,1,2,2,4,2,0,0,0,0,1,0,0,1,1,0,1,1,0,2,1,0,
1,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,2,0,4,1,0,1,1,1,1,1,0,1,
1,1,1,0,0,1,0,1,1,1,1,0,0,0,0,1,2,0,5,0,1, };
static signed short stb__courier_21_usascii_y[95]={ 15,3,3,2,2,3,5,3,3,3,3,5,12,9,
12,2,3,3,3,3,3,3,3,3,3,3,7,7,5,7,5,4,3,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,2,3,3,19,2,6,3,6,3,6,3,6,3,3,
3,3,3,6,6,6,6,6,6,6,4,7,7,7,7,7,7,3,3,3,8, };
static unsigned short stb__courier_21_usascii_w[95]={ 0,3,7,9,8,9,8,3,4,4,7,9,5,9,
3,8,8,8,8,9,8,9,8,8,8,8,3,5,9,11,9,7,8,11,11,9,10,10,10,10,11,8,10,11,
10,12,11,10,10,11,11,9,9,11,11,11,11,11,9,4,7,4,8,12,4,10,11,9,10,9,10,10,11,9,
7,10,9,11,11,9,11,10,10,9,9,11,11,11,11,10,8,4,1,4,9, };
static unsigned short stb__courier_21_usascii_h[95]={ 0,13,6,15,15,13,11,7,15,15,8,10,6,2,
4,15,13,12,12,13,12,13,13,13,13,13,9,10,10,5,10,12,14,11,11,12,11,11,11,12,11,11,12,11,
11,11,11,12,11,14,11,12,11,12,11,11,11,11,11,15,15,15,6,2,4,10,13,10,13,10,12,13,12,12,
16,12,12,9,9,10,13,13,9,10,12,9,8,9,8,12,8,15,15,15,4, };
static unsigned short stb__courier_21_usascii_s[95]={ 234,137,66,21,36,107,116,251,59,64,49,
202,83,120,111,50,98,83,65,117,74,127,164,214,205,185,247,145,135,89,125,
136,77,104,67,114,46,35,24,103,1,247,92,223,212,91,79,54,13,86,164,
144,154,124,176,235,200,188,57,45,69,31,74,130,115,171,173,182,223,192,234,
194,1,44,1,245,13,212,224,151,152,141,236,161,23,13,37,1,25,33,57,
16,14,9,101, };
static unsigned short stb__courier_21_usascii_t[95]={ 14,1,43,1,1,1,31,31,1,1,43,
31,43,43,43,1,1,18,18,1,18,1,1,1,1,1,31,31,31,43,31,
18,1,31,31,18,31,31,31,18,31,18,18,18,18,31,31,18,31,1,18,
18,18,18,18,18,18,18,31,1,1,1,43,43,43,31,1,31,1,31,1,
1,18,18,1,1,18,31,31,31,1,1,31,31,18,43,43,43,43,18,43,
1,1,1,43, };
static unsigned short stb__courier_21_usascii_a[95]={ 178,178,178,178,178,178,178,178,
178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,
178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,
178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,
178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,
178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,
178,178,178,178,178,178,178, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_21_usascii_BITMAP_HEIGHT or STB_FONT_courier_21_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_21_usascii(stb_fontchar font[STB_FONT_courier_21_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_21_usascii_BITMAP_HEIGHT][STB_FONT_courier_21_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_21_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_21_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_21_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_21_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_21_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_21_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_21_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_21_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_21_usascii_s[i] + stb__courier_21_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_21_usascii_t[i] + stb__courier_21_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_21_usascii_x[i];
            font[i].y0 = stb__courier_21_usascii_y[i];
            font[i].x1 = stb__courier_21_usascii_x[i] + stb__courier_21_usascii_w[i];
            font[i].y1 = stb__courier_21_usascii_y[i] + stb__courier_21_usascii_h[i];
            font[i].advance_int = (stb__courier_21_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_21_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_21_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_21_usascii_s[i] + stb__courier_21_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_21_usascii_t[i] + stb__courier_21_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_21_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_21_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_21_usascii_x[i] + stb__courier_21_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_21_usascii_y[i] + stb__courier_21_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_21_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_21_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_21_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_21_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_21_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_21_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_21_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_21_usascii_LINE_SPACING
#endif

