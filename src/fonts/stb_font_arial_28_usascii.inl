// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_28_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_28_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_28_usascii_BITMAP_WIDTH         256
#define STB_FONT_arial_28_usascii_BITMAP_HEIGHT        102
#define STB_FONT_arial_28_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_28_usascii_FIRST_CHAR            32
#define STB_FONT_arial_28_usascii_NUM_CHARS             95

#define STB_FONT_arial_28_usascii_LINE_SPACING          18

static unsigned int stb__arial_28_usascii_pixels[]={
    0x26000031,0x00988001,0x01310062,0x037d404c,0xfffb80ae,0x9ffff32f,
    0x80000600,0x02600009,0x26000026,0x20011000,0x00040009,0x00000000,
    0x0fe20011,0x3ffb2600,0x400aceff,0xfd80dffa,0x20bff701,0x06fa80fb,
    0x754037a6,0xdff32ffe,0x3f6e207d,0x2001bdff,0xbefffec8,0x517e2001,
    0x7f64c05f,0x203ec0ce,0x201dffd8,0xfb5003f9,0x75c0039f,0x75c02dff,
    0x6d400bdf,0x404effff,0xfd3000fb,0xffb99bdf,0x7ecc09ff,0x981fd84f,
    0x3f883fff,0xeb887930,0x202effff,0x80df32fe,0xffeffffa,0xffa804ff,
    0x5ffffeff,0xfc87f500,0xfdfff701,0x00fdc1ff,0x05fd5bfb,0x7fe401f6,
    0x4400ffec,0x5ffffffe,0xfffffe98,0xffff902f,0x401dffff,0xdffa804f,
    0x3bfee602,0x361be600,0x204fb81f,0xffd8006c,0x02ffedec,0x81be65fd,
    0x64c1dff9,0x3fee04ff,0x2ffdcc1e,0x1fa17dc0,0xfd517fd4,0xdf01fccd,
    0x1fcc37cc,0xfb07fc40,0x12efd807,0xffe87ff7,0x41ffb88b,0x75cc3ffb,
    0x803ee07f,0x22002ffa,0x43fc06fe,0x03fd81fd,0xf98007f3,0x1bf67b1f,
    0x06f997f4,0xfa807ff3,0x04ff883f,0x36027fcc,0xfe837c0f,0x3e0ff984,
    0x7f89f306,0xbf7007e8,0x7fc06fa8,0x3ee6fc83,0x746fa81f,0x0bfe604f,
    0xff882fc4,0x7f440300,0x3f61fe04,0xfb01fd81,0xf737d401,0x0ff99ecb,
    0x0df32fe8,0x7e4017fa,0x8037ec1f,0x1ba02ffb,0x0df309f3,0x01f9065c,
    0x20fe85f7,0xdf7003fa,0x3e604fc8,0x367f980f,0x23ff106f,0x7ec01ff8,
    0x3607fa04,0x7ffe4c2f,0x1fa29f94,0x0fec0ff8,0x2fcc0fec,0x4fc9bea0,
    0x3fa008f6,0xff10df32,0x31ff4003,0x7ec003ff,0x3fffff64,0x4fffffff,
    0xf50013f2,0x7f89f505,0xff100374,0xf007fea7,0x74df705f,0xf93f603f,
    0x004c403f,0x44fa89f7,0xcffceff9,0x407f22fe,0x40fec0fe,0x03fc81fe,
    0x4df737d4,0x25fd003d,0x06fa86f9,0xff52fec0,0x326fc800,0xeeeefeee,
    0x3f63eeff,0x20179513,0x26f984f8,0x00fea6f9,0x7ffbff70,0x441dfb00,
    0x80ffa3fe,0x2fff65fd,0x17e60000,0x1ff443f9,0xfa83fff2,0xfd83fd03,
    0xfe81fe81,0xf337d401,0x2007b19f,0x90df32fe,0x6fb800bf,0xf5001bee,
    0xfd07ee0f,0x3feebfa0,0x0fd03fff,0x87faf7f6,0xffd0006e,0x7fe4003d,
    0x7ec3ffdd,0x44bff106,0x09befffe,0xfd1fe200,0xff884fe8,0xfd82fc47,
    0x7fc0fec2,0x5400ff80,0x7fffdc6f,0x32fe800c,0x009fb0df,0xbf90ffa8,
    0x81ff8800,0xf82fc0fd,0xffbbffdf,0x701fc83f,0x17d43bfd,0x77ffec00,
    0x3ffa2000,0x7fdc0eff,0xc86ffb80,0x1dffffff,0x2fc1ff00,0x3fa01ff3,
    0xdf506f85,0x2fdc1fd8,0x7d403fc4,0xffffea86,0x4cbfa01d,0x004fe86f,
    0x5fd87fcc,0x40ffc400,0xf827cc6f,0x0ffb84ff,0x20201fcc,0x405edc6e,
    0x5ffaefe9,0x6ffdc062,0x742ffeba,0xefd99cff,0xfd95105f,0xff007fff,
    0x5fb8fe63,0xbf10ff60,0xfd977dc0,0x301dfb11,0x0df500df,0x17ffff4c,
    0x0df32fe8,0xfb800bf9,0x3001bee7,0xb8bf10ff,0x01fff02f,0x0bf07ff1,
    0x3fa2fb80,0x6ffc4ffe,0x3f69ff50,0x5c0ffcc5,0x3ffa60ff,0x05facfff,
    0x09ffd710,0x45f72fe8,0x0bfa03fd,0x4fd807f5,0x03fe63fb,0x7d4037d4,
    0x7f55ec06,0xf32fe80f,0x800df50d,0x01fe66fc,0x7764df50,0xeffeeeff,
    0x817fa3ee,0x007d84fd,0x229f337c,0x90ff51fd,0xc85ff5ff,0x20bfe06f,
    0x9f72cedb,0x80ff9000,0x7c3f91ff,0x81ff102f,0x3bf201fd,0x3f623fb2,
    0x807f980d,0xf1ec06fa,0x265fd07f,0x00ff886f,0x3ff13fa0,0xfb27ec00,
    0xffffffff,0x1fec9fff,0x5f70bf90,0xfc8bee00,0x27ecfee1,0xe86fffd8,
    0x017f202f,0x07d93fc8,0x2203ff10,0xfd8bea7f,0xfa8df903,0xfb1be605,
    0xf885fb83,0x137d400f,0xbf91ec13,0x1be65fd0,0x22d82ffc,0x37ec1ffb,
    0xd82ff980,0xc817e20f,0x20ffa05f,0x8df004f8,0x6d3e60fe,0x7ffd104f,
    0x7e407fd0,0x7fc03315,0x3e00df71,0x44df301f,0x261bf23f,0x03fe64ff,
    0x0fec2fc8,0x0ff407fc,0x2ff9bea0,0xe84fc8f6,0x260df32f,0x77fc43ff,
    0xff884ffa,0x82ff4404,0x1027cc6f,0x3ff101ff,0x3ee01ba0,0x9f507f42,
    0x3a203fea,0x2fe40eff,0xdf73ff88,0xff89bea0,0x503fd403,0x3e65f89f,
    0x37ffea3f,0x7403ffb8,0x740fec1f,0x402fd81f,0xd97f26fa,0x3fa0ffe3,
    0x7d40df32,0x3ff220df,0x37fe606f,0x105ffa81,0x402fb89f,0x3f620efd,
    0x8803f206,0x2e1fd86f,0x8877fe3f,0x20effffe,0x7e443ff9,0x985ff10f,
    0x67fec0ff,0x027fdc41,0x20fd87f9,0xdcfffffb,0x802fffff,0x40fec0fe,
    0x03fb81fe,0x7ff537d4,0x407fe4f6,0x80df32fe,0xfeeffffa,0x2602efff,
    0xffeeffff,0x90fea05f,0xffe8801f,0x200effdd,0x07ee03fa,0x3fa237ea,
    0x3b7ffee0,0x6ffa9eff,0x7ee77fdc,0x77fdc2ff,0xf902ffdc,0xffffdfff,
    0x541fe807,0x96fed45f,0x220cefe8,0x6c0ff809,0x981fd81f,0x237d405f,
    0xffeeeffc,0x265fd02f,0xfdb9806f,0xffbaceff,0xffb5101e,0xfc8059df,
    0xf9003f41,0x8801bfff,0x40df105f,0x982ffffc,0x20cffffe,0xffe983fa,
    0xf9501eff,0xda805bff,0x02dffffe,0x3fc837cc,0x077e4000,0x07f607fc,
    0x0ff407f6,0xfd70bf70,0x7403dfff,0x000df32f,0x03f91013,0x29800260,
    0x188002a8,0xc9815400,0x4015c401,0x10020098,0x00180033,0x6c001310,
    0x033fa01f,0x01ffb100,0x1fd81ff1,0x9f302fc8,0xd102fe40,0x25fd001b,
    0x800006f9,0x00000000,0x00000000,0x00000000,0x00000000,0x05f88000,
    0x055fff4c,0x03dfd510,0x07f61be6,0x0fd813f2,0x2017fee4,0x3fbaa03d,
    0x7ddff32f,0x00000000,0x00000000,0x00000000,0x00000000,0x40000000,
    0xfd5000fc,0xdb99bfff,0x36607fff,0x81fd84ff,0xf883eff9,0x4027ffc4,
    0x3ffee02b,0x9ffff32f,0x00000000,0x00000000,0x00000000,0x00000000,
    0x20000000,0xdb8003f8,0xdefffffe,0x37fea00c,0xf701fd80,0x883f20bf,
    0x00000009,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x880000c4,0x04c40009,0x09880310,0x00000260,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x01880000,
    0x22003100,0x40000000,0x44000001,0x21ff0000,0x000006fa,0x20620000,
    0xcccccccb,0x3e00c404,0x0ff9802f,0x04c000c0,0x7c40ff50,0x29fb000f,
    0x10df56fa,0x9dfffd95,0x4417e001,0x1dffffdb,0x1ceec980,0x6fffed40,
    0x76441fd8,0x3ee01cef,0x21ff0001,0x5c0006fa,0xffeb882f,0x7ffe403e,
    0x7fffffc5,0x19f50fff,0xf03bfffd,0x1ff3005f,0x2bfffb50,0x7ff4c0fe,
    0x1ff80dff,0x6c00bf70,0x3eadf54f,0x7ffffd46,0x402ffffe,0xfff983f9,
    0x04ffffef,0x3fffbff2,0xf9fff502,0x7c43fddf,0x02fffeff,0x3e0003ff,
    0x000df50f,0x3e617fd4,0x0effffff,0x23efffa8,0xaaaaaff9,0x3ffbea2a,
    0x7c0fffce,0x0ff9802f,0x7f67ffcc,0x3fea0fee,0x42fffddf,0x05fd04fc,
    0x3c9a7ec0,0x77fd4df5,0x1ffecc0a,0xff983f90,0x3ff6a0ad,0x2a1ef983,
    0x5ffc41ff,0xe87ffee0,0x3ff711df,0x20003ff0,0x00df50ff,0xd0bffea0,
    0x37f545bf,0x5fa82fec,0x45dff500,0x17fc6fc8,0xf107fcc0,0x0fffb87f,
    0x6c41bff1,0x21fe60ff,0x7ec007f8,0x3e2df504,0x06fc805f,0x09ff31ba,
    0x7f40ffe8,0x7e45fb81,0x2a3ff705,0x84fd80ff,0xf83001ff,0x0c4df50f,
    0x3ffff220,0x2603fea2,0x81fec1ff,0xff5003fc,0xff8bfa05,0x20ff9802,
    0x1ff905fc,0x3e203fee,0x2e17f43f,0x27ec004f,0x1ff96fa8,0x105ff100,
    0x00efd89f,0xdf527fcc,0xfe83fe20,0x75c7fe01,0x7e4df705,0xda83ffff,
    0x0ff8cfff,0xfffd1df5,0xafff883d,0x817f22fe,0x817f43fe,0xdf5001fd,
    0x5ff27dc0,0x6c1ff300,0x21ff102f,0x13f605fd,0x01fe8bf7,0x6faa7ec0,
    0x00ffadf5,0x2fa80aa8,0x1a800ffc,0x5fd027e4,0x3fd007fc,0xeb93f600,
    0x7cc2eeff,0xffeffcff,0xbdffff50,0x6fcc3fff,0x0d445fd0,0x3ff67fd0,
    0x47fc6fff,0xfa83dec9,0xff97ea05,0x20ff9802,0x83fe01ff,0x10ff6008,
    0x01be61ff,0xb7d53f60,0x01ff8efa,0x4c1f9000,0x3a0000ff,0x44ff603f,
    0x07fa00ff,0x3e0bfe60,0x0bff881f,0x7d43ffee,0x9bf622ef,0x0017f418,
    0x3fb23ff3,0x3fe25eef,0x0effffff,0x6fa817ea,0x3e600bfe,0x401ff10f,
    0xff3000fe,0x3f27fb03,0x54fd8003,0x3e7beadf,0xdf00000f,0x40007fb8,
    0x93f203fe,0x07fe01ff,0x817ff5c4,0x05fc81ff,0x3fea1ff9,0x7405ff02,
    0x1bf6002f,0x3fea0bfa,0x6ffda8ae,0x5fb817ea,0x3e600bfe,0xf807fe0f,
    0x3ff9800f,0x03febf50,0x7d53f600,0x0df7df56,0x4cccccc4,0x3f21fcc1,
    0x17f40005,0x17f49f90,0xf701ff88,0x3fe01bff,0xf102fd81,0xc81bea1f,
    0x00bfa04f,0x7f40ffdc,0xf505c982,0xc81bea5f,0x200bfe3f,0x0bfa0ff9,
    0x7cc00ff8,0x7d7fc04f,0x29fb0005,0xf9df56fa,0x7fffe40d,0x20fdc7ff,
    0x7c0005fc,0xb97ee02f,0x03ff706f,0x0fffaea6,0x07fe07fe,0x0bf50ff8,
    0x5fd02fdc,0x207ff700,0xff0002fe,0x7c07feab,0x200bfe2f,0x837dc7f9,
    0x3e200ffb,0xfefc805f,0x29fb0002,0xf5df56fa,0x3fff201f,0x43ec7fff,
    0x740007fb,0x893f202f,0xff932eff,0x3fee003f,0x3e20ffc0,0x543fa00f,
    0x81bea05f,0x7fe402fe,0x000bfa03,0xeffab7e4,0xfd17f662,0x88ff5007,
    0x3fea0cff,0x017f600f,0x0007ffcc,0x2df54fd8,0x01ff8efa,0x5f89fea0,
    0x1000ff98,0x3603fd81,0x7fffcc3f,0x001ffdff,0x03ff0bfe,0x87fc03ff,
    0x17ee05fa,0x3f602fe8,0x017f402f,0xff56fb80,0x1dffbdff,0xfb804fd8,
    0xecfffa85,0x3e00ffef,0x13fa000f,0x4ffa0330,0x3adf56fa,0x9fea003f,
    0x03ff02fa,0x3fc9bee0,0x3220bf60,0x01ff3dfe,0x3fe2fe40,0xf102fd81,
    0xc81bea1f,0x20bfa04f,0xe801ffd8,0x203ed82f,0xd3df55fe,0xf9019fff,
    0x209fb00b,0xf8dfffe9,0x00ff100f,0x3e601fe8,0x3ea5fd07,0x3ff2df56,
    0x64ff5001,0x00dfd00f,0x05fb93fa,0xff0003fe,0xfe80ff61,0x7dc0ff44,
    0x2a1ff705,0x2ff881ff,0xfd10bfa0,0x0bfa001d,0x7fcc1ff2,0x00c4df52,
    0xf880bfea,0xf04c403f,0x0132201f,0x7c406f98,0xf51ff80f,0x7fc5bead,
    0x3fec401f,0x27fcc0dd,0xf887ff20,0x646fa80f,0x64df502d,0x87ff307f,
    0xcff882fe,0x543ffea0,0x3f660eff,0x3617f406,0x3fa000ef,0x4c4ff982,
    0x01bea6fd,0x502bff60,0x3e000bfd,0xd100000f,0x3bfd005f,0x7d43ff62,
    0x7fd4df56,0x7fdcc1bf,0xa809f15f,0x36a21cff,0x45fc83ff,0x77dc1fe8,
    0xf327fc40,0x86fd987f,0x7cc3fffd,0xffefecff,0xbbffdf50,0xfe803fff,
    0x266bfea2,0x74099999,0x9fff702f,0x7d41dffd,0xffe88006,0x0effffff,
    0x201ff000,0x3f200cc9,0xff5006ff,0x545fffdf,0xf98df56f,0xfffeffff,
    0x007ee2ef,0x3fbffff2,0xfd104fff,0x109ffb9d,0xffd9bffd,0xd9fff70b,
    0xfd103fff,0xfffb30bf,0x3ea1fd1b,0x0dfffe9c,0x3fe2fe80,0xffffffff,
    0x5017f44f,0x81bffffd,0x910006fa,0x19fffffb,0x807fc000,0x3ee00ffa,
    0x3ea000ef,0x7d42efff,0x9510df56,0x07bffffd,0x7ed400fb,0x401effff,
    0x03dfffd8,0x3bfff6e2,0x3fffaa03,0x800800df,0x00188001,0xfff897f4,
    0xffffffff,0x44017f44,0x01bea009,0x000cc400,0xf500ff80,0x0009801f,
    0x00002620,0x55002620,0x00666000,0x0c0004c0,0x00066200,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x7e406fc8,0x47fe203f,0xf7001ffc,0x3fffea3f,0xffffffff,0x003ff66f,
    0xffff17fa,0x59bdffff,0x7fffffc0,0xfd82deef,0x4bfe2006,0xf9804ff8,
    0x013ffe27,0xff8bffd4,0x07fe2001,0x2a1dff50,0x1bea006f,0x9802ff80,
    0x3ffee0ff,0xffffffff,0x401ff52f,0x3ea05fff,0x201bfa27,0x3fea3ff9,
    0xffffffff,0x3fe26fff,0x2077e405,0xffffffff,0xff04ffff,0xffffffff,
    0x0ffd41df,0x3e27fb80,0x3fcc01ff,0x200dfff1,0x3ff17ffd,0x00ffc400,
    0x6fa8bff5,0x801bea00,0xff9802ff,0x3ffffee0,0x2fffffff,0x77cc07fe,
    0x317f207f,0x6fe807ff,0x64ccccc4,0x099999ef,0xfa81ffd4,0x102ff81f,
    0xff09ffb7,0x93333337,0x03ff8bff,0x7fc49fd0,0x9fe600ef,0x401ffff8,
    0xff17fff8,0x0ffc4003,0xfa85ffa8,0x01bea006,0xf9802ff8,0x2666620f,
    0xffe99999,0x7dc0ff60,0x5fd01feb,0x2e03ff90,0xdf7000ff,0x20ffe400,
    0x5ff03ff8,0xff0dfb00,0x21ffb803,0xff8806fc,0x13fffe20,0x3fe27f98,
    0x77d404fd,0x003ff17f,0x7d40ffc4,0x00df505f,0xff0037d4,0x01ff3005,
    0x5c2ffc80,0xf93fb05f,0x101ff107,0x7ff10dfd,0x0037dc00,0x0bfd1bfa,
    0x7d4017fc,0x200ffc0f,0x3fe23ff8,0x222fdc01,0x302ffcff,0x7d7fc4ff,
    0xbfdfec06,0x22001ff8,0x2ffd41ff,0x0098df50,0x7fc00df5,0x00ff9802,
    0x260ffee0,0xf37f887f,0x540df50d,0x02fec3ff,0x3001bee0,0x03ff29ff,
    0xf9802ff8,0x400ffc0f,0x027ec4fe,0x1ff10bfa,0xff301dfb,0x0ff47fc4,
    0x17f9ef88,0x7c4003ff,0x017fea1f,0xfffb1df5,0xa86fa87d,0x00bfe2ff,
    0x4c003fe6,0x07fe05ff,0x207fcbf5,0x7fe404fc,0x8001ff70,0xfb8006fb,
    0x7c01ffbf,0x85fc802f,0x7fcc01ff,0xf303fd42,0xf11ff10f,0x44ff309f,
    0x504fc8ff,0x3e2ff37f,0x3fe2001f,0x5009ff51,0xffbdfdff,0x2a37d45f,
    0x017fc2ff,0x44007fcc,0x1fec06ff,0x42fd8bf2,0x7f4402fe,0x8002ff8d,
    0xfb0006fb,0x5ff007ff,0x0bff6660,0xffb007fe,0x3205ff01,0x50ff884f,
    0x27f985ff,0x06f98ff8,0x22ff31fb,0x3e2001ff,0x00fffa9f,0x220fffa8,
    0xa9bea6fd,0xcdff82ff,0xdccccccc,0xffe800ff,0x3a27dc00,0xf893ee0f,
    0xeffa800f,0xdf70005f,0x1ffe2000,0x7fffffc0,0x04ffffff,0x755559ff,
    0x3209ffd9,0x103ff05f,0x077ec1ff,0x87fc4ff3,0x9afc41fe,0x003ff17f,
    0x7ffdffc4,0x1ffa804f,0x5bea7fa8,0xfff02ffa,0xffffffff,0xfc801fff,
    0x26f9801f,0x53fcc6f8,0x7fe400bf,0xdf70000f,0x3fff2000,0xfffff803,
    0x01beffff,0x3ffffffe,0x2603ffff,0x837d40ff,0x3fe20ff8,0xff89fe64,
    0x2fb89f90,0x07fe2ff3,0xbffff880,0x7d402ffb,0x7d43fe07,0x3e02ffae,
    0xccccccdf,0x200ffdcc,0x3e003ffb,0xff09f70f,0x8800ff21,0x2e0002ff,
    0xffa8006f,0x7fc01ffd,0x017fe4c2,0x37bbbbfe,0xfe800abc,0xf881fec2,
    0x997fd40f,0x4c3fe27f,0xf987ec6f,0x4003ff17,0x3f63fff8,0x81bea00f,
    0xffff51ff,0x017fc05f,0xf9807fcc,0x97e4005f,0xd2fc81fd,0x2ff8003f,
    0x01bee000,0x3fa9ff10,0xc817fc06,0x07fe02ff,0x897ee000,0x1ff100ff,
    0xff31ffb0,0x3fd07fc4,0x17f997e2,0x7c4003ff,0x037fc43f,0x8ffc0df5,
    0x0ffdfffa,0xf3005ff0,0x0dff101f,0x1fe9f500,0x007fa7d4,0x20002ff8,
    0x7ec006fb,0xf813fe66,0x07ff602f,0x40000ffc,0x09f70ff8,0x7c407fc4,
    0x3e27f9cf,0x7dd3f20f,0x7fc5fe62,0x07fe2001,0x7d413fea,0x7d47fe06,
    0x3e0bfd1f,0x0ff9802f,0x8000ffe8,0x105f9ef8,0x000bf3df,0x5c0005ff,
    0x3fee006f,0xf817fe41,0x1bfe202f,0x80000ffc,0x403fd3fd,0xff700ff8,
    0x07fc4ff7,0x983fadf3,0x003ff17f,0xfc80ffc4,0x206fa82f,0x4cdf51ff,
    0x02ff82ff,0x7e40ff98,0x3fa0001f,0x2ffa03fc,0x2ff8002f,0x01bee000,
    0xfe81ffcc,0x402ff80f,0x1ff83ffb,0x3bf50000,0x0ff880df,0x89ffff60,
    0x7d7f40ff,0xff8bfcc5,0x07fe2001,0x7d40ffe8,0x7d47fe06,0x3e07fdc6,
    0x0ff9802f,0x0000ffea,0x6401fff9,0xf8000fff,0x3ee0002f,0x05fe8806,
    0x3fe17fe2,0x40ffd802,0x200001ff,0x4403fcfe,0x3fe200ff,0x703fe27f,
    0x7f985fff,0x33335ff1,0x7fc43333,0x517fe601,0xa8ffc0df,0x7c5fe86f,
    0x0ff9802f,0x3333bff3,0x01333333,0xf301bfea,0x3fe000df,0x1bee0002,
    0x7003ff60,0x02ff87ff,0x7fc5ff88,0x3ee00001,0x7fc400ff,0x13ffdc00,
    0x7ff981ff,0xfff17f98,0xffffffff,0x2e00ffc4,0x81bea3ff,0x30df51ff,
    0x017fc5ff,0xffb87fcc,0xffffffff,0xff104fff,0x009ff009,0x8000bfe0,
    0x7fdc06fb,0x43ffb002,0xff7002ff,0x0000ffc7,0x100bff10,0xffb001ff,
    0x7f407fc4,0xff17f984,0xffffffff,0x400ffc4f,0x0df51ffe,0x06fa8ffc,
    0x0bfe1ff9,0x7dc3fe60,0xffffffff,0x0004ffff,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x7ffc0000,
    0xffffffff,0x3ffffe0f,0x7fffffff,0x7ffffffc,0xbf900cee,0x3bbbbbb2,
    0xff14eeee,0x79dfffff,0x09ff5000,0x3600dfd0,0x202fec1f,0x0cc00099,
    0x00033100,0x02200033,0x80600300,0x40df5008,0x804c00ff,0x3e5755fd,
    0xffffffff,0x3ffe0fff,0xffffffff,0x7ffffc7f,0x84ffffff,0xffffd5fc,
    0x2bffffff,0xfffffff8,0x2000dfff,0xfe807ffd,0x41ffb806,0xffea85fd,
    0x36203fff,0x300dffff,0x03dffffb,0x6fffff4c,0x7ffecc00,0x4e7d40bd,
    0x19f52fff,0x261dfffb,0x7d43effe,0x7d43fe06,0x3ffffd8c,0xf5fdafec,
    0x3333337f,0x9bff8333,0x99999999,0x4ccdffc1,0x44ffeba9,0x555555fc,
    0x27ff7555,0x9999aff8,0x1006ffba,0xe805fbdf,0x7ffcc06f,0x3f21e5c1,
    0x4fffdcef,0xecdfff98,0x77fcc1ff,0xa82fffcc,0xfffedfff,0xbbfff101,
    0xfdfa8bff,0xdbf51fff,0xf5dffdbf,0x549ffdbf,0x543fe06f,0xffdefedf,
    0x7ecf2e3f,0xf0005ff5,0x3fe0005f,0x90ffec01,0x97f600bf,0x3e601ff8,
    0xacfb800f,0x037f406f,0x2007fffa,0x7fc81ff8,0x7e40cfe8,0x7ec27e46,
    0x3067fc45,0x9fd10dfb,0xf517f441,0xffa8a3df,0x33ffe60f,0x6fa9fee0,
    0x7fd43fe0,0x2037ec1e,0x0005ff4c,0x3e0005ff,0x26fd801f,0xffb805fc,
    0xf007fe20,0x15fd005f,0x37f403ff,0x03fd7f90,0x3e60bd70,0x403fee0f,
    0x20bf62ff,0x037e42c8,0x06fb87ff,0x17fd4bf5,0xfe81ffa8,0xf50ff886,
    0xfa87fc0d,0x00ff981f,0x0017fcba,0xf80017fc,0x1ff9801f,0xff880bf9,
    0x200ffc42,0x7fcc01ff,0x7ec09fb0,0x3fabf505,0xff880001,0xfd813f60,
    0x002fff24,0x5fb80bfa,0xf5001fe4,0x03fea01f,0x8ffc17f2,0x43fe06fa,
    0x03fe07fa,0x02ff8764,0x0002ff80,0x3fe003ff,0xfd80bf92,0x201ff884,
    0x5fc807fa,0x5fc81fea,0x3fd0ff88,0xedca9800,0x3bfa0fff,0xfeeeeeee,
    0x3bfffa25,0x403ff01b,0x017f46fa,0x7d40ff50,0x3e09f907,0x7c0df51f,
    0x7c0df50f,0xbff8301f,0x09999999,0xaaaacff8,0x7c0aaaaa,0x27fd001f,
    0x3fea05fc,0xaabff880,0x01efdcaa,0x17fc2ff8,0x2fd84fc8,0x754007fa,
    0xffceffff,0x3fffffe0,0x446fffff,0x0efffffc,0xf9803fe2,0x5000ffc7,
    0x837d40df,0x23ff04fc,0x1ff106fa,0x1ff81bea,0xffffff00,0xff0dffff,
    0xffffffff,0x01ff83ff,0x17f2bfb0,0xff105fd8,0xffffffff,0x90ff5005,
    0x513ee0df,0x801fe8bf,0x221bdffa,0x00bfe0ff,0xfffd7300,0xf500ffc1,
    0x2002fe8b,0x1bea06fa,0x1ff827e4,0x3fe60df5,0x7fc0df50,0x3fe57501,
    0xeeeeeeee,0xeeeeff85,0x41eeeeee,0xbfb001ff,0x7fc417f2,0xdddff101,
    0x09fffddd,0xff984fd8,0x3e23fb81,0x400ff40f,0x1ff304fe,0x20102ff4,
    0x745ff300,0xb13ee02f,0xa866c07f,0x41bea06f,0x23ff04fc,0x1ff707f9,
    0x1ff81bea,0x0bfebfb0,0x000bfe00,0xfe800ffc,0x3ee0bf94,0x807fe206,
    0xff104ffa,0xff555559,0x7f47f509,0x65c1fe81,0x7dc0bfe3,0x403ff21f,
    0x407fe4fe,0x817f23fe,0x837dc2fe,0x81bea7fa,0x09f906fa,0x1ffc47fe,
    0x7d43ffea,0x65c7fe06,0x0bfebfb3,0x000bfe00,0xff800ffc,0x3fa0bf93,
    0x007fe203,0x3fee0ff7,0xffffffff,0xfb97d40f,0xffaaaaae,0x6cbfb1ac,
    0x1fffa85f,0xf9077fe2,0x4c0efb8d,0x33fe20ff,0x103bf660,0x7f4419ff,
    0xfa81bea4,0x3e09f906,0x33bff21f,0xf50fedfe,0xfd8ffc0d,0x0005ff05,
    0x3e0005ff,0x1ff9801f,0x1ff30bf9,0x200ffc40,0xdfe81ff8,0xfccccccc,
    0xfc97cc3f,0xffffffff,0x4cbfb5ff,0xdfecbeff,0x7ffd42fe,0xe81fffcd,
    0x4ffecdff,0xfddfffb8,0xfff500ef,0xfa8dffbb,0x641bea06,0xb83ff04f,
    0x1fd4ffff,0x1ff81bea,0x0bfe0bfb,0x000bfe00,0x7f400ffc,0x3f217f26,
    0x00ffc405,0xff307fe6,0x446fd801,0xddddd70c,0x49ddffdd,0x7fffdc4c,
    0xb10bf92f,0x2039dfff,0x2effffd9,0x3bfffa60,0x7ff4c00c,0x37d40cff,
    0x3f20df50,0x2203ff04,0xf037d400,0x0bfe003f,0x000bfe00,0x3ee00ffc,
    0x3617f22f,0x0ffc404f,0x3f21ff20,0x01ff9805,0x3a07fa00,0x00013302,
    0x99880026,0x0004c000,0x00000198,0x00000000,0x05ff0000,0x3337ff00,
    0x13333333,0x4cccdffc,0x645ffda9,0x402fe85f,0x9999aff8,0xf84ffc99,
    0x49fd002f,0x3fd003cb,0x00000ec8,0x00000000,0x00000000,0x00000000,
    0x3fe00000,0xffff8002,0xffffffff,0x3ffffe2f,0x84ffffff,0x01ff85fc,
    0x7fffffc4,0xa85fffff,0x3fee007f,0x3a00bfb0,0x00000c1f,0x00000000,
    0x00000000,0x00000000,0x7fc00000,0xffff8002,0xffffffff,0x3ffffe2f,
    0x901ceeff,0x807f98bf,0xfffffff8,0x9fb01def,0xd9ffc400,0x03fd005f,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x4427fc40,0x000ee4fe,0xff981bee,0xff307fb0,0x640bf505,0x7fffc01e,
    0x04ffffff,0x1300e440,0x65404c00,0xcccccccc,0x369fd0cc,0x0449fb4f,
    0x88166e54,0x99999912,0x33333265,0xcccccccc,0x0000000c,0x00000000,
    0x3f60ffd4,0x0067fe46,0xf900ff88,0x7dc2fdc9,0x203fc84f,0x777402fd,
    0x3ffeeeee,0x03ffb500,0x7c003fea,0xfffffc84,0xd1ffffff,0x7ed3fa9f,
    0x7e43ff75,0x99cfffff,0xffff13eb,0x3ffea7ff,0xffffffff,0x00000fff,
    0x00000000,0x2a6fd800,0x7fecc1ff,0x3fd802df,0x3fc43fd0,0x7fc37fec,
    0x000bf600,0x2202ff44,0x00cfffeb,0xf0c07ffb,0x5554c227,0xaaaaaaaa,
    0x53fa9fd0,0xe97f25fd,0xffffecdf,0x99913fff,0x00005999,0x00000000,
    0x20000000,0x3ff8cff8,0x3bfff220,0x30df500b,0xf83fd0df,0x1be60fee,
    0x20005fb0,0x3f2606fd,0x7cc02eff,0x2fbe07fe,0x0004fcce,0xb3fd9ff4,
    0x1b1fd89f,0x3fffeb88,0x00000000,0x00000000,0xf9800000,0x2a005fef,
    0xf81cfffe,0x641fe41f,0x3f73e64f,0xfb00ff22,0x1df90005,0x39fffd50,
    0x3f2bf200,0xfffdb882,0x640002ce,0x3ee5f92f,0x8800d443,0x00000000,
    0x00000000,0x40000000,0x8000effc,0x641fffc9,0x4c07fc4f,0x3eebee6f,
    0xeeb83fa4,0xeeeeffee,0x07fee01e,0x002fbff2,0x0df37f88,0x4c41ffc8,
    0x99999999,0x7d47ee19,0x00003f51,0x00000000,0x00000000,0x30000000,
    0x54000bff,0x3fcc1ffd,0x87fc0bf5,0xf16f88fe,0xfffffc8d,0x01ffffff,
    0x3f205ff5,0x7dc000cf,0x7dc07fa4,0x3ff21fda,0xffffffff,0x1144511f,
    0x00000015,0x00000000,0x00000000,0xffd00000,0x75c4007f,0x5fd03eff,
    0xafc80bf6,0x2e3fa6f8,0x4cccc44f,0x01999bfd,0x64407ff3,0xf002dfff,
    0xe82fd41f,0x775c9f15,0xeeeeeeee,0x0000001e,0x00000000,0x00000000,
    0x40000000,0x01ffaefc,0x16fffe4c,0x3fe33ee0,0x3eb7ea00,0x07f6bf24,
    0x2200bf60,0xd71004ff,0x2a017dff,0x100ff85f,0x00000004,0x00000000,
    0x00000000,0x00000000,0x23ff5000,0xffd506fc,0x3e20039f,0xff804fbf,
    0x3f7ea1fc,0x805fb007,0x50005fe8,0xe83bfffb,0x004fc82f,0x00000000,
    0x00000000,0x00000000,0x00000000,0xf88ffe20,0x5f7fe44f,0xfffd8000,
    0x47ffd801,0xb004fff8,0x06fe805f,0xfffc9800,0x32209911,0x00000004,
    0x00000000,0x00000000,0x00000000,0x1bf60000,0x2dc87fea,0x37fd4000,
    0xe85ffb80,0x5fb001ff,0x7777fdc0,0x005eeeee,0x00007ae2,0x00000000,
    0x00000000,0x00000000,0x00000000,0x80ffdc00,0x00010efd,0x8801ffc0,
    0x07fc83ff,0x7ffdc000,0x7fffffff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__arial_28_usascii_x[95]={ 0,2,1,0,0,1,1,1,1,1,0,1,2,0,
2,0,1,2,0,1,0,1,0,1,1,1,2,2,1,1,1,1,1,-1,1,1,1,1,2,1,2,2,0,1,
1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,-1,1,0,1,0,0,0,0,0,1,1,
-2,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,1, };
static signed short stb__arial_28_usascii_y[95]={ 22,4,4,3,2,3,3,4,3,3,3,7,19,14,
19,3,3,3,3,3,4,4,3,4,3,3,9,9,7,9,7,3,3,4,4,3,4,4,4,3,4,4,4,4,
4,4,4,3,4,3,4,3,4,4,4,4,4,4,4,4,3,4,3,25,3,8,4,8,4,8,3,8,4,4,
4,4,4,8,8,8,8,8,8,8,4,9,9,9,9,9,9,3,3,3,11, };
static unsigned short stb__arial_28_usascii_w[95]={ 0,3,7,14,13,20,16,3,7,7,9,13,3,8,
3,7,12,8,13,12,13,12,13,12,12,12,3,3,13,13,13,12,24,18,15,17,16,15,13,17,15,3,11,16,
13,18,16,18,15,18,17,15,15,16,17,24,17,17,15,6,7,6,12,16,5,13,12,13,13,13,8,13,12,3,
6,12,3,19,12,14,12,13,8,12,7,12,13,18,13,13,12,8,3,8,13, };
static unsigned short stb__arial_28_usascii_h[95]={ 0,18,7,20,23,20,20,7,25,25,9,13,7,3,
3,20,20,19,19,20,18,19,20,18,20,20,13,17,13,8,13,19,25,18,18,20,18,18,18,20,18,18,19,18,
18,18,18,20,18,21,18,20,18,19,18,18,18,18,18,23,20,23,11,2,5,15,19,15,19,15,19,20,18,18,
24,18,18,14,14,15,19,19,14,15,19,14,13,13,13,19,13,25,25,25,5, };
static unsigned short stb__arial_28_usascii_s[95]={ 254,100,144,137,71,174,195,140,56,1,116,
62,251,172,251,19,45,120,129,72,104,152,152,52,212,225,247,118,89,126,15,
209,9,81,65,27,31,15,1,1,223,48,236,180,166,147,130,118,96,99,78,
238,44,178,112,1,60,26,239,92,166,85,103,181,152,122,107,178,93,136,143,
58,197,248,64,210,252,201,234,163,165,195,192,150,85,221,29,43,1,222,76,
47,43,34,158, };
static unsigned short stb__arial_28_usascii_t[95]={ 1,67,86,1,1,1,1,86,1,1,86,
86,67,86,75,27,27,27,27,27,67,27,1,67,1,1,67,67,86,86,86,
27,1,67,67,27,67,67,67,27,48,67,27,48,48,48,48,1,48,1,48,
1,48,27,48,48,48,48,48,1,1,1,86,86,86,67,27,67,27,67,27,
27,48,27,1,48,27,67,67,67,27,27,67,67,27,67,86,86,86,27,86,
1,1,1,86, };
static unsigned short stb__arial_28_usascii_a[95]={ 111,111,142,223,223,357,267,77,
134,134,156,234,111,134,111,111,223,223,223,223,223,223,223,223,
223,223,111,111,234,234,234,223,407,267,267,290,290,267,245,312,
290,111,201,267,223,334,290,312,267,312,290,267,245,290,267,378,
267,267,245,111,111,111,188,223,134,223,223,201,223,223,111,223,
223,89,89,201,89,334,223,223,223,223,134,201,111,223,201,290,
201,201,201,134,104,134,234, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_28_usascii_BITMAP_HEIGHT or STB_FONT_arial_28_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_28_usascii(stb_fontchar font[STB_FONT_arial_28_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_28_usascii_BITMAP_HEIGHT][STB_FONT_arial_28_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_28_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_28_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_28_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_28_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_28_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_28_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_28_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_28_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_28_usascii_s[i] + stb__arial_28_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_28_usascii_t[i] + stb__arial_28_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_28_usascii_x[i];
            font[i].y0 = stb__arial_28_usascii_y[i];
            font[i].x1 = stb__arial_28_usascii_x[i] + stb__arial_28_usascii_w[i];
            font[i].y1 = stb__arial_28_usascii_y[i] + stb__arial_28_usascii_h[i];
            font[i].advance_int = (stb__arial_28_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_28_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_28_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_28_usascii_s[i] + stb__arial_28_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_28_usascii_t[i] + stb__arial_28_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_28_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_28_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_28_usascii_x[i] + stb__arial_28_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_28_usascii_y[i] + stb__arial_28_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_28_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_28_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_28_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_28_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_28_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_28_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_28_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_28_usascii_LINE_SPACING
#endif

