// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_15_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_15_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_15_usascii_BITMAP_WIDTH         128
#define STB_FONT_arial_15_usascii_BITMAP_HEIGHT         70
#define STB_FONT_arial_15_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_15_usascii_FIRST_CHAR            32
#define STB_FONT_arial_15_usascii_NUM_CHARS             95

#define STB_FONT_arial_15_usascii_LINE_SPACING          10

static unsigned int stb__arial_15_usascii_pixels[]={
    0x640cc818,0x89107541,0x5ee54404,0x65cb3201,0x54022443,0x27300bdc,
    0x44000039,0x7102c43c,0x37f22039,0x43b13662,0x2e3442f8,0x7359d902,
    0x237f10bb,0x3d0e46c9,0xfdacfe88,0x98772c81,0x7f13cbee,0x3b9e89ff,
    0xfabe80b2,0x0fadbd80,0x34c3b16a,0x40b70d00,0x2a07c45b,0xc83d1a26,
    0x8ec0fa85,0x7d4be21d,0x4ba2bf13,0x81a2b368,0x7883d0f8,0x6c5a86e9,
    0x21e21a61,0x7ec5662d,0x7c4596ae,0x6c793540,0x203f13ff,0xfffffd3e,
    0x27d1ea3f,0x3696e1f8,0x9bd00b29,0x2093f10d,0x0b50ec69,0x8ec970f1,
    0x92abf33d,0x3d3540f8,0x403e61e8,0x2345a24c,0x4789e45b,0x2277726a,
    0x206fa806,0x1e80affb,0x441ec476,0x355e6a87,0x1f12ccfa,0x3d03e6a8,
    0x54b903cc,0x74788954,0x22dc3f13,0x205dcb20,0x8289fbfb,0x7cc0fed8,
    0x441723b0,0x32b17987,0x224a8f43,0x878b540f,0x740be21e,0x9db9bd73,
    0x13f99f41,0x440ba29f,0x7c4b5796,0x520bbf70,0x23b1745d,0xa87882d8,
    0xf98f6d15,0x207c43d0,0x83d03e6a,0xd52f985e,0x4c157d57,0xbf13defd,
    0xe96407ff,0x3f63d4f0,0x25ba52a1,0x0b50ec69,0x47c970f1,0xd9fe88ea,
    0x9aa07c44,0x3a21742d,0x3c4eb89c,0x2279080f,0x36698017,0xe89fc688,
    0x2327e25f,0x43b16a2e,0x2d878869,0x7cefe4f6,0x207c431d,0x7f90f26a,
    0x43effd98,0x3200d158,0x87600f13,0x7ecc3dda,0x3ea2e8bf,0x362d44ef,
    0x11e21a61,0x2203f88d,0xd503e24d,0x0040034c,0x21a80041,0x01105004,
    0x440d8004,0x5f10ec4d,0x20b235c4,0xca99bde9,0x98dfc44e,0x0001646c,
    0x00000000,0x40c00000,0x2e0e40dc,0x0483b70e,0x05e76e54,0x87972cc8,
    0x00000048,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x01227300,0x98056e54,0x0ac980bc,0x001cdca8,0x32602ee0,0x2a21a803,
    0xdca81aaa,0x2615400b,0xdc882c2b,0x403c4b20,0x40edbbed,0x7646dbea,
    0x567dc5db,0x67f4c2fc,0x3f2faa4c,0x01b6bb20,0x66675c79,0x7ede7ec1,
    0xbeb93201,0x3760726c,0x40788742,0x3e24d86c,0x360f8ba1,0x44b90ba3,
    0x0fc9f52f,0x1f83e257,0x203c8f20,0x900fb85d,0x2a5d0f49,0x13442e84,
    0x1f89fd5f,0x971a6088,0x274971aa,0x34e8d504,0x1f10022d,0xd1eeff4c,
    0x205f0133,0x1749902e,0xffd1a23f,0x1bf11d4b,0x003e27d1,0x3e2b71aa,
    0xdff99760,0x5322dc0a,0x904fedea,0xfa97c47f,0x437f7be3,0x209900f9,
    0x0ff7a64c,0x0ec2e81d,0x79ae43f1,0x25a8b500,0xa86ecbed,0xd1e62ffc,
    0x1744fee9,0x47a8f654,0x9f41913e,0x6417207a,0x83b2f724,0x11a1742b,
    0x03f16a8f,0x12e35431,0x40495795,0x7d45fc7b,0x205b8f54,0x03c8b74c,
    0xd80fc5ae,0x83e69903,0x45d1664c,0x9907c459,0xf13641f4,0x279063c8,
    0x6441f079,0xb8f33dbe,0xf55b8935,0x4b8933e8,0x1f88a93a,0x46aa6475,
    0xb8ba345b,0x74467c42,0x2a22fe61,0x0f9a6c1f,0xbd074c7a,0x4189b223,
    0x1744fa2d,0x7c47a25d,0x99747f32,0x2a73e62e,0x223a64ef,0x17447a2e,
    0x0362e876,0x505dd5f1,0x9105bffb,0xeeea85dd,0x6fffec41,0x07dcdf40,
    0xd989fd91,0x6774c3ee,0x0b7b663d,0x3b3bff66,0xb313ff22,0x747507dd,
    0x04000062,0x20020040,0x033b2600,0x20000400,0x01c41000,0x00010020,
    0x00000000,0x00000000,0x00000000,0x39000000,0x9b730550,0x66440903,
    0x0772cccc,0x640644ae,0x40c98571,0x8ea0571b,0x333332a4,0xccc8124c,
    0x92440bcc,0x5f059999,0xabec8990,0x881e24fb,0x34fccccc,0x360fa83f,
    0xd8b72e45,0x06b8fc3f,0xcca9a25d,0x0f14ccee,0x7edd567c,0xccdf9e21,
    0x6417c5ec,0x47e21ae4,0x07640078,0x2217c4d9,0x3cc1f53f,0x227996fe,
    0xb803cc0f,0x0be07885,0x07e78936,0x6417c3f1,0x884c0ba4,0x2e05feaf,
    0x0b94e80f,0x3e07ebe6,0x25cf1d30,0x3c4990f6,0x327885b8,0x47b05f0e,
    0x3f107e78,0xf8a6417c,0xf14f8800,0x2605f305,0x3f200fbf,0x74ee5b03,
    0x7c6a85b1,0x42dc1e21,0x67c1d978,0x220fdaaa,0x46c987e7,0x1f34c82f,
    0xf8a7ff54,0x07f10f20,0x7e402fc8,0x647a9704,0x2a3f01f3,0x85b83c46,
    0x77c0ecf8,0x27883fee,0x41efffff,0x87e3d82e,0x1f14d998,0x2017a264,
    0x7cfd4079,0x2a78e982,0x3699069d,0x85b83c43,0x17c2fdf8,0x3e7881f7,
    0x2f83d801,0x78a64176,0x200d9264,0x5cbe2079,0x7c5bf80f,0x1f1f304b,
    0x10b70788,0x17c1d51f,0x0fcf11b6,0xfc997d40,0x5c473a20,0x74c8f13f,
    0x0133335f,0x3626c0f3,0x76c2ed85,0x22137a01,0x4f10b707,0x9f10be4d,
    0x2003f3c4,0x881dffeb,0x221dffed,0xfffda647,0x07986fff,0x43f881d7,
    0x203dc0fa,0x707881fa,0x97c4f10b,0xf11fa82f,0x002000fc,0x00000008,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x25700000,0x1322a82c,0x40190654,0xa88e440c,0x8992aaaa,0x2550392d,
    0x9999972b,0x33333325,0x06f33324,0x15730550,0x41bcccc8,0x07fcf63e,
    0xe81ff932,0x1f807e0f,0xccc993a2,0x7c4f35ec,0x3a9905f0,0x59999bd4,
    0x9333337e,0x04fcccdf,0xcbec87f3,0x33337e0f,0xf3d86a1f,0x37e4c8bd,
    0x3f07ecc4,0x04e88fc0,0x2e5d07cc,0x75320be5,0x017c05d4,0xd05f307e,
    0x7907c47d,0xd81320fc,0x2645f5f3,0x0fbc8f5f,0xf89f807e,0xadc2e803,
    0x5320be1e,0x17c05d3d,0x917607e0,0x32044797,0x409907e4,0x21f53f3d,
    0xe87a7e4c,0xf807e0f8,0x86b806fa,0x66fc79f8,0x27b4eccc,0x3e3cccde,
    0x3e2ccccd,0x656a6b81,0xdf87e603,0x3600ddcc,0x265763f3,0x7d66973f,
    0xbff807e0,0xd817404e,0x55567c4e,0x37a594da,0x337e3ccc,0x207e2ccc,
    0x0f21d17a,0x337e1fcc,0xd86a2fcc,0x32be23f3,0x965e67e4,0x3f807e0f,
    0x81e605f3,0x6417c1fa,0xf80ba594,0xb5c0fc02,0x42ddaadd,0x541f83f9,
    0x3f3d8fa7,0x23f26fd4,0x1f83e69e,0x80fb87e0,0x3e16a04c,0x3a154c82,
    0x3f00be02,0x3332e7d0,0x40be63ee,0x2987c41f,0x3f60fcf6,0xf275c7e4,
    0x0cccd7c1,0x3d85d83f,0x2f82ea88,0x0ba354c8,0x19999bf8,0x3b6666fe,
    0x5fc47900,0x26be0999,0xd82e6d99,0x24f883f3,0x07c5f11f,0x7cffffff,
    0x07e1fc41,0x417c0fa2,0x80ba9b4c,0x1fffffff,0x019dffff,0xffff71e4,
    0x7ffffcbf,0x0000000d,0x00000000,0x00000000,0x00000000,0x00c98000,
    0x02f6a224,0x00000000,0x22000000,0x3d801e47,0x87540393,0xdfff70e9,
    0x407db01f,0x7dceec7d,0x307bff20,0xfea85dfd,0x3bf660df,0x11776442,
    0xfb17ff7f,0x89fe7c49,0xd9f89e47,0xeeb86a5f,0x05d1b902,0x357c426c,
    0x1f13f74c,0x16e69a64,0x7c43e27d,0x4fe25d11,0x74cfa1e9,0x37e69f11,
    0x39f10f88,0x22791e21,0x402e88df,0x77443fda,0xadc17204,0x23c5541f,
    0x0bf9a640,0x21044798,0xb8f53e98,0x99333f14,0x3a2f83e2,0x47881f11,
    0x1e43f13d,0x7dc3ecc0,0x9740d701,0x540f105c,0x8bbf6a0e,0x6ff5c06a,
    0x56a8b73e,0x22bddddf,0x12e87e0f,0x9ec1f10f,0xa80f20f8,0x67c40bed,
    0xf300fa86,0x83c407cc,0x5c4221fa,0x51a8f10f,0x4799ec3f,0x1088f35b,
    0x44ba1f8f,0x4fe65f07,0x1099e478,0xd9ec05bf,0xfc807e63,0x7883ffff,
    0x30e985b0,0x21f13e8f,0x2e93e66a,0x7d1f47d1,0x9743f1e2,0x97df7078,
    0x36791e27,0x26b80313,0xffffb1f8,0x1ae0fc5f,0x6405c1e2,0x76cc2fee,
    0x66f7ec2e,0x313fb665,0x23c49dd9,0x03c4ba1f,0x0791e202,0x2a000000,
    0x3c42f886,0x000200a8,0x04008008,0x00000000,0x00000000,0xf117207b,
    0x00000be0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x1e400000,0x1647d16c,0x361e4b50,0x37622542,0x4c585ddd,
    0x26730c8c,0x1c882220,0x209866d4,0x09999999,0x00000013,0xf8a5c1e4,
    0xdd7103e6,0xd0f134c5,0x5555441d,0x4ab6e62a,0x2d50f8fa,0xb8fff73d,
    0x3ff6f6a5,0x9999910f,0x000f6599,0x9b331000,0x7cab4c33,0x0e7e44d3,
    0xda8971e8,0x7dc4004b,0x4cf1d30c,0x02222536,0x004c4086,0x80000000,
    0x46eefee9,0x3c9dac8f,0x4b8033e6,0x0f8ad83d,0x8dddddd3,0x12d2269d,
    0x000002e7,0x00000000,0x2f207900,0x441ecb8f,0x9f881dfb,0x22793cc6,
    0x84199999,0x00000000,0x00000000,0xd503c800,0xd501be6d,0x2987dd0d,
    0x000000a2,0x00000000,0x80000000,0x4f93e019,0x01f70300,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_15_usascii_x[95]={ 0,1,0,0,0,0,0,0,0,0,0,0,1,0,
1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,-1,0,0,1,1,1,0,1,1,0,0,
0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0, };
static signed short stb__arial_15_usascii_y[95]={ 12,2,2,2,1,2,2,2,2,2,2,4,10,7,
10,2,2,2,2,2,2,2,2,2,2,2,5,5,4,5,4,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,13,2,4,2,4,2,4,2,4,2,2,
2,2,2,4,4,4,4,4,4,4,2,5,5,5,5,5,5,2,2,2,6, };
static unsigned short stb__arial_15_usascii_w[95]={ 0,2,5,8,7,12,9,2,4,4,5,8,2,5,
2,4,7,5,7,7,7,7,7,7,7,7,2,2,8,8,8,7,14,10,9,10,8,8,7,10,8,2,6,9,
7,11,8,10,8,10,9,9,8,8,9,13,9,9,8,4,4,3,6,9,4,7,7,7,7,7,5,7,7,3,
4,7,3,11,7,7,7,7,5,7,4,7,7,10,7,7,7,5,2,5,8, };
static unsigned short stb__arial_15_usascii_h[95]={ 0,10,4,11,13,11,11,4,13,13,5,7,4,3,
2,11,11,10,10,11,10,11,11,10,11,11,7,9,7,5,7,10,13,10,10,11,10,10,10,11,10,10,11,10,
10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,13,11,13,6,2,3,9,11,9,11,9,10,11,10,10,
13,10,10,8,8,9,11,11,8,9,11,8,7,7,7,10,7,13,13,13,3, };
static unsigned short stb__arial_15_usascii_s[95]={ 127,68,60,79,1,104,117,66,58,29,54,
1,69,72,102,1,25,12,105,67,97,83,59,43,109,33,100,123,21,45,103,
18,34,1,113,14,88,79,71,10,59,1,102,33,25,13,4,68,117,91,103,
41,86,1,72,58,48,38,29,49,117,54,38,92,78,42,6,34,75,58,122,
51,21,82,24,95,113,66,92,50,96,88,78,26,63,84,30,10,112,51,120,
18,15,9,83, };
static unsigned short stb__arial_15_usascii_t[95]={ 1,39,61,1,1,1,1,61,1,1,61,
61,61,61,61,15,15,50,39,15,39,15,15,39,15,15,50,39,61,61,50,
50,1,50,39,15,39,39,39,27,39,39,15,39,39,39,39,1,27,15,27,
15,27,27,27,27,27,27,27,1,15,1,61,61,61,50,15,50,15,50,15,
15,27,27,1,27,27,50,50,50,1,1,50,50,1,50,61,61,50,39,50,
1,1,1,61, };
static unsigned short stb__arial_15_usascii_a[95]={ 60,60,76,119,119,191,143,41,
72,72,84,125,60,72,60,60,119,119,119,119,119,119,119,119,
119,119,60,60,125,125,125,119,218,143,143,155,155,143,131,167,
155,60,107,143,119,179,155,167,143,167,155,143,131,155,143,203,
143,143,131,60,60,60,101,119,72,119,119,107,119,119,60,119,
119,48,48,107,48,179,119,119,119,119,72,107,60,119,107,155,
107,107,107,72,56,72,125, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_15_usascii_BITMAP_HEIGHT or STB_FONT_arial_15_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_15_usascii(stb_fontchar font[STB_FONT_arial_15_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_15_usascii_BITMAP_HEIGHT][STB_FONT_arial_15_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_15_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_15_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_15_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_15_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_15_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_15_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_15_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_15_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_15_usascii_s[i] + stb__arial_15_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_15_usascii_t[i] + stb__arial_15_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_15_usascii_x[i];
            font[i].y0 = stb__arial_15_usascii_y[i];
            font[i].x1 = stb__arial_15_usascii_x[i] + stb__arial_15_usascii_w[i];
            font[i].y1 = stb__arial_15_usascii_y[i] + stb__arial_15_usascii_h[i];
            font[i].advance_int = (stb__arial_15_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_15_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_15_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_15_usascii_s[i] + stb__arial_15_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_15_usascii_t[i] + stb__arial_15_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_15_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_15_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_15_usascii_x[i] + stb__arial_15_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_15_usascii_y[i] + stb__arial_15_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_15_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_15_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_15_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_15_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_15_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_15_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_15_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_15_usascii_LINE_SPACING
#endif

