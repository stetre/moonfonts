// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_37_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_37_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_37_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_37_usascii_BITMAP_HEIGHT        128
#define STB_FONT_courier_37_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_37_usascii_FIRST_CHAR            32
#define STB_FONT_courier_37_usascii_NUM_CHARS             95

#define STB_FONT_courier_37_usascii_LINE_SPACING          17

static unsigned int stb__courier_37_usascii_pixels[]={
    0x0002c880,0x00000000,0x005c0000,0x20000000,0x000000c1,0x006f2a20,
    0x18000018,0x00000000,0x002aa600,0x400d54c4,0x5f98001a,0x02d816f4,
    0xd50007d5,0x74bffffe,0x0fa00001,0x03ffffe8,0x0007c4d3,0x3002f8f5,
    0x007bffb9,0x3bfb7fea,0x33b7aa00,0x2776c400,0x17dfffd9,0x3ffffe60,
    0x7e46ffff,0xffffffff,0xffe984ff,0x3f2204ff,0x501effef,0xbf3000ff,
    0x3e81fc98,0x8000bfc8,0x45559f4e,0x3a00006c,0x3eaaa603,0x3745f883,
    0x01f8f500,0xcaacefa8,0x0fea00ee,0x1b501db5,0x765c0354,0x989bfe8d,
    0xbf980eeb,0x1aaaaaaa,0x55555764,0x4c4eaaaa,0x0dd511df,0x2e213df3,
    0x0ffb82fe,0xc8274c00,0x02f83e84,0x0be1f500,0x20000fc4,0x38ceffea,
    0x07ee0fa0,0x9ae005f7,0x1fe401f8,0x7f103fb0,0x0360be20,0x77640072,
    0x303b200d,0x04c8001f,0x106e87d0,0x6c04e87f,0x003fd40f,0x1f43d400,
    0x4e8001e6,0x005d80be,0x9539fd30,0x0fa03fff,0x01be0df1,0x401f135c,
    0x0fc802fa,0x11760364,0x6401660b,0x98db006f,0x0044000f,0x01f50fc4,
    0x7cc003e4,0x0003fd42,0x21f43cc0,0x3f30007a,0x03f3017c,0x7ec0bb00,
    0x2fb87d01,0xb9003f90,0x09d007cc,0x00be2740,0x750688f5,0x4007f200,
    0x003e60f8,0x3635c000,0x0017c405,0x01be6274,0x3a1e6000,0xd8003d43,
    0x176017c5,0x4403f300,0x7e87d00f,0x36017e20,0x0fb81e64,0x7c47ea00,
    0x0e43cc00,0x07c80074,0x01f31740,0xf1360000,0x8009d005,0x037cc2f8,
    0xdddddddb,0xe87981dd,0x4c003d43,0x2a017c1f,0x01b2000f,0x27cc7d00,
    0x9b003f60,0x007d03d4,0x441ea7d0,0xce987ecb,0x32004da8,0xf326c006,
    0xf1000001,0x6c00fc43,0x207e4005,0x332a06f8,0x0fdccccc,0x2a1f43cc,
    0xf86d8007,0x2004e802,0x3a0000fb,0xf700bf23,0x39d33107,0xf8133f73,
    0xd74d8002,0x0fbdff50,0x5440e754,0x6c006c81,0x3faebe64,0x50000def,
    0xb800f98f,0x07f93006,0x4c000bf1,0x1f43cc0f,0x5f1001ea,0x1f5005f0,
    0x0037e200,0x01fd1f40,0x7fcc5fa8,0xffffffff,0x001f13ff,0xf3172b70,
    0x1001e639,0xf9039fb5,0xf317c001,0xfd737bff,0xa89b0005,0x5c0f5007,
    0xf102ffee,0x07cc000b,0xb87d03e6,0xf8364007,0x4007d002,0x001bdfe9,
    0x9807f8fa,0xbf99886f,0x2199dd99,0x2f500079,0x1e636c5c,0x073f6a20,
    0x2e009f90,0xf900dc0f,0x542f8001,0x540f5007,0x3e00effd,0x03e60004,
    0x5e87d0fe,0x7c0be200,0x000f7002,0x05bffd95,0x00df13e8,0x645f01fe,
    0x0001f304,0x87f172d7,0x9fb71079,0x17fe4003,0x4000be60,0x21ea005d,
    0x00f5007a,0x27c0bf62,0x501f3000,0x7dcfa3df,0x81ae000f,0x00fe002f,
    0x04fc9880,0x802fccfa,0x43f100ff,0x003f104d,0x7d172b90,0x676dc798,
    0xf5b90001,0x009f9019,0xb9003cc0,0x1ea00f50,0x7f05f700,0x407cc000,
    0x327d2ff9,0x0fe000ef,0x1ae002f8,0x81fcc000,0x200bf33e,0x41f100fe,
    0x000be03d,0x1ae2e536,0xb501b8f3,0xf35c8039,0x05ffdbdf,0x001f8800,
    0x001f305f,0x0b9000d7,0x7cc0005b,0x11f44f80,0x03ee00bd,0x3e2002f8,
    0x0b900002,0x8037c4fa,0x7ee65c7f,0x2ccefccc,0x3e2002ec,0xbef88b72,
    0xce8807b9,0x17205da9,0x00157973,0x26007e00,0x801f880f,0x0f98005c,
    0x07cc0000,0xb87d03e6,0xf809d007,0x10364002,0x741ae005,0x3e201fe3,
    0x77f77646,0x43eeefee,0x9b6002f9,0xfffd886b,0x6c1dc04f,0x0000b901,
    0x2003e600,0x200fe05c,0x03f0004d,0x40f98000,0x3d43e879,0x3e007d40,
    0x817c4002,0x05f800fa,0x2007fc7d,0xf1ea05fa,0x3006d805,0x4203d43f,
    0x54074009,0x0000b904,0x7401ea00,0xf1017603,0x01f30005,0x40f98000,
    0x3d43e879,0x17c02740,0xfa82ec00,0x407ee00e,0x7007f63e,0xf135c07f,
    0x00ee8803,0x03f117e6,0x220d1000,0x4000b906,0x00bd0009,0x0fd401f1,
    0x32000d70,0xf9800006,0x21f43cc0,0x007d407a,0x7cc0017c,0xbdfefa81,
    0x203fda99,0x900fe63e,0xf135c01f,0x15fd1001,0x4d827dcc,0x703b0000,
    0x80017207,0x07e402fd,0x2f4035c0,0x03362f98,0xcda83f70,0x81f30000,
    0x3d43e879,0x17c01760,0x5885d800,0x3bffffd7,0x03743e80,0x25c80bf1,
    0xf91000f9,0x405dffdf,0x980000fa,0x3103a60d,0x800333d9,0x2609cfc8,
    0x07b002fd,0x2a23bf30,0x0dff4c5f,0x3fe0ff66,0x1f30004f,0x543e8798,
    0x4007e607,0x1f30002f,0x4007d100,0xb817dc3e,0xf32e402f,0x15df3000,
    0x5407f600,0xbdbd5002,0xfffff883,0xda8005ff,0x00efffff,0x74c003e0,
    0x2e04ffff,0x1effeffe,0x0007ffd0,0xd0f503e6,0x17607a87,0x20002f80,
    0x007d004e,0x417e21f4,0x2a4d807f,0x577dc007,0x7442981a,0x2fdbaacf,
    0x31004c00,0x00033333,0x00015530,0x02aa6000,0x00554c40,0xa8000aa2,
    0x83e85c87,0x002f882f,0xfa8000be,0x2003e800,0x541fc83e,0x2a3d803f,
    0x3fff6006,0xfeceffff,0x7bffd704,0x00000001,0x00000000,0x00000000,
    0x2ec00000,0x07d05f71,0x006c85d9,0x000ccdfc,0x01f40274,0x107d3331,
    0xb006e89f,0xd8802d45,0x372a20ac,0x0000001c,0x00000000,0x00000000,
    0x00000000,0x2ee8fe60,0x9f9105b0,0xff000be2,0xb8005fff,0xd016c00f,
    0x2a07ffff,0x00007e27,0x00000000,0x00000000,0x00000000,0x00000000,
    0x26662000,0x0004fea9,0x2000e200,0x00009999,0x33000019,0x00000133,
    0x00000000,0x00000000,0x00000000,0x00000000,0xfff00000,0x0007dfff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x0cccc400,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x44000000,
    0x54400001,0x0013000a,0x22000000,0xaa98002a,0x00000001,0x00000000,
    0x80000000,0x503eeeea,0x5407dddd,0x0000001c,0xd8800080,0x3a3dffff,
    0x7ec405ee,0xd303ffff,0x3219dfff,0xfff10dee,0xfb10000b,0xa8019fff,
    0x00dfffff,0x05fff700,0x0005fff7,0xdffd9100,0x3fff639d,0x3fee0000,
    0x64c03fff,0x99301cdf,0x1fdc03bf,0x6ffedc00,0x3f6a000a,0x56fdc003,
    0xbf4fca89,0x577d4059,0x33f20220,0xd8eea98a,0x36aa0bce,0x77440005,
    0x5c0dd711,0x1ff712df,0x5f551000,0x005f5510,0xadff9800,0x9533dcba,
    0x5440001f,0xd003eaaa,0x201ee009,0x3a2003fb,0x3fecaace,0x3f7ff6a0,
    0x80fea003,0x6402fde9,0x0bee004f,0x6404efc8,0x03640005,0x407f309b,
    0x17c0006e,0x00000be0,0x0f9800bf,0x01f40000,0x3e800fa8,0x5002ea80,
    0x417dc0bf,0x07d0adf9,0x2200fe20,0x0bea02ff,0xd802f880,0x002e404f,
    0x7c403f10,0xf7007e42,0x017c0003,0x980000be,0x07cc001f,0x00fa0000,
    0x03dc04e8,0x027c4000,0x3e800fd4,0x5c00d700,0x009f102f,0x9f1006c8,
    0x20005c80,0x745c807a,0x001fc404,0x02f805f0,0x001ae000,0x000003e6,
    0x07d4007d,0x000007d0,0x076400d9,0x4d801f40,0x640be600,0x026c000e,
    0x05c809d0,0x806b8013,0x7c027469,0x2f804403,0x026217c0,0x2001ae00,
    0x400000f9,0x8274003e,0x400000fa,0x3e2002f9,0xd003e802,0xd02f8007,
    0x005f0005,0xb972026c,0x704ffffd,0xfb8f100d,0x2603ee00,0x22dfffeb,
    0xeb97c02f,0x2202efff,0xeeefeeed,0x1f305eee,0x0deeeeb8,0xa8007d00,
    0x2a03e80f,0x402eeeee,0x04c8006b,0x07b003e8,0x7c417c40,0x003e8000,
    0x32b9013a,0xefb989bf,0x7e403cc1,0x7440fe21,0x89aef985,0x805f3fca,
    0xb89cfcaf,0x332e03fd,0xccccccfd,0xe981f303,0x3a003cef,0x544e8003,
    0x3332600f,0x02e403fc,0x1f403540,0x2a005c80,0x2e67982f,0x0b903dfe,
    0x3b2027c0,0x1fb100ed,0x3fe602f8,0x545f7d42,0x1fcc0dfd,0x805f7d30,
    0x1f700eff,0x3000d700,0x004fa81f,0xf50007d0,0x74002741,0x4001f403,
    0x003e8079,0x3fa003f5,0x9ff35b82,0x3f50bf95,0xc809f700,0x45e800ff,
    0xdce880ec,0xfffff983,0xf3009f06,0x00ef805f,0x1ae00be2,0xfb83e600,
    0x00fa0003,0x00faa740,0x17c03e80,0x200fc400,0x03b2003e,0xb705ff90,
    0x4e9817f3,0x7fcc06d8,0x8017e404,0x4576c1f9,0x88994fa8,0x4fcaabee,
    0x5f90034c,0x4d802f80,0x98006b80,0x0005fb0f,0xf50003e8,0x3a0009d1,
    0x4001f403,0x01f400f8,0xd105fd10,0xfd505f3d,0x2207d407,0xdafb81ee,
    0x0007e404,0xdfff905f,0x09d31f47,0x004c97a2,0x05f00be6,0x0d700990,
    0x3dd3f300,0x007d0000,0x0007f740,0x026c03e8,0x1f403cc0,0x6f7fdc00,
    0x305f0eff,0x107d00df,0x5ffdbffb,0x00d90136,0x202604d8,0xf101721f,
    0xf8800fa3,0x64017c02,0x8006b804,0x001ffff9,0x20003e80,0x3a0004fa,
    0x4002e403,0x003e805b,0x81597510,0xb003f02f,0x0de54c09,0x00d90136,
    0x7c4004d8,0x532007e0,0x017c002e,0x013200be,0x3e6001ae,0x80003f95,
    0x3ea0003e,0x00fa0000,0x3e8001f5,0x00003e80,0x01740be0,0x9b0002e4,
    0x74007c80,0xf3364003,0x132d7001,0x7c02f980,0xb804c802,0x20f98006,
    0x3a0001fc,0x013a0003,0x9d007d00,0x400fd400,0x2000003e,0xd009b02f,
    0x01f40007,0x7c4007f2,0x88fe6001,0xd55c801f,0x2017dc00,0x804c802f,
    0x0f98006b,0xe80007ec,0x01f50003,0x9803e800,0x009d001f,0x800000fa,
    0x401f302f,0xf10001f8,0x006fc803,0x2f4400db,0x89f401fc,0x2ff8803f,
    0x264017c0,0x4c0035c0,0x000fd80f,0x9d0003e8,0x007d0000,0x5e880bf6,
    0x0000fa00,0x17202f80,0xd10005d8,0x09dd900d,0xf5000fb8,0x403f501d,
    0x807ea0fc,0x7c02fdd8,0xb804c802,0x00f98006,0x3e8001db,0xfa999980,
    0x3a00009a,0x873f2003,0x74006ea8,0x26200003,0xd009bf99,0x07f6217d,
    0xd7333330,0x6ed5401d,0x7ecc1ee8,0xf9510c42,0x20bfc809,0xcfa82fd9,
    0x67d7ea20,0x567d541a,0x1aeea980,0x2bf2aaa2,0x4c0aaaaa,0xdf500fca,
    0x5554c155,0xaaaadeaa,0xfffff70a,0x5300dfff,0x55bd5555,0x3ea01555,
    0x00befeff,0x37eaaaaa,0x0001aaaa,0xffffffff,0x3ffff220,0x7ffd400e,
    0x7c404fff,0xdffb15ff,0xff501dff,0x2005bfff,0x0efffffa,0x3fbffaa0,
    0x99bffe4f,0xe84fffff,0x3ea6ffff,0xffffffff,0x7ffec3ff,0xfffff980,
    0x3fffffa3,0x3fffffff,0x26666662,0xffffd001,0xffffffff,0x00aa8807,
    0xffffff98,0x005fffff,0x33333310,0x00153001,0x0004ccc4,0x80157300,
    0x20000aa8,0x22000aa9,0x000000ba,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x554c0000,0x00000000,0x00000800,
    0x99999500,0xccccc887,0x0003880c,0x99999910,0x64c99999,0xcccccccc,
    0xccca801b,0x999103cc,0x00801999,0x66666654,0xcccccccc,0x99999910,
    0x99999501,0x33333227,0x03cccccc,0x39dffb51,0xfffc80e2,0x6cc00cff,
    0x0713effe,0x2213fee0,0x03efffec,0xdefeca88,0xeeca8713,0x666444cc,
    0x07980cdf,0x99993000,0x49999fb9,0xcccdfcc9,0x200dffdc,0x03cceeca,
    0x19bf9993,0x99dfd710,0x99999db0,0xf99999bf,0x3337f223,0xeccca80c,
    0x9999913e,0x079999bf,0xb7559df7,0xdb10f59f,0x80775437,0xfdb9adfc,
    0xcf8807de,0x55f7ec4e,0x500efca9,0xfb757bff,0x0b901f9f,0x0f300fc0,
    0x07a80000,0x3ae207d0,0x0035c00f,0xbee803e6,0x04d81ec9,0x5f07e07d,
    0xd007d000,0x405f5007,0x0fe87fe9,0x0bee17a0,0x6403fec4,0x203f89b6,
    0x03f985f9,0x2e407fdc,0x3cc03f00,0x1ea00000,0x3e201f40,0x000fc405,
    0x003d40b9,0x7c0fa09b,0x7c001f41,0x4c03e802,0x47f9801f,0x0fc401f9,
    0x0ff1017e,0xf89b2f88,0xf30fd402,0x203f2005,0x807e005c,0x40000079,
    0x007d007a,0x04d801f7,0x26c05f10,0x0fa09b00,0x261360fc,0xd003f03c,
    0x2004f807,0xe8025c7c,0x2e007e63,0x89b2ec06,0x3e2f800b,0x641e6005,
    0xd507e005,0xdddddfdd,0x40001bdd,0x007d007a,0x0fa803f1,0x26c07a80,
    0x0fa09b00,0x321720fc,0x007c40ff,0x01f301f4,0xb0002c40,0x44007cc9,
    0x4d87ea02,0x3e67b000,0x0b900000,0x33260fc0,0xccccccfd,0x3d40003c,
    0x7a803e80,0x9d005f00,0x32007a80,0x07e07d04,0x85f9d0d7,0x407d0079,
    0x0000005b,0x005f117c,0x04d89d00,0x0d71f880,0x002e4000,0x003cc03f,
    0x401ea000,0x0274c03e,0x0fc406c8,0x00801f40,0x3d4040fa,0xd51367e2,
    0x3d80fa00,0x32000000,0x0017dc0f,0x04d81f70,0x01366d80,0x2005c800,
    0x001e601f,0x200f5000,0x1df7103e,0xc807e200,0x001f7006,0x26003e80,
    0x5c6bbd47,0x7c07d006,0x50000002,0x33bee05f,0x07f1000a,0x7f4c009b,
    0x80000ba1,0x807e005c,0x40000079,0x99bd007a,0x007fffb9,0x01fc09b0,
    0x2617bf62,0x4007d001,0x7c5720f8,0x1f401721,0x000005f0,0xb8807f30,
    0x203dfffd,0x5009b06c,0x02f819fd,0x80172000,0x001e601f,0x007a8004,
    0xff9999bd,0x41ea0001,0x46fc00fa,0x03fe22f8,0x3f000fa0,0x26c7d1fc,
    0x0be03e80,0x9f300000,0xbf951000,0x9b02f981,0xf00cf980,0x4cccc405,
    0x005c8199,0x0079807e,0x0f500798,0x3be60fa0,0xb05f0000,0x75c7a80b,
    0x1f400f70,0x07ccba00,0xe801f4b9,0x0000fa03,0x0004fa80,0x02ec6e88,
    0x00f9809b,0xfffc80fa,0x2e42ffff,0x3cc03f00,0x4007cc00,0x207d007a,
    0xc8000ed8,0x3600fc45,0x007d4e84,0x4fa001f4,0x05f3cc6b,0x05d80fa0,
    0x07f50000,0xa8fc4000,0x1013600f,0x4004d80f,0x005b80f9,0x03cc01f3,
    0x54007cc0,0xe807d007,0x20f98006,0x983e806b,0x3a000fbf,0x4da6c003,
    0x2003f2f8,0x001ae03e,0x200fee00,0xfc9f4002,0xffffffff,0x2e0003ff,
    0x407cc006,0x80f70079,0x0f980079,0x7d006c80,0x8003f880,0x3600fa3e,
    0x800bf906,0x46e4003e,0x0f8cd82f,0x7c407d00,0x3ee00003,0x4005f003,
    0x5555533e,0x015bd555,0x000fcc00,0x00fe01f3,0x01f3017a,0xe800f980,
    0x5007d004,0x36b8001f,0x03f7001f,0x3e8007f7,0x07d75c00,0xd003cf5c,
    0x001fa807,0x05f905d3,0xf88027c0,0x00136002,0xf3003640,0xc807ee01,
    0x01fc400f,0x401bf10c,0x07d000fc,0xf10017a0,0x77400b93,0x0aff7ee3,
    0x2a001f40,0xf7f105cf,0x6401f400,0x437cc02f,0x7fc002fc,0x4006d802,
    0x33b6604d,0x0037a200,0xbfc803e6,0x400bf660,0x75cc0bfc,0x82bfa20f,
    0x54402fc9,0x200aacfa,0x36002bf9,0x362002fd,0xffb3ffff,0xbf555301,
    0xf9801555,0x41bfa03f,0xadeaaaaa,0xcfc81aaa,0x6427e4c1,0x3e2a801f,
    0xfea81dfd,0xb026c000,0xd8809fff,0xfeb881bf,0x7f7fdc00,0x7e4001ef,
    0x0cffffef,0xdffdff70,0xffff5003,0xffc809ff,0x00ff5001,0x4002ae60,
    0xfffffff8,0x7fc404ff,0x2617f201,0xffffffff,0xfd505fff,0x305dffdf,
    0x5555559f,0x4749d555,0xffeeffe8,0xd553000c,0xfff9015b,0x3ffee007,
    0x00beffee,0x0006ae60,0x009aba88,0x0006ae60,0x00000000,0x00000000,
    0x00000000,0xaba88000,0x3fffe600,0xffffffff,0x26ae6204,0x7fff4000,
    0x055503ff,0x35773100,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x0f333220,0x31e6664c,0x85999999,
    0x223cccc9,0x9303cccc,0x664c7999,0x666444cc,0x666640cc,0x02bccccc,
    0x99999993,0x99999999,0x33333261,0xcccccccc,0x3333261c,0x801bcccc,
    0xcccccccc,0x33262ccc,0xbccccccc,0x99995002,0x64400999,0x99101ccc,
    0x32219999,0x991004cc,0x0e6d4079,0x03cefc98,0x4c7bfb93,0x42ccdfcc,
    0x224efdca,0x9304cfec,0x7e4c7bfb,0x766444cd,0x7ee640ce,0xefeccccc,
    0x677664c2,0xcccccccc,0xbf9930fc,0x99999999,0x7ee4c5f9,0xffeccccc,
    0x33337e02,0x24eccccc,0xcccdfcc9,0x402effcc,0xfdfcccca,0xfd991002,
    0x3f33220d,0xfdd910cd,0x9bfd9005,0x01bffe60,0x1db003f5,0x3e601f40,
    0x200be605,0x200fa05d,0x2035c05c,0x009b02fc,0x00fa03e2,0x1035c17c,
    0x00be09f7,0x80ba05f3,0x22001fc9,0xc8005d9f,0x02f802fe,0x5f00b9b9,
    0x7ffdc05f,0x0076400f,0x03e803f7,0x3ee013ea,0xe803ee00,0x5c05c803,
    0xd80fc806,0xd01f1004,0x2e0be007,0xf82f9806,0x5d027402,0x5c00fd00,
    0xc8001f56,0x17c00fbd,0x201f9dc8,0x7c405f7b,0x0bd005ff,0x0fa00be6,
    0xbd001fdc,0x7d00fe20,0x6b80b900,0x4d83f880,0x7d01f100,0x1ae0be00,
    0x017c3640,0x017401d9,0x3e800fcc,0x2b9000fe,0xc817c04e,0xf9f409b5,
    0x0015c402,0x04f889f1,0x05f907d0,0x6d82f980,0x5c803e80,0x5d8035c0,
    0x416004d8,0x7019003e,0xf0fa200d,0xd007ea05,0x003f1005,0x003641f3,
    0xf00fd572,0x07d57205,0x002f87cc,0x6c5f5000,0xf90fa006,0x83ee0003,
    0x03e800fa,0x035c05c8,0xa84d84d8,0x2a0fa002,0x400d7001,0x7c40546b,
    0xb802e803,0xf88b9007,0x5d972001,0xd2e40be0,0x017c9b07,0x71f90000,
    0xb1f4001f,0x4e80003f,0x0fa007f1,0x0d701720,0x09b05f10,0x41f400b9,
    0x00d7004d,0x06d803cc,0x3fa805d0,0x09d05f00,0x05f12e40,0xf72e40be,
    0x00be1f88,0x5fdb0000,0xfe8be800,0xaf980005,0x2b7a006c,0xdaaaaaaa,
    0x22035c05,0x555bb06e,0x67400bb5,0x004eaaaa,0x07c400d7,0x74003ee0,
    0xecbaaaac,0x20f5003f,0x9172007b,0x2e40be0d,0x17c6c8be,0x3e600000,
    0xeece8005,0x40002efb,0x3a001ffc,0xffffffff,0x435c05ff,0xb00efba8,
    0x0bffffff,0x7fffff40,0x00d7004f,0x5f300fc4,0x7ffff400,0x002fffff,
    0x00be209b,0x7c1f42e4,0x16c8b902,0x3602f85f,0xe8000dee,0x7f4002fe,
    0x000bf625,0x3e8009f0,0x7dc05c80,0x3fffffff,0x02e426c0,0x009b07d0,
    0x0f8801ae,0x5d0017a0,0x037eea60,0x17601f88,0x07d42e40,0x222e40be,
    0x02f87b9f,0x0009fff3,0x003f71f9,0x00fb82f4,0xd000fa00,0xb80b9007,
    0x019aaaaf,0x00b909b0,0x8026c1f4,0x81e6006b,0x174000fc,0xf7036c40,
    0xb9999999,0x20b9001f,0x5c817c5d,0x2f83edd8,0x001dff70,0x03b61fa8,
    0x0db01f40,0x2001f400,0x405c803e,0x26c0006b,0x07d00044,0x0d701011,
    0x1f982dc0,0x00ba0360,0xeee80fc4,0xfeeeeeee,0xf305c803,0x85c817c5,
    0x02f80ff9,0x88005ffd,0x802f443f,0x00be203e,0x3a001f40,0x5c05c803,
    0x026c0006,0x9801f400,0x36006b87,0x7c04f884,0x36002e81,0xb800f984,
    0x3205c806,0x82e40be6,0xf105f02a,0x0bd000bf,0x0fa00fe2,0x3a000d90,
    0x401f4003,0x0035c05c,0x20001360,0x81f3003e,0x03f5006b,0xd03f00db,
    0x6426c005,0x803f1005,0x7cfe205c,0xf000b902,0x001ff705,0x3ea00ec8,
    0x2201f401,0x03e8001f,0x2e401f40,0xb0001ae0,0x07d00009,0x0d703e60,
    0x3f507f30,0x05d03f00,0x0be0be20,0x2e404d80,0x40be3ee0,0x82f8005c,
    0x7d4004fd,0x200fc801,0x005d803e,0x1f4003e8,0x1ae02e40,0x0009b000,
    0x3e6007d0,0x3a6035c0,0xf003f884,0xd1005d03,0xa800f30d,0x7402e407,
    0x00b902fc,0x00df05f0,0x8156fdc4,0x222dfaa8,0x00aadfaa,0x260155f5,
    0xaaadeaaa,0x35bf5500,0x835db550,0xaaaafca9,0xadeaa802,0xa8801aaa,
    0xaaaaacfa,0x20fcaaaa,0xaaaaafda,0x5f904ffc,0x55555555,0x3eaa23f5,
    0xbaaaaaac,0x36a20efd,0x2aa01aae,0x6d442cfb,0xff301aae,0xaaeda885,
    0x33eaaa01,0xf70004c2,0xf703ffff,0x3ea3ffff,0x204fffff,0xff884fff,
    0x5fffffff,0x7fffff88,0x37ffffcc,0x3ffffffe,0x3fe601ff,0x06ffffff,
    0xffffffa8,0xffffffff,0xfffff50f,0x4017bfff,0xfffffffc,0xf71fffff,
    0xffffffff,0xff705bff,0x3e60dfff,0x2a1fffff,0x207fffff,0x7ffdc2fc,
    0xfff306ff,0x00003fff,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x70000000,0x99999999,0x2a000003,
    0x00000351,0x22000054,0x13100009,0x000cc000,0x40001988,0x98800009,
    0x17774c00,0x004eeec8,0x40220000,0x0e6d4008,0x8037bbb6,0x5c2eeeeb,
    0xcccdfccc,0x74c00001,0x0019f92f,0x0007d000,0x9fffffb3,0x7fe440ea,
    0x4400dfff,0x9effffdb,0xfedb882b,0x7000cfff,0x03bffffd,0xfea97764,
    0x99102eff,0x3b32a07f,0x0eeee985,0xa8b7fb22,0xeffe8cee,0x019ffd30,
    0xeb8dfff3,0x32600bcf,0x1f401cfd,0xfd880000,0x01ff540d,0x000fa000,
    0x731359f9,0xdf50bdfd,0x7fd53137,0x22b3fe60,0xf84ffdb9,0xeca89ace,
    0x2ff6200e,0x03fda98a,0x59f97f95,0xe807fb51,0xc885c803,0x7df51fcc,
    0x3b267f73,0xaed99dfe,0xb84ea9cf,0x3d40ffff,0x7401ea00,0x64400003,
    0x7fdc01ef,0x07d00002,0x3a00fe40,0x201fcc5f,0x406d82fb,0xf88004fa,
    0xa803ba05,0x07ffa03f,0x07d007dc,0x9f880b90,0x641984fb,0x227fc46f,
    0x5fff887a,0x81a81f88,0x007d005c,0x0177dc00,0x003df910,0xf3003e80,
    0x44bf1003,0x81f7004e,0x003e803f,0x03b20f70,0x7f407ea0,0xe80fe201,
    0x4405c803,0x32002fef,0x5f05e80e,0x17405710,0x00fa1be6,0x540001f4,
    0x220003fe,0xd0001dfc,0x80176007,0xd001ee4b,0x4400fc87,0x10f50000,
    0x82ec005f,0x205d803e,0x405c803e,0x64001ff8,0x0be09b05,0x3b226c00,
    0xe800fc1f,0x3fa60003,0xb300000c,0x3e80019f,0x40005f00,0x22dc004d,
    0x001acee8,0x9aacaa88,0x4007a87a,0x9007d07a,0x6401f40b,0x000fc405,
    0xf04d82e4,0xf1ae0005,0x007cc7d7,0xd88003e8,0x000000df,0x74007fd5,
    0x001f8803,0x3fffffa0,0xffffffff,0xffffb706,0x7fecc05b,0x87fffeef,
    0x07c4005c,0x02e401f4,0x80b9007d,0x5c8001f8,0x00be09b0,0x8f987cc0,
    0xe801ae6b,0x0ffdc003,0xfb800000,0xfffff71e,0xffffffff,0x0003e61f,
    0xaaaaade8,0x2aaaaaaa,0xdfeca880,0x880efd40,0x4005c87b,0x803e81f8,
    0x200fa05c,0x00fc405c,0x04d82e40,0x8fc0005f,0x1323f15c,0xb8003e80,
    0x000002ef,0x551177dc,0x55bf5555,0x01f85555,0x00017200,0xf32fc400,
    0xd50f5009,0x7d07a800,0x1f40b900,0x3e202e40,0xb05c8001,0x8000be09,
    0xea6c5f3e,0x000fa002,0x000efe44,0x00ffaa00,0x0fa007d0,0x000fa800,
    0x7dc00660,0xf5001f70,0x64001f30,0xb9007d06,0x3a2026c0,0x000fc405,
    0xf04d82e4,0x4039b505,0x3ae0f9dc,0x0fa001f8,0x7ecc0660,0x74c0000c,
    0x3e8000cf,0x4001f700,0x80017a0a,0x23f3005d,0x20f9005c,0x05f3005d,
    0x817200fa,0x17fea07c,0x90003f10,0x17c1360b,0xa81bffe6,0x3dfc45cf,
    0x3200fa00,0x01ff5405,0x006fec40,0x74007d00,0x0fec400d,0x96a007f3,
    0x27e801fd,0x3fa200fb,0x8809f107,0x200fa04e,0x433e205c,0xaeccfca8,
    0x0003f100,0x7c1360b9,0x07fffdc2,0xfd82ff88,0x401f4005,0x5ff7005c,
    0x03df9100,0x4007d000,0x5cc0afe8,0x2efa82ff,0x363feb98,0xfd981bff,
    0x982bba21,0x0aafbdfb,0x2e20f7cc,0xdfa980df,0xaeda880a,0xffdff500,
    0x993ff23d,0xaaabfa99,0xeda881aa,0x2056ec0a,0x3ffe22cf,0x5407fc05,
    0x01f4004f,0xf91002e4,0x0bbee03d,0x003e8000,0xffefffc8,0x3f6200bf,
    0x0cfffeef,0x77ff55dc,0xd881dffe,0x52fffeff,0xfb107fff,0x207fffdf,
    0x85fffff8,0x203ffffb,0x8800aba8,0xffffffff,0xffb86fff,0x17fec3ff,
    0x2a887ffe,0xd0000000,0x000b9007,0x3a61bfb1,0xe800003f,0x75310003,
    0x75300035,0x5d4c0013,0xba9800aa,0x2620000a,0x000001ab,0x00000000,
    0x00000000,0x20000000,0x005c803e,0x066cf660,0x01c80000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x20000000,0xaadfaaa9,
    0x5daaaaaa,0x00000000,0xddb00000,0xdddddddd,0x3eeeea87,0x40deeed8,
    0x83eeeeed,0x02eeeeed,0x99950000,0x006665c3,0xeeed8002,0x2eeeeea1,
    0xbbbbbbbb,0x0199301b,0x39d50020,0x99999998,0x00999999,0xfffffd80,
    0xffffffff,0x0000005f,0xd0000000,0x9999999b,0xefd987fb,0xbffcb81c,
    0x66776540,0xcdfccb81,0xf3012a01,0x3fff2dff,0x003fff62,0xfff3007d,
    0x7ffff4cb,0xffffffff,0xedfb85ff,0x1763502f,0x3e37ffcc,0xffffffff,
    0x0004ffff,0x00000000,0x00000000,0x27c407d0,0x7e403f90,0x4007d401,
    0x80d7007b,0xff75fff8,0x03ffe41f,0xf7007ff6,0x000003ff,0x89f717dc,
    0x81dd32fa,0x360ffffb,0xdddddddd,0x0003dddd,0x00000000,0x00000000,
    0x17a205d0,0x3f20bee0,0xd007d001,0x201ae009,0xfff34fff,0x2e06ffb8,
    0x3600fc9f,0x000005ff,0x56fcc174,0x077443fc,0x000bfff1,0x00000000,
    0x00000000,0x00400000,0x17dc00dd,0x35c001db,0x5c003e60,0x13ffe806,
    0x5ffa8dff,0x036c5f30,0x00001fff,0x6fec4000,0xa887f601,0x00000001,
    0x00000000,0x00000000,0x001db000,0x00edbfb8,0xbb017c40,0xb5c2fba0,
    0x3f60fda8,0xf117fe2f,0x889f109f,0x84ffa85e,0xccccccc8,0xcccccccc,
    0x2e000003,0x00000001,0x00000000,0x00000000,0x01f90000,0x003fee00,
    0x1f883640,0xfddff930,0xfc85bffb,0x3e13fa0f,0xf305e83f,0x880ffc87,
    0xdddddddd,0x4ddddddd,0x00000000,0x00000000,0x00000000,0x00000000,
    0x10001fb8,0x20007fdb,0x006c81f8,0x405bff93,0x41fec7fb,0x007e41fe,
    0x027f43f7,0x00000000,0x00000000,0x00000000,0x00000000,0x2fa80000,
    0x51dd1000,0x1760007f,0x7dc005f1,0x23fd405e,0x20fc80fb,0x16c801f9,
    0x2aa201ff,0xaaaaaaaa,0xaaaaaaaa,0x00000000,0x00000000,0x00000000,
    0x00000000,0x88001fcc,0x00fea0ee,0x07b83e60,0x0fe6be60,0x20085f88,
    0xc8200080,0x3fffee01,0xffffffff,0x04ffffff,0x00000000,0x00000000,
    0x00000000,0x26000000,0x441e604f,0x04f980ee,0x00fa4e80,0x03f72f44,
    0x00000054,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x0f3013a2,0x4f980bd1,0x0fabd400,0x6d81d900,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x40000000,0xaaaaabfe,0x7f547caa,
    0xfca980ab,0x3b3e001d,0x2206e004,0x00000004,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x3fffffe6,0x267fffff,0xe84fffff,
    0x2006ffff,0x00001ffb,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__courier_37_usascii_x[95]={ 0,7,4,2,3,2,4,7,9,4,0,2,4,2,
7,3,3,3,2,3,3,3,4,3,3,4,7,4,0,1,0,0,3,0,1,2,2,1,2,2,1,3,2,1,
2,0,0,0,2,1,1,2,2,1,0,0,1,1,3,0,0,0,3,1,7,2,0,2,2,2,3,1,1,3,
2,3,2,0,1,2,0,2,2,3,2,1,0,0,1,2,3,0,9,0,2, };
static signed short stb__courier_37_usascii_y[95]={ 27,6,7,5,5,6,9,6,6,6,6,9,22,16,
23,4,6,6,6,6,6,6,6,6,6,6,13,13,9,14,9,7,6,8,8,7,8,8,8,7,8,8,8,8,
8,8,8,7,8,7,8,7,8,8,8,8,8,8,8,6,4,6,6,34,5,12,6,12,6,12,6,12,6,6,
6,6,6,12,12,12,12,12,12,12,8,13,13,13,13,13,13,6,6,6,15, };
static unsigned short stb__courier_37_usascii_w[95]={ 0,5,12,15,13,15,13,5,7,7,13,16,8,15,
6,13,13,13,14,14,13,14,13,13,13,13,6,9,16,18,16,12,13,20,17,16,17,17,17,17,18,13,18,18,
16,20,19,17,16,17,19,15,16,18,20,19,18,17,14,6,13,6,13,20,6,16,18,16,18,16,15,18,18,14,
12,16,15,20,17,16,18,18,16,14,16,17,19,19,18,17,14,7,2,7,15, };
static unsigned short stb__courier_37_usascii_h[95]={ 0,22,10,25,26,22,19,11,26,26,13,17,10,3,
5,26,22,21,21,22,21,22,22,22,22,22,15,18,17,7,17,21,24,19,19,21,19,19,19,21,19,19,20,19,
19,19,19,21,19,24,19,21,19,20,19,19,19,19,19,26,26,26,10,2,6,16,22,16,22,16,21,22,21,21,
28,21,21,15,15,16,22,22,15,16,20,15,14,15,14,21,14,26,26,26,6, };
static unsigned short stb__courier_37_usascii_s[95]={ 252,246,143,105,68,153,190,137,89,97,123,
52,170,228,221,33,217,238,18,231,49,188,20,203,86,72,226,242,18,179,35,
63,139,180,162,1,129,111,93,76,57,241,130,20,1,221,201,220,76,121,149,
33,204,94,169,221,1,39,147,47,54,82,156,179,214,118,53,69,100,86,138,
34,119,205,1,154,171,205,152,135,169,1,188,103,113,170,103,233,84,187,69,
25,22,14,198, };
static unsigned short stb__courier_37_usascii_t[95]={ 1,1,112,1,1,1,53,112,1,1,112,
95,112,112,112,1,1,30,53,1,53,1,30,1,30,30,95,75,95,112,95,
53,1,75,75,53,75,75,75,53,75,53,53,75,95,75,75,30,75,1,53,
53,53,53,53,53,75,75,75,1,1,1,112,120,112,95,30,95,30,95,30,
30,30,30,1,30,30,95,95,95,1,30,95,95,53,95,112,95,112,30,112,
1,1,1,112, };
static unsigned short stb__courier_37_usascii_a[95]={ 314,314,314,314,314,314,314,314,
314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,
314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,
314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,
314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,
314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,
314,314,314,314,314,314,314, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_37_usascii_BITMAP_HEIGHT or STB_FONT_courier_37_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_37_usascii(stb_fontchar font[STB_FONT_courier_37_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_37_usascii_BITMAP_HEIGHT][STB_FONT_courier_37_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_37_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_37_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_37_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_37_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_37_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_37_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_37_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_37_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_37_usascii_s[i] + stb__courier_37_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_37_usascii_t[i] + stb__courier_37_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_37_usascii_x[i];
            font[i].y0 = stb__courier_37_usascii_y[i];
            font[i].x1 = stb__courier_37_usascii_x[i] + stb__courier_37_usascii_w[i];
            font[i].y1 = stb__courier_37_usascii_y[i] + stb__courier_37_usascii_h[i];
            font[i].advance_int = (stb__courier_37_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_37_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_37_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_37_usascii_s[i] + stb__courier_37_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_37_usascii_t[i] + stb__courier_37_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_37_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_37_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_37_usascii_x[i] + stb__courier_37_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_37_usascii_y[i] + stb__courier_37_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_37_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_37_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_37_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_37_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_37_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_37_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_37_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_37_usascii_LINE_SPACING
#endif

