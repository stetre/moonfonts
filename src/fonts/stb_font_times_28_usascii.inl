// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_28_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_28_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_28_usascii_BITMAP_WIDTH         256
#define STB_FONT_times_28_usascii_BITMAP_HEIGHT         98
#define STB_FONT_times_28_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_28_usascii_FIRST_CHAR            32
#define STB_FONT_times_28_usascii_NUM_CHARS             95

#define STB_FONT_times_28_usascii_LINE_SPACING          18

static unsigned int stb__times_28_usascii_pixels[]={
    0x12003001,0x40300220,0x2666660b,0x2aea6000,0x33333000,0x20000001,
    0x00000000,0x20000000,0x40000081,0x00000001,0x73048000,0x44039100,
    0x7103c02b,0xb80e4405,0x3fbbba6f,0x4d6e4402,0x202ccb98,0x202eeeff,
    0x2ceffec8,0x1000e600,0x059dddd9,0x2ea21fd8,0xdb101dfd,0x0d1005df,
    0x3dbd301d,0x8800b500,0x8001deeb,0x3002dedb,0x006fea8b,0x40b700f6,
    0x4401f107,0x40fa601e,0x077202fb,0x03fc0ee0,0x3260cfb8,0x7f5c404f,
    0x67dc02de,0x4413ee20,0xe983a3ff,0xf71fcc2f,0x3c44a807,0x00fb97cc,
    0xf88003a2,0x4001f50d,0x005f30eb,0x06fb8859,0x1f100f40,0x202dc1e0,
    0x7dc0001e,0x4004d882,0xd807f83a,0x03bf203f,0x326eabae,0x407fb04f,
    0x7fc40ef9,0x8bf90d53,0x201fd86e,0x3ec2d43b,0x016c05f1,0x07d0bf20,
    0x1f90fe60,0x6f880e80,0xf1035400,0x02fc1e07,0xf70000db,0x20007d05,
    0x2a03fc3a,0x84fd806f,0x426c733f,0x4fd806fa,0x81fb3ff8,0x07f30ff9,
    0x20ec0df3,0x2fc6e83b,0xfe8005a8,0x744017c1,0x3027cc0f,0x001be20b,
    0x82fcc0fe,0xf306f987,0x5f700007,0x2c0005c8,0x2ff881fe,0x2a1ffa80,
    0x2254732f,0xf9802ff8,0xfb97f41f,0x3f73fc42,0x07c03fe0,0xff1be076,
    0xd0001d10,0xa803d45f,0x00ff885f,0x01be2059,0x3ea03f60,0x0ff10f04,
    0x154003f6,0x03e62fb8,0x1da9cca8,0x2e07f832,0xff8800ff,0x21cd7ee5,
    0x8007fdc3,0x30fec5ff,0x0ff4bf50,0x99952fe8,0x99f9999f,0x21be3f41,
    0xbfb0002d,0x7dc00baa,0x3a05ff04,0x654df100,0x5c1fd402,0x3fe0f03f,
    0x5c037c40,0x45f705ff,0x647d104c,0x0ff1547e,0xff003fec,0x1cdffccd,
    0xe801ff60,0x2007ec7f,0x40bfa1fd,0xb95533fe,0x155d7555,0xb89f13ec,
    0x3fea0004,0x3bbb60dd,0xfe81fec5,0x3e205983,0x0efffe8e,0x5f30bf50,
    0x5c36c1e0,0x5fc8805f,0x07e25f70,0x117ee26c,0xdfd03fc9,0xb07fec00,
    0xfe807dff,0x83ff6006,0x21fcc07c,0x07fd05fd,0xf105a879,0x0e883f25,
    0x1bfe2000,0x3fa07fe2,0x5909fb03,0x4d6ffc40,0xdf306ffc,0xe83c0fa0,
    0x5004fc83,0x54bee0bf,0xfc81f906,0x40ff1cc2,0x3f2005ff,0x0f7fec1f,
    0x6400bff0,0x901ae1ff,0xf03ff50b,0x3b83b05f,0x360f3260,0xbf500181,
    0x03f885ff,0x17f605ff,0x81ff101a,0xff882ff9,0x8780d980,0x007fb04a,
    0x97dc17ea,0xe82fb84b,0x0ff1540f,0xf90037fc,0x5fff701f,0xc801bfe0,
    0x881aa0ff,0x39ffb00e,0x1f01ffb7,0x970001d8,0x203ebea8,0x41dff1fd,
    0x40bfe06a,0x202cc4fd,0x09fb06f8,0x25c03ff1,0x3a01c99e,0x0bf5003f,
    0x7c1e4bee,0x0c86f886,0x07fd81fe,0xfa81ff60,0x07fe84ff,0x0b31ff60,
    0x376a00dc,0x2626fc8b,0x9f9999ea,0x11a20019,0x360be27f,0xd93fee1f,
    0x6c0bfa01,0x2201642f,0x20bf706f,0x879101ff,0xfe80b227,0x20bf5003,
    0xf985b2fb,0x4583fc83,0x01fee07f,0x2e606fe8,0x3fe43ffc,0x488bfd00,
    0x3e200120,0x3bfbaa2f,0x0eeefeee,0x0fc83d00,0xd0df31ba,0xd80973ff,
    0x683fd03f,0xf506f880,0x301ff109,0x03661e0b,0x7d4013f2,0x0f65f705,
    0x1ff883f7,0xa81fe1d4,0x5ff001ff,0x46fb9cc0,0xf8802ff9,0x00e0182f,
    0x1e417ee0,0x12e0012a,0x647e83f6,0x6eff884f,0xff04fb80,0x7c402cc1,
    0xf307f706,0x83c0be0f,0x004fb83e,0x4bee0bf5,0x9107ec5c,0x7f8588fd,
    0x5c02fe40,0xe8e6046f,0x4037e41f,0x000005fb,0x07605f88,0x06980077,
    0xf07ec1fd,0x17fee0df,0xf10df104,0xf8802c8b,0xf503f906,0x1e05f50d,
    0x02fcc36c,0x5f705fa8,0x267f91ea,0x83626f8d,0x3fd00ff0,0x320ffc40,
    0x40fc8e60,0x3e202ff8,0x5101880f,0x202f4400,0x74001d87,0x3f41f901,
    0x3ea07ff6,0x91220eff,0x340fc81f,0x9f06f880,0x3ee0fee0,0x03fe0f03,
    0x3ea00df1,0x3e25f705,0x437ffe61,0x2a1dcafd,0xfd100ff2,0x901fd105,
    0x209d1cc7,0xee982fe8,0xfb05ff00,0x01dd1009,0x0007c344,0x897d4079,
    0x67ffcc5f,0xffc8ed99,0x5e80ecdf,0x00930be2,0x6d88bfe2,0x3ea03f60,
    0x0ff10f04,0x3ea003f2,0x1e45f705,0x177106e6,0x801fe588,0xbedbcdfb,
    0x4e65f900,0x775c01fb,0x7c03eecc,0x104fd82f,0x95003795,0x16600688,
    0x03b23720,0x0fffff6a,0x205dfff5,0xc83dcdd8,0x3bf66002,0x13e204fc,
    0x98782fcc,0x005f106f,0x8bee09f5,0x640000e8,0x36001fe2,0x6d403fff,
    0x01edddef,0x40026620,0x19806018,0x0620cc00,0x95000b80,0x80151003,
    0x40110019,0x03310002,0x3e201d70,0x817a0f03,0x03fa806a,0x005a85f7,
    0x00ff0ee0,0x007ffee0,0x00032e62,0x00000000,0x00000000,0x00000000,
    0x00000000,0x3e201e80,0x016e0f00,0x01fa805b,0x00b705f7,0x00ff0790,
    0x007ff4c0,0x00000398,0x00000000,0x00000000,0x00000000,0x10000000,
    0x204b805b,0x4401f107,0x2dc36e1d,0x3aa05f70,0x816d400a,0xda80007f,
    0x000000ae,0x00000000,0x00000000,0x00000000,0x00000000,0x5c401910,
    0x57103c01,0x9ffb2b80,0xfffff81b,0x37bae202,0x402ecbab,0x003fffff,
    0x002f2e60,0x00000000,0x00000000,0x00000000,0x00000000,0x30010000,
    0x02200a00,0x000d4c10,0x4d54c400,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00170201,0x00000200,0x00000730,0x00e20551,0x54037500,0x2a20aaaa,
    0x880001aa,0xee88000b,0x00b84eee,0x47300000,0x30000bc9,0x76544019,
    0x01c8acee,0x10066ed4,0x59fddd95,0x1002c893,0x9359dffb,0x05bbdb30,
    0x306fea80,0xb001bff9,0x3665ff77,0x644000ff,0xeeefd98d,0x817ffd30,
    0xf9800cfa,0x007fecc3,0x7ffffe40,0x2002fdc2,0x3faa003a,0x03dfffb7,
    0x17f60faa,0xa8856fd4,0xdb102ffd,0x13df5001,0x2cc4fea8,0xa88efcc0,
    0x117cc4ff,0x7dc400db,0xffedfa86,0xdf51ec07,0x0003fe62,0x4ffcc3f7,
    0x4c0ffc41,0x10ffa007,0x88001ff3,0x982aaaae,0x0374003e,0x379ff510,
    0xfea8dff9,0x982fb83f,0x0bee00ef,0x7dc013ea,0x217e200e,0x983f400e,
    0x7cc2e44f,0x11be6001,0x502ff989,0x7fc1a83f,0x7c3f4000,0x707f901f,
    0x0ffb2009,0x320007fc,0x26000002,0x3e2002ff,0x117fd41f,0xf9800ffa,
    0x443d800f,0x1ff3006f,0x0590d500,0x497027cc,0x00bf04f8,0x6c0637cc,
    0x003f704f,0x7cc001ff,0xf103fc87,0xa800f81f,0x1ff03fbd,0x000fc400,
    0x0bffb000,0xfe83fc40,0x2003fc84,0x873003ff,0x9fd000fe,0x02cc2c00,
    0x124c0ff5,0x03f881df,0x5401be60,0x003fb02f,0xff8001ff,0xf9007ec1,
    0x74402d47,0x1fd03fb8,0x67ffe400,0x3e200000,0xf1000ffa,0x3217f20f,
    0x3ff3003f,0x09f70c00,0x8003fe60,0x3e201d00,0xfe8500df,0x73007e45,
    0x200df337,0xbfeaa85c,0x4c3fe02a,0x0ff200bb,0x27f980bf,0xf72d802d,
    0xa983fa07,0x3ffa0aaa,0x0aa02fff,0x04fea5c0,0x3ee0ff10,0x7003fc85,
    0xf10001ff,0x5c0ae63f,0x5900007f,0x017ffe40,0x75c6ffcc,0x326ff200,
    0x0d8806fe,0xccdffcc8,0xff71ff00,0xacfc80df,0xbfd800bd,0x2e5b8068,
    0x441fd03f,0xb9881bff,0x3f222fff,0x2e1f005f,0x0ff1007f,0x0ff20fee,
    0x8003fec0,0xfeccbff9,0x2037ec0e,0x40999998,0x7ffec059,0x7ffd401e,
    0x7ec3e405,0x00774c06,0x9ff003fd,0x3b01fec5,0xef980033,0x7074403c,
    0xa83fa07f,0xffd3000e,0xa805fc81,0x200bfe25,0x05f907f8,0x3fe007f9,
    0x1df70005,0x2ffc6fe8,0x3bffee60,0x7dc00e82,0x2a00dfff,0x7f302fff,
    0x7e40df50,0x3fd02fff,0xfa83ff00,0x80009b04,0x0f400ffd,0x87f40fee,
    0x744000db,0x402fdc2f,0x4037e42e,0x20dd07f8,0x7c2883fc,0x9fb0006f,
    0x7fc5ff30,0x03ff7007,0x3f6200b2,0x9e980fff,0x1fd82ffe,0xea806f98,
    0x003fd07f,0x85fa81ff,0xccceeff8,0x05f9800b,0x81fdc25c,0x0005b8fe,
    0x0bf513ee,0x1ff98698,0x2e1ffc40,0x887f901f,0x01ffa6ff,0xff81ff40,
    0x2003ffa3,0x016607fa,0x20effe98,0x3ffb11f9,0x6f980ff8,0xd03ff100,
    0x81ff003f,0xfff705f9,0x005fffff,0x4cf4c05d,0x09cfc999,0x001feff4,
    0x5fa89f10,0x66667640,0x7c405ffc,0x01eebddf,0xfff10ff2,0x0007ff63,
    0x27f40ff6,0xf5005ff9,0x0440e80f,0x2f45ff90,0x1ff127f4,0x6400df30,
    0x801fe83f,0x82fcc0ff,0xb753312c,0x6406880d,0xffffffff,0x7d7f45ff,
    0x0be0001f,0x57c40bf5,0xffcaaaaa,0x4c5fe200,0x883fc800,0x05ff31c9,
    0x3209f700,0x013fe61f,0x85901fea,0x9a7f4039,0x7c7f884f,0x006f981f,
    0x07fa0bea,0xbf303fe0,0x80b00b50,0x6665403c,0x3cefeccc,0x07fdc7f4,
    0x2a07d400,0xf012e05f,0x03fc407f,0x8d01fe40,0x38800efd,0x21f60df5,
    0x7d401ffc,0x1662cc07,0x0fea7f90,0x09fd07ec,0x7dc00df3,0xf801fe80,
    0x222fcc0f,0x100dc05f,0x7dc0001d,0x3f21fd03,0x41740206,0x003e05fa,
    0x3fc40df7,0xb81fe400,0x2037fcc2,0x7c0fec48,0x00ffd884,0x83a01fea,
    0x87fa01f9,0xfb8db06e,0x0037cc1f,0x007fa09d,0x8df303fe,0x889bdfe8,
    0x6ff445c9,0x7dc0001f,0x7f41ff03,0xa89dfc85,0x20bf503e,0x3ff9806b,
    0x9000ff10,0x100c887f,0x54415bfd,0x75c6f884,0x407bf200,0x22b807fb,
    0x4fb82ff9,0x07e617dc,0x3ae33ffa,0x45d91aff,0x0ffe05c8,0xff507fe0,
    0xffffd910,0x7fff105f,0x07f70000,0x3ff987fe,0x0effffcc,0x9f10df70,
    0x103ffe00,0x40015ff7,0xd90003fd,0x017bddff,0x037af722,0x2f3fb6a0,
    0x9800beec,0x37fb3665,0xdf703ffd,0x36203db7,0xbef9dfff,0x5ddfff90,
    0x33fff6a0,0x3effda82,0x203bffd7,0x14401aa8,0x87f70000,0xf53effda,
    0x01885bff,0x70cfffb8,0x2a03bffd,0x2a4ffffd,0xa802aaaa,0x001cfffc,
    0x06000660,0x09a98800,0x88222800,0x131001aa,0x0c426200,0x00000330,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x5bdddb50,0x0f7bbb6a,0x2e5bdd93,0x105eeeee,0x36e9dddb,0xc81ceeee,
    0x2984eeed,0xca880000,0xd930388b,0x3265bddd,0x6e402eee,0x775c3dee,
    0x52eeeeee,0x79bddddb,0xdddb5015,0xdeed8003,0xbddddb34,0xddd95009,
    0x776dc59d,0x776d40ce,0x01bcdeee,0xceeeeca8,0x3bbbb262,0x21ffa23d,
    0x3200ffe8,0x17ff440f,0x7f41fe40,0x41ee802f,0x32604feb,0x7dc01dff,
    0x405ffcac,0xfd104ffa,0x01dd003f,0xffffffff,0xabffc83f,0xf901efdb,
    0x7fd400bf,0x05ffb80e,0x703ffb80,0xffb803df,0x0cffda9b,0x203ffb80,
    0xff704ffa,0x403ff701,0x05ff504c,0x1ff20d90,0x7e442e40,0xfffff904,
    0x903b205f,0x2ff880bf,0x003bfe20,0x357d509b,0xf30d9333,0x82ffc81f,
    0xd000fff9,0x3fe60bff,0x1ff98002,0xf3001bd0,0x05ff883f,0x2201ff98,
    0x5ff102ff,0x7407ff10,0x2017fa01,0x00ff701e,0x427d412e,0x3ffaa2e9,
    0x7d417cc0,0x00ffc405,0x7901bffe,0x427401b0,0x5ff80ff8,0x804fee98,
    0xf104fee9,0xff10003f,0x4400bb01,0x0ffd81ff,0x200ffc40,0x17f602ff,
    0x06982fec,0xd3007fdc,0xb803fdc0,0x3909f504,0xfd85ff30,0xf805f980,
    0x7fd7c01f,0x8020f204,0x0ff881f8,0xae987fd8,0x6dec00ff,0x03ff104f,
    0xd81ff100,0x0ffc4005,0x22017fd4,0x17fc01ff,0xf901ff50,0x8807901f,
    0x80f203ff,0x097007fb,0xe80a13ea,0xf983fc3f,0x401ff805,0x3207ff97,
    0x8835c003,0x87fd80ff,0x4409fd69,0xf104fd8f,0xff10003f,0x44002ec1,
    0x0ffc81ff,0x200ffc40,0x3fe202ff,0xe83fff82,0x107fc800,0x03fdc01f,
    0x09f504b8,0x3e21fc80,0xf00bf307,0x3f67803f,0x4003c81f,0x81ff104e,
    0x76986ff8,0x6d3201ff,0x03ff104f,0x361ff100,0x3ff10005,0x8805ff88,
    0x17fc01ff,0x9b517f60,0x100698df,0x809705ff,0x097007fb,0xfb0013ea,
    0xbf301ff0,0x7803ff00,0x7903ffa2,0x880fc400,0x17fe40ff,0x107ff34c,
    0x4413f61f,0xf88001ff,0x20006e9f,0x3f621ff8,0x1ff8800d,0x2a017fc0,
    0x3e6b20ff,0xd800f20f,0x5c01e86f,0x2097007f,0x1fc004fa,0x2fcc1ffc,
    0x1e00ffc0,0x03c8dff1,0xff881ee0,0x02ffebac,0x5c37e4d3,0x7c413f64,
    0xff88001f,0x10002ffe,0x3dfd9bff,0x7fffc400,0xffffffff,0x3e3ff802,
    0x007c7ff0,0x34c3ff30,0xb803fdc0,0x4009f504,0x83ff906b,0x1ff805fb,
    0x2ffcc3c0,0x02740079,0x35555ff1,0xff134c01,0x13f61f85,0x4000ffc4,
    0x2ffe9ff8,0x9aff8800,0x7c4006fd,0x017fc01f,0x325aafe4,0xd000b36f,
    0x5401ec9f,0x2077007f,0x1d1004fa,0x2fbffe20,0xff805fbc,0xffb83c01,
    0x3e200793,0x003fe201,0x26fc8d30,0x8827ec5b,0xf88001ff,0x02ffe88f,
    0xf88ffc40,0x3fe2003f,0x4017fc01,0x262d8ff9,0x8003c9ff,0x00f88ffb,
    0x59007fa8,0x6c013ea0,0x7fff4c02,0xff805f99,0xff903c01,0x1ee00795,
    0x8001ff10,0xe97fc469,0xf8827ec1,0xff88001f,0x005ffd10,0xff50ffc4,
    0x07fe2003,0x3a005ff0,0xfcfe87bf,0x77ff0000,0x03fe6009,0x27d40760,
    0x330025c0,0x7fc02fcc,0x3fa03c00,0x09b003df,0x4000ff88,0x6adfd869,
    0xff104fd8,0xff883003,0x00bffa20,0x3f20ffc4,0x1ff8800e,0xc8017fc0,
    0x5ffb84ff,0x3bff2000,0x05ff1001,0x13ea01f0,0x98000b50,0x807f805f,
    0x1fffc407,0x2200fc40,0x34c000ff,0x6c177fcc,0x03ff104f,0x07fc4488,
    0x200bffa2,0x5fe81ff8,0x401ff880,0xff3002ff,0x005ff105,0x0037fc40,
    0x0bb017f2,0x0b5027d4,0x45f98004,0x80bf12d8,0x7fcc00f8,0x9807b803,
    0x3cc001ff,0x9fd06fe8,0xb00bfe20,0x881ff983,0x7cc03ffe,0x04ff981f,
    0xf100ffcc,0x03f4005f,0xd80001fd,0x4fd8002f,0x7d406d98,0x15c0b505,
    0x7d46f980,0x4c00f98f,0x03fa801f,0xffa804d8,0x407d4003,0x0dff03fa,
    0x98873fea,0x2ffa87ea,0x40bfff30,0xff703ffa,0x017fd407,0x5c007ff3,
    0x00016e04,0x644001e6,0x0cffdeff,0x7d437dc0,0x7ffeeeee,0x83ff9100,
    0x2202cefe,0x400cfffc,0x00fc403c,0x39ffff93,0xbeffc980,0xfd710740,
    0x3f265bff,0xffffffff,0x3ff264ff,0x3f661cff,0x931dffff,0xb039ffff,
    0x7e4c9fff,0x3221cfff,0x801cffff,0x00062008,0x220000c0,0xb8009aa9,
    0xff31cfff,0x9fffffff,0x2aaaaa00,0x00000cc1,0x00510020,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xeeed8000,0xeeeeeeee,
    0xddddd951,0x4cbddddd,0xeeeeeeec,0x36a2eeee,0xccdeeeee,0xda80001b,
    0xcceeeeee,0x3bbba00b,0xeeeeeeee,0xddddb33e,0x7764c1bd,0xdddb72de,
    0xddb9039d,0x3bbb267b,0x000003de,0x406e2300,0x2e601bb9,0x795102ab,
    0x4aaaaa03,0x262aaaa9,0x32ea02aa,0x3335df02,0x709ff533,0x533335ff,
    0x35ff50dd,0x07f53333,0x75359ff7,0x07005ffb,0x989bffb8,0xdf884feb,
    0xaaffcaaa,0x7fd45fca,0x20ff205f,0x5404ffe9,0x5ff980ef,0x00009500,
    0x37ed3ae2,0x3beabb62,0x7f545ec0,0x7ecd7640,0x11ffe983,0x6443bff7,
    0xcacd884f,0x360340ef,0x0ff980ef,0x3ff30d10,0x7fcc1d40,0x407ff701,
    0x0ffcc078,0x42c46fe8,0x985987fb,0x80fa06ff,0x7dc05ff9,0x400ffe00,
    0x64c0004a,0xd0fea0cf,0x1a65fb8b,0x11fcc1f1,0x21fe60ff,0xd04b83fd,
    0x0e26fb85,0xf301ffb8,0x7c42401f,0x7c41c01f,0x13fe601f,0x3fe203ec,
    0x4c3ff501,0x0907fb83,0x1320ffea,0xe807fee0,0x8017fc01,0xdb50004a,
    0x0bee0017,0x207e4df1,0xff07ee0c,0xf507f601,0x0f701d0b,0x98043ff3,
    0x3fe604ff,0x0ffc4000,0x00ffc400,0xfd887ff2,0xff881abf,0x2013fe01,
    0x640107fb,0x801ae0ff,0x009706fe,0x12a005ff,0x005bd700,0xf7001fd0,
    0x3062043d,0x13ea03fd,0x82cc1ff3,0xfeeeeefd,0x06fe802f,0x01407fcc,
    0x80a03ff1,0x7c401ff8,0x33ff2e3f,0x01ff882c,0xf7007ff1,0xbfd1000f,
    0xf98003a6,0x40074c4f,0x095002ff,0x0039f910,0xe8803fc0,0x6d401dff,
    0x1fe01fec,0x81649f9b,0x7e40005e,0x07fcc01f,0x03ff102c,0x01ff881a,
    0x07f85fe8,0xfc80ffc4,0x07fb800f,0x3d7ff300,0x43ff7000,0x05ff002e,
    0xdf5012a0,0xff880001,0x3fff2001,0x3f63e983,0x6ccbf201,0x6f81a7f8,
    0x0ffe6000,0x266bfe60,0x3fe206ca,0x07ca999a,0x36007fe2,0x4407f87f,
    0x3f2a62ff,0x0ff7001e,0x01ffe400,0x16edfd00,0x7dc2ff80,0xffffffff,
    0x3b6a5fff,0x3fe0000b,0x3fa60203,0xfb0fea3f,0x1dafcc03,0x740955fb,
    0x7440200f,0xdff3005f,0x440dfddd,0xfecccdff,0x007fe207,0x0ff07ff2,
    0xfeeeff88,0x2e001fff,0x7fc0007f,0x3fe60006,0x3fe000fc,0x40095002,
    0x8000cfc9,0x41c705fe,0xb03fa6fc,0x59fe803f,0xd80377ea,0x3603705f,
    0xff3000ff,0x3e206881,0x2206881f,0xffc801ff,0x3e203fc0,0x6ffdcc1f,
    0x007fb800,0x00fffaa0,0x003ffc80,0x4a8017fc,0x1dfb8800,0x87ff5060,
    0x9f10b63a,0x3fd10ffc,0x7c2ffb80,0x27fd405f,0x17fd4166,0x901ff300,
    0x480ffc40,0x2007fe20,0x407f87fd,0xff301ff8,0x00ff7009,0x3ff23a20,
    0x3ff10001,0x002ff800,0xea800095,0x3a2fe42e,0x6c6fceff,0xfc87e20e,
    0xccfeecae,0xf90df100,0xbfffb005,0xbff103fd,0x80ff9800,0x407fe200,
    0x007fe200,0x01fe1bfe,0x7ec03ff1,0x03fdc00f,0xdfd12e80,0x07fe2000,
    0x2005ff00,0xb300004a,0x3217f27f,0x7ec0cfff,0x6cc3dbcf,0x01df74ff,
    0x007882d8,0x40bffff2,0x20c00efd,0x44000ff9,0x440801ff,0x7fdc01ff,
    0x7c407f81,0x0bfee01f,0xb000ff70,0x003ffa89,0x4001ff88,0x095002ff,
    0x06288000,0x4c420188,0x80040401,0x26000601,0x007fee01,0x00ff9871,
    0x200ffc40,0x00ffc448,0x3fa0bff1,0x03ff1011,0x2e007fec,0x82dc007f,
    0x44001ffc,0x7fc001ff,0x00095002,0x00000000,0x00000000,0x9ff30000,
    0xff985900,0x0ffc4001,0x3ff30760,0x403bf620,0xf983acfd,0x0bff301f,
    0x5400ff70,0x0dff100f,0x001ff980,0x08801ffc,0x7ffffdc0,0x5fffffff,
    0x80098022,0xcccc8620,0x999911cc,0x99999999,0x74000007,0x0fe5406f,
    0x3000bfea,0x1f6207ff,0xf730bfea,0x5ff9807f,0xd505ff50,0xff9001bf,
    0x809f7001,0x2a005ffc,0x3e6003ff,0x2200004f,0x88888888,0xfd108888,
    0xbefeea85,0x4bfe2880,0x12ffffff,0x77777777,0x00057777,0x3fffee00,
    0xffffffff,0x3ffff267,0x7f5cc01c,0xffffffff,0x3fff264f,0x0bcdeeff,
    0x3f260200,0xefffffff,0xffda803d,0xfeb80bef,0xffc884ff,0x32604fff,
    0x201cffff,0x2cffffc8,0x0000cc00,0x21b13e20,0x98adfda8,0x4cc7fe0d,
    0x00009999,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x2fc40000,0x0bfea5f7,0x4cf30000,0x3bfd7102,0x00000188,0x55000000,
    0x55443555,0xa855550a,0x000041aa,0x20159510,0xaaaaaaa9,0x07524c2a,
    0x005dcc93,0x02ee6173,0x55301773,0x0aaa6355,0x00000510,0x29fd3fd4,
    0x3bae6ffb,0xeeeeeeee,0x001a84ee,0x00000000,0xd9800000,0x67cc0bff,
    0xea8ff930,0x0067d45f,0xff73bb00,0x9999db07,0x3faa7ff9,0xd53ffe8f,
    0xdfff91ff,0xf71ffb50,0x3ff23fff,0x7fdc40ef,0x805ff10e,0x079001fc,
    0x27f98fec,0x89a263fd,0x88888888,0x00008888,0x00000000,0xf8000000,
    0xf886882f,0xc885fa87,0x364001df,0x20361fec,0x3fe625fd,0xf311db9c,
    0x0ffa259f,0x2259ff11,0xfb11cdfc,0x4c3ff209,0x3ee1301f,0x3fa20130,
    0x2fc5ff00,0x003a85f7,0x00000000,0x00000000,0x84fb8000,0xf50ff02c,
    0x02eea80b,0xff983fa8,0x03fee0e0,0x3ff00bfe,0x3ff04fb8,0x7d40ff98,
    0x0f57f605,0x979aff88,0x12eb60bf,0x549d0ff4,0x0003221f,0x00000000,
    0x00000000,0x03fe2000,0x7d43fc0d,0x17fb3005,0x7f407f20,0x407fe603,
    0x07fc00ff,0x07fc17e6,0x037cc3fc,0xb807bff1,0x1dfcdbfe,0x3607a5a8,
    0x2788b60f,0x0000003a,0x00000000,0x00000000,0x40951fec,0x005fa87f,
    0x3a0e7e44,0x409fb01f,0x03fe03fe,0x5f981ff0,0x0ff01fd0,0xffa80df3,
    0x19fd1000,0x70d30740,0x00341b8f,0x00000000,0x00000000,0x3e600000,
    0x87f80366,0x910005fa,0x40bfe29f,0x0bfb04fc,0x7fc00ff8,0xfe82fcc0,
    0x6f987f80,0x2027fc40,0xbeddbfda,0x21ec2640,0x0000005a,0x00000000,
    0x00000000,0x15fd0000,0xfa87f80b,0xbed98005,0x7e413fa0,0x400ffa83,
    0x07fc00ff,0x07f417e6,0x037cc3fc,0x440bfeb6,0xbfb69aff,0x20e8834c,
    0x00000048,0x00000000,0x00000000,0x9bf50000,0xfa87f805,0x0b7aa005,
    0x1fc837dc,0x2040ffcc,0x07fc00ff,0x07f417e6,0x037cc3fc,0x403fea77,
    0x86e1f71a,0x0012e02d,0x00000000,0x00000000,0x00000000,0xfe806ff8,
    0x2202fec1,0x7c401cfc,0xfe85e80f,0x00ff8703,0x1be607fc,0x43fc07f4,
    0xc8b306f9,0x81fc805f,0x000d8059,0x00000000,0x00000000,0x00000000,
    0xf9007f90,0x5ff7b53b,0x00bfd983,0x1d717f20,0x87705fc8,0x3fe201ff,
    0xff83fd40,0x2607fc41,0x441f987f,0x024c04ff,0x00000000,0x00000000,
    0x00000000,0xf1000000,0xdffd1001,0x74c5df51,0x3ee0002e,0x7d40dece,
    0xffeeeeef,0x09dffb53,0x2e7dffd5,0xfb31dffe,0x3ff6e7df,0x3bffd73d,
    0xff917fea,0x000001bf,0x00000000,0x00000000,0x00000000,0x000c0000,
    0x19818826,0x00660000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_28_usascii_x[95]={ 0,2,1,0,1,0,0,1,1,0,1,0,1,1,
1,0,0,2,0,1,0,1,1,0,1,1,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,-1,1,0,-1,0,0,0,0,0,0,0,
-2,0,0,0,0,0,-1,0,0,1,0,0,0,0,0,0,0,3,1,2,0, };
static signed short stb__times_28_usascii_y[95]={ 22,4,4,4,3,4,4,4,4,4,4,6,19,15,
19,4,4,4,4,4,4,5,4,5,4,4,10,10,7,11,7,4,4,4,5,4,5,5,5,4,5,5,5,5,
5,5,5,4,5,4,5,4,5,5,5,5,5,5,5,4,4,4,4,26,4,10,4,10,4,10,4,10,4,4,
4,4,4,10,10,10,10,10,10,10,6,10,10,10,10,10,10,4,4,4,13, };
static unsigned short stb__times_28_usascii_w[95]={ 0,4,8,13,11,21,19,3,7,8,10,14,5,7,
4,8,12,8,12,10,12,10,11,12,11,11,3,5,14,14,14,10,22,18,16,16,18,15,14,18,18,8,10,19,
15,22,19,18,14,18,18,12,15,18,18,24,18,18,15,6,8,7,12,14,5,12,13,11,13,11,11,13,13,7,
7,13,7,20,13,12,13,13,9,8,8,13,13,19,13,13,11,8,3,8,14, };
static unsigned short stb__times_28_usascii_h[95]={ 0,19,9,19,21,19,19,9,24,24,11,15,8,3,
4,19,19,18,18,19,18,18,19,18,19,19,13,17,13,6,13,19,24,18,17,19,17,17,17,19,17,17,18,17,
17,17,18,19,17,23,17,19,17,18,18,18,17,17,17,24,19,24,10,2,6,13,19,13,19,13,18,18,18,18,
24,18,18,12,12,13,18,18,12,13,17,13,13,13,12,18,12,24,24,24,5, };
static unsigned short stb__times_28_usascii_s[95]={ 117,136,156,164,105,178,200,152,32,1,128,
156,165,212,207,233,220,241,72,97,162,189,18,130,71,152,186,250,171,171,29,
141,56,208,76,1,48,32,17,30,236,147,99,197,181,158,110,117,143,86,217,
58,93,45,26,1,109,128,1,79,49,48,139,220,186,211,242,190,83,244,108,
134,120,200,40,175,64,93,79,44,227,85,69,202,67,15,1,224,114,148,57,
23,19,10,192, };
static unsigned short stb__times_28_usascii_t[95]={ 21,1,81,1,1,1,1,83,1,1,83,
65,81,79,79,1,1,26,46,26,26,26,26,46,26,1,65,26,65,79,83,
1,1,26,65,26,65,65,65,26,46,65,46,46,46,46,46,1,46,1,46,
26,65,46,46,46,65,65,65,1,26,1,83,79,79,65,1,65,26,65,26,
26,26,26,1,26,46,83,83,83,26,46,83,65,65,83,83,65,83,26,83,
1,1,1,79, };
static unsigned short stb__times_28_usascii_a[95]={ 101,135,165,202,202,337,315,73,
135,135,202,228,101,135,101,112,202,202,202,202,202,202,202,202,
202,202,112,112,228,228,228,180,373,292,270,270,292,247,225,292,
292,135,157,292,247,360,292,292,225,292,270,225,247,292,292,382,
292,292,247,135,112,135,190,202,135,180,202,180,202,180,135,202,
202,112,112,202,112,315,202,202,202,202,135,157,112,202,202,292,
202,202,180,194,81,194,219, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_28_usascii_BITMAP_HEIGHT or STB_FONT_times_28_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_28_usascii(stb_fontchar font[STB_FONT_times_28_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_28_usascii_BITMAP_HEIGHT][STB_FONT_times_28_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_28_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_28_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_28_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_28_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_28_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_28_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_28_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_28_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_28_usascii_s[i] + stb__times_28_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_28_usascii_t[i] + stb__times_28_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_28_usascii_x[i];
            font[i].y0 = stb__times_28_usascii_y[i];
            font[i].x1 = stb__times_28_usascii_x[i] + stb__times_28_usascii_w[i];
            font[i].y1 = stb__times_28_usascii_y[i] + stb__times_28_usascii_h[i];
            font[i].advance_int = (stb__times_28_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_28_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_28_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_28_usascii_s[i] + stb__times_28_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_28_usascii_t[i] + stb__times_28_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_28_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_28_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_28_usascii_x[i] + stb__times_28_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_28_usascii_y[i] + stb__times_28_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_28_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_28_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_28_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_28_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_28_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_28_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_28_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_28_usascii_LINE_SPACING
#endif

