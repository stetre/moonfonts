// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_8_latin_ext_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_8_latin_ext'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_8_latin_ext_BITMAP_WIDTH         256
#define STB_FONT_arial_8_latin_ext_BITMAP_HEIGHT         62
#define STB_FONT_arial_8_latin_ext_BITMAP_HEIGHT_POW2    64

#define STB_FONT_arial_8_latin_ext_FIRST_CHAR            32
#define STB_FONT_arial_8_latin_ext_NUM_CHARS            560

#define STB_FONT_arial_8_latin_ext_LINE_SPACING           5

static unsigned int stb__arial_8_latin_ext_pixels[]={
    0x03103331,0x81c06201,0x33030180,0x13030130,0x40d44198,0x01818881,
    0x80881066,0x22011008,0x26620880,0x08806621,0x20010662,0x82081501,
    0x02040880,0x04104c02,0x02198082,0x6dd44418,0x1dc0540a,0x480441dc,
    0x266621a8,0x99988ae0,0x99988660,0x98988ee0,0x17110e20,0x83700a81,
    0x0ea0aa1a,0x1dde4154,0x0aabb82e,0x3b05b577,0x0a06c1c8,0x298ae20a,
    0x205c146a,0xcc98663b,0x2e28ae20,0x9895c911,0x508170a9,0x41c4ea11,
    0x2f225cbd,0x330eef22,0x5c550530,0x37154911,0x46e2a922,0x11b8aa48,
    0x1b96f669,0x2165e491,0x446a2cbc,0x0eef22bc,0x30d47779,0x81b95dc4,
    0x0eb8711b,0x21c472f2,0x872f20db,0x54531cbc,0x8e5e4151,0x1b124513,
    0x2370a890,0x88dc2a48,0x46e17174,0x70e27148,0x39a436e5,0x19910c35,
    0x94454598,0x222a911b,0x45522372,0x55223728,0x52237288,0x446e133a,
    0x45324534,0x539a46a4,0x90c350c3,0x39a43321,0x66dc99b7,0x43714c0d,
    0x8dc5c551,0x230dc61b,0xb85c2629,0x905cd461,0x7120ec5c,0x172446e1,
    0x1dba446e,0x138a446e,0x0b8b8c87,0xcc864e69,0xac875130,0x8dce22e2,
    0x2e711748,0x4e22e911,0x222e911b,0xda922373,0x0ca446e4,0x2170642e,
    0x864e691a,0x332190cc,0x3485c550,0x6c6e06e7,0x70190d40,0x0c8c55c1,
    0x822980c8,0x9910190b,0x90e2ea48,0x8e6530b8,0x5d22370b,0x8a446e3b,
    0xb1cb8713,0x22a9e64c,0x4475770b,0x4e62e59d,0x262e732a,0x45ce6553,
    0x5ce65539,0x4e655398,0x39954aa2,0x2c552c55,0x54f32635,0x171542e2,
    0x9932665c,0x5c7336e7,0x0d448b11,0x1ce88e27,0x4e1a9c35,0xa85c6a29,
    0x22c2c8e1,0x171230e9,0x21706e64,0x2e2e732a,0x9c4e6551,0x0ee6d428,
    0x665c5513,0xba8f2ee4,0x277950da,0x7950dcc8,0x54373227,0x1b9913bc,
    0x6644ef2a,0x2199b30d,0x3320dcc8,0x516e642d,0xcb8aa263,0x42665c4c,
    0x2154cc29,0x84829828,0x05121ccc,0x66643999,0x438d4151,0x98911ccc,
    0x654aaa63,0x1241c244,0x11c41b99,0x44e21b99,0x00154001,0x00048960,
    0x00000000,0x4c000000,0x80000aa0,0xa8154419,0x006a0540,0x000020a8,
    0x02884c51,0x0aa060cc,0x44330510,0x50033002,0x00000003,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x08004200,0x11010088,0x10200104,0x4c409981,0x050280c0,0x04401066,
    0x10810204,0x01301802,0x10111011,0x04406201,0x30330098,0x00202013,
    0x02040444,0x10198180,0x17110810,0x382aa621,0xb3026662,0x0b85c570,
    0x4c4330d4,0x2ff224c2,0x4c4b7b34,0x102ea09a,0x64c2b855,0x4925c4ba,
    0x5ca51cbc,0x94212841,0x26620dc0,0x540ea20a,0xb882b880,0x4982b882,
    0x6de54570,0x822e0aa1,0x0aa1dc0a,0x80ba884a,0x3626e2a3,0x8dd22370,
    0x88dc5348,0x82e15644,0x3619970b,0x289ca274,0x4ff4b7b3,0x8dc26752,
    0xc8b7b348,0xb88e22cb,0x32e39bb9,0x15186e92,0x223706e7,0xbc922374,
    0x92446e2c,0x2cbc8597,0x2f2165e4,0x5165e42c,0x1dcc5979,0x18952255,
    0x23b99c95,0x42ee23b9,0x5edd4e4a,0x5decf2e0,0xa446e0c9,0xb82e911b,
    0x2cec4911,0x1370b82e,0x85cd46a9,0x26750b9a,0x6d453d50,0x3aa446e4,
    0x2448a613,0xb8e36915,0x701948d9,0x23706e91,0x4d223748,0x2911b922,
    0x92299229,0x92299229,0x711a9229,0xa4350d5c,0x9c72a513,0xb86ae1ab,
    0x8e395388,0xca54cc38,0x88dc5db9,0x05d22374,0xaba92237,0x70b82e0d,
    0x4c88d521,0x89b51322,0xb954529c,0x926d4911,0x2e1905c1,0x45c51929,
    0xb9c354d8,0x11b83748,0x0ca446e9,0x9488dc2e,0x2e0c85c1,0x0c85c190,
    0x2170642e,0x2a20cdda,0x139c350d,0x44e366a5,0x21b510da,0x1c6cd524,
    0x949ab871,0x95493373,0x4ce65539,0x4b1ccaa3,0x70b82e48,0x2c926399,
    0x91545164,0x43336653,0x2a8a732a,0x54712c55,0x2e0bdbc9,0x8e664970,
    0x279b748b,0x4caa732a,0x2552c553,0x552c5539,0x552c552c,0x352c552c,
    0x50cba832,0x2b263953,0x2a791152,0x219750cb,0x91151cb9,0x2f661c47,
    0x4ae37752,0x9910dcc8,0xb991241b,0x54171401,0x12250171,0x0ccd9891,
    0xc8890a72,0x199b30dc,0x85316e64,0x983a889c,0x24480b82,0x3221b991,
    0x8b7320dc,0x3320dcc8,0x216e642d,0x6e642dcc,0x3516e642,0xa8000162,
    0x50000770,0x04388ee1,0x20000d40,0x26150001,0x3180c2a2,0x26001983,
    0x00006208,0xaa980a80,0x82881501,0x0000a209,0x00000000,0x00000000,
    0x00000000,0x00150000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x11040000,
    0x22100088,0x440c1108,0x20220500,0x10060082,0x04104408,0x08804066,
    0x06608204,0x21044013,0x202a0620,0x260cc089,0x44088081,0x20040180,
    0x44089809,0x08080440,0xa8102100,0x1982ae38,0x36eae1dc,0x5c14452b,
    0x20854c23,0x4226623a,0x531088a8,0x26290cc1,0x5554660b,0xb02ea228,
    0x1c2a8399,0x2ea75979,0x21a8aa1c,0x1a894e3c,0x12204cc4,0x22bc88aa,
    0x2e1dc1bc,0x80e01443,0x326088b8,0x19931dc0,0x1710de44,0x20dcc2a8,
    0x5c42f219,0x8946250b,0x470ea331,0x2918940b,0x32e27168,0x8dc6e370,
    0x4cd7731b,0x335dcd21,0x730ee2a3,0x98b0c4d7,0x47a299c1,0x350cc0ab,
    0x74cdb86c,0x16624350,0x6c734866,0x77118943,0x88b2f2a1,0xdd81bbcb,
    0x177951bb,0x5c542ee2,0xbca846a0,0x2a17710b,0x19710bbc,0x7388b82a,
    0x17289ca2,0x171cb3a2,0x2e2e5138,0x75131a9a,0x0e361c6c,0x7121986e,
    0x55150cc3,0x332e1b81,0x2330cc6c,0x1db82e0b,0x8921a866,0x5432ae3a,
    0x98359121,0xcc89c521,0x88b944e0,0x898e2353,0x1d4c59cb,0x9ccdc0d4,
    0x876e0c8a,0x5399b81a,0x2a751303,0x4a274920,0x1d4a6513,0x289c0b8e,
    0x5c971753,0x261663ab,0x8ccc3a85,0xb8330ea4,0x550ea3a8,0x2a386624,
    0x2388a962,0x91cc6a19,0x4e22e7b9,0x4644ccda,0x77730cc4,0x4a2734d2,
    0x066ed524,0xc8759577,0x9b51ccc8,0x0a955649,0x336a1449,0x6d4aab24,
    0x4ceaee4c,0x64c72e64,0x5c55932a,0x5c73cebb,0x771564c0,0x43bbb932,
    0x98488904,0x30913cb9,0x913b9443,0x3306eee0,0xa877321c,0x990661cd,
    0x44e39c1b,0x77524353,0x5130cc1b,0x4cb33265,0x239732ac,0x5ddc191a,
    0x16f263bc,0x472e606a,0x32f24c9a,0x39730352,0x0eeee06a,0x8e000000,
    0x8e402cdb,0x1209002b,0xd801999b,0x04330ccc,0x006666c1,0x11000198,
    0x4e000198,0x4b243538,0x2a886638,0x446a0000,0xccb92005,0x00399b53,
    0x07336a00,0x001ccda8,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x20000000,0x33020000,0x02030110,
    0x40401002,0x40020400,0x04011010,0x80802008,0x00810008,0x80002200,
    0x88080040,0x0c031000,0x04080044,0x41100104,0x710b2a08,0x457102a9,
    0x9423b83a,0x1c353710,0x433038ee,0x486a5bc8,0x0e20aa24,0x32a0eef2,
    0x32165e41,0x0e5e42cb,0x1443b855,0x30cc8866,0x2e154197,0x50a21dc3,
    0x970664c1,0xcc98dec4,0x2a0a0280,0x50a21dc2,0x5c4724c1,0x52a8661c,
    0x33221779,0x8f322792,0x7910dbca,0x5571b8dc,0x47911c55,0x47910cbb,
    0x890d413a,0xb3032e24,0x166061a8,0x24372453,0x23128c35,0x28c4a312,
    0x84e22e31,0x2217711b,0x217710bb,0x17710bb8,0x25b89c52,0x06aaa1aa,
    0x711660b3,0x442ee217,0x217710bb,0x22a0a8b8,0x26197108,0x4a690351,
    0x0a8a690a,0xd8223291,0x266eea38,0x42232331,0x1119489b,0x24352654,
    0x643a8992,0x06642e1a,0x2e0b86b2,0x0190b890,0x7289ca27,0x49289ca2,
    0x445c7264,0x22e71173,0x2e711738,0x29775388,0x5733288b,0x35903326,
    0x4cdc3590,0x26e73373,0x26733739,0x2ef2329a,0x46675131,0x94524cda,
    0x0a8a290a,0x22cc1256,0x4938752b,0x2124e170,0x398d46a2,0x43abb923,
    0x0b8aa48c,0x2c552464,0x21a96255,0x289ca273,0x7289ca27,0x49c46711,
    0x94929252,0x444524a4,0x25219c93,0x8c848c89,0x564aab24,0x3255592a,
    0x73b9c2aa,0x333abb9c,0x4af2606a,0x54579349,0x032e6910,0x38375709,
    0x32ee1973,0x36219730,0x437320cc,0x8eeee4ca,0x32e0dbba,0x06ddd44c,
    0xecc83b99,0xc98e5e44,0x2655932a,0x255932ac,0x19730cc8,0x65cc72e6,
    0x2e639731,0x2639731c,0x219730cb,0x37730bb9,0x7506ddd4,0x472e61b7,
    0x39731cb9,0x713872e6,0x5dc72e29,0x336a333b,0x6d40001c,0x004800cc,
    0x00000000,0x00712c00,0x88003896,0x00000000,0x00000000,0x12c00000,
    0x000712c7,0x00020400,0x00000033,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x40001100,0x44400080,
    0x02081040,0x04406022,0x80200818,0x09860c28,0x8ee0a010,0x41955040,
    0x50420440,0x08888837,0xc8801104,0x10032aa3,0x04020885,0x82ee0202,
    0x7731dc4c,0x1971284c,0x770ee154,0x2a6e2288,0x05cc2881,0x1c931c93,
    0x0b882aa6,0x2e22e5e4,0x4d414d40,0x4620a980,0x0a20aa09,0x0bb886ea,
    0x71371c15,0x0dbca8a2,0x202e1517,0x8a21bbdd,0x1191dc3b,0x3b8e26e1,
    0x2051dc18,0x892605c3,0xb88660cb,0x8543570b,0x2e275133,0x2219710c,
    0x219710cb,0x3222aaab,0xb9c2cc2c,0x92a0a9c0,0x2a177953,0x5de54b72,
    0x98177950,0x3198b305,0x22cc0cc3,0x1170bbca,0x38dd4667,0x10a86671,
    0x983822e9,0x70caa83a,0x70921983,0x506554e2,0xa8865543,0xa8170e4a,
    0x4c75131b,0x544e66e1,0x2e71350d,0x275133ab,0x75133a89,0x31d4ea26,
    0x2b214d23,0x30d4ccc1,0x38e54651,0x2e2e9035,0x40350350,0x21ac81ac,
    0x40cc3319,0x9206a1ac,0x1382e334,0x91cd8667,0x9190702e,0x4e26e399,
    0x32e61983,0x44dce270,0x389b8733,0x8d5c6a32,0x5c17098b,0xac8663ab,
    0x2a19752a,0x277773cc,0x75773abb,0x55dceaee,0xa4755373,0x9c246428,
    0x353b9c38,0x9336a71b,0x66d4b1ba,0x321336a4,0x2648c848,0x640cc331,
    0x99336a48,0x20e331cb,0x10a86638,0xc99202e9,0x0e71385b,0x53055066,
    0x48b99c4e,0x23348e27,0x770e05c3,0x9730cc77,0x40350d43,0x773bbb8b,
    0x5ceeee77,0x86eae3bb,0x2eea2bc9,0x716c4e0d,0x644552e2,0xb9950353,
    0x80d40d43,0x2ea0dbba,0x866330db,0x86ddd419,0x0e33001a,0x36a1982a,
    0x259b70cc,0x3ccb9219,0x0cc1ce27,0x89c2a02a,0x47138a63,0x9b70e334,
    0x00cc00e5,0x09802214,0x00000000,0x04411c4b,0x4ee15081,0xa801ccda,
    0x99b51ccd,0x12c712c3,0x330cc667,0x66d4e258,0x0000001c,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x80330000,0x88020888,
    0x2ee23b80,0x44a19810,0x41020081,0x82200100,0x02110228,0x04104022,
    0x08000627,0x88200810,0x219751ac,0x30440888,0x08100823,0x88af2202,
    0x84081100,0x88200088,0x1e445500,0x0bdba8ee,0xdbca817b,0x4cdc6250,
    0x385dc473,0xa81b8851,0xbca44640,0x2026a5aa,0x5c3a842b,0x952a8172,
    0x54b25a9c,0xa54550b9,0x30931cc9,0x26880b8b,0x4e26e534,0x9750bdba,
    0x5cc1c707,0x9a41c31b,0x54597953,0x9c490dbc,0x54664bcb,0x06de5521,
    0x2088c866,0x2ee1c419,0x3a442a0c,0x5caab251,0x22e73371,0x2a2a4e28,
    0x432e20cb,0x32a498ab,0x419750db,0x05dc5072,0xa9c72a33,0x92e2590c,
    0x4469512a,0x43590993,0x4524b80b,0x03892172,0x0b8b8e09,0x95714e21,
    0x11a9c521,0x552a8547,0x26485c2e,0x10aa4351,0x20921989,0xb876e219,
    0xa4736299,0x472e6513,0x2655591d,0x276322bc,0x376a1c44,0x54999b52,
    0x711c4530,0x4c1c8e0e,0x2a71b351,0x8b22aaaa,0x54322419,0x02e48c81,
    0x965cc935,0x20e21ccb,0x971c6629,0x8b8e4883,0x2a777338,0x336a0cdd,
    0x336e4a44,0x666d4664,0x8662c154,0x10660cb9,0x85471387,0x44559348,
    0x41cb9921,0x8b26e618,0x52cca848,0x199b5243,0x20e91122,0x2a330323,
    0x79153c88,0x81112251,0x20d41914,0x8170dbba,0xb9442ecc,0x44483880,
    0x261d5c70,0x267138e1,0x832352a8,0x5c55700a,0x0d466350,0x262442a9,
    0x1c419801,0x99b51c4e,0x00e15001,0xb075a0a8,0x2a198379,0xcd80a921,
    0x8e0e311b,0x2a332cdb,0x2ee2a770,0x41983328,0x06a59b94,0x2cdb9c4b,
    0x22030824,0x738e0483,0x89c70cc3,0x88d45513,0x234402a5,0x2330ccdb,
    0x666d521a,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x08881110,0x42082102,0x88840840,
    0x4432e208,0x887730bb,0x91189400,0x1105dc47,0x89544a11,0x8f2e29bb,
    0x2ef2e23b,0x397105c1,0x04201059,0x0832ea08,0x20408226,0x50caa800,
    0x272ea151,0x0622330b,0x89c549c1,0xa8cc2e51,0x4c79951b,0x2a799501,
    0x77950bbc,0x2290b9cc,0x8dc6e716,0x2ee6190b,0x45cea266,0x19835738,
    0x289cb72a,0x266e1119,0x71b89c03,0x2a661911,0xcb898664,0x5c32ea59,
    0x221b9e88,0x2c9964c2,0x263882ea,0x8dd49714,0xb88761bb,0x2271371a,
    0x22aa6e3d,0x92617703,0x22e49d8c,0x719872e3,0x2eea0881,0x06a90712,
    0x715e406a,0x6c353571,0x20326e38,0x24eaee1b,0x6d436a29,0x4e53152d,
    0xaac84928,0x92389c02,0x19926ae3,0x10eb2aee,0x2355d247,0x20972dca,
    0x4244534b,0x95e49533,0xc893519b,0x47b1c4e5,0x32071333,0x2e61711a,
    0xb92e22c9,0x2a1c663a,0x198662bb,0x5499b528,0x263442cd,0x2cc4b8ba,
    0x70ea176e,0x472e6777,0xb8660cba,0x255932cc,0x39730cb9,0x262ad980,
    0x8af660cb,0x2f2eee19,0x99931223,0x26144199,0x5d43952c,0x50c379b0,
    0x0c426213,0x729b88a5,0x385c5ce2,0x4c667133,0x3ad0a629,0x46e70ec0,
    0x00000719,0x6406a06a,0x84c9dc49,0x9124cdc4,0xcca80000,0x22000002,
    0x01000088,0xbcd80066,0x00004001,0x00000000,0x00000000,0x00000000,
    0x2399b500,0x4571b81a,0xb890571c,0x33336570,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x23300204,0x00310408,0x33040822,0x03bbb866,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xb9519a92,0xa85e4229,
    0xaaa8751c,0x70c426a2,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x22280000,0x4c35000a,0x00000003,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_8_latin_ext_x[560]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,
-1,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0, };
static signed short stb__arial_8_latin_ext_y[560]={ 6,0,0,0,0,0,0,0,0,0,0,1,5,3,
5,0,0,0,0,0,0,0,0,0,0,0,2,2,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,2,0,2,0,2,0,2,0,0,
0,0,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,0,0,0,2,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,2,0,0,1,0,
0,0,0,0,0,2,2,3,0,0,0,1,0,0,0,2,0,3,5,0,0,2,0,0,0,2,-1,-1,-1,-1,
-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,1,0,-1,-1,-1,-1,-1,0,0,0,0,
0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,
-1,1,-1,0,0,2,-1,0,-1,0,-1,1,-1,0,-1,0,0,0,-1,1,-1,0,-1,1,0,2,-1,0,-1,0,
-1,0,-1,1,0,0,-1,-1,0,0,-1,0,0,1,-1,0,0,0,-1,2,0,0,-1,0,0,0,2,-1,-1,0,
0,0,0,0,0,0,0,-1,0,0,2,-1,0,0,0,2,-1,1,-1,0,-1,0,0,2,-1,0,0,2,-1,0,
-1,0,-1,0,0,2,-1,0,0,0,-1,0,0,0,-1,0,-1,1,-1,0,-1,0,-1,0,0,2,-1,0,-1,0,
-1,-1,0,-1,1,-1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,
1,1,1,1,1,1,1,1,1,1,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,0,-1,0,-1,
0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,-2,-1,-1,0,-1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1, };
static unsigned short stb__arial_8_latin_ext_w[560]={ 0,2,3,4,4,6,5,2,3,3,3,4,2,3,
2,2,4,3,4,4,4,4,4,4,4,4,2,2,4,4,4,4,8,6,5,5,5,5,5,6,5,2,4,5,
4,6,5,6,5,6,6,5,5,5,5,7,5,5,5,2,2,2,4,6,2,4,4,4,4,4,3,4,4,2,
3,4,2,6,4,4,4,4,3,4,2,4,4,6,4,4,4,3,2,3,4,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,2,4,4,4,5,
2,4,3,6,3,4,4,3,6,6,3,4,3,3,3,4,4,2,2,2,3,4,6,6,6,4,6,6,6,6,
6,6,7,5,5,5,5,5,2,2,4,2,6,5,6,6,6,6,6,4,6,5,5,5,5,5,5,5,4,4,
4,4,4,4,7,4,4,4,4,4,2,2,4,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
6,4,6,4,7,5,5,4,5,4,5,4,5,4,5,5,6,4,5,4,5,4,5,4,5,4,5,4,6,4,
6,4,6,4,6,4,5,4,6,4,4,4,4,4,4,4,3,2,2,2,5,3,4,3,5,4,4,4,2,4,
3,4,3,4,3,4,2,5,4,5,4,5,4,5,5,4,6,4,6,4,6,4,7,7,6,3,6,3,6,3,
5,4,5,4,5,4,5,4,5,2,5,3,5,2,5,4,5,4,5,4,5,4,5,4,5,5,7,6,5,4,
5,5,4,5,4,5,4,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,4,5,5,5,
5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,4,4,3,6,
4,5,4,5,4,5,4,5,4,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,6,4,7,7,6,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5, };
static unsigned short stb__arial_8_latin_ext_h[560]={ 0,6,3,7,7,7,7,3,8,8,3,5,3,2,
1,7,7,6,6,7,6,7,7,6,7,7,4,6,5,3,5,6,8,6,6,7,6,6,6,7,6,6,7,6,
6,6,6,7,6,7,6,7,6,7,6,6,6,6,6,8,7,8,4,2,2,5,7,5,7,5,6,6,6,6,
8,6,6,4,4,5,6,6,4,5,7,5,4,4,4,6,4,8,8,8,3,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,8,7,5,6,
8,8,2,7,4,4,3,2,7,1,3,5,4,4,2,6,8,1,3,4,4,4,7,7,7,6,7,7,7,7,
7,7,6,8,7,7,7,7,7,7,7,7,6,7,8,8,8,8,8,4,7,8,8,8,8,7,6,7,7,7,
7,7,7,7,5,6,7,7,7,7,6,6,6,6,7,6,7,7,7,7,7,3,5,7,7,7,7,8,8,8,
7,6,7,7,8,6,8,7,8,7,8,6,8,7,7,7,6,7,7,6,7,7,7,6,8,6,7,7,8,8,
8,8,8,7,8,8,7,7,6,6,7,6,6,5,7,6,8,8,7,4,7,8,8,8,8,8,4,7,7,8,
8,6,6,6,6,6,6,7,6,8,6,7,6,6,7,6,8,6,8,7,8,7,7,5,7,6,8,6,7,6,
8,7,8,7,8,6,8,7,9,8,7,7,6,7,8,7,8,6,8,7,8,7,8,7,8,6,7,6,7,8,
7,7,6,7,5,7,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,5,5,8,5,5,5,
5,5,5,5,5,5,5,5,5,5,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,7,7,6,8,
7,8,7,8,8,8,8,8,8,8,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,8,8,7,7,8,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5, };
static unsigned short stb__arial_8_latin_ext_s[560]={ 192,131,60,139,122,87,172,45,19,208,64,
134,57,68,93,112,146,134,138,151,159,191,242,180,196,181,201,185,139,237,144,
196,102,147,233,120,248,1,7,92,242,239,75,33,154,119,113,106,221,113,214,
63,174,69,227,19,13,27,39,37,45,253,174,72,83,45,53,75,28,80,143,
209,204,201,222,191,188,194,184,50,169,164,233,55,12,70,220,213,189,126,153,
166,108,98,52,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,192,94,170,
228,65,70,191,212,79,21,166,161,250,68,38,96,48,60,149,209,86,245,68,
90,247,158,170,204,47,40,235,196,201,208,92,33,85,110,159,117,60,73,117,
79,99,102,105,252,143,54,94,164,178,171,157,179,66,132,138,79,151,32,83,
222,250,16,11,6,1,247,113,181,230,225,220,215,128,140,176,110,186,191,176,
171,166,161,156,242,103,141,136,131,126,52,44,57,99,225,85,80,29,250,197,
58,181,48,175,6,160,27,21,15,27,7,1,235,244,239,233,47,142,39,211,
217,19,14,116,111,123,167,130,137,149,144,76,22,127,11,230,108,107,1,187,
194,84,230,72,123,217,232,1,242,225,31,28,127,40,150,172,216,212,105,44,
236,167,111,135,215,201,206,204,186,185,123,144,231,91,5,20,126,188,131,148,
155,192,221,82,221,85,226,73,240,62,199,1,49,242,1,16,253,23,15,13,
34,7,210,247,10,236,36,226,52,41,58,54,203,60,66,65,78,121,94,89,
97,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,100,85,85,155,
85,85,85,85,85,85,85,85,85,85,85,85,85,115,97,85,85,85,85,85,
85,85,85,85,85,85,85,85,132,91,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,155,49,
162,101,101,183,88,178,76,71,65,60,54,49,43,38,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,31,26,203,195,7,248,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85, };
static unsigned short stb__arial_8_latin_ext_t[560]={ 18,44,57,20,20,20,20,57,10,1,57,
51,57,57,57,20,28,44,44,28,44,28,28,44,28,28,51,44,51,51,51,
44,10,44,44,28,44,51,51,28,44,44,28,51,44,44,44,28,44,28,44,
28,44,28,44,51,51,51,51,10,28,1,51,57,57,51,28,51,36,51,44,
44,44,44,1,44,44,51,51,51,44,44,51,51,28,51,51,51,51,44,51,
1,1,10,57,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,18,44,1,
20,51,44,1,1,57,36,51,51,51,57,28,57,57,51,51,51,57,36,10,
57,51,51,51,51,36,36,28,36,28,28,36,36,36,36,36,10,36,36,36,
36,36,36,36,28,36,36,1,10,10,10,10,51,36,10,10,10,10,28,44,
20,20,36,36,36,36,28,51,36,28,28,28,28,36,36,36,44,28,36,28,
28,28,28,28,51,51,28,28,28,28,10,10,10,28,36,28,28,10,36,1,
28,1,28,1,44,1,28,28,28,44,28,28,36,20,20,20,44,1,44,20,
20,1,1,1,1,1,20,1,1,20,20,44,44,20,44,36,51,20,44,1,
1,20,51,20,10,1,1,11,1,51,20,20,10,10,36,36,36,36,44,44,
10,36,10,36,10,36,36,10,36,10,36,10,10,10,20,20,51,20,36,1,
36,10,36,1,10,10,10,10,36,10,10,1,10,10,20,44,10,10,20,10,
44,10,10,1,20,1,20,1,44,20,44,20,1,20,20,44,20,51,20,44,
44,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,20,51,51,1,
51,51,51,51,51,51,51,51,51,51,51,51,51,20,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,20,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,20,20,
20,44,1,20,1,20,1,1,1,1,1,1,1,1,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,1,1,20,20,1,10,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51, };
static unsigned short stb__arial_8_latin_ext_a[560]={ 32,32,41,64,64,102,76,22,
38,38,45,67,32,38,32,32,64,64,64,64,64,64,64,64,
64,64,32,32,67,67,67,64,116,76,76,83,83,76,70,89,
83,32,57,76,64,95,83,89,76,89,83,76,70,83,76,108,
76,76,70,32,32,32,54,64,38,64,64,57,64,64,32,64,
64,25,25,57,25,95,64,64,64,64,38,57,32,64,57,83,
57,57,57,38,30,38,67,86,86,86,86,86,86,86,86,86,
86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,
86,86,86,86,86,86,86,86,32,38,64,64,64,64,30,64,
38,84,42,64,67,38,84,63,46,63,38,38,38,66,62,32,
38,38,42,64,96,96,96,70,76,76,76,76,76,76,115,83,
76,76,76,76,32,32,32,32,83,83,89,89,89,89,89,67,
89,83,83,83,83,76,76,70,64,64,64,64,64,64,102,57,
64,64,64,64,32,32,32,32,64,64,64,64,64,64,64,63,
70,64,64,64,64,57,64,57,76,64,76,64,76,64,83,57,
83,57,83,57,83,57,83,70,83,64,76,64,76,64,76,64,
76,64,76,64,89,64,89,64,89,64,89,64,83,64,83,64,
32,32,32,32,32,32,32,25,32,32,84,51,57,25,76,57,
57,64,25,64,25,64,33,64,38,64,25,83,64,83,64,83,
64,69,83,64,89,64,89,64,89,64,115,108,83,38,83,38,
83,38,76,57,76,57,76,57,76,57,70,32,70,43,70,32,
83,64,83,64,83,64,83,64,83,64,83,64,108,83,76,57,
76,70,57,70,57,70,57,25,86,86,86,86,86,86,86,86,
86,86,86,86,86,86,86,86,86,86,64,86,86,86,86,86,
86,86,86,86,86,86,86,86,98,75,86,86,86,86,86,86,
86,86,86,86,86,86,86,98,77,86,86,86,86,86,86,86,
86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,
86,86,86,86,86,76,64,32,25,89,64,83,64,83,64,83,
64,83,64,83,64,86,86,86,86,86,86,86,86,86,86,86,
86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,
86,86,76,64,115,102,89,70,86,86,86,86,86,86,86,86,
86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,
86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,
86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,
86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,
86,86,86,86,86,86,86,86, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_8_latin_ext_BITMAP_HEIGHT or STB_FONT_arial_8_latin_ext_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_8_latin_ext(stb_fontchar font[STB_FONT_arial_8_latin_ext_NUM_CHARS],
                unsigned char data[STB_FONT_arial_8_latin_ext_BITMAP_HEIGHT][STB_FONT_arial_8_latin_ext_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_8_latin_ext_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_8_latin_ext_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_8_latin_ext_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_8_latin_ext_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_8_latin_ext_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_8_latin_ext_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_8_latin_ext_s[i]) * recip_width;
            font[i].t0 = (stb__arial_8_latin_ext_t[i]) * recip_height;
            font[i].s1 = (stb__arial_8_latin_ext_s[i] + stb__arial_8_latin_ext_w[i]) * recip_width;
            font[i].t1 = (stb__arial_8_latin_ext_t[i] + stb__arial_8_latin_ext_h[i]) * recip_height;
            font[i].x0 = stb__arial_8_latin_ext_x[i];
            font[i].y0 = stb__arial_8_latin_ext_y[i];
            font[i].x1 = stb__arial_8_latin_ext_x[i] + stb__arial_8_latin_ext_w[i];
            font[i].y1 = stb__arial_8_latin_ext_y[i] + stb__arial_8_latin_ext_h[i];
            font[i].advance_int = (stb__arial_8_latin_ext_a[i]+8)>>4;
            font[i].s0f = (stb__arial_8_latin_ext_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_8_latin_ext_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_8_latin_ext_s[i] + stb__arial_8_latin_ext_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_8_latin_ext_t[i] + stb__arial_8_latin_ext_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_8_latin_ext_x[i] - 0.5f;
            font[i].y0f = stb__arial_8_latin_ext_y[i] - 0.5f;
            font[i].x1f = stb__arial_8_latin_ext_x[i] + stb__arial_8_latin_ext_w[i] + 0.5f;
            font[i].y1f = stb__arial_8_latin_ext_y[i] + stb__arial_8_latin_ext_h[i] + 0.5f;
            font[i].advance = stb__arial_8_latin_ext_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_8_latin_ext
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_8_latin_ext_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_8_latin_ext_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_8_latin_ext_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_8_latin_ext_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_8_latin_ext_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_8_latin_ext_LINE_SPACING
#endif

