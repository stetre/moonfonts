// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_23_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_23_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_23_usascii_BITMAP_WIDTH         256
#define STB_FONT_consolas_23_usascii_BITMAP_HEIGHT         78
#define STB_FONT_consolas_23_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_23_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_23_usascii_NUM_CHARS             95

#define STB_FONT_consolas_23_usascii_LINE_SPACING          15

static unsigned int stb__consolas_23_usascii_pixels[]={
    0x00262153,0x99988062,0x00188009,0x01333330,0xa800001c,0xcedb800e,
    0x23e88003,0x8000005d,0x009d12ed,0x8006aea0,0x26188aa8,0x75c26201,
    0x4c1300ac,0x2744001a,0x7e400000,0x403dff51,0xfffb00fe,0x3ffdc0bf,
    0xff897ec0,0x7f702fff,0x0b7fb220,0xd1007dc0,0x01dfffff,0x3f90fe40,
    0x07bfa600,0x33fe8372,0xfe8800bf,0x7d403fff,0x3e5fffff,0x2e7f901f,
    0x7cc2ffff,0x05fffe9c,0x7ec17e20,0x3fb6a002,0xb711fcce,0x17ea01ff,
    0x82fdd554,0x4c02cffb,0x55df15ff,0x01df5015,0x9fb77df3,0x167f5cc0,
    0xfb30cfe8,0x2637c00d,0xbef8804f,0xd0fea0fe,0x0017e65f,0x3ff539fb,
    0x2673fee0,0x413f25fc,0x7fe440ff,0x2bbfbe62,0xf1004fea,0x00dff10b,
    0x37b3bfee,0x03fc81fc,0xbf1013f2,0xe8007fa0,0x880bf12f,0x0df881ff,
    0x3fa617dc,0x5c1fffff,0x01fe885f,0x0fd83fa8,0x2fa8fdc0,0x25fd0dd1,
    0x3fc005f9,0x3fe20ff2,0xff12fc40,0x7d40bf30,0xf117fe66,0x0bf1001f,
    0x3e200bf6,0x981fc81f,0x017f404f,0x01be0bf1,0xd80bf100,0x201dd03f,
    0x273fe25e,0x7f40a8de,0xd009f701,0x700fea0f,0x7e4be61f,0xbf32fd81,
    0x8ff00d4c,0x85fb82fc,0x217ec5f8,0x8ffc02fc,0x03fb06f9,0x017eaaa6,
    0x6417ea00,0x404f881f,0x17e207f9,0x3333037c,0x17e21333,0x5f505fa8,
    0x5fb87e40,0x207f813e,0x27cc05f9,0x2fa80df0,0x209f33f7,0xd3bf32fd,
    0x3fa0bfff,0xf901ff32,0xfa8bf107,0x7f403fc5,0x3f20bf31,0x7ffffd42,
    0x2666625f,0x903fb800,0x009f103f,0x17e203fb,0xffff037c,0x17e27fff,
    0x8db02fd8,0x91f99899,0x440fe29f,0x01be206f,0x17dc01fb,0x757fbfa0,
    0x7ccbf606,0x4feaaefe,0x1ffbffa8,0xbf103fb0,0x13ea1ff0,0x2fccdf10,
    0x3fee2fc8,0x365fc99c,0xb804ffff,0x103f903f,0x07f700bf,0x02fc17e2,
    0x7fb55555,0x7fc417e2,0xfd13f880,0x2a5f37ff,0x302faaff,0x03fc40bf,
    0x5f880bf1,0xfc965c40,0x7cc7f601,0x407fc45f,0x3200dffe,0xc85f881f,
    0x9303fb3f,0x2fcc7ffb,0x1ff11fd8,0x2aa65f88,0xb99904fc,0x939999df,
    0x201ba03f,0x0bf105f9,0xfb8007f3,0x3ea0bf13,0x3fa3f506,0x22f8afc9,
    0x301ffffc,0x037c40bf,0x1fb005f7,0x2027cc00,0x20df31fd,0x7ffe41fd,
    0x3fc872a4,0xef885fd8,0x7df706f8,0xff05f981,0x2fc41fdc,0xff884fa8,
    0xffffffff,0xbf701fcb,0x41fe2015,0x3faa65f8,0x89fdc000,0x20bf705f,
    0x3ee7f37c,0x7f543f89,0x06f983ff,0x06e817e6,0x74009f30,0x98fe400e,
    0x645f905f,0xf92ff9df,0x3f237cc5,0x7fbfb05f,0x7cc0bea0,0xf927e445,
    0x2a0bf105,0x03fb804f,0x7fcc03f9,0x2203fa06,0x01dff15f,0x3e27f700,
    0x3607f905,0x45f63f96,0xdfffb02f,0xb807fc41,0x007f504f,0x2fb803f4,
    0x23f90375,0x25f905f9,0x27fea7f8,0x677f41fd,0xf505fbfe,0x0bea01ff,
    0x7e5effcc,0x440fec6f,0x009f505f,0x07f207f7,0xd0156fd4,0x22bf103f,
    0x4000efba,0x20bf13fb,0x36db03fb,0x80fcdba7,0x6c6fd8de,0x203fd03f,
    0x3ea000fd,0x746fcc02,0x86543fff,0x23fb05f9,0x7ffdc5f9,0xaeffd887,
    0x13fe05f8,0xff301c98,0xf907dfff,0x2a0bf105,0x03fb804f,0x01ba03f9,
    0x2fc407fc,0x2e001fcc,0x260bf13f,0x9fabd05f,0x3e01f55f,0xffa83fe4,
    0xf9837e41,0x406f8004,0xfb1fb8fe,0xff05f980,0x7fec2fcc,0x0bf10404,
    0x80007fe2,0xfc8015f9,0xf505fd84,0x207f7009,0x05f881fc,0xbf107f98,
    0xf70017e0,0x7c417e27,0x4df6bd07,0x3e20d94f,0xfc81ff13,0x00efecdf,
    0xf90003f9,0x36cbee03,0x986dc3f7,0x224fc85f,0x27fdc1ff,0x320bf100,
    0x80ed405f,0xdf3005f9,0xa82ffe41,0x03fb804f,0x09f103f9,0x3e20bf70,
    0xb800df05,0x740bf13f,0x5f76d80f,0x0c7f3dfd,0x0df915f3,0x033fffae,
    0x880037c4,0x365f885f,0x7fc43ee7,0xb77bff35,0x99ff70df,0x007fffff,
    0xfc9857e2,0x837fc00e,0x3fa005f9,0x05fafecf,0x7f7009f5,0x3e207f20,
    0x102fd804,0x001be0bf,0x817e27f7,0xd36c82fc,0xd8bff3bf,0xfffefeef,
    0x200fec00,0x360002fb,0xf707ec0f,0x3fe8bf59,0x7dfffd71,0x67fff540,
    0x8801ffa8,0x1dfff55f,0x2609fb00,0x3f62005f,0x664bf2ef,0x04ccefdc,
    0x07f207f7,0xdf1013e2,0x6f82fc40,0xf89fdc00,0x321bea05,0xb808820f,
    0x03deffed,0x20c1bf50,0x7d40007e,0x3f20fea3,0x020080ef,0x10000200,
    0x00af2679,0x01e44030,0x7ffc0080,0x707fffff,0x207f207f,0x17f404f9,
    0x1be0bf10,0x3e25fb00,0x2627ec05,0x1f20002f,0x76fff400,0x0009f32f,
    0x00800fd0,0x00000000,0x00000000,0x00000000,0x207f2000,0x1bf203fb,
    0x3fa0bf10,0x443fe000,0x0ff4405f,0x6d8001ba,0xdfd91000,0x0002a619,
    0x00002a60,0x00222222,0x00000000,0x00000000,0x00000000,0x7f5443f9,
    0x801df301,0x3bf905f8,0x97f661a8,0xef9805f8,0x33037ea0,0x00003b80,
    0x00000000,0x7ffffc00,0x0000004f,0x00000000,0x00000000,0x547f2000,
    0x3fa04fff,0xbffffb01,0xb9fffa20,0x20efffff,0x02fffff8,0xeffb87f5,
    0x00003fee,0x00000000,0xeee80000,0x00003eee,0x00000000,0x00000000,
    0x3f200000,0x98037931,0x33332e01,0x7125d403,0x99105999,0x81403999,
    0x000bcca8,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x0007f200,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x01950000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x51000000,0x36133335,0x3bbb2005,0x004e883e,0x36e004b8,0x332e03ce,
    0x700ccccc,0x510059d9,0xb9103997,0x54c017bd,0x9dd97100,0xbddb7105,
    0x66665c19,0x201973cc,0xd97101ca,0xeeca85bd,0xccca81ce,0x10cccccc,
    0x8f2a0199,0x0e5c02cb,0x4073b6e6,0x3ff620a9,0xff5fffff,0x7f776400,
    0x4005f984,0xfe8806f8,0xd80effff,0x0fffffff,0x7ff7fec4,0x3ffff204,
    0x77ffd42f,0xff881fff,0xfffff986,0x3ffea0ff,0x3f61ffef,0xfb6fffff,
    0x2a0ff203,0x1fffffff,0x3fffbbf6,0x7ffffe43,0x3f21ffff,0x2a1ff884,
    0x8ff300ff,0x3ffffffb,0x9f937fc4,0x7c6ffea1,0x09f50007,0xf8800bf3,
    0x10cfe806,0x01fb0dfb,0xfe893f60,0x01aefd83,0x0bf90bfe,0xffa8fff5,
    0x7c42e60b,0x2004c0bf,0x203fb6f8,0x5ffdc3fc,0x20986e20,0x2620ffb8,
    0x6fc99999,0x3f20ffc4,0xfb04fd84,0xf50ef445,0x8bffd41f,0x3e2fc86f,
    0x09f50007,0x26600bf3,0x09999ef9,0x3fa217ee,0x4c007ec1,0x5c6f886f,
    0x85f9805f,0x85fb07f8,0x5fa802fe,0x6dbe2000,0x447f901f,0x7c0001ff,
    0x1ff8801f,0x3be66fa8,0x540ff980,0x5fb0086f,0x0bf32fd8,0x983fc7f7,
    0x309f5009,0x260aa2bf,0xffffffff,0x5c07fa6f,0x4007ec4f,0x1ff882fc,
    0x3e2003fa,0x2005fa86,0xbf7006fa,0xdb7c4000,0x647f901f,0xfe80004f,
    0x203fd800,0x405fd3fd,0x00ff45fc,0xf8807f90,0xff17ec0f,0x2a01bfb0,
    0xfadf984f,0x2aa24fff,0x2aaaaefb,0x45f981fe,0x0fd800fd,0xf997ffd4,
    0x437f6004,0x32002fe9,0x7ff3003f,0x6dbe2000,0x747f901f,0x7cc0000f,
    0x406fa805,0x405fcff8,0x0bf51ff8,0xc802fd80,0x46fc99df,0x202fe47f,
    0xfef984fa,0x881fea9d,0x81be206f,0x777ec6f8,0x647e81ce,0x9f73fcff,
    0x105dffd9,0x05ffbffb,0x2001fd80,0x4002effb,0x203fb6f8,0x311fe3fc,
    0xaa881333,0x7c400dfc,0xfffb801f,0xfd5fb800,0x07fc4001,0x7ffffec0,
    0xbf93fc0d,0xf309f500,0x883fa89f,0x817e606f,0x7f7647f8,0x8bfc4fff,
    0x74fa8dfe,0xffb9bfff,0x13fffa07,0x0007fa00,0x007fffd5,0x80fedbe2,
    0xc8df33fc,0x7d42ffff,0x6c00cfff,0x9ff1003f,0x27e7f400,0x200ff600,
    0x201333f9,0x200bf97f,0x86f984fa,0x06f885f8,0x6f8817e6,0xf1ffd440,
    0x7d47ff5f,0xff309f94,0x7deff441,0x419500ef,0xb30001fe,0xf8801dff,
    0x3f203fb6,0xaa98df13,0x54cc42fd,0xdf501ffc,0x0fffe400,0x00fffa80,
    0x0c417f20,0xff001bf7,0x7d400bf9,0xf885f984,0x2206f886,0x017e606f,
    0xfffd2fe4,0x7f73fb83,0x2ff8bf60,0x3e617f62,0x000bf66f,0x880bfd10,
    0x3203fb6f,0xfc81fe3f,0x885fb802,0xff3001ff,0x7f400df7,0x41bf2003,
    0xfff14fe8,0x7c19ddff,0x2a006fbf,0x885f984f,0x406f886f,0x09f700ff,
    0xdfd9be60,0x9f52fc80,0x27d4ff20,0x3e207fc4,0x009f90ff,0x401ff100,
    0x203fb6f9,0x407fa2fd,0x0ff002fc,0x7f4007fb,0x36007fd2,0x1df9002f,
    0xfd9ffea0,0x0fffeeee,0x4017f2ff,0x85f984fa,0x07f886f8,0x1fe817ec,
    0x7dc9f500,0x37ccff04,0x07f91fd8,0x3fee07fa,0x0001ff30,0x7dc01ff0,
    0x3fe05f95,0x7e417ee0,0x546f8802,0x9bee006f,0xfd800ff9,0x00efc802,
    0x1fdd3fa2,0x27fa7ec4,0x4fa805fd,0x6f885f98,0x7cc03ff0,0x802fe41f,
    0x0ffc1ff8,0x83fd13f2,0x21bee6f9,0x8ff307f9,0x10880efd,0x88537dc0,
    0x70df53fe,0x909ff0df,0x47fb005f,0xf1001ff8,0x805fc83f,0x2fe402fd,
    0x80ff4100,0x744ff4fb,0x427d404f,0x06f885f9,0x8999bff7,0xefecdffc,
    0xfdcccd80,0xbcffa83f,0x7fd40dfe,0x221ffcac,0xffcbcefe,0xe887fb03,
    0x0fedceff,0xfd999bdb,0x7eef7c3f,0x6677ec6f,0xff981fff,0x12ffccdf,
    0xbff99999,0xeeeeffc8,0x13f61eee,0xfb00bfe2,0x777fd405,0x201eeeee,
    0x7fcc0dfd,0x4ff88ff1,0x677ee664,0xf10bf34c,0x7fffdc0d,0xcfffeb86,
    0xbfffff00,0x77ff4c03,0x3fffa604,0xfffc880d,0x7ff442ef,0x3fffb204,
    0xffff90cd,0xffc819ff,0xfff904ff,0x764401bf,0xf10cffff,0xb05bffff,
    0xffffffff,0x403fee5f,0x3f600ffb,0x3fffea02,0x202fffff,0xffeffff9,
    0x3e61fe2f,0x3ffffe3f,0x0bf37fff,0x03100df1,0x04cc0020,0x06000400,
    0x36201880,0x1002001c,0x00220033,0x4c400044,0x00026600,0x00000000,
    0xca800000,0x00002ccc,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x65401cb8,
    0xca803931,0x2a0bb500,0x5c39504c,0x21cc883c,0xccccccca,0x107910cc,
    0x66664199,0x22cccccc,0xcccccccc,0x32a01972,0x2f333321,0xccccca80,
    0x999972cc,0x332e5999,0x59002bcc,0x66644254,0xc8801bcc,0xcc98003c,
    0xccccc882,0x002c981b,0x04fc85dc,0x03fa8ff4,0x7ff543ec,0x707ff906,
    0x207fec5f,0x3ff63ffb,0x1fffffff,0x87fb0bf3,0xffffffff,0x3fffe4ff,
    0x3fb5ffff,0x7fc4bf20,0x6c3fffff,0x4fffffff,0xfffffffb,0x3fffff69,
    0x8fe201ef,0xffff987c,0x7d406fff,0x3e2000ff,0xfff983ff,0x7d45ffff,
    0x57fea004,0x9be607f9,0x13ec03fa,0x20dfbffd,0x2fb86ffc,0xfdd0bffa,
    0x4ccccc47,0xbf30ff99,0xfd805fc8,0xb05fb002,0x44bf203f,0x87fee66f,
    0x0fec02fd,0x64c47f60,0x45f302ff,0x225f986d,0x3f604fe9,0x3f2003fd,
    0x25f983fd,0x3ea5feb8,0x9ffe6004,0x47f701fe,0x13f404f9,0x20df31bf,
    0x7dc2fdfc,0xf997b7a2,0x9f5003fc,0x0df52fcc,0x6c00bf60,0x901fd82f,
    0x361be25f,0xb00bf64f,0x81fd803f,0x43f506fa,0xa85f986e,0xf3df105f,
    0x2f7e600b,0x985f983f,0x009f50ff,0x13f27fc8,0x09f307f4,0xdf3046e8,
    0x71bebf20,0x87e6fc5f,0xd004f9fc,0xf8afcc1f,0x05fb000e,0x3f60bf60,
    0x3e25f901,0x3f64fb86,0x200fec02,0x45fd01fd,0xffffffff,0x0bf30fff,
    0x4fea0bf3,0x8fe800ff,0x05f983fb,0x013ea5fd,0x3fccdf50,0x93e237c4,
    0x981be0ea,0xfb3f906f,0x3bf17dc5,0x13e33e7f,0xbf313ea0,0x6c003fd1,
    0x05fb002f,0x4bf203fb,0x23fd86f8,0x0fec02fd,0x7dc07f60,0x2abf6aa3,
    0xf30aadfb,0x3607f90b,0xc805fb1f,0xf307f72f,0x7d47fa0b,0x0bfa2004,
    0x43fb83fd,0xf8bf65f8,0x641be605,0x3ee6f99f,0x7d7757e2,0xfe804f89,
    0x17eefcc0,0x400bf600,0xabfd82fd,0x12fdaaaa,0xdf9333ff,0x9999bfd8,
    0x2aab3f61,0x203fb0aa,0x227c85fa,0xaaef983f,0xdf103fdb,0xbf302fd4,
    0x2fcc1fdc,0x4fa87fd4,0x83ffe980,0x407f44fc,0x7cbff15f,0x641be605,
    0x3ee3fb1f,0x3bee9f12,0xfa80bf16,0x06fff984,0xb002fd80,0xffffb05f,
    0x225fffff,0x0cffffff,0x7fffffec,0xfffffb1f,0x407f65ff,0x266d86f9,
    0xffff982f,0x9f502eff,0xfe807fc4,0x3e60fee0,0xa8ffae65,0x0bd9804f,
    0x37c4df30,0x1fbf56f8,0x37cc09f1,0x2bf51fc8,0x229f12fb,0x80bf13ff,
    0xddf981fe,0x17ec004f,0xfd82fd80,0xfd99999a,0xff95ff12,0x5559fb03,
    0x26bf6155,0x3fb09999,0x97a17ea0,0x9ef981fa,0xd84ffba9,0x5c17ec1f,
    0x4c1fdc3f,0x3fffffff,0x000027d4,0x40fee3fd,0x17f5db6e,0x837cc09f,
    0x2e7fa1fc,0x7ec9f12f,0x5fa817e0,0x5fd1bf30,0x8017ec00,0x01fd82fd,
    0x89be25f9,0x017ec0ff,0x3fb007f6,0x66553ee0,0xcdfdccef,0x3e217e62,
    0x2a1fe20f,0x5c2fc45f,0xdeff983f,0x04fa80ac,0x7e403ed8,0x3fa01fb3,
    0x7f1df3f8,0xfc837cc0,0x4bef3ea1,0xdf0224f9,0xf980ff40,0x2003ff35,
    0x5fb002fd,0x3f203fb0,0x4fc8df12,0x3f6017ec,0xd80fec01,0xddfdd52f,
    0x4c7ddffd,0x545fb05f,0xffffffff,0x3fffee0f,0x27ffffff,0x9f5005f9,
    0x9807fd00,0x3606f8ef,0xf5f90faf,0xc837cc05,0x97e7f41f,0x837c04f9,
    0x97e605fa,0xfd800efa,0xb05fb002,0x44bf203f,0xb07fc46f,0x01fd805f,
    0x7fd40fec,0x0f91fc40,0x3fe217e6,0x3bbbbf61,0x3aa2ffee,0xefeeeeee,
    0x4017e66e,0x3fd804fa,0x03fcfe80,0xdfa9b7f2,0x41be602f,0x7ffdc1fc,
    0x7f807f52,0x7cc03fd0,0x6c02fe45,0x05fb002f,0x4bf203fb,0x24fc86f8,
    0x0fec02fd,0xff707f60,0x36c5f305,0x7e445f98,0xfb81fe26,0x307f7005,
    0x13ea00bf,0x3200bf60,0x3f200fff,0x20fffc3f,0xeeffeeee,0xff03f90e,
    0xf00fea5f,0x980df50f,0x404fe85f,0x3bba02fd,0xfb4eeeff,0x7c4bf203,
    0xfb0ff886,0xeeefd805,0xddfb3eee,0x2a05fffd,0x7cc1ba1f,0x0fffecce,
    0x7f8813ea,0xf307f700,0x3bfea00b,0x3f66eeee,0x06ff9802,0x3f20ffdc,
    0x7ffffc1f,0x3f91ffff,0x3ea5ff70,0x7f43f403,0x442fcc02,0x0bf602ff,
    0xfffffff8,0x3203fb5f,0x360df12f,0xd805fb3f,0x4fffffff,0x17ddfffb,
    0x0bf07dc0,0x3bbfffe6,0x7402fd83,0x83fb802f,0xff5005f9,0x4cffffff,
    0x0000000a,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xcedc8800,0x10000301,0x004d4c01,0x80155531,
    0x3101aa98,0x54c40135,0x9804c1aa,0x05544310,0x982a884c,0x4014c350,
    0x806600ca,0x80131098,0x4ccccc18,0x02620999,0x0ea804c4,0xf700cb80,
    0xffffffff,0x5002a881,0xddff5017,0x04fa87ff,0x503ba200,0x707fffff,
    0x09ffffff,0x13fffff2,0x07fffff9,0x4ffffff7,0xb6f885f9,0x8ffffeaf,
    0xffffacf9,0x33ff2fe4,0x3200fff9,0x407fe01f,0x805f73fc,0x3fffe0fd,
    0x3ee4ffff,0x80ffc40f,0x5ff9807a,0xbbbbbb50,0x7fcc1bbb,0xfaaec1ef,
    0x10ffc46f,0x6fec43fd,0x1ffcc000,0x3aa27bee,0x4cd6dc2f,0x77f42ffc,
    0x3f63ca9b,0x23ffb9ae,0x3a999efb,0x5be217e6,0xfc9cfcfd,0x3bfdf30f,
    0x3f7e3fd7,0x2fbbeee9,0xfc807f20,0x3ea1ff04,0x2aa3f403,0x42ffbaaa,
    0x21ff45fd,0x0ba2f33d,0x000befb6,0x7fddff40,0x3ff2bf11,0x7d41fe47,
    0x000efc85,0xff885ff5,0xb8037c40,0x301bee4f,0x21ff10df,0x2fcc01fd,
    0x2ffdb7c4,0x4ff997ec,0x93ff9fd4,0xc813e2df,0x21fe201f,0x993e25fa,
    0x7e4037c2,0xf72fe884,0x7d7df70b,0xd1fa85df,0xbf10000d,0x97feffcc,
    0x0fec4ff9,0x3ff707f8,0xa80efc80,0x001fd04f,0x00ff4bf3,0x97ec0bf2,
    0x2fcc04fc,0x83fdb7c4,0x10df33fc,0x2fc9bebf,0x0fe409f1,0x5fb0bf60,
    0x44bf65f8,0x02fdc05f,0x01df3ff3,0xe8177fdc,0xff713e65,0x1fffffff,
    0xffd306e2,0x03fb0107,0x7fcc03fa,0x00dfd883,0x99999bf7,0x997503fd,
    0x403fcbf9,0x27f700fe,0x981cfff8,0xfb6f885f,0x10bf3003,0x1fc9bedf,
    0x7fffc9f1,0x45ffffff,0x21fe25fa,0x7cd7fe6e,0x003fe604,0x4c03fff7,
    0x5c0bfffd,0x9507ec1f,0x99999999,0x90002001,0x807fa09f,0x3fa24fe8,
    0x7fffe404,0x2a1fffff,0x5feeefff,0x0ff00df1,0xff9127d4,0x42fcc5df,
    0x003fb6f8,0x2df10bf3,0x7c47f26f,0x3ffbbba4,0xff84eeee,0x2fb09f50,
    0x2fa8fdfa,0x1003fd10,0x67ec0bff,0xf13fe9ea,0x000bf10b,0x7c400000,
    0xffeb99cf,0xb0bfe600,0x1fdc01df,0x442ff880,0xd00ff15f,0x40bee01f,
    0xbf32ffda,0x07f6df10,0x3e217e60,0x88fe4df6,0x007f204f,0x407f4ff2,
    0xafaed8fc,0x07fb01fb,0x40bfff60,0x88dcf51b,0x7415300a,0xea89d91e,
    0x2600001e,0x7edffffe,0x5c07fee0,0x0df501ff,0x3e213ea0,0xfb007fe5,
    0x7007fa05,0x2a1be29f,0x3003fb6f,0x3edf10bf,0x27c47f26,0xf3003f90,
    0x3ee0bf1d,0x1f9bf3fa,0x2e00bf70,0x401ff8df,0x3e00007a,0xf309f91f,
    0x7ffffc3f,0x4fffffff,0x0df09a98,0xf5003bf2,0x05ff105f,0xfe98bf50,
    0x4207bee5,0x2fd40ef9,0x1fd27dc0,0x1fdb7fcc,0xf885f980,0x88fe4df6,
    0x007f204f,0xa817e7f4,0xfbf91fdf,0x3001df30,0x03bea1ff,0x20000498,
    0x209f91ff,0x99990ed8,0x99999999,0x88bf3005,0x3a6005fd,0xcfffa84f,
    0x3fe24cba,0x45fefdbc,0x4ecceffe,0x3f6f3ff6,0x32f37a1f,0x3fee1ffd,
    0xfb6fdfcc,0x10bf3003,0x1fc9bedf,0x0fe409f1,0x207ffb80,0x3fe66ff9,
    0x666ffc46,0x3fe24ccc,0x0002fec2,0x2e1fd000,0x0000003f,0xfd307f40,
    0xbfd10009,0xfffffb30,0x3fffea89,0xfffd70bf,0xfffeb85d,0x7ffff40d,
    0x7f5c41df,0x07f6dd3f,0x3e217e60,0x88fe4df6,0x002a604f,0x3e027fc4,
    0x222ffc3f,0xffffffff,0x3e213fa7,0x0000003f,0x00fee1fd,0x74c00000,
    0x0017443f,0x13101760,0x18000880,0x99800880,0x00003001,0x00000000,
    0x00000000,0x00000000,0x44550000,0x0000000a,0x07fffddb,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xeff80000,0x000000bd,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__consolas_23_usascii_x[95]={ 0,4,2,0,1,0,0,5,3,2,1,0,2,2,
4,1,0,1,1,1,0,1,1,1,1,1,4,2,1,1,2,3,0,0,1,1,1,2,2,0,1,1,2,1,
2,0,1,0,1,0,1,1,0,1,0,0,0,0,1,3,1,3,1,0,0,1,1,1,1,1,0,1,1,1,
1,2,1,1,1,1,1,1,2,2,0,1,0,0,0,0,1,1,5,2,0, };
static signed short stb__consolas_23_usascii_y[95]={ 17,1,1,2,0,0,1,1,0,0,1,5,13,9,
13,1,2,2,2,2,2,2,2,2,2,2,5,5,4,8,4,1,0,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,0,2,19,1,5,1,5,1,5,0,5,1,0,
0,1,1,5,5,5,5,5,5,5,2,5,5,5,5,5,5,0,-2,0,8, };
static unsigned short stb__consolas_23_usascii_w[95]={ 0,4,8,13,11,13,13,3,7,8,10,12,7,8,
5,10,12,11,11,11,13,10,11,11,11,11,5,7,10,11,10,8,13,13,11,11,11,9,9,12,11,10,8,11,
10,13,11,13,11,13,11,11,12,11,13,13,13,13,11,7,11,6,11,13,8,10,11,10,10,11,12,11,10,10,
9,10,10,11,10,11,11,10,10,9,11,10,12,13,12,12,10,10,3,9,12, };
static unsigned short stb__consolas_23_usascii_h[95]={ 0,17,6,15,20,18,17,6,22,22,10,12,8,3,
5,19,16,15,15,16,15,16,16,15,16,15,13,16,14,6,14,17,22,15,15,16,15,15,15,16,15,15,16,15,
15,15,15,16,15,20,15,16,15,16,15,15,15,15,15,22,19,22,8,3,5,13,17,13,17,13,17,17,16,17,
22,16,16,12,12,13,17,17,12,13,16,13,12,12,12,17,12,22,24,22,6, };
static unsigned short stb__consolas_23_usascii_s[95]={ 154,145,223,171,82,131,162,248,60,15,200,
136,248,145,248,108,83,29,238,186,211,72,96,67,108,1,250,120,24,223,13,
200,68,197,185,128,159,149,139,173,115,104,152,79,237,53,41,58,225,94,127,
140,91,161,1,15,210,224,198,52,119,24,211,241,232,47,150,58,221,35,243,
1,35,232,42,13,24,124,113,69,209,176,102,81,46,91,149,162,187,187,176,
31,1,5,235, };
static unsigned short stb__consolas_23_usascii_t[95]={ 19,1,67,44,1,1,1,53,1,1,60,
60,44,19,60,1,26,44,26,26,44,26,26,44,26,60,26,26,60,60,60,
1,1,44,44,26,44,44,44,26,44,44,26,44,44,44,44,26,44,1,44,
26,44,26,44,44,26,26,26,1,1,1,60,67,67,60,1,60,1,60,1,
26,26,1,1,26,26,60,60,60,1,1,60,60,26,60,60,60,60,1,60,
1,1,1,60, };
static unsigned short stb__consolas_23_usascii_a[95]={ 202,202,202,202,202,202,202,202,
202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,
202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,
202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,
202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,
202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,
202,202,202,202,202,202,202, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_23_usascii_BITMAP_HEIGHT or STB_FONT_consolas_23_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_23_usascii(stb_fontchar font[STB_FONT_consolas_23_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_23_usascii_BITMAP_HEIGHT][STB_FONT_consolas_23_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_23_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_23_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_23_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_23_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_23_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_23_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_23_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_23_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_23_usascii_s[i] + stb__consolas_23_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_23_usascii_t[i] + stb__consolas_23_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_23_usascii_x[i];
            font[i].y0 = stb__consolas_23_usascii_y[i];
            font[i].x1 = stb__consolas_23_usascii_x[i] + stb__consolas_23_usascii_w[i];
            font[i].y1 = stb__consolas_23_usascii_y[i] + stb__consolas_23_usascii_h[i];
            font[i].advance_int = (stb__consolas_23_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_23_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_23_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_23_usascii_s[i] + stb__consolas_23_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_23_usascii_t[i] + stb__consolas_23_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_23_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_23_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_23_usascii_x[i] + stb__consolas_23_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_23_usascii_y[i] + stb__consolas_23_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_23_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_23_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_23_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_23_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_23_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_23_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_23_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_23_usascii_LINE_SPACING
#endif

