// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_bold_20_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_bold_20_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_bold_20_usascii_BITMAP_WIDTH         256
#define STB_FONT_consolas_bold_20_usascii_BITMAP_HEIGHT         68
#define STB_FONT_consolas_bold_20_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_bold_20_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_bold_20_usascii_NUM_CHARS             95

#define STB_FONT_consolas_bold_20_usascii_LINE_SPACING          13

static unsigned int stb__consolas_bold_20_usascii_pixels[]={
    0x0c0809f9,0x88a00000,0x19999801,0x33310880,0x0174c013,0x1f5cfae0,
    0x33bf6e00,0x00001000,0x4c059950,0x00001bce,0x7f41ff20,0x00817b64,
    0x9d10bbae,0x04eb8040,0xeeeeee88,0xfd104fcc,0x5c00fea7,0x7e402dfe,
    0x7c07ffd3,0xf700ffff,0x3fffeadf,0x8007ee05,0x1ff31ff8,0xffffb100,
    0x3f6203df,0xc82fffff,0x744eeffe,0xf306ffff,0x6d40bfff,0xf327e404,
    0x21ff985f,0x0df906fe,0x6c1fdbf3,0xff75f90f,0x805fc87f,0xeffffff9,
    0xbff304fc,0xe880bfe6,0x902ffeef,0x3ff6e3ff,0x0999ff02,0x64cf7fea,
    0xeca85fec,0xdf7003cf,0xfc803fe8,0x85ffd9bf,0xfffcdff8,0x3bffa21e,
    0x3bee4ffe,0xa882ffa9,0xfb05ffec,0x0fffcc09,0x46fc8bfd,0x1ffd06fe,
    0x73f98fc8,0x7ff7e47f,0x17f23fff,0x7eccccc0,0x3b204fce,0x6c07fee1,
    0x261fe24f,0x05fb83ff,0x3fd801ff,0xfe897ee0,0x800fffff,0x037d43fe,
    0xff70ffe2,0x3e66fb83,0xb0ffe40f,0xfb1fec9f,0x03ffb007,0x7fc409fb,
    0xf83fea0f,0xa82fec3f,0xf98fb84e,0x7fe46f8c,0x7e4dfd0d,0xefc80025,
    0xfd8004fc,0x5c2fd40e,0x982ff42f,0x801ff06f,0x97ee01fe,0xcaefbffd,
    0xf83fcc00,0x03fea01f,0x4fc85ff3,0x0ffe0ffc,0x8afe49fb,0xff9801ff,
    0xffffff52,0x80a887ff,0x81ff53ff,0xf98005fd,0x41fd9fed,0x3fea0efc,
    0xffd5bf90,0xf9df9007,0x3ffffee9,0x217fc44f,0xf51131fe,0x8807fd49,
    0x801ff07f,0x97ee01ff,0x4009f3ff,0x0bf904fd,0x7fc43fdc,0xfa8ffd43,
    0xb0bfe20f,0x7e7fcc9f,0x3ff7004f,0x3fffffea,0x3f2003ff,0xbfb09fb6,
    0x83ffffcc,0x83fabeeb,0x8ffcc5fc,0xfffffefc,0x7e77e403,0xffffff74,
    0x7c49fb09,0xfafffe8e,0xf8817f65,0xf801ff07,0xf97ee01f,0x1003faef,
    0x3fe201ff,0x3e0ff900,0xfffff84f,0x20ffcc2f,0x7ffe44fd,0x7fee4c03,
    0x0009fb05,0x0ffcffcc,0xfff327e4,0x0df100ff,0x1ff317f2,0x7f437ff2,
    0x7e77e406,0x2e13f604,0x3f2fea6f,0x3e6f9ffd,0x40ffc03f,0x3fe200ff,
    0xfc97ee00,0xc800cfff,0x827ec05f,0x87ff07fc,0x81cccdfb,0x27f42ff8,
    0x321dfff5,0x67ffd40c,0x9809fb00,0xdfdfd01c,0x7dc13f20,0x901fd807,
    0x327fb8bf,0x03fea0ef,0x04fcefc8,0x3fe613f6,0xd1ff3f90,0x3fe2df1f,
    0x16ffe401,0xfd9501ff,0x5c5fb80b,0x403fffff,0x3fcc02ff,0x7c41ffb8,
    0x801fec2f,0x9ffb15fe,0x37ff3fe2,0x06fa87f8,0x7fc04fd8,0x3fffb80f,
    0x3ee09f90,0x6ce7d407,0xf897f21c,0xf317f25f,0x677e403f,0x413f604f,
    0xdf3fb1ff,0x7cdbe3fe,0x3ffd8807,0x3fee03fe,0x885fb805,0x504ffffd,
    0x0bfa00df,0xff50bfe6,0xeffffb81,0x7ffdc0bd,0xdf74ffff,0x21ff7fe6,
    0x4fd806f9,0x20bffe20,0xf900fff8,0x881fee09,0x0feff9ef,0xfffddff9,
    0x3e62fe41,0x337f600f,0x213f604f,0xf3fd1ff8,0x457e3feb,0x6ff400ff,
    0x2603fe1a,0x7dc05feb,0xffd3dd05,0x5c00ffa0,0x27ffd06f,0xff985fe9,
    0xc86ffffe,0x94fcbfff,0x27ffd4bf,0x017f6000,0xff105ff5,0x3fdc0009,
    0x33f73f90,0x3ffff27f,0x22fe40cf,0xf98667fb,0x3604fccf,0xd0ff984f,
    0x3df1bf3f,0x1017fc9f,0x01ff01ff,0x3ee03fcc,0x1ff2bf05,0x44003fe6,
    0xfffa81ff,0xfe80efff,0x980ffd43,0x3fee9fb0,0x260bff60,0x07fc804d,
    0x36207fc4,0x0baa00ef,0x4fa83fdc,0x329f11f7,0x3f2008df,0xfa97fe25,
    0xfc8fffef,0x2e13f604,0x3be7fa7f,0x361fdefc,0x41fe204f,0x07fc00ff,
    0x2b22bf70,0x85ffacf9,0x7e4004fd,0xbfffd505,0xa85ff301,0x4fd800ff,
    0xffddfff1,0x2ffd81ff,0x76fffd40,0x5c9fb313,0x7c01ffff,0x10ff707f,
    0x7e67ccdd,0xf900bf92,0x41fffddf,0x91efffe9,0x427ec09f,0x3a3f64fd,
    0x5c5ffdff,0x41fe206f,0x0ffc00ff,0x3fe2bf70,0x40ffffff,0x44001ff8,
    0x17f200ff,0xfb9bffd0,0x93f6009f,0xeaefffe9,0x007fdc6f,0xe9ffffe4,
    0x6ffdc3ff,0x2e5fd800,0x5eeffeee,0x4ffc83f9,0x3aa017f2,0x200cffff,
    0x3a04fc81,0x90ffcc4f,0x0ae3715f,0x7c40bfe6,0xf801ff07,0x457ee01f,
    0x0bdfffec,0xb0005fc8,0x5ffdc07f,0x7fe441da,0x32002dff,0x0009883e,
    0x09980011,0x8000026a,0x7ffffe41,0xb81006ff,0x0044004e,0x7c09f900,
    0x517fe23f,0xffc800bf,0xff06f981,0x201fe801,0x00fb85fb,0xa80017fc,
    0x7fff407f,0x0000006f,0x00000000,0x00000000,0x00000000,0xaa7e4000,
    0xfd87fee0,0x442ff80f,0x883bf601,0x01ff05fd,0xf700dfd8,0x0000fb0b,
    0xcca80000,0x00000003,0x00000000,0x00000000,0x00000000,0xfd4fc800,
    0x7dcbfffd,0x9dff501f,0x7f4407fb,0x203fffd4,0x980fffff,0xfff56fff,
    0x000550bf,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xfff94fc8,0x401e887d,0x00cfffd9,0x0ced8744,0x03bbbba0,0xeeaaf644,
    0x000004ee,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x000009f9,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xeb9f6400,0x40275404,0x006eeee9,0x703dffb5,0xe8819dfb,0x98774c1e,
    0x0eeeeeee,0x01db9710,0x03bdfd91,0x4fbfb6e2,0x03dffed8,0x0bdffd71,
    0x1013bf6e,0x647bdfb9,0x367db05e,0x2ebd704e,0x2a7d302e,0x8f7541ee,
    0xeeeeeeec,0x59bddd75,0x03b25d80,0x329fb000,0x037dc05f,0x03ffffcc,
    0x0fffffdc,0xdfffffd1,0x260ffc43,0xffff30ff,0xffb01fff,0xff881fff,
    0x4c1fffff,0x36fffffe,0x8bffffff,0x7ffffff8,0xefffffd8,0xfffffb80,
    0x50bfe67f,0x03ff23ff,0x81fe53fa,0xd17fe4fa,0x7fffecdf,0xfff96fff,
    0x3e01dfff,0x13f21fa6,0x5fca7ec0,0x20037dc0,0x7fc407fb,0x26fff204,
    0x3fe25ffd,0xf987fcc1,0xd82aaaaf,0xc819acff,0x89fd10ef,0x4b99bfff,
    0x3ff66351,0x222bff20,0xa97fdc39,0x77fcc4ff,0x7ec5b99a,0xff52ff46,
    0xf71ff985,0xfa93ea07,0x543ff72f,0x5ffcaaaa,0xff933bf9,0x3fcbf10b,
    0x2007ffe6,0x04bf94fd,0x2e0037dc,0x07fcc07f,0x7dc3ff88,0x983ff10f,
    0x00ff30ff,0xfb003ff5,0x3ee4fc89,0x7fcc001f,0x3e017fa0,0xd07fdc3f,
    0xff3001df,0xff07fea3,0x3ee7fb89,0xfe87f703,0xfd00bfd6,0xf917f21f,
    0xccefdc8f,0xfff12cff,0xffffd901,0x3fef7f29,0xf89bee3f,0x07fb80ef,
    0xff503fd4,0xf12ff981,0x30ff983f,0x0bf900ff,0x7ccbfee0,0x0017fa2f,
    0x5ffb1bee,0xd307fcc0,0x0bfe63ff,0xbfd5fd80,0x5fd8dfb0,0xb974d3ee,
    0x7effd43f,0x17fdc01f,0x0ffa8bf9,0xfffffff1,0x205449ff,0xffeeffe8,
    0xffffff94,0xfe9bee3f,0x10ff700e,0x557ff955,0x7c43fdc5,0x983ff13f,
    0xdfff30ff,0xddfe817b,0xfe882dee,0x7fc4ffef,0xffb99004,0xbffffa83,
    0xff73fd40,0x43fea5ff,0xf982aaa8,0xfa81ffbf,0xfa8bfe0f,0x0beebf94,
    0x3013fff6,0x45fc89ff,0x33fb87fc,0x7fe4009f,0x7fe53f61,0xf73ff88d,
    0xb803ff6d,0xffff987f,0x3f27ffff,0x3e29ff07,0x987fcc1f,0x0effffff,
    0x3ffffffe,0xfffe883f,0x00ffe20e,0x0bbfffe2,0x8fffffee,0xaffd8ffb,
    0x5cff73ff,0xfd80ffff,0x7ff105ff,0x4fa83fea,0x20bf2fff,0x7401fffa,
    0x8afe40ef,0x2fc84ffb,0x7fc007f5,0xefca7ec3,0x77dd3f60,0x7dc01ffb,
    0xffcaa887,0x1fee2aab,0x1ff89ffc,0x4c407fcc,0x37fe3ffc,0xe88ffd31,
    0x11fffcef,0x2aa007ff,0xb882ffdb,0xff53fffe,0x4bfe1dff,0xfb930ffb,
    0x3fff301f,0x5fcafec0,0x7ffcefcc,0xffe81fca,0x07fee05f,0x3ffffff2,
    0x4d7ecc45,0x44181bfc,0xca7ec2ff,0xfba7ec5f,0xfb803fff,0x703fd407,
    0x2ff883ff,0xff983ff1,0xff2ffc00,0x320ffa89,0x4bff30ef,0xfb0005ff,
    0x36ffa80d,0x7fc47fff,0xf983ff31,0x80bfd00f,0x987fd7fb,0xccfafbdf,
    0x7effd41f,0x04ff981f,0x059ddff9,0xfffffff9,0x266fe8ff,0xca7ec1ff,
    0xfba7ec5f,0x5c00efde,0x03fd407f,0xffa85ff3,0xff50bfe1,0x7f4bfd00,
    0xff07fcc5,0x3fa7fb87,0x6fc8000f,0xff16fd80,0xf10ffa87,0x00ff989f,
    0xff980bfb,0x6fc40ffb,0x81fbff6e,0xd0dff5fe,0x02fe40df,0x7667fe54,
    0x3ffe64cf,0xfe85ff11,0x4fd8bf94,0x0bff1df7,0x7d407fb8,0x99fff407,
    0x22ff45fe,0x3f2205fd,0xd87fee2f,0x322ff47f,0x87bfea6f,0x93fe6039,
    0xb27fcc1b,0x13fa21df,0x3e617ff9,0x00bfb00f,0xf10dfffd,0x3fff27ff,
    0x7dc7fee0,0x26ffee3f,0x0bf91999,0x01fb3fc0,0x15fe8dfd,0x17f29ffb,
    0x55bee9fb,0x1fee04ff,0xfa80ff50,0x40ffffff,0xffeefffa,0x3ffbbee0,
    0x77ffc45f,0x7fdc2fff,0x642ffede,0x96ffffff,0x1dfffddd,0x7ffffffc,
    0x3bffe60f,0x7f440eff,0x00ffffff,0xff900bfb,0x3fff109f,0x7c43ffea,
    0xf87ff45f,0x7fffffff,0x37c00bf9,0x7dc0c0fd,0x94feffff,0xf74fd8bf,
    0xd717fe4d,0x0bddffdd,0xfd300ff5,0x3ea01bff,0x7dc1efff,0xb102efff,
    0x2e03dfff,0x502effff,0x327dfffd,0x40cfffff,0x1dfffffe,0x0dfffe88,
    0x3fffff20,0x2017f604,0xff01fff9,0x3f27ff8d,0xfa7fd41f,0x7fffffff,
    0x3e200bf9,0x32001be5,0x94fabfff,0xf74fd8bf,0xf91ffe8d,0x0dffffff,
    0x01800ff5,0x13100620,0x10009800,0x880c0013,0x01330019,0x262000c0,
    0x00000000,0x00000000,0x00000000,0x0000004c,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x1dd0bdd1,0x17b62f6c,0x276403dd,0x776437b2,0xee882cde,
    0x0eeeeeee,0x4dd307ba,0xeeeeeeea,0xdddddd12,0x3bbba23d,0xddd12eee,
    0x3220379d,0xed803efe,0x6f77643e,0x7774c01b,0x20775c01,0xeeeeeeed,
    0x1f7f6445,0x64400040,0x00006440,0x7fc40080,0xff07fc3f,0xf1ffe61f,
    0x32fec05f,0x7ffec7ff,0x7fcc5fff,0x1fffffff,0x4ff50bfe,0xfffffffb,
    0xffffff33,0x3fffe65f,0xfff13fff,0xfa89ffff,0x205fffff,0x7ec4fffa,
    0x206fffff,0xf503fffc,0xfff81fff,0x266fffff,0x85ffffff,0x01dfffd8,
    0x7ec5fe88,0x7f6c400e,0xffec81ef,0x6fff880d,0x7fff07fc,0x5ff1ffee,
    0xbfd2fec0,0xfdb9dfd8,0x7ecccc2f,0x17fc199d,0xd9989fea,0xff3099df,
    0x26133335,0x09999aff,0xfd535ff1,0x4ce7cc7f,0xff881ffd,0x4efec4ff,
    0xfd02ffb9,0xdffb0dff,0xcccc81ff,0x3fa5ffcc,0x22ffb89e,0xfffffff8,
    0x07bfe601,0x2a03ffd3,0x42ffffff,0x0ffedffd,0xf17fffc4,0x57fbe21f,
    0x3fe0feee,0x7e57f602,0xf127ec0f,0x02fec07f,0x07fa85ff,0x3ff30bfb,
    0x100ffcc0,0x47fe83ff,0x6417fcc0,0x7ec4fcdf,0x7c42ff44,0x7540ffbf,
    0x9800ff9a,0x85ff12ff,0x47ff65fe,0xff506fea,0x3ffa201b,0x30f7fc42,
    0xfd07fd43,0x6fcff889,0x76fc43fe,0x20fecf9f,0x37f602ff,0x4fd82ff9,
    0xbfb01ffc,0x3ea17fc0,0xf30bfb07,0x0ffcc03f,0xfa83ff10,0x0bfe201f,
    0x89f91ff3,0x41ffc4fd,0x02ff8efb,0x36003fe6,0x907fe66f,0x321ffcdf,
    0x27fe40ff,0x2a4ffc80,0x27ec01ff,0x3ff11bee,0x443fe3ff,0xe9fdfbdf,
    0xd80bfe0f,0xfb05fedf,0x01ffb33b,0xbff02fec,0x20ffb999,0xaff985fd,
    0x3fe61999,0xf10ccccd,0x02ff983f,0x7fd03fee,0x5bfb13f2,0x3f60dfd9,
    0x7cc0bfb4,0x17fcc00f,0x7fd8bff1,0xffa83ff3,0x0013ff21,0x1ff29ff9,
    0x3fffffa0,0x47fc47ff,0x261ff5fd,0xfb7ff9cf,0xfb017fc3,0x3f603fff,
    0x401dffff,0x3ffe05fd,0xb07fffff,0xffff30bf,0x7ffccfff,0xff11ffff,
    0x303ff883,0x26fb89ff,0x7ffec4fc,0x3ff04fff,0xff981fee,0x6c37ec00,
    0x6fffefff,0xff983ff3,0x007ffa21,0xfc877fcc,0xccdff807,0x7fc44ccc,
    0x0ff8ff98,0x6d3fe9f3,0xd80bfe1f,0xfb06fedf,0xb009ffdf,0x567fc0bf,
    0xfb07fcaa,0xdddff30b,0x55ffccdd,0x3ff10aaa,0xe882ff98,0x90ffc46f,
    0xbadfd89f,0x3fcc5ffd,0x3e603ff3,0x0bfe600f,0x3bffff22,0xa89ff16f,
    0x3ffd887f,0x706ffdc0,0x4fe801ff,0x3a1ff100,0x9f50ffcf,0xf17ecbf2,
    0x4efec05f,0x54fd84ff,0x5fd805ff,0xff50bfe0,0x3e617f60,0x07fe601f,
    0x7d41ff88,0x077f441f,0x3b333bf2,0x89fb2cef,0x3bf20ffc,0x304ffaaa,
    0x37ec01ff,0x25fd8440,0xbfd11efe,0xc827fe40,0xeff984ff,0x1ffc8260,
    0xf50ff880,0x53ea1fff,0xff8bf618,0x7e57f602,0xfd27ec1f,0x205fd80d,
    0x83fd42ff,0x1ff985fd,0x8807fe60,0x237ec1ff,0xfc80efe8,0xffffffff,
    0xffa89fb4,0x3fffffa0,0x1ff306ff,0x800ffe60,0x3fe62ff8,0x400fffff,
    0x7fec5ffb,0x3ffff203,0x3ffe22ff,0x7c43fede,0x43fffa0f,0x45f903fb,
    0x57f602ff,0x27ec6ff8,0x7ec05ff5,0xf50bfe05,0x2617f60f,0x3fe601ff,
    0x227fe201,0x3a22ffeb,0x319999ef,0xbfd55555,0xe993f635,0x2affe27f,
    0x310ffcaa,0x8335ff53,0xd53007fd,0xfffd30df,0x0bea001b,0xfd5005f5,
    0xfd883dff,0x7c42ffff,0x43ffee0f,0x47f903fb,0x5fffffff,0x27fd4bfb,
    0x05ff89fb,0x2ff817f6,0xfff73fd4,0x3e67ffff,0x3ffe601f,0xff13ffff,
    0xd87fffff,0x7fffffff,0x3f627e40,0x22ffffff,0x3ff886fb,0xfffffff7,
    0x701ffc4f,0x01dfffff,0x000000c4,0x99800c00,0x441ff100,0x07f70fff,
    0xffff8ff2,0x8bfb5fff,0x89fb1ffd,0xbfb01ffb,0x3ea17fc0,0x3ffffee7,
    0x03ff33ff,0x7fffffcc,0xdffff13f,0xffffb039,0xfc80ffff,0x77fffec4,
    0xe827ec1c,0xfffff75f,0x07fe4fff,0x07bfff70,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x40000000,
    0xd1aaaaa9,0xdddddddd,0x000000dd,0x00220000,0x00000002,0x22fe4040,
    0xf90004fd,0x7f53fa0f,0x3eadf302,0x33ffffff,0x1ffb8bff,0x32a02ea8,
    0x440b6e00,0x09999999,0x653b29d9,0x40bbae4e,0x1c9802ca,0x4fffffee,
    0xffffffff,0x000007ff,0x3f620000,0x3f625fff,0x3ea1efff,0x3fe8cfea,
    0x3ff63fe6,0x3eebf20d,0xb17f23ff,0x413f209f,0x7fcc2ff9,0x3ea07fb1,
    0xffffff55,0x897fdc7f,0x2fa8c3ff,0x307ff883,0xff901fff,0x369fffff,
    0x3f6bfb5f,0x3617fd45,0x4fee5fff,0xbb50fff8,0x00005bbb,0x00000000,
    0x3b37bfa2,0x3f77be25,0xffdf51ff,0x261fffdf,0x4ffffeff,0x3ffffbf2,
    0xfd8bf91f,0x7409f904,0xf937e45f,0xa7dc2629,0x6ff99998,0x6fd8ffd8,
    0x6d7d6fcc,0x07ffe21f,0x2e17ebf6,0x3ccccccc,0x653f2bfb,0x31dd984f,
    0xd3bff7df,0x07ffea5f,0x00000000,0x7d400000,0xf106201f,0x323fea7f,
    0xf32fd8ff,0xc9fee5ff,0x3ff88dff,0x04fd8bf9,0x7fd409f9,0x5fb8ffe0,
    0x40bf29f9,0xff880ffd,0x7ecc0ffe,0x5c1dffff,0xd9fd41ff,0x9f90001f,
    0x027e53f2,0xffd14fb8,0x037f44df,0x00000000,0xff500000,0x4fd8003b,
    0x653eebf5,0x4c5ff32f,0x41df90ff,0xd8bf94fd,0x3f66664f,0x3ff8199d,
    0xb7cc1ff5,0x703fb7fe,0x7fd405ff,0x3ffee03f,0xe81ff303,0x5531be26,
    0x32355555,0x3ee7f74f,0x44111003,0x00080cec,0x00000000,0xffe80000,
    0x7ecc0bef,0x9f54ffff,0x997e4fee,0x2fe401ff,0x22fe53f6,0xffff34fd,
    0xc83fffff,0xf889fb6f,0xfeafff9f,0x2027fcc0,0xe983fffa,0x31efefef,
    0x2fb87fd3,0xfff91fe4,0x2049ffff,0x00000040,0x00000000,0x00000000,
    0x21dfffd7,0xfecceffa,0x4fee9f54,0x03ff32fc,0xa7ec5fc8,0x8a7f45fc,
    0xccefeccc,0x7cffcc0c,0xcfdff81f,0x7fc47fdf,0x7fffc405,0x7d5fcc1f,
    0x7fff1fba,0x47710770,0xbbbbbbba,0x00000002,0x00000000,0x00000000,
    0xd9ffe440,0xfaa7ec5f,0x4bf27f74,0x7e401ff9,0x7fca7ec5,0x3209ffb1,
    0xfefe804f,0x3efffd06,0x07ff46ff,0x3fa3bf60,0x825f5086,0x0000009a,
    0x00000000,0x00000000,0x00000000,0xd2ff9808,0xaa7fd4bf,0x3f27f74f,
    0xc803ff32,0xf9a7ec5f,0x04feffff,0xff7009f9,0x53ff607f,0x3fee5ffc,
    0x2e3fffff,0x09ff31ff,0x00000726,0x00000000,0x00000000,0x00000000,
    0xb9df7000,0x3ff21ffd,0xf54fffee,0x97e4fee9,0x7e401ff9,0xff927ec5,
    0x3209f77f,0xfff8804f,0x2a3ff900,0x3ffee4ff,0xff33ffff,0x002ffc87,
    0x00000000,0x00000000,0x00000000,0x20000000,0x1dfffffa,0x2effff62,
    0x3ee9f54f,0x3fe65f93,0x362fe401,0x3000984f,0x00000035,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x31004ccc,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_bold_20_usascii_x[95]={ 0,3,2,0,0,0,0,4,2,2,1,0,2,2,
3,0,0,1,1,1,0,1,0,1,0,0,3,2,0,1,1,2,0,0,1,0,0,1,1,0,0,1,1,1,
1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,2,1,2,0,0,0,1,1,1,0,0,0,0,1,1,
1,1,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,1,4,2,0, };
static signed short stb__consolas_bold_20_usascii_y[95]={ 14,0,0,1,-1,0,0,0,-1,-1,0,3,10,7,
10,0,1,1,1,1,1,1,1,1,1,1,3,3,3,5,3,0,-1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,0,-1,1,16,0,3,0,3,0,3,0,3,0,-1,
-1,0,0,3,3,3,3,3,3,3,0,4,4,4,4,4,4,-1,-2,-1,6, };
static unsigned short stb__consolas_bold_20_usascii_w[95]={ 0,5,7,11,11,11,12,3,7,7,9,11,6,7,
5,10,11,9,9,9,11,9,11,9,10,10,5,6,10,9,9,8,11,11,10,10,11,9,9,11,11,9,8,10,
9,11,11,11,10,12,10,10,11,11,11,11,11,11,9,7,10,6,11,11,7,9,10,9,10,10,11,11,9,9,
8,10,9,11,9,11,10,10,10,9,10,9,11,11,11,11,9,8,3,8,11, };
static unsigned short stb__consolas_bold_20_usascii_h[95]={ 0,15,6,13,18,15,15,6,20,20,9,11,8,3,
5,17,14,13,13,14,13,14,14,13,14,13,12,15,12,7,12,15,20,13,13,14,13,13,13,14,13,13,14,13,
13,13,13,14,13,17,13,14,13,14,13,13,13,13,13,19,17,19,7,3,5,12,15,12,15,12,14,16,14,15,
20,14,14,11,11,12,15,15,11,12,15,11,10,10,10,15,10,19,21,19,5, };
static unsigned short stb__consolas_bold_20_usascii_s[95]={ 247,197,165,237,75,213,145,161,34,14,122,
64,132,199,193,87,144,168,123,123,133,79,89,178,101,188,249,178,211,151,222,
158,22,156,145,112,111,101,91,156,69,81,247,35,25,13,1,55,226,109,46,
133,57,67,180,192,204,168,216,51,98,68,139,207,173,11,236,232,1,242,43,
122,12,203,5,22,33,21,44,199,225,134,33,1,167,54,76,88,110,185,100,
59,1,42,181, };
static unsigned short stb__consolas_bold_20_usascii_t[95]={ 16,1,53,23,1,1,1,53,1,1,53,
53,53,52,53,1,23,39,39,23,39,23,23,39,23,39,23,1,39,53,39,
1,1,39,39,23,39,39,39,23,39,39,1,39,39,39,39,23,23,1,39,
23,39,23,23,23,23,23,23,1,1,1,53,52,53,53,1,39,23,39,23,
1,23,1,1,23,23,53,53,39,1,1,53,53,1,53,53,53,53,1,53,
1,1,1,53, };
static unsigned short stb__consolas_bold_20_usascii_a[95]={ 176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_bold_20_usascii_BITMAP_HEIGHT or STB_FONT_consolas_bold_20_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_bold_20_usascii(stb_fontchar font[STB_FONT_consolas_bold_20_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_bold_20_usascii_BITMAP_HEIGHT][STB_FONT_consolas_bold_20_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_bold_20_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_bold_20_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_bold_20_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_bold_20_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_bold_20_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_bold_20_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_bold_20_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_bold_20_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_bold_20_usascii_s[i] + stb__consolas_bold_20_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_bold_20_usascii_t[i] + stb__consolas_bold_20_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_bold_20_usascii_x[i];
            font[i].y0 = stb__consolas_bold_20_usascii_y[i];
            font[i].x1 = stb__consolas_bold_20_usascii_x[i] + stb__consolas_bold_20_usascii_w[i];
            font[i].y1 = stb__consolas_bold_20_usascii_y[i] + stb__consolas_bold_20_usascii_h[i];
            font[i].advance_int = (stb__consolas_bold_20_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_bold_20_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_bold_20_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_bold_20_usascii_s[i] + stb__consolas_bold_20_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_bold_20_usascii_t[i] + stb__consolas_bold_20_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_bold_20_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_bold_20_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_bold_20_usascii_x[i] + stb__consolas_bold_20_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_bold_20_usascii_y[i] + stb__consolas_bold_20_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_bold_20_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_bold_20_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_bold_20_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_bold_20_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_bold_20_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_bold_20_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_bold_20_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_bold_20_usascii_LINE_SPACING
#endif

