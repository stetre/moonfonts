// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_15_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_15_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_15_usascii_BITMAP_WIDTH         128
#define STB_FONT_times_15_usascii_BITMAP_HEIGHT         68
#define STB_FONT_times_15_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_15_usascii_FIRST_CHAR            32
#define STB_FONT_times_15_usascii_NUM_CHARS             95

#define STB_FONT_times_15_usascii_LINE_SPACING          10

static unsigned int stb__times_15_usascii_pixels[]={
    0x02030101,0x13310880,0x02001980,0x00501988,0x10000000,0x08080404,
    0x21c38851,0x4ee03029,0xaa982da9,0x3aa02988,0x15f41dbb,0x260b76ea,
    0x3541dcbb,0x59112e6a,0x36242e05,0x33d8483a,0x190e2a87,0x16400388,
    0x5a8280a6,0x881d0fc4,0x88d51256,0x2499ea1f,0x41d4762f,0xb8d4a923,
    0x9706c080,0x05907a1c,0x87316408,0x22188889,0x03a6c81f,0xf88251f1,
    0x89aa6c83,0xb33c4ba3,0x864ce4c4,0x00a61d4b,0x21c791dc,0x7d10341d,
    0x339122c8,0x80fa8a1d,0xf901d0fb,0xf503f507,0x53441661,0x59733c4d,
    0x73566379,0x4732dc00,0x901e2243,0x2c922c87,0x20f714b5,0x2e01d1f9,
    0xf983dc3f,0xb8320911,0x2e330fc6,0x50b85540,0x22354083,0x1aa05c72,
    0x732c8790,0x4313b966,0x3a7b81fa,0xfa93f200,0x40e0fa81,0x21f134c2,
    0x01adabc9,0xf8aeae53,0x8e1716a5,0x32034c28,0x77299643,0xf10547e2,
    0x00749b07,0x41fc4f15,0x40440c6b,0x99c89e67,0x4747009c,0x23b8e25a,
    0x44190e2a,0x8b21e407,0x26f31793,0x0f446b81,0xb151981d,0x20f446b8,
    0x51d80880,0x1c071487,0x21992a3a,0x6c38f21c,0x87900741,0xc96cd22c,
    0x75d7051b,0x74c0e819,0xbea81bcb,0x6c3541dc,0x444ad883,0x70660333,
    0x2e2c0395,0x3981d0e4,0x4c590b20,0xd8805402,0x7100e81f,0x00401100,
    0x40108040,0x40c01301,0x70370e0b,0x2c819181,0x00d4414c,0x003a0f5c,
    0x00000000,0x02000000,0x01307066,0x2a61bd83,0xaaaa881b,0x2e2a8001,
    0x0000002a,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x20200000,0x18000001,0x80040180,0x01006001,0x26010188,0x5dc02200,
    0x41ba802b,0x2aa600fb,0x05d5cc0b,0x1c7fd51c,0x41dcac98,0x02dcabc9,
    0x77930b91,0x5c9b83b7,0x5473a6ea,0x220ee01f,0x02d80916,0x0ee6803e,
    0x442a24cd,0x202a1f33,0x81d30e46,0xd316a03a,0x09a21c81,0x07e1e43a,
    0x0ae3e600,0x807c04b8,0x23f1a259,0x38901c3a,0x3e8622f8,0xf1662030,
    0x834c3105,0x11e8791f,0xc8efc020,0x815d7c1d,0x9e62fd9f,0x0efea0f8,
    0x0702a071,0x03f309f9,0x99766a60,0x5764c01f,0x741d6d40,0x0fa22eca,
    0x20e43f6a,0xf85d89f9,0xf52f8d51,0x80a87f90,0x206a0eea,0x21ee2efb,
    0x5a9a0dd9,0x82cc01ee,0x45a97404,0x8de96c3c,0x03e66a84,0x7910fc1f,
    0x2faab8b9,0x0387b00e,0x07e65fb1,0x96659936,0x059800f9,0x1e89ddfd,
    0x9e63c8b5,0x47980df9,0x40d07c0f,0x22d5341e,0x30e1d403,0x360fa5c8,
    0x7c599ae4,0x382cc102,0x98f45531,0x43f51e45,0x11e831fe,0x41261f0b,
    0x0aac682c,0x586a0640,0xd83f51dc,0x23547e24,0xd504c0eb,0xd0e21970,
    0xd8791663,0x3efb8ccf,0x6c054e4c,0x154c0bac,0x071a9ba8,0x8e0597f3,
    0xd984bace,0x75c1db9b,0x675c1fcc,0x0bf220ab,0x4c15bb71,0xd11fc8bf,
    0x0440881b,0x00402000,0x80100408,0x01300080,0x00008008,0x00000000,
    0x00000000,0x00000000,0x00000000,0x40000000,0x7e400980,0x4111004f,
    0x2fd88efa,0x0ffd47aa,0x1774c7b2,0x11081bb1,0x01000310,0xffffe800,
    0x20762fa8,0x807ea0f8,0x026099b8,0x6c8bb553,0x5c3883e6,0x42642a87,
    0x7f57d429,0xfd50fa22,0x5c07b889,0xb3337301,0x3f2091ec,0x07900f40,
    0x16a681d1,0x171fc1f3,0x4c8485f0,0xd71f8298,0x7cca23c8,0x13e03c42,
    0x2ad31540,0x740f8b81,0xa8ffb201,0x2cc931bf,0x125e89f4,0x990712e4,
    0x221f0530,0x6408f21f,0xf7503c44,0xad819001,0xe81f2984,0x3f3017b1,
    0x2ccb7074,0x88f9bb5c,0x02e3f102,0x3e0a6132,0x203c83a0,0x2903c42d,
    0xe985803e,0x3d03e482,0x3a4b8037,0x42d47e20,0x177d48f8,0x9904a6c0,
    0x221f0530,0x85881e45,0x1aa53078,0x32160750,0x3a0bfaab,0x3a49803d,
    0x82defdc0,0x809d72cd,0x0b701af9,0x3739f035,0x101703c8,0x3eeab20f,
    0x41c03202,0x20cfcccb,0x2e081fae,0x2cc207a0,0x05f10fa8,0x43cc0dd0,
    0x32011f04,0x0f101a83,0x1605c871,0x1f001751,0x220fa9e8,0x0ee41cdf,
    0xd8b105a8,0x5c03b800,0x1f01cbbd,0x986a1e40,0x30321e20,0xda87303f,
    0x7cc1f001,0x00083dd3,0x10201b70,0x01100000,0xde88174c,0x8bffff50,
    0x50bea2fb,0x000083df,0x00000000,0x00000000,0x00000000,0x7dc00000,
    0xb106ec44,0xf03f4c7f,0x44bf663d,0x2ff661de,0xdccee980,0xcedcdb80,
    0x999db36d,0x3333f66d,0xb99fd31e,0xb999d019,0x333fa67f,0x817ec43d,
    0x5414c3fb,0xfb83fb87,0x20932dc3,0xd92dc06b,0x5c52dc50,0x188d7145,
    0x40ec896e,0xd16e2ec2,0x2ea07a87,0x1aa0a61f,0x0f721aee,0x6b80e6b7,
    0x01f52dc0,0x205b82dc,0x7c2dc06b,0xb703ea05,0x503545c8,0x20a61f71,
    0x22f8b86a,0x56dc3d9a,0x2e035c03,0x0b701765,0x135c396e,0x07c85b87,
    0x44b705f1,0x1503543e,0x35414db6,0x1ed26b9c,0xd700ffae,0x03fbeb80,
    0x99d705b8,0x3dccfb8b,0x407d42dc,0xd95f704e,0x0540d50b,0x0d5053bd,
    0x6ca67e27,0x01fcedc3,0x9b5b80d7,0x96e0b700,0xb70635c1,0x01d70d90,
    0x6a8db16e,0x2df882a0,0x372386a8,0x26b70f64,0x410d703f,0xb805f15b,
    0x35c0b705,0x87d0b704,0x8b7041f9,0xb81aa1fa,0x51317cc1,0x8fe21709,
    0x9f32dc3e,0x35c70d70,0x835c03f5,0x8e1ae05b,0x3a07dc5b,0xf916e384,
    0x19b106a8,0x02fae2b8,0xfa9217d3,0x225fd31d,0x9fb32dfe,0x3fa65d99,
    0x3a60fb22,0x417f4c2f,0x2dcabfd8,0x19b99fd3,0xeccccfc8,0xbb79fd34,
    0x0017ec41,0x00000040,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xd3000000,0xfd98999d,0x2a19f712,0x437a62ff,
    0x9f30dfd9,0x80400001,0x10040100,0x22000000,0x5c181080,0x88b71765,
    0x160fcc1f,0x1c07336c,0x25c88f98,0x916e6a3d,0x35554593,0xfa872aea,
    0x25b0de89,0x6c3b13f9,0x367ea4c9,0x72dc7f13,0x81f85b8f,0x7c406e6c,
    0xf01c048b,0x4e4096a1,0x862b32e9,0xd7344725,0x21cd52d8,0xd3488e3c,
    0x2e3882e8,0xf0b71365,0x0717d103,0x1c00cfa8,0x5416a1f0,0x3ba0999c,
    0x12d412a2,0x8ebad41f,0x80ab4c19,0x540747ba,0x0332bae0,0x3f5555d7,
    0x6c013ea0,0x99b99706,0x05a87c39,0x97dc08d5,0x7c6a846a,0x1e5d47c0,
    0x46c43ae8,0x5c007478,0x0fc2dc05,0xd73007d0,0x47a03807,0x33f8225b,
    0x5f254663,0x6887c426,0x205f16c8,0x79adc1ea,0x02dc00f4,0xd807e16e,
    0x1fa9c403,0xbcec80e0,0x7f547b1e,0xa86eba64,0x65ecc3ee,0x80363980,
    0x2fadf886,0x6b8019f3,0x07e22dc0,0xb12203e8,0x04201c0d,0x00010080,
    0x04008002,0xfe980000,0x225fd302,0xdfa80cfb,0x320dea81,0x000001df,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x80000000,
    0x02081108,0x10410d40,0x06001a81,0x80002222,0x66654300,0x20aa1ccc,
    0x23bb9820,0x03bbbbbb,0x516d7a60,0x2205d75f,0x2ebe61bb,0x540fcabe,
    0x30b4202c,0x4987f559,0x8f23e5a8,0x2a6a003c,0x98fc3acc,0x800003bb,
    0x52f829f9,0xd00bb98b,0x303c9e63,0x7b99b079,0x1ac85b82,0x70f2f2d4,
    0x2eeeeeea,0x040a8811,0x2e000000,0xb9661d06,0x4d10e805,0x1074c03b,
    0x81f307b9,0x5638890b,0x0000002a,0xb8000000,0x8b30e82e,0x21d00bb9,
    0x5cc0ee68,0x25e4ec0b,0x223883d1,0x002230c2,0x00000000,0x1f115000,
    0x220b30e8,0x688f41bb,0x005750ee,0x828c7b0d,0x00000002,0x80000000,
    0x263dd15a,0x401fc8bf,0xf717f31a,0x06a1bb13,0xbbbfb800,0x00000004,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_15_usascii_x[95]={ 0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,
-2,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,1,1,1,0, };
static signed short stb__times_15_usascii_y[95]={ 12,2,2,2,2,2,2,2,2,2,2,3,10,8,
10,2,2,2,2,2,2,3,2,3,2,2,5,5,4,6,4,2,2,2,3,2,3,3,3,2,3,3,3,3,
3,3,3,2,3,2,3,2,3,3,3,3,3,3,3,2,2,2,2,14,2,5,2,5,2,5,2,5,2,2,
2,2,2,5,5,5,5,5,5,5,3,5,5,5,5,5,5,2,2,2,7, };
static unsigned short stb__times_15_usascii_w[95]={ 0,3,5,7,7,11,11,2,5,4,6,8,3,4,
3,4,7,5,7,6,7,6,7,7,6,7,2,3,8,8,8,6,13,10,9,9,10,8,7,10,10,5,6,10,
8,12,11,10,8,10,10,7,8,10,10,13,10,10,8,4,4,4,7,8,3,6,8,6,7,6,6,7,7,4,
5,7,4,11,7,7,8,7,5,5,4,7,7,10,7,7,6,5,1,4,8, };
static unsigned short stb__times_15_usascii_h[95]={ 0,11,5,11,12,11,11,5,13,13,7,9,5,2,
3,11,11,10,10,11,10,10,11,10,11,11,8,10,7,3,7,11,13,10,9,11,9,9,9,11,9,9,10,9,
9,9,10,11,9,13,9,11,9,10,10,10,9,9,9,13,11,13,6,1,4,8,11,8,11,8,10,10,10,10,
13,10,10,7,7,8,10,10,7,8,10,8,8,8,7,10,7,13,13,13,3, };
static unsigned short stb__times_15_usascii_s[95]={ 124,85,72,104,66,112,1,69,19,1,47,
43,123,104,100,45,96,103,95,50,9,25,13,120,38,30,60,124,17,82,38,
89,36,109,110,89,90,81,73,70,10,120,13,33,44,20,1,74,1,50,53,
62,64,70,59,45,32,21,101,61,57,31,61,109,78,110,21,76,81,63,99,
106,114,122,25,17,90,26,9,83,81,37,117,70,32,52,102,91,1,1,54,
13,11,6,91, };
static unsigned short stb__times_15_usascii_t[95]={ 12,1,59,1,1,1,15,59,1,1,59,
49,49,59,59,15,1,27,27,15,27,27,15,27,15,15,49,1,59,59,59,
1,1,27,38,15,38,38,38,15,49,38,38,38,38,38,38,1,49,1,38,
15,38,27,27,27,49,49,38,1,15,1,59,59,59,49,15,49,15,49,15,
15,15,15,1,27,27,59,59,49,27,27,49,49,27,49,49,49,59,27,59,
1,1,1,59, };
static unsigned short stb__times_15_usascii_a[95]={ 54,72,88,108,108,181,169,39,
72,72,108,122,54,72,54,60,108,108,108,108,108,108,108,108,
108,108,60,60,122,122,122,96,200,157,145,145,157,132,121,157,
157,72,84,157,132,193,157,157,121,157,145,121,132,157,157,205,
157,157,132,72,60,72,102,108,72,96,108,96,108,96,72,108,
108,60,60,108,60,169,108,108,108,108,72,84,60,108,108,157,
108,108,96,104,43,104,117, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_15_usascii_BITMAP_HEIGHT or STB_FONT_times_15_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_15_usascii(stb_fontchar font[STB_FONT_times_15_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_15_usascii_BITMAP_HEIGHT][STB_FONT_times_15_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_15_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_15_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_15_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_15_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_15_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_15_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_15_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_15_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_15_usascii_s[i] + stb__times_15_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_15_usascii_t[i] + stb__times_15_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_15_usascii_x[i];
            font[i].y0 = stb__times_15_usascii_y[i];
            font[i].x1 = stb__times_15_usascii_x[i] + stb__times_15_usascii_w[i];
            font[i].y1 = stb__times_15_usascii_y[i] + stb__times_15_usascii_h[i];
            font[i].advance_int = (stb__times_15_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_15_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_15_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_15_usascii_s[i] + stb__times_15_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_15_usascii_t[i] + stb__times_15_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_15_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_15_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_15_usascii_x[i] + stb__times_15_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_15_usascii_y[i] + stb__times_15_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_15_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_15_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_15_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_15_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_15_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_15_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_15_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_15_usascii_LINE_SPACING
#endif

