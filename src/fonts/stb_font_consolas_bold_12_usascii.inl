// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_bold_12_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_bold_12_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_bold_12_usascii_BITMAP_WIDTH         128
#define STB_FONT_consolas_bold_12_usascii_BITMAP_HEIGHT         58
#define STB_FONT_consolas_bold_12_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_consolas_bold_12_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_bold_12_usascii_NUM_CHARS             95

#define STB_FONT_consolas_bold_12_usascii_LINE_SPACING           8

static unsigned int stb__consolas_bold_12_usascii_pixels[]={
    0x0a206a93,0x33223730,0x10702883,0x22cc9835,0xc8822001,0x310ae01d,
    0x98808800,0x00220a80,0xa8bd77a8,0x239f301f,0x1fb83cf9,0xdbd3076c,
    0x5f2764c9,0x77c53a00,0x6f5c44fc,0xfea83ee1,0x513ff25f,0x477649ff,
    0x5c3ee0e8,0x07c4f50f,0x316e03b2,0x3ee0c01f,0x40f89741,0x2601ae4d,
    0x13dcf70f,0x3dc59fbf,0x22bb17f1,0xfb887a9f,0x85b5b5b3,0x2a3f91fc,
    0x0fa03e27,0x441f3172,0x0fa0ffff,0x85b771d5,0x9007e24d,0x23f32ecb,
    0x27a879fa,0x57c5727b,0x7553e06c,0x7a8005bf,0x6c2ec17c,0x26607cc4,
    0xc83f30fa,0x6c3cfdfb,0x3f102ec4,0x225f136c,0x73d41fff,0x1bf92e4f,
    0x4443fb70,0x3d40100e,0x44f717ee,0x807cc0ef,0xe81f50f9,0x6c3ceafb,
    0x6b807cc4,0x443f33dc,0xa9ea4ffd,0xdf55faaf,0x81de8f3d,0x8fe41abd,
    0xbf8f50fb,0x0fa63dc0,0x43e601f3,0x5f6740f9,0x7426c2dd,0xcf987d03,
    0x7dbb86d9,0xbbdfb126,0x71bba336,0x1db9d503,0x51fc9fd4,0x2ec07c4f,
    0x403e62e4,0x7d0be0f9,0x4d81fdbf,0x507a87a8,0x6d4c1dff,0x421266ec,
    0x9f51db5c,0x6c7442c8,0x087e22da,0x440f89ea,0x7cc5c82f,0x2ec1f300,
    0x20aeb2b6,0x4d85f04d,0xea823ea0,0x03ee0dff,0xdffe9ae4,0x27917e2f,
    0x05d90eea,0xd81f33d4,0x0f98d506,0x23f98f70,0x904d805b,0x3a007ccd,
    0x0807c2ff,0x04010a60,0x97a80000,0x101fa8bf,0x57be63dd,0xfa84fde9,
    0x41d9bd10,0x43104fea,0x50130008,0x00000000,0x337a8000,0x44260020,
    0x806aa2aa,0x220d5441,0x000001aa,0x00000000,0x0a200000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00006088,0x88030333,0x26d85903,0x440061f9,0x40ee442a,
    0x6541cccc,0x877b263e,0xddb83dec,0x05ff7f14,0x201f8ae4,0x361ffffb,
    0x807e21fe,0x4c2f81fb,0x0fc4d91f,0x443bbea0,0x6fc4fddf,0x333f21cc,
    0x4395bf15,0x3fa2fcac,0xb3df15cc,0x1f8ae40d,0x07d15f10,0x00fc43f3,
    0xbffff906,0x3e23fa74,0x3dc2ec01,0xf982f8f7,0xf802f983,0x3f103f53,
    0xffea83ea,0x45ff9f15,0xf307d2f8,0x0ffe7c43,0x7cc43fff,0x3ebee09b,
    0x17a27e20,0xf9976136,0xfa8f7be1,0x41dff880,0x2d90ddc8,0x2a3f12a9,
    0xbb17f10f,0xd1b67be2,0x87e60bff,0x265faef8,0x882f81fa,0x6d7c45ef,
    0x3ffffdc6,0x5517c4db,0x403ee9f9,0x3223ffc8,0x3aedb3fd,0x4dd13f17,
    0x8fc5727b,0x033f30fa,0x23f10fcc,0x7c0fcc5c,0xf885fb02,0x709b00fe,
    0x6d80fccf,0x0dd003f5,0x2f53e5f2,0x2e0efff8,0xa8fc5727,0x17fffe0f,
    0x91f887e6,0x4f81f98b,0xcf886d81,0xf109b02f,0xa898db39,0x4a6bbe4f,
    0x265e99a9,0x3bf15e98,0x5407e2f7,0x3f15faaf,0xf53dcdd1,0x8857d4c1,
    0x7d4cb91f,0xbaffdc0a,0xc9f880fe,0xd504d81f,0x7ffc41df,0xaafff4c4,
    0xff10efff,0x7ffd41bf,0x7ec03f16,0xdfff15ce,0x2f66fd41,0x22dffff1,
    0x3fe2b91f,0x54c106ff,0x3ba3f100,0x100026c0,0x00802000,0x1002a204,
    0x06aa2000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x20000000,0x32612649,0x8333321c,0x3220cec9,0x1952543d,
    0x8ee390ee,0x1b8371c8,0x8800d522,0x3934cccc,0xcccca922,0x70c8800c,
    0xfa9ee109,0xc8737ee0,0x59f11fcc,0x27def4bd,0x7c93e7f1,0xc8fd47e6,
    0x4c5d0f66,0xfffa85b6,0x2df99911,0x2a1f36fb,0x360ccfdc,0x33f31eff,
    0x7b8fc85f,0x01fc43ea,0xc8fc47e2,0x907e4f75,0x8fd41f7f,0x17c6f47b,
    0xea8f4a7b,0x53e1efef,0x3ee3f700,0x3dc0f99f,0x4fcd7a18,0x7bafa85e,
    0x767d43ea,0x361f880c,0x32d91edf,0x13fe21ff,0x3ea274fe,0xfbd6646c,
    0x15f3b911,0x7c40eff4,0x3e777ae4,0xcb883dc0,0x01fbf35e,0x7d4f71f3,
    0x0dd59f50,0x7f7dc3f1,0x3f3bdd92,0x8dd83ff8,0x642fe82f,0x320fafcc,
    0x0ff6a0f4,0xaf9eb8db,0x7c43dc0f,0xddf35dac,0x4f72ec81,0x7d43e67a,
    0x1f98fc40,0x7d4feedb,0x703f7ee0,0x21ee0f7f,0xb0fccfdb,0x218fffff,
    0xd707ee4f,0x0f703fb6,0x26bd33f5,0x7cc04faf,0x467c6d8a,0x43ee2a7d,
    0x3e6d92fa,0x33e25d8b,0x2ffc44f8,0x9dfb87b8,0x1a6b60ff,0x221dfff1,
    0x2d72aaef,0x83dc0ffa,0x3f35defe,0xffc805f5,0x0f7ed41e,0xffd87ffd,
    0x83bfee1e,0xe83f70fc,0xf50f702f,0xb53d1fa5,0xfff50220,0x0fe9aeff,
    0xf30103dc,0x02003f63,0x10040000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x24992600,0x6642ccc8,
    0x599992cc,0x91073326,0xccc88599,0x2a039702,0x4022001d,0x98603dc9,
    0xdc98971c,0x41dfd303,0x4f73ffd8,0x3f77e67a,0x7cb33be3,0xb9f72cce,
    0x7e6fcc7f,0x0ff2fe65,0xffd113fe,0x21effa83,0x667c41fc,0xf50fc83f,
    0x67ccff19,0xd9fc43fb,0x5c667b65,0xd1f99ea7,0x41fc1fcb,0x1f99f27b,
    0x5d87ccf7,0x4dc3e7d4,0x3a6fe61f,0x9d01fdc6,0xfd70f6c4,0xd93dcfb5,
    0x17dccf98,0xb99f705f,0x1fdd7ccf,0x3be155bf,0x7d4f72cc,0x99f23f31,
    0x6e42fcbf,0x21f881f9,0xf503ee7b,0x3a27f109,0x5f765c0e,0xfb15f70f,
    0x12aabfa8,0xb99f705f,0x227f7ccf,0x9df2eeef,0x1fa9ee59,0x4c7fbbf3,
    0x9fc4fddf,0x2e1f883f,0x3fb03ea7,0x42fc8dd0,0x20f8fccc,0x7c46fffd,
    0x199ee823,0x3f33d4f7,0x7c1fc1f7,0x43f27b83,0x7cc1bdf9,0x37e61f70,
    0x21f886fc,0x226d9bf9,0x80ed80ee,0x527324fa,0xf50bb01f,0x7ff4c9ff,
    0xf33d4f73,0x41fc9f13,0x3f7099cf,0x80fcc9f9,0x2e5d9af9,0x260fcaae,
    0x3ff21bfa,0x36036e0e,0x0e982abf,0x2661f879,0x800201fc,0x1f99ea7b,
    0x3e0fe1f9,0xdff75fff,0xf301f987,0x127439df,0x3fffe25f,0x3e600087,
    0x3d807fff,0x2dff88fc,0x00000000,0x00000000,0x00000000,0x00000000,
    0x333260ae,0x5999914c,0x00001990,0x1721f100,0x1f99b202,0x5b0ba0c4,
    0xf9a7fffc,0x20930d92,0x83102620,0xfeee984e,0x859fb916,0x3b3a0ffb,
    0x3b3f323f,0x47fefe26,0x7a8b90f8,0x98d71f98,0x317b08e9,0x2fc998ba,
    0x3a07ebf2,0xf50fe43d,0x013a3dc3,0x887b87f1,0x27fe0fbf,0x27ebb27c,
    0xbf3df10f,0x2a2e43e2,0xd0fa9d07,0x2f327ddb,0x1fc41f8f,0x465c27f4,
    0x3107f20f,0x9013a3d4,0xdd87b81f,0x144fe0f8,0x447ed379,0x43e2b91f,
    0xddfdd55c,0x207cfdc1,0xbd70dfea,0x20bd0f9d,0xc87c44fe,0x224c0045,
    0x20fe204e,0x7c47d47b,0x4de40fe0,0x647e23f6,0x2bf57f15,0x442afca9,
    0xbdad85ef,0x8ff5ff53,0x3b219afd,0x000402fa,0x3ee04e80,0x77ec7b80,
    0x207f1efe,0x223f69bc,0x77e4b91f,0xfb03d45c,0x9f316605,0x7ffc4bf1,
    0x3f63f55f,0xe8000000,0x427c099d,0x55509fb9,0x40fe17f7,0x223f69bc,
    0x2008b91f,0x00000049,0x00000000,0x4dfffd00,0x7ffc40fb,0x000f985f,
    0x40000000,0x2a5ffff8,0x09898823,0x3761ddd5,0x0003dddd,0x00000000,
    0x00000000,0x33330000,0x3e7bbae1,0x263f3b91,0x2aaaa3bb,0x000001aa,
    0x00000000,0x00000000,0x3cccc880,0xdb97f657,0x000000f8,0x00000000,
    0x00000000,0x2e200000,0xa8102bbb,0x00000093,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_bold_12_usascii_x[95]={ 0,2,1,0,0,0,0,2,1,1,0,0,1,1,
2,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,1,0,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,1,0, };
static signed short stb__consolas_bold_12_usascii_y[95]={ 8,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,1,5,4,
5,-1,0,0,0,0,0,0,0,0,0,0,1,1,1,3,1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,9,-1,1,-1,1,-1,1,-1,1,-1,-1,
-1,-1,-1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,-1,-2,-1,3, };
static unsigned short stb__consolas_bold_12_usascii_w[95]={ 0,3,5,7,7,7,7,3,5,5,6,7,4,5,
3,6,7,6,6,6,7,6,7,6,6,6,3,4,6,6,5,5,7,7,7,6,7,5,5,7,7,6,5,7,
5,7,7,7,7,7,7,6,7,7,7,7,7,7,6,4,7,4,7,7,5,6,7,6,6,6,7,7,6,6,
6,7,6,7,6,7,7,6,6,6,6,6,7,7,7,7,6,6,2,5,7, };
static unsigned short stb__consolas_bold_12_usascii_h[95]={ 0,10,4,8,11,10,10,4,12,12,6,7,6,2,
4,11,9,8,8,9,8,9,9,8,9,8,8,10,8,4,8,10,12,8,8,9,8,8,8,9,8,8,9,8,
8,8,8,9,8,11,8,9,8,9,8,8,8,8,8,12,11,12,5,2,4,8,10,8,10,8,9,10,9,9,
12,9,9,7,7,8,10,10,7,8,9,7,6,6,6,9,6,12,13,12,4, };
static unsigned short stb__consolas_bold_12_usascii_s[95]={ 127,85,81,70,77,110,96,122,35,10,74,
58,123,87,112,62,30,75,96,113,21,92,9,7,23,118,123,118,103,66,90,
104,41,67,59,99,43,37,31,120,15,14,17,115,1,110,92,84,51,69,23,
106,100,1,46,62,38,54,85,23,54,49,104,93,116,108,16,8,9,1,76,
24,39,46,28,68,32,36,44,82,1,89,29,78,53,51,66,81,96,60,89,
16,1,4,73, };
static unsigned short stb__consolas_bold_12_usascii_t[95]={ 1,1,52,26,1,1,1,45,1,1,45,
45,26,52,45,1,26,36,36,15,45,15,26,45,26,36,1,1,36,52,36,
1,1,36,36,15,36,36,36,15,36,45,26,26,45,36,26,15,36,1,36,
15,26,26,26,26,26,26,26,1,1,1,45,52,45,26,15,36,15,36,15,
15,15,15,1,15,15,45,45,36,15,1,45,26,15,45,45,45,45,15,45,
1,1,1,52, };
static unsigned short stb__consolas_bold_12_usascii_a[95]={ 106,106,106,106,106,106,106,106,
106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,
106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,
106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,
106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,
106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,
106,106,106,106,106,106,106, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_bold_12_usascii_BITMAP_HEIGHT or STB_FONT_consolas_bold_12_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_bold_12_usascii(stb_fontchar font[STB_FONT_consolas_bold_12_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_bold_12_usascii_BITMAP_HEIGHT][STB_FONT_consolas_bold_12_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_bold_12_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_bold_12_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_bold_12_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_bold_12_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_bold_12_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_bold_12_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_bold_12_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_bold_12_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_bold_12_usascii_s[i] + stb__consolas_bold_12_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_bold_12_usascii_t[i] + stb__consolas_bold_12_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_bold_12_usascii_x[i];
            font[i].y0 = stb__consolas_bold_12_usascii_y[i];
            font[i].x1 = stb__consolas_bold_12_usascii_x[i] + stb__consolas_bold_12_usascii_w[i];
            font[i].y1 = stb__consolas_bold_12_usascii_y[i] + stb__consolas_bold_12_usascii_h[i];
            font[i].advance_int = (stb__consolas_bold_12_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_bold_12_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_bold_12_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_bold_12_usascii_s[i] + stb__consolas_bold_12_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_bold_12_usascii_t[i] + stb__consolas_bold_12_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_bold_12_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_bold_12_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_bold_12_usascii_x[i] + stb__consolas_bold_12_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_bold_12_usascii_y[i] + stb__consolas_bold_12_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_bold_12_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_bold_12_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_bold_12_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_bold_12_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_bold_12_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_bold_12_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_bold_12_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_bold_12_usascii_LINE_SPACING
#endif

