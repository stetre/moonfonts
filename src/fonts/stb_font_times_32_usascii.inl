// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_32_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_32_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_32_usascii_BITMAP_WIDTH         256
#define STB_FONT_times_32_usascii_BITMAP_HEIGHT        126
#define STB_FONT_times_32_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_32_usascii_FIRST_CHAR            32
#define STB_FONT_times_32_usascii_NUM_CHARS             95

#define STB_FONT_times_32_usascii_LINE_SPACING          21

static unsigned int stb__times_32_usascii_pixels[]={
    0x00000000,0x00000000,0x2a200000,0xccc800ab,0x99950ccc,0x01540599,
    0x00000000,0x44000000,0x11002219,0xa9800098,0x200000ab,0x9800001a,
    0x0bcdddec,0x4c7f6000,0x201ec03d,0x9a4403c9,0xbdf90003,0x6407ffd9,
    0xf91ffccc,0x2205999b,0x02d809cd,0x2e21a600,0x4400003f,0x775402fc,
    0x302fcefd,0x3ffee7f9,0xcefc800e,0x8803fedb,0x07fdc2fc,0xd7000fec,
    0x0f6e6019,0xb87ff100,0x5c07b00d,0x306dc00d,0x3fa6001b,0x00dfc882,
    0x07f91fe8,0xffdefea8,0x80016a2d,0x1fff644c,0xfff90000,0x3a0f6405,
    0xffdb82ff,0xffffefbb,0x205fd500,0xff900efb,0x42ffd85f,0xe8803ff8,
    0x0376000c,0x5d80db80,0x03ea07b0,0x07a60b90,0xd803ff50,0x8ff400ff,
    0x4fea03fc,0x3c4fd52b,0xf103d000,0x8800007f,0x03f702ff,0x7fc05ff3,
    0x13ff664d,0xf5003fe6,0x0bfe201f,0x19705ffb,0x0003f980,0x2a0000b9,
    0xbf03d82f,0x35c07a80,0x1009ff10,0x1fe80bfd,0x73ec07f9,0x00b63cc5,
    0x3ff81a60,0x2ff80000,0x3fe05f88,0x2217fa02,0x3fa20fff,0x40bfd004,
    0x0ffe42ff,0x001f9800,0x40001640,0x983d84fb,0x013e605f,0x07fe40fa,
    0x203ffa80,0x207f91fe,0x8b0ae6f8,0x04c8005a,0x00000ffa,0x0ff20bfe,
    0x3fa02ff8,0x6c3ff703,0xff5000ff,0xf70bfe07,0x13a0001f,0x00162000,
    0x0f617f20,0x1fe81fea,0x7cc1fb80,0x3fe2005f,0x323fd00f,0x21ff503f,
    0x03e2242b,0x7f403d00,0xff800003,0x3e02fd82,0x40ffa02f,0xbff32ff9,
    0x80fff800,0x03fd42ff,0xb8806c80,0x02c2a88a,0x09fb0130,0x20ff307b,
    0xdf1006f9,0x4004ffb8,0x3fd01ffd,0x7fc40ff2,0x05b00575,0x3fa034c0,
    0x220004c3,0x3fe0bfe0,0xe80bfe02,0x25ff103f,0x74004ffb,0x42ff81ff,
    0x202606f9,0x376201f8,0x5c4fcca9,0x417ed401,0x883d83fe,0x03fc81ff,
    0xffc8bfa0,0x17fe4003,0x07f91fe8,0x0166ffec,0x079002d4,0xfff93fe8,
    0xdefb801b,0xff82ffbd,0xe80bfe03,0x23ff103f,0x6c003ffc,0x42ff82ff,
    0x2fea86f8,0x13a206b8,0x03983ff7,0x3a0bff72,0xff03d82f,0x002ff881,
    0x2ffe93f6,0x827fe400,0x407f91fe,0x803fffe8,0x03d000f8,0xfefdbfe8,
    0x5db00eff,0x7417ffc4,0x80bfe05f,0x1ff103fe,0x9000bffa,0x05ff09ff,
    0x2ffdc8bf,0x21b603e8,0x405887fa,0x1fb82ff8,0x50dd03d8,0x7e4003ff,
    0x0007ffe5,0x3fa0bff7,0xe8807f91,0x2d803fff,0xfe806980,0x13ffa62f,
    0x3fea0bf2,0xf01ffd82,0x81ff405f,0x07ffe5fa,0xf0bff700,0xf109f05f,
    0x900f985f,0x30bf905f,0x105ff009,0xf107b07f,0x001ff707,0x5ffb3fdc,
    0x04ffb800,0x00ff23fd,0x006fffdc,0x007900b5,0x3ffa07fd,0x7c41be20,
    0x0eff982f,0xfd017fe4,0xfe87f60b,0x7fe4002f,0x3e82ff83,0x07a85ff0,
    0x0bfa0bf7,0x0bfe00ae,0x20f606cc,0x00ff903c,0xff90ffb8,0x3ffc8007,
    0x0ff23fd0,0x0efffb80,0x1e801f10,0xf503fe80,0xf02fe43f,0x3fff205f,
    0x02ff9ecd,0x7f707ffa,0x4003ffc8,0x2ff82ffd,0x85ff02d8,0x101ff06b,
    0x001b01ff,0x0cc805ff,0xb006dc7b,0xffa800ff,0x8009ff52,0x3fd01ffd,
    0xbb800ff2,0x0b607ffc,0x7fd00698,0xfd8bfe20,0xc80bfe04,0x5ff1efff,
    0x5ef6ff40,0x4ffb82fe,0x40ffec00,0xf01c82ff,0xfa85c85f,0x1a0df706,
    0x2a017fc0,0x06e47b0d,0x9800ffb0,0x0bff12ff,0x3a06fe80,0x4007f91f,
    0x205ff72b,0x400f205a,0x8bfe03fe,0x0bfe04ff,0x2ff83510,0x0d4cffa0,
    0x800dff30,0x05ff06ff,0x70bfe017,0xf109fb0b,0x2009507f,0x839102ff,
    0xb816443d,0x7fd4007f,0x4007ff61,0x3fa02ffa,0x5c007f91,0x7c417f62,
    0x3a001f00,0x41ff103f,0x0bfe05ff,0xd017fc00,0xffc8007f,0x03ff5001,
    0xff000bfe,0x1fe86a85,0x7c41ffc8,0x205ff000,0xf883d83f,0x000ffa82,
    0xfe883fee,0x80dfd005,0x207f91fe,0xff515c1a,0x034c16c0,0x3e207fd0,
    0xff037f47,0x0bfe0005,0x44003fe8,0x9fd005ff,0x20017fc0,0x7c3cc2ff,
    0x43fce42f,0x0bfe004d,0x40f607ea,0x01ff885e,0x3e21ff20,0x077d401f,
    0x1fe47fa0,0xf515c4b8,0x1e42d40b,0x2a07fd00,0x817fe44f,0xff0002ff,
    0x001ff405,0x2e017fd4,0x0bfe00ef,0x0bfe0591,0xaefc81f1,0x227f8ada,
    0x3fe0144c,0x3d82fd82,0x3ff01ff0,0x982fec00,0x1df903fe,0x3f23fd00,
    0x15c1f703,0x40f805fb,0x0ffa000f,0x77fc4374,0x001ffc40,0xff01ffc4,
    0x3fa60009,0xf009f903,0x81ffc85f,0x4c3d82ff,0x3fa1efff,0x015c3ddc,
    0x0ffa0bfe,0x07fe20f6,0xfe800ff6,0x66f7dc02,0x3a002efd,0x2e07f91f,
    0x3ee571df,0x1a62d804,0xc83ffd00,0x7dff701f,0x37dffd93,0x3fff6a00,
    0x3fff6a0b,0xfd90001b,0x005dfd9b,0xffb87ff1,0x4c1ffc40,0xa881b886,
    0xf806880a,0xd84fd82f,0x980ff983,0x0df1005f,0x3ffff620,0xc8ff4000,
    0xdfd9103f,0x2005ddbd,0x2000f25a,0x0dedeffb,0x6ffffd40,0x2001cff8,
    0x20999999,0x00999999,0x00d4c400,0x39fffd70,0x3ffb204c,0x001ec1cf,
    0xff005900,0x7b0bf903,0x3e40ff50,0x4003fb80,0x4005fffb,0x007f91fe,
    0x00019b33,0x10000545,0x15300035,0x00000054,0x00000000,0x88000000,
    0x4b80001e,0xf701ff00,0xdf307b09,0x74017c40,0xfff30006,0xc8ff4009,
    0x00ae003f,0x00000000,0x00000000,0x00000000,0x00000000,0xc80007a6,
    0x541fe004,0xf883d82f,0x30075405,0x5c40001f,0x3fd003ff,0x08800ff2,
    0x00000000,0x00000000,0x00000000,0x00000000,0x8007d300,0xf06604d8,
    0x1ec1b609,0x26400fb8,0x00001e88,0xaa86fbaa,0xbf91feaa,0x00003555,
    0x00000000,0x00000000,0x00000000,0x00000000,0x3005f644,0x7fc403bb,
    0xea80ea8c,0x26c07b00,0x07a225c0,0x5cc40000,0x3dddddb2,0x0fbbbbae,
    0x00000000,0x00000000,0x00000000,0x00000000,0x3ae20000,0x1ceedcee,
    0x1bfff900,0x1ec04d98,0x9100b6a0,0x00000122,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00131000,0x40020180,0x00010008,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x30000000,0x20000001,0xa8839839,0x00dc001b,
    0x0001b980,0x22001b98,0x331000ab,0x40013333,0x999984a9,0x20199999,
    0x8800aba9,0x333001ba,0x26033333,0x33301aca,0x2e213333,0x40017aa0,
    0x220005ea,0xaacedbfc,0x3bb2602a,0x5c25c00b,0x1fde7cc4,0xb8006a80,
    0x002eecfe,0x0eebdea8,0x3ffffaa0,0xffffc803,0x7e4401ff,0x7ffd40ac,
    0x0fffffff,0x7ed6774c,0xfb9fd103,0xffca801d,0x66c42dff,0x220dffca,
    0x2dffffdb,0xbffd5df9,0x5ffeb800,0xa8fd1000,0xb705eeff,0x401ffd11,
    0x3e23d83d,0xf1007f24,0x45fa8003,0x1fcc006c,0x37e203be,0x202fffdb,
    0x6ffffff8,0xb006fd40,0xffffffff,0xa85f88bf,0x106f444f,0xff9001ff,
    0xfd07d109,0xd0fff60b,0x002ff4ff,0x90005fe8,0x407ff0bf,0x0bfa20fa,
    0x2e1f81e8,0xb00fe62f,0x85fd0007,0x1ba001f9,0x103613ea,0x4e640bff,
    0x32009999,0x567c404f,0x3fa99999,0x0ff80fec,0x17f203f6,0x2e0ffee0,
    0x80ffb81f,0x2fe41ffc,0x36000bf9,0x7fd0005f,0x3f40dfb0,0x81f10144,
    0xf117ec78,0x4003540b,0x0fd41ff8,0xff03fc80,0x7fc80cc1,0xb8001f10,
    0x403b805f,0x807fc0fb,0x20df31fd,0x7d402ff8,0x884fc82f,0x0ffb83ff,
    0x0bf927dc,0x0017f200,0x3fdc27fc,0xd3000ff0,0x21ff8d50,0x0f880ff8,
    0x42ff9800,0x3ff1006d,0x54013fa0,0x8009905f,0x01800ff9,0x02fe86e8,
    0x817f21fd,0x7fd405fe,0xff06fa82,0xa81ff707,0x0017f22f,0xd8002fe4,
    0x306fb86f,0x333100ff,0xb93333b9,0xf88bfa33,0x40007b07,0x00bee5ff,
    0xfd807fcc,0x105f7007,0xd0039dff,0x2200007f,0x40ffc83f,0x817f65f8,
    0x7fd406fc,0xff105702,0x881ff703,0x0017f21f,0x00222fe4,0x7fd03fee,
    0x2e01fea0,0xffffffff,0x7f97ffff,0x02dc37cc,0x367ff600,0x5555511f,
    0xf903fd43,0x640f600f,0x00dfffff,0x00001ff9,0x3fe603ee,0x741dd11e,
    0x01fee06f,0xb8005ff5,0x01ff706f,0x2a2fe41f,0xfc84efff,0x01dffd55,
    0x9f71dfb8,0xffffffd0,0xf03f003f,0x3ee4f983,0x00007c43,0x8833ffea,
    0x321bfffc,0x03fee07f,0x6e540b90,0xe81effff,0x3efda8df,0x2e06e800,
    0xd84eafff,0x03fee07f,0x4002ffa8,0x1ff701fe,0xe85fc870,0x2b7f201e,
    0x804ffcbe,0x401cddce,0x3c4007fa,0x98fb83c4,0x0003d85e,0x880fffb8,
    0x06fd81ff,0x6d40bfea,0xfd3004ff,0xceff88df,0x005ffc99,0xff500fe2,
    0x0bfee0bf,0x3ea03fe4,0x0fea002f,0xc800ffb8,0x6402e45f,0x07fd44ff,
    0xf50003b0,0xa86a800f,0x20f72606,0x3005505b,0x10dff9dd,0x81bfa09f,
    0xeca82ffa,0x8800efff,0x3fea4ffd,0x003ffb81,0xffb001f7,0x1dff10bf,
    0x5407fe88,0x13a002ff,0x9001ff70,0xc802ecbf,0x01ff885f,0xf50003f9,
    0xc84c800f,0x81f30004,0x501fccf9,0x0fffa1bf,0x1bfa01d5,0x4c01ffa8,
    0x36002ffe,0x403fee6f,0x0dd007ff,0xbffd3b90,0x759fff50,0xfa80bffd,
    0x00d3002f,0xf9001ff7,0x64009b1b,0x203ff05f,0xeefffffd,0x00ff503d,
    0x3337d331,0x003337d3,0xc93e2174,0x2a37d40f,0x80ba0fff,0x1fee06fd,
    0x002ff440,0x1ff61ff5,0x4400ffd8,0x8876c03f,0xfd885ffe,0x02ffaadf,
    0xc8017fd4,0x00ffb801,0x02feefc8,0x7fc17f20,0xffffd302,0xa81fffff,
    0xfffb807f,0xffffffff,0x90b9007f,0x3e27d45f,0x75ffd83f,0x207fc809,
    0x3ee006fb,0xc87fc007,0x07fee07f,0x7dc01f70,0x000ffe82,0xff500ffd,
    0x5c016005,0xdfc800ff,0xf9000ffd,0x4c0bfe0b,0x95533315,0x007fa87f,
    0x001e21e2,0x87fa03e6,0x03fe66f9,0x03b3ffe2,0x3201ff50,0x1be6005f,
    0x7fd4fb00,0x801ff500,0x407f406d,0xf9803fe8,0x1ffa803f,0x3ee00900,
    0x8dfc800f,0xfc800efe,0xf105ff05,0xfa897003,0x2a1aa007,0xf02e8005,
    0xf93fc43f,0x3ffee01f,0x01ff8803,0x7c4007fd,0xf32fc005,0x01fe603f,
    0x3fc407f1,0xfb00bf70,0x03fea00b,0xffb800c0,0xf35fc800,0x0bf900bf,
    0x01f60bfe,0x01fea16c,0x004c84c8,0x43fd0264,0x0fffa7f9,0x881fffd8,
    0x3e213f22,0x0bee000f,0x7f41fa80,0xb809f903,0x80ff400f,0x77d404f9,
    0x00ff5000,0x01ff7000,0x7fd4bf90,0xf82fe403,0x404ff82f,0x007fa85b,
    0x800b60b6,0x8bf200e9,0x3bff26f9,0xfffefb80,0x6f883622,0x20081fb8,
    0x440dc45e,0x80ff883e,0x036c00fe,0x1fc827dc,0x4403bee0,0x009f50ff,
    0x3f60032e,0x45fc801f,0x3f602ffc,0xf705ff05,0xd9979bff,0x01ff7019,
    0x003e07e0,0x3ea00f44,0xff88bf24,0x1edbadff,0x7fdffffb,0x27c47f30,
    0x9d5177e4,0x935bff70,0x22fdc07f,0x1fc401fb,0x220f7c40,0x017ee03f,
    0x01b29ff3,0x74027fcc,0x6fe803ff,0xfd01fff8,0x207ff10d,0xdfffffd9,
    0x007ff201,0x801e21e2,0x55f7004c,0xfffd309f,0xfff709ff,0x6f75409f,
    0xffff503e,0x3fa205df,0xa801deff,0x801eecef,0xfb1000fa,0xa885dd7d,
    0xfb001dec,0x22001bbf,0xff9103ff,0xb707bfff,0x3ea7bfff,0xfb52dfff,
    0x3fb27bff,0x26200cff,0x7ffedc00,0x20a203cf,0x00b30028,0x4c00cc98,
    0x029800aa,0x4c400620,0x00262000,0x26000cc0,0x01330002,0x200026a6,
    0x188000a8,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x33310000,0x26660013,0xa9800999,
    0x44141acb,0x10999999,0x01333333,0x44333331,0x01999999,0x42666662,
    0x99999998,0x33333300,0x82aea601,0x2ae60009,0x33310c40,0x26013333,
    0x44099999,0x99999999,0x31099999,0x13333333,0x19999988,0x26666662,
    0x26662000,0x99999999,0x10220999,0x805fffd7,0x0bfffdb8,0x2f3bfae0,
    0x986bcfdc,0x30cffffc,0x05bffff9,0x547dff93,0x03effffd,0x47bfff62,
    0xbeffffca,0xfffdb880,0x677ec41c,0x201ecefe,0xcbcefda8,0x36a3dace,
    0x80beffff,0x0cffffb8,0x7fffffe4,0x1fffffff,0xffffffb1,0xfffc9819,
    0x3ffae63e,0x03deffff,0x3ffffffe,0xffffffff,0x2e03ff35,0xfb000fff,
    0x00dfd880,0x7e40dfd3,0x0fff505f,0x3ee01f90,0xbf7000ff,0x801ffee0,
    0x1ff880fd,0x980ffec4,0xff700cfe,0x05fff707,0x3201df50,0x3ff601af,
    0x09fff703,0x7fc03fd8,0x3dff731f,0x7dc13df0,0x5d7ee61f,0x3ff602ff,
    0x206c800e,0xfd005fe8,0xd02ffc40,0x04d801ff,0xc8007ff4,0x0bff300f,
    0x3fd83e40,0x3e607f60,0x04fb805f,0xf9009ffb,0x2a00ec01,0x7fdc05ff,
    0x200fe206,0xfff987fe,0x1ffb83c0,0x80991698,0xb805fffc,0x8017f605,
    0x07fec07a,0x7c02ffb8,0x01ffdc01,0x3fe203e8,0x7c1ae004,0x220fc00f,
    0x99000efe,0x803ffe20,0x202c02f8,0xd800fff8,0x009d03ff,0x7fe41ff6,
    0x7fdc1223,0xcc800b01,0x2dc04ffe,0x4002ffb8,0x0ffea00e,0xd5027fc4,
    0x00dff100,0x4ff801f3,0x3e21ae00,0x320ec02f,0x166001ff,0x3205ffa8,
    0x7ec02805,0xfff1002f,0x36006c81,0x8dff507f,0x203ff701,0x7c664001,
    0x416e02ff,0x088006fe,0xff02ffc0,0xc801ec0f,0x02e401ff,0xd70027fc,
    0xb807ffe0,0x4003ff41,0x417fec04,0x5c0000f9,0x7d4005ff,0x8003ea6f,
    0xfff307fd,0x007fee00,0xff9a6400,0xf10b701f,0x2000009f,0xff980ffc,
    0x2003f02f,0x0fc05ff8,0x70027fc0,0x0ffff20d,0x0037fc40,0x07ffc400,
    0xf30000fa,0xf90001df,0x8003f37f,0xdff707fd,0x007fee00,0xff726400,
    0xf50b701d,0x2000007f,0xfdc83ffa,0x4006a85f,0x0d500ffd,0xb8013fe0,
    0xdfffd106,0x04ffa803,0xbff50000,0x7400035c,0xf10001ff,0xb0007dff,
    0x0fffa0ff,0x000ffdc0,0x7fe44c80,0xffc85b85,0xaaaaa802,0x1bfe00aa,
    0xb03ff6ba,0x4ffa8007,0x3fe007d0,0x881ae004,0x00dffffe,0x00007ff9,
    0x7c57fec0,0x7fe40001,0x7fd40004,0x8ffb0007,0x2006ffb8,0x00001ffb,
    0x89ffb099,0x02ffe85b,0x2efffa88,0xf307fe40,0x0f88bfea,0x987fe800,
    0x09ff000f,0x7dc035c0,0xfe83ffff,0x2000001f,0x004efff8,0x0037fcc0,
    0x003ffd80,0xfcccffd8,0x7dc004ff,0x9900001f,0x5c5ffd10,0x003ffe85,
    0x2600fff2,0x7c5323ff,0x4001aa5f,0x02643ffb,0x5c009ff0,0xfffb1006,
    0x02ffe8bf,0x7fdc0000,0x7f440006,0xf980001f,0x6c001fff,0x09aaa8ff,
    0x01ffb800,0x13201ecc,0x5b8fffcc,0x2005ffd8,0xfd002ffb,0x1ffb0fcd,
    0x7c4000f6,0x8007e26f,0x16e004ff,0x9fffd300,0x00027fec,0x0027fc00,
    0x000fff60,0x3feabe20,0x03fec006,0x03ff7000,0x3204ffe8,0x23ffea04,
    0x07ffb85b,0x4007fee0,0x54799ffb,0x000f8bff,0x35c7ff20,0x8017fe00,
    0xfc80105b,0x0bff70ff,0x9ff00000,0x2ffd4000,0x364e8000,0x3f6003ff,
    0x3ee00007,0x3ffec01f,0xffb80990,0xfff885be,0x03ff7000,0x1333fe20,
    0x001abbfe,0x0fabff10,0x400bff00,0xf900b04c,0x01ffe65f,0x13fe0000,
    0x07ffc400,0x222e4000,0xfb001fff,0x7dc0000f,0x0f8a801f,0xffb00990,
    0x13ff20bf,0x000ffdc0,0xf903fdfd,0xb00007df,0x8001f5ff,0x0fa007fd,
    0x1ffc403c,0xa8005ffb,0x013fe000,0x8017fec0,0x2a03ee04,0xffb006ff,
    0x7fdc0000,0x640b3001,0x0bffd004,0x200fffe2,0x2e001ffb,0xfff306ff,
    0xff500001,0xff70009f,0x203f3003,0x0ffc402f,0x2003fff3,0x2ffc0039,
    0x02ffdc00,0x03f30498,0x6c027fec,0x2e00007f,0x05b001ff,0xff8802ec,
    0x07ffa205,0x4003ff70,0x3fe03ff8,0x3fa00005,0xbfb0001f,0x3e03f980,
    0x21bf201e,0x4c00effa,0x37fc4005,0x03ffe600,0x1fcc1740,0x00bffe20,
    0x40000ffd,0x64402ffc,0x3003f401,0x7ff900bf,0x03ffb101,0x3200fd80,
    0x2e00003f,0x3a20006f,0x27dcc1df,0x882bffe0,0xfd300ffb,0x2e4c459d,
    0x03ffd400,0x266fffa0,0xeca99999,0x00ffdc1f,0x880ffff4,0x00001fff,
    0x03807ffd,0x33ffff26,0x5005b801,0xfd99dfdb,0xd500017d,0x0000f980,
    0x0000be20,0xffdfffb1,0xd95d007f,0x01bffbdf,0xefffec88,0x6dc002ce,
    0x01cfffff,0x7fffffdc,0xffffffff,0x3bfffae7,0xffffb504,0x3ff6a5df,
    0x8002dfff,0xdfffffc8,0x00000003,0x2aa60003,0x01800009,0x18000028,
    0x2a620000,0x306001aa,0x20001355,0x000000a9,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x31000000,0x20001333,0x22199998,0x19999999,
    0x26666200,0x26620999,0x98809999,0x00199999,0x33333310,0x99998813,
    0x26662199,0x99999999,0xffff9099,0x0effc81b,0x33333331,0x13333333,
    0x4cccccc4,0x19800009,0x9883b800,0x01999999,0x80028000,0x7ff64c08,
    0xffc8000f,0x3fae23df,0x000bcfff,0x7dfffd73,0x7fffdc43,0xffeb981c,
    0x2dffffff,0xfffeb980,0x7fe541be,0xd730bdff,0xffffffff,0x7fd4bfff,
    0xd711b605,0xffffffff,0x5cc5ffff,0xfffffffe,0x9801bdff,0x7d4003fd,
    0xfffeb986,0x1deffeff,0x003ea000,0xf881ff88,0x7c4004ff,0x7ffc04ff,
    0x7ffc0002,0x0037fa00,0xeb887ffc,0xff000cff,0x5ffa801f,0xa8837fc0,
    0xd037ec5f,0x203ff405,0x3fff02fa,0x6fff5cc1,0x3ffed980,0x81bfe200,
    0xff707ff8,0x7fb00019,0x81ffd400,0x2000fffe,0x7403fffb,0x740000ff,
    0x00fea07f,0x3f60ffd0,0x0ffd004f,0xe809ff30,0x2234c06f,0x407981ff,
    0x03b807fd,0xffc80ffd,0x07ff100f,0x2037f6c0,0x3fe207fe,0x37fcc006,
    0x74033200,0x3e004ffd,0x7ec02ffd,0x7fd80007,0xb0007f30,0x1ffea0ff,
    0x4403fec0,0x37ec03ff,0x42fec2c0,0x03fe404d,0x07fd81c4,0xd00effb8,
    0x2f6e007f,0x03fec06f,0xc8007fee,0x00001fff,0x003ffaba,0x00bfebaa,
    0xb0000ff9,0x007f30ff,0xff81ff60,0x07fd801f,0x6c03ff88,0xff30006f,
    0x32007c43,0x7ec0007f,0x09ffd007,0x3e600ffa,0x7ec06fb8,0x027fcc07,
    0x05ffaf88,0x3eaba000,0xfabe803f,0x03fe402f,0x263fec00,0x3f60003f,
    0x003ffa07,0x3e201ff6,0x037ec03f,0x2e5fd801,0x407fc805,0x803fec01,
    0x7fd07ff9,0x1bee5d00,0xfa80ffb0,0x36d7004f,0xd00000ff,0xf501bfa5,
    0xc805ff51,0xfd80007f,0x0000fe67,0x3fe20ffb,0x00ffb005,0xfd807ff1,
    0xf9805506,0xf9005d1f,0x7ec0580f,0x0bffa007,0x4b900ffa,0x3fec06fb,
    0x4007ff20,0x007ff32e,0x7fdcba00,0x7fd53602,0x003fe402,0x3fabfec0,
    0x07fd8000,0x36005ffb,0x3ff8807f,0x2d837ec0,0x079dfe80,0x2d40ff90,
    0xd801ff60,0x03fe83ff,0x06fb83a6,0xff703fec,0xfd1ea00d,0x8ba0000d,
    0x21f306ff,0x7e402ffa,0xffd80007,0xb00006fa,0x3ffea8ff,0x267ff600,
    0xfa999999,0x67fec03f,0x802feccc,0x9004effa,0xd99999ff,0x07fd80bf,
    0x3a13ff20,0xb83d103f,0x5ffec06f,0x3ffdcbaa,0xff713600,0x45d00005,
    0x24d82ffb,0x7e402ffa,0xffd80007,0x80005ffe,0xefffeffd,0x7fec000a,
    0xeeeeeeee,0x7ec03ffe,0x2feccccf,0x001ffd00,0x33333ff2,0x7ec05fdc,
    0x17fee007,0x42640ffa,0x7fec06fb,0xdfffeccd,0x881f1001,0xe80005ff,
    0xf117fe22,0x2017fd43,0xd80007fc,0x05ffe8ff,0xfb3fec00,0xffb0003f,
    0x807ff100,0x005906fd,0xfc8017ea,0xfb016607,0x27fe400f,0x83541ff4,
    0x3fec06fb,0x01dffd98,0x0ffc82e4,0x2e8065c0,0x8b90ffe4,0x7e402ffa,
    0x7fd80007,0x000bffd1,0xfff13fec,0x07fd8001,0x6c03ff88,0x4005306f,
    0x1ff2002f,0x07fd80b0,0x3a0bff60,0xb80fc43f,0x03fec06f,0xf803bff2,
    0xfcaaaaac,0x0ffea04f,0x57fe2174,0x17fd41f8,0x0001ff20,0xffe89ff6,
    0x8ffb0005,0x6c005ff9,0x3ff8807f,0x01037ec0,0xf9001a60,0x7ec0180f,
    0x07ffa007,0xfff70ffa,0xffffffff,0x00ffb07f,0x3ae07fff,0xeccccccc,
    0x0bfe607f,0x47fec174,0x02ffa86b,0x01003fe4,0xffd11ff6,0x0ffb000b,
    0x6c007ff9,0x3ff8807f,0x00037ec0,0x3f2001ec,0x3fec0007,0xd06ff980,
    0xffffb87f,0xffffffff,0xd807fd83,0x805d04ff,0x06202ffa,0xcff982e8,
    0x02ffa82f,0x09003fe4,0x3fa21ff6,0x3fec005f,0xb000ffe8,0x7ff100ff,
    0x0006fd80,0x320007cc,0x360e007f,0x3ffd007f,0x7000ffa0,0x07fd80df,
    0x7983ffd8,0x000dff00,0x6ffd8174,0xd805ff50,0x2077007f,0xffd107fd,
    0x1ff6001b,0x40077fc4,0xff8807fd,0x0037f403,0x00ba6b2a,0x5c01ff60,
    0xb807fd83,0x0ffa04ff,0xd80df700,0x0ffe807f,0xff9004d8,0x7c059305,
    0x207ff504,0x7ec03ffb,0x807cc00f,0x3fa207fe,0x7fe800ef,0x201bfea0,
    0xffa807fe,0x003ffc04,0x0013fffe,0x22007fec,0x407fe81f,0x7f404ffc,
    0x037dc004,0xff901ffa,0x2003f30b,0x7fd86ff9,0x7f40bf10,0x40bff900,
    0x999cfff8,0x106fcaa9,0x7dc03fff,0x3e202fff,0x3ff201ff,0x3fff100d,
    0x205ffb80,0x2000fff8,0x20003ffd,0xb9882ffe,0xafff886f,0x3dfd7311,
    0x800bff00,0x3fe206fb,0xfd5309af,0x003fa07f,0x321fffcc,0x7ffed46f,
    0x642540ce,0x24effffe,0xffffffc9,0x4fffffff,0x7ffffed4,0x7fffe42c,
    0x3f665fff,0x882dffff,0xb32efffe,0x859fffff,0xceffffeb,0xfffffb50,
    0x00020059,0x7ffff64c,0xffffffff,0x3ffff663,0x2bceffff,0x7fff6440,
    0x0df7003d,0xffffffb5,0x039ddfff,0x01bffff7,0x77ffff64,0x00000062,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xaba88000,0x20002000,0x40000008,0x80000131,0x26201109,
    0x00110001,0x0c4000cc,0x37fffee0,0xc877fe41,0x3f624ffe,0x7ffe41ff,
    0xdfffd52f,0x41fff4c5,0x0c402218,0x00088022,0x5c008831,0x7ffdc01d,
    0x24400dff,0x00025c00,0xfaa7e440,0x3220001c,0x441eefcd,0x01efedfc,
    0x0beedfc8,0x4ffdfd88,0xefddeb80,0x40dff101,0x509ff05c,0x7ff503ff,
    0xf306fe88,0xf94fc983,0x9afe4c5f,0x3aa1effe,0xf9300eff,0x03bffa69,
    0x5c03ffe6,0x6fffedff,0x5c0025c0,0x36600004,0x77e441cf,0x5c3d8002,
    0xf507e41f,0x877a201f,0x11f445fd,0x07640dfd,0x3ee05ff3,0x7f407a07,
    0xd01ff884,0x20ff509f,0x67fe5c5a,0xf955ffdb,0xff97d5bf,0x3ff6f6ed,
    0xacffcb85,0x985ffdce,0xbf883fff,0x413ffaa0,0x4b8004f9,0xbfea8000,
    0x5f7dc400,0xf80f9800,0xff11be61,0x3ea1f605,0x3e61762f,0xa81fc83f,
    0x2ff881ff,0x13f60598,0x7d407fe2,0x5b05ff07,0x5c53bf60,0x261f7ec0,
    0x7fd43eff,0xb89dfd00,0x4b9880ff,0xdff104b8,0x0009ff30,0x2e200097,
    0xd50002ef,0x27dc019f,0xd0bf30dc,0x207f507f,0x205f51ed,0x037cc5ff,
    0x1bf20dfd,0x84fd80b6,0x3fe01ff8,0x2237fc42,0x201bf206,0x09ff05fc,
    0x3f603ff1,0x201ff985,0x7f40381d,0x7ffffdc7,0x0097004f,0x001dfc98,
    0x03bfb300,0x0801bff3,0xfc83fe98,0xdddf9002,0xb8fffddd,0x03fee05f,
    0x06887fe6,0x7fc427ec,0xb717f201,0x901dc3ff,0x0bf9009f,0x17fc13f6,
    0x5ff04fc8,0x5c001a20,0x009f906f,0x3aa00970,0x000000cf,0xfe85df91,
    0x5c400cff,0xfe84fece,0x001fb002,0x3ea04fd8,0x5c9fd02f,0x4427ec03,
    0x3fe601ff,0xe93f63a0,0x2013f200,0x09fb05fc,0x27e40bfe,0x0cb82ff8,
    0x209f7000,0x333104fc,0x333b9333,0x3fea1333,0x10000002,0xfffc89fd,
    0x6c7f702f,0x004ff84f,0xff8003fd,0x40bfe606,0x801d0ffa,0x1ff884fd,
    0x54b9ff40,0xf90166ff,0x20bf9009,0x05ff04fd,0x17fc13f2,0xf9000066,
    0x5c13f203,0xffffffff,0x25ffffff,0x0002efc8,0x05bf9100,0x90ffff62,
    0xe84fd83f,0x07fd006f,0x2607fe80,0x2ffe00ff,0x84fd805a,0x7dc01ff8,
    0x657fc1d6,0x4027e402,0x09fb05fc,0x27e40bfe,0x00002ff8,0x13f204e8,
    0x10012e00,0x00017fd7,0x3019fb50,0x7e4dff30,0xfd84fd84,0x37e5200f,
    0x03ffb120,0xdf901fe6,0x0bf9005b,0xf8803ff1,0x3f7e45cf,0x64027e40,
    0x209fb05f,0x09f902ff,0x77770bfe,0xd7003777,0x8004fc80,0x36a0004b,
    0xeb8001cf,0x20ae00be,0x07fd0ffa,0x7ff709fb,0x27fdcae0,0x1ffd42a8,
    0x7c405fa8,0x8ff9006f,0xd802ffd8,0x27fcc1ff,0x64027e40,0x209fb05f,
    0x09f902ff,0xfffd0bfe,0xf8805fff,0x0027e401,0x4c00025c,0x64402dfc,
    0x0d7002df,0x4c6fd9fe,0xffe834ff,0x741d930b,0x0d711dff,0x076c1bfa,
    0x9801fec0,0xf9ebbdff,0x3ea00bef,0x9003fd05,0x0bf900bf,0x1ffc13f6,
    0x5ff05fd8,0xccccccb8,0x6401ec01,0x04b8004f,0x3bee2000,0x00e7ecc3,
    0x7f30fee0,0x6edf7fd4,0x7d42cffd,0x41ffefff,0xfffffff9,0x44bfd103,
    0x1f3001fb,0x77ffdc00,0x800cff88,0x200d702f,0x6fd807fe,0xff10bfd0,
    0x221bfa09,0x900003ff,0x013f200b,0x000012e0,0x0bfbaf54,0x9ffd7000,
    0xffc887b9,0x205ff52f,0x01efffe9,0x05ffffd3,0xdfdffd88,0x40014001,
    0x200140a8,0xb5006201,0xb509dfff,0x3ae7bfff,0xfd92dfff,0x3faa39ff,
    0xffd93dff,0x5400039f,0x017f2006,0x000012e0,0x20000210,0x02002a60,
    0x00d44002,0x98001a88,0x00000001,0x00000000,0x00000000,0x80000000,
    0x3f2000ea,0x025c00a6,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x2a000000,0x3ea0a00e,0x00002ccf,0x7ff54000,
    0x7fff71ff,0xffffff70,0xa803ffff,0x5c439800,0x77777730,0x77777777,
    0x7501e645,0x7fcc6003,0xffffffff,0x0004ffff,0x00000000,0x00000000,
    0x26bea000,0x06b99999,0x00007ffb,0xd801f700,0x8076c3ff,0x7fcc09eb,
    0x4027c405,0x557f63ff,0xcccccccc,0x23cccccc,0x774c0ffa,0x3500befe,
    0x26666662,0x99999999,0x00000000,0x00000000,0x50000000,0xffffffff,
    0x000407ff,0x05fd0000,0xf30ffe88,0xfe80dc03,0x01fdc806,0x6ff93fe2,
    0x2fb80000,0xbfd710e4,0x00016a15,0x00000000,0x00000000,0x98000000,
    0xffffffff,0x00000fff,0x32173000,0x3e20730f,0x1401e8cf,0x4c01ffc8,
    0x7fc06b8f,0x00017fa3,0x98122e40,0x002efffd,0x00000000,0x00000000,
    0x00000000,0x00000000,0xa8efe800,0x2e03ff77,0x50004eff,0x47d005ff,
    0xc8bfa02e,0x2000004f,0x26200225,0x00000001,0x00000000,0x00000000,
    0x00000000,0x26000000,0xffbdaefd,0x007fec04,0x4027fc40,0xc807d46a,
    0x754bee0f,0xeeeeeeee,0x104eeeee,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x1cfea880,0x009ff300,0xf100dfd0,0x1ee09b03,
    0x266623f3,0x99999999,0x00001999,0x00000000,0x00000000,0x00000000,
    0x00000000,0x98000000,0x02deedeb,0x001ffce8,0x32007ff2,0xb303f105,
    0x00000788,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xb37ff900,0x3201ffd3,0x5001ffb3,0x1f3005ff,0x38282dc0,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xb0000000,0x7f45ee7f,
    0x3fe25a81,0x827fc405,0x3a00fa0b,0x00000002,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x87f60800,0x7d40f980,0x81bfa02f,
    0x2600910c,0x00000003,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00ff4000,0x3ffa07d1,0x500ffc81,0x0000000f,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x40000000,0x3ffea039,
    0x2ffffe42,0xfffffff5,0x0000ffff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_32_usascii_x[95]={ 0,3,1,0,1,1,1,1,1,0,2,0,1,1,
2,0,1,3,0,1,0,1,1,1,1,1,2,2,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,
0,0,-1,1,0,1,0,1,0,0,0,0,0,0,0,2,0,1,0,-1,1,1,-1,0,0,1,1,0,0,0,
-3,0,0,0,0,0,-1,0,0,1,0,0,0,0,0,0,0,3,2,2,0, };
static signed short stb__times_32_usascii_y[95]={ 25,5,5,5,4,5,5,5,4,4,4,7,22,17,
22,4,5,5,5,5,5,5,5,5,5,5,11,11,8,12,8,5,4,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,30,5,11,4,11,4,11,4,11,4,4,
4,4,4,11,11,11,11,11,11,11,7,12,12,12,12,12,12,4,4,4,15, };
static unsigned short stb__times_32_usascii_w[95]={ 0,4,9,14,12,23,21,3,8,9,11,16,5,8,
4,9,13,8,14,12,14,12,13,13,12,13,4,5,16,16,16,11,25,21,18,18,20,17,15,20,21,9,12,22,
18,26,22,19,16,19,20,14,17,21,21,28,21,21,17,7,9,7,14,16,6,12,15,12,15,12,12,14,15,8,
9,15,8,23,15,14,15,15,10,10,9,15,15,21,15,15,13,9,2,9,16, };
static unsigned short stb__times_32_usascii_h[95]={ 0,21,9,21,24,21,21,9,28,28,13,17,8,3,
4,22,21,20,20,21,20,21,21,21,21,21,15,19,15,7,15,21,28,20,20,21,20,20,20,21,20,20,21,20,
20,20,21,21,20,26,20,21,20,21,21,21,20,20,20,26,22,26,11,2,6,15,22,15,22,15,21,21,21,21,
28,21,21,14,14,15,21,21,14,15,19,14,14,14,13,20,13,28,28,28,5, };
static unsigned short stb__times_32_usascii_s[95]={ 255,241,100,61,115,76,100,252,60,69,43,
26,247,247,249,138,122,184,1,136,193,149,162,176,190,203,249,249,43,110,60,
230,1,227,208,133,163,145,113,24,91,242,217,47,28,1,1,212,214,79,70,
118,231,96,74,45,192,152,174,107,128,99,85,151,127,88,148,101,164,114,48,
33,17,246,27,1,232,207,231,127,196,180,196,77,16,158,142,174,55,129,71,
50,47,37,134, };
static unsigned short stb__times_32_usascii_t[95]={ 1,1,111,30,1,30,30,30,1,1,111,
95,95,104,90,1,30,74,95,30,74,30,30,30,30,30,74,52,95,111,95,
30,1,74,74,52,74,74,74,52,74,30,30,74,74,74,52,1,52,1,74,
52,52,52,52,52,52,52,52,1,1,1,111,111,111,95,1,95,1,95,30,
30,30,1,1,30,1,95,95,95,1,1,95,95,95,95,95,95,111,74,111,
1,1,1,111, };
static unsigned short stb__times_32_usascii_a[95]={ 116,154,189,231,231,385,360,83,
154,154,231,261,116,154,116,128,231,231,231,231,231,231,231,231,
231,231,128,128,261,261,261,205,426,334,308,308,334,282,257,334,
334,154,180,334,282,411,334,334,257,334,308,257,282,334,334,436,
334,334,282,154,128,154,217,231,154,205,231,205,231,205,154,231,
231,128,128,231,128,360,231,231,231,231,154,180,128,231,231,334,
231,231,205,222,93,222,250, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_32_usascii_BITMAP_HEIGHT or STB_FONT_times_32_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_32_usascii(stb_fontchar font[STB_FONT_times_32_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_32_usascii_BITMAP_HEIGHT][STB_FONT_times_32_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_32_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_32_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_32_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_32_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_32_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_32_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_32_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_32_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_32_usascii_s[i] + stb__times_32_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_32_usascii_t[i] + stb__times_32_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_32_usascii_x[i];
            font[i].y0 = stb__times_32_usascii_y[i];
            font[i].x1 = stb__times_32_usascii_x[i] + stb__times_32_usascii_w[i];
            font[i].y1 = stb__times_32_usascii_y[i] + stb__times_32_usascii_h[i];
            font[i].advance_int = (stb__times_32_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_32_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_32_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_32_usascii_s[i] + stb__times_32_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_32_usascii_t[i] + stb__times_32_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_32_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_32_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_32_usascii_x[i] + stb__times_32_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_32_usascii_y[i] + stb__times_32_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_32_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_32_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_32_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_32_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_32_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_32_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_32_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_32_usascii_LINE_SPACING
#endif

