// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_bold_24_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_bold_24_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_bold_24_usascii_BITMAP_WIDTH         256
#define STB_FONT_consolas_bold_24_usascii_BITMAP_HEIGHT         92
#define STB_FONT_consolas_bold_24_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_consolas_bold_24_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_bold_24_usascii_NUM_CHARS             95

#define STB_FONT_consolas_bold_24_usascii_LINE_SPACING          16

static unsigned int stb__consolas_bold_24_usascii_pixels[]={
    0x0c000331,0x00000000,0x80110000,0x2002cec9,0x751003c8,0x0664c035,
    0x05990000,0x66401000,0x0035750c,0xc800554c,0x04c880bd,0x32200008,
    0x0039932c,0x3eeffb00,0x17e401df,0x53ff6200,0xd5fffffa,0x803fffff,
    0xdd100efb,0xffffb101,0x17e600bf,0x3ffffee0,0x04ff881e,0x05ff5000,
    0xd9101bf9,0x7c9ddfff,0xffffb1ff,0x7ffec407,0x3ffa00df,0x51ff40ff,
    0xdffd51ff,0x4ff98003,0x64007ff5,0x5dff60df,0xf102ffff,0x3e6005ff,
    0xfff54fff,0x3fffabff,0x3fe201ff,0x1ffe883f,0xfbabffd8,0x2fe4405f,
    0x3fffff60,0xffd81fff,0x6fe80000,0x544fffa8,0xffffffff,0x7ec7ffe4,
    0xfb06ffff,0x20bffddf,0x22fd8efa,0x67fd46fb,0x00ffffff,0x7d53fe60,
    0xfff5003f,0xa98bfec9,0x3fea07ff,0xbffd801f,0x335ff509,0x3fee6621,
    0x417ffc01,0xffb83ffe,0x5c07fd41,0x86ffffff,0xd98afffa,0x3ff985ff,
    0x1ffcc000,0xf127ffdc,0xff7339ff,0x9887ffc9,0x4c5fffc9,0x03ff63ff,
    0x8a7d4fee,0x7ffd41ff,0x04ffdacf,0x7d53fe60,0xfff7003f,0x7dc3fec9,
    0x1bff200f,0x3ea13fe0,0x0ffd401f,0x3ee0f260,0x03ff885f,0xfffe87fd,
    0xfe87ffff,0x81fff81f,0x6c0006fe,0x1dfd00ff,0x3e627fe4,0x403ffa4f,
    0x7fdc7ffa,0x2a03fee1,0x3f69f74f,0x22fffa83,0x26007ff8,0x47ff54ff,
    0xb077f400,0x03ff30ff,0x2203ffd8,0x1ffa83ff,0x000ffd40,0xb80eff98,
    0x4bf7106f,0x9ffaeffc,0x837fc43a,0xffb83ffc,0x9ff10002,0x0ffe8080,
    0xffd27fcc,0x50fffc01,0x83ff47ff,0xaafebff8,0x09ff506f,0xd9101ffb,
    0x2a9fffff,0xeffeaaff,0x0ffb0101,0xf8805ff3,0x0ffe207f,0xf5007fea,
    0x3fffe63f,0x3f22ffff,0x917ff01f,0x4df5fdff,0x40ff1ffe,0xff504ff9,
    0x00bff109,0x0007fee0,0x3fe61ffe,0xff01ffa4,0x4fffc41f,0x3f202ffd,
    0x01ff8cff,0xffb07ff5,0xfffffa83,0xbff54fff,0x01ffffff,0x3e61ff60,
    0x1ffd802f,0xf507ff10,0x1ffa803f,0xfffffff3,0x883ffc5f,0xffffc8ff,
    0x3ffa7f9e,0x3ea06f9c,0x09ff503f,0x20003ff2,0xf88006ff,0x24ff987f,
    0x6ccc47fe,0xfffb86ff,0x215003ff,0x3fea04fd,0x221ffd83,0xfb99cfff,
    0x9ffff54f,0x2009ffb5,0x09ff07fd,0x2609ff70,0x1ffa82ff,0xa88ffd40,
    0x2ffdaaaa,0x3ea0bff5,0xefcbff8e,0x3fff27f9,0x3fee05ff,0x20bff303,
    0x54004ff8,0x054402ff,0x3fea1ffe,0xffb1ff64,0xff303fff,0xf50001df,
    0x83ffa80d,0x27fe47fe,0x7fd53fe6,0x01ffe22f,0xefe83fec,0x837fcc01,
    0xffa80ffc,0x00ffd401,0x7fdcbff2,0xff5bf903,0xd1fe77f2,0x03bfffff,
    0x3ea09ff7,0x01ff604f,0xf880ffd0,0x87ffa1ff,0x3f64ffe8,0x0677fe47,
    0x97ffffcc,0x3e200ffb,0x1ffd401f,0xffd1bfe6,0xf54ff981,0x41ffb09f,
    0x1ff60dec,0x0177ff54,0x7ff44dff,0x03ff504f,0x6401ffa8,0x03ff92ff,
    0x6dbf33f6,0xfb87facf,0x544fffff,0x7ff704ff,0x801ffd40,0x7d403ff9,
    0x3bfee5ff,0x24fffea9,0x03fe46fd,0x3ffebffe,0x7ec07fb9,0x541ced8c,
    0xffa88cff,0x4c3ffc2f,0x07ff54ff,0x3fea3ffb,0xb81ff63f,0x3fa02fff,
    0x80fffe67,0x7d401ffa,0x97fe401f,0x2ff607fd,0xf57fd5fc,0x7ffff40d,
    0x41ffe64f,0x7f402ffd,0x01ff9006,0x227fff88,0xfeffffff,0xf91bf24f,
    0xa9ffd40f,0x207fdeff,0xfffe8efa,0x3fffea0f,0x7c44ffff,0x54ff987f,
    0x3ffb07ff,0xfd93ffee,0x159ffb07,0xb713ff40,0x3fea0dff,0x00ffd401,
    0x7fecbff2,0xbfb5fd01,0x817eeffa,0x46ffd9ff,0x7fcc2ffe,0x01ffb806,
    0xa802ffc4,0x7ff446ff,0x224ff9cf,0x900cc409,0x7ffdc3ff,0x53ff104f,
    0xfa8ff2bf,0x02efffff,0x9ff50fff,0x3fa0ffea,0xd87ffa27,0x04ff887f,
    0xf706ff88,0x03ff501f,0x6401ffa8,0x05ff92ff,0x277f2ffa,0x103feaff,
    0x71ffe2ff,0xff759fff,0xbff1007f,0x001ffb80,0x26209ff1,0x5449ff30,
    0xf700d440,0x1fffd85f,0x53ee9f90,0x2ffea5fa,0x1ffe8009,0x7d53ffa2,
    0x437fcc3f,0x4c3fec09,0xffa802ff,0x505ff305,0xffa803ff,0xb97fe401,
    0x77fb04ff,0xffffffff,0x26df3041,0xfffd86ff,0x2004ffff,0x3fe00ffc,
    0x03ff2006,0xfd27fcc0,0x817ff41f,0xf932eff9,0x1ff507ff,0x52fdd7ea,
    0x7dc007ff,0xfffea9ef,0x5119ff54,0x36005fff,0x02ff987f,0xf103ffb8,
    0x03ff507f,0x6401ffa8,0x0dff32ff,0x3ffe33f2,0x77c3fffb,0xfffcefdd,
    0xdfffd703,0x4ff98005,0x9805ff50,0x2002fffe,0xfff14ff9,0x813ffe25,
    0xfffffffd,0x3fa21fff,0x17feffc2,0x44007ff5,0xfdffffff,0xfffff54f,
    0x6c009fff,0x02ff987f,0xf100ffd8,0x03ff507f,0x6401ffa8,0x03ffa2ff,
    0x88545bee,0xfffff80a,0xe804ffff,0x3f60007f,0x500ffd07,0x980019df,
    0x83bfa4ff,0x7dc01ffd,0xff9affff,0xd50bf90f,0x3ffa87ff,0x7fff4400,
    0x3f669fd4,0x002effff,0x7fcc3fec,0x027fd402,0xff507ff1,0x01ffa803,
    0xff717fe4,0x003ff30b,0xdfffecb8,0x9ff9000c,0x7d4002e2,0x027fcc2f,
    0x66440000,0x004c04c2,0x00001310,0x00e64c02,0x20009880,0x3f600009,
    0x201ffa87,0x7c00fff8,0x01ffa83f,0x3600ffd4,0x1fff41ff,0xd0002ff4,
    0xff30003f,0x400dffff,0x07fe46fe,0x00000000,0x00000000,0x00000000,
    0xfd800000,0x200ffc87,0xff802ffe,0x401ffa86,0xf1011ffa,0x3fff30ff,
    0x99adffa8,0x07fc00fb,0xffffa800,0x332a004f,0x0000f320,0x00000000,
    0x00000000,0x00000000,0x937fd800,0x7ec0bffb,0xdff7005f,0x337fea59,
    0xffb9973c,0x3f2afb23,0xfff704ff,0xfffffb81,0x1fe200ff,0x02aa6000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xf77fd800,0x3e201dff,
    0x7fec005f,0xfffff54f,0x3fffffab,0xffffff91,0x81ffb80b,0x01beedc9,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x7937fd80,
    0x00091005,0x664cb2e6,0x99973ccc,0x3bb26199,0x057002de,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xffb00000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xc8000000,0x0000005e,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x40040000,
    0x81cccccb,0x88001cc9,0x13ff203a,0xcc8affcc,0x65c40002,0x75100cde,
    0x40aaa035,0x2aaa0aa9,0x802aaaaa,0x2a602a98,0x2a6002bc,0x2ea209ac,
    0xaaa80abc,0x881aaaaa,0x200abcba,0x2001bba8,0x4c1acba8,0xaaaaaaaa,
    0x00efb82a,0x7fffff54,0x3fffa3ff,0x3ffa82ff,0x037fc400,0x3f20fff1,
    0x009ff32f,0x7ffffcc0,0xffffc82f,0x837fc1ef,0x3ffa0ffd,0x307fffff,
    0x10fffff9,0x5ffffffb,0x7ffffe40,0x3ffffe5f,0x7fff44ff,0x3624ffff,
    0x06ffffff,0x1dfffff7,0x7fffec40,0x3fff27ff,0x86ffffff,0x3ea04fff,
    0xffffffff,0x3ffb32e3,0x003ffa82,0x36037fc4,0x27ff82ff,0x10004ff9,
    0x3b97bfff,0xffffffd8,0x41bfe1ff,0x3ffa0ffd,0xb87fffff,0x87ffffff,
    0xffedeffe,0x7fff441f,0x3fe5ffff,0x24ffffef,0xfffffffe,0x3fffffa4,
    0xfffc86ff,0xa80ffffe,0xffffffff,0x3fffff27,0xfe86ffff,0x43bfe03f,
    0x7009eff9,0x7ff505ff,0x06ff8800,0x3ea2ffd4,0x013fe64f,0x2027fd40,
    0xd98aeffa,0x41bfe5ff,0x3bfa0ffd,0x542aaaaa,0x1999cfff,0x3ee27fcc,
    0x5fffe44f,0x20549730,0x7d407ffb,0x83dff54f,0x877fcc28,0x7c43ffd8,
    0xb530aeff,0x4cccccc4,0x3c984fff,0xf90bfe60,0x17fdc01f,0x2011ffd4,
    0xfffffff9,0x7ffc3fff,0xf987ff60,0xff70004f,0x41ffe805,0xdff0fff8,
    0xfe83ff60,0x03ffd005,0xf885ff70,0x07ffe64f,0x407ff800,0x7ff94ffa,
    0x107ff600,0x5ffc8fff,0x37fe4000,0x87ff3000,0x7fdc07fc,0xeaaffa82,
    0x3fe60eff,0xffffffff,0xf897fe43,0x227fcc6f,0xf900effc,0x37fc403f,
    0xdff3ffc8,0xfe83ff60,0x04ffa805,0x641dff50,0x13ff22ff,0x80bff000,
    0xdff94ffa,0x50dff001,0x7ffc3fff,0x3fe60001,0x3ffffa1f,0x3dff102f,
    0xf701bfe6,0xfbff505f,0x544dffff,0xaaaeffba,0xab7fcc0a,0x27fcc3ff,
    0x9981fff5,0x999affd9,0x5413fe61,0x20dff4ff,0x3bfa0ffd,0xffc80aac,
    0xd00abb9a,0xbff95dff,0x0002ffd8,0xa805ffb3,0xffff54ff,0x93fe2019,
    0x12ffffd8,0xe8000dff,0x7fff43ff,0x3fee02ff,0x401fffff,0xffa82ffb,
    0x2ffebcff,0xb006ff88,0x81ffb1ff,0xfff34ff9,0xffffff03,0x7dcfffff,
    0x29ff503f,0x1ffb06ff,0x7ffffff4,0x3ffff60d,0xe884ffff,0xe84fffff,
    0x3ee001ff,0xa801ffff,0x3fff64ff,0x7fcc1dff,0xffdffd34,0xe997fe67,
    0xf900eeee,0xfb5550df,0x3bfe205f,0xb800ceff,0xfffa82ff,0x220ffee2,
    0xff5006ff,0xff309ff9,0x205fff19,0xffffffff,0x0ffee7ff,0x6ffaffcc,
    0x76c1ffb0,0x0effffee,0xffdffffb,0xfff507ff,0xfff83dff,0x3ffee000,
    0x7d402eff,0x7fffdc4f,0x2ffea4ff,0xffaafffb,0x7d49ff53,0xf980ffff,
    0x7fdc00ff,0x000ff702,0x7d417fdc,0x427fcc4f,0x3e006ff8,0xf981ffff,
    0x002ffecf,0x7dc03ff9,0x29ff504f,0x1ffb06ff,0x9fffd440,0x7fd43ffe,
    0x7df7fdc7,0x3ffa0fff,0x2a662001,0x2a02fffc,0xffb504ff,0x3ffe65ff,
    0x5ff50eff,0xcc997fea,0xffe80ffe,0x02ffb803,0x33359ff7,0x20bfee00,
    0x7fcc3ffa,0x006ff884,0x4c1bfff2,0x005fffff,0xfa807ff2,0x27ff704f,
    0x1ffb06ff,0x369ff900,0x0ffe81ff,0x7ec4bff3,0x00bff65f,0x40dff500,
    0x74c04ffa,0xffff15ff,0xf11ffb89,0x03ff60df,0x2e00bff7,0xffd102ff,
    0x01bfffff,0x7d417fdc,0x427fcc3f,0x26006ff8,0xff302fff,0x2003fffb,
    0x3e601ffc,0x25ffb07f,0x0ffd07fe,0x7e57fea0,0x91ffd82f,0x6ff883ff,
    0x00017ff2,0x7d40dff1,0x6ffa804f,0x3f60bffe,0x207ffe0f,0x3fe60ffd,
    0x5ff7000f,0x3bbff620,0x2e06ffff,0x3ffa82ff,0xff827fcc,0x1bfe6007,
    0xffacff98,0x1ffc800f,0x2617ff40,0x07ff66ff,0x3a00dff1,0x0bff73ff,
    0x0ffecfff,0xfff337fc,0x3ea00207,0x5ff9015f,0x6cbff500,0x2ffcc3ff,
    0xfb037ff2,0x01fff41f,0x3605ff70,0x7ff441ff,0x505ff701,0x4ff987ff,
    0x2619fff0,0x02ffe880,0x7fe53fe6,0x01ffc806,0x5d67ffd4,0x3fee2fff,
    0x2ffd99ae,0x36e666a2,0x3ffe0fff,0x25ffd99c,0xf911dffc,0xdfffd89f,
    0x3515ebab,0x5fff9333,0x3fee66fe,0x5557bd0f,0x7cc5fff9,0xfffa8bff,
    0x677ffc41,0xf70ffeaa,0x999999ff,0x205ff709,0x3ffb06ff,0x5ffe4ccc,
    0x87ff5099,0xff704ff9,0x2e67ffff,0x4c04ffec,0x17ffa4ff,0xb003ff90,
    0x9fffffff,0xffffffd0,0xffff88bf,0x7d41ffff,0x0effffff,0x3fffffe2,
    0x7ec40eff,0x55ffffff,0xffffffff,0x7fffffc9,0x3ffffa3f,0xfc85ffff,
    0x03ffffff,0xfffffff5,0x3fff61ff,0x37ffffff,0x337ff933,0x44e7ffc1,
    0x3e66ffb9,0xffffffff,0xf987ff56,0x3fff204f,0xffff52ff,0x49ff300b,
    0x3203fff8,0xfd7001ff,0x7e405dff,0xf883ffff,0x00bfffff,0x09ffffd3,
    0x3fffff22,0x3ffae00c,0xfff52dff,0xfc83bfff,0x7e42efff,0x02efffff,
    0x0bbfffaa,0xfffffb10,0x7fffec7d,0xf9ffffff,0xffffffff,0x3ffffea6,
    0x3e60efff,0xffffffff,0xf987ff56,0x4199804f,0x3002cef9,0xfffa89ff,
    0x003ff902,0x22000988,0x01998009,0x26000980,0x00880009,0x22003331,
    0x01998801,0x88000c40,0xf9800019,0xffffffff,0x77776446,0x0000002c,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x02aaa000,0x2aaa2aa8,0xa98aaa00,0xa9954c02,
    0x4355502a,0x009aaaa8,0x15445510,0x2a206aaa,0x106aa60a,0x0554c555,
    0x2a02aa60,0x555530aa,0xaaaa8033,0x0aaaaaaa,0x8aaa0555,0xaaaaaaa8,
    0x555550aa,0x2aa15555,0x0aaaaaaa,0x00355555,0x4c0d6544,0xaaaaaaaa,
    0x5c2eee2a,0x9ff505ff,0xf881ffec,0x901ff27f,0x07ffe2bf,0x7d41fff1,
    0x0cffffff,0x6fa9bea0,0x7dc3fff4,0x917ff60f,0x0ffecfff,0xf70ffee0,
    0x7fffdcdf,0xff80cfff,0xffffffff,0x360ffd1f,0xffff30ff,0x3a7fffff,
    0xffffffff,0xffffffd1,0x3fffe5ff,0xd302efff,0xd8bfffff,0xffffffff,
    0xf83ffe6f,0x0ffe80ff,0x7d417fee,0xb01fee4f,0x22ffe4bf,0x7fd44ffc,
    0x0fffffff,0x2fdcbf70,0xf70ffffa,0x07fff41f,0x7fecffff,0x11ffdc01,
    0x7fdc3fff,0x85ffffff,0xffffffff,0x0ffd1fff,0x7fcc3ff6,0x3fffffff,
    0xfffffffd,0x3ffffa3f,0xfff2ffff,0x8bffffff,0xfffffff9,0x3ffff64f,
    0x3a6fffff,0x227fdc7f,0x7fc44ffa,0x5c5ff907,0x127ec07f,0x3fe23fff,
    0x89ffd40f,0xf905ffea,0x3fa2fe4b,0x07fdc6ff,0x3e65fffd,0x07ff67ff,
    0x7f47ff70,0x997fdc3f,0x7401fffb,0x41ffa07f,0xffd00ffd,0x2667ffa0,
    0x27ffa199,0xff099999,0x3fff262d,0xfb857ec2,0x555530ff,0x74bffb55,
    0x20fff87f,0xffe80ffe,0x7d47ff82,0x2e27ec07,0x07ffb5ff,0xff887ff5,
    0x677f65c7,0xfd2cefec,0x7fdc5fff,0x657fbfa0,0xffb0ffdf,0x73ffb803,
    0x5ff70bff,0x7403ffd8,0x41ffa07f,0xffd00ffd,0xd003ffa0,0x6ff801ff,
    0x0446ffb8,0x7400fff4,0x21ff61ff,0x9ff54ffb,0xf313fee0,0x30ffa8bf,
    0x7427ec59,0x507ffbff,0x1ffd07ff,0x7ffffff4,0xbfd5ffff,0x07fdcdff,
    0x3faff7ff,0x3ffb0ffb,0xf8bffb80,0x2ffb80ff,0x3a01ffe4,0x41ffa07f,
    0xffd00ffd,0xd003ffa0,0x6ff801ff,0xb003fff0,0xffa803ff,0xff837ec5,
    0x300ffe8f,0x3ffb8dff,0x7fc87fcc,0x3fea0ffa,0xff503fff,0xcb8fff07,
    0xdffccdff,0xff9bfd2c,0xff83fee3,0xf9efbff9,0x803ffb0f,0x2ffdbffb,
    0x7445ff70,0x3ff401ff,0x3333ffd0,0x3a01ffd3,0x01ffd07f,0x7c00ffe8,
    0x05ffb06f,0xe801fff0,0x80cc41ff,0x04ffdffb,0xffd07ffc,0xfd0ff981,
    0x740ffa3f,0x3ea06fff,0x837fd43f,0xd07fe1ff,0x2ebff1bf,0x327fe0ff,
    0x1ff8cfff,0xfb803ffb,0x2e05ffef,0xfffdcdff,0x207fe803,0xfffffffe,
    0xffd00fff,0x3333ffa0,0x3fffa3cc,0xff0fffff,0x00fff20d,0xfa80bff7,
    0xfff0006f,0xffc801ff,0xf30dff13,0x27fff33f,0xfffb02fe,0x56ffd40b,
    0x882fffca,0x83ff10ff,0x71ffb5fe,0x27fe21ff,0xff89fffa,0xb803ffb1,
    0x204fffff,0xdffffffb,0x40ffd001,0xfffffffe,0xffd00fff,0x3fffffa0,
    0x3fffa6ff,0xff0fffff,0x80ffee0d,0x7400fff9,0x009882ff,0x2013ffee,
    0x7ff55ffa,0xdf73ff10,0x260bfedf,0x501fffff,0xffffffff,0x9ffa9887,
    0x3a19ffa9,0xf79ff35f,0x223fe21f,0x25ff17ff,0x7dc01ffd,0x702fffbf,
    0x3fffdbff,0xe81ffa00,0xeaaaaaff,0x0ffd00ff,0x3bbbbffa,0x2afffa5e,
    0x1bfe2aaa,0xf9817fe4,0x7fd402ff,0x01fff886,0x7c003ffe,0x103ff97f,
    0xff5fd3ff,0xffd03ff1,0x3ea0dffb,0x81deffff,0xfffffffb,0x97fa7fff,
    0x30ffbffe,0xf93f61ff,0x803ffb2f,0xfffabffb,0xf52ffb80,0x1ffa00df,
    0xffb07fe8,0x741ffa01,0x7ff400ff,0xd837fc00,0xfff881ff,0x82ffe802,
    0x3a05fffc,0x3ff6007f,0x3fe06fe9,0xff7fd6fb,0xfd6ffa83,0x07ff507f,
    0x3ffffee0,0x3a7fffff,0x3fbfea5f,0x261ff30f,0x7ecffe0a,0x9ffdc01f,
    0xffb85ffd,0x200fff62,0x1ffa07fe,0xfe807fec,0x801ffd07,0x7fc00ffe,
    0x40fff986,0x9802fff8,0xfff906ff,0x003ff40b,0x09ffbff5,0xfba7effc,
    0x7ff40ffd,0xa81fff52,0x7dc003ff,0x3fa17ee5,0x87ffff45,0x3fe00ff9,
    0xb803ffb3,0x5fff13ff,0x3e62ffb8,0x07fe806f,0x7fec1ffa,0x3a0ffd00,
    0x7ff400ff,0x2237fc00,0x7fc43ffd,0x5ffb002f,0x807ffa20,0x3e2007fe,
    0x3e02ffff,0xfff31fff,0x237fdc1f,0x7fd44ffe,0x927e4003,0xb8bfd0bf,
    0xff50ffff,0xffb3ff80,0x23555557,0x3fee3ffb,0xd0bfee0f,0x7fe805ff,
    0x7ec1ffa0,0xff55510f,0x3fa1557f,0x5fff400f,0xff0aaaaa,0xdfff975f,
    0xccefff88,0x7fcc3ccc,0x74009806,0x7ff4007f,0x3fff407f,0x7c43fffa,
    0x7ffd42ff,0x000ffea1,0x427ec9fb,0x7ffc45fe,0xf80ff50f,0xfffffb4f,
    0x3feebfff,0xf72fff43,0x06ffb85f,0xffd03ff4,0x7cc3ff60,0xffffffff,
    0xe801ffd3,0xffffffff,0xfffffff2,0xfffb81bf,0x46ffffff,0x00003ffd,
    0xfb800ffd,0x7ff405ff,0xf93ffe44,0x97ffa0df,0x74003ffa,0x3a0ffa3f,
    0x0fffc85f,0x4fe80ff7,0xfffffffb,0x30ffeebf,0x3fee5fff,0x202fff82,
    0x1ffa07fe,0xff987fec,0x3fffffff,0xfe801ffd,0x2fffffff,0x59bdffff,
    0x3ffffee0,0x3e66ffff,0x0000007f,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x554c0000,0x10009aaa,
    0x44003555,0x2a6001aa,0x654c00aa,0x0000001a,0x00000080,0x00c40008,
    0x04080030,0x00800100,0xff987ff5,0x7fe40004,0x3abff304,0x83fe406f,
    0xfffb80a8,0x401dffff,0x7006fffc,0x22009fff,0xd302ffff,0x019fffff,
    0x00b512e0,0x3efffd98,0x7fff6c40,0x7ff6440e,0xfffb303e,0xffda87ff,
    0x3e60cfff,0xdf95ff9e,0x7ec6ff45,0x47fd43ff,0x2a0effea,0x27fcc3ff,
    0x7c40ffb0,0x25ff907f,0x37e407fd,0x2e077fcc,0xffffffff,0x3fffe00f,
    0x3ffee00f,0xff9004ff,0xfff105ff,0x00bfffdf,0x3fea9ffb,0xfffb800e,
    0xf706ffff,0x43ffffff,0xffffffe8,0x7ffffd45,0x7ffec4ff,0x3e65ffff,
    0xffcfffee,0x3fbbfa7f,0x3ea3ffff,0x6fffffcf,0xff30ffea,0x203fec09,
    0x7ff82ffd,0xfd803ff2,0x44fffb85,0x3fa62ffb,0xffff303f,0x3ffee07f,
    0xf9804ffe,0xfd82ffef,0x07ffe24f,0x88f7ff44,0x2201effd,0xffdacfff,
    0x6fffcc3f,0x3f61ecab,0x2ffd88bf,0x8330bffe,0xffd309bc,0x3abffe65,
    0xd1ff9dff,0xff75dfff,0x67fffd4d,0xff52ffeb,0x204ff987,0x7fd407fd,
    0xf527fd45,0xfe8f2a3f,0x45fff984,0x7fd42ffb,0xff5ff704,0x2a7be20b,
    0xefe804ff,0x7ff82ffb,0xe984ffb8,0xffc80dff,0x87ffb02f,0x7ff47ffa,
    0x227fcc03,0xfff15ff8,0x7fd40001,0x3f29ff33,0x3fa7ff1f,0xf53ff46f,
    0x9ffdc5ff,0x7fcc3ffa,0x201ff604,0x3ff60fff,0x7f4bfe61,0x2e07ff0f,
    0x17fdc5ff,0x7f40ffee,0x50c0fff6,0xffb809ff,0x7c42ffaa,0x45ff986f,
    0x5c04fffa,0x7fe83fff,0x3e21fff0,0xaffb806f,0x26ff9999,0x000befff,
    0x27ff9531,0x4df90ff9,0x81ffd3ff,0x9ff50eec,0xff54ff98,0x324ff987,
    0xccffeccc,0x97fe40cc,0x7fc46ff8,0xff3fff8b,0x70ffe605,0x7ff4c5ff,
    0xfb4ff880,0x9ff5005f,0xfaaffc40,0x41fff82f,0x3fee6ff8,0xfff5003f,
    0xfb06ff89,0x017fea3f,0x3ffffff6,0x3fea7fff,0xb882efff,0x3fffffff,
    0x9bf21ff3,0x00ffd3ff,0xff30ffea,0xf30ffea9,0x3fffe29f,0x1fffffff,
    0xffab7fcc,0xffbcff83,0x881ff8ef,0x7fdc0ffd,0x01efffff,0x3fea5ff5,
    0x04ffa804,0x7fd43ff6,0x9adffe82,0xff77ffda,0xff98005f,0x20fff15f,
    0xbff51ffc,0xdddffb00,0xd98bdddd,0x745fffff,0xffeeefff,0x3f21ff33,
    0x3ff4ffe6,0x4c3ffa80,0x87ff54ff,0xddd14ffa,0xddddfffd,0xfb1ffb03,
    0xfbbfd01f,0xa8ff7ff9,0xfb81fffe,0xdfffffff,0xf10ffd80,0x9ff500df,
    0xfa8ffea0,0xffff982f,0x366fffff,0xd1001fff,0x7ffc1dff,0xf30ffe81,
    0x3ff900df,0x3ff6a000,0xa8bff71f,0x21ff33ff,0x74ffe6fc,0x7ff5007f,
    0xff54ff98,0x027ff449,0x3ea00ffb,0xfb04ffcf,0xfdff1fff,0x00cefb8f,
    0xd7537ff7,0x8dff0bff,0x7d400ffe,0xa8bfd04f,0xffd302ff,0xb8bffbff,
    0x7cc02fff,0x3ffe85ff,0xff137fcc,0x4ffb807f,0x97fec000,0x7fe42ffc,
    0x3f21ff33,0x3ff4ffe6,0x4c3ffa80,0x5fff34ff,0x409fffd5,0x3fe007fd,
    0xff901fff,0x17fff2bf,0x217fdc00,0x3e60fff9,0xffdaaadf,0x427fd403,
    0xdcccdffb,0x2602cdff,0xf509ff51,0x3fea09ff,0xbfff504f,0xc85fff53,
    0xdbaacfff,0x219fff11,0x83911a98,0xff90fff9,0x7fff911b,0x37e43fe6,
    0x01ffa7ff,0x3e61ffd4,0x3ffffa4f,0x3604ffdf,0x3ff2007f,0x3ffee06f,
    0x009fff33,0x3a0bfee0,0x3fff21ff,0x05ffffff,0x7dc27fd4,0xffffffff,
    0xff9005ff,0x37ffe605,0x00bfff20,0xfffffffb,0x3ffffa0b,0x3fea1fff,
    0x12ffffff,0xffffffff,0x7ffffccb,0xff33ffef,0x3ff9bf21,0x3ea00ffd,
    0x127fcc3f,0x3fe9fffd,0x801ff604,0x2603fff9,0x3ffe0fff,0x5ff70003,
    0x3a0fff98,0xffffffff,0x3fea00ff,0xeeeeea84,0x04eeffee,0x4407ffa8,
    0xfff74ffe,0x3ffee003,0x7f5c03ef,0x74c0dfff,0x11efffff,0x7dfffffd,
    0x19ffff50,0x43fe67ff,0x74ffe6fc,0x7ff5007f,0x9884ff98,0x0154c000,
    0x00000000,0xaacffb80,0x3e25fffb,0x45ffb04f,0xeffdccc8,0xffa804cc,
    0xecbaa882,0xd8801fff,0x40007645,0x09800098,0x44033300,0x99800999,
    0x00000000,0x00000000,0x00000000,0xfff70000,0x41dfffff,0xff702ffb,
    0x7ffffcc9,0xa807ffff,0xfff982ff,0x0002ffff,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x3fee0000,0xd82defff,0x9ffe207f,
    0xfffffff9,0xffa807ff,0xdefff982,0x40000003,0xfffffff8,0x5fff12ff,
    0x2a05ffd0,0x06a6003c,0xeeeeeea8,0x00103eee,0x5dccaee2,0x202eee61,
    0xbbbbbbbb,0x320bbbbb,0x00cccccc,0x00000000,0x00000000,0x00000000,
    0x80000000,0xfffffff8,0x3ffea2ff,0xb813fee0,0xfff1005f,0x3fffee01,
    0x224fffff,0x54c1dffd,0x3ee9ff31,0x077fdc3f,0x3ffffffe,0x20ffffff,
    0x1fffffff,0x00000000,0x00000000,0x00000000,0x00000000,0xfd999990,
    0x5ffc81ff,0x2770dff3,0x640b54fb,0x55105fff,0x35555555,0x0fffffec,
    0x53fe67fd,0xff982ffa,0x3bbbba0e,0xeeeeeeee,0x3bbbbba0,0x0000001e,
    0x00000000,0x00000000,0x00000000,0xfff30000,0xd7ffd103,0xdff883ff,
    0x82ffccfb,0x02ff9ff9,0xbcff8800,0x2ffbbfff,0x3fea7ff1,0x00577102,
    0x00000000,0x00000000,0x00000000,0x00000000,0x44000000,0x3e603ffe,
    0xd504ffff,0x17ffffff,0x1bee7fd0,0x26666662,0x1ff50999,0x9fffffe6,
    0x3ff33ff8,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x05ffd800,0x806fffb8,0x500dfffc,0x5c3ff8df,0xffffffff,0xe885514f,
    0x97fc1eff,0x00001ff9,0x00000000,0x00000000,0x00000000,0x00000000,
    0x2e000000,0xfb800eff,0x3faa06ff,0x20bfffff,0x7fd42ff8,0x3ffffee0,
    0x1004ffff,0x19826601,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x07ffe600,0x3ffffe60,0xfbdff884,0x3f22ffdc,0x000bfd06,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x200bffe2,0xfffaffe8,0x29f53c82,0x8804cc5a,0x00000019,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xffb00000,0x8399999f,
    0xfff53ffd,0x002fdc01,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xff980000,0x3fffffff,0xffb1bfee,0x001e540b,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xff980000,0x3fffffff,0xf883fff3,0x000003ff,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_bold_24_usascii_x[95]={ 0,4,2,0,1,0,0,4,3,2,1,0,2,2,
4,0,0,1,1,1,0,1,1,1,1,0,4,2,1,1,2,3,0,0,1,0,1,2,2,0,1,1,2,1,
2,0,1,0,1,0,1,1,0,1,0,0,0,0,1,3,1,3,0,0,0,1,1,1,0,1,0,0,1,1,
1,1,1,0,1,0,1,0,2,1,0,1,0,0,0,0,1,1,5,2,0, };
static signed short stb__consolas_bold_24_usascii_y[95]={ 17,0,0,1,-1,0,0,0,-1,-1,0,4,12,9,
12,0,1,1,1,1,1,1,1,1,1,1,4,4,3,7,3,0,0,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,0,-1,1,19,0,4,0,4,0,4,0,4,0,-1,
-1,0,0,4,4,4,4,4,4,4,1,5,5,5,5,5,5,-1,-3,-1,7, };
static unsigned short stb__consolas_bold_24_usascii_w[95]={ 0,5,9,13,12,14,14,5,8,9,11,13,7,9,
5,12,13,11,11,11,13,11,12,11,11,12,5,7,10,11,10,9,14,14,12,12,12,10,10,13,12,11,9,12,
10,13,12,13,12,14,12,11,13,12,14,13,14,14,11,7,12,7,13,14,9,11,12,11,12,11,13,13,11,11,
10,12,11,13,11,13,12,12,11,11,12,11,13,14,13,13,11,10,3,10,13, };
static unsigned short stb__consolas_bold_24_usascii_h[95]={ 0,18,7,16,21,18,18,7,23,23,11,13,10,3,
6,20,17,16,16,17,16,17,17,16,17,16,14,18,15,8,15,18,22,16,16,17,16,16,16,17,16,16,17,16,
16,16,16,17,16,21,16,17,16,17,16,16,16,16,16,23,20,23,9,3,6,14,18,14,18,14,17,18,17,18,
23,17,17,13,13,14,18,18,13,14,17,13,12,12,12,17,12,23,25,23,7, };
static unsigned short stb__consolas_bold_24_usascii_s[95]={ 254,163,168,73,88,194,179,249,64,16,116,
202,245,203,249,129,216,29,225,182,41,132,144,237,157,55,248,142,68,142,79,
169,73,14,1,169,212,201,190,230,165,178,194,125,114,100,87,105,60,101,138,
204,151,119,16,31,45,1,244,37,116,45,128,188,178,140,235,104,222,116,91,
13,39,1,53,78,27,152,178,90,209,150,166,128,51,190,216,230,102,64,90,
26,1,5,154, };
static unsigned short stb__consolas_bold_24_usascii_t[95]={ 1,1,78,46,1,1,1,46,1,1,78,
63,63,78,54,1,27,63,46,27,63,27,27,46,27,63,1,1,63,78,63,
1,1,63,63,27,46,46,46,27,46,46,27,46,46,46,46,27,46,1,46,
27,46,27,46,46,46,46,27,1,1,1,78,78,78,63,1,63,1,63,27,
27,27,27,1,27,27,63,63,63,1,1,63,63,27,63,63,63,78,27,78,
1,1,1,78, };
static unsigned short stb__consolas_bold_24_usascii_a[95]={ 211,211,211,211,211,211,211,211,
211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,
211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,
211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,
211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,
211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,
211,211,211,211,211,211,211, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_bold_24_usascii_BITMAP_HEIGHT or STB_FONT_consolas_bold_24_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_bold_24_usascii(stb_fontchar font[STB_FONT_consolas_bold_24_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_bold_24_usascii_BITMAP_HEIGHT][STB_FONT_consolas_bold_24_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_bold_24_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_bold_24_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_bold_24_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_bold_24_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_bold_24_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_bold_24_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_bold_24_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_bold_24_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_bold_24_usascii_s[i] + stb__consolas_bold_24_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_bold_24_usascii_t[i] + stb__consolas_bold_24_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_bold_24_usascii_x[i];
            font[i].y0 = stb__consolas_bold_24_usascii_y[i];
            font[i].x1 = stb__consolas_bold_24_usascii_x[i] + stb__consolas_bold_24_usascii_w[i];
            font[i].y1 = stb__consolas_bold_24_usascii_y[i] + stb__consolas_bold_24_usascii_h[i];
            font[i].advance_int = (stb__consolas_bold_24_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_bold_24_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_bold_24_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_bold_24_usascii_s[i] + stb__consolas_bold_24_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_bold_24_usascii_t[i] + stb__consolas_bold_24_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_bold_24_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_bold_24_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_bold_24_usascii_x[i] + stb__consolas_bold_24_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_bold_24_usascii_y[i] + stb__consolas_bold_24_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_bold_24_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_bold_24_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_bold_24_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_bold_24_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_bold_24_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_bold_24_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_bold_24_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_bold_24_usascii_LINE_SPACING
#endif

