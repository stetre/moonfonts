// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_11_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_11_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_11_usascii_BITMAP_WIDTH         128
#define STB_FONT_times_bold_11_usascii_BITMAP_HEIGHT         46
#define STB_FONT_times_bold_11_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_times_bold_11_usascii_FIRST_CHAR            32
#define STB_FONT_times_bold_11_usascii_NUM_CHARS             95

#define STB_FONT_times_bold_11_usascii_LINE_SPACING           7

static unsigned int stb__times_bold_11_usascii_pixels[]={
    0x3202aaa8,0x54288531,0x88191040,0x008e40aa,0x44298cb8,0x2aa9809a,
    0x19032b2a,0x371144cc,0x2a15541c,0x1c40a60a,0x5b0e40a2,0x1a89514c,
    0x3a2b90f4,0x05c483e2,0x2e4333f3,0x25dbcc5d,0x3e26caf9,0x5d46a6a2,
    0xb698929a,0x04967e25,0x428bab92,0x298b61c8,0x23d0d16a,0x0f9b22f8,
    0xb067dc72,0xd717c459,0x3e65cb5c,0xeb8f47a8,0x429d73ec,0x476bea29,
    0x201759f8,0x069b3b29,0x8a61d8be,0x47a1a64a,0x7c7ea1fb,0x207cd2e0,
    0xa87ee2fa,0x9972d71f,0x52247b8f,0x890ff624,0x44d5c5fd,0x2d517013,
    0x445f032e,0x2e244a64,0x45f51e85,0xb541f0fb,0x7d4680f9,0x5ec43ee2,
    0x0f6fe65d,0x21f675c3,0xcd9922fd,0x1ab2902f,0x26f5b913,0x98ae2f80,
    0xe85a8ea2,0x3e5d93e1,0x107cd2e0,0x05c8fe0a,0x2807ccb9,0x9518e2a6,
    0x7d4b8d47,0x03e7e170,0x313d3d55,0x530ec5f0,0x87a1a2d4,0x3e0cbac8,
    0x91744b20,0xb75b3019,0x0fa9b601,0x86a6a5f0,0x89c0ccba,0x91c40c9d,
    0x026050d5,0x531645d1,0x3d03225c,0x20f81f90,0x0040000d,0x009884cc,
    0x040a0108,0x26008080,0x6c409999,0x2298930e,0x3b10c0c8,0x31d8b2e0,
    0x00000000,0x00000000,0x00000000,0x00000002,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x55775000,0x7550e5c4,
    0x42b8b265,0x0ee00ba8,0x353024ce,0x66541ca8,0xcc885441,0x50aea62c,
    0x882b9835,0x2f262baa,0x32244570,0x54f91266,0xa97f41f6,0x901dd640,
    0x01f3298b,0x6dcc3ad1,0xb3066647,0x932eeea8,0x1f8da922,0x2e43f1b3,
    0x82a5f8b1,0x830be648,0x50fdae7c,0x7bb031fd,0xb8bb7501,0x5c195f30,
    0x265a85d6,0x820fc41d,0xc827f50d,0x87c4c7f6,0x93a0c2f8,0x01f71cc2,
    0x20d647c8,0x6442ef8a,0x2f31e89f,0x93f3245d,0x263eb64d,0xa9bfea5e,
    0x6c580fbf,0x1f5ea0ef,0x401fb86e,0x54f30a4e,0xb53e401f,0x6f994159,
    0x714f6da6,0x2638972d,0x75ae7a8f,0x3a20fd43,0x550fad93,0x6546ea84,
    0x47ee0c1f,0x293a0dd8,0x087f13cc,0x6744d95b,0x2e7a8a4e,0x708ff88f,
    0x260b972d,0x75aa6a8f,0x95406c11,0x20c87b7a,0x0970f10b,0x1b63f883,
    0x31e61cbb,0x2ee1757d,0x4aa72a3e,0xfe8920d9,0x9b11febc,0x2ba624dd,
    0xb92d6c1c,0x215f5c53,0x2e2c0dad,0x0ea22aac,0x26fa61ea,0x0d5fcc4e,
    0x400007ea,0x00810000,0x00002010,0x01008000,0x08010000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x16545e4c,0x5c565475,0x2f26551c,
    0x2eea1c88,0x77930cac,0x880c9817,0x1d441bbc,0x89930193,0x02f262ca,
    0x85d42f26,0x32ab224a,0x3262f263,0x27c57a0b,0xfb9fc415,0x447ec131,
    0x4337b9c3,0x0f88f94e,0x745f19d0,0x6403e22a,0xbd07f22f,0x4c172f40,
    0x217d4667,0x4bd13e5e,0x2db050fc,0xdf8854f8,0xa741ee02,0x32be20fa,
    0xf34fa740,0x4398f889,0x83f535ea,0x0e37a04e,0x0bf109e6,0x97a27cbd,
    0xfa818bf8,0xa818fcaa,0x741ee02f,0x57c43ead,0x06def44c,0x0a8f883f,
    0x7cd47dd4,0xddd02741,0x1f90f309,0x89f77dd0,0xd0176c5e,0x260bf35b,
    0x20f700fd,0x7c41fcce,0xf82745c8,0x5426fc41,0x41f99df8,0xf7bd044e,
    0x1fcc7985,0xe89f2f41,0xf700fd45,0x226613a1,0x3a0f705f,0xc8f88dd4,
    0x41f82745,0xc942faf8,0x24e83f36,0x07ed7a09,0x8a26e8f3,0xef893e5e,
    0xb92202c0,0x4fc87541,0x3e617e44,0x3ea4f88d,0x03be26da,0xcafa87f1,
    0x2511931f,0x2bbe63fb,0x263be26b,0x2e3f51ff,0xf11ebacf,0x001bf31d,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x2a000000,0xbc98ea3c,0x757933ba,0x2155e4c5,0x300bbbc9,
    0x505c0b80,0x00a92039,0xba85c330,0x2ea28bb8,0x57173288,0x00b82ba8,
    0x2f40a9ba,0x4f872f47,0x0bd4e8b9,0x207dc03a,0x70fd931e,0xa80e644f,
    0x8f98f43c,0x4cfcc56c,0x54b91f30,0x005c0f8d,0x57a0a5f5,0x204d7a09,
    0xa745f34f,0x104fa85d,0x98f3001f,0x2e3d507b,0xf57d001d,0x7c439b07,
    0x87dcc5c8,0xb01ccdcb,0x0f3ba05d,0x49f03bdd,0x03b3ba4f,0x3e203f2a,
    0x88ea0540,0x165c47aa,0x41505971,0x3f509b7b,0xd32e47c4,0x400b81f1,
    0x71bd02f9,0x4f818de8,0x6da749f1,0x441fd4cc,0x890fe20f,0x1771fcbb,
    0x8be1c980,0x21605548,0x2baa6dce,0x22005c2f,0xd02bd02f,0x54f82a2b,
    0x0fba743f,0x221b622a,0x3590c41f,0x007f6ea3,0x00000000,0x7dc00400,
    0x2077c40c,0x266caef8,0x3e61dbef,0xb92a2cae,0x861fd44f,0x3d41fffa,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x54400000,
    0x5510d4c1,0x173054c1,0x02a6e619,0x30baa987,0x4dcc1957,0x0620ca9c,
    0x8c89106a,0x55082a1a,0xa8a23555,0x7771bb24,0xd1b30077,0x1971eb4c,
    0x7f135623,0x53167417,0x12f46157,0x57c4995f,0x1ee3e8eb,0x8f8f3172,
    0x19b9553d,0x54266666,0x883311c6,0x5b800888,0x3e67d5b8,0xf892bae5,
    0x2a20fa81,0xf107d42c,0x5c7c4b91,0x45c287d6,0x0dd62c2a,0x0e6665c0,
    0x54000000,0x12ead40f,0x221ea5d3,0x6c4e980f,0x884fe259,0x23e25c8f,
    0x10447d6b,0x02302247,0x00000000,0xc85db100,0x4432ae49,0x30be62ed,
    0xfc805f79,0xdb5f50da,0x747e57cc,0x00000004,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__times_bold_11_usascii_x[95]={ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, };
static signed short stb__times_bold_11_usascii_y[95]={ 8,1,1,1,1,1,1,1,1,1,1,2,6,5,
6,1,1,1,1,1,1,1,1,1,1,1,3,3,2,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,1,3,3,3,3,3,3,1,1,1,4, };
static unsigned short stb__times_bold_11_usascii_w[95]={ 0,3,5,5,5,10,8,3,4,3,5,6,3,4,
3,3,5,5,5,5,5,5,5,5,5,5,3,3,6,6,6,5,10,8,7,7,7,7,6,8,8,4,5,8,
7,10,7,8,6,8,8,6,7,8,8,10,8,8,7,2,3,3,6,7,3,5,6,5,6,5,5,5,6,3,
4,6,3,9,6,5,6,6,5,4,4,6,5,8,5,5,5,4,2,4,6, };
static unsigned short stb__times_bold_11_usascii_h[95]={ 0,8,4,8,8,8,8,4,9,9,5,6,4,2,
3,8,8,7,7,8,7,8,8,8,8,8,6,7,6,3,6,8,10,7,7,8,7,7,7,8,7,7,8,7,
7,7,8,8,7,9,7,8,7,8,8,8,7,7,7,9,8,9,4,2,2,6,8,6,8,6,7,8,7,7,
10,7,7,5,5,6,8,8,5,6,8,6,6,6,5,8,5,10,10,10,3, };
static unsigned short stb__times_bold_11_usascii_s[95]={ 126,89,80,93,99,115,29,76,30,51,36,
118,65,108,100,45,56,50,60,62,66,68,74,80,109,93,86,56,79,93,72,
99,1,41,33,1,25,17,10,105,114,123,9,93,85,74,21,66,54,39,38,
86,30,114,1,10,21,1,106,48,105,35,69,113,104,112,49,1,38,18,61,
15,47,123,12,67,102,55,48,7,82,75,24,13,55,105,99,90,30,60,42,
25,22,17,86, };
static unsigned short stb__times_bold_11_usascii_t[95]={ 1,1,38,1,1,1,12,38,1,1,38,
30,38,38,38,12,12,30,30,12,30,12,12,12,1,12,30,30,30,38,30,
12,1,30,30,12,30,30,30,12,21,20,12,21,21,21,12,1,21,1,21,
12,21,12,21,21,21,30,21,1,1,1,38,38,38,30,12,38,12,38,21,
12,21,12,1,21,21,38,38,38,1,1,38,38,1,30,30,30,38,1,38,
1,1,1,38, };
static unsigned short stb__times_bold_11_usascii_a[95]={ 40,53,88,79,79,159,132,44,
53,53,79,91,40,53,40,44,79,79,79,79,79,79,79,79,
79,79,53,53,91,91,91,79,148,115,106,115,115,106,97,124,
124,62,79,124,106,150,115,124,97,124,115,88,106,115,115,159,
115,115,106,53,44,53,92,79,53,79,88,71,88,71,53,79,
88,44,53,88,44,132,88,79,88,88,71,62,53,88,79,115,
79,79,71,63,35,63,83, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_11_usascii_BITMAP_HEIGHT or STB_FONT_times_bold_11_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_11_usascii(stb_fontchar font[STB_FONT_times_bold_11_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_11_usascii_BITMAP_HEIGHT][STB_FONT_times_bold_11_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_11_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_11_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_11_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_11_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_11_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_11_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_11_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_11_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_11_usascii_s[i] + stb__times_bold_11_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_11_usascii_t[i] + stb__times_bold_11_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_11_usascii_x[i];
            font[i].y0 = stb__times_bold_11_usascii_y[i];
            font[i].x1 = stb__times_bold_11_usascii_x[i] + stb__times_bold_11_usascii_w[i];
            font[i].y1 = stb__times_bold_11_usascii_y[i] + stb__times_bold_11_usascii_h[i];
            font[i].advance_int = (stb__times_bold_11_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_11_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_11_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_11_usascii_s[i] + stb__times_bold_11_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_11_usascii_t[i] + stb__times_bold_11_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_11_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_11_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_11_usascii_x[i] + stb__times_bold_11_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_11_usascii_y[i] + stb__times_bold_11_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_bold_11_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_11_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_11_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_11_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_11_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_11_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_11_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_11_usascii_LINE_SPACING
#endif

