// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_11_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_11_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_11_usascii_BITMAP_WIDTH         128
#define STB_FONT_consolas_11_usascii_BITMAP_HEIGHT         50
#define STB_FONT_consolas_11_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_consolas_11_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_11_usascii_NUM_CHARS             95

#define STB_FONT_consolas_11_usascii_LINE_SPACING           7

static unsigned int stb__consolas_11_usascii_pixels[]={
    0x01790055,0xa8551322,0xdd10aa2c,0x2a03baa5,0x1c00e002,0x2aa0c433,
    0x006a260a,0x3a800000,0x9703b858,0x5cb20e98,0xb05883a2,0x775c7701,
    0x2c401d84,0x59b16cb3,0x3ab7a21d,0x775c1620,0x322f6444,0xeb8ea5dd,
    0x1c824c5f,0x258930ec,0x06c16259,0xd9663555,0x0b2024c2,0x36599a1d,
    0xb9964d10,0x6cb30aae,0xe9a20b62,0x123a6750,0xd10e4162,0x45bec9c8,
    0x506c1626,0x4a8ae795,0x2e1a00e8,0x0d92a4ab,0xeb9964b1,0xa54570aa,
    0x574098d8,0x5f44ea6a,0x25c17903,0x5793b16a,0x20b11c8b,0x4593b80d,
    0x7503a859,0xacc1bd10,0x0f4b10f9,0xacc590b1,0x260ebbf9,0xe98ea2ff,
    0x2d42d82e,0x3957b126,0x20b12c8b,0x4593b80d,0x03a0d04a,0x6deec2ec,
    0x887dbf10,0x4d2a2c85,0x44744ee4,0xeab8751e,0x10e41621,0x4aebad8d,
    0x1b0588f4,0x1d96a770,0x20498390,0x5886c01d,0x3b2d4340,0x4b32c9a2,
    0xd8d8752d,0x20e41261,0x3272320e,0xb0589a20,0x77647701,0x03916203,
    0x21b007b5,0x0775c058,0xdeb87dd9,0x752f76c4,0x930fbfaa,0x5cb30ae0,
    0x0588b602,0x4a85901b,0x05886c01,0x01020011,0x20000000,0x0f5c2c3a,
    0x89dc3e88,0x112a2bcc,0x43b2639d,0xec80ecc9,0x00442204,0x00000000,
    0x08750000,0x80080088,0x21330008,0x000c4198,0x00000000,0x00000000,
    0x00000011,0x00000000,0x00000000,0x00000000,0x2a200000,0x644081aa,
    0x882e0712,0x0003881a,0x40400000,0x059501b9,0xd8aa0000,0x3bba65ee,
    0xc87eaba2,0x65a365ee,0x6df41b01,0xdd702c42,0x21eee989,0xb8ea5eee,
    0xa88fb763,0x984e5c2e,0x47b2feee,0x0770765a,0x2203a2b3,0x3b0699e6,
    0x1d55095b,0x46c43bbc,0x21d9a21a,0x8ea0d00e,0x6886883b,0x44d3006c,
    0x5c1d87a6,0x40775983,0x0be24dce,0x336166e2,0x217760ea,0x750eade8,
    0xd0254fea,0x0ee3a813,0x2ab5112a,0x1e81ccfc,0x076255e4,0x4b2b3077,
    0x011b33ed,0x13905db3,0x3a21b2cc,0xc9a2199e,0x27599772,0x93b2e04b,
    0xee98ee3a,0xe9885f42,0x441dc099,0x2e0ec0ee,0x5c775983,0x01bddf13,
    0x6e64c1d1,0xac86c954,0xb9622de9,0x4cee5f52,0x8ea1d005,0x8341d03b,
    0x2e06980e,0x11d41d84,0x3b874d2e,0x1d81dc95,0x359ad636,0x07dcb21f,
    0x2688ecb1,0xd1007a0e,0x3a03b2cc,0x74074060,0x0760ee01,0x50777411,
    0x33a65ddd,0x9ddd50ec,0x363dd95c,0xddd10dce,0x1f6f449b,0xd930fbae,
    0x20f7743b,0x3ba24eec,0x0740fc2e,0x70bbbbea,0x93dddb07,0x19880009,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x88000000,
    0x00aa0003,0x32e00070,0x00000002,0x00330000,0xb2d96a33,0x221eac41,
    0x77541626,0x221dc3ee,0x88343eef,0x25c44fef,0x6a95c3ea,0x0e8ac4fa,
    0xeee8dddd,0xb1dc950e,0xbb1f6e4b,0x4392cd6c,0x11dc9758,0x0770153b,
    0xf1688355,0xd3442a68,0xa7544985,0x7b33d72b,0x80d0ed62,0x8772543b,
    0x88074b30,0x266720ee,0x106cd148,0x0770d7bf,0xd1688995,0xb3449768,
    0x76544985,0x599772b8,0x0d0b3627,0x772543b8,0x201c92a0,0x4ee55c5d,
    0xd11a27a4,0x4c0ee06c,0x20fefc44,0x5d7444be,0x5dd44986,0x3bb392bb,
    0x3ba1ba29,0x7543b85e,0x44ae3eee,0x4332ebbe,0x36ae1dd9,0x0eaee3ad,
    0x0ee06cb1,0x165a224c,0x55d10b7e,0x3a751260,0x9355392b,0x80d12f62,
    0x4772543b,0x4362626b,0xa9a67a5c,0x3a23daad,0x81b2c40d,0x6889303b,
    0x445d68d1,0x4ea24c06,0xacc392eb,0x20347b58,0x4772543b,0x9905a84a,
    0xf88f9a64,0xb2c43742,0xfee83b81,0xd164d11e,0xd03447a2,0x44ea3dfd,
    0x8ac43b2f,0xe81a3d15,0x5c950eee,0x66f41973,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000570,0x00000000,0x20375000,0x55403749,
    0x5cc13140,0x980aa80b,0x20544c2b,0x2a6eeeec,0x776c1cde,0x3e24f882,
    0x986d83de,0x7f774c5e,0x2f62d222,0xb10da82a,0x21d57d05,0xbab83658,
    0x2e3556c6,0x2b3a23ad,0x3a8365c6,0x8788c1d1,0x0e9a24cd,0xac887762,
    0xca887405,0x5c0ba0d9,0x72549904,0x980d9625,0x5911b30e,0x43668834,
    0xb8ea0d3b,0x4aca8f02,0x2ee345a2,0x2a05983b,0x8b6f3264,0x81ec3ec8,
    0x13a8ee5b,0xd79906cb,0x87333aa1,0x406cb106,0xa8ea5eee,0x55a23c84,
    0xb13bbe24,0x40b30d11,0x01cd5c0e,0x44c8970f,0xd1687659,0x88745621,
    0x96207606,0x4750680d,0x33225c3c,0x6cd11dca,0x81f55f12,0xeb895059,
    0x3b7a2ddd,0x40b29504,0x6f643eec,0x83777a0d,0x3660ddeb,0x80d9626d,
    0x83a67506,0xdcaaa84b,0xdb8f4d11,0x82cc3daa,0x81b8c80e,0x00000000,
    0x00000800,0x3aa6eee8,0x3bbe61de,0x3e24a82e,0x698763ee,0x4a87bfba,
    0x000032b0,0x00000000,0x00000000,0x00000000,0x31000000,0x54aa1333,
    0x15453552,0x33323553,0x000004cc,0x43528330,0x20628a89,0x288aaaa2,
    0x0310cc66,0x3ba60c40,0x77771388,0xbba5d761,0xbb985c4b,0x03333332,
    0x0ea00000,0x36e3d5bd,0x44392bdc,0x3d1b2aa5,0x1c9661d1,0x1d55c264,
    0x225dd337,0x3a80aaaa,0x00007557,0x51000000,0x543a3599,0x27375571,
    0xe849bb9b,0x3a0ef440,0x0e5cc688,0x20807b62,0x000aaaa8,0x00000000,
    0x5eedcc00,0x2aa6e0d1,0x75bb5539,0x70bb02c8,0x8b158757,0x00004bbc,
    0x00000000,0x43a80000,0x73553706,0xa8b73366,0x88799704,0x098620de,
    0x0000014c,0x00000000,0x34298000,0x139aa9b8,0x3e21f33f,0x74d30eee,
    0x00002ec1,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__consolas_11_usascii_x[95]={ 0,2,1,0,0,0,0,2,1,1,0,0,1,1,
2,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,1,0, };
static signed short stb__consolas_11_usascii_y[95]={ 8,0,0,0,-1,0,0,0,0,0,0,2,6,4,
6,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,2,0,2,0,2,0,2,0,0,
0,0,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,0,-1,0,3, };
static unsigned short stb__consolas_11_usascii_w[95]={ 0,2,4,6,6,6,7,2,4,4,6,6,3,4,
2,6,6,6,6,6,6,6,6,6,6,6,2,3,5,6,5,4,6,6,6,6,6,5,5,6,6,6,5,6,
5,6,6,6,6,7,6,6,6,6,7,6,6,7,6,4,6,4,6,7,4,6,6,6,6,6,6,6,6,6,
5,6,6,6,6,6,6,6,5,6,6,6,6,6,6,6,6,5,2,5,6, };
static unsigned short stb__consolas_11_usascii_h[95]={ 0,9,3,8,11,9,9,3,11,11,5,6,4,2,
3,10,9,8,8,9,8,9,9,8,9,8,7,8,7,4,7,9,11,8,8,9,8,8,8,9,8,8,9,8,
8,8,8,9,8,10,8,9,8,9,8,8,8,8,8,11,10,11,5,2,3,7,9,7,9,7,8,9,8,8,
11,8,8,6,6,7,9,9,6,7,9,7,6,6,6,9,6,11,12,11,4, };
static unsigned short stb__consolas_11_usascii_s[95]={ 127,1,83,56,4,31,45,80,23,35,56,
1,124,93,77,71,60,42,14,88,21,74,113,49,120,117,124,113,70,70,76,
95,28,35,28,67,7,1,93,10,106,99,4,86,122,79,72,106,58,56,44,
24,30,81,15,8,1,114,107,40,64,45,49,98,88,96,53,110,38,103,100,
17,23,37,50,51,65,14,117,82,92,85,8,63,99,89,42,21,35,78,28,
17,1,11,63, };
static unsigned short stb__consolas_11_usascii_t[95]={ 1,14,41,33,1,13,13,41,1,1,42,
42,32,41,41,1,13,33,33,13,33,13,1,33,1,24,24,24,33,41,33,
13,1,33,33,13,33,33,24,13,24,24,13,24,13,24,24,1,24,1,24,
13,24,13,24,24,24,13,13,1,1,1,42,41,41,33,13,33,13,33,13,
13,24,24,1,24,24,42,33,33,1,1,42,33,1,33,42,42,42,1,42,
1,1,1,41, };
static unsigned short stb__consolas_11_usascii_a[95]={ 97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_11_usascii_BITMAP_HEIGHT or STB_FONT_consolas_11_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_11_usascii(stb_fontchar font[STB_FONT_consolas_11_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_11_usascii_BITMAP_HEIGHT][STB_FONT_consolas_11_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_11_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_11_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_11_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_11_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_11_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_11_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_11_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_11_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_11_usascii_s[i] + stb__consolas_11_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_11_usascii_t[i] + stb__consolas_11_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_11_usascii_x[i];
            font[i].y0 = stb__consolas_11_usascii_y[i];
            font[i].x1 = stb__consolas_11_usascii_x[i] + stb__consolas_11_usascii_w[i];
            font[i].y1 = stb__consolas_11_usascii_y[i] + stb__consolas_11_usascii_h[i];
            font[i].advance_int = (stb__consolas_11_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_11_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_11_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_11_usascii_s[i] + stb__consolas_11_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_11_usascii_t[i] + stb__consolas_11_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_11_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_11_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_11_usascii_x[i] + stb__consolas_11_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_11_usascii_y[i] + stb__consolas_11_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_11_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_11_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_11_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_11_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_11_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_11_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_11_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_11_usascii_LINE_SPACING
#endif

