// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_21_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_21_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_21_usascii_BITMAP_WIDTH         256
#define STB_FONT_arial_21_usascii_BITMAP_HEIGHT         64
#define STB_FONT_arial_21_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_arial_21_usascii_FIRST_CHAR            32
#define STB_FONT_arial_21_usascii_NUM_CHARS             95

#define STB_FONT_arial_21_usascii_LINE_SPACING          14

static unsigned int stb__arial_21_usascii_pixels[]={
    0x10595055,0x70793019,0x5d402a83,0x54c00acc,0x40aaa62a,0x32e60029,
    0xa880000a,0x4c400acb,0xa8019999,0x40e44882,0x2006e03b,0x31000bb8,
    0x01530015,0x00a60488,0x206b32a2,0xca88002a,0x69a980ac,0x7cc2ffb8,
    0x2627fc40,0xff706d86,0x07fffbbf,0xffd9fff2,0x0e7f5c46,0xffdfff50,
    0x401b101b,0xeffefffa,0xfffffb00,0xd70fd00f,0xbbf307cc,0x400f981f,
    0x401ffefc,0x80efffe9,0x204fffeb,0xfffeb86a,0xfffff504,0x2006d89f,
    0xfffefff9,0xd03db6c2,0x7dc0f98b,0x42a82d81,0xb981bfe8,0x7d9f203f,
    0xfeedff98,0x221efa81,0x00fb85fb,0x7dc43df7,0xaaadf80e,0xc87e802a,
    0x74d71ea5,0x3e201ec2,0xef8813e3,0xdfb89f30,0x13607f71,0x0bea1bf1,
    0x32613df1,0x4401b63f,0x17f4c2ef,0x3603e653,0x1ee07cc5,0x1fe801ea,
    0xf903fa80,0x547ec3ec,0x05f98bf4,0x01f717ee,0x2fd40df1,0x74000fe2,
    0xd1723e87,0x01f52e49,0x81ba1fa8,0xf075c0fb,0x5f01fb0f,0x23740fb8,
    0x26f881fb,0x0fe8806d,0x84e81ba0,0x3207cc6d,0x4b904e87,0x53b6a2fb,
    0xf901f54a,0x4aafc3ec,0x401fc875,0xbdfd70fd,0x7e401fc8,0x40007ea0,
    0xddfdd97e,0x9361dffd,0x2200fa4d,0x7c07f56f,0xa85f8805,0x7dc3cc1f,
    0x0bee3f41,0xfb3db14c,0x402fa85b,0x3e4b90ba,0x903e6364,0xdb01f98f,
    0xbdfb8fe2,0x20fe5ede,0x5ba1f67c,0x201b604a,0x7bfb51fb,0x2fa807d8,
    0x02fb2bee,0xfdcbbf40,0x50cdfccc,0x00fa97cd,0x809fdf70,0x882cb8cf,
    0x5c2fa84f,0xb89df985,0x05ffcc3f,0x3afbff60,0x0003f23f,0x2e07d4db,
    0x1b607cc7,0x4db601f5,0xff87f50f,0xd9f21723,0x04acfc87,0x8fe6017e,
    0x806f80fb,0x37ff64f9,0x7e803ffd,0x881f335c,0x00fa5ffd,0x4404ffa8,
    0x1efefecf,0x21fec3ec,0xffff103e,0x3bffe607,0x6c4fd81c,0xb000fd0f,
    0x3e60fccd,0x4f883e61,0x2edb03e4,0x8bf21ba6,0x1f67c86b,0x205f7fec,
    0x4f9805f8,0x017e03ee,0x20dc97e2,0x47e807e8,0x0981ea5c,0x901b89ea,
    0x0223fd9f,0x3a619ff3,0x644efd45,0x207e24ff,0x2ffcdfd8,0x3bfff6a0,
    0x7f707f60,0x3bba61be,0x7ccdb2ee,0x1f33fb83,0x0db037ea,0x7f14db6c,
    0x42e41f70,0xc881f67c,0x037c2fff,0x01f71fd4,0x07f300dd,0x7e805f70,
    0x400b91f4,0x8bd9f53e,0xd1df33fb,0xfb87f98f,0x4f7ff5c0,0x7ec1ea2f,
    0x4c007ec0,0x221b67fc,0xe981fb4f,0x4db3feee,0x35fa83f8,0x360fee1f,
    0xa9f5b606,0x2746d81f,0xa80fb3e4,0x1f60feac,0x0fb87ee0,0x7d400fc8,
    0x404f8801,0xfffffd7e,0x5403ffff,0xd07ccfa6,0x44fefa8d,0x03f985f8,
    0x4c87e635,0x45f50bf0,0x6cbee01a,0x3f74f886,0x4db3f980,0x31fc41fa,
    0x321fcc1f,0xaa75b607,0xf72fc42f,0x03ecf901,0xf71fd52a,0x1ff12987,
    0x27d407dc,0x50591fa0,0xdd07e65f,0x3eeabf2a,0x4fa00aac,0x7c4be2f8,
    0xf80ffc85,0x0262fa85,0x882f83ee,0x3a3f983f,0x3ecfe606,0x05f99fd4,
    0x2e6d9fcc,0x3e63dc0f,0x03ea2ec0,0x9f16cb6c,0x07f33fd8,0x7447d9f2,
    0xb0fe6953,0x7ef7dc3f,0xfd80fd42,0xfd85f902,0x49f13ec0,0xf99ae4f8,
    0x17c6b800,0x2e07ec5f,0x41fc84ff,0x3a1f20fc,0x36403e65,0x07f907e4,
    0x217ec3f2,0x417f21fc,0x64db3fd8,0x07cc6c86,0x205f31b2,0x3f21f56d,
    0xfdefeebd,0x87d9f204,0x03f2956f,0xf957bfd1,0x05bf50df,0x3aeaf7f6,
    0xaadf983f,0x5e7ec4fd,0x7b9362fe,0x34d85f00,0x55ffd41f,0x444fedfd,
    0x44fc9aef,0x0fd99df8,0xadf981ae,0x7f444fc9,0x24febace,0x4fd9cffd,
    0xdbbdefc8,0x74db0dff,0x07cc6d85,0x6c0fe1f2,0x77e47f16,0x312dfe8a,
    0x21f67c81,0x5fcdbefb,0x9dffb710,0x7ec45fd7,0x3fff6e07,0x3ff6a02d,
    0xeffc883f,0x00b91f43,0x9fbf50d7,0x27ffff50,0xffd885e8,0xbffb504f,
    0x7d403d83,0xd900cfff,0xdd85dfff,0x2a03fffb,0x41dfffed,0xdb03f36d,
    0x43dc0f98,0x7d4db07c,0x21ba6004,0x7dc1f67c,0x1000beff,0x08000970,
    0x01000800,0xa8008826,0x11002a01,0x04002000,0x06200130,0x00c00300,
    0x2ec00220,0x207cc5e8,0x417c40fb,0x006fe45e,0x9f203bea,0x002dc07d,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x303e2000,
    0x40f987fb,0x535c2df9,0xffd507f9,0x7ffd979b,0x7ecfd950,0x0009503c,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xfc84c800,
    0xeb80f984,0x07d92e86,0xcefedca8,0x4ddd700b,0x00005eec,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x200a9800,0x006a6029,0x05540530,0x973000dc,0x3b673205,0x10014c2d,
    0xeec98797,0x764c0e9b,0x2aa0e9ae,0x2aaaaaaa,0x155002aa,0x98aa0154,
    0x22055102,0x5300550a,0x2aaaaa61,0x0a62aaaa,0x2aaaaa60,0x265501aa,
    0x82aaaaaa,0x263511a8,0x6c03f73e,0x4ffffa87,0xf903ee00,0x04c89fff,
    0xffefffa8,0x75f7f6c4,0x4401b62f,0x3fe24efe,0x221fefcc,0x0fefccff,
    0x3ffffffa,0x81be65ff,0x81fe45f9,0x207ee2fc,0x1fb81ffa,0x27d805f7,
    0xfffffffc,0x00db0fff,0xfffffff7,0xf96d81bf,0x5fffffff,0x54fa9fcc,
    0xd807ee9f,0x644efc47,0x41f7003f,0x47f70cf9,0x56fcc07a,0x7ec7f930,
    0x06d87ec4,0x1fd07f30,0x1fd0ffc4,0x33107fcc,0x87fb3333,0x01fd03fc,
    0x44fa83fd,0x3fed83f9,0x817e27d8,0x266624f8,0x21999df9,0x81fb806d,
    0xcb6c5fca,0xfa9999af,0x3ea7f31f,0x07ee1314,0x207e47d8,0x41f7007d,
    0x3e25f87d,0x201df101,0xa83fb0fe,0x2a00db2f,0x6c2fc41f,0x3fa17e1f,
    0x885fb800,0x817e40fe,0x41be26f9,0x86dbf85f,0xb807ec5f,0x813e201f,
    0x01fb806d,0x3f2db1fa,0x3e67f501,0x3ee09f53,0x0bd1f601,0xdec983f5,
    0x10220fba,0xf703e8bf,0x7d85cc03,0xb1db4f88,0xefec87dd,0xf707f30e,
    0x3f20fe63,0x5037d400,0x2027ccbf,0x201fd4fb,0x7dcfcc7d,0x5f50fe60,
    0x9f101ba0,0x8faa36c0,0x83f601fb,0x2603f96d,0x3ea7f34f,0x6c03f704,
    0x17cc27c7,0xfdfb9ff1,0x217e4401,0x800fb05c,0xfb4f886d,0x5c9fd7bf,
    0x7f30cdfd,0x0fe63f70,0xff8803ee,0xee97e400,0x2fdfd800,0x37b87ee0,
    0x7c07dc5f,0x4403f985,0xfa9b604f,0xf880fdc4,0x01fcb6c5,0x4cfe65f7,
    0x403f703f,0x260fe27d,0xf983fa3f,0x07ffb00f,0x001ba0f3,0xb2fa81fb,
    0x7d47e87f,0x1fd85f81,0x01fb0bf1,0x22007fa2,0x1001fcfe,0x2f9809ff,
    0x1b64f97a,0x03f207e4,0xb6c09f10,0xcdfb84fa,0x41ffdccc,0xb983f96d,
    0x7c4fe67f,0x6c03f703,0x3e20fe27,0x03fa17e3,0x7c17fe5c,0x6c006f82,
    0xfd87e42f,0x3f507e40,0x7fc41f90,0x03fe1fa1,0xf5001fec,0x7fc4009f,
    0x5f14f805,0x2609f3ec,0x44027c3f,0x3ebb604f,0xfffff704,0x65b605df,
    0xffffffff,0x17c4fe62,0x9f601fb8,0x32f983f8,0x001f907f,0xe84d81fb,
    0x67fec007,0x21f63fd9,0x207ea0fb,0xfffccff9,0x3aabbe61,0x04fb80ff,
    0x74007d80,0xb6403fdf,0x263ea0fa,0xfa9ba02f,0x204f8801,0xf704fffd,
    0xd817ec43,0x5999bf96,0x3e3f9815,0x0bea7d32,0x4c27c6e8,0xf707f31f,
    0xb87f5001,0x2200fc86,0xdff7db1c,0x0fb86d87,0x7ecc07ea,0x74c0fb9c,
    0x540fcdff,0x0fb0006f,0x7f45fe40,0x1b23ea01,0x401f75f1,0x200db1fb,
    0x33f604f8,0x81fb81fc,0xf96d81fe,0xf8fe6003,0x0fe29f51,0x5c2f45f8,
    0xfb0bf10f,0x17d41e41,0x07f503e2,0x026d97e4,0x507dc36c,0x3f20103f,
    0x83ee1100,0xb0000ff8,0x997e600f,0x3ebe206f,0x406cce84,0x003f8cf8,
    0x8b6c09f1,0x40fdc0ee,0xcb6c0ff8,0x47f3001f,0x0ff8ee0c,0x07dc3fb8,
    0xff0fd1ba,0x1f607ec1,0x417ec1f4,0x201b65f9,0x2a0fb86d,0x7c45d81f,
    0x741f7006,0x1f60001f,0xf703fe20,0x40fef409,0xed803eec,0x9f1000fb,
    0x89f536c0,0x8bf701fb,0x2003f96d,0x43d103f9,0xfdbacff9,0xeabff885,
    0x5577cc1f,0x37e60ffe,0xb903fd9a,0xb77bfd10,0x4036c1ff,0x2a0fb86d,
    0xcbdfa81f,0x1f7001fe,0x33333bf2,0x3ec04ccc,0xfe80fec0,0x2a0ff902,
    0xef9801ff,0x813e2005,0xf717ec6d,0xdb17f403,0x7cc007f2,0x20627d33,
    0x0cefffda,0x05dffd10,0x3ef7ffaa,0x16ffecc0,0x36e20f50,0x2e40beff,
    0x07dc36c0,0x3b2a03f5,0x3aa000ce,0xffffff90,0x7d80ffff,0xf1027dc0,
    0x40bf501f,0x0bfa007f,0x3604f880,0xfb877c46,0x6c3fe601,0x26003f96,
    0x4009f33f,0x00220008,0x00880044,0x00020030,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x15300000,
    0x055314c0,0x1530aa88,0x5100a980,0x99999985,0x40153099,0x2e03ae29,
    0x5555510e,0x2aa63555,0x0aaaaaaa,0x54001530,0x555554c1,0x02aa0009,
    0xbb882440,0xaaaaa981,0xd50b900a,0x4efec981,0x207dfd70,0x201bedb8,
    0x9102deda,0xdf903bfd,0x5ff93e40,0xfc8ffdc0,0x4c07e400,0x3ffe21ff,
    0xf74fffff,0x7f33ec03,0x7ffdcbd0,0xf74fffff,0xffffffff,0xdffffc83,
    0x322fcc01,0x3fffffff,0x003ff980,0xfdffb0fd,0x7fffe43d,0x36c1dfff,
    0x7df507dc,0xcfd8bfd7,0x7f445fca,0x7c40febd,0x443ffbdf,0x43ffbdfe,
    0x4f904ffc,0x3fa05ffc,0xc801f91f,0x40ffcc0f,0xfeaaaaaa,0x3ec03f71,
    0x5c5f31ba,0x999999bf,0x33335f70,0x0cf98333,0x7f440bf5,0x4ccd7e45,
    0x76402fd9,0x3fec406d,0x26e88fea,0xca999afc,0x2e1b60ff,0xfd03fa0f,
    0xb07644f8,0x362fc43f,0xfb0fec1f,0x3f20fd83,0x327c81fe,0xdf880fcf,
    0xc801f91f,0x007fe60f,0x07ee4fa8,0x90fdc7d8,0xb802fb8f,0x21f6001f,
    0xbfdb00fb,0x0bf00fc8,0x501facf8,0x86e8fdff,0x203f91fb,0x2e1b65fb,
    0x3f20220f,0xdf007be0,0x42fc4330,0x2617e3fa,0x1be7f23f,0x2fafc9f2,
    0xf91fbeb8,0xf30fc801,0x37c4003f,0x47d807ee,0xf713e4f8,0x003f7005,
    0x417d4154,0x7e45f8fa,0x7d40bf00,0x1bf04f8a,0xf98198f9,0x7f403f92,
    0x81f70db0,0x0fffecb8,0x10b7ffea,0x07f3009f,0x3bbe69f1,0x324feeee,
    0x3e44fb8f,0x9d0bd1f9,0x003f23f7,0x03ff31f9,0x7dc0fc80,0x5f61f601,
    0x017dc1fa,0x40000fdc,0xf9fc40fd,0x7dc07e45,0x0fd9f602,0x6c01f218,
    0x6403f90f,0x1f90db1f,0x6566ffd4,0x7fedc40f,0x5007f30e,0x269f105f,
    0xccccccef,0x0ff43f22,0x7dc7e4f9,0x47ee7e60,0x57e400fc,0x22000eff,
    0xffffb85f,0xa87fffff,0xefb86c9f,0x2e3eeeee,0xeeeeeeef,0xd84fa804,
    0xddf917e5,0x4405ffdd,0x900fea4f,0x645fb00f,0x6cfea01f,0xdf10fd86,
    0x64401f90,0x750bf13f,0x9fd42fc4,0x1f9005f8,0x327c9be2,0x5ae2f98f,
    0x801f91fb,0x05fbeffc,0x3ee07f20,0xeccccccd,0x707f9f07,0x7ddddddf,
    0x777777dc,0x77cc04ee,0x8bf07dc0,0xffeeeefc,0xf83f701e,0x3603e406,
    0x500fe42f,0xe883f67f,0xe887f30f,0xf887f30f,0xd17a1fa3,0x7f43f90f,
    0x1f917dc0,0x327ca7dc,0xb9f4bd0f,0xc801f91f,0x007fb0ef,0x00fdc1ba,
    0x03ff20fb,0x3ee00bee,0x1df50001,0x22fc2f98,0x07e980fc,0xfd9999fd,
    0xf503e403,0x5c03f907,0xd55bf52f,0x457f41fd,0x3f21ffea,0x261fda9b,
    0x41fc9aef,0x4fd9befa,0x7dcdf7cc,0x3fa07e45,0x5c3f27c9,0x3f70f98f,
    0x3f9003f2,0x2a00ffc4,0x403f703f,0x20df307d,0x1fb802fb,0xb05fb800,
    0xdffddddf,0x7dc03f25,0x7ffffcc2,0x1f205fff,0x03f907c8,0xfff90fe4,
    0x7ecc1f59,0x223f9bff,0x981effec,0xd502dffe,0x3a609dff,0x7e40ceff,
    0x93ef7c40,0x9b2be61f,0x801f91fb,0x037cc0fc,0x0fdc03f2,0x0be20fb0,
    0x7dc017dc,0x02fdc001,0xffddddd9,0x5403f25d,0xe807e43f,0x540f900f,
    0x2203f904,0x2200306f,0x20022000,0x00110008,0x80fc8022,0x83f27ffb,
    0x47ee3ede,0x07e400fc,0x0dd027e4,0x0fb00fdc,0x02fb81f2,0x2a001fb8,
    0x8bf0004f,0x83fb00fc,0x40fea05f,0x3f90007c,0x0007fb10,0x00000000,
    0xfc800000,0x7e4ffd00,0xfb83fee0,0x99999f91,0x7403f279,0x5c0bf02f,
    0xbb1f601f,0x017dc07f,0x66666fdc,0x9ff12ccc,0x80399999,0x6667e45f,
    0x7d44ffcc,0x641be202,0x3203b207,0xffdcccdf,0x5ddddc44,0xd31bbbbb,
    0x0f333267,0x00000000,0xf100fc80,0xbf307e4f,0xfff91fb8,0x3f2bffff,
    0x881ff300,0x807ee03f,0x201f6c7d,0xffb802fb,0x3fffffff,0xfffffff5,
    0x645f807f,0x2defffff,0x7e400fd8,0x3f607c81,0xfffffc80,0xddd882de,
    0x3ddddddd,0x3ffea7f3,0x0000004f,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xd8cc8000,
    0x6c6643ee,0x39db32de,0x313a22e4,0x37a7323d,0x4075c001,0xd113a65b,
    0xddd30009,0x3a69dddd,0x03260003,0x2eeeeeee,0x2b80c82b,0x3e995c57,
    0x000002ee,0x00000000,0x00000000,0xcefed800,0x37fb64fd,0xfcdfbffc,
    0x7fa83f26,0xfdfdb3dc,0xf30033a1,0x1fd8bf05,0x0fcc03fa,0x76666644,
    0x8809f33f,0xf84fd86c,0x6fffffff,0x57e207c2,0x3e6bf15f,0xfb30fea3,
    0x0032219d,0x00000000,0x00000000,0x361fec00,0xff98ff67,0x17cc3ea1,
    0xb2f43ff9,0x3bff907f,0x0bea2f40,0x80bf2df1,0xbf3001f9,0xffb50098,
    0x40fdf989,0x08888888,0x4ff3f3e6,0x3e2bf5f8,0x44f70ae5,0xfffffdef,
    0x0000000f,0x00000000,0xfb000000,0x03f61f90,0x3e2f98ff,0x7c4fefa4,
    0x5c403f62,0x7dc0befe,0x6fcc1f60,0x00fcc04f,0x5c4037c4,0xec80befe,
    0x260003f8,0xfa7c1dfc,0x407453e4,0xbdb50a20,0x00000003,0x00000000,
    0x36c00000,0xf87d87dc,0x2d91fcc5,0x1f55e9f9,0xfd9803ec,0x7c4fe24f,
    0x541bf204,0x2aacfcaa,0x6400ee88,0x3e201dff,0xaaaa8d93,0x3a22aaaa,
    0x3d9f41fb,0x0000c4ba,0x00000000,0x00000000,0x36c00000,0xf86d87dc,
    0x3f51fcc4,0x22edeef7,0x3fdc006d,0xb00fd5b6,0xffff01ff,0xfd0fffff,
    0x007ff003,0xf8be61f7,0x6fffffff,0x4261dd26,0x00002609,0x00000000,
    0x00000000,0xdb000000,0x21b61f70,0x3e1fcc4f,0x7f3f35db,0xfc8806d8,
    0x6cfd41df,0x17f3ea06,0x26bea666,0x8017ec19,0xf00cffda,0x26665e89,
    0x00099999,0x00000000,0x00000000,0x00000000,0x21b60000,0x9f0db0fb,
    0x7eec3f98,0xdb03fbe3,0x067fed40,0x2207f9f0,0x4c07f55f,0x007f901f,
    0x45bff910,0x0064c1c9,0x00000000,0x00000000,0x00000000,0x40000000,
    0xdb0fb86d,0x43f989f0,0x1bf60ffb,0x1f7f41b6,0xb00ffc80,0x980fec1f,
    0xaaefb81f,0x07d32aaa,0x001bfae2,0x00000000,0x00000000,0x00000000,
    0x00000000,0xb0fb86d8,0x3f989f0d,0x0fee37c4,0x000ec1b6,0x1fdc17e6,
    0x0f4c1be2,0x7fffffe4,0x5009f37f,0x0000000b,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_21_usascii_x[95]={ 0,1,0,0,0,1,0,0,1,1,0,1,1,0,
1,0,0,2,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,-1,1,0,1,1,1,1,1,1,0,1,
1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,-1,0,0,1,0,0,0,0,0,1,1,
-1,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0, };
static signed short stb__arial_21_usascii_y[95]={ 17,3,3,3,2,3,3,3,3,3,3,5,15,11,
15,3,3,3,3,3,3,3,3,3,3,3,7,7,5,7,5,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,19,3,7,3,7,3,7,3,7,3,3,
3,3,3,7,7,7,7,7,7,7,3,7,7,7,7,7,7,3,3,3,8, };
static unsigned short stb__arial_21_usascii_w[95]={ 0,3,6,11,10,15,13,3,5,5,7,9,3,6,
3,6,10,6,10,10,10,10,10,10,10,10,3,3,9,9,9,10,18,14,11,13,12,11,10,13,12,3,8,12,
9,14,12,14,11,14,13,12,12,12,13,18,13,13,12,4,6,5,9,12,5,10,9,10,10,10,6,10,9,2,
4,9,2,14,9,10,9,10,6,9,6,9,10,14,10,10,9,6,3,6,11, };
static unsigned short stb__arial_21_usascii_h[95]={ 0,14,6,15,17,15,15,6,18,18,7,10,5,2,
2,15,15,14,14,15,14,15,15,14,15,15,10,13,10,7,10,14,18,14,14,15,14,14,14,15,14,14,15,14,
14,14,14,15,14,16,14,15,14,15,14,14,14,14,14,18,15,18,8,2,4,11,15,11,15,11,14,14,14,14,
18,14,14,10,10,11,14,14,10,11,15,11,10,10,10,14,10,18,18,18,4, };
static unsigned short stb__arial_21_usascii_s[95]={ 253,247,142,134,66,146,162,149,25,1,134,
80,153,207,203,198,14,159,110,36,121,114,176,52,205,187,100,251,104,124,48,
166,36,144,132,54,177,98,87,239,63,243,125,39,29,14,1,99,231,77,214,
216,191,1,177,158,144,130,117,61,47,55,114,190,157,200,229,221,25,243,88,
95,78,253,31,204,228,11,1,232,68,106,41,211,92,190,58,26,69,76,90,
18,14,7,163, };
static unsigned short stb__arial_21_usascii_t[95]={ 16,20,51,1,1,1,1,51,1,1,51,
51,51,48,48,1,20,36,36,20,36,1,1,36,1,1,51,20,51,51,51,
36,1,36,36,20,36,36,36,1,36,20,1,36,36,36,36,1,20,1,20,
1,20,20,20,20,20,20,20,1,20,1,51,48,51,36,1,36,20,36,20,
20,20,1,1,20,20,51,51,36,20,20,51,36,1,36,51,51,51,36,51,
1,1,1,51, };
static unsigned short stb__arial_21_usascii_a[95]={ 84,84,107,167,167,267,201,57,
100,100,117,176,84,100,84,84,167,167,167,167,167,167,167,167,
167,167,84,84,176,176,176,167,305,201,201,217,217,201,184,234,
217,84,150,201,167,251,217,234,201,234,217,201,184,217,201,284,
201,201,184,84,84,84,141,167,100,167,167,150,167,167,84,167,
167,67,67,150,67,251,167,167,167,167,100,150,84,167,150,217,
150,150,150,100,78,100,176, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_21_usascii_BITMAP_HEIGHT or STB_FONT_arial_21_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_21_usascii(stb_fontchar font[STB_FONT_arial_21_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_21_usascii_BITMAP_HEIGHT][STB_FONT_arial_21_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_21_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_21_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_21_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_21_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_21_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_21_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_21_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_21_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_21_usascii_s[i] + stb__arial_21_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_21_usascii_t[i] + stb__arial_21_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_21_usascii_x[i];
            font[i].y0 = stb__arial_21_usascii_y[i];
            font[i].x1 = stb__arial_21_usascii_x[i] + stb__arial_21_usascii_w[i];
            font[i].y1 = stb__arial_21_usascii_y[i] + stb__arial_21_usascii_h[i];
            font[i].advance_int = (stb__arial_21_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_21_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_21_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_21_usascii_s[i] + stb__arial_21_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_21_usascii_t[i] + stb__arial_21_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_21_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_21_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_21_usascii_x[i] + stb__arial_21_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_21_usascii_y[i] + stb__arial_21_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_21_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_21_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_21_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_21_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_21_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_21_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_21_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_21_usascii_LINE_SPACING
#endif

