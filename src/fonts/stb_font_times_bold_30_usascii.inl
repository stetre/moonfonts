// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_bold_30_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_bold_30_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_bold_30_usascii_BITMAP_WIDTH         256
#define STB_FONT_times_bold_30_usascii_BITMAP_HEIGHT        118
#define STB_FONT_times_bold_30_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_times_bold_30_usascii_FIRST_CHAR            32
#define STB_FONT_times_bold_30_usascii_NUM_CHARS             95

#define STB_FONT_times_bold_30_usascii_LINE_SPACING          19

static unsigned int stb__times_bold_30_usascii_pixels[]={
    0xa8013001,0x20026202,0x98000600,0x44000019,0x7f640019,0xdfff11ff,
    0x000cc019,0x00c00060,0x300026a6,0xa8835000,0x00026600,0x19800035,
    0x40330000,0x3baa00da,0xf910dd03,0x816c403b,0xb8801ffd,0xbcdccdee,
    0xffeb8002,0x2004efed,0xfff11ffe,0x0befca80,0xfbfdb500,0xff8807bd,
    0x7fe75c0f,0x3b6601df,0xf9802dfd,0x74c07e43,0xb800dfbe,0xfc88001f,
    0x4000cffe,0x1efedfe9,0x7ec03f98,0x3fd86e84,0xf9817dc0,0x3f6204ff,
    0x00f6400c,0x2617ff44,0xfd801efe,0x20dff11f,0xfccdaee9,0x5ffb104e,
    0x701efe98,0x0fdc9fff,0xf301fffb,0x007ff21f,0x887d85f5,0x80bfd2ff,
    0xfd0004f9,0x8013fea5,0x3ff22ffb,0x2a02fb82,0x2e3741ff,0x0fea00ff,
    0x2605fff0,0x0f4c005f,0x207fff50,0x6c03fff9,0x0bff11ff,0xf99e47fa,
    0x03fffa87,0xf907fff3,0x8ffe29ff,0x7c45fffa,0x03ffe25f,0x42fc0fc8,
    0x5ffb1ffd,0xc8003740,0x007ffc7f,0x3e637fcc,0x01ff887f,0x46e87ff5,
    0x1fe607fe,0x7d40b260,0x01d10003,0xb80dfff1,0x3f601fff,0x50bff11f,
    0x8f51e4ff,0x6405fff8,0x7fdc1fff,0x44bff33f,0x7fdc7fff,0xd02fff45,
    0xff84f88f,0x209ff91f,0xfd0001fb,0x8037e41f,0xfff87ffc,0xf706fc81,
    0x7f46e89f,0x007fd01f,0x0004f880,0x7ffec1dc,0x37ffcc03,0x3e23ffb0,
    0x92ffd85f,0x7ffec687,0x37ffcc03,0xff87ffe6,0x3637ffc5,0x3ffec5ff,
    0x42fa8bf0,0xff91fff8,0x0009f30b,0x7fb17ffc,0x0bfff200,0xff301ffd,
    0xe85ff905,0x5417fe46,0x2aa601ff,0x103741aa,0x85531397,0x07fffcc4,
    0x81ffffc0,0xbff11ffd,0x797fffb0,0x3fffe618,0x3ffff800,0xa883ffe2,
    0xf0fffe20,0xfffc8bff,0x9df99931,0xf89bfd99,0x09ff91ff,0xff8000dd,
    0x001bf55f,0xf87fffee,0x21bfe05f,0x23741ffd,0x7fe83ffb,0x27ffe440,
    0x3bea01f5,0x244ffcda,0x401fffee,0xfb04fffe,0x217fe23f,0x03fffffa,
    0x401fffee,0x7f44fffe,0x0effb806,0x3ee37ffc,0xffff73ff,0xffffffff,
    0xffb2ffd8,0x0001fb85,0x0eefffec,0x3fffe200,0x200efaaf,0x7ff42ffe,
    0x3fea3740,0x4037fd43,0x17a4fff8,0xffc8ffdc,0xff90dc1f,0x3ff600ff,
    0x23ffb06f,0xffd05ff8,0x3f205fff,0xffb007ff,0x804fc8df,0xffe80dfe,
    0x89fffdc7,0x9999fd99,0x7fc419df,0x4f98bfd3,0xfffb8000,0x5eeeea86,
    0xffffffb8,0x43ffd805,0x546e87fb,0x2ffdc1ff,0x9a7ffc40,0x24ff982f,
    0x23987ffc,0xb006fffe,0x3f60ffff,0x20bff11f,0xdfffffe8,0x037fff40,
    0x547fffd8,0x027d402f,0x7dc3fff9,0x447e81ff,0x2fba603f,0x0006e84f,
    0x2ffffeb8,0x2a03ffa8,0x00efffff,0x3a227fec,0x3f23742f,0x805ffc84,
    0x0f74fff8,0xffd83ffa,0x3ffa1a85,0xfff9006f,0x447ff60f,0x7fe405ff,
    0x3fa0efff,0xffb006ff,0x401f98ff,0x7ffc404d,0x07ffc89e,0x802fa8bf,
    0x983f7018,0x3a603ddc,0x0ffffb8d,0x7ec027c4,0x200effff,0xed885ffc,
    0x27dc5ba2,0x8805ffd8,0x50d94fff,0x2ffe8bff,0x3fff60c8,0xdfffb007,
    0x7c47ff60,0xffe9805f,0x3fff65ff,0xdfffd007,0x200d00f0,0xffffffe9,
    0x643f985f,0x3e60000f,0x7dc7fd44,0x3a0ffb86,0x035c6fff,0x3ff67fa6,
    0x3ff205ff,0xb74fa606,0x3ffa00dd,0x4fff8804,0x45ffd0bb,0x4480fff9,
    0xd007fffc,0x3f60bfff,0x00bff11f,0x43fffff2,0xf007fffb,0x80b0bfff,
    0x2ea20048,0x2e3fff8a,0xffffffff,0xe8007fff,0xf9affc46,0x51ffe64f,
    0x3a2bffff,0xd97fe601,0xf900ffff,0xe8fb20df,0x3607d916,0xff8805ff,
    0xff889b4f,0x41bff60f,0x07fffcc4,0x81ffffc0,0xbff11ffd,0x3ff2f200,
    0x1ffff32f,0x2ffff880,0x00008008,0xea83ffea,0xffeeeeff,0x7dc006ee,
    0xf9affdc1,0x07fff27f,0x7b9ffff9,0x743ffc80,0xffb02fff,0x6e85fb0b,
    0x7fe41fe4,0x4fff8805,0x27ffa8b9,0x1c84fff9,0x402fffd8,0x3606fff9,
    0x0bff11ff,0xffb3c817,0x017ffec9,0x001bffe6,0x7fec0000,0x3f98fd03,
    0x909f3000,0x3ffe29ff,0xb07fffd0,0xd00dffff,0xfffb85ff,0xb87ffb03,
    0x2a3740ff,0x2ffdc1ff,0xaa7ffc40,0xc8b7fdc6,0x81d41ffe,0x6406fff9,
    0x3f602fff,0x90bff11f,0x7ff73c85,0x2037ffcc,0xeb82fffc,0x005b9103,
    0x7c0bff50,0x80017d45,0x2bff906e,0xffb0fff8,0xffe883ff,0xe82a0dff,
    0x7ffc42ff,0xd85ffd02,0x7d46e87f,0x037fd43f,0xf9a7ffc4,0x3b3ffee0,
    0x1260fff8,0x01fffa81,0xd807fff1,0x0bff11ff,0xff73c8d9,0x01fffa81,
    0xf307fff3,0xfff705ff,0x27fd4001,0x0fc87f30,0x501fb800,0x9ffe6bff,
    0x41fffffb,0xbefffffb,0x227fe45c,0x3fe06ff8,0x740ffd87,0x741ffdc6,
    0xfff8807f,0xfff887e4,0x913ffb2f,0xff981c8b,0x17ff441f,0xf88ffec0,
    0x90dfc85f,0x2605fd17,0x7f441ffe,0x7fff701f,0x003fffb0,0xa805ff71,
    0x4003f41f,0xb7f404f8,0x7ff43ff9,0xbeedffff,0x0ffffffe,0xf707ffc4,
    0x0ffe203f,0x8dd0bff2,0xffb82ffc,0x27ffc401,0x21deb8b7,0x440bdfc9,
    0x3bfae204,0x001cffdc,0x3fe23ffb,0xeeffda85,0x64401dfe,0xcefecefe,
    0x03ffe200,0x9301bfe6,0x3f2005bf,0x74002fc0,0xc9ff9806,0xfffc884f,
    0x7fe43fff,0xdf9101ef,0x5c01bfd9,0x87ff707f,0x80fff46e,0x7fc404ff,
    0x0001743f,0xff7000c8,0xfd8003ff,0x80bff11f,0x20004d99,0x018001a9,
    0x026200c4,0x06a0a600,0x2003d500,0x4401cdb8,0x2a2009a9,0x13531001,
    0x2a05fd00,0x3a3743ff,0x03fea07f,0xf987fff0,0x01640000,0x01bfffa0,
    0x3e23ffb0,0x0057005f,0x00000000,0x00000000,0x00000000,0x00000000,
    0x3e603fa8,0x3f23741f,0x261fd407,0x705fff1d,0x0b20001d,0x3fffe600,
    0x47ffa004,0x00006ff8,0x00000000,0x00000000,0x00000000,0x00000000,
    0xfc807f30,0x7f446e84,0xf90fdc02,0x4c03ffa9,0x076a003e,0xfffd8800,
    0x6e40abdf,0xfff11fff,0x0000019b,0x00000000,0x00000000,0x00000000,
    0x20000000,0x3f6601da,0xfb10dd04,0xa96cc019,0x802ff8df,0x2620abeb,
    0x400003db,0x00bceeca,0x00000000,0x00000000,0x00000000,0x00000000,
    0x20000000,0x200aa800,0x006a204d,0x01bdca82,0x676e54c0,0x0000002b,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x06033000,0x809a9880,0x80130001,0x0004401a,0x001a8044,
    0x40204cc4,0x3faa0009,0x7ff4c7ff,0x0180005f,0x2e200260,0x19999bdc,
    0x88015400,0xffff8009,0x5552ffff,0x55545555,0x200b2a0a,0xeffffdb9,
    0x2600e8ac,0xeffdffed,0x71005a8b,0x7d4019fd,0x39dbd702,0xdffeb880,
    0xd8803ec1,0x59befdef,0x4002ffc8,0xff887ffe,0x3ae0005f,0x7ffe4c06,
    0x3bff501e,0x00fffff9,0x3aa037d4,0xf502ffce,0x4fffffff,0x21efffe9,
    0x3fe64fd9,0x3ffee01f,0xfffd711c,0x2b7ff201,0x17fff6a0,0x400bbf20,
    0x229f907c,0xffd101ff,0x7d43ffff,0x30ffcc01,0xfff0bff9,0x7ffe800d,
    0x800bfff0,0x206fffb8,0xfffffffa,0xf07ffcc1,0x220033df,0x3fea06ff,
    0xfb06ff8a,0x89ffffff,0x5b86fff9,0xc827ffe4,0x3ea01fff,0x37ff440f,
    0x8817fa20,0x3e000efe,0x3a1ff985,0xf97bb06f,0x27c49fff,0x7cc0ffa0,
    0x004ffe85,0xff83ffec,0x3fb2005f,0xff106fff,0x8dfffffd,0x7fec6ffd,
    0x1bffa003,0x7fd2fff8,0x55557f10,0xfffd0155,0x7fcc2c81,0x2fffc81f,
    0x7ec0fb80,0x5f8801ff,0x001dff10,0x7ff417cc,0x570fff20,0x6c7fff88,
    0x80bfea06,0x00bc885b,0xf83ffec0,0x4c2005ff,0x19706fff,0x83ffff26,
    0x7fec5ffe,0xdfff9005,0x00bffe60,0x3ea0016a,0xc98343ff,0x04fffb81,
    0xfffb83e0,0x7416e005,0x7e4002ff,0x2e3ffcc0,0xfd8046ff,0xb80fdc6f,
    0x01600eff,0xfb3cb980,0x57ffe0ff,0x7c401cca,0x3e0906ff,0x3ff61fff,
    0x4027fec6,0x506ffeea,0xdb005fff,0x3a001359,0x0012a7ff,0x800ffffa,
    0x5ffff10b,0x7e424400,0x85e8007f,0x7fdc7ffb,0x85ff9007,0xfff503f8,
    0xaa88a03d,0xbffb01aa,0x20fffdbd,0xfffddfff,0x37ffc06f,0x51fff200,
    0x2ffd8fff,0x7ff4fc40,0xcfffca86,0xffff100a,0xff7007ff,0x1000365f,
    0x0003ffff,0x007fffea,0x233ffe00,0x1fcc00aa,0x3ee3ffe4,0x2fe800ff,
    0x3fe20dd0,0x2201dfff,0xfb85fffc,0x1fffee4f,0x4467fffc,0x3fe05ffe,
    0x7fdc006f,0xf11ffc85,0x3a7d00bf,0x7ffc46ff,0xf700ffff,0x5fffffff,
    0x477ffc40,0xfffa8006,0xff90000f,0xa80001ff,0xffffefff,0x3603ee04,
    0x7ffdc7ff,0x0bff6201,0xffc807dc,0x100cffff,0xff98bfff,0x83fff41f,
    0x7fd45fff,0x0dfff02f,0x303ffd80,0x007df9fd,0x837ff4b9,0x7402fffa,
    0xffffffff,0x3fff201f,0xffd8002d,0x3f60006f,0xd80007ff,0xffc8afff,
    0x3a0dd04f,0x7ffdc7ff,0xfffff903,0x6c07f309,0x2fffffff,0xfb8bfff0,
    0x3ffec0ff,0x7c45fff8,0xdfff03ff,0x037fc400,0x20013397,0x1bffa0e9,
    0x2017ffd4,0xfffca998,0x3fe206ff,0x7fb100ff,0x007fffe8,0x01ffffa0,
    0x83fffa00,0x7c40fffd,0xb8ffff03,0xf9303fff,0xbd05ffff,0xfffffc80,
    0x5fff83ff,0x7ec3ffe4,0x8bfff07f,0xff05fff8,0x7fd400df,0x1000fd00,
    0x06ffe83f,0x0005fff5,0x807fffea,0x3f604ffd,0x3fff23ff,0x3ff20007,
    0x3333207f,0xfff3cccc,0x43fffa8f,0xfffd01fb,0x402fffb8,0xc84fffe8,
    0x7fec400f,0x7fc0ffff,0x43fff45f,0xfff07ffd,0x20dfff0b,0x3a006fff,
    0x5bff302f,0x36013555,0x506ffe83,0x40005fff,0x2602fff9,0x3ffa01ff,
    0x3fffea5f,0xfff50001,0x7ffcc01f,0x1fffa1ff,0x6d89fff3,0xf71fff60,
    0xff1001ff,0x185f30df,0x7ffffd30,0x7f45fff8,0x07ffd87f,0xfff0bfff,
    0x01bffe09,0xff501fdc,0xbfffffff,0x77777cc1,0x42effffe,0x0002fffa,
    0x3a00ffd4,0x37ffd406,0x005ffff1,0x0bfffe20,0xd8bfff90,0x3fe60fff,
    0xc813e24f,0x3ffdc7ff,0x20dffb00,0xf700645f,0x5fff8dff,0x3607ffe4,
    0xbfff07ff,0xf02fff88,0x7f300dff,0xffffe880,0x2a5fffff,0xffffffff,
    0x7fd43fff,0x7f80002f,0x32003b80,0x027fff44,0x07fffd00,0x5c5fffc8,
    0x3fe21fff,0xa807ea2f,0x37fdc7ff,0x209ff500,0x2e01e47c,0x2fffc6ff,
    0xfb07ffea,0x17ffe0ff,0x3e03fff1,0x274406ff,0x3bfe60c8,0x27fffeee,
    0xfffffffa,0x7d43ffff,0x400802ff,0x000d805e,0xffff307e,0xf8891003,
    0x3f200fff,0x7ffcc5ff,0xd83ffe22,0x20fff807,0x80444ffc,0x5f501ff8,
    0xff100764,0xf85fff89,0x3ffe64ff,0xa8bfff07,0x3ffe04ff,0x55576c06,
    0x17ee6dca,0xfd006fb8,0x3ffea0df,0x4177e402,0x997e41e9,0x5c16e004,
    0x74c06fff,0x05fff983,0x3217fff2,0x17fe65ff,0x3ff9009f,0xff307fec,
    0xf809f505,0xfa817f24,0x42fffc1f,0xeeaafffc,0x7fc0bfff,0x817fa0ff,
    0x2e06fff8,0xffffffff,0xfa80ffa5,0x0dffd003,0xd00bffea,0x36a3bfff,
    0x1cb7fc40,0xfa807900,0x2e61beff,0x3ffa602e,0x5fffc81c,0x3ee1ffb0,
    0xd8017d46,0xa85ff13f,0xbd31dfff,0x7fe4fb00,0x21ff440d,0xf707fff8,
    0xbffb1dff,0xfd8df817,0x2600ceec,0xfa80ffff,0xffffffff,0x226ffea3,
    0x2003fba8,0xff506ffe,0xffd9807f,0xfd00ceff,0x026009bf,0x7ff65c40,
    0x5000dffe,0xfd99dffd,0x7644039d,0x3e40cfce,0x3fb7f600,0xfffffb01,
    0x47ea005d,0xdcdfdadc,0x7ff4c1ef,0x43300dff,0x2a20c009,0x7ffe5c01,
    0xff10ceff,0xffffffff,0xdedcb885,0x7f4000ab,0xffffc86f,0x099800df,
    0x001dc980,0x13510000,0x9a988000,0x01980009,0x04c000aa,0x000d4c40,
    0xa9818d44,0x0000000a,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x55530002,0x2072e635,0x5ffffffb,0xffffffb1,
    0x4ffeb839,0xbffffff9,0xffffb507,0x3ffff261,0x7f643dff,0x32e604ef,
    0x6440910b,0xcefffffd,0xfffffd51,0x3bfff601,0x7fffff44,0xfb35ffff,
    0xdfffffff,0xec8807bd,0xdeffffff,0xffffb01c,0x7ffe4c00,0xfa800fff,
    0x004effff,0xc8800b20,0xfffcdfff,0xffffa86f,0x4ffffa83,0xff10fe20,
    0xbf500bff,0x7ffff301,0xf300ee80,0xff7db39f,0x3ffff600,0xdffff900,
    0x22077440,0xffffffff,0x7ffcc2ff,0xdffd510f,0xffff8803,0x0efffdaa,
    0x8007fff8,0x03fffff8,0x05ffffe8,0x002fc400,0x233fffe2,0xfe84ffe9,
    0xfffd05ff,0xfc83c40d,0x0ea806ff,0x05ffff10,0x9ff104c8,0x803fffc4,
    0x7c06fffb,0x3204ffff,0xfffffa85,0x440fffff,0x7c40ffff,0x7f400fff,
    0x3ffea2ff,0x007ffd86,0x0dfffbf0,0x4fffde98,0x0ffdc000,0x71bffe00,
    0xffa83fff,0xfffa80ff,0x2209700f,0x6c02ffff,0x0ffffc03,0x3fa212e0,
    0x03fff41f,0x406fffb8,0x03ffffef,0x9dff9095,0x20bfb999,0xfc80ffff,
    0x7ff403ff,0x3fffe22f,0x003ffec2,0x2ffff9f8,0x3fff6f20,0x7ff40004,
    0x2fffc004,0x3e0fffe6,0xfff03fff,0xd807a07f,0x1e205fff,0x007fffe0,
    0x1fff5097,0x7007ffe8,0x9f80dfff,0xa81fffff,0x3f202e84,0x01ffff03,
    0xe80dfff5,0x7fec2fff,0x03ffec4f,0xbfffb780,0x3ff63e20,0x3ea0004f,
    0x3e000fff,0x7ffc45ff,0x06fffc84,0xd10dfff9,0x1ffff980,0xfff00770,
    0xb84b803f,0x7ffd87ff,0x0dfff700,0xfffff578,0x40284a81,0xffff00ff,
    0x0dfff701,0x742fffe8,0x7fec3fff,0x80179717,0x01ffff57,0x13fff697,
    0xffffe800,0x17ffe003,0x3e61bffe,0xfff81fff,0x401e41ff,0x1d04fffe,
    0x03ffff00,0x7ffd84b8,0x7007ffd8,0x2780dfff,0x546ffffb,0x02fcc004,
    0xf901ffff,0xffe80bff,0x3fffe22f,0x74fffec0,0x9e00efff,0x1e84fffe,
    0x0009fffb,0x1fffefa6,0xf85fff80,0xfffd05ff,0xfffdda89,0x7dc00745,
    0x02540fff,0x401ffff8,0x87ffe84b,0xf7007ffd,0x6c780dff,0x12a4ffff,
    0x7c07f900,0x7fc40fff,0x7ff400ff,0x17ffea2f,0x267bfff6,0xb9e04fff,
    0x9660ffff,0x0004fffd,0x5ffff15b,0x117ffe00,0x3ea09fff,0x2a760fff,
    0x0b50ffff,0x21ffffc0,0xffff000e,0xfc84b803,0x07ffd87f,0x80dfff70,
    0x7ffff447,0xfe800952,0x2bfffe00,0x1efffb99,0xabfffe80,0xfb03fffd,
    0x2fff41ff,0x7fffc4f0,0xfffd8b63,0x32688004,0xff006fff,0x2fff88bf,
    0x4cffffe0,0x6cffffe6,0x3fff2002,0xff8016a6,0x425c01ff,0x7ec0fffa,
    0xfff7007f,0xff88780d,0x004a9fff,0xfff01be6,0x5fffffdf,0x77fff400,
    0x3600cdee,0x37fec7ff,0x6fffc8f0,0x4fffd8d1,0x3e63c800,0xff801fff,
    0x07ffdc6f,0x32dfff90,0x23bfff23,0x7ffc4006,0x7c003b2f,0x25c01fff,
    0x3a17ffc4,0xff7007ff,0xf50780df,0x0097dfff,0x3fe01fe4,0xffff88ff,
    0x3fffa005,0x3ffec002,0x4781fff6,0x3b9ffff8,0x0027ffec,0xfffd03e2,
    0xbffff00b,0x805ffd31,0x0eaffff9,0x133fffe6,0x37fff600,0x7ffc0069,
    0xc81e401f,0xffd9afff,0xfff7007f,0x3ee0780d,0x2004ffff,0x7ffc00fe,
    0x5ffff70f,0x0bfffa00,0xd8fffb00,0x361e07ff,0x6c0edfff,0x5c004fff,
    0x0ffffa84,0x7d6fffc0,0xfd003eff,0xffd09fff,0xf30003ff,0x8005bfff,
    0x6401ffff,0x3ffff203,0x2887ffd9,0x2037ffdc,0x7fffec07,0x00df3004,
    0x7ec1ffff,0xfe800fff,0x7ec002ff,0x03ffec7f,0xbffff50f,0x009fffb0,
    0xeeeeeee8,0x7c04ffff,0x000665ff,0x701ffff5,0x4000dfff,0x8006fffe,
    0x6c02fffd,0x3f619802,0x737fcc7f,0x0780bfff,0x004fffe8,0xfff007f9,
    0x7fffc41f,0x2fffe806,0x23ffec00,0x41e07ffd,0xfd81fffe,0x12a004ff,
    0x00ffffb8,0x00017ffe,0x7c417ffe,0x2a0003ff,0xc8003fff,0x3e203fff,
    0x7ffd8000,0xfb87ffe4,0x403c04ff,0xd004fff8,0xffff001f,0x3ffffa81,
    0x017fff40,0xfb1fff60,0x5c07c0ff,0xfffb06ff,0x100f4009,0x7c07ffff,
    0xc80005ff,0x3ff602ff,0x7ffc0000,0xfff98000,0x4000f606,0x7fdc7ffd,
    0x80bffee5,0xff9801f8,0x006f9804,0xf903ffff,0x7f403fff,0x7ec002ff,
    0x03ffec7f,0x05ff101f,0x4013fffa,0xfffc807a,0x017ffe07,0x501be600,
    0xf90000bf,0x7fd40009,0x0bb511df,0x23ffec00,0x3ffa2fe8,0x801fd404,
    0x3fb804fb,0x2ffff980,0x01ffffd0,0x000ffffe,0x7fc1fffd,0x03f980ff,
    0x7fffc0f9,0x00ff8805,0x427fffd4,0x0006fff9,0x05f007d0,0x001f1000,
    0xffffe980,0x7c0003ff,0x7e440fff,0x2a03efed,0x802dfffe,0x01fe804c,
    0x3ffffb26,0x7ffcc2cf,0xffd913ff,0xb0079fff,0xfb1dffff,0x3261dfff,
    0x2442dfff,0x3ffffae2,0xfff703df,0xfec8819d,0xb30dffff,0x0059dddd,
    0x01800980,0x00006000,0x00035530,0xdeeeeda8,0x000a9881,0xa8018000,
    0x00000002,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x30000000,0xbffffff9,
    0x3fb26009,0x542dffff,0x81dffffd,0xfffffffc,0x01ffffff,0x7ff64c24,
    0xfb74dfff,0x459fffff,0x4007fffe,0xfffffec9,0x5fffffff,0xffffff93,
    0x9fffffff,0x7ffffed4,0x00aceeff,0x317fffa6,0xfffffff9,0x7c039ddf,
    0xffffffff,0x0fffffff,0xffffffd3,0x7fff5c3b,0x3fffee3e,0xfd883eff,
    0x7fc40eff,0xf10004ff,0xfc809fff,0x2fbf601e,0x27fffcc1,0xff881b20,
    0xfff704ff,0x1fffe03f,0x7fffc400,0xbff73313,0x12ffff88,0x509ff933,
    0x9535ffff,0x7c407fff,0xfff305ff,0xfffd535f,0x22b7fe09,0x988ffff8,
    0x7fec0ffc,0x0ffa05ff,0x07ffff44,0xff80fea0,0x3a0002ff,0x3e203fff,
    0x8077400d,0x200ffffe,0x7ffc06f9,0xffff303f,0x01fffa01,0x03fffe80,
    0xffff0bd1,0x2213e605,0x7e40ffff,0x3ffe05ff,0x07fffe05,0x9f09fffb,
    0x40ffff88,0x7ffc40fa,0x809f00ff,0x403ffff9,0x7fffc05b,0x3ffa0002,
    0x007d303f,0x7ffdc03e,0x1bfe602f,0x205fffd0,0x3607fff9,0x3a0007ff,
    0x16a03fff,0xc80bfffe,0x0ffff884,0xf04fffc8,0x7ffc0bff,0x3fffd41f,
    0x3ffe207c,0xfa80f80f,0x05c85fff,0x01ffffb0,0xfff007e2,0x7f40005f,
    0x02fa83ff,0x7ffc4160,0x3ffea05f,0xffe81aae,0xffff302f,0x003ffec0,
    0x887fffd0,0xffff0b10,0x22126385,0xf880ffff,0xfff81fff,0x07fffe05,
    0x583ffff3,0x80ffff88,0xffff900c,0x88007547,0x9904ffff,0x05ffff00,
    0x1ffff400,0x010007b2,0x403ffff6,0xfffffffa,0x02fffe85,0x6c0ffff3,
    0x2aaa27ff,0xfffd00aa,0x3e022a87,0x31662fff,0x01ffff10,0x3e0ffffa,
    0x3ffe05ff,0x37ffd41f,0x0ffff880,0x7fff4400,0x4000e98f,0x4c0ffffc,
    0x5ffff006,0x7fff4000,0x0001bb13,0x0ffffea0,0xd01bffa0,0x3e605fff,
    0x3ff607ff,0x016ffd47,0x2d87fffd,0x717fffc0,0xffff100b,0x17fff201,
    0xff817ffe,0x7ffec1ff,0xffff1003,0xfff50001,0x10003dbf,0x2e89ffff,
    0x05ffff00,0x5ffff400,0x00005fe8,0x00dffff1,0xfd01bffa,0x3fe605ff,
    0x1fff607f,0x3ffa013e,0xf00bee3f,0x17a25fff,0x03fffe20,0x7c3fffdc,
    0x3ffe05ff,0x7fffb31f,0x7fffc400,0xfff90000,0x7dc0009f,0x00b51fff,
    0x0017fffc,0xffbfffd0,0x900007ff,0x2003ffff,0x7f406ffe,0xeeeeeeff,
    0x3607fffe,0x8026c7ff,0xfecdfffe,0x7fffc02f,0x8805ffdd,0xf500ffff,
    0xfff83fff,0x3ffffe05,0x000dffff,0x007fffc4,0x1ffffd00,0x7fff4000,
    0x3e001e8d,0x20002fff,0xffeefffe,0x260002ff,0x2005ffff,0x7f406ffe,
    0xaaaaacff,0x3607fffc,0x801327ff,0xffccfffe,0x7fffc02f,0x8805fecc,
    0xf500ffff,0xfff85fff,0x2bfffe05,0x0dfffdaa,0x1ffff100,0x7ffcc000,
    0x3ea0005f,0x4004dfff,0x0002ffff,0x3e2ffffa,0x0000ffff,0x001ffffd,
    0x3a037ff4,0xff302fff,0xbffec0ff,0x3fa004fc,0x00bea3ff,0x3a25ffff,
    0xffff8805,0x1ffff700,0x3e05fff8,0x7fe41fff,0xff8800ff,0x2a0000ff,
    0x003fffff,0x03ffffa0,0x05ffff00,0x3fffa010,0x1dffff33,0xffffb800,
    0x3ffa0c03,0x17fff406,0x207fff98,0xfffcfffd,0x7fffd001,0x7ffc02c8,
    0x22016a2f,0xf900ffff,0xbfff0fff,0x40ffffc0,0x8805ffff,0x0000ffff,
    0xffffd3d3,0x3fea0001,0xfff8006f,0xfd05802f,0x7ffdc7ff,0x3fe2005f,
    0x21d406ff,0x7f406ffe,0xfff302ff,0x67ffec0f,0xe800efff,0x01543fff,
    0x588bfffe,0x7fffc438,0x0bfffb00,0x7fc0bfff,0xfffd81ff,0xffff8807,
    0x31e88000,0x000dffff,0x001bffea,0x100bfffe,0x0ffffa0d,0x007ffffb,
    0x007ffff6,0x06ffe85d,0x9817fff4,0x3f607fff,0x09fff77f,0x887fffd0,
    0x17fffc01,0xff88b10a,0xffff00ff,0x40bfff03,0xfc81ffff,0xff8807ff,
    0x3d8000ff,0x01ffffdc,0x037ffd40,0x017fffc0,0x7fff41b2,0x7ffff443,
    0x7fffd402,0x3a0fcc04,0xfd0516ff,0x3fe605ff,0x9fff607f,0x7402fffd,
    0xf8003fff,0x1e402fff,0x203fffe2,0xff04fffb,0x7fffc0bf,0x05fffe81,
    0x00ffff88,0xffe82e40,0x7d4000ff,0xff8006ff,0x17ea02ff,0x4c1ffff4,
    0x201fffff,0x5406fffe,0x7ffdc0ff,0xffff80eb,0x1ffff303,0xf89fff60,
    0x3fa00fff,0xff8003ff,0x0bee03ff,0x883ffff1,0xff00dffe,0x7fffc0bf,
    0x0ffffd41,0x0ffffc40,0x2601f700,0x4006ffff,0x4007fffb,0x20dffff8,
    0x884ffb98,0xfb04ffff,0xf905ffff,0xb3105fff,0x3fb20fff,0xffff882e,
    0x3ffff704,0xb83fffa0,0xff105fff,0xf88009ff,0x2a60dfff,0x7fcc1ffe,
    0xfff513ff,0x3fffc407,0x14ffff88,0x005dfff7,0x00bfffea,0x3f6037dc,
    0x32004fff,0x9800ffff,0xffffffec,0x3fffffff,0x3ffffb22,0x3fff22df,
    0xf31dffff,0xffffffff,0x0fffffff,0xffec8808,0xf953cfff,0x439fffff,
    0xb0dffffd,0x221dffff,0xdfffffec,0x7ff64403,0xffffffff,0xff930fff,
    0xbdffffff,0xfffe9805,0xffd930df,0x9ddfffff,0x3ff26005,0x701cffff,
    0x989bffff,0xeffffffd,0xfffb7101,0x00057dff,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x93000000,
    0x7bffffff,0x00001300,0x102c9820,0x65c03797,0x2aa238ac,0x555512aa,
    0x54000085,0xa88aaaaa,0x5512aaaa,0x2aaaa615,0x02aaa62a,0x002b32e6,
    0x2006f2e6,0x2a01bcb9,0x2f262aaa,0x44aaaaa0,0xaa880bcb,0xaaa9aaaa,
    0x4aaaaa1a,0x6541bcb8,0x7c40002c,0xf1004fff,0xda800009,0xa83fff37,
    0x40effadf,0x45feabfe,0x3ee6fffa,0x067dc6ff,0x7fff4c00,0xefffc88c,
    0x74c7f711,0x3621efff,0x5576c44f,0x3ee02ffe,0x2e03fd9d,0x80ffbaef,
    0xff57fff9,0x7fffd45f,0x40ffffe9,0x8bffffb8,0x3ea0bfe9,0xfffe9fff,
    0x9ffffb2f,0xf807dd30,0xf1003fff,0xf7100009,0x3fff29ff,0x7e43fee4,
    0xdd1bea4f,0xff8dfff0,0x6fff4c6f,0x7ffd4002,0x263fff44,0x86fffa86,
    0x2a3ff85b,0xffb80fff,0xf903ff10,0x4077ec5f,0xfff9fffd,0x77fff43f,
    0x704fff99,0x0be29fff,0x44f7ffec,0xc8befffe,0x7ff41fff,0x3fffe01f,
    0x009f1002,0x5f7fecc0,0x447ffe60,0x9ffe67ff,0x21a62ffd,0x7ff46ffe,
    0x7fffb306,0x1bffa001,0x15c5fffd,0x6c0fffe8,0xf337fd42,0x6ff885ff,
    0x3fe237fc,0x217fee0f,0xc88efffc,0x07ffec0d,0x7f40dffd,0x3203c8ff,
    0x3fee1fff,0x0bffe63f,0x7c09ffff,0xf1002fff,0xfeb88009,0x872602df,
    0x1fe45ffb,0x4149fffb,0x7ff46ffe,0x7ff5c406,0x7ffdc02d,0x4bfffd11,
    0x7fff500e,0x37fcc344,0xfc85fff3,0x907ffc4f,0xfffa8fff,0x01fffe40,
    0x3f63ffec,0x3ffea06f,0x3ffe406d,0xf987ffee,0x7ffdc3ff,0x0bfffe05,
    0x98027c40,0x000cfffc,0x500bffb0,0x201dffff,0x7ff46ffe,0x3ff6a006,
    0xfff880be,0x1fffb575,0x7ffe80b3,0x985cc0ee,0x7ec2fffd,0xfffcccef,
    0xf51fffa1,0xfffc83ff,0x47ffd801,0x7f407ffd,0x7fe402ff,0x10fffd47,
    0x3a107fff,0x0bfffe03,0x26027c40,0x0002effe,0xd006ffe8,0xd03dffff,
    0x6ffe8dff,0xfffc8800,0x68fffd85,0x0595fff5,0x1d2fffb8,0xffbfd980,
    0x56fff42f,0x3e0aaaaa,0x7ffd46ff,0x007ffe43,0x3f63ffec,0x7ffcc07f,
    0x23ffe405,0x3e21fffa,0x01f103ff,0x2a17fffc,0xffeeeeee,0xf55eeeee,
    0x000039ff,0x2200fffd,0xe87ffffd,0x37ff46ff,0x5ffeb800,0x24cfffa8,
    0x8806dfff,0x4049efff,0xfff98efb,0x802fff42,0x7fd46fff,0x03ffe43f,
    0x7ec7ffd8,0xfffd807f,0x51fff201,0x7fc43fff,0xf809903f,0x7fdc2fff,
    0xffffffff,0x3ae27fff,0x20002dff,0x0401fffd,0xe85ffff7,0x37ff46ff,
    0x9fff9100,0x0ffffc03,0x2009fff9,0x200efffc,0xfff31ffd,0x007ffd85,
    0xffa8dffb,0x03ffe42f,0x7ec7ffd8,0xfffe807f,0x51fff206,0x7fc43fff,
    0x4016443f,0x1002ffff,0xfd98009f,0x3f200bff,0x0dfff70c,0x3ffe60d8,
    0x3a37fec3,0xfda806ff,0xfc800bef,0x0fffcc6f,0x05fff980,0xff99ffe2,
    0x1fffe42f,0x8fff704c,0x7e40fffa,0xfffb007f,0x6407ffd8,0x902fffda,
    0xfffa8fff,0x50fffe21,0x3fffe001,0x009f1002,0x37ffae20,0x89fffd42,
    0x3224ffff,0x1ffb8bb0,0xff53ffe4,0x3fee20df,0x7cc001df,0x007fe83f,
    0xf9017fec,0xfffb35ff,0x3ffff887,0x1fff1122,0x7ec27fdc,0xfffb007f,
    0x2a07ffe8,0x20dfff15,0x3ee0fffd,0x3ffe61ff,0x3ffe0004,0x09f1002f,
    0xdffb5000,0xa93ffee7,0x1fefffff,0x86fb8ff2,0xeeccfffa,0x7fec47ff,
    0x3a0000be,0x004fb80f,0x3ee037d4,0xfffaffff,0x7fffdc4e,0xffa80ede,
    0x3a03bfa3,0xfe800fff,0x3fffa0ff,0x3f61f980,0xfffe84ff,0xa8fffee1,
    0x20005fff,0x1002ffff,0x4400009f,0x1ffd17fb,0x1dffff98,0x77eff764,
    0x1bfff900,0x2e1bfffd,0x700002df,0x0007e20d,0xffb100fa,0x037fee19,
    0x077fffee,0x4fedfe98,0x5dffffb0,0x77fffec0,0x0dffffd8,0xd73bffb3,
    0x7ecbffff,0xffa9efff,0xfffaafff,0xff0004ff,0x3e2005ff,0x85000004,
    0x18054401,0x262002a2,0x00013000,0x00a01880,0x008004c0,0x000a2002,
    0x00000351,0x00000000,0x00000000,0x2005ffff,0x000004f8,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,
    0x04c005ff,0x55555540,0x2601aaaa,0x80198000,0xb8301809,0xffffffff,
    0x407fffff,0x2201bbb8,0x9911800a,0x26399999,0xeeeeeeee,0x004eeeee,
    0x00000000,0x00000000,0x88000000,0x0004ffff,0xbabcfe80,0xf501ffff,
    0x06f8800d,0xff98ffe4,0xda8ffec5,0xdddddddd,0xfb15dddd,0x986ffb89,
    0x102dfffd,0x3ffffe69,0xdddd32ff,0xdddddddd,0x0000009d,0x00000000,
    0x00000000,0x7ff64400,0x0002cfff,0xfff90ba0,0x007fdc09,0x2207ff90,
    0xfff94fff,0x00fffe61,0x0fffdc00,0x9dd03fee,0x239ffffb,0xffff31d9,
    0x00005fff,0x00000000,0x00000000,0x00000000,0x40000000,0x07fffc45,
    0x132fc426,0x07ff7cc0,0xff74fff8,0x0fffe21f,0x7ffe4000,0x1a63fc82,
    0xfffffb51,0x8888888d,0x00000000,0x00000000,0x00000000,0x00000000,
    0x36040000,0x7fd43fff,0x0dfb15b4,0x827e4fec,0xdff52ffe,0x9931fff8,
    0x99999999,0x3fe69999,0x02a97206,0x000b76e2,0x00000000,0x00000000,
    0x00000000,0x00000000,0x7fd40000,0xdfff986f,0x505ffebc,0x203fe29f,
    0x9ff10ffc,0x3fee7fd8,0xffffffff,0x400c7fff,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xfffe8000,0x9d335101,0x07f40333,
    0x8df30bf5,0x22fdc2fe,0x88888888,0x00088888,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xfffc8000,0x3dae9804,0x7f41fdc0,
    0x07e44f81,0x00000fe2,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x3e200000,0x2e040fff,0x101df77f,0x21be60df,0x1e834c2d,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x43fffd80,0xf8aff42a,0x202fc83f,0x0c04c2fd,0x00000018,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xfffa8000,0x36a0fc46,
    0x066036e1,0x00001310,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x43fffd00,0x00000fd9,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x3fbfffee,
    0x0000ffff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_bold_30_usascii_x[95]={ 0,2,2,0,1,1,1,1,1,0,1,0,0,0,
1,0,0,1,0,0,0,0,1,0,0,0,2,2,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,
0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,1,-1,0,1,0,1,1,1,0,1,0,0,
-1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,2,2,1,0, };
static signed short stb__times_bold_30_usascii_y[95]={ 24,5,5,5,5,5,5,5,5,5,5,7,19,16,
19,5,5,5,5,5,5,6,5,6,5,5,11,11,8,12,8,5,5,5,6,5,6,6,6,5,6,6,6,6,
6,6,6,5,6,5,6,5,6,6,6,6,6,6,6,6,5,6,5,28,5,11,6,11,6,11,5,11,6,5,
5,6,6,11,11,11,11,11,11,11,7,11,11,11,11,11,11,5,5,5,14, };
static unsigned short stb__times_bold_30_usascii_w[95]={ 0,5,11,14,12,25,21,5,8,8,12,15,6,9,
5,8,13,11,13,12,13,13,12,13,13,13,5,6,15,15,15,12,24,20,18,18,19,17,16,20,21,10,14,22,
18,26,19,20,16,20,20,13,18,20,20,27,20,20,18,7,8,7,13,15,7,13,14,11,14,11,12,13,15,8,
8,16,8,21,15,13,14,14,12,9,9,15,14,20,14,14,12,8,2,8,15, };
static unsigned short stb__times_bold_30_usascii_h[95]={ 0,20,10,20,21,20,20,10,25,25,11,16,10,4,
6,20,20,19,19,20,19,19,20,19,20,20,14,18,14,7,14,20,25,19,18,20,18,18,18,20,18,18,19,18,
18,18,19,20,18,24,18,20,18,19,19,19,18,18,18,23,20,23,11,2,6,14,19,14,19,14,19,19,18,19,
25,18,18,13,13,14,19,19,13,14,18,14,14,14,13,19,13,25,25,25,5, };
static unsigned short stb__times_bold_30_usascii_s[95]={ 255,145,74,178,111,193,219,68,31,1,41,
12,246,132,102,54,63,152,164,77,192,219,41,157,241,164,44,248,28,86,88,
151,49,1,175,1,146,128,111,20,72,1,122,20,1,225,137,124,192,74,171,
99,194,86,65,37,213,234,43,103,90,95,54,142,108,140,137,50,122,154,206,
178,209,113,40,94,166,224,193,166,22,107,180,62,62,72,125,104,209,233,28,
22,19,10,116, };
static unsigned short stb__times_bold_30_usascii_t[95]={ 1,1,102,1,1,1,1,102,1,1,102,
87,87,102,102,27,27,27,27,27,27,27,27,48,1,1,87,27,87,102,87,
1,1,48,68,27,68,68,68,27,68,87,48,68,68,48,48,1,48,1,48,
27,68,48,48,48,68,68,68,1,27,1,102,102,102,87,27,87,27,87,27,
27,48,27,1,68,68,87,87,87,48,48,87,87,68,87,87,87,87,27,102,
1,1,1,102, };
static unsigned short stb__times_bold_30_usascii_a[95]={ 108,144,241,217,217,433,361,120,
144,144,217,247,108,144,108,120,217,217,217,217,217,217,217,217,
217,217,144,144,247,247,247,217,403,313,289,313,313,289,265,337,
337,169,217,337,289,409,313,337,265,337,313,241,289,313,313,433,
313,313,289,144,120,144,252,217,144,217,241,192,241,192,144,217,
241,120,144,241,120,361,241,217,241,241,192,169,144,241,217,313,
217,217,192,171,95,171,225, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_bold_30_usascii_BITMAP_HEIGHT or STB_FONT_times_bold_30_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_bold_30_usascii(stb_fontchar font[STB_FONT_times_bold_30_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_times_bold_30_usascii_BITMAP_HEIGHT][STB_FONT_times_bold_30_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_bold_30_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_bold_30_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_bold_30_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_bold_30_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_bold_30_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_bold_30_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_bold_30_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__times_bold_30_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__times_bold_30_usascii_s[i] + stb__times_bold_30_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__times_bold_30_usascii_t[i] + stb__times_bold_30_usascii_h[i]) * recip_height;
            font[i].x0 = stb__times_bold_30_usascii_x[i];
            font[i].y0 = stb__times_bold_30_usascii_y[i];
            font[i].x1 = stb__times_bold_30_usascii_x[i] + stb__times_bold_30_usascii_w[i];
            font[i].y1 = stb__times_bold_30_usascii_y[i] + stb__times_bold_30_usascii_h[i];
            font[i].advance_int = (stb__times_bold_30_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__times_bold_30_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_bold_30_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_bold_30_usascii_s[i] + stb__times_bold_30_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_bold_30_usascii_t[i] + stb__times_bold_30_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_bold_30_usascii_x[i] - 0.5f;
            font[i].y0f = stb__times_bold_30_usascii_y[i] - 0.5f;
            font[i].x1f = stb__times_bold_30_usascii_x[i] + stb__times_bold_30_usascii_w[i] + 0.5f;
            font[i].y1f = stb__times_bold_30_usascii_y[i] + stb__times_bold_30_usascii_h[i] + 0.5f;
            font[i].advance = stb__times_bold_30_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_bold_30_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_bold_30_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_bold_30_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_bold_30_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_bold_30_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_bold_30_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_bold_30_usascii_LINE_SPACING
#endif

