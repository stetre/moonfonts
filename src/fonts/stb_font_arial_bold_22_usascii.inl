// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_arial_bold_22_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_arial_bold_22_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_arial_bold_22_usascii_BITMAP_WIDTH         256
#define STB_FONT_arial_bold_22_usascii_BITMAP_HEIGHT         76
#define STB_FONT_arial_bold_22_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_arial_bold_22_usascii_FIRST_CHAR            32
#define STB_FONT_arial_bold_22_usascii_NUM_CHARS             95

#define STB_FONT_arial_bold_22_usascii_LINE_SPACING          14

static unsigned int stb__arial_bold_22_usascii_pixels[]={
    0x9981a880,0x440aa201,0x40055029,0x00000098,0x98800180,0x30198801,
    0x01988013,0x10000000,0x08815455,0x18002a60,0x10001000,0x054c0033,
    0x3f200010,0x3f21be27,0x86f980df,0x7d40fffa,0x3fb6e204,0x3203deff,
    0xff90ffff,0x03ea01ff,0x7ffffe40,0x83ff901e,0xfc882ffa,0x400dffff,
    0x001cffea,0x9f705ff7,0xffb11fe6,0x801fd01b,0x01dfffd9,0x05eff5cc,
    0x3fffff20,0x4c1fd804,0xfc82effe,0x363fe40f,0x27ffe42f,0x7ffc37cc,
    0xb80ff40f,0xdcbcefff,0xfff905ff,0x3ffff21f,0x67ffecc0,0xffffd301,
    0xf307ffff,0x987fd89f,0xfffffffe,0xffff903f,0xff7001ff,0x3ea7fb05,
    0x1fe5fe45,0x3f600fea,0x7c06fecf,0x105fffff,0xfffffffd,0x7cc7f80d,
    0x644fffff,0x2154c0ff,0x0bfd06fa,0x2ff98df3,0xdfb06fa8,0x17f22015,
    0xff90ffa8,0x3ffffe20,0x9fffd06f,0x03fffd73,0x27fc4dfd,0x5ce7fff4,
    0x7c41fffe,0x03ffa9ef,0xfe82ffb8,0x8fe89f91,0x007f46f9,0x7fc4bfe6,
    0x715ff501,0xdffb01ff,0x07ffd737,0x5dfd1be6,0x54c1ffd5,0xff819882,
    0xf986fc83,0x7407fcc6,0x20efb83f,0xf71310a8,0x643fea09,0xf5df707f,
    0xffb85ff7,0x86ffb80d,0x3ff51ffb,0xb80dffb8,0x07fe45ff,0xff700577,
    0x33ff32e5,0x5fe2dfec,0x00fea7f8,0x7fd57fe2,0xff8dfb01,0x4c2ffd43,
    0x49f706ff,0x3fea4ff8,0x3f206624,0xfc86fc87,0x7d46f987,0x207fc40f,
    0xffd31ff8,0x1f69ff7f,0x7fc87fd4,0x51f37fd0,0x01ffd813,0xff103ffa,
    0x3f61bf69,0x83ffa01f,0x2e0006fe,0xffffd2ff,0x74bfffff,0x3fa5f98f,
    0xf9ffb000,0x33fe40df,0x1ffd85ff,0x17ec0150,0x7fc45ff5,0xf903ff25,
    0xf70ff70f,0xfa8df30f,0x543fd40f,0xb7bff32f,0x07ea5fff,0x3fe43fea,
    0x00faefc8,0xff901ffa,0x3fedfb03,0x6407fe83,0x2b7fe1ff,0xf7000cfe,
    0x3bfb2e5f,0x2e2cffdc,0x7f53fddf,0x7fffc400,0x6fff4405,0x07fe85ff,
    0xf983fe00,0xc9bfe23f,0x43fe40ff,0x7fd40ffa,0x3f237cc1,0x7d86fb87,
    0x1ffd17f6,0x3fea0fe6,0x3ea0ff90,0x3fe01fff,0x41ffdc06,0x80ffcffa,
    0x7fdc06ff,0xffffff13,0xff7003ff,0xbf53fd85,0x747dd710,0xffb1000f,
    0xff1001ff,0xdff01fff,0x21be2000,0xfff90eff,0x3f207fe4,0xf82ff987,
    0x45be62ef,0x5fd84ffb,0x907fe5f8,0x541fccff,0x40ff90ff,0x82effffc,
    0x7fdc06ff,0x0dffff02,0xfb80dff1,0x27fff13f,0xfb806ff9,0xfc8ff42f,
    0x44fea004,0x7f440bdb,0x3776ffdf,0xffcfff98,0x003ffc1e,0xffb84fa8,
    0x327fffef,0x43fe40ff,0xff983ff8,0x7fd5be67,0x4c4fe80d,0xfb0ff54f,
    0x7d417dcb,0x980ff90f,0x741ffffd,0x0ffe407f,0xf03fffc8,0x1ffc80ff,
    0xffc83ffe,0xb97fdc00,0xdfeccffc,0xf0fe802c,0xffc8dfbf,0x9ff9ffb2,
    0x3fe26fe8,0x8003ff44,0xdfb302fc,0x7fe4dfd5,0x7c43fe40,0x27ffb82f,
    0x1dff56f9,0x2fa89fd0,0x47ff0bf9,0x0ffa80fd,0x9f300ff9,0x1ffd89ff,
    0x00ffe8ea,0x3601fff3,0x3ffa01ff,0xff71ffe0,0xff912e63,0x3fffffa3,
    0x5c05ffff,0x3f6bf34f,0xfe89bfa0,0x3fe21fff,0x3f63fec3,0x817dd01f,
    0xff0400fe,0x3207fe4b,0x41ff887f,0x3e60dff8,0x3617fea6,0xfca7c45f,
    0xfb97fd46,0x321ff504,0x47cc607f,0x77fd47fb,0xdff9dfb0,0x502ffcc0,
    0xff901dff,0x321ffd8b,0x43ff70ff,0xbfb50ffd,0x0355ff75,0x27f70fe8,
    0x11bfe3fc,0xff88dfff,0x3ea3ff45,0x37fd40df,0x15541be2,0x7fe49ff3,
    0x7cc3fe40,0x207fd40f,0x43fdc6f9,0xf36e86fb,0x27ffa23f,0xff500efb,
    0x3e21ff21,0x6fa8f9bf,0xdacfffe8,0xb301ffff,0xffd805ff,0xffffb9df,
    0x4c6ffcc0,0x3bfea6ff,0x7ec7ffba,0x2e00bf53,0x7ed3ee4f,0x222fff22,
    0x744ffffc,0x0bff52ff,0xf939fffb,0x04fa85ff,0xffd33ffb,0x3207fe41,
    0xb87fb87f,0x546f987f,0x43fd40ff,0xfdffd0fc,0x01dfffff,0x7fc87fd4,
    0xd3f9ff90,0xfffd107f,0x85ffffff,0x806ffff8,0xffffffe8,0xfffb02ff,
    0xffe83fff,0x7fc1ffff,0x3a007f91,0x3a3be20f,0x3fffe60f,0x4fffffff,
    0x3fffffe6,0xfffe881f,0xfc84ffff,0xfffff302,0x40ffc87f,0x85fc87fc,
    0x46f986fc,0x7fc40ffa,0xbd52fd41,0x4c7bfd15,0xf90ffa81,0x3fffe60f,
    0x3ae00fff,0xfffdefff,0x006fffc6,0xbffffd70,0xefffc801,0xdfffd881,
    0x5fb3fc42,0xfb09f700,0xffd30bff,0x1dd119ff,0x1efffc98,0x677ff5c0,
    0x5c01fd01,0xfc82fffe,0x743fec0f,0x986fc81f,0x40ffcc6f,0x0efe83fd,
    0x507fb100,0x81ff21ff,0x003fffc9,0x07fb104c,0x01300001,0x06001300,
    0x800c4330,0x017100cb,0x30020130,0x80088001,0x00110019,0x4c6ffb98,
    0x2ff4c45f,0x3fe637cc,0x442fcc1c,0x5100aefe,0xfb9887ff,0x033ff90f,
    0x000007d4,0x00000003,0x00000000,0x00000000,0x00000000,0xc8000000,
    0x0fe45fff,0x260ffff2,0x0fffe86f,0x7e440fec,0xffecefff,0xfffc83ff,
    0x1ffff90f,0x00003e60,0x00000000,0x00000000,0x00000000,0x00000000,
    0xd8000000,0x1be20dff,0x7cc13ff2,0x40ffe986,0x2ea204f9,0x0beffffd,
    0x21ffff90,0x000ffffc,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x01300400,0x80130011,0x08001300,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00199800,0x02621551,0x00008000,0x05500200,0x00033300,0x22099800,
    0x0002a609,0x26200a80,0x0001310a,0x00000000,0x00000000,0xfd880000,
    0x500cffff,0xbfb7ffff,0x91001ff6,0xf8009fff,0x7ffecc5f,0x7001fd03,
    0x07fffffd,0xff103ff9,0x27fffa89,0xffffaefc,0x4007fe43,0xff501fe8,
    0x7cbfb7ff,0xffffffff,0x413ff22f,0x3fe25ffb,0x0fffc40f,0xffb81ffb,
    0xb17fd41f,0x3fe203ff,0x3fffff26,0xd14fffff,0xdfffffff,0xffbfff30,
    0x01ff6bff,0x9fffffd0,0xf32ffc00,0x909fffff,0xfffc805f,0x643fffff,
    0x4ff881ff,0xf92f7ffc,0x5fffdfff,0x5c007fe4,0xfff981ff,0x3e5ffffe,
    0xffffffff,0x07ffe22f,0xfb81fff1,0x227fe45f,0x7fec2ffc,0x707fe43f,
    0x3fea09ff,0x3fffff23,0xf74fffff,0xffd5139f,0x321ffe87,0x00ffb5ff,
    0x7ec67fd4,0x4bff000f,0xffd9affc,0xf9027d40,0xff7335df,0x40ffe41f,
    0x3fe64ff8,0x30dffc84,0x07fe4dff,0x06bff220,0x7fe47ffb,0x26666665,
    0x7d40fffd,0x81ffe46f,0xfff32ffe,0x7c3ffa81,0x3ff45fff,0x7ec1ffe2,
    0x2e66620f,0xb0999cff,0x4ffa81ff,0x3fe637fc,0x2aa2ffb5,0x7ccffb00,
    0xf0aa883f,0xf52764bf,0x306f885f,0x3fee0dff,0x2207ff24,0x7ff514ff,
    0x217fe413,0x1ff90ffe,0xfffb02a6,0x23ffc1ff,0x7d405ff8,0x7ffb01ff,
    0xf981bfe6,0x82ffe8ff,0x3fe65ff8,0x17fe27fe,0xff107ff6,0x03ffa80d,
    0x1003bff5,0x2bff09ff,0xffffaffd,0x7fc5fe83,0x5ffffd45,0x7fe405ff,
    0xfb80fe80,0xf902601f,0x29ff103f,0x23fffffd,0x7fdc0ffc,0xffd5ff91,
    0x7fffec9f,0xf0bff10f,0x7ffcc0bf,0x23ffe202,0x7e401ffd,0x3a05ffef,
    0x3effee7f,0x507ff31f,0x3ffa89ff,0xd01ffd40,0x4039ffff,0xaffc45ff,
    0xffdffffd,0x3a2ffc2f,0x37ffe66f,0xd505ffff,0x0bf207ff,0x32001ff6,
    0x4ff881ff,0x47fffffb,0x7fe41ffc,0xfbdfff91,0x0ffdc5ff,0x2ffc2ffc,
    0x804ffe88,0x04ffeffb,0x01ffffd0,0xdfd87fe4,0x3ff73ff8,0xffb1ffe0,
    0x03ffa801,0x3fffffa6,0x547fd82f,0x4bffb5ff,0x3fe26ff9,0xffd37f44,
    0xc82ffe45,0x13ea05ff,0x33321ffe,0x3ff90ccc,0x7cc9ff10,0x43ffc83f,
    0x97ff27fe,0x3fee4ff9,0x7cc7fe81,0x0bffb05f,0x07ffff40,0x03fffa80,
    0x3ff97fd4,0x81ff6bfd,0xbff12ffc,0x007ff500,0x5fffffb3,0xfbadffb8,
    0x83ffb5ff,0x9ff10ffe,0x1bfe7fe8,0x2ee0bff3,0x6f881efe,0xfff87ff8,
    0x3ff90fff,0x7cc9ff10,0x2effc83f,0x7fe4bff7,0xfb93fe21,0x8cffc81f,
    0xfc85ffe9,0x3e6000ef,0x3f6002ff,0x7fc405ff,0xff91ffac,0xff9817fe,
    0x5005ff54,0xd98007ff,0x7ff446ff,0xfb5ffeff,0x7c3ff90f,0xf8b7f45f,
    0x405ff84f,0x1fd04ff8,0x7740ffd8,0xff70fffe,0x4c9ff303,0xfffc83ff,
    0x321fffff,0x72ffc0ff,0xfff103ff,0xa8bfffff,0xe8001fff,0x3fea007f,
    0x7f403fff,0x3fea7fce,0x7fc03ffa,0x5001ffb7,0x9d9107ff,0x9103ffa0,
    0x6d7fe9dd,0x07fe40ff,0x15ff8bff,0x5ff88bff,0xf907fd80,0x202ffb85,
    0x5ff50ffd,0x7cc9ff30,0xe8ffc83f,0x7fe41eff,0xff72ffc0,0x3bffa203,
    0x3fe65fe9,0xffd0002f,0x2fffe200,0x3f600fff,0x3fe25fef,0x7e401ffe,
    0x5005ffaf,0x3ffe07ff,0x0cc7ff80,0x5ffb4ff8,0x3ff47fe8,0x37fc9ff1,
    0x7ec57fea,0xfb83ffc4,0x8077fcc3,0xbff50ffe,0x7cc7ff90,0x227fc83f,
    0xf81ff900,0x02bfea5f,0x457fa088,0x20004ffe,0xffb007fe,0xb817ff29,
    0x7f43ffff,0xff9807ff,0xf5002fff,0x3bff207f,0x45ffda9b,0x3fee3ffc,
    0x2e5fffb3,0x5ffd45ff,0x3f20ffc8,0x5ffe98df,0x3f22bff2,0x70bf305f,
    0xf7537fff,0x3fe21fff,0xfffc9acf,0x320ffe60,0x1ff9007f,0x3fe65ff8,
    0xbfd000ff,0x2aabfff6,0x7401aaaa,0xfffa807f,0x4c0fffa0,0x7e41ffff,
    0xffd005ff,0x7fd400ff,0xffffd103,0xf883dfff,0x26ffffff,0xfffffffd,
    0xffffe81f,0x7fffc45f,0x3e25feff,0x00ffffff,0x7ffdc1fe,0x42ffffff,
    0xfffffffb,0x41ffcc4f,0xff9007fc,0x7ec5ff81,0xbfd001ff,0x3ffffff6,
    0x7404ffff,0x7ffc407f,0x807ffcc2,0xff987fff,0xfff7003f,0x1ffd4009,
    0xfffff910,0x3ffaa01b,0x3bf60cff,0x101effe8,0x2209fffb,0x5fd9effe,
    0x06fffe4c,0x65407f60,0x00bdfffe,0x5dffffd5,0xd707ff30,0x03ff200d,
    0x00110bff,0xfffb4ed8,0x9fffffff,0x6407fe80,0xbff905ff,0x7c13ff60,
    0xff1001ff,0x7fd4003f,0x00131003,0x00440008,0x00220030,0x04c40030,
    0x44000440,0x00000001,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00098800,0x13300400,0x00c40000,
    0x13100000,0x00000000,0xffffffb8,0x000bfee5,0x00000000,0x00000000,
    0x00000000,0xbfd10000,0x3e207ff2,0x7ff5cc5f,0x653fe21d,0xffffffff,
    0x7ffe446f,0x7ffe40df,0x000cffff,0xffc8bfd1,0x0cffffff,0x005ffd80,
    0xbffffff9,0x90017fdc,0xfff900ff,0x01bdffff,0x3ff21ff9,0x40dfffff,
    0x9ff70ffc,0x7fe53fe0,0x7fffa86f,0x3fffffee,0x5ff70fff,0x4c5fff70,
    0x5ffd85ff,0xff103ff9,0x7ffffccb,0x653fe27f,0xffffffff,0x7fffec6f,
    0x3ff21fff,0x2fffffff,0x645ffc80,0xffffffff,0x7ffc405f,0xcefe800f,
    0x3fee3ccc,0x01ff2002,0x3ffffff2,0x7e41ffff,0xfffff90f,0x7e45ffff,
    0x03fff70f,0x3fff29ff,0x3fffe40f,0xfffffff7,0x0bfee1ff,0xf985fff5,
    0x3fff625f,0xf103ff95,0x45ffecbf,0x46aa2ffc,0x9999affc,0x2ffe6099,
    0x7e4dff30,0xffdaa9af,0x3ffea00f,0x4cd7fe45,0x201ffea9,0x803ffffb,
    0x7fdc03ff,0x01ff2002,0x2a66bff2,0x7e44ffea,0x535ff90f,0x7e4bffd5,
    0x0dfff70f,0x3fff29ff,0x3ffffc2f,0x33337ff7,0x517fdc33,0xff305fff,
    0x3ffffeab,0xf103ff95,0x3a2ffcbf,0x07ff206f,0x7e437ec0,0x3207ff27,
    0xfff104ff,0x81ffc8bf,0x3fa03ffa,0x7cc06fee,0xfb80a9af,0x1ff2002f,
    0x3ff21331,0x646ff881,0x03ff90ff,0x87fe4fff,0x7c2ffffb,0x9fdff94f,
    0x73ff7fcc,0xff7003ff,0x40bffe65,0x1bf74ff9,0x07ff2bff,0x09897fe2,
    0xff9037f4,0xfd808003,0x7c07ff27,0xfdbf906f,0xb81ffc8b,0x7ff301ff,
    0x7d405ff7,0x5c3fffff,0x3f2002ff,0xfc9bfee7,0x45ff881f,0x3ff90ffc,
    0x3f21ffb0,0xfffff70f,0xffca7fc1,0x33fee6fc,0x007fee7f,0x3fe6bfee,
    0x53fe203f,0x7e57fe2a,0xfcccccdf,0x27fcc05f,0x999bff90,0xf9003999,
    0x80ffe47f,0x8ffa87fe,0x67fe45fe,0x05ffdcba,0x3fe23ff2,0x3bfff205,
    0x3fee3fff,0x55ff2002,0x3ff20eff,0xffd9999a,0xfc87fe42,0x93ffcc1f,
    0x33fee1ff,0x653fe4ff,0xfb0ffaff,0x7fdcff9b,0x20aaaaac,0x5fffbffb,
    0xff03ff80,0x3fffff2b,0x205fffff,0x3200fff8,0xffffffff,0x27fec02f,
    0x7ec07ff2,0x74ffe20f,0x7fffe45f,0x2206ffff,0x03ffa5ff,0xff88e654,
    0x800bfee7,0x0eff9ffc,0x7fffffe4,0xffc85fff,0xddddff90,0x7fe49fff,
    0xffd1ff70,0x7fe53fe3,0x97ff2ff8,0x7fffdcff,0x3ee0ffff,0x01ffffff,
    0x5ff817f4,0xdddddff9,0x3e60bffd,0x4fba22ff,0xeeeeeffc,0x3ff201ee,
    0xb01ffc84,0xd2fec1ff,0xeeffc8bf,0x81effffe,0x3fee2ffb,0x8ffe4003,
    0x32002ffb,0xc81fffff,0xdfffffff,0x321ff901,0xffffffff,0xfb87fe45,
    0xff6ff98f,0x67f5ff29,0x27fc9ff9,0xfffffffb,0x3fffee0f,0x7f406ffd,
    0x3f2bff01,0x85ff881f,0x7c43fff9,0x003ff94f,0x7e417fe0,0x54ffd01f,
    0xefe99aff,0x503ff909,0x9ffd0bff,0x00dffb99,0xff71ffb8,0x7ffe4005,
    0xaffc84ff,0x901effa9,0x37ff21ff,0xfc81cccc,0x321ff70f,0xf94ffbff,
    0x5fefbf2f,0x07fee7fc,0x6cfffee0,0x07f604ff,0x1ffcaffc,0x7cc5ff88,
    0x3ff883ff,0x10003ff9,0x3ff205ff,0x7e4dff01,0xffffffff,0x3603ff93,
    0x3ffe60ff,0x2fffffff,0x3fec4ec8,0x64005ff7,0x40ffdfff,0x3fea1ffc,
    0x90ffc80f,0x3f2003ff,0x221ff70f,0xf94fffff,0x57fbfeaf,0x07fee7fc,
    0xf893fee0,0x01f901ff,0x0ffe57fe,0xfd12ffc4,0xf92f805f,0x5510003f,
    0x207ff201,0x3ff24ffb,0x3fffffff,0x3fa03ff9,0x3bbff20f,0x85ffeeee,
    0x9ff52ffb,0x55567fdc,0x7fe40aaa,0x7e45ff89,0x437fe41f,0x3ff90ffc,
    0x5c3ff200,0x3ffea0ff,0x3e2ff94f,0x4ff93fff,0xfb801ffb,0x837fe42f,
    0x657fe029,0x5ff881ff,0x3333fff2,0x7e43f24c,0xaaaaaacf,0x205dd102,
    0xdaaacffc,0x4ccc46ff,0x909efe99,0xd55559ff,0x06ff8dff,0xff103ffa,
    0x5c3fffff,0xffffffff,0xf93fe43f,0x20ffe43f,0x7e43ffe8,0x003ff90f,
    0x7fdc3ff2,0xca7ffec0,0x47fffa7f,0x07fee7fc,0xf10bfee0,0x3ee887ff,
    0x3ff2bff0,0x3e5ff881,0x7fffffff,0x7ffe43d1,0x0fffffff,0xf903ff98,
    0xffffffff,0x917fa003,0xffffffff,0x27fd43ff,0x9307ff70,0xfb81bffd,
    0xffffffff,0xff13fe43,0x4c0ffe4d,0x3ff20fff,0x2003ff90,0x1ff70ffc,
    0xf94fff88,0xf93ffe4f,0x400ffdcf,0xffa82ffb,0x413fe21f,0x03ff95ff,
    0x3feabff1,0x07ffffff,0x3ffffff2,0xf980ffff,0xffff903f,0x40019dff,
    0x7ffe45fe,0x41cfffff,0x3e201ffd,0x0000407f,0x3ee3fe40,0x203ff93f,
    0x3ff25ffc,0x2003ff90,0x1ff70ffc,0x3f29ff70,0xfc97fea7,0x2007fee7,
    0xffd02ffb,0x0027fc4d,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x3ffffe20,0x08007fff,0x54c40002,0x33033101,
    0x4006a601,0xa9801aa8,0x1353000a,0x26a21310,0x26206a20,0x884cc409,
    0x220cc409,0xa9826219,0x0a984c41,0x26666666,0x19884cc1,0x3aa01330,
    0x802a8805,0xaaaa881a,0xb71aaaaa,0xfff1088b,0x00ffffff,0x0cf8a754,
    0x3fffea00,0x7c3fe41e,0x7fff4c4f,0xfffb104f,0xffd101df,0x3f205fff,
    0x7ec4ffff,0xa8ffffbd,0x3e61ffff,0x4dff30ff,0x07ff46fd,0x3bf21ff9,
    0x365ffff9,0xf35ffcef,0x1fffffff,0x1ffca7fc,0xfb817fd4,0x01ffc807,
    0x7ffc41fc,0x94ffffff,0xc8eff8ff,0x5ffccccc,0xa7ffe440,0x402dfff8,
    0xfffdfffa,0x3fe1ff20,0x3bbffe24,0x7ff443ff,0x640fffff,0x0ffeccff,
    0x7fef7fd4,0x37fff62f,0xfeeffffd,0xea7fdc6f,0x47fea1ff,0x3fa2fff8,
    0x37bfff25,0xfffb2fff,0x3ffe65ff,0x3e0fffff,0xd89ff34f,0x01fee07f,
    0x930bfff1,0x7c4935f1,0xffffffff,0x6ff8ff94,0x4c03fee0,0x21effffd,
    0x03effffc,0x3fe21ffd,0x3fe1ff24,0xfd8bff64,0xb8fff20f,0x11ffc5ff,
    0x24db8379,0x3ff63ff8,0xfd93ffa3,0x7effec0f,0xa9ffc43f,0x7ff15fff,
    0xff52ffe4,0x2637ff69,0x87ffd100,0x89bfa1aa,0x64ccc4ff,0x640999ff,
    0x7dc0ffff,0x260fffff,0x99999999,0x0bff1ae0,0x3aa0bfe2,0x201cffff,
    0x0cffffea,0x7fd89ff1,0x93fe1ff2,0x740446ff,0x20ffe87f,0x001ceffd,
    0xfd97fee6,0xf90ffec7,0xffff883f,0x3f2bfb05,0x41ff57fe,0x3fe21ffc,
    0xd003ffb5,0x3ea009ff,0x443ff71f,0xffffffff,0x3abfe24f,0x9ffd884f,
    0x13a60000,0x13f209fd,0x00b7ffe2,0x29fff930,0xfffffff9,0x3e1ff27f,
    0x009ff14f,0xff90bff1,0x7ffffcc3,0xfffb503e,0x23fecbff,0x3fee0ffc,
    0x00fffb81,0x3effaff7,0x7e46fd8f,0xfdaffc0f,0x2ffec00f,0x7f53fe00,
    0x7ffffc46,0x3ee4ffff,0xfa81ff77,0x7ffc45fc,0x94ffffff,0xf305f909,
    0xbfff103f,0xfeb88005,0x99bff34f,0x7fe49999,0x7c53fe20,0x0bff005f,
    0xec883ff9,0x7e43ffff,0x25ff9bef,0x07fe46fd,0xffb03ff7,0x2bfe209f,
    0xffbfd8ff,0x3e07fe43,0xc80ffb5f,0xfc8006ff,0x5443ff9f,0xaaaffdaa,
    0x7fc53fe1,0x20ebb6c3,0xfffffff8,0x360004ff,0x3ffae06f,0x36a00bff,
    0x3e0cffff,0x7fe4045f,0xff93fe60,0xfd067547,0x988fff0f,0x44dff710,
    0xb2ffc4ff,0x20ffc8df,0x7fd41ffb,0xffd01fff,0x3fffeedf,0x3e07fe40,
    0x5c0ffb5f,0x98000eff,0x400ffeff,0x3ff707fb,0x81043fec,0xaaaaaaa8,
    0xf10001aa,0xffb5007f,0x7fdc3bff,0xfc80bfff,0x5c9ff11f,0x9ffb13ff,
    0x74c67fe4,0x4effe46f,0x3e64ffc8,0xf127f44f,0xb2ffdc9f,0x20ffc8df,
    0x3fe21ffb,0xb80eff9e,0xfff34fff,0xf81ff90d,0x2a0ffb5f,0xaaaabfff,
    0x3fa0fba0,0x7fb804ff,0xaa885550,0x00000000,0x8003fea0,0xf14fffc9,
    0xf9805dff,0x20fffeff,0xfefefff9,0x3fffe24f,0xffd82fff,0xfc86ffff,
    0x40fffeff,0xfffeeffd,0xff91bf66,0xfd0ffdc1,0x217fee3f,0x3fe2fff8,
    0x40ffc83f,0x20ffb5ff,0xfffffffc,0x2a13fe3f,0xfb801fff,0x00000007,
    0xdf900000,0x53ee2000,0x26001df8,0xa81dfffe,0x4fe8dfff,0x16fffec4,
    0x09fffd90,0x177ffedc,0x5d7ffecc,0xc8dfb0ff,0x47fee0ff,0x7ff44ffb,
    0x360ffe82,0x0ffc81ff,0x07fdaffc,0xfffffff9,0xf827fc7f,0x0000006f,
    0x00000000,0x0000bfb0,0x06000041,0x00c00040,0x13000220,0x00000200,
    0x00000000,0x00000000,0x00000000,0x00000000,0x000ffe00,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x2ff88000,0x50110440,0x2e27059b,0x15512bbb,0xddd12ed4,0xdddddddd,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xf77fe800,0x3fffa65f,0xf56ecdff,0x2fecdfff,0x77744ff7,0x6eeeeeee,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xfbbff400,0xffbff52f,0x3eabffff,0x8ff46fff,0x000007fb,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x3feeffd0,
    0x7e4c1951,0x2666624e,0x00015c41,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x56fc8000,0x000001ff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x06f8a7dc,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__arial_bold_22_usascii_x[95]={ 0,1,1,0,0,0,0,0,1,0,0,0,1,0,
1,-1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,1,1,1,0,1,1,0,1,
1,1,1,0,1,0,1,0,0,1,-1,0,0,-1,0,1,-1,0,1,-1,0,0,1,0,0,0,0,0,1,1,
-1,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0, };
static signed short stb__arial_bold_22_usascii_y[95]={ 17,2,2,2,1,2,2,2,2,2,2,5,14,10,
14,2,2,2,2,2,2,3,2,3,2,2,6,6,4,6,4,2,2,2,2,2,2,2,2,2,2,2,2,2,
3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,19,2,6,2,6,2,6,2,6,2,2,
2,2,2,6,6,6,6,6,6,6,3,6,6,6,6,6,6,2,2,2,8, };
static unsigned short stb__arial_bold_22_usascii_w[95]={ 0,4,8,11,11,17,14,4,5,6,8,11,4,6,
4,7,10,7,10,11,11,11,11,11,11,11,4,4,11,11,11,11,20,15,13,14,13,12,11,15,12,4,10,14,
11,15,12,15,12,16,14,13,12,12,15,19,14,15,12,6,7,6,10,13,5,11,11,11,11,11,8,11,10,4,
6,10,4,16,10,12,11,11,7,11,7,10,11,16,11,11,10,8,3,8,11, };
static unsigned short stb__arial_bold_22_usascii_h[95]={ 0,15,6,16,18,16,16,6,20,20,8,10,7,4,
3,16,16,15,15,16,15,15,16,14,16,16,11,15,12,8,12,15,20,15,15,16,15,15,15,16,15,15,16,15,
14,15,15,16,15,17,15,16,15,16,15,15,15,15,15,19,16,19,9,2,4,12,16,12,16,12,15,16,15,15,
20,15,15,11,11,12,15,15,11,12,15,12,11,11,11,16,11,20,20,20,5, };
static unsigned short stb__arial_bold_22_usascii_s[95]={ 255,106,13,158,78,170,188,251,37,8,225,
202,246,34,47,230,39,111,132,62,187,229,135,1,203,238,185,143,13,234,25,
161,43,213,199,215,173,148,79,82,119,45,147,91,241,63,50,119,32,90,12,
1,243,98,227,207,192,176,163,71,74,64,214,52,41,97,27,60,50,37,111,
15,132,250,1,1,27,109,155,72,120,151,166,85,143,49,190,138,126,107,174,
28,24,15,22, };
static unsigned short stb__arial_bold_22_usascii_t[95]={ 1,39,68,1,1,1,1,55,1,1,55,
55,55,68,68,1,22,38,38,22,38,38,1,55,1,1,55,38,55,55,55,
38,1,38,38,1,38,38,39,22,38,39,1,39,38,39,39,1,39,1,39,
22,22,22,22,22,22,22,22,1,22,1,55,68,68,55,22,55,22,55,22,
22,22,1,1,39,39,55,55,55,22,22,55,55,22,55,55,55,55,1,55,
1,1,1,68, };
static unsigned short stb__arial_bold_22_usascii_a[95]={ 88,105,149,175,175,280,228,75,
105,105,123,184,88,105,88,88,175,175,175,175,175,175,175,175,
175,175,105,105,184,184,184,192,307,228,228,228,228,210,192,245,
228,88,175,228,192,262,228,245,210,245,228,210,192,228,210,297,
210,210,192,105,88,105,184,175,105,175,192,175,192,175,105,192,
192,88,88,175,88,280,192,192,192,192,123,175,105,192,175,245,
175,175,158,123,88,123,184, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_arial_bold_22_usascii_BITMAP_HEIGHT or STB_FONT_arial_bold_22_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_arial_bold_22_usascii(stb_fontchar font[STB_FONT_arial_bold_22_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_arial_bold_22_usascii_BITMAP_HEIGHT][STB_FONT_arial_bold_22_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__arial_bold_22_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_arial_bold_22_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_arial_bold_22_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_arial_bold_22_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_arial_bold_22_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_arial_bold_22_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__arial_bold_22_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__arial_bold_22_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__arial_bold_22_usascii_s[i] + stb__arial_bold_22_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__arial_bold_22_usascii_t[i] + stb__arial_bold_22_usascii_h[i]) * recip_height;
            font[i].x0 = stb__arial_bold_22_usascii_x[i];
            font[i].y0 = stb__arial_bold_22_usascii_y[i];
            font[i].x1 = stb__arial_bold_22_usascii_x[i] + stb__arial_bold_22_usascii_w[i];
            font[i].y1 = stb__arial_bold_22_usascii_y[i] + stb__arial_bold_22_usascii_h[i];
            font[i].advance_int = (stb__arial_bold_22_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__arial_bold_22_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__arial_bold_22_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__arial_bold_22_usascii_s[i] + stb__arial_bold_22_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__arial_bold_22_usascii_t[i] + stb__arial_bold_22_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__arial_bold_22_usascii_x[i] - 0.5f;
            font[i].y0f = stb__arial_bold_22_usascii_y[i] - 0.5f;
            font[i].x1f = stb__arial_bold_22_usascii_x[i] + stb__arial_bold_22_usascii_w[i] + 0.5f;
            font[i].y1f = stb__arial_bold_22_usascii_y[i] + stb__arial_bold_22_usascii_h[i] + 0.5f;
            font[i].advance = stb__arial_bold_22_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_arial_bold_22_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_arial_bold_22_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_arial_bold_22_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_arial_bold_22_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_arial_bold_22_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_arial_bold_22_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_arial_bold_22_usascii_LINE_SPACING
#endif

