// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_30_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_30_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_30_usascii_BITMAP_WIDTH         256
#define STB_FONT_courier_30_usascii_BITMAP_HEIGHT         92
#define STB_FONT_courier_30_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_30_usascii_FIRST_CHAR            32
#define STB_FONT_courier_30_usascii_NUM_CHARS             95

#define STB_FONT_courier_30_usascii_LINE_SPACING          14

static unsigned int stb__courier_30_usascii_pixels[]={
    0x2008ba20,0x22010200,0x02600999,0x33358800,0x001b0403,0x22003060,
    0x32e000aa,0x1bb9802c,0x44001440,0x4ccc02bb,0x2a809999,0x202ca980,
    0x33302bba,0x41333333,0x00000099,0xf8800331,0x0f207b63,0xd81f87f2,
    0x0f203fee,0xddf4c800,0x321f103d,0x263b0003,0x6eff4406,0x37a200ef,
    0x3b605fbb,0xcd884ecc,0xdeb803db,0xf881efcc,0x86eeeeee,0x33bea07f,
    0x67f442dc,0x3be60dfd,0x5eeeeeee,0x0000ddd3,0x8007fb60,0x643543f8,
    0x03642d43,0x0eec40f2,0x0f87c400,0x00f32ec0,0x502d47a0,0x203f705f,
    0x5c84d83d,0x160dc4d8,0x1d701d50,0x3fc00788,0xbe802fc8,0x0699b220,
    0x001a625c,0x0003d000,0xd87903a0,0x3202f982,0x7eefe443,0x497002ee,
    0xb07e600f,0x2a1f0007,0x5403f105,0x6983540f,0x07cc07c4,0x0040550b,
    0x800f10fa,0x800eb86f,0x225f107b,0x1a616c02,0x03d00000,0x7907a000,
    0x40bb01e8,0x2a066c3c,0x7c3f002f,0x1a61b200,0x825c3e00,0x6c4c804d,
    0x06c83e02,0x02b858f6,0x0f112e00,0x07cc6f80,0x13203c80,0x1a607c40,
    0x03d00000,0x4ccccccc,0xd0f20f40,0x6403ea03,0x01c81e23,0x8807c5b8,
    0x8005d03f,0x03e212e7,0x00f83e20,0x7026c1d1,0x00b11d4b,0x03c42e80,
    0x007b17a0,0x005b025c,0xa89a616a,0x751001ac,0xfa80f415,0x44ffffff,
    0x07a1e41e,0x547903f8,0x41e80005,0x201f700f,0xc9e2006a,0x3a005a83,
    0xfff70f11,0x8d501741,0x0001dddb,0x2af103ee,0x8bd00acb,0x407cc007,
    0x079000f9,0x3737eed3,0x37f200cf,0x003d3fdc,0x641e8970,0x0dd00f43,
    0x0003f0f2,0xd807c354,0x32017406,0xcdeccfdc,0x6400971c,0x8adc8d32,
    0x68803e0e,0x01dda810,0x101df971,0x5ff9bfff,0x93344bb0,0x45f6407b,
    0x3e003eb8,0x40dce980,0x819b06d8,0x8001ecd8,0x0f216c4b,0xc83ec03f,
    0x0056fdc3,0x403e0ba0,0x202d405f,0xceaaecaa,0x400790aa,0x07c4d33b,
    0x1e203c1d,0x005eed44,0xb813fb22,0x26c1fa81,0x3ef3f6b5,0xffff900e,
    0x9834c007,0x2e26c06f,0x000ff405,0xc836e25c,0x1f701ee3,0xfb710790,
    0x06a8019d,0x2013e01f,0x3a5a801e,0x32004b81,0x3a25cd32,0x44f101e0,
    0x0000bdda,0xc8001bb1,0x9bb52646,0xcfa85c81,0x9001fda9,0x1007e607,
    0x7cc00e8f,0xe84b8001,0x0bfa791f,0x07903f50,0x7403d930,0x7f101f02,
    0x9500b700,0x002d40f4,0x4699a63d,0x69803e0e,0x009817b5,0x98009900,
    0x6f88f20f,0x07d43f10,0x0f400fc4,0x23d00798,0x003f0068,0x21ea8970,
    0xb80d913c,0x2003c80f,0x7c0d304b,0xf1009f00,0x27726601,0x3e209af9,
    0xd30f8800,0x741d1ce8,0xdb816e01,0x788004db,0x0221e800,0x991ec03f,
    0x1a6026c0,0x23b00698,0x003d0059,0x642d8970,0x0f9007c3,0x34c018f2,
    0x403e03d8,0x5099005f,0xffffffff,0xc804c8bf,0xeb883e24,0xd80b64ff,
    0x02b8b104,0x7c000f80,0x79007400,0x80d300fc,0x401e604b,0x3e00d10e,
    0x744b8001,0x807a1e41,0x07c7906d,0x01f30790,0x006e807c,0x89e401f1,
    0xa807e207,0x70017c0f,0x1b817c0b,0x1ea002c4,0x7900f300,0x405d07c0,
    0x300f405b,0x7479805f,0x000fd401,0x7907a25c,0x413e01e8,0x2a03be3c,
    0x7c03c80f,0x6400f700,0x03c4b604,0x07ee0fe6,0x1f880136,0x106e0698,
    0x97a0044b,0x261ec039,0x45983440,0x880fe06c,0x007fcc07,0x7406b85d,
    0x44b8001f,0x07a1e41e,0x23c807cc,0xdfdceebf,0x7c00f881,0x2005f100,
    0x265b00f8,0xddfd9806,0x00d500df,0x0be60eb8,0xf30dc588,0x20eda819,
    0x36c41ee8,0x3b507fea,0x0ef41754,0x04b80bb3,0x220f5f4c,0x981d905e,
    0xb8001ebe,0xd0f20f44,0x3c81b603,0x200dd982,0x200f804c,0x40f6005d,
    0x6c00b31e,0x84e800ae,0xfddf7028,0x7b9b5005,0xffddf910,0x3bfae019,
    0x2ffb84fe,0x03feeeb8,0x09fddfb1,0x3fe603b0,0x7fdbdd56,0xeedeeb80,
    0x4003ffd2,0x0f20f44b,0x405f103b,0x880f203c,0x200f800f,0x0f3001f9,
    0x4c02d43a,0x98abccfe,0x5e77442c,0x066204fe,0x54400600,0x13510009,
    0x26600cc0,0x00998800,0x0d440000,0x0002a200,0x90d31ec0,0x06c84a87,
    0x407901e4,0x801f005b,0x20b6004d,0xdf00950f,0x9ffb9579,0x02af2a01,
    0x00000000,0x00000000,0x00000000,0x00000000,0x0bf23f10,0xf87ba0f2,
    0x03feec81,0x001e80f2,0xf303bddf,0x8e1a6001,0x00000019,0x00000000,
    0x00000000,0x00000000,0x00000000,0x4eb88cc0,0x13008806,0x0aaa980c,
    0x00080260,0x0c02aaaa,0x00000200,0x00000000,0x00000000,0x00000000,
    0x00000000,0xff700000,0x00005bff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00177300,0x98000ba2,0x21bb9800,0x4ccc0998,0x02662009,0xa8826600,
    0x953000ab,0x000cc415,0x20333100,0x04cc0998,0x00d4c000,0x00377510,
    0x01880198,0x26666660,0x09a98009,0x0055d4c0,0x02fe6fe4,0x26001fc4,
    0x41fffefc,0x9fdccee8,0x3ba64ffa,0x3fb203fe,0xb7fcc002,0x05edcdfc,
    0x3f737b62,0x9503ffd4,0x1fffe800,0xa877ff44,0x2a0005ee,0x404eecef,
    0x0dfdcefa,0x7307ec80,0x3f6007fd,0x2fffffff,0xfecefd88,0x37fae6ad,
    0x3aa04ffc,0xf1013221,0x057c4007,0xd307f106,0x0079009b,0x3a60005b,
    0x885c80dd,0x1edd884e,0x360016a0,0x5a835403,0xb01d9000,0xb107ea0b,
    0x878f980b,0x003cacfe,0xbe8803a0,0x5f37dc40,0x0b609d50,0x2000016c,
    0x409b003b,0x03c804f9,0xf30002d8,0x2644c80b,0x5a807f60,0x74069800,
    0x7000b502,0x741e401d,0x6c05f102,0x03c810f3,0x74403a00,0x40f36c04,
    0x807c40fa,0x7400005a,0xd8078801,0xd803c804,0x03f30002,0x2007c788,
    0xdb9881f8,0x40199999,0x540d303d,0x00fc4005,0xc80910fc,0x403cd504,
    0x03a0003c,0x11c402e4,0x02d41e80,0x0266661a,0x335d3310,0x80698133,
    0x803c804b,0x0159512d,0x23d00798,0xd03f0069,0xffffffff,0xd834c03f,
    0x33116a02,0x7005b813,0xd04b8009,0x01e403c3,0x07a01d00,0x307a0000,
    0xf307c40f,0xfd807fff,0x6fffffff,0x025c02cc,0x5d6c01e4,0x202fecdf,
    0x263d0079,0x5403f006,0x30f60005,0x7ec5a80d,0x8016c6ff,0x41740068,
    0x1e403c5b,0xf101d000,0x0d500000,0x00fec07e,0x00f40079,0x026403c4,
    0x776c01e4,0xf9807cc0,0x0f10f800,0x2d403f10,0x2d8d3000,0x0bea2d40,
    0x00f000f4,0x207c42e4,0x0003c807,0x0016603a,0x901fc880,0x02cdb81b,
    0x01e800f2,0x27cc07b0,0x76c01e40,0x3e607b00,0x1362dc04,0x2d403f90,
    0x34cb6000,0x03d72d40,0x01d0007c,0x09901d70,0x0007900f,0x002d4074,
    0x400cfc80,0xc8edacfd,0xe800f203,0x105f1001,0x079009bd,0x82d405b0,
    0x1f703ee9,0xdd703f88,0x0002d403,0x5401eda6,0x1e801db5,0x3ae01e00,
    0x0780f980,0x801503c8,0xd505a80e,0xf107bddd,0x16654001,0x001e403b,
    0x6f4c003d,0x04aafcbb,0x02d803c8,0x6c74c16a,0x01edbace,0xbd959dd3,
    0x02d403d1,0x80366c00,0xd800feea,0xc80d1002,0x1e05b00e,0x00ec0f20,
    0x441a203a,0x882ebaaa,0x01f00007,0x03d001e4,0x21599500,0x803c804a,
    0x4c16a02d,0x00b32e66,0x3d0de654,0x40002d40,0x7f5003f9,0x009700b9,
    0x00ec812e,0x999999f3,0x81e4059f,0xf807c01d,0x02069800,0x901aa000,
    0x000f4007,0x79009500,0x2d405b00,0x00000698,0x00b500f4,0x5400f300,
    0x3f101725,0xd901f880,0x55554401,0x201bfaaa,0x4403b03c,0x26013607,
    0x22000006,0x001e402e,0x6400003d,0xd803c803,0x34c16a02,0x07a00000,
    0xd8000698,0xbb16a003,0x3200ea80,0x0001bb03,0xb03c8078,0xf102e407,
    0x51069803,0x17620001,0x1e800f20,0x03f30000,0x05b00790,0x006982d4,
    0x200f4000,0x405b883d,0x42d40079,0x20f6405d,0x80bb05d8,0x7900f000,
    0xf7033a60,0x104f9801,0x1fff30d9,0x004fa800,0x00f40079,0x3eb88c40,
    0x5b007900,0x06982d40,0x00f40000,0x3fbb7f66,0x001ec00c,0x202ec16a,
    0x03eedffa,0x005a809b,0xc807900f,0x000dfdef,0xfdbbdfb1,0x1fff3039,
    0x6ff77cc0,0xfffff502,0x225fffff,0xffffffff,0x3ffea04f,0xfff702df,
    0x5fffffff,0x983fffee,0xff33ffff,0x0001ffff,0xffffff88,0x00554401,
    0x7ffffffd,0xd85ffa80,0x54407fff,0x7fffec00,0x205fffff,0x3a4ffffc,
    0xffffffff,0x00015305,0x4c00d54c,0x01a8800a,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x2a000000,0x2666201a,0x20199980,0x26601aa9,0x99999999,
    0x4ccccc19,0x33330009,0x260cccc0,0x30666019,0x20ccc033,0x00999998,
    0x44099998,0x99988199,0x40999880,0x99999998,0x20666209,0x4ccc0999,
    0x26200999,0x99999999,0x26666099,0x21999999,0x00999998,0xfddfd980,
    0x3ff659bf,0x3ffee2ff,0x6eff545f,0x3fe26aef,0xffffffff,0x3ffff67f,
    0xb00cffff,0xfb09ffff,0x3fee9fff,0x2fffd83f,0xfb07fff9,0x3ffe65ff,
    0x3601ffff,0x7f47ffff,0x3ffea3ff,0xffffe86f,0x3fffffa1,0x3ffa5fff,
    0x9fffea3f,0xfffffffb,0x7ffec0df,0xffffffff,0xffffffb5,0x363fffff,
    0xdfffffff,0x442e9801,0x02cc6eea,0x82be60f4,0x21e26fb8,0x82c8783c,
    0x03e00fda,0x07a21a60,0x00f986a8,0x007803ea,0x037202c8,0x00e8016a,
    0x80b201e4,0xb509705a,0xa805b03f,0x87a01645,0x03fa885a,0x6f8807a2,
    0x20f402cc,0x789b604d,0x2c8783c8,0x03c81b20,0x20d503c8,0x01d501f8,
    0x007803f1,0x40bb02c8,0x201e0069,0x5016403c,0x6b812e0b,0x22d402d8,
    0xb50f402c,0x4c80f440,0x02cc5a80,0x8803e0f4,0x20f21e26,0x3e202c87,
    0x1f00d300,0x026c2640,0x200fa172,0x442c8007,0x6c3c404e,0x1e403c44,
    0x05a80b20,0x20fc4097,0x322d402d,0x0b50ec02,0x001d06a8,0x3d00b302,
    0x1e2001e8,0x0b21e0f2,0x00f401f0,0x21f880b5,0x647d006a,0x9000f005,
    0xf801f445,0x6983fa60,0x16403c80,0x012e0b50,0x4042d85b,0x81021640,
    0x442d805a,0x01660006,0x001d707a,0x4141e414,0x7013202c,0x54016c09,
    0x22003d16,0xf000ea9f,0x3e659000,0xcc83a002,0x32016a2d,0xb5016403,
    0x0f8812e0,0x9007616c,0x16a02c85,0x00b512e0,0x0f402cc0,0x000de7dc,
    0x42c801e4,0x4400dd98,0x6c00f107,0x754004cc,0x001e001f,0x003be6b2,
    0x92e7a1d8,0x403c804a,0xaaaaaacc,0x2209705c,0xaaacd84e,0x5566402e,
    0x016a02ea,0x000b516a,0x80f402cc,0x02dfeca8,0x3b200790,0x002efeee,
    0x8012e0b6,0xe88006f8,0x4003c006,0x03fdafdc,0x3c5e2590,0x80790077,
    0xccccccdc,0x3339705d,0x37609f95,0x6402eccc,0x202ecccd,0x545a805a,
    0x01660005,0x7544007a,0x9003c803,0x01db3337,0x00f43540,0x36000f20,
    0x01e004dc,0x2fa83b20,0x74b53b80,0x07900591,0x416a02c8,0x1cdeeefb,
    0x805b0b60,0xb5016c2c,0x0798b500,0x3a016600,0x007c4001,0x416400f2,
    0x83a001fb,0x03c80069,0x02f8b5c0,0x642c80f0,0x5c00f982,0x1d9e4794,
    0x16403c80,0x012e0b50,0x80150b60,0xb500542c,0x01f07900,0x3e01e200,
    0x0b600260,0x0b200790,0x4b800754,0x0f2000f2,0x3e60f980,0x16c07800,
    0x202640b2,0xeb4c1f5a,0x6403c801,0x25c16a02,0x40016c00,0xb52c402c,
    0x0b703d00,0x980ba060,0x17402647,0x16400f20,0x9e200b90,0x03c8000f,
    0x0d705d10,0x642d80f0,0x4c01f102,0x0f8f869e,0x16403c80,0x012e0b50,
    0x32000b60,0x0b534c02,0x00fa06b8,0x205c81f7,0x500fe44d,0x003c801f,
    0x001e8059,0x2000b55b,0x409b003c,0x3603c04d,0x07901642,0x56c25fc4,
    0xc8079007,0x25c16a02,0x40016c00,0xb534c02c,0xd10074c0,0x81ec881b,
    0x436c1de8,0x2e20aeec,0x003c803e,0x006a8059,0x20005bb5,0x805b803c,
    0x5b01e02e,0x01e602c8,0x0dd705df,0x05900f20,0x004b82d4,0x2c8002d8,
    0x50b534c0,0xf91003fb,0x8809fdbd,0x80dfeefd,0xfeeffaab,0x3fffe02f,
    0xffd86fff,0x0ff607ff,0xff001fe0,0xd0dfffff,0xffd0dfff,0x3fffe6bf,
    0xffffffff,0x0fffffb2,0x3fa03ffa,0xfd05f880,0xdfffffff,0xa8ffffee,
    0xff73ffff,0x740dffff,0x04ffffff,0x3ffffff6,0xfd6fffff,0x17bfffff,
    0x00353000,0x2000a988,0x00001aa8,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x4ccccc40,
    0x4ccc0999,0x98800999,0x10666601,0x01330033,0x00266662,0x8199d930,
    0x00400000,0x04404000,0x00157510,0x800565cc,0x4401bba8,0x26eea200,
    0x80266200,0x2e600998,0x0133100a,0x99881331,0x3fffff60,0x3ff64fff,
    0x1dffffff,0xa83fff98,0xff35ffff,0x7ffc403f,0x7ffffcc2,0x37f3000f,
    0x003db099,0x0000f200,0x3fee1f54,0x6e6ffdc2,0x3ba600df,0x03ccfecc,
    0x3dfb9ff9,0xf505ff70,0x105dd99b,0x3a20dffd,0xcefc86ff,0x3f24ddfc,
    0x45ffe83f,0x80b64ffd,0xc982d83d,0x01ff300f,0x025fc0f4,0x79001f79,
    0x00b6007b,0x00006fdc,0xd30000f2,0x8dfff03d,0x26079019,0x84fc882f,
    0x17dc41de,0x3d91bffe,0x03a07d30,0x03ae1660,0x80f213e6,0xb17fdc5a,
    0x16c1ae05,0x2fa60970,0x23e07a05,0x0f8f880f,0x00698f80,0x7e44001f,
    0x0790000c,0x80bf6200,0x22003ffc,0x7402e80f,0x3ae03644,0xf98fff20,
    0x3203e200,0x20ee0cc2,0x3212e03d,0xff516a03,0x07c416c3,0x407c02d8,
    0x07a03d69,0xfa5c1e5e,0x03d2d400,0xb10005b0,0x0790007f,0x003fc880,
    0x81f00033,0x7c19807a,0x0cc3e802,0x212e00b6,0x0b637c4b,0x790003ea,
    0x3fe62d40,0x80ba06e0,0x4c1e202d,0x207a0d56,0x3e3d0d37,0x09916c00,
    0x4c000d30,0x0f2002ee,0x000cfb80,0xbddd9500,0x004c81f9,0xaaaaaf98,
    0x804caaaa,0x9869800f,0x0f87b6a6,0x157bff70,0x8b501e40,0x05c807f8,
    0x20bb016c,0x07a0f669,0xf9aa2d9e,0x7883e200,0x0003f980,0x2620ef54,
    0x999cd999,0x00ef5409,0x357dd000,0x2d81f733,0xcccf9800,0x3ccccccc,
    0x0f100780,0xd14bbc9e,0x9fd95100,0x85a80f20,0x007cc06f,0x32eaab36,
    0xf89a604e,0xd53c0f40,0x5c01f16c,0x3ee02e84,0x0032a0fb,0x3fe1fe88,
    0xffffffff,0x0013ee6f,0x0f80bb00,0x3c4001e4,0x003a0000,0x8f8ec1a6,
    0x1000b569,0x540790bb,0x3a205e85,0xcccdd801,0xd300dfed,0x3c0f44c8,
    0x01f1e27a,0x882d40f4,0x01fcb70f,0x9001bf50,0x03dd3007,0xf07ffcc0,
    0x2d40f803,0x0002e800,0x99007b01,0x9e96af20,0x4402883c,0xb501e40f,
    0x026c0330,0x0bea02d8,0x1e87a1a6,0x21e6dc78,0x333f100f,0x9701f333,
    0x5006aae8,0x1e4003dd,0x001bf500,0x00e85ff9,0x00ba03f2,0x007cc1b1,
    0x445ff704,0x403e600f,0x372e3cda,0x34c07a81,0x05e98254,0xd8283540,
    0x34c34c02,0x0f03d354,0x700f81ff,0xffffffff,0xdf987907,0x0176cc02,
    0x5c001e40,0x17fa00cf,0xfbd3036e,0x2e07f301,0x502eb82f,0x237ffc9d,
    0x02fb82fa,0x7f883fe2,0xd301bf50,0xfa887e05,0x07e2005d,0x200b60f4,
    0x3d834c1e,0x0530f03d,0x9803a01f,0x07c86986,0x8000ff22,0xf910003c,
    0x201ff307,0xf2ffdefc,0xefd883ff,0x2601dfed,0x1efeddfe,0x74c27fe4,
    0x800efddf,0xb306e85e,0x7ffdbdf7,0x77f6fdc0,0xe801ffa8,0x05b07a03,
    0x306983d0,0x00f03d1f,0x4034c07c,0x3e23e81e,0x00cfb81f,0x0001e400,
    0x4fb8bb66,0x8000a980,0x20009a98,0x0cc01a98,0x0002aa20,0xaa988000,
    0x01330009,0x3d016e00,0x43d402d8,0x07b32069,0xc80f801e,0xc884b803,
    0x0ff9afdf,0x200001bd,0xd500003b,0x00001ba7,0x00000000,0x00000000,
    0x00000000,0x1e801f10,0x1fb9816c,0x3fe20698,0x03e00781,0x81e2003e,
    0x000000a8,0x90000000,0x00000003,0x00000000,0x00000000,0x98000000,
    0xffffffff,0xffffb1ff,0x019dffff,0x507ffffb,0x7fffdc3f,0x4ffffc84,
    0x909ffff9,0x0009ffff,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x33033310,0x4cccc413,0x4c409999,
    0x4c0d4409,0x01595109,0x215cc662,0x333100ba,0x01333301,0x40220004,
    0x3ffe6ffb,0x107ffd42,0x11111111,0x03510111,0x33100800,0x33333333,
    0x777776c1,0xeeeeeeee,0x0000004e,0xe8000000,0x3fe60fff,0x3ffff65f,
    0x3a24ffff,0xdbfb14ff,0x7d5ffc4b,0xfb82fecd,0xe8decfbf,0x7f441fce,
    0x3fe60eff,0x00ee06ff,0x9ff505e8,0x3f20fff4,0x3fffee4f,0xffffffff,
    0x213b3ea2,0x44bfee1a,0xffffc81f,0x23ffffff,0x99999998,0x09999999,
    0x00000000,0x1d900000,0x02d87d10,0x272e01d5,0xd90720ce,0x881f981d,
    0xa93fa0ff,0x4401f105,0x801e400f,0xff984ddc,0xfd03ff23,0x2600001f,
    0x75cbb11e,0xf99bffa0,0x4ccccc42,0x00099999,0x00000000,0x80000000,
    0x20fa20eb,0x201f982c,0xd9002feb,0x3e20f601,0xb03c2e41,0x64026407,
    0x5d16b803,0x3ee2ff88,0x001ffc47,0xdd901300,0x43ffc83d,0x000003e9,
    0x00000000,0x00000000,0x0174475c,0xfb803f30,0xa80f2001,0x84b87885,
    0x0f81a607,0x8bc8ade8,0x307cc6db,0x2a1ff81f,0x9837d45f,0x99999999,
    0x03300199,0x004880cc,0x00000000,0x00000000,0x2eeb8000,0x200ba200,
    0x01e4004b,0x970f10b5,0xa82e80f0,0xfffb5105,0x17c415bf,0x41fb075c,
    0x417ec4f9,0xfffffffb,0x002fffff,0x00000000,0x00000000,0x00000000,
    0x001ff300,0x25c00fa2,0x5a80f200,0x784b8788,0x00f42d40,0x3e807fcc,
    0xf86c9720,0x000037c3,0x00000000,0x00000000,0x00000000,0x2be60000,
    0x04d800ea,0x790012e0,0x43c42d40,0x1e80784b,0x65ec01a6,0x08500505,
    0x0001d808,0x00000000,0x00000000,0x00000000,0x3e600000,0x5c807ea1,
    0x0012e010,0x442d4079,0x80784b87,0x2e00f64b,0x00000fa5,0x00000000,
    0x00000000,0x00000000,0x00000000,0xa81f9800,0x1e05c81f,0x0f20025c,
    0xb87885a8,0x8f880784,0x20f88078,0x000000f8,0x00000000,0x00000000,
    0x00000000,0x00000000,0x2601fa80,0x4403ae1f,0xc8009707,0x1e216a03,
    0x6401e12e,0x101004cb,0x00000000,0x00000000,0x00000000,0x00000000,
    0x90000000,0x7cc1ffff,0xffff3fff,0x64ffffff,0xffffffff,0x7fffdc0f,
    0xc8ffff41,0x3fee3fff,0xf1013fe0,0x0000001f,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_30_usascii_x[95]={ 0,6,3,2,2,2,3,6,7,3,0,1,3,2,
5,2,2,2,2,2,2,2,3,2,2,3,5,4,0,1,0,0,2,0,1,1,2,1,2,1,1,2,2,1,
1,0,0,0,2,1,1,2,1,1,0,0,1,1,2,0,0,0,2,0,5,1,0,2,1,1,2,1,1,2,
2,2,2,0,1,1,0,1,2,2,1,1,0,0,1,1,3,0,7,0,2, };
static signed short stb__courier_30_usascii_y[95]={ 22,5,6,4,4,5,8,5,5,5,5,7,18,13,
18,4,5,5,5,5,5,5,5,5,5,5,10,10,7,11,7,6,5,6,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,4,5,5,28,4,10,5,10,5,10,5,10,5,5,
5,5,5,10,10,10,10,10,10,10,6,10,10,10,10,10,10,5,5,5,12, };
static unsigned short stb__courier_30_usascii_w[95]={ 0,4,10,12,11,12,11,4,6,6,10,14,7,12,
5,11,11,11,11,12,11,12,11,11,11,11,5,6,13,14,13,10,11,16,14,14,13,13,13,14,14,11,14,15,
14,16,15,14,13,14,15,12,14,14,16,16,14,14,12,5,10,5,11,17,6,14,15,13,15,13,13,14,14,12,
9,14,12,16,14,14,15,15,13,12,14,14,16,16,14,15,11,6,2,6,12, };
static unsigned short stb__courier_30_usascii_h[95]={ 0,18,8,20,21,18,15,9,21,21,11,15,8,3,
5,21,18,17,17,18,17,18,18,18,18,18,13,15,15,6,15,17,19,16,16,17,16,16,16,17,16,16,17,16,
16,16,16,17,16,20,16,17,16,17,16,16,16,16,16,21,21,21,8,2,5,13,18,13,18,13,17,17,17,17,
22,17,17,12,12,13,17,17,12,13,17,13,12,13,12,17,12,21,21,21,5, };
static unsigned short stb__courier_30_usascii_s[95]={ 253,180,114,89,41,141,79,250,71,28,91,
105,125,174,161,53,129,200,176,154,188,167,185,209,197,1,184,134,120,133,91,
242,117,62,14,1,239,225,211,227,182,170,212,137,122,45,29,161,197,102,59,
31,44,16,75,153,107,92,1,65,78,35,102,187,167,141,221,156,237,170,26,
40,68,13,1,146,55,57,42,190,83,99,28,222,115,235,74,205,1,130,16,
21,18,11,148, };
static unsigned short stb__courier_30_usascii_t[95]={ 1,1,78,1,1,1,61,61,1,1,78,
61,78,78,78,1,1,24,24,1,24,1,1,1,1,24,61,61,61,78,61,
24,1,61,61,43,43,43,43,24,43,43,24,43,43,61,61,24,43,1,43,
43,43,43,43,43,43,43,61,1,1,1,78,78,78,61,1,61,1,61,24,
24,24,24,1,24,24,78,78,61,24,24,78,61,24,61,78,61,78,24,78,
1,1,1,78, };
static unsigned short stb__courier_30_usascii_a[95]={ 254,254,254,254,254,254,254,254,
254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,
254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,
254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,
254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,
254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,
254,254,254,254,254,254,254, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_30_usascii_BITMAP_HEIGHT or STB_FONT_courier_30_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_30_usascii(stb_fontchar font[STB_FONT_courier_30_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_30_usascii_BITMAP_HEIGHT][STB_FONT_courier_30_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_30_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_30_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_30_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_30_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_30_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_30_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_30_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_30_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_30_usascii_s[i] + stb__courier_30_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_30_usascii_t[i] + stb__courier_30_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_30_usascii_x[i];
            font[i].y0 = stb__courier_30_usascii_y[i];
            font[i].x1 = stb__courier_30_usascii_x[i] + stb__courier_30_usascii_w[i];
            font[i].y1 = stb__courier_30_usascii_y[i] + stb__courier_30_usascii_h[i];
            font[i].advance_int = (stb__courier_30_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_30_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_30_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_30_usascii_s[i] + stb__courier_30_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_30_usascii_t[i] + stb__courier_30_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_30_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_30_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_30_usascii_x[i] + stb__courier_30_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_30_usascii_y[i] + stb__courier_30_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_30_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_30_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_30_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_30_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_30_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_30_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_30_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_30_usascii_LINE_SPACING
#endif

