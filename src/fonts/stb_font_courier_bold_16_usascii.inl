// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_16_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_16_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_16_usascii_BITMAP_WIDTH         128
#define STB_FONT_courier_bold_16_usascii_BITMAP_HEIGHT         74
#define STB_FONT_courier_bold_16_usascii_BITMAP_HEIGHT_POW2   128

#define STB_FONT_courier_bold_16_usascii_FIRST_CHAR            32
#define STB_FONT_courier_bold_16_usascii_NUM_CHARS             95

#define STB_FONT_courier_bold_16_usascii_LINE_SPACING           8

static unsigned int stb__courier_bold_16_usascii_pixels[]={
    0x260f5c00,0xb9c435c5,0x12600f21,0x20203a20,0x04f83ffb,0xffd10173,
    0x00000010,0x0f9adc04,0x4cf717a6,0x47f7a83f,0x1afc807b,0xfd983ee0,
    0x640d7dc5,0x27fff4c2,0xbff53ed4,0x7ecc0fd8,0x037fae2f,0x3e3f89be,
    0xb9ee35c5,0x88bef707,0xfffd103f,0x3f127c0f,0x4c47b8f6,0x3bf10999,
    0x45ee0fee,0x3fa4eacf,0x42abbe61,0xb85eabf9,0x0fb83f22,0x3dcf71ae,
    0x067dfec4,0x543ea0d9,0x2541f706,0x3f23dcb5,0x81f73fff,0x4f77b87d,
    0x5e87fa7b,0x007d4d90,0x5c7f113e,0x86c9ee0f,0x23fffffd,0x1cf982f8,
    0x22b22740,0x261ee5fd,0x50d93f99,0x49b7b81f,0x221fb1f8,0x5fd42caf,
    0x1fc406e9,0x5cff3274,0x37609f77,0x506d81f9,0x1f507ffd,0x25acc9d8,
    0x6b9f407b,0x9d7b87b8,0x2e7c97c4,0x7f46feff,0x98fd43ff,0x3ee5d82f,
    0x436c5ee1,0x983fceea,0x1f91042f,0xad9d85e8,0x7d01ee5a,0x709d07e6,
    0x71f8936f,0x1f8afd4d,0x41fd57f7,0x3a0fe24d,0x5cf71ae5,0xffffff87,
    0x526c6d80,0x6c0fcc1f,0x1ee6fe9a,0x567ec7d0,0xf77b81fe,0x7cc313dc,
    0xf32ed3a1,0x213e0743,0x4f71ae3f,0x0f57d07b,0xddfd0fcc,0xb705d8bf,
    0xe80f704c,0x806ffe43,0x9d59f37b,0x7dcef408,0x1f935f91,0xf71f2062,
    0xa9ee36c3,0x06bbf81f,0x5fb532f4,0x3f102f98,0x201fb866,0x5df7ec3f,
    0xfb9f220d,0xd31ee0ef,0x7fec49ff,0x23f9802f,0xd50bf25e,0x5d7c3f44,
    0x2e07d406,0x7d406c87,0x53fee1ef,0x260fdba9,0x224ffdef,0x010087ff,
    0xc8001002,0x10083f36,0x00223010,0x3507302e,0x86620200,0x0001dffb,
    0x00000331,0x00820000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x10000000,0x02a62620,0x41311530,
    0x88662018,0x33155009,0xfe800e60,0xfe816dc3,0x10000003,0x2206fecc,
    0x7fc1dffc,0x540dffff,0x24fffffe,0x4bff206b,0x3fea0ffe,0x3a61ffff,
    0xfa804fff,0x203a32a3,0x6dc403fa,0x833ff207,0xeadf88fd,0x2ed5fdc5,
    0x1fccffe2,0x93f2277a,0xe8199ec8,0x19f0bea5,0x6fc43fd3,0x2a605f71,
    0x06cae3f8,0xd80a9bf8,0x57f907ef,0x0fa9ccbd,0x07d403f3,0x3d4d713e,
    0xffffd1fc,0xdb1fa85f,0x70fd47a8,0x7545d81f,0x3623ffff,0x7fc1b9ce,
    0x7b80cfff,0x407d45b0,0x307f30f9,0xd8df0dd7,0x3f987e25,0xe804cf64,
    0x07cc1f9d,0x543643f7,0x36633a0f,0x16f64c3f,0x1fd457fc,0x07d803dc,
    0x213faf7e,0xfff83ffc,0x6fe41fec,0x035c3ffd,0xee82f7cc,0x1f21ffba,
    0x220fa9ee,0x332f763f,0x435c5f80,0x21fd807b,0x3fbf6639,0x9f07f203,
    0x36a039d9,0x035c3ebe,0xfb301fd8,0x0fd43fdf,0x220fa93a,0x859bc83f,
    0x3dc35c4f,0xfd85fb10,0x7c01fb81,0xe8001fc3,0x6dcd7d43,0x88805e80,
    0x567ec0f9,0x556fc0fe,0x686c0dfd,0x7dcdffd4,0xfd107b83,0x6d544203,
    0x654d644f,0x00b7ea1f,0x6c0dfa88,0x7510cfff,0xebaa809f,0x1cfeb886,
    0xffeffd98,0x3a1f74c3,0x20beffef,0x222afda9,0x503aabff,0xff905bff,
    0xeffe85ff,0x7fff7000,0xfff70110,0x6fff401d,0x0c400400,0x80440080,
    0x31fffffc,0x01ffffff,0x00044004,0x00000000,0x00000000,0x00000000,
    0xa8000000,0x42aa21ac,0xaca882aa,0x4d654408,0x3005dc40,0xbf015555,
    0x1277e4c0,0x510d4c55,0xbf90d4c5,0x7d47f100,0x3ffe4fff,0x3fe20fff,
    0xbffb1ffe,0x7cc3fff3,0x3e65ffef,0x3ee5ffef,0xff884fff,0x03c83fff,
    0xfc932f7a,0x321ffd1f,0x21ffd2ff,0x0fb805d9,0xe86aabea,0x320fcaac,
    0x1fc3f50e,0x225f88fe,0x5d837a5e,0x200fa9ae,0x1033306b,0xf70335f5,
    0x5f703b63,0x53b903b6,0x0f50f603,0x1db1b204,0x3f87f05c,0x265303e6,
    0x4110c40f,0x21ae01fa,0xffd87ffb,0xaed81fff,0x3fbfb01f,0x09ffff90,
    0x39fff50d,0x3fe61fc0,0x3e1fc1ce,0x0d701ae3,0x202fec40,0x20f9106b,
    0xf1009afa,0x02fe809f,0x103ee5f9,0x0dd59d30,0x765403ea,0x47f0fe1f,
    0xfd35c06b,0x42fa83ff,0xf7035c68,0x2e007e20,0x82ffcc07,0x0007e65c,
    0x21b207e2,0x89d1f40d,0x420be61f,0x0db531fa,0x5c1f3051,0x7c41ee06,
    0x2207b801,0x5c84f9df,0x803987e6,0x443f82f8,0x21fc9aef,0xd86d9bfc,
    0x3a6da9cf,0x885ea9be,0xfa9cf980,0xaafdaa84,0x0557f730,0xd306bf6a,
    0xd88ff21f,0x7e47f71e,0x3ed4dec0,0x7ef407d4,0xdffc83ef,0x3dfffb01,
    0x177ffec4,0x3ae207e4,0xfffd04ff,0x3fff65ff,0x7ffcc0ff,0xe9ffe44f,
    0x19ff71ff,0x5c041fff,0x5a82dffe,0x02200440,0x004c0040,0x00001002,
    0x00000000,0x00004000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x0d554400,0xa9807fa8,0xaaa981aa,
    0xa86a60aa,0x2a054c2a,0x0555510a,0x0d4c6aa2,0x554c2aa6,0x85555510,
    0xa83551aa,0xb82aa62a,0xfffc9b8a,0x03e444ff,0x0f7ffffc,0x41fffff9,
    0xfff98fff,0xff997fe1,0x03ffff53,0xfff1fffb,0xff9fffc1,0xfffffb3f,
    0x3e77fe61,0x4bffe26f,0x22fe4ffe,0x3ee2b92f,0x0198bd40,0x5c97625f,
    0x49ff0bd1,0xc8ffd43e,0x6404d87f,0x2f70bf55,0x0f70f718,0x441f9972,
    0x4ba2742f,0x17c4b91f,0x417ff5ea,0xa5c3ea2f,0x1fef80fd,0x8cefa87d,
    0x404d87ef,0xf504fbdc,0x70d93fb1,0x1f99720f,0xb07ea5d8,0x6e7643a3,
    0x7e7d40ef,0xd737f00d,0x3e03f70b,0xfa87d6db,0xd87bfcfb,0x07ffe404,
    0xdcff9f98,0xdf907b85,0x3f503fdd,0x320821b6,0xfa81ffef,0x7fffc05f,
    0x819fd40d,0x43ebf8bf,0x7bcff8fa,0xf91224d8,0xbf101dd7,0xf709dd9f,
    0x3f733b20,0x05f19d01,0x0ee8ae40,0xf01fefd4,0xe97e2037,0x3ffb9fc3,
    0x7b8fcbd4,0xc83e64d8,0x3fe09d15,0x7b83ff9d,0x80fccb90,0x10307cfb,
    0x477e25db,0x839f77c8,0xfe80acfa,0x3e63faab,0xfc87fd1d,0x5447f662,
    0x10fcaade,0x02fea5db,0x98bfa5fd,0x3622afda,0x2207f71e,0xc89b04ff,
    0x29f50fff,0x8dff37fa,0xff84ffff,0x3f23ffff,0x7c47f35f,0x29ffb2ff,
    0xfffffffa,0x3a1fff90,0xfc87ec2f,0x3fffff21,0xff3bff70,0x803f201f,
    0x0000002b,0x00000000,0x00000000,0x00000000,0x55555500,0x2aaaa215,
    0x355511aa,0xaaaaa881,0x1555512a,0x501554c0,0x6ed40fff,0x0ff40002,
    0x2a600000,0x3e24a80a,0x91ffffff,0x27ffffff,0x22fffffc,0x6ffffffb,
    0x09fffffb,0x440bfffa,0xd9f307da,0xa801fcc5,0x5d9801ff,0xfff905a8,
    0x7c47b85f,0x45c87e21,0x7ec4fe3e,0x35deef71,0x980fd4b9,0x83dc05ef,
    0x5df9107b,0x201fde80,0x7b81efc8,0x51b21310,0x9599f88d,0x1b9dae41,
    0x5ea9d0fe,0x52e4d77b,0x3ebb605f,0x7cc1ee00,0x077f6603,0x5c07e7f2,
    0x41ee03ff,0x4c7fffc9,0x83f77c45,0x3f83fffc,0x45ee32e4,0x1fffbf20,
    0x204f97c4,0xf5ffd07b,0x433fa609,0x541f8bf8,0xed980cfe,0x37a3eefe,
    0x44187dab,0x9f906ddf,0x5c87f05f,0x99d907b8,0x99f709fb,0x543dc0fd,
    0x501ffd9f,0x2ff619fd,0x67f543fb,0xcfdcc880,0xd737f33c,0x89f8803f,
    0x2e2ab902,0x84e88fe5,0x7b8b907b,0x2feeeee8,0x75f30f70,0xdfd981df,
    0x7fffffc0,0x203ffb80,0xdfff907b,0xacfb80df,0xaaaed880,0xd75bf36d,
    0x1afda81f,0x3aeabb62,0xdd327dc6,0x557ed4c3,0x4fffff20,0x4401efd8,
    0x3f2203fb,0x0c07b82e,0x7ffff100,0xffffff90,0x37bfff2d,0x27fffcc0,
    0x3bfffff9,0xfe8fffc4,0x3ffffa4f,0x2e98182f,0x01fff500,0x05985c88,
    0x00000000,0x00000000,0x00000000,0x00000000,0x826a6000,0x98066098,
    0x02aa200a,0x4cc40a98,0x984cc199,0x298cc409,0x83528998,0x03330998,
    0x88262093,0x0544cc19,0x1fffff10,0x0ffddbf6,0x113fffa2,0xa89ffffb,
    0x3f24fffe,0xff30ffff,0xfd8bff19,0x3e26ffdf,0x23ffffff,0xfff8cffe,
    0x3a05ae12,0x54bff27f,0x904fffff,0x6d83aa3d,0x13bf07e6,0x98f647f7,
    0x5c46744f,0x9f71b72f,0x05fbdfa8,0xa8515ff7,0x46b9fa9f,0xfd87ee6d,
    0x3e20fefe,0x644e8eba,0xf301f52f,0x26c83bdf,0xb07e61f8,0xa86617cb,
    0x25feeeef,0xff304fa8,0x5007d409,0x223d5eaf,0xfb88bd2f,0xfebe81df,
    0xf12e42fa,0x3f6e6301,0x21f89b21,0xf8aec1f9,0x6667cc02,0x053ea3cc,
    0xa80ff7e4,0x57abd407,0x03f5db0f,0x3f60ddf7,0x2e40ffef,0x33bd01f1,
    0x54fdc3f7,0x4df743fe,0x26fba2fc,0x4d6f46c9,0x55df52ca,0x22ff623f,
    0x57e542ff,0xfa9fc81a,0x7fcc1fa9,0x03d17b05,0x88ff3df7,0xb05f51ed,
    0xe889dffd,0x6c46feff,0x7ec42fff,0x7e4c2eff,0xfffb2eff,0x33fee5ff,
    0xff10fff8,0xff88bfff,0x84fadfad,0x260001fd,0xffb8bd3f,0x0440dfd4,
    0x00400220,0x00098004,0x00000000,0x00000000,0x00000000,0x08000000,
    0x40222220,0x26662029,0x32e09999,0x0000cccc,0x00000000,0x00000000,
    0x3fee1ae0,0x320fffff,0xf53d8cff,0xffffffff,0x0666665c,0x00000000,
    0x00000000,0x5ff98000,0x55555544,0x7ffccf41,0x26666660,0x00000099,
    0x00000000,0x00000000,0x47f3bf10,0x2aaaaaa8,0x00002a20,0x00000000,
    0x00000000,0x36c00000,0x3ffee1f5,0x0000ffff,0x00000000,0x00000000,
    0x00000000,0x00001811,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,
};

static signed short stb__courier_bold_16_usascii_x[95]={ 0,3,1,0,1,1,1,3,3,1,1,0,2,1,
3,1,1,1,0,0,1,0,1,1,1,1,3,2,-1,0,0,1,1,-1,0,0,0,0,0,0,0,1,0,0,
0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,1,3,1,1,1,-1,2,0,-1,0,0,0,1,0,0,0,
1,0,0,-1,0,0,-1,0,0,1,1,0,0,-1,0,0,1,2,3,2,0, };
static signed short stb__courier_bold_16_usascii_y[95]={ 11,1,2,1,1,2,3,2,1,1,2,2,9,6,
9,1,1,1,1,1,2,2,1,2,1,1,4,4,2,4,2,2,1,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1,13,1,4,2,4,2,4,2,4,2,2,
2,2,2,4,4,4,4,4,4,4,2,4,4,4,4,4,4,2,2,2,5, };
static unsigned short stb__courier_bold_16_usascii_w[95]={ 0,3,6,8,7,7,7,3,4,4,7,8,4,7,
3,7,7,7,8,8,7,8,7,7,7,7,3,4,9,9,9,7,7,10,9,8,8,8,9,9,9,7,9,9,
9,10,10,9,9,9,9,8,8,9,10,10,9,9,7,4,7,4,7,11,4,9,10,9,9,8,8,9,9,8,
6,9,8,10,9,8,10,9,9,7,8,9,9,10,9,9,7,5,2,5,8, };
static unsigned short stb__courier_bold_16_usascii_h[95]={ 0,11,5,12,12,10,9,5,13,13,7,9,5,2,
3,12,11,10,10,11,9,10,11,10,11,11,8,9,9,6,9,10,12,9,9,10,9,9,9,10,9,9,10,9,
9,9,9,10,9,12,9,10,9,10,9,9,9,9,9,12,12,12,6,3,3,8,10,8,10,8,9,10,9,9,
12,9,9,7,7,8,10,10,7,8,10,8,7,7,7,10,7,12,12,12,4, };
static unsigned short stb__courier_bold_16_usascii_s[95]={ 127,102,121,26,43,88,68,123,1,6,96,
104,122,86,122,51,94,107,115,9,86,1,106,10,114,1,124,122,94,55,76,
56,59,48,38,37,20,11,1,46,100,92,64,71,61,50,39,68,21,79,1,
18,29,27,110,81,102,92,31,67,35,89,47,74,121,113,96,28,78,38,83,
58,112,74,72,11,59,75,115,19,18,29,65,1,39,9,86,104,55,48,47,
20,17,11,65, };
static unsigned short stb__courier_bold_16_usascii_t[95]={ 1,1,38,1,1,15,48,48,1,1,58,
48,26,66,32,1,1,15,15,15,48,27,1,27,1,15,15,1,48,66,48,
26,1,48,48,26,48,48,48,26,38,38,26,38,38,38,38,15,38,1,38,
26,48,26,38,38,26,26,38,1,1,1,66,66,44,48,15,58,15,58,26,
15,26,26,1,38,48,58,58,58,15,15,58,58,15,58,58,58,58,15,58,
1,1,1,66, };
static unsigned short stb__courier_bold_16_usascii_a[95]={ 136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_16_usascii_BITMAP_HEIGHT or STB_FONT_courier_bold_16_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_16_usascii(stb_fontchar font[STB_FONT_courier_bold_16_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_16_usascii_BITMAP_HEIGHT][STB_FONT_courier_bold_16_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_16_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_16_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_16_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_16_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_16_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_16_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_16_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_16_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_16_usascii_s[i] + stb__courier_bold_16_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_16_usascii_t[i] + stb__courier_bold_16_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_16_usascii_x[i];
            font[i].y0 = stb__courier_bold_16_usascii_y[i];
            font[i].x1 = stb__courier_bold_16_usascii_x[i] + stb__courier_bold_16_usascii_w[i];
            font[i].y1 = stb__courier_bold_16_usascii_y[i] + stb__courier_bold_16_usascii_h[i];
            font[i].advance_int = (stb__courier_bold_16_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_16_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_16_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_16_usascii_s[i] + stb__courier_bold_16_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_16_usascii_t[i] + stb__courier_bold_16_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_16_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_16_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_16_usascii_x[i] + stb__courier_bold_16_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_16_usascii_y[i] + stb__courier_bold_16_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_16_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_16_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_16_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_16_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_16_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_16_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_16_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_16_usascii_LINE_SPACING
#endif

