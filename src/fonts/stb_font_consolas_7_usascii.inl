// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_7_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_7_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_7_usascii_BITMAP_WIDTH         128
#define STB_FONT_consolas_7_usascii_BITMAP_HEIGHT         28
#define STB_FONT_consolas_7_usascii_BITMAP_HEIGHT_POW2    32

#define STB_FONT_consolas_7_usascii_FIRST_CHAR            32
#define STB_FONT_consolas_7_usascii_NUM_CHARS             95

#define STB_FONT_consolas_7_usascii_LINE_SPACING           5

static unsigned int stb__consolas_7_usascii_pixels[]={
    0x30b10980,0x0225c90b,0x59154177,0x2aa06186,0x42a85310,0x186350b9,
    0xb945d426,0x46aa0662,0x20ae23b8,0x2248ea19,0x2e0cc354,0x5470aa20,
    0x45ce22a4,0x8d4d472a,0x35350ada,0x4c5ca6aa,0x48d42552,0x3bb84c71,
    0x17350e24,0x95120266,0x325906e3,0x0a228352,0x8aae7122,0x3a493cbb,
    0x54832264,0x924a22a3,0x291a8dd2,0x3a86a038,0x4c79505c,0x53525c3c,
    0xb488b263,0x1442a0d4,0x22d99c48,0x39c92bbb,0x773121dc,0x724332a3,
    0x29099452,0x3cb8ae38,0x5e547105,0xa46a0d40,0x9290dc1a,0x2070621a,
    0x2e3751c4,0x219931bb,0x17703223,0xc9815198,0x2a59930c,0x8dc19931,
    0x8e073c8b,0x4971398c,0x39930cb9,0x49c432ea,0x1d41c86a,0xda9c4911,
    0xb981170c,0x10004c71,0x00000021,0xa884c000,0x32000002,0x0c46a710,
    0x1a82a218,0x4220660a,0x0000002a,0x00000000,0x02000000,0x00000221,
    0x00000000,0x00000000,0x00000000,0xb88ae000,0x47710a82,0xb885cc38,
    0x3a86ee62,0x098aa186,0x98e44398,0x57302a1b,0x46130884,0x18311889,
    0x51318a11,0x54d45501,0x88709351,0x09541734,0x30c886e2,0x54d4e387,
    0x2e611151,0x173505c0,0x2a8a8aaa,0x22f23315,0x0a277572,0x8d4dc935,
    0x26a29a89,0x74cbb11a,0x5d20a609,0x973090bb,0x432a14c3,0x377739ab,
    0x541a8eaa,0x549951bd,0x237351aa,0x5377198a,0x2144eaee,0xaa84c85a,
    0x2a793929,0x45b191a9,0xb9c4e903,0x890e5d40,0x77770cb9,0x0e542f26,
    0x4d4482f2,0x5d4662a4,0x45c73661,0x2271372c,0x86a15542,0x59288aab,
    0x5c332a71,0x9730e2db,0x5e443326,0x80736e01,0x22a03bac,0x22a2400b,
    0x2a33152a,0x8e593800,0x22a37b13,0x2ea02a0b,0x0019930c,0x00000098,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x18000000,0x442ee231,0x0c1530bb,0x83306e63,0x2886e21a,0x50e0ddd4,
    0x215c2a85,0x986ee609,0x88a62281,0x0c22261a,0x2185dcc3,0x2a617731,
    0xb8c82a60,0x5c54e290,0x40a892e0,0x06a1cc19,0xb9545c17,0x217111a8,
    0x98d442b9,0xaa96e1cc,0x2275591a,0x50e26e4c,0x8f238a43,0x42f663c9,
    0xa854d4e4,0x3312e25b,0x50644198,0x9c522441,0x26242b9b,0x42ee2482,
    0x4662a4a8,0xb8f2389b,0x790543bb,0x83326479,0x3239a419,0x654a62a4,
    0x8330661d,0x32440a84,0x70d4c199,0x50d42983,0x4baf63b9,0x7137198a,
    0x65dc6eaa,0x4e290542,0x9833298b,0x419990bd,0x24332a3c,0x64c33269,
    0x0005400c,0x39d51dcc,0x44487726,0x00004839,0x14866cc0,0x00000007,
    0x00000000,0x00000000,0x00000000,0x114c4618,0x00554413,0x7304c013,
    0x26386a37,0x77022233,0x00000044,0x00000000,0xb98d4d40,0x4889b129,
    0x909b895c,0x37731dc5,0x8e454026,0xa8ea2aaa,0x00000002,0x00000000,
    0x2a20cc97,0x21702e09,0x98981bc9,0x00000000,0x00000000,0x40000000,
    0x2600663c,0x002600bd,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,
};

static signed short stb__consolas_7_usascii_x[95]={ 0,1,0,0,0,0,0,1,1,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0, };
static signed short stb__consolas_7_usascii_y[95]={ 5,0,0,0,-1,0,0,0,-1,-1,0,1,3,2,
3,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,1,0,1,0,1,0,1,0,0,
0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,-1,0,2, };
static unsigned short stb__consolas_7_usascii_w[95]={ 0,2,3,4,4,4,4,2,2,3,4,4,3,3,
2,4,4,4,4,4,4,4,4,4,4,4,2,3,4,4,4,3,4,4,4,4,4,4,4,4,4,4,3,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,4,3,4,4,3,4,4,4,4,4,4,4,4,4,
3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,4,4, };
static unsigned short stb__consolas_7_usascii_h[95]={ 0,6,2,5,7,6,6,2,8,8,4,4,4,2,
3,6,6,5,5,6,5,6,6,5,6,5,5,6,5,2,5,6,7,5,5,6,5,5,5,6,5,5,6,5,
5,5,5,6,5,7,5,6,5,6,5,5,5,5,5,7,6,7,3,2,2,5,6,5,6,5,5,6,5,5,
7,5,5,4,4,5,6,6,4,5,6,5,4,4,4,6,4,7,8,7,2, };
static unsigned short stb__consolas_7_usascii_s[95]={ 47,77,70,96,29,89,16,53,5,1,21,
35,31,74,40,21,6,86,81,113,101,108,30,91,11,76,125,85,66,48,56,
94,34,41,36,35,26,21,16,72,6,1,26,115,110,105,100,67,90,39,80,
123,61,80,31,55,11,120,45,44,98,25,43,65,56,40,1,70,118,60,75,
103,85,46,21,65,51,111,106,71,62,57,16,50,52,95,11,121,116,47,26,
16,8,11,60, };
static unsigned short stb__consolas_7_usascii_t[95]={ 8,1,22,16,1,1,9,22,1,1,22,
22,22,22,22,9,10,16,16,1,16,1,9,16,9,16,9,1,16,22,16,
1,1,16,16,9,16,16,16,1,17,17,9,9,9,9,9,1,9,1,9,
1,16,1,16,9,16,9,9,1,1,1,22,22,22,9,10,9,1,9,9,
1,9,16,1,9,16,16,16,16,1,1,22,9,1,9,22,16,16,1,22,
1,1,1,22, };
static unsigned short stb__consolas_7_usascii_a[95]={ 62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_7_usascii_BITMAP_HEIGHT or STB_FONT_consolas_7_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_7_usascii(stb_fontchar font[STB_FONT_consolas_7_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_7_usascii_BITMAP_HEIGHT][STB_FONT_consolas_7_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_7_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_7_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_7_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_7_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_7_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_7_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_7_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_7_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_7_usascii_s[i] + stb__consolas_7_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_7_usascii_t[i] + stb__consolas_7_usascii_h[i]) * recip_height;
            font[i].x0 = stb__consolas_7_usascii_x[i];
            font[i].y0 = stb__consolas_7_usascii_y[i];
            font[i].x1 = stb__consolas_7_usascii_x[i] + stb__consolas_7_usascii_w[i];
            font[i].y1 = stb__consolas_7_usascii_y[i] + stb__consolas_7_usascii_h[i];
            font[i].advance_int = (stb__consolas_7_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_7_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_7_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_7_usascii_s[i] + stb__consolas_7_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_7_usascii_t[i] + stb__consolas_7_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_7_usascii_x[i] - 0.5f;
            font[i].y0f = stb__consolas_7_usascii_y[i] - 0.5f;
            font[i].x1f = stb__consolas_7_usascii_x[i] + stb__consolas_7_usascii_w[i] + 0.5f;
            font[i].y1f = stb__consolas_7_usascii_y[i] + stb__consolas_7_usascii_h[i] + 0.5f;
            font[i].advance = stb__consolas_7_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_7_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_7_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_7_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_7_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_7_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_7_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_7_usascii_LINE_SPACING
#endif

