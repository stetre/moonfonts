// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_consolas_8_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_consolas_8_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_consolas_8_latin1_BITMAP_WIDTH         256
#define STB_FONT_consolas_8_latin1_BITMAP_HEIGHT         34
#define STB_FONT_consolas_8_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_consolas_8_latin1_FIRST_CHAR            32
#define STB_FONT_consolas_8_latin1_NUM_CHARS            224

#define STB_FONT_consolas_8_latin1_LINE_SPACING           5

static unsigned int stb__consolas_8_latin1_pixels[]={
    0x20226186,0x50702619,0x30260540,0x9b828837,0xa8a20980,0x261b8143,
    0x15505c08,0x44089808,0x983302a0,0x1044c141,0x41982885,0x4050a219,
    0x5104cc09,0x98141130,0x3704ce62,0x8a208981,0x26e1c089,0x21130ea0,
    0x4c7138c8,0x20d41808,0x0980c42a,0x2a1ce214,0x2105c40a,0x24335109,
    0x224c1111,0x8924c099,0x22624bd8,0x42c4ef61,0x4c088181,0x99826608,
    0x2660c0c0,0x20610220,0x302660ec,0xbb104411,0x2224d647,0x91044c0a,
    0x2dc9844c,0x21cc1311,0x44e2619a,0xb0c96193,0x44b1e654,0x477264bd,
    0x326e4bd8,0x4497b11b,0xcac324bd,0x961924b0,0x212f6229,0x43219124,
    0x1906eb0c,0x59912cc8,0x8b322cc8,0x259912cc,0x52352cc8,0x8b32291a,
    0x3322190c,0x8d459912,0x5c652354,0xc8832ea4,0x88b3222c,0x2aa59913,
    0xcc8a52e3,0x2e25b712,0x23225138,0x2a923224,0x190c864b,0x432191a8,
    0x2192aacc,0x6432190c,0x492c32b0,0x190e6b0c,0xb1275032,0x32b0c864,
    0x566ea2c0,0xacdd4b0b,0xb37559ba,0x2b512d44,0xba46a91a,0x71ce44b0,
    0x2a585d61,0x8da46a91,0xb86a60bb,0x22585cb0,0x1eb96a23,0x2d449197,
    0x81c5c471,0x50dec1bd,0x64b0c963,0x43258d40,0x64b1accc,0xb0c864b0,
    0x86492c32,0x032582a5,0x92c32247,0x71215561,0x72432337,0x466ee337,
    0x937319bb,0x595526e6,0x44865655,0x19485c5b,0x4aab2a92,0xcc891795,
    0x0c92190b,0x49b98c49,0xa5cdd666,0x88e249b9,0x2d45138c,0x8b36a2d4,
    0x8d42c325,0x1dddcb0c,0x4b0c9619,0x92c2eb0b,0xc8a6585c,0x262490b0,
    0x92c2e2cd,0xbd886e79,0x6c459912,0x2257b12b,0x299932bd,0x99d14cc9,
    0x664533a2,0x33621c42,0x74459912,0x2299d14c,0x3322e2ce,0x64459910,
    0x664ce62c,0x64e5bb54,0x1c499935,0xb8e27151,0x20d42b82,0x20b3622b,
    0x5c59b10c,0x222cd880,0x4f3662cd,0xd9923cd9,0xcd89623c,0xb1092542,
    0x88f36613,0x000002c3,0x00000000,0x000000e2,0x0000001c,0x81a670e0,
    0x89c42ec8,0x30570573,0x59300281,0x0002ea00,0x4012e000,0x2a0c801a,
    0x08014c0c,0x00000044,0x00000000,0x00000000,0x00000000,0x22510000,
    0x00000002,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x88000000,0x400a0982,0x20a09828,
    0x0e609b82,0x81370226,0x02813028,0x2044c175,0x40330100,0x02140132,
    0x08810ee6,0x82040444,0x1040621a,0x1b981104,0x40880414,0x46a59900,
    0x08208584,0x0a219814,0x30544135,0x04d42413,0x104cc151,0x0e60a881,
    0x81510226,0x18828099,0x3352454c,0xbd88eee6,0xa4072e64,0x3225301a,
    0x4533ea3b,0x259713bd,0x47321bd8,0x45914bc8,0x2173bd84,0x42c59714,
    0x837b31d9,0x57950be9,0x4246a1cc,0x92a95e41,0x4cc18088,0x2e25b710,
    0x2a5b712d,0x237b13ce,0x37b11bd8,0x6644b322,0x216e16e2,0x5b85b85b,
    0x864d45b8,0x57591bd8,0x99124321,0xcaae6441,0xd317243c,0x00ba5fdc,
    0x1530e253,0x473245cc,0x21706e0b,0x0cd894c4,0x40aa1973,0x2648d44c,
    0x24c49543,0xc886f612,0x4c893224,0x710e21c4,0x0e21c448,0x44b51071,
    0x7902f25a,0x5e40bc81,0x2f205e40,0x1c4366a0,0x2e58cd2e,0x8dc75b30,
    0x23892554,0xa5644bac,0x88ed4b75,0x497972db,0x388751ed,0x31217032,
    0x4d5226a5,0xb710edc3,0x91237617,0x4373aa59,0x88df5448,0x848481db,
    0x10e21c44,0x966c4487,0x59b12cd8,0x4dcd26e6,0x5c471714,0x88e2e238,
    0x8e2e238b,0x226a38b8,0x2b259b15,0x592190ab,0x35585cb9,0x24ae0b92,
    0x16121748,0x23558d56,0x15490135,0xc8a62c2e,0xb039914b,0x346a2edc,
    0x1b01a8e2,0x40ed4448,0x1c448484,0xc98710e2,0x44388712,0xc9a664c3,
    0x54b9b54c,0x9736a5cd,0x336a5cda,0x9a9736a5,0xbc98714b,0xca8b3623,
    0x299b30dc,0x91122cc9,0x66c56059,0x2e259735,0x2677911c,0x330373cd,
    0x3cc99e64,0x22a81b91,0x479950b9,0x376a17b4,0xb8804c01,0x2e279d50,
    0x44bae22d,0x25d712eb,0x5d912ec8,0xd880bb22,0x2259b12c,0x724002cd,
    0x5c90b921,0x2e485c90,0xb1005c90,0x00000059,0xcc800660,0x00000002,
    0x91000070,0x0000cc19,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x30898000,
    0x4485c263,0x4263309b,0x01881329,0x22204444,0x32a99910,0x4042083c,
    0x0188ae20,0x4098a202,0x23a85cc8,0x08010400,0x20444408,0x0820a4c0,
    0x11104444,0x20820221,0x02220200,0x40411102,0x42082080,0x9926489a,
    0xb8927108,0x38854448,0x3224a4c9,0xbb86ea2e,0x5cb6e23a,0x3224aa91,
    0x5c88e2e0,0x2e053244,0x506a1885,0x0c893125,0x2cb32219,0x950f4417,
    0x4d6ee657,0x90b842bc,0x47b730e4,0x57775cb9,0x0a925954,0x2f627995,
    0x6c473351,0x5993121b,0x297345dc,0x10879b14,0x6c0ba899,0xa8b32a1b,
    0xb82ee60b,0x52aea4b8,0x2e388572,0xc8ac6ab0,0x84333660,0x0e6a6485,
    0x52644179,0x82f26599,0x27222bc9,0x12374883,0x244d4359,0x84485ca6,
    0x222b890b,0x242e3703,0x17348336,0x5438ac6a,0x2241c44a,0x2f2e48a9,
    0x9cd232e4,0x02a62404,0x4c92a8b5,0x37054c1a,0x3558d495,0x36638837,
    0x6459b54a,0x42c0ce41,0x17113264,0x34954907,0x0d5c459b,0xc88dc16e,
    0xa86aa638,0x793242dd,0x6ccbaccb,0x730710e4,0x22d4485c,0x332a3cac,
    0x3aa59b13,0x89166c41,0x32b20ed9,0x7452e6e3,0xc891663d,0x46a0dc5b,
    0xb7912324,0x9b51e744,0x0e20c6a5,0x23702aa4,0x48583dda,0xb9b512e6,
    0x1748d490,0x07103516,0x320bd857,0x96350ddc,0xb9d49039,0x0e206490,
    0x7b1a1716,0x7525de43,0x16aa1c41,0xaa989071,0x9385c522,0xb881c2ab,
    0x21d7172e,0x2e91a82b,0xd7170da8,0x2e0d41c1,0x0bb223ab,0x3b8004ca,
    0xeb89f644,0x72493532,0x8d4bae21,0x1a837914,0x26754388,0xda86a0b7,
    0xcc88322c,0x8090b860,0xba675c38,0x72c721dc,0x220d4d37,0x491352cd,
    0x533ce838,0x99c2e496,0x00000006,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x22cc8800,0x459912cc,
    0x1166491a,0x0a21cc81,0x004cca82,0xcca85540,0x3dc894a2,0x75009173,
    0x910c14c1,0x8ee3a879,0x1e65c2a4,0x4c490b84,0x41114622,0x30a62aa9,
    0x33050411,0xbb94466e,0x654e2930,0x06eeee29,0x00000000,0xb8735a88,
    0x7548d4b0,0xd88654b3,0xcc872a21,0x3886f2a1,0x9d5d4398,0x02ee292a,
    0x2a066419,0x4a8e2e24,0x2a44b2a2,0x90c88644,0x1dc64771,0x21c5c566,
    0x4c37238c,0x4b3312bb,0x5a844c18,0x8d6c3022,0x06213348,0x00001dc6,
    0x4c000000,0x0c87349b,0x37759549,0x7710e643,0x38c8b2a6,0x6dcc3939,
    0xaa8aaa62,0x6452352b,0x1b706e1a,0x39914dc4,0x4476e248,0x8e447503,
    0x1dd24cbb,0x640bd8ea,0x64c73229,0x0000183c,0x001044c0,0x00000000,
    0xcc980000,0x6644b324,0x6c533a22,0x6442aa2b,0x4750a23c,0x32623bbc,
    0xb8866621,0x3192351b,0x45ccf3a6,0x2e00c224,0x2071141b,0x654771bb,
    0x061dd259,0x221888b5,0x00000030,0x00000000,0x00000000,0x00000000,
    0x4c037710,0x037713bb,0x00730510,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__consolas_8_latin1_x[224]={ 0,1,1,0,0,0,0,1,1,1,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 };
static signed short stb__consolas_8_latin1_y[224]={ 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,3,2,
3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,0,1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,1,-1,1,-1,1,-1,1,-1,-1,
-1,-1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,-2,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,1,-1,-1,0,-1,
-2,-1,-1,-1,-1,1,2,2,-1,-1,-1,0,-1,-1,-1,1,-1,2,5,-1,-1,1,-1,-1,-1,1,-2,-2,-2,-2,
-2,-2,-1,-1,-2,-2,-2,-2,-2,-2,-2,-2,-1,-2,-2,-2,-2,-2,-2,1,-1,-2,-2,-2,-2,-2,-1,-1,-1,-1,
-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,
 };
static unsigned short stb__consolas_8_latin1_w[224]={ 0,2,3,5,4,5,5,2,3,3,4,5,3,3,
2,4,5,4,4,4,5,4,4,4,4,4,2,3,4,4,4,3,5,5,4,4,5,4,4,4,4,4,4,5,
4,5,4,5,4,5,5,4,5,4,5,5,5,5,4,3,4,3,4,5,3,4,4,4,4,4,5,5,4,4,
4,5,4,5,4,5,4,4,5,4,4,4,5,5,5,5,4,4,2,4,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,2,4,4,5,5,
2,4,4,5,4,4,4,3,4,4,4,4,4,3,4,5,4,2,2,4,4,4,5,5,5,4,5,5,5,5,
5,5,6,4,4,4,4,4,4,4,4,4,5,4,5,5,5,5,5,4,5,4,4,4,4,5,4,4,4,4,
4,4,4,4,5,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,4,4,4,4,5,4,5,
 };
static unsigned short stb__consolas_8_latin1_h[224]={ 0,7,3,6,7,7,7,3,8,8,4,5,4,2,
3,7,7,6,6,7,6,7,7,6,7,6,5,6,6,3,6,7,8,6,6,7,6,6,6,7,6,6,7,6,
6,6,6,7,6,8,6,7,6,7,6,6,6,6,6,8,7,8,4,1,3,5,7,5,7,5,6,6,6,6,
8,6,6,4,4,5,6,6,4,5,7,5,4,4,4,6,4,8,9,8,2,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,7,6,5,6,
9,7,3,7,5,4,3,2,4,3,4,5,4,4,3,6,7,2,2,4,5,4,6,6,6,6,7,7,7,7,
7,7,6,8,7,7,7,7,7,7,7,7,6,7,8,8,8,8,8,4,7,8,8,8,8,7,6,7,7,7,
7,7,7,7,5,6,7,7,7,7,6,6,6,6,7,6,7,7,7,7,7,5,6,7,7,7,7,8,8,8,
 };
static unsigned short stb__consolas_8_latin1_s[224]={ 253,225,190,72,233,207,104,194,118,24,106,
53,138,197,178,120,125,78,128,141,139,146,151,150,156,155,252,160,67,158,169,
161,45,94,145,170,185,208,219,136,164,52,180,213,224,235,241,98,203,102,229,
195,174,175,133,197,191,122,180,98,165,73,91,213,181,1,115,6,110,22,116,
110,105,100,34,88,83,132,70,11,62,57,111,32,16,17,142,126,85,12,80,
82,1,93,207,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,
46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,253,253,190,
229,246,234,4,185,173,92,27,75,163,197,65,168,96,37,117,122,185,218,131,
201,204,101,42,148,6,23,29,224,76,70,64,58,52,46,200,113,31,26,21,
87,11,6,1,248,207,238,28,39,51,57,87,153,201,77,63,68,108,174,41,
82,36,153,148,41,228,243,47,213,133,122,143,138,240,245,250,1,180,18,168,
127,185,213,219,59,35,196,158,163,191,13,19,7, };
static unsigned short stb__consolas_8_latin1_t[224]={ 8,1,26,19,1,1,11,26,1,1,26,
26,26,26,26,11,11,19,19,11,19,11,11,19,11,19,19,19,19,26,19,
11,1,19,19,11,19,19,19,11,19,19,11,19,19,19,19,11,19,1,19,
11,19,11,19,19,19,19,19,1,11,1,26,26,26,26,11,26,11,26,19,
19,19,19,1,19,19,26,26,26,19,19,26,26,11,26,26,26,26,19,26,
1,1,1,26,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,8,1,11,
11,19,11,1,11,26,11,26,26,26,26,26,26,26,26,26,26,26,11,11,
26,26,26,26,26,19,19,19,11,11,11,11,11,11,11,11,1,11,11,11,
11,11,11,11,1,11,1,1,1,1,1,1,26,1,1,1,1,1,1,19,
11,11,1,1,11,1,1,26,11,1,1,1,1,11,11,11,19,1,19,1,
1,1,1,1,26,19,1,1,1,1,1,1,1, };
static unsigned short stb__consolas_8_latin1_a[224]={ 70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_consolas_8_latin1_BITMAP_HEIGHT or STB_FONT_consolas_8_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_consolas_8_latin1(stb_fontchar font[STB_FONT_consolas_8_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_consolas_8_latin1_BITMAP_HEIGHT][STB_FONT_consolas_8_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__consolas_8_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_consolas_8_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_consolas_8_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_consolas_8_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_consolas_8_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_consolas_8_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__consolas_8_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__consolas_8_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__consolas_8_latin1_s[i] + stb__consolas_8_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__consolas_8_latin1_t[i] + stb__consolas_8_latin1_h[i]) * recip_height;
            font[i].x0 = stb__consolas_8_latin1_x[i];
            font[i].y0 = stb__consolas_8_latin1_y[i];
            font[i].x1 = stb__consolas_8_latin1_x[i] + stb__consolas_8_latin1_w[i];
            font[i].y1 = stb__consolas_8_latin1_y[i] + stb__consolas_8_latin1_h[i];
            font[i].advance_int = (stb__consolas_8_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__consolas_8_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__consolas_8_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__consolas_8_latin1_s[i] + stb__consolas_8_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__consolas_8_latin1_t[i] + stb__consolas_8_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__consolas_8_latin1_x[i] - 0.5f;
            font[i].y0f = stb__consolas_8_latin1_y[i] - 0.5f;
            font[i].x1f = stb__consolas_8_latin1_x[i] + stb__consolas_8_latin1_w[i] + 0.5f;
            font[i].y1f = stb__consolas_8_latin1_y[i] + stb__consolas_8_latin1_h[i] + 0.5f;
            font[i].advance = stb__consolas_8_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_consolas_8_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_consolas_8_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_consolas_8_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_consolas_8_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_consolas_8_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_consolas_8_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_consolas_8_latin1_LINE_SPACING
#endif

