// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_8_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_8_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_8_latin1_BITMAP_WIDTH         256
#define STB_FONT_courier_bold_8_latin1_BITMAP_HEIGHT         30
#define STB_FONT_courier_bold_8_latin1_BITMAP_HEIGHT_POW2    32

#define STB_FONT_courier_bold_8_latin1_FIRST_CHAR            32
#define STB_FONT_courier_bold_8_latin1_NUM_CHARS            224

#define STB_FONT_courier_bold_8_latin1_LINE_SPACING           4

static unsigned int stb__courier_bold_8_latin1_pixels[]={
    0x2802e066,0x98305088,0x98288501,0x04c08a82,0x204cc144,0x1710821b,
    0x414c2808,0x104c4099,0x02609985,0x85301303,0x09819829,0x220541a8,
    0x40c42982,0xb8310082,0x2188260a,0x40660a02,0x310cc08a,0x4409b811,
    0x2a864089,0x21440c2c,0x39819809,0x13104c44,0x13a81881,0xb324ce27,
    0x35124459,0x930c4c43,0x36a04cd7,0x98750661,0x26a0aa81,0x51026620,
    0x11445c98,0x209a8113,0x9b104c28,0x3636eccb,0x14a8661c,0x044c4131,
    0xb9881531,0xd3790d41,0x2f24cea8,0xb8732c69,0x64479b31,0x4c79b31d,
    0x8f3663cd,0x2af26abc,0x710f3666,0x229944e2,0x2f239924,0x49aaf26a,
    0xc89e64c2,0x2679933d,0x439913cd,0x39913cc9,0x99125d64,0xc987e4c3,
    0x4cb5973c,0x279b33cd,0x82373cd9,0x3ba25d8c,0x4ea79b32,0x2eb24bac,
    0x9b12eb24,0x88e644d3,0x259541bd,0xb12c1bd8,0x542492a8,0x92492491,
    0x0b961724,0x1388924b,0x59229847,0x5cb0b8ae,0x372064b0,0x3291174d,
    0x4d6194dd,0x537722dd,0x24a62dd9,0x454c5bb3,0x2ec9bb94,0x2b0cac32,
    0x93362b0c,0x3bea49cc,0x98c56192,0x26494c92,0x259db892,0x216e2dd9,
    0x42dc2cea,0x92190a65,0x92491a84,0x23724924,0x249246e4,0x3389c4e2,
    0x7116ecc5,0x246e48dc,0x332699b3,0x32639b33,0x2e7bb33c,0x4f3265dc,
    0x37625dcb,0xdc9772e6,0x4c79933d,0xd99eecc3,0x4c7bb33d,0x3616f5c4,
    0x8c4f7664,0x37626dd8,0x371b7626,0x8aee5cbb,0xc882b82c,0x58371a82,
    0x1930b762,0xdd88b762,0xd88b7622,0x8873621c,0x389e42dd,0xde836671,
    0x1cd89624,0x09107362,0x00000000,0x6c000000,0x2200001e,0x00550140,
    0x33600000,0x40dd4059,0x001ba83b,0x00371000,0x80000000,0x00008008,
    0x00011000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x30000000,0x0a214c13,0x26099833,0x20661442,0x20660182,0x70150188,
    0x01502801,0x40980dc0,0x2a1cc198,0x1c414c00,0x20442575,0x7711d439,
    0x4aa04c41,0xa8081bb9,0x40221cc2,0x0dcc2980,0x40844111,0x4414c088,
    0xaa826602,0x0a9826a0,0x2aa21331,0x26213511,0x0ea02a0a,0x40cc40d4,
    0x009c82a8,0x22066015,0x3260cc42,0x886e4c6b,0x445332cd,0xb8642cc1,
    0x497591db,0x75512ac8,0x5e4c2722,0x5d4c2766,0xc98ab263,0x2675913a,
    0x8aee62cd,0x4a3219a8,0x26f26dca,0x161e76c6,0xb91487b2,0x64477223,
    0x323b911d,0x2b7b95bd,0xb7b95bdc,0xcc887322,0x74c2f4c1,0xeb85e985,
    0x4c2f4c3c,0x74c1885e,0x85301245,0x447320cd,0x488bb931,0x494c732a,
    0x25d3246a,0x88491de8,0x770641de,0x4b7a2139,0x8ee25bc8,0x93509abb,
    0x9a42eee5,0x5506f624,0x45cc3716,0x43987301,0x9931cc39,0x64c33261,
    0x2619930c,0x0b7662dd,0x03360336,0x16570336,0x83360336,0x20cd81d8,
    0x14ce1d95,0x2ea27313,0x5c592751,0xde98e441,0x910e2aa6,0x2b103290,
    0x2af2e2c4,0x64c75730,0x33570a23,0xab8b2aa1,0x5b89bb34,0x2582dea8,
    0x4c731bd8,0x30e61cc3,0xb98ddcc7,0x2637731b,0x4bb971bb,0x6f545dcb,
    0x2a1ef543,0x1e76c3de,0xbd50f7aa,0xd51564c7,0x72e6cc7b,0x06ecc1b9,
    0x64d2a553,0x8e4160ed,0x2619b029,0x23b932dc,0x8f324cd9,0x11564c38,
    0x837225bb,0x115dcc28,0x315c2117,0x5c164475,0x24986e02,0x74cbba61,
    0x265dd32e,0x2dbd92ee,0xdbd96dec,0x8001b7b2,0x2fa0f9be,0x3e6fa0f9,
    0x1f37d000,0x5307cdf4,0x007cdf41,0x08805100,0x95dc0cc0,0x00000008,
    0x00000000,0x0ee63a80,0xb81ba857,0x0010a203,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x20000000,
    0x10080808,0x11044443,0x28809882,0x20262054,0x14088410,0x33062208,
    0x40883330,0x2e204c08,0x0c440661,0x0a80a826,0x2a820aa0,0x44051020,
    0x09808880,0x21104444,0x260da800,0x08821109,0x44188881,0x98ccc430,
    0x79b30ecd,0x2f6208d8,0x65cd5794,0x9837e65a,0xc85311cb,0x3772a2dc,
    0x18897590,0x4198f362,0x31dee882,0x8866c79b,0x2e63a84a,0x317b6a08,
    0x42605541,0x99315dc0,0x9b105227,0xcc88238b,0xb8bd3001,0x173725ac,
    0x3660c853,0x5cb5973d,0x74d745ac,0x6c3a6b60,0x496196dc,0x262ce992,
    0x916170ad,0x265ad81b,0xd85b12db,0x37b7658c,0x2d892531,0x16c4b6e2,
    0xbeb885b1,0x0f556190,0x239859d7,0x32b22ec8,0xce98b625,0xe892eae2,
    0x5537722c,0x1046e4cb,0x6ecc9959,0x98336002,0x313664bc,0x53762397,
    0x642ec598,0x4c5dbc85,0x4aa6a39b,0x44925dd8,0x374a8885,0xbe81b912,
    0x70a61cc5,0x0dedd965,0x2298dbb1,0x30a63cda,0x30adda85,0x983a27bb,
    0x3e239892,0x261efdc3,0x27224a62,0x9e64c245,0x336259c8,0xb94c5c44,
    0xbd5005dc,0x73255cc7,0xb0e5cc19,0x73146c9d,0xceb81bb0,0x14c0cd85,
    0x85bb12c4,0x4b36e5cb,0x076c1cd8,0x4dda89f5,0x6f647dd3,0x3ba60001,
    0x4cfba603,0x3bb3a3ee,0x6537ea02,0x4fba669c,0x4c0a5cbb,0x0d5993ee,
    0x0b7a61d3,0x300074c0,0x8888803b,0x643e6fa0,0x3a3726ad,0xbd700a60,
    0x5990f6cb,0xa84aca8d,0x5d41ed84,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xa8000000,0x8aa02621,0x0ccc4098,0x20820442,0x33000098,0x4c426621,
    0x13100500,0x2ae60844,0x02082222,0x10010882,0x40888821,0x44044410,
    0x71555401,0x4530a673,0x2260c429,0x21a84420,0xa9220b9a,0x55544a62,
    0x2235510a,0x9999118c,0x2e228a23,0xaa8b3723,0x5499d32a,0x27360dbe,
    0xa87cdf46,0x94d2e02e,0xb7b91dc8,0x1f50f372,0x5b99032e,0xbd8933aa,
    0x5ec7db32,0x259930ea,0x9970eacc,0x33a0dd89,0xb937a65e,0x46aa62ce,
    0xaad5544c,0x5b8710da,0x641bb162,0x44e6730b,0x4152cec2,0x5555009b,
    0x44c6aa21,0x1022221c,0xbc98e206,0x16761c83,0x59db81bb,0x416366e4,
    0x98e602da,0x899930cc,0xa8f660cd,0x36236cb1,0xbd50ee3c,0x2f60ed89,
    0xbb1776e1,0x162dc641,0x355324a6,0x22a4812e,0x50a98792,0x33144cc7,
    0x98ea3044,0x000c4039,0x88000000,0x59077263,0x41ec1be8,0x65645d9b,
    0x16cc3ac5,0x7731cc53,0xea96ae63,0x1a8f662e,0x999af72b,0x449bf329,
    0x2e0cc2be,0xe8211005,0x3bf51dda,0x06234e64,0x00000000,0x20000000,
    0x00001309,0x4bb66000,0xbd70d8dc,0x7d50fea5,0xae8b39b0,0x0dbf70f9,
    0x4bba612a,0x9bd96dec,0x81972e88,0x00001dec,0x00000000,0x00000000,
    0x00000000,0x22300000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__courier_bold_8_latin1_x[224]={ 0,1,0,0,0,0,0,1,1,0,0,0,1,0,
1,0,0,0,0,0,0,0,0,0,0,0,1,1,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,1,0,0,0,-1,1,0,-1,0,0,0,0,0,0,0,
0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
1,0,1,-1,0,0,-1,0,-1,-1,1,0,1,1,1,0,0,1,1,1,0,0,0,-1,0,0,-1,-1,-1,-1,
-1,-1,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,
 };
static signed short stb__courier_bold_8_latin1_y[224]={ 5,0,0,0,0,0,1,0,0,0,0,0,4,2,
4,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,1,0,1,0,1,0,1,0,0,
0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,2,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,0,0,1,0,
0,0,0,0,0,2,2,2,0,-1,-1,0,0,0,0,1,0,2,4,0,0,2,0,0,0,1,-1,-1,-1,-1,
-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,1,0,-1,-1,-1,-1,-1,0,0,0,0,
0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,
 };
static unsigned short stb__courier_bold_8_latin1_w[224]={ 0,2,4,4,4,4,4,2,3,3,4,4,2,4,
2,4,4,4,4,4,4,4,4,4,4,4,2,2,5,5,5,4,4,6,5,4,4,4,5,5,5,4,5,5,
5,6,6,5,5,5,5,4,4,5,6,6,5,5,4,3,4,3,4,6,2,5,6,5,5,4,5,5,5,4,
4,5,4,6,5,4,6,5,5,4,5,5,5,6,5,5,4,3,2,3,4,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,2,4,4,4,5,
2,4,3,6,4,4,5,4,6,6,3,4,3,3,2,5,4,2,2,3,4,5,5,6,5,4,6,6,6,6,
6,6,6,4,4,4,4,4,4,4,4,4,5,6,5,5,5,5,5,4,5,5,5,5,5,5,5,4,5,5,
5,5,5,5,6,5,4,4,4,4,4,4,4,4,4,5,4,4,4,4,4,4,5,5,5,5,5,5,6,5,
 };
static unsigned short stb__courier_bold_8_latin1_h[224]={ 0,6,3,6,6,6,5,3,7,7,4,5,3,2,
2,6,6,5,5,6,5,6,6,6,6,6,5,5,5,4,5,6,6,5,5,6,5,5,5,6,5,5,6,5,
5,5,5,6,5,7,5,6,5,6,5,5,5,5,5,7,6,7,3,2,2,5,6,5,6,5,5,6,5,5,
7,5,5,4,4,5,6,6,4,5,6,5,4,4,4,6,4,7,7,7,2,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,5,4,5,
7,6,2,6,3,3,3,2,6,2,4,5,3,3,2,6,6,2,3,3,3,3,5,5,5,6,6,6,6,6,
6,6,5,7,6,6,6,6,6,6,6,6,5,6,7,7,7,7,7,4,6,7,7,7,7,6,5,6,6,6,
6,6,6,6,5,6,6,6,6,6,5,5,5,5,6,5,6,6,6,6,6,4,5,6,6,6,6,7,7,7,
 };
static unsigned short stb__courier_bold_8_latin1_s[224]={ 120,222,192,212,119,124,214,200,20,28,113,
209,213,231,221,138,154,1,12,159,74,164,174,179,191,196,55,252,49,124,79,
201,213,190,68,169,85,63,23,107,197,58,113,203,43,36,29,7,17,93,6,
19,250,24,243,236,230,224,219,89,242,79,187,241,221,178,74,165,132,154,148,
223,136,131,38,119,114,135,148,98,235,1,142,76,13,65,118,106,90,229,101,
99,83,24,236,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,
184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,120,129,247,
103,96,30,86,218,224,206,178,169,163,231,184,224,159,42,174,183,251,148,143,
248,197,203,216,207,142,171,159,95,88,81,100,67,60,53,91,115,36,31,26,
21,16,11,6,1,52,243,32,43,49,55,73,130,206,61,67,103,109,179,36,
169,163,41,151,47,140,250,58,200,174,120,146,130,71,86,47,81,125,108,190,
195,185,135,217,154,125,225,231,237,157,14,7,1, };
static unsigned short stb__courier_bold_8_latin1_t[224]={ 8,1,23,1,9,9,16,23,1,1,23,
16,23,23,23,9,9,23,23,9,23,9,9,9,9,9,23,9,23,23,23,
9,9,16,23,9,23,23,23,9,16,23,9,16,23,23,23,16,23,1,23,
16,16,16,16,16,16,16,16,1,9,1,23,23,26,16,9,16,9,16,16,
9,16,16,1,16,16,23,23,16,9,16,23,16,16,16,23,23,23,9,23,
1,1,1,23,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,8,9,9,
16,23,16,1,9,26,9,23,23,23,23,9,23,23,16,23,23,23,9,9,
23,23,23,23,23,16,16,16,9,9,9,9,9,9,9,16,1,9,9,9,
9,9,9,9,9,16,1,1,1,1,1,1,23,1,1,1,1,1,1,16,
1,1,9,1,9,1,1,16,1,1,1,1,1,16,16,16,16,1,16,1,
1,1,1,1,23,16,1,1,1,1,1,1,1, };
static unsigned short stb__courier_bold_8_latin1_a[224]={ 68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_8_latin1_BITMAP_HEIGHT or STB_FONT_courier_bold_8_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_8_latin1(stb_fontchar font[STB_FONT_courier_bold_8_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_8_latin1_BITMAP_HEIGHT][STB_FONT_courier_bold_8_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_8_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_8_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_8_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_8_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_8_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_8_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_8_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_8_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_8_latin1_s[i] + stb__courier_bold_8_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_8_latin1_t[i] + stb__courier_bold_8_latin1_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_8_latin1_x[i];
            font[i].y0 = stb__courier_bold_8_latin1_y[i];
            font[i].x1 = stb__courier_bold_8_latin1_x[i] + stb__courier_bold_8_latin1_w[i];
            font[i].y1 = stb__courier_bold_8_latin1_y[i] + stb__courier_bold_8_latin1_h[i];
            font[i].advance_int = (stb__courier_bold_8_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_8_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_8_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_8_latin1_s[i] + stb__courier_bold_8_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_8_latin1_t[i] + stb__courier_bold_8_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_8_latin1_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_8_latin1_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_8_latin1_x[i] + stb__courier_bold_8_latin1_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_8_latin1_y[i] + stb__courier_bold_8_latin1_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_8_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_8_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_8_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_8_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_8_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_8_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_8_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_8_latin1_LINE_SPACING
#endif

