// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_courier_bold_10_usascii_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_courier_bold_10_usascii'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_courier_bold_10_usascii_BITMAP_WIDTH         128
#define STB_FONT_courier_bold_10_usascii_BITMAP_HEIGHT         40
#define STB_FONT_courier_bold_10_usascii_BITMAP_HEIGHT_POW2    64

#define STB_FONT_courier_bold_10_usascii_FIRST_CHAR            32
#define STB_FONT_courier_bold_10_usascii_NUM_CHARS             95

#define STB_FONT_courier_bold_10_usascii_LINE_SPACING           5

static unsigned int stb__courier_bold_10_usascii_pixels[]={
    0x0a298010,0x50385451,0x03097005,0x01100897,0x98060000,0x22054409,
    0x20c4622c,0xd0ee02c8,0x6c1b3443,0x4c164d11,0x45b2dd41,0x3a61ece8,
    0x40aa0b10,0x3ba1feec,0x0f6741de,0xce8db991,0xec86521e,0x367a0ed9,
    0x2ece8d02,0x54360d9a,0x7fe89664,0x5c1b35d4,0x360d8b12,0x717ffc41,
    0x11b312a7,0x2e58954b,0x44ee30a2,0x22750dab,0x3a84bb44,0x6cf60574,
    0x1e164d30,0x27fff134,0x6c68360d,0x20aa1660,0x8e98973a,0x36683659,
    0x0dc83b88,0x4ea15951,0x427f5c48,0xb0f5c40e,0x59344363,0x6bc8d068,
    0x8b33b836,0x0aa06c0d,0x3a626f64,0x2ccea1de,0x830d5157,0x2931dab8,
    0x541c8839,0xd1e4ecc4,0x92a1b06c,0x77ccd05a,0xded81b2f,0x112a06c0,
    0x89301ddd,0x837b204a,0x0c84eee8,0x06f6c0ac,0x103a0fb6,0x1b34c9f9,
    0x0761d1ec,0x6cb5b1a2,0xf52efec4,0x20101d01,0x0fb61ee8,0x64c00000,
    0x05880003,0x220c1116,0x6f441821,0x8551ce42,0x40a60988,0x0000003a,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x32002c98,0x399910cc,0x45930570,
    0x20b2202c,0x29832089,0x2ca83330,0x00000998,0x00002b89,0x76c4767a,
    0x98aba0ee,0x44a82dab,0x80ee09da,0x3b3a1d9e,0x40ab87e3,0x2721dec8,
    0x4db9d12c,0x4eeb85ee,0xd902cc28,0xd06f645d,0x1e4ae3b5,0x90740f7e,
    0x42ad89dd,0x5221dee9,0x4311b13a,0x20672e0f,0x571da81b,0x4c3d731c,
    0x447e8914,0x55f40eef,0xde966970,0x50f2570f,0x2e588571,0x2ccf8973,
    0x2932c566,0xe87b6a3a,0x84c79710,0x1b1eb81b,0x4c3b5b50,0x2d116023,
    0x4f6a623a,0x5562d13b,0x207fdb13,0x2371dc39,0x3244744a,0x4aed134b,
    0x640c9329,0x4072571a,0xe98c7749,0x26f6c6fe,0x31d5622c,0x3b623dbf,
    0x103bb61e,0x06f74c59,0xffed8836,0xfe87baa1,0x5275c2ee,0x64243ddd,
    0x98bdd30c,0x3bb61eee,0x3a600044,0xdb3f93ef,0x40402010,0x100004eb,
    0x20002000,0x02000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x09998800,0x7300cc40,0x99809987,0x20c42209,0x81988608,
    0x46208898,0x884ccc08,0x31188111,0x262088c4,0x90331099,0x3f721b09,
    0x5c3bb26d,0x56c41ede,0x89377a62,0x23b62fce,0x7dd7a0ed,0xeb81bd51,
    0x2edee5ea,0x3aa3bf91,0x5c6f45d9,0xb976f70f,0xdbd94dce,0x390434c3,
    0xae56ddab,0x7f449558,0x22686c2f,0x4674c59b,0x23f4f644,0x84cd881c,
    0xd88b06bc,0x4f4e43a8,0x36236646,0x16673299,0x7b71600b,0x03bbe257,
    0x13b76093,0xadb981d1,0x23675e44,0x1f7c411c,0x44580fc4,0x765c3fef,
    0x221fc45c,0x468e62ef,0x222c0e85,0xd1b14edd,0x13b04985,0x5cc913d0,
    0x464e44f8,0x56258e46,0x1160580d,0xf5f50eab,0x221ead89,0x2673588d,
    0x3f6042c4,0x2bf2040e,0x3dfd31e8,0x3e6177cc,0x2e7f64ee,0x71fcb744,
    0x57e4fddf,0x83bf60e9,0x3f92efe8,0x499798dd,0xf90fd8fd,0x37bf2ddd,
    0x007dfd30,0x00000000,0x00000000,0x00000000,0x88000000,0x2a066019,
    0x00c46603,0x00199988,0x20b2a126,0xc876c449,0x00000d96,0x1f466400,
    0x675c50ea,0x217ec41e,0x7dd7a068,0x9f301b71,0x456e01d9,0x0ececc6c,
    0x441751fa,0xdd0b0596,0x6f75c9dd,0x897b7a20,0x51088755,0x971b135d,
    0xf5d0b770,0xa8755987,0x554740ce,0x42c1f540,0x23654590,0x1af229fa,
    0x346ce42c,0x1b50ead1,0x443aac41,0x3e237f20,0x0eae83fe,0xe8e80f7c,
    0x7741db00,0x0b01fc84,0x469e8932,0x0be23fae,0x4e4bdfd5,0x1d56268d,
    0x37f740aa,0xb15bc836,0x13336634,0x176a07bd,0x06d033aa,0x222c1f54,
    0x0feecc3d,0x03449fd9,0x5d7b9d0b,0xfa9b67f2,0x288080ef,0x22777e40,
    0x5ae3f96e,0xcb83f06f,0x402efa80,0x25dfd15b,0x7e42eefb,0x03bb2041,
    0x0000002c,0x00000000,0x00000000,0x00000000,0x00000000,0xebaec000,
    0x21dd1db0,0x4222fff8,0x3a3ea289,0xeb854385,0x404c05ee,0x8e099999,
    0x0002eee8,0x00000000,0xd12d75d4,0xd8b550b2,0xdeb8d1b1,0x21b2f5c0,
    0x87409998,0x9914ced9,0x00c45999,0x00000000,0xfef88000,0x6dc35dc3,
    0xc8949608,0x95d620dd,0x017776e4,0x00000014,0x00000000,0x107a7a00,
    0x4eef985f,0xdd3f9002,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,
};

static signed short stb__courier_bold_10_usascii_x[95]={ 0,1,1,0,0,0,0,2,2,1,0,0,1,0,
1,0,0,0,0,0,0,0,0,0,0,0,1,1,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,
0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,2,0,1,0,-1,1,0,-1,0,0,0,0,0,0,0,
0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,1,2,1,0, };
static signed short stb__courier_bold_10_usascii_y[95]={ 7,1,1,0,0,1,2,1,1,1,1,1,5,4,
5,0,1,1,1,1,1,1,1,1,1,1,3,3,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,8,1,2,1,2,1,2,1,2,1,1,
1,1,1,2,2,2,2,2,2,2,1,3,3,3,3,3,3,1,1,1,3, };
static unsigned short stb__courier_bold_10_usascii_w[95]={ 0,3,4,5,5,5,5,2,3,3,5,5,3,5,
3,5,5,5,5,5,5,5,5,5,5,5,3,3,6,6,6,5,5,7,6,5,5,5,6,6,6,5,6,6,
6,7,7,6,6,6,6,5,5,6,7,7,6,6,5,3,5,3,5,7,3,6,7,6,6,5,6,6,6,5,
5,6,5,7,6,5,7,6,6,5,6,6,6,7,6,6,5,3,2,3,5, };
static unsigned short stb__courier_bold_10_usascii_h[95]={ 0,7,4,8,9,7,6,4,8,8,5,6,4,1,
3,9,7,6,6,7,6,7,7,7,7,7,5,5,6,3,6,7,7,6,6,7,6,6,6,7,6,6,7,6,
6,6,6,7,6,8,6,7,6,7,6,6,6,6,6,8,8,8,4,2,2,6,7,6,7,6,6,7,6,6,
8,6,6,5,5,6,7,7,5,6,7,5,4,4,4,6,4,8,8,8,3, };
static unsigned short stb__courier_bold_10_usascii_s[95]={ 126,59,26,38,7,63,70,44,24,28,122,
83,22,76,54,1,47,52,58,76,64,14,33,20,1,120,123,118,45,47,31,
101,107,8,1,82,111,105,38,94,83,77,69,63,56,48,40,87,27,48,13,
53,1,113,23,90,98,70,34,44,59,55,38,64,72,88,39,95,26,7,20,
7,108,102,32,16,117,89,97,121,79,72,104,115,65,111,9,1,31,76,16,
20,17,13,58, };
static unsigned short stb__courier_bold_10_usascii_t[95]={ 1,11,33,1,1,11,26,33,1,1,26,
26,33,33,33,1,11,26,26,11,26,11,11,11,11,1,19,26,26,33,26,
1,1,26,26,11,19,19,26,1,19,19,11,19,19,19,19,1,19,1,19,
11,19,1,26,19,19,19,19,1,1,1,33,33,33,11,11,11,11,19,19,
11,11,11,1,26,19,26,26,11,1,1,26,11,1,26,33,33,33,26,33,
1,1,1,33, };
static unsigned short stb__courier_bold_10_usascii_a[95]={ 85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_courier_bold_10_usascii_BITMAP_HEIGHT or STB_FONT_courier_bold_10_usascii_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_courier_bold_10_usascii(stb_fontchar font[STB_FONT_courier_bold_10_usascii_NUM_CHARS],
                unsigned char data[STB_FONT_courier_bold_10_usascii_BITMAP_HEIGHT][STB_FONT_courier_bold_10_usascii_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__courier_bold_10_usascii_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_courier_bold_10_usascii_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_courier_bold_10_usascii_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_courier_bold_10_usascii_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_courier_bold_10_usascii_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_courier_bold_10_usascii_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__courier_bold_10_usascii_s[i]) * recip_width;
            font[i].t0 = (stb__courier_bold_10_usascii_t[i]) * recip_height;
            font[i].s1 = (stb__courier_bold_10_usascii_s[i] + stb__courier_bold_10_usascii_w[i]) * recip_width;
            font[i].t1 = (stb__courier_bold_10_usascii_t[i] + stb__courier_bold_10_usascii_h[i]) * recip_height;
            font[i].x0 = stb__courier_bold_10_usascii_x[i];
            font[i].y0 = stb__courier_bold_10_usascii_y[i];
            font[i].x1 = stb__courier_bold_10_usascii_x[i] + stb__courier_bold_10_usascii_w[i];
            font[i].y1 = stb__courier_bold_10_usascii_y[i] + stb__courier_bold_10_usascii_h[i];
            font[i].advance_int = (stb__courier_bold_10_usascii_a[i]+8)>>4;
            font[i].s0f = (stb__courier_bold_10_usascii_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__courier_bold_10_usascii_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__courier_bold_10_usascii_s[i] + stb__courier_bold_10_usascii_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__courier_bold_10_usascii_t[i] + stb__courier_bold_10_usascii_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__courier_bold_10_usascii_x[i] - 0.5f;
            font[i].y0f = stb__courier_bold_10_usascii_y[i] - 0.5f;
            font[i].x1f = stb__courier_bold_10_usascii_x[i] + stb__courier_bold_10_usascii_w[i] + 0.5f;
            font[i].y1f = stb__courier_bold_10_usascii_y[i] + stb__courier_bold_10_usascii_h[i] + 0.5f;
            font[i].advance = stb__courier_bold_10_usascii_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_courier_bold_10_usascii
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_courier_bold_10_usascii_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_courier_bold_10_usascii_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_courier_bold_10_usascii_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_courier_bold_10_usascii_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_courier_bold_10_usascii_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_courier_bold_10_usascii_LINE_SPACING
#endif

