// Font generated by stb_font_inl_generator.c (4/1 bpp)
//
// Following instructions show how to use the only included font, whatever it is, in
// a generic way so you can replace it with any other font by changing the include.
// To use multiple fonts, replace STB_SOMEFONT_* below with STB_FONT_times_11_latin1_*,
// and separately install each font. Note that the CREATE function call has a
// totally different name; it's just 'stb_font_times_11_latin1'.
//
/* // Example usage:

static stb_fontchar fontdata[STB_SOMEFONT_NUM_CHARS];

static void init(void)
{
    // optionally replace both STB_SOMEFONT_BITMAP_HEIGHT with STB_SOMEFONT_BITMAP_HEIGHT_POW2
    static unsigned char fontpixels[STB_SOMEFONT_BITMAP_HEIGHT][STB_SOMEFONT_BITMAP_WIDTH];
    STB_SOMEFONT_CREATE(fontdata, fontpixels, STB_SOMEFONT_BITMAP_HEIGHT);
    ... create texture ...
    // for best results rendering 1:1 pixels texels, use nearest-neighbor sampling
    // if allowed to scale up, use bilerp
}

// This function positions characters on integer coordinates, and assumes 1:1 texels to pixels
// Appropriate if nearest-neighbor sampling is used
static void draw_string_integer(int x, int y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0, cd->t0); glVertex2i(x + cd->x0, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t0); glVertex2i(x + cd->x1, y + cd->y0);
        glTexCoord2f(cd->s1, cd->t1); glVertex2i(x + cd->x1, y + cd->y1);
        glTexCoord2f(cd->s0, cd->t1); glVertex2i(x + cd->x0, y + cd->y1);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance_int;
    }
    glEnd();
}

// This function positions characters on float coordinates, and doesn't require 1:1 texels to pixels
// Appropriate if bilinear filtering is used
static void draw_string_float(float x, float y, char *str) // draw with top-left point x,y
{
    ... use texture ...
    ... turn on alpha blending and gamma-correct alpha blending ...
    glBegin(GL_QUADS);
    while (*str) {
        int char_codepoint = *str++;
        stb_fontchar *cd = &fontdata[char_codepoint - STB_SOMEFONT_FIRST_CHAR];
        glTexCoord2f(cd->s0f, cd->t0f); glVertex2f(x + cd->x0f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t0f); glVertex2f(x + cd->x1f, y + cd->y0f);
        glTexCoord2f(cd->s1f, cd->t1f); glVertex2f(x + cd->x1f, y + cd->y1f);
        glTexCoord2f(cd->s0f, cd->t1f); glVertex2f(x + cd->x0f, y + cd->y1f);
        // if bilerping, in D3D9 you'll need a half-pixel offset here for 1:1 to behave correct
        x += cd->advance;
    }
    glEnd();
}
*/

#ifndef STB_FONTCHAR__TYPEDEF
#define STB_FONTCHAR__TYPEDEF
typedef struct
{
    // coordinates if using integer positioning
    float s0,t0,s1,t1;
    signed short x0,y0,x1,y1;
    int   advance_int;
    // coordinates if using floating positioning
    float s0f,t0f,s1f,t1f;
    float x0f,y0f,x1f,y1f;
    float advance;
} stb_fontchar;
#endif

#define STB_FONT_times_11_latin1_BITMAP_WIDTH         256
#define STB_FONT_times_11_latin1_BITMAP_HEIGHT         48
#define STB_FONT_times_11_latin1_BITMAP_HEIGHT_POW2    64

#define STB_FONT_times_11_latin1_FIRST_CHAR            32
#define STB_FONT_times_11_latin1_NUM_CHARS            224

#define STB_FONT_times_11_latin1_LINE_SPACING           7

static unsigned int stb__times_11_latin1_pixels[]={
    0x40550a26,0x8862481b,0x98811060,0xabb88199,0x01004440,0x80730022,
    0x2019101b,0x88042008,0x5c01a804,0x01080981,0x00573008,0x40730062,
    0x3aaa8198,0x541200c8,0x1cc16443,0x22a38110,0x00501cc3,0x98e20987,
    0xfd060a20,0x01935059,0x201e4c05,0x51301402,0x45c0f260,0x05002604,
    0x70702898,0x814cc091,0x260ee639,0x2701404c,0x51090e43,0x26620260,
    0x10140e20,0x94c74357,0x98aae618,0x19144312,0x04c9304c,0x3e194cc7,
    0xb87262cf,0x2e1d4242,0x5302a982,0x4c0aa605,0x9855302a,0x1c98ae1c,
    0x2e1c98ae,0x201414c2,0x267300c8,0x8028099a,0x8b50ee02,0x42eab260,
    0x930baac9,0xa8e21755,0xac98ae1c,0x4d62b0ba,0x44767661,0x87344335,
    0x1088e209,0x70cea2e3,0x0547859f,0x0a8fa073,0x86c5886c,0x45886c58,
    0x10d8b10d,0x1e05478b,0x20547815,0x1007c458,0x6cce601f,0x4401f102,
    0x5c97500f,0x46863403,0xb0e231a1,0x246341c5,0x75398719,0x09ac1c64,
    0x4a06204c,0x2a063939,0x2b82a3c2,0x882a5d70,0x64589645,0xb12c8b12,
    0x2c8b12c8,0x5478151e,0x1a02a3c0,0x25d40975,0x203aa398,0x12ea04ba,
    0x04a85ca2,0xd0268134,0x8e887104,0x2282680a,0x2a9cc2d8,0x43960b62,
    0x4a111c09,0x2a05689b,0x2a82a3c2,0x4151d150,0x43ba543b,0x74a8774a,
    0xa8774a87,0x478151e4,0x102a3c0a,0x69c0d389,0x40eb8730,0xb069c0d3,
    0xd0234453,0x4abe8957,0x071255f4,0x2afa0597,0x27661604,0x064b0583,
    0x21324c13,0x8ac8c998,0x2a342a81,0xe9940e60,0x27716a0a,0x45a9dc5a,
    0x53b8b53b,0x151a3b8b,0x51a05468,0x2ae62981,0x2dab982d,0x8aa63398,
    0xb982dab9,0xa85b02da,0x83341aad,0x710cd066,0xd86681e0,0x280e60a0,
    0x88262490,0x180a8264,0x0e0e8550,0x81f5140e,0x0d8d06c6,0x36341b1a,
    0x0741b1a0,0x741c1d07,0x2382e0e0,0x21a23868,0x38777539,0x8688e1a2,
    0x23412072,0x423411a0,0x2340d038,0x254065c0,0x86ae065c,0x20982619,
    0x4ccd4c09,0xac985500,0x6cc1882a,0x55530320,0x41aaa983,0x54c1aaa9,
    0x5554c1aa,0x415564c1,0xc982aac9,0x950442aa,0x44951fc4,0x830ee63f,
    0x4a8fe24a,0x03150fe2,0x757f1071,0x4aeafe25,0xb12babf8,0xf882f985,
    0x26002bab,0x00000001,0x08044000,0x00000000,0x40000000,0x00800800,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x54c0e400,
    0x20108201,0x2032201a,0x1cc2a848,0x2618a988,0x18a81703,0x21621554,
    0xc8154199,0x04dc2540,0x8853062a,0x2666141a,0x06502aa0,0x5cc510e4,
    0x42871060,0x54c04c38,0x1901b101,0x4a04cc30,0x654088c1,0x436144c0,
    0x245c5058,0x8144c028,0x1b050282,0x0a0503a2,0x83290a2e,0x40654189,
    0x19981882,0x31506e22,0x52cdc298,0x5c41d488,0x1c814543,0x41442e04,
    0x05120a24,0x428981d6,0x29118818,0x55614544,0x91166622,0x88b22c45,
    0x140b223a,0x22c88140,0x105442c8,0x15325dc9,0x05440a98,0x0a88b191,
    0x02a63544,0x40a98153,0x2054c0a9,0x4d2320a9,0x54c5acc1,0x31054660,
    0x2954183b,0x0a481c90,0x4c19aae8,0x8a05440a,0x054c372a,0x40c41556,
    0x4b50ee0e,0x203a0c9b,0x03e200f8,0x1983a074,0x5a8a9dcd,0xd94c7653,
    0x9c89a331,0x389a330d,0xa926aa3b,0x926aa49a,0x26aa49aa,0xa8926aa4,
    0x41370652,0x65263b29,0x42876711,0x48309899,0x33481115,0x8729b106,
    0x34663b29,0x26752c8a,0x42aac3b2,0x2e0e83d8,0x82b99dc5,0x204ba80e,
    0xe81d04ba,0xca866ae0,0x5c725519,0x55cee393,0xb9d52219,0x1dc6e19a,
    0x44a98953,0x2254c4a9,0x8254c4a9,0x33a29372,0x4cee390c,0x8e46e394,
    0x424ca049,0x250498a8,0x27e32249,0x573b8e43,0x2570c433,0xf8ee393b,
    0xe8680cbc,0x263b1e20,0x9c07411d,0x0e834e06,0xb0275074,0x4aa77245,
    0x04ea553b,0x09d4e691,0x89b954aa,0x9b9226e4,0xb9226e48,0x1226e489,
    0x2135ac66,0x4caa7729,0x8e4ee394,0x93128b2b,0x31282850,0x40fa9dc9,
    0x04ea553b,0x2e373985,0x200a2553,0x4e540e83,0x3a1eec1b,0x416d5cc0,
    0x0e82dab9,0x85bb1074,0x322299bc,0x88eb223a,0x2b32a2dd,0x6445bb10,
    0x436f6a3a,0x7b50dbda,0x436f6a1b,0x7b50dbda,0x526e281b,0x5910abcb,
    0x89edf447,0x53913dbd,0x20da98cc,0x4c157109,0x3a61b531,0x910cebbb,
    0x516ec475,0x56447550,0x4dd40e63,0x0bb00e81,0x44703a05,0x3a1a2386,
    0x02000740,0x00000000,0x00000000,0x00040400,0x40400000,0x08331040,
    0x00000808,0x00000002,0x153017cc,0xa8be6022,0x24a8fe24,0x98be63f8,
    0x0000002f,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x66440000,0x99905440,0x2620ccc3,0x98199981,
    0x5418c41a,0x199983aa,0xb8177750,0x9981b102,0x2a0e542a,0x0b855442,
    0x530570ea,0x83207105,0x931894c1,0xa8e23931,0x5530ea1c,0x42b87265,
    0x4505c0aa,0xabc981c9,0x82a21942,0x24896229,0x3351203a,0x5ccd43a8,
    0x9cc2e711,0x0c44d544,0x13131a35,0x312890e4,0x06a2c835,0x50a26073,
    0x23443b3b,0x3271099a,0x0547d031,0x4142c436,0x4d621428,0x8511d9a1,
    0x13882a0e,0x7102a3c7,0xe876a287,0xa86d4d00,0x45125128,0x0489a189,
    0x05885d10,0x5c91d11c,0x8dac6552,0x5952c221,0x8c116a59,0x085986a3,
    0x2330cdcc,0x21d4e60a,0x646e0646,0x2a5d7031,0x26591620,0x85466151,
    0x321c6418,0x9502a792,0xf043a61c,0x8a6a60a8,0x95d12228,0x289ec687,
    0x288a202e,0x886a912c,0x5952dc42,0x1fa8701b,0x59195d26,0x28350227,
    0x55301dc5,0x5c479088,0x98ece4c2,0x2a9cc394,0x5c37b334,0x22a0e392,
    0x50ee0a8e,0x498e5269,0x0b621439,0x6815aeb3,0x787f7031,0x1b1b3054,
    0xf34489a2,0x15a957d4,0x9a209d4d,0x33912c68,0x2e190688,0x221a8772,
    0x3aaa0e9b,0x40d23230,0xa9656541,0x18922604,0x3985912a,0x30e52675,
    0x1b8d073b,0x848ee744,0x2d415d32,0x31ca4cee,0x05828729,0x2055b33d,
    0x976203ac,0x2e910546,0x9b448961,0x258f2346,0x162c2dd8,0x05826c4b,
    0x1c2a9c47,0x9260d4a6,0x829a8c98,0x1a228c40,0x44d54c41,0x41c83a22,
    0x65263539,0x22580e61,0x3639010c,0x681f5140,0x2394986c,0x20c43949,
    0x81aab702,0x9a0982e8,0x2e910e0e,0x3a1e8961,0x83a340ba,0x22c58485,
    0x960b3225,0x14dc1bca,0x2614dc1c,0x8299a883,0x204c4c39,0x5441aada,
    0x9ac98299,0x11cec40d,0x42547b7d,0x376ea2bd,0x4c1d2c81,0x5530320d,
    0x9edf4435,0xb943dbe8,0x0247100c,0x2a726036,0x50aab262,0x03a25b1b,
    0x57cc17cc,0x883a21db,0x0e887443,0x3a36a1d1,0x00003a22,0x02002001,
    0x00802100,0x00008004,0x80000660,0x00000019,0x00000800,0x00401000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x40000000,0x2a3aacb8,0x44533a83,
    0x111110ca,0x260dd64c,0x1c43713c,0x502ea393,0x4450e039,0x2ea0502c,
    0x55713bbb,0x2b872a37,0x2f260b26,0x5d564c2a,0x47263930,0x3264aac9,
    0x303260bb,0x02eb2619,0x85137155,0x302a60a9,0x2a0a8815,0x15130a89,
    0x51144aa3,0x81a9aa81,0x26b81410,0x55621221,0x41010520,0x22d50ee6,
    0x839a3442,0x45b86999,0x07c40742,0x42633a8c,0xd0716c68,0x20da9a01,
    0x3468d0c6,0x3e8d3683,0x07c5a2e4,0x15143293,0xa86ca611,0x324a2399,
    0x1a94c327,0x44c426b1,0x363666a5,0x30505ce0,0x559104d1,0x2ba628c8,
    0x2a682020,0x8b03bc84,0x998b0076,0x55406c05,0x1d80ea03,0x06809b44,
    0x81347b1a,0x3409a346,0x12e26b8f,0x5dd6074d,0x23717441,0x0b92a63a,
    0x50a19398,0x33571464,0x5099db98,0x3a500935,0x363622ba,0x2c37b730,
    0xd75d0404,0x22c07a01,0x11c401de,0x501b0163,0x9703a81a,0x0340b2e0,
    0x2aba5a8d,0x23d55744,0x5cf41cae,0x49b95d43,0x5d416574,0x51c842d8,
    0x244dcaa7,0x19498275,0x3930c42a,0x226a09d4,0x405a4425,0x48826ab9,
    0x823a2237,0xa9a08085,0x8b05b985,0x70a00e9e,0xb1a23d75,0x02dab981,
    0x780d3075,0x1dc681a0,0x68d1a04d,0x74540d02,0x1db449a8,0x55706e90,
    0xda8eb221,0x85bb10da,0x55752dae,0x16ec4585,0x987bb595,0x34516188,
    0x331ba442,0x4042c33d,0x944789a0,0xe9b4583c,0x54cc0a80,0x381b0a0d,
    0x741d4162,0x4681a061,0x2341d1a1,0x2068d1a0,0x49ae4a06,0x000068b4,
    0x00000000,0x80000800,0x1955f32b,0xf98b636a,0x1110ba20,0x2abe6111,
    0x7cc3662c,0x8fcc3a22,0x377ae3fb,0x5d104581,0x887f1254,0x2ab6e0dc,
    0x4c0fcc3b,0x5f32babf,0x557c43b7,0x3e63f32b,0x5f303f31,0x2e711b30,
    0x36a5f30e,0x00000001,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x54199998,0x00002aaa,0x00000000,
    0xa9808400,0x84c01419,0x54c1400a,0x45cc373a,0x4c53530a,0x1755309a,
    0x40207020,0x8502e62a,0x42a61aa8,0x10a8e0b9,0x4cd66033,0x4c060999,
    0x23509999,0x4f2a7148,0x110a2638,0x00000111,0x00000000,0x47288000,
    0x20283b39,0x80d540aa,0x8ac8d982,0x1b314ec6,0x8c27661b,0x91199c49,
    0x12828197,0x0aa8a223,0x1b986ee6,0xa46e482a,0x111282e5,0x55dccc11,
    0x25111110,0x50444202,0x0000144c,0x00000000,0x64000000,0x753372b9,
    0x542ab2aa,0x550c9803,0x5d221559,0xa44688b1,0x0b10911b,0x0bcb8872,
    0x26155555,0x5288a0aa,0x57b04d44,0xb854914c,0xa8442a29,0x0000aaaa,
    0x00000003,0x00000000,0x00000000,0x8cb86560,0x0aa8142a,0x10503530,
    0x2ea2c6e9,0x488dd223,0x439981d8,0x110080c8,0x022295dc,0x12099810,
    0x00000008,0x00000000,0x00000000,0x00000000,0x6cc31130,0x54c02839,
    0x2a201550,0x2f236a08,0x47a550e8,0x1b52d8da,0x4305d6dc,0x00005001,
    0x00000000,0x00000000,0x00000000,0x00000000,0x20000000,0x00002010,
    0x00aaaa98,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static signed short stb__times_11_latin1_x[224]={ 0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,
-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,
0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,
 };
static signed short stb__times_11_latin1_y[224]={ 8,1,1,1,0,1,1,1,1,1,1,2,7,5,
7,1,1,1,1,1,1,1,1,1,1,1,3,3,2,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,1,3,1,3,1,3,1,3,1,1,
1,1,1,3,3,3,3,3,3,3,2,3,3,3,3,3,3,1,1,1,4,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,3,1,1,2,1,
1,1,1,1,1,3,3,5,1,0,1,2,1,1,1,3,1,4,7,1,1,3,1,1,1,3,-1,-1,-1,-1,
-1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,2,1,-1,-1,-1,-1,-1,1,1,1,1,
1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,1,1,1,1,1,1,1,
 };
static unsigned short stb__times_11_latin1_w[224]={ 0,2,4,5,5,8,8,2,4,3,5,6,2,3,
2,3,5,3,5,5,5,5,5,5,5,5,2,3,6,6,6,5,9,8,7,7,7,6,6,8,7,4,4,8,
6,9,9,7,6,7,7,5,6,8,8,10,8,8,6,3,3,3,5,7,3,5,6,5,5,5,5,5,5,3,
3,6,3,8,5,5,6,5,4,4,3,5,5,8,5,5,5,4,2,4,6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,2,5,5,5,5,
2,5,4,8,4,5,6,3,8,7,4,6,3,3,2,6,6,2,3,3,3,5,8,8,8,4,8,8,8,8,
8,8,10,7,6,6,6,6,4,4,4,4,7,9,7,7,7,7,7,5,7,8,8,8,8,8,6,5,5,5,
5,5,5,5,7,5,5,5,5,5,3,3,3,3,5,5,5,5,5,5,5,6,5,5,5,5,5,5,6,5,
 };
static unsigned short stb__times_11_latin1_h[224]={ 0,8,4,8,9,8,8,4,10,10,5,6,3,2,
2,8,8,7,7,8,7,8,8,8,8,8,6,7,6,3,6,8,10,7,7,8,7,7,7,8,7,7,8,7,
7,7,8,8,7,9,7,8,7,8,8,8,7,7,7,9,8,9,4,2,2,6,8,6,8,6,7,8,7,7,
10,7,7,5,5,6,8,8,5,6,7,6,6,6,5,8,5,10,10,10,3,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,9,8,6,7,
10,9,2,8,4,6,3,2,8,1,4,6,4,4,2,8,10,2,3,4,4,6,8,8,8,8,9,9,9,9,
9,9,7,9,9,9,9,9,9,9,9,9,7,10,10,10,10,10,10,5,8,10,10,10,10,9,7,8,8,8,
8,8,8,8,6,7,8,8,8,8,7,7,7,7,8,7,8,8,8,8,8,5,6,8,8,8,8,10,10,10,
 };
static unsigned short stb__times_11_latin1_s[224]={ 253,253,107,46,174,139,204,125,66,148,79,
13,136,169,163,225,229,54,67,248,73,1,7,13,19,25,252,79,20,139,27,
40,40,88,37,52,127,135,150,69,142,83,98,58,120,164,118,128,157,6,174,
178,97,184,169,158,45,111,104,233,148,170,101,182,173,202,78,208,166,232,24,
148,12,251,20,244,240,41,56,196,91,109,62,191,203,214,226,182,50,152,67,
24,29,32,146,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,
30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,253,115,14,
103,220,18,37,198,177,60,112,246,153,169,31,190,92,34,97,117,160,241,50,
166,132,121,128,1,195,186,177,172,189,25,34,180,152,161,1,204,212,219,226,
246,43,48,1,20,214,71,81,89,97,105,113,73,59,121,130,139,57,237,207,
85,103,109,115,121,127,133,238,226,53,219,91,79,232,199,236,222,97,193,67,
73,213,154,235,85,7,136,142,85,160,14,7,1, };
static unsigned short stb__times_11_latin1_t[224]={ 10,1,39,22,1,12,12,39,1,1,39,
39,39,39,39,12,12,31,31,12,31,22,22,22,22,22,31,31,39,39,39,
22,1,31,31,22,31,31,31,22,31,31,22,31,31,31,22,22,31,12,31,
22,31,22,22,22,31,31,31,1,22,1,39,38,39,31,22,31,12,31,31,
12,31,22,1,22,22,39,39,31,22,22,39,31,22,31,31,31,39,22,39,
1,1,1,39,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,
31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,10,22,12,
22,31,31,1,1,39,22,39,31,39,39,22,38,39,39,39,39,39,12,1,
39,39,39,39,39,12,12,12,12,1,12,12,1,1,1,31,1,1,1,1,
1,12,12,12,12,22,1,1,1,1,1,1,39,12,1,1,1,1,1,22,
12,12,12,12,12,12,12,31,22,12,12,12,12,22,22,22,22,12,22,12,
12,12,12,12,39,39,22,22,22,12,1,1,1, };
static unsigned short stb__times_11_latin1_a[224]={ 40,53,65,79,79,132,124,29,
53,53,79,90,40,53,40,44,79,79,79,79,79,79,79,79,
79,79,44,44,90,90,90,71,146,115,106,106,115,97,88,115,
115,53,62,115,97,141,115,115,88,115,106,88,97,115,115,150,
115,115,97,53,44,53,75,79,53,71,79,71,79,71,53,79,
79,44,44,79,44,124,79,79,79,79,53,62,44,79,79,115,
79,79,71,76,32,76,86,124,124,124,124,124,124,124,124,124,
124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,
124,124,124,124,124,124,124,124,40,53,79,79,79,79,32,79,
53,121,44,79,90,53,121,79,64,87,48,48,53,92,72,40,
53,48,49,79,119,119,119,71,115,115,115,115,115,115,141,106,
97,97,97,97,53,53,53,53,115,115,115,115,115,115,115,90,
115,115,115,115,115,115,88,79,71,71,71,71,71,71,106,71,
71,71,71,71,44,44,44,44,79,79,79,79,79,79,79,87,
79,79,79,79,79,79,79,79, };

// Call this function with
//    font: NULL or array length
//    data: NULL or specified size
//    height: STB_FONT_times_11_latin1_BITMAP_HEIGHT or STB_FONT_times_11_latin1_BITMAP_HEIGHT_POW2
//    return value: spacing between lines
static void stb_font_times_11_latin1(stb_fontchar font[STB_FONT_times_11_latin1_NUM_CHARS],
                unsigned char data[STB_FONT_times_11_latin1_BITMAP_HEIGHT][STB_FONT_times_11_latin1_BITMAP_WIDTH],
                int height)
{
    int i,j;
    if (data != 0) {
        unsigned int *bits = stb__times_11_latin1_pixels;
        unsigned int bitpack = *bits++, numbits = 32;
        for (i=0; i < STB_FONT_times_11_latin1_BITMAP_WIDTH*height; ++i)
            data[0][i] = 0;  // zero entire bitmap
        for (j=1; j < STB_FONT_times_11_latin1_BITMAP_HEIGHT-1; ++j) {
            for (i=1; i < STB_FONT_times_11_latin1_BITMAP_WIDTH-1; ++i) {
                unsigned int value;
                if (numbits==0) bitpack = *bits++, numbits=32;
                value = bitpack & 1;
                bitpack >>= 1, --numbits;
                if (value) {
                    if (numbits < 3) bitpack = *bits++, numbits = 32;
                    data[j][i] = (bitpack & 7) * 0x20 + 0x1f;
                    bitpack >>= 3, numbits -= 3;
                } else {
                    data[j][i] = 0;
                }
            }
        }
    }

    // build font description
    if (font != 0) {
        float recip_width = 1.0f / STB_FONT_times_11_latin1_BITMAP_WIDTH;
        float recip_height = 1.0f / height;
        for (i=0; i < STB_FONT_times_11_latin1_NUM_CHARS; ++i) {
            // pad characters so they bilerp from empty space around each character
            font[i].s0 = (stb__times_11_latin1_s[i]) * recip_width;
            font[i].t0 = (stb__times_11_latin1_t[i]) * recip_height;
            font[i].s1 = (stb__times_11_latin1_s[i] + stb__times_11_latin1_w[i]) * recip_width;
            font[i].t1 = (stb__times_11_latin1_t[i] + stb__times_11_latin1_h[i]) * recip_height;
            font[i].x0 = stb__times_11_latin1_x[i];
            font[i].y0 = stb__times_11_latin1_y[i];
            font[i].x1 = stb__times_11_latin1_x[i] + stb__times_11_latin1_w[i];
            font[i].y1 = stb__times_11_latin1_y[i] + stb__times_11_latin1_h[i];
            font[i].advance_int = (stb__times_11_latin1_a[i]+8)>>4;
            font[i].s0f = (stb__times_11_latin1_s[i] - 0.5f) * recip_width;
            font[i].t0f = (stb__times_11_latin1_t[i] - 0.5f) * recip_height;
            font[i].s1f = (stb__times_11_latin1_s[i] + stb__times_11_latin1_w[i] + 0.5f) * recip_width;
            font[i].t1f = (stb__times_11_latin1_t[i] + stb__times_11_latin1_h[i] + 0.5f) * recip_height;
            font[i].x0f = stb__times_11_latin1_x[i] - 0.5f;
            font[i].y0f = stb__times_11_latin1_y[i] - 0.5f;
            font[i].x1f = stb__times_11_latin1_x[i] + stb__times_11_latin1_w[i] + 0.5f;
            font[i].y1f = stb__times_11_latin1_y[i] + stb__times_11_latin1_h[i] + 0.5f;
            font[i].advance = stb__times_11_latin1_a[i]/16.0f;
        }
    }
}

#ifndef STB_SOMEFONT_CREATE
#define STB_SOMEFONT_CREATE              stb_font_times_11_latin1
#define STB_SOMEFONT_BITMAP_WIDTH        STB_FONT_times_11_latin1_BITMAP_WIDTH
#define STB_SOMEFONT_BITMAP_HEIGHT       STB_FONT_times_11_latin1_BITMAP_HEIGHT
#define STB_SOMEFONT_BITMAP_HEIGHT_POW2  STB_FONT_times_11_latin1_BITMAP_HEIGHT_POW2
#define STB_SOMEFONT_FIRST_CHAR          STB_FONT_times_11_latin1_FIRST_CHAR
#define STB_SOMEFONT_NUM_CHARS           STB_FONT_times_11_latin1_NUM_CHARS
#define STB_SOMEFONT_LINE_SPACING        STB_FONT_times_11_latin1_LINE_SPACING
#endif

